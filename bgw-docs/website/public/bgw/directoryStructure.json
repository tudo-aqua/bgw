{
  "tools.aqua.bgw.animation": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.animation",
    "packageName": "tools.aqua.bgw.animation",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "abstract class Animation(val duration: Int)",
          "brief": "[Animation](Animation) baseclass."
        },
        {
          "signature": "sealed class ComponentAnimation<T : ComponentView> : Animation",
          "brief": "[ComponentAnimation](ComponentAnimation) baseclass."
        },
        {
          "signature": "class DelayAnimation(val duration: Int = DEFAULT_ANIMATION_DURATION) : Animation",
          "brief": "An asynchronous delay that fires onFinished after given duration."
        },
        {
          "signature": "class DiceAnimation<T : DiceView>(dice: T, val toSide: Int, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED) : SteppedComponentAnimation<T>",
          "brief": "A dice roll [Animation](Animation)."
        },
        {
          "signature": "class FadeAnimation<T : ComponentView>(componentView: T, fromOpacity: Number = componentView.opacity, toOpacity: Number = componentView.opacity, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
          "brief": "A fade [Animation](Animation)."
        },
        {
          "signature": "class FlipAnimation<T : ComponentView>(componentView: T, val fromVisual: Visual = componentView.visual, val toVisual: Visual, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
          "brief": "A flip [Animation](Animation)."
        },
        {
          "signature": "class MovementAnimation<T : ComponentView>(componentView: T, fromX: Number = componentView.posX, toX: Number = componentView.posX, fromY: Number = componentView.posY, toY: Number = componentView.posY, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
          "brief": "A movement [Animation](Animation)."
        },
        {
          "signature": "data class ParallelAnimation(val animations: List<Animation>) : Animation",
          "brief": "An [Animation](Animation) consisting of multiple Animations that are played in parallel, when this [ParallelAnimation](ParallelAnimation) is played."
        },
        {
          "signature": "class RandomizeAnimation<T : ComponentView>(componentView: T, val visuals: List<Visual>, val toVisual: Visual, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED) : SteppedComponentAnimation<T>",
          "brief": "A randomization [Animation](Animation) that shuffles between different visuals."
        },
        {
          "signature": "class RotationAnimation<T : ComponentView>(componentView: T, fromAngle: Number = componentView.rotation, toAngle: Number = componentView.rotation, duration: Int = DEFAULT_ANIMATION_DURATION) : ComponentAnimation<T>",
          "brief": "A rotation [Animation](Animation)."
        },
        {
          "signature": "class ScaleAnimation<T : ComponentView>(componentView: T, fromScaleX: Number = componentView.scaleX, toScaleX: Number = componentView.scaleX, fromScaleY: Number = componentView.scaleY, toScaleY: Number = componentView.scaleY, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
          "brief": "A scale [Animation](Animation)."
        },
        {
          "signature": "data class SequentialAnimation(val animations: List<Animation>) : Animation",
          "brief": "An [Animation](Animation) consisting of multiple Animations that is played in sequence, when this [SequentialAnimation](SequentialAnimation) is played."
        },
        {
          "signature": "sealed class SteppedComponentAnimation<T : ComponentView> : ComponentAnimation<T>",
          "brief": "[SteppedComponentAnimation](SteppedComponentAnimation) baseclass."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "Animation": {
        "type": "directory",
        "originalName": "-animation",
        "packageName": "tools.aqua.bgw.animation.Animation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "ComponentAnimation": {
        "type": "directory",
        "originalName": "-component-animation",
        "packageName": "tools.aqua.bgw.animation.ComponentAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "type": "[T]()",
              "defaultValue": "",
              "brief": "[ComponentView](tools.aqua.bgw.components.ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Duration in milliseconds."
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event.AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked when [Animation](Animation) has finished."
            }
          ],
          "functions": []
        },
        "children": {}
      },
      "DelayAnimation": {
        "type": "directory",
        "originalName": "-delay-animation",
        "packageName": "tools.aqua.bgw.animation.DelayAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(duration: Int = DEFAULT_ANIMATION_DURATION)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_DURATION",
                  "brief": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core)."
                }
              ],
              "brief": "Creates a [DelayAnimation]() with given duration."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Duration in milliseconds."
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event.AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked when [Animation](Animation) has finished."
            }
          ],
          "functions": []
        },
        "children": {}
      },
      "DiceAnimation": {
        "type": "directory",
        "originalName": "-dice-animation",
        "packageName": "tools.aqua.bgw.animation.DiceAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "FadeAnimation": {
        "type": "directory",
        "originalName": "-fade-animation",
        "packageName": "tools.aqua.bgw.animation.FadeAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(componentView: T, fromOpacity: Number = componentView.opacity, toOpacity: Number = componentView.opacity, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "componentView",
                  "type": "[T]()",
                  "defaultValue": "",
                  "brief": "[ComponentView](tools.aqua.bgw.components.ComponentView) to animate."
                },
                {
                  "modifier": "",
                  "name": "fromOpacity",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "componentView.opacity",
                  "brief": "Initial opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components.ComponentView)."
                },
                {
                  "modifier": "",
                  "name": "toOpacity",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "componentView.opacity",
                  "brief": "Resulting opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components.ComponentView)."
                },
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_SPEED",
                  "brief": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core)."
                }
              ],
              "brief": "Creates a [FadeAnimation]() for the given [ComponentView](tools.aqua.bgw.components.ComponentView)."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "type": "[T]()",
              "defaultValue": "",
              "brief": "[ComponentView](tools.aqua.bgw.components.ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Duration in milliseconds."
            },
            {
              "signature": "val fromOpacity: Double",
              "modifier": "val",
              "name": "fromOpacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Initial X position."
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event.AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked when [Animation](Animation) has finished."
            },
            {
              "signature": "val toOpacity: Double",
              "modifier": "val",
              "name": "toOpacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Resulting X position."
            }
          ],
          "functions": []
        },
        "children": {}
      },
      "FlipAnimation": {
        "type": "directory",
        "originalName": "-flip-animation",
        "packageName": "tools.aqua.bgw.animation.FlipAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "MovementAnimation": {
        "type": "directory",
        "originalName": "-movement-animation",
        "packageName": "tools.aqua.bgw.animation.MovementAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.animation.MovementAnimation.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "ParallelAnimation": {
        "type": "directory",
        "originalName": "-parallel-animation",
        "packageName": "tools.aqua.bgw.animation.ParallelAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "RandomizeAnimation": {
        "type": "directory",
        "originalName": "-randomize-animation",
        "packageName": "tools.aqua.bgw.animation.RandomizeAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "RotationAnimation": {
        "type": "directory",
        "originalName": "-rotation-animation",
        "packageName": "tools.aqua.bgw.animation.RotationAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "ScaleAnimation": {
        "type": "directory",
        "originalName": "-scale-animation",
        "packageName": "tools.aqua.bgw.animation.ScaleAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "SequentialAnimation": {
        "type": "directory",
        "originalName": "-sequential-animation",
        "packageName": "tools.aqua.bgw.animation.SequentialAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "SteppedComponentAnimation": {
        "type": "directory",
        "originalName": "-stepped-component-animation",
        "packageName": "tools.aqua.bgw.animation.SteppedComponentAnimation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "type": "[T]()",
              "defaultValue": "",
              "brief": "[ComponentView](tools.aqua.bgw.components.ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Duration in milliseconds."
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event.AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked when [Animation](Animation) has finished."
            },
            {
              "signature": "val speed: Int",
              "modifier": "val",
              "name": "speed",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Speed in steps."
            }
          ],
          "functions": []
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.application": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.application",
    "packageName": "tools.aqua.bgw.application",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "interface Application",
          "brief": ""
        },
        {
          "signature": "object Constants",
          "brief": ""
        },
        {
          "signature": "class JCEFApplication : Application",
          "brief": ""
        },
        {
          "signature": "class MainFrame(startURL: String = \"http://localhost\", useOSR: Boolean = false, isTransparent: Boolean = false, loadCallback: (Any) -> Unit) : JFrame",
          "brief": ""
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "Application": {
        "type": "directory",
        "originalName": "-application",
        "packageName": "tools.aqua.bgw.application.Application",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "abstract fun registerEventListeners(component: ComponentView)",
              "name": "registerEventListeners",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "",
              "isSuspend": false
            },
            {
              "signature": "abstract fun start(callback: (Any) -> Unit)",
              "name": "start",
              "parameters": [
                {
                  "modifier": "",
                  "name": "callback",
                  "type": "([Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "",
              "isSuspend": false
            },
            {
              "signature": "abstract fun stop()",
              "name": "stop",
              "parameters": [],
              "returnType": "Unit",
              "brief": ""
            }
          ]
        },
        "children": {}
      },
      "Constants": {
        "type": "directory",
        "originalName": "-constants",
        "packageName": "tools.aqua.bgw.application.Constants",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val PORT: Int",
              "modifier": "val",
              "name": "PORT",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": []
        },
        "children": {}
      },
      "JCEFApplication": {
        "type": "directory",
        "originalName": "-j-c-e-f-application",
        "packageName": "tools.aqua.bgw.application.JCEFApplication",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "MainFrame": {
        "type": "directory",
        "originalName": "-main-frame",
        "packageName": "tools.aqua.bgw.application.MainFrame",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.binding": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.binding",
    "packageName": "tools.aqua.bgw.binding",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "class Channel(val path: String = \"/ws\")",
          "brief": ""
        }
      ],
      "properties": [
        {
          "signature": "val componentChannel: Channel",
          "modifier": "val",
          "name": "componentChannel",
          "type": "[Channel](Channel)",
          "defaultValue": "",
          "brief": ""
        },
        {
          "signature": "val internalChannel: Channel",
          "modifier": "val",
          "name": "internalChannel",
          "type": "[Channel](Channel)",
          "defaultValue": "",
          "brief": ""
        },
        {
          "signature": "val messageQueue: MutableList<Action>",
          "modifier": "val",
          "name": "messageQueue",
          "type": "[MutableList](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/index.html)<[Action]([root].Action)>",
          "defaultValue": "",
          "brief": ""
        },
        {
          "signature": "var uiJob: Deferred<Unit>",
          "modifier": "var",
          "name": "uiJob",
          "type": "Deferred<[Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)>",
          "defaultValue": "",
          "brief": ""
        }
      ],
      "functions": []
    },
    "children": {
      "Channel": {
        "type": "directory",
        "originalName": "-channel",
        "packageName": "tools.aqua.bgw.binding.Channel",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.components": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.components",
    "packageName": "tools.aqua.bgw.components",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "abstract class ComponentView",
          "brief": "[ComponentView](ComponentView) is the abstract baseclass of all framework components."
        },
        {
          "signature": "abstract class DynamicComponentView : ComponentView",
          "brief": "Baseclass for all ComponentViews that can be draggable."
        },
        {
          "signature": "interface LayeredContainer<T : ComponentView>",
          "brief": "An interface that describes a container which can hold [ComponentView](ComponentView) that can be layered."
        },
        {
          "signature": "class RootComponent<T : ComponentView> : ComponentView, LayeredContainer<T>",
          "brief": "The root component in the view hierarchy of a [Scene](tools.aqua.bgw.core.Scene)."
        },
        {
          "signature": "abstract class StaticComponentView<T : ComponentView> : ComponentView",
          "brief": "Baseclass for all ComponentViews that are considered static."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "ComponentView": {
        "type": "directory",
        "originalName": "-component-view",
        "packageName": "tools.aqua.bgw.components.ComponentView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height]() for this [ComponentView]() considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView]() considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView]() considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width]() for this [ComponentView]() considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView]() is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height]() for this [ComponentView]()."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height]() of this [ComponentView]()."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView]() to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView]() to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView]() is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView]() is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView]()."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView]()."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView]() and the [dropAcceptor]() returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView]() while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView]() while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView]() has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView]() has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView]() has focus. Gets invoked after [onKeyPressed]()."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](). Gets invoked after [onMousePressed]() and [onMouseReleased]()."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView]()."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView]()."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView]()."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView]()."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView]()."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView]()."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity]() of this [ComponentView]()."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView]()?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView]()."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView]()."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView]()."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView]()."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView]()."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView]() in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView]() in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView]()."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView]()."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView]()."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView]()."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView]()."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width]() for this [ComponentView]()."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width]() of this [ComponentView]()."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView]() inside of [parent]().#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView]() inside of [parent]().#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView]()'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView]()",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView]() to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView]() to the specified [width]() and [height]().",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView]() by the given number of [degrees]().",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView]() by the given [scalar]().",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView]()'s width by the given [scalar]().",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView]()'s height by the given [scalar]().",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView]() to the back inside its [parent]() and Changes its [zIndex]() accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView]() to the front inside its [parent]() and Changes its [zIndex]() accordingly."
            }
          ]
        },
        "children": {}
      },
      "DynamicComponentView": {
        "type": "directory",
        "originalName": "-dynamic-component-view",
        "packageName": "tools.aqua.bgw.components.DynamicComponentView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height]([ComponentView](ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width]([ComponentView](ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height]([ComponentView](ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](ComponentView) and the [dropAcceptor](ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](ComponentView) has focus. Gets invoked after [onKeyPressed](ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](ComponentView). Gets invoked after [onMousePressed](ComponentView) and [onMouseReleased](ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width]([ComponentView](ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](ComponentView) inside of [parent](ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](ComponentView) inside of [parent](ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](ComponentView) to the specified [width](ComponentView) and [height](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](ComponentView) by the given number of [degrees](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView) by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView)'s width by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView)'s height by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](ComponentView) to the back inside its [parent](ComponentView) and Changes its [zIndex](ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](ComponentView) to the front inside its [parent](ComponentView) and Changes its [zIndex](ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "LayeredContainer": {
        "type": "directory",
        "originalName": "-layered-container",
        "packageName": "tools.aqua.bgw.components.LayeredContainer",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "abstract fun setZIndex(component: T, zIndex: Int)",
              "name": "setZIndex",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "zIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Puts the [component]() in the appropriate place compared to the other components by the [zIndex]().",
              "isSuspend": false
            },
            {
              "signature": "abstract fun toBack(component: T)",
              "name": "toBack",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Puts the [component]() to the back inside the [LayeredContainer]().",
              "isSuspend": false
            },
            {
              "signature": "abstract fun toFront(component: T)",
              "name": "toFront",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Puts the [component]() to the front inside the [LayeredContainer]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "RootComponent": {
        "type": "directory",
        "originalName": "-root-component",
        "packageName": "tools.aqua.bgw.components.RootComponent",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height]([ComponentView](ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width]([ComponentView](ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height]([ComponentView](ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](ComponentView) and the [dropAcceptor](ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](ComponentView) has focus. Gets invoked after [onKeyPressed](ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](ComponentView). Gets invoked after [onMousePressed](ComponentView) and [onMouseReleased](ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scene: Scene<T>",
              "modifier": "val",
              "name": "scene",
              "type": "[Scene](tools.aqua.bgw.core.Scene)<[T]()>",
              "defaultValue": "",
              "brief": "Scene of this root component."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width]([ComponentView](ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](ComponentView) inside of [parent](ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](ComponentView) inside of [parent](ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](ComponentView) to the specified [width](ComponentView) and [height](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](ComponentView) by the given number of [degrees](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView) by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView)'s width by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView)'s height by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](ComponentView) to the back inside its [parent](ComponentView) and Changes its [zIndex](ComponentView) accordingly.Puts the [component]() to the back inside the [LayeredContainer](LayeredContainer) and Changes its zIndex accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](ComponentView) to the front inside its [parent](ComponentView) and Changes its [zIndex](ComponentView) accordingly.Puts the [component]() to the front inside the [LayeredContainer](LayeredContainer) and Changes its zIndex accordingly."
            }
          ]
        },
        "children": {}
      },
      "StaticComponentView": {
        "type": "directory",
        "originalName": "-static-component-view",
        "packageName": "tools.aqua.bgw.components.StaticComponentView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height]([ComponentView](ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width]([ComponentView](ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height]([ComponentView](ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](ComponentView) and the [dropAcceptor](ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](ComponentView) has focus. Gets invoked after [onKeyPressed](ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](ComponentView). Gets invoked after [onMousePressed](ComponentView) and [onMouseReleased](ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width]([ComponentView](ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width]([ComponentView](ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](ComponentView) inside of [parent](ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](ComponentView) inside of [parent](ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](ComponentView) to the specified [width](ComponentView) and [height](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](ComponentView) by the given number of [degrees](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView) by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView)'s width by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](ComponentView)'s height by the given [scalar](ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](ComponentView) to the back inside its [parent](ComponentView) and Changes its [zIndex](ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](ComponentView) to the front inside its [parent](ComponentView) and Changes its [zIndex](ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.components.container": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.components.container",
    "packageName": "tools.aqua.bgw.components.container",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class Area<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_AREA_WIDTH, height: Number = DEFAULT_AREA_HEIGHT, visual: Visual = Visual.EMPTY) : GameComponentContainer<T>",
          "brief": "An [Area](Area) may be used to visualize a zone containing GameComponentViews."
        },
        {
          "signature": "open class CardStack<T : CardView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_STACK_WIDTH, height: Number = DEFAULT_CARD_STACK_HEIGHT, alignment: Alignment = Alignment.CENTER, visual: Visual = Visual.EMPTY) : GameComponentContainer<T>",
          "brief": "A CardStackView may be used to visualize a card stack."
        },
        {
          "signature": "sealed class GameComponentContainer<T : DynamicComponentView> : DynamicComponentView, Iterable<T> , LayeredContainer<T>",
          "brief": "Baseclass for containers that can contain GameComponentViews or its subclasses."
        },
        {
          "signature": "class HexagonGrid<T : HexagonView>(posX: Number = 0, posY: Number = 0, width: Number = 0, height: Number = 0, visual: Visual = Visual.EMPTY, val coordinateSystem: HexagonGrid.CoordinateSystem = CoordinateSystem.OFFSET) : GameComponentContainer<T>",
          "brief": "A class representing a grid of hexagons."
        },
        {
          "signature": "open class LinearLayout<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LINEAR_LAYOUT_WIDTH, height: Number = DEFAULT_LINEAR_LAYOUT_HEIGHT, spacing: Number = DEFAULT_LINEAR_LAYOUT_SPACING, visual: Visual = Visual.EMPTY, orientation: Orientation = Orientation.HORIZONTAL, alignment: Alignment = Alignment.TOP_LEFT) : GameComponentContainer<T>",
          "brief": "A [LinearLayout](LinearLayout) may be used to visualize a zone containing GameComponentViews."
        },
        {
          "signature": "open class Satchel<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_SATCHEL_WIDTH, height: Number = DEFAULT_SATCHEL_HEIGHT, visual: Visual = Visual.EMPTY) : GameComponentContainer<T>",
          "brief": "A [Satchel](Satchel) may be used to visualize a pool containing GameComponentViews."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "Area": {
        "type": "directory",
        "originalName": "-area",
        "packageName": "tools.aqua.bgw.components.container.Area",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_AREA_WIDTH, height: Number = DEFAULT_AREA_HEIGHT, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [Area](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [Area](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_AREA_WIDTH",
                  "brief": "Width for this [Area](). Default: [DEFAULT_AREA_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_AREA_HEIGHT",
                  "brief": "Height for this [Area](). Default: [DEFAULT_AREA_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Visual for this [Area](). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)."
                }
              ],
              "brief": "Creates an [Area]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "GameComponentViews that are contained in this [GameComponentContainer](GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is added to this [GameComponentContainer](GameComponentContainer) with the added GameComponentView as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is removed from this [GameComponentContainer](GameComponentContainer) with the removed GameComponentView as its receiver."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](GameComponentContainer).Adds all GameComponentViews contained in [collection](Satchel) to this GameComponentContainer.",
              "isSuspend": false
            },
            {
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "addComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [ValueObserver](tools.aqua.bgw.observable.ValueObserver) on the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponentsListener()",
              "name": "clearComponentsListener",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners from the observableComponents list."
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "parameters": [],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the size of the [components](GameComponentContainer) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "removeComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes a [listener](Satchel) from the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component](Satchel) to the back inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component](Satchel) to the front inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            }
          ]
        },
        "children": {}
      },
      "CardStack": {
        "type": "directory",
        "originalName": "-card-stack",
        "packageName": "tools.aqua.bgw.components.container.CardStack",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_STACK_WIDTH, height: Number = DEFAULT_CARD_STACK_HEIGHT, alignment: Alignment = Alignment.CENTER, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [CardStack](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [CardStack](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_STACK_WIDTH",
                  "brief": "Width for this [CardStack](). Default: [DEFAULT_CARD_STACK_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_STACK_HEIGHT",
                  "brief": "Height for this [CardStack](). Default: [DEFAULT_CARD_STACK_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER",
                  "brief": "Specifies how the contained CardViews should be aligned. Default: [Alignment.CENTER](tools.aqua.bgw.core.Alignment.CENTER)"
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Visual for this [CardStack](). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)."
                }
              ],
              "brief": "Creates a [CardStack]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of CardViews in this [CardStack]()."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of CardViews in this [CardStack]()."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "GameComponentViews that are contained in this [GameComponentContainer](GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is added to this [GameComponentContainer](GameComponentContainer) with the added GameComponentView as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is removed from this [GameComponentContainer](GameComponentContainer) with the removed GameComponentView as its receiver."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](GameComponentContainer).Adds all GameComponentViews contained in [collection]() to this GameComponentContainer.",
              "isSuspend": false
            },
            {
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "addComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [ValueObserver](tools.aqua.bgw.observable.ValueObserver) on the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponentsListener()",
              "name": "clearComponentsListener",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners from the observableComponents list."
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "parameters": [],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the size of the [components](GameComponentContainer) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun peek(): T",
              "name": "peek",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Returns the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews.CardView). Does not modify the [CardStack]()."
            },
            {
              "signature": "fun peekOrNull(): T?",
              "name": "peekOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Returns the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews.CardView), or null, if the stack is empty. Does not modify the [CardStack]() ."
            },
            {
              "signature": "fun pop(): T",
              "name": "pop",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Pops the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews.CardView) from this [CardStack]() and returns it. Removes it from the CardStack."
            },
            {
              "signature": "fun popOrNull(): T?",
              "name": "popOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Pops the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews.CardView) from this [CardStack]() and returns it, or null, if the stack is empty. Removes it from the CardStack."
            },
            {
              "signature": "fun push(cardView: T)",
              "name": "push",
              "parameters": [
                {
                  "modifier": "",
                  "name": "cardView",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [CardView](tools.aqua.bgw.components.gamecomponentviews.CardView) on top of this [CardStack]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "removeComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes a [listener]() from the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the back inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the front inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            }
          ]
        },
        "children": {}
      },
      "GameComponentContainer": {
        "type": "directory",
        "originalName": "-game-component-container",
        "packageName": "tools.aqua.bgw.components.container.GameComponentContainer",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "GameComponentViews that are contained in this [GameComponentContainer]()."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is added to this [GameComponentContainer]() with the added GameComponentView as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is removed from this [GameComponentContainer]() with the removed GameComponentView as its receiver."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer]().Adds all GameComponentViews contained in [collection]() to this GameComponentContainer.",
              "isSuspend": false
            },
            {
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "addComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [ValueObserver](tools.aqua.bgw.observable.ValueObserver) on the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponentsListener()",
              "name": "clearComponentsListener",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners from the observableComponents list."
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components]() list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components]() list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "parameters": [],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the size of the [components]() list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "removeComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes a [listener]() from the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the back inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the front inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            }
          ]
        },
        "children": {}
      },
      "HexagonGrid": {
        "type": "directory",
        "originalName": "-hexagon-grid",
        "packageName": "tools.aqua.bgw.components.container.HexagonGrid",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = 0, height: Number = 0, visual: Visual = Visual.EMPTY, coordinateSystem: HexagonGrid.CoordinateSystem = CoordinateSystem.OFFSET)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The x-coordinate of the hexagon grid's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The y-coordinate of the hexagon grid's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The width of the hexagon grid. It grows dynamically by the amount hexagons in it."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The height of the hexagon grid. It grows dynamically by the amount hexagons in it."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "The visual representation of the hexagon grid. Default is an empty visual."
                },
                {
                  "modifier": "",
                  "name": "coordinateSystem",
                  "type": "[HexagonGrid.CoordinateSystem](CoordinateSystem)",
                  "defaultValue": "CoordinateSystem.OFFSET",
                  "brief": "The coordinate system to use for the grid. Default is CoordinateSystem.OFFSET."
                }
              ],
              "brief": ""
            }
          ],
          "types": [
            {
              "signature": "enum CoordinateSystem : Enum<HexagonGrid.CoordinateSystem>",
              "brief": "Enumeration class representing the coordinate system options for the hexagon grid."
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "GameComponentViews that are contained in this [GameComponentContainer](GameComponentContainer)."
            },
            {
              "signature": "val coordinateSystem: HexagonGrid.CoordinateSystem",
              "modifier": "val",
              "name": "coordinateSystem",
              "type": "[HexagonGrid.CoordinateSystem](CoordinateSystem)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val map: MutableMap<OffsetCoordinate, T>",
              "modifier": "val",
              "name": "map",
              "type": "[MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html)<OffsetCoordinate, [T]()>",
              "defaultValue": "",
              "brief": "A mutable map that stores the hexagons in the grid."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is added to this [GameComponentContainer](GameComponentContainer) with the added GameComponentView as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is removed from this [GameComponentContainer](GameComponentContainer) with the removed GameComponentView as its receiver."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](GameComponentContainer).Adds all GameComponentViews contained in [collection]() to this GameComponentContainer.",
              "isSuspend": false
            },
            {
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "addComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [ValueObserver](tools.aqua.bgw.observable.ValueObserver) on the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponentsListener()",
              "name": "clearComponentsListener",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners from the observableComponents list."
            },
            {
              "signature": "operator fun get(columnIndex: Int, rowIndex: Int): T?",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()?",
              "brief": "Gets the hexagon at the specified column index and row index.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "parameters": [],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the size of the [components](GameComponentContainer) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "removeComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes a [listener]() from the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(columnIndex: Int, rowIndex: Int, component: T)",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "component",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets the hexagon at the specified column index and row index.",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the back inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the front inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            }
          ]
        },
        "children": {
          "CoordinateSystem": {
            "type": "directory",
            "originalName": "-coordinate-system",
            "packageName": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val entries: EnumEntries<HexagonGrid.CoordinateSystem>",
                  "modifier": "val",
                  "name": "entries",
                  "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[HexagonGrid.CoordinateSystem]()>",
                  "defaultValue": "",
                  "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": [
                {
                  "signature": "fun valueOf(value: String): HexagonGrid.CoordinateSystem",
                  "name": "valueOf",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "value",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[HexagonGrid.CoordinateSystem]()",
                  "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                  "isSuspend": false
                },
                {
                  "signature": "fun values(): Array<HexagonGrid.CoordinateSystem>",
                  "name": "values",
                  "parameters": [],
                  "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[HexagonGrid.CoordinateSystem]()>",
                  "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
                }
              ]
            },
            "children": {
              "AXIAL": {
                "type": "directory",
                "originalName": "-a-x-i-a-l",
                "packageName": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.AXIAL",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "OFFSET": {
                "type": "directory",
                "originalName": "-o-f-f-s-e-t",
                "packageName": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.OFFSET",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              }
            }
          }
        }
      },
      "LinearLayout": {
        "type": "directory",
        "originalName": "-linear-layout",
        "packageName": "tools.aqua.bgw.components.container.LinearLayout",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Satchel": {
        "type": "directory",
        "originalName": "-satchel",
        "packageName": "tools.aqua.bgw.components.container.Satchel",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_SATCHEL_WIDTH, height: Number = DEFAULT_SATCHEL_HEIGHT, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "horizontal coordinate for this [Satchel](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "vertical coordinate for this [Satchel](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SATCHEL_WIDTH",
                  "brief": "width for this [Satchel](). Default: [DEFAULT_SATCHEL_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SATCHEL_HEIGHT",
                  "brief": "height for this [Satchel](). Default: [DEFAULT_SATCHEL_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "visual for this [Satchel](). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)."
                }
              ],
              "brief": "Creates a [Satchel]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "GameComponentViews that are contained in this [GameComponentContainer](GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is added to this [GameComponentContainer](GameComponentContainer) with the added GameComponentView as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView) is removed from this [GameComponentContainer](GameComponentContainer) with the removed GameComponentView as its receiver."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](GameComponentContainer).Adds all GameComponentViews contained in [collection]() to this GameComponentContainer.",
              "isSuspend": false
            },
            {
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "addComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [ValueObserver](tools.aqua.bgw.observable.ValueObserver) on the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponentsListener()",
              "name": "clearComponentsListener",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners from the observableComponents list."
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the [components](GameComponentContainer) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "parameters": [],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the size of the [components](GameComponentContainer) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "removeComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes a [listener]() from the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the back inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the front inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer) and Changes its zIndex accordingly."
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.components.gamecomponentviews": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.components.gamecomponentviews",
    "packageName": "tools.aqua.bgw.components.gamecomponentviews",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class CardView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_WIDTH, height: Number = DEFAULT_CARD_HEIGHT, front: Visual, back: Visual = front) : GameComponentView",
          "brief": "A [CardView](CardView) may be used to visualize a card."
        },
        {
          "signature": "open class DiceView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_DICE_WIDTH, height: Number = DEFAULT_DICE_HEIGHT, visuals: List<Visual>) : GameComponentView",
          "brief": "A [DiceView](DiceView) may be used to visualize a dice."
        },
        {
          "signature": "sealed class GameComponentView : DynamicComponentView",
          "brief": "Abstract baseclass for game components like CardViews or TokenViews."
        },
        {
          "signature": "open class HexagonView(posX: Number = 0, posY: Number = 0, val size: Number = DEFAULT_HEXAGON_SIZE, visual: Visual, var orientation: HexOrientation = HexOrientation.POINTY_TOP) : GameComponentView",
          "brief": "A [HexagonView](HexagonView) represents a hexagonal shaped game component view."
        },
        {
          "signature": "open class TokenView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOKEN_WIDTH, height: Number = DEFAULT_TOKEN_HEIGHT, visual: Visual) : GameComponentView",
          "brief": "A [TokenView](TokenView) may be used to visualize any kind of token."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "CardView": {
        "type": "directory",
        "originalName": "-card-view",
        "packageName": "tools.aqua.bgw.components.gamecomponentviews.CardView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_WIDTH, height: Number = DEFAULT_CARD_HEIGHT, front: Visual, back: Visual = front)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [CardView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [CardView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_WIDTH",
                  "brief": "Width for this [CardView](). Default: [DEFAULT_CARD_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_HEIGHT",
                  "brief": "Height for this [CardView](). Default: [DEFAULT_CARD_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "front",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "",
                  "brief": "Visual to represent the front side of the card."
                },
                {
                  "modifier": "",
                  "name": "back",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "front",
                  "brief": "[Visual](tools.aqua.bgw.visual.Visual) to represent the back side of the card. Default: same Visual as front."
                }
              ],
              "brief": "Creates a [CardView]() with given Visuals."
            }
          ],
          "types": [
            {
              "signature": "enum CardSide : Enum<CardView.CardSide>",
              "brief": "Enum for the card sides [FRONT](CardSide.FRONT) and [BACK](CardSide.BACK) with their visual indices."
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backVisual: Visual",
              "modifier": "var",
              "name": "backVisual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Back [Visual](tools.aqua.bgw.visual.Visual) for this [CardView]()."
            },
            {
              "signature": "var currentSide: CardView.CardSide",
              "modifier": "var",
              "name": "currentSide",
              "type": "[CardView.CardSide](CardSide)",
              "defaultValue": "",
              "brief": "The current [CardSide](CardSide) that is displayed."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var frontVisual: Visual",
              "modifier": "var",
              "name": "frontVisual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Front [Visual](tools.aqua.bgw.visual.Visual) for this [CardView]()."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open override var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun flip()",
              "name": "flip",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Flips the [CardView]() by seting the [currentSide]() to the other value."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun showBack()",
              "name": "showBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Sets the [currentSide]() to be displayed to [CardSide.BACK](CardSide.BACK)."
            },
            {
              "signature": "fun showCardSide(side: CardView.CardSide)",
              "name": "showCardSide",
              "parameters": [
                {
                  "modifier": "",
                  "name": "side",
                  "type": "[CardView.CardSide](CardSide)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets the [currentSide]() to the parameter value.",
              "isSuspend": false
            },
            {
              "signature": "fun showFront()",
              "name": "showFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Sets the [currentSide]() to be displayed to [CardSide.FRONT](CardSide.FRONT)."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {
          "CardSide": {
            "type": "directory",
            "originalName": "-card-side",
            "packageName": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val entries: EnumEntries<CardView.CardSide>",
                  "modifier": "val",
                  "name": "entries",
                  "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[CardView.CardSide]()>",
                  "defaultValue": "",
                  "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": [
                {
                  "signature": "fun valueOf(value: String): CardView.CardSide",
                  "name": "valueOf",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "value",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[CardView.CardSide]()",
                  "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                  "isSuspend": false
                },
                {
                  "signature": "fun values(): Array<CardView.CardSide>",
                  "name": "values",
                  "parameters": [],
                  "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[CardView.CardSide]()>",
                  "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
                }
              ]
            },
            "children": {
              "BACK": {
                "type": "directory",
                "originalName": "-b-a-c-k",
                "packageName": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.BACK",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "FRONT": {
                "type": "directory",
                "originalName": "-f-r-o-n-t",
                "packageName": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.FRONT",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              }
            }
          }
        }
      },
      "DiceView": {
        "type": "directory",
        "originalName": "-dice-view",
        "packageName": "tools.aqua.bgw.components.gamecomponentviews.DiceView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_DICE_WIDTH, height: Number = DEFAULT_DICE_HEIGHT, visuals: List<Visual>)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [DiceView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [DiceView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_DICE_WIDTH",
                  "brief": "Width for this [DiceView](). Default: [DEFAULT_DICE_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_DICE_HEIGHT",
                  "brief": "Height for this [DiceView](). Default: [DEFAULT_DICE_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "visuals",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[Visual](tools.aqua.bgw.visual.Visual)>",
                  "defaultValue": "",
                  "brief": "List of visuals to represent the sides of the die."
                }
              ],
              "brief": "Creates a [DiceView]() with given Visuals."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var currentSide: Int",
              "modifier": "var",
              "name": "currentSide",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Current side that is displayed, 0-based."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open override var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun setVisuals(visuals: List<Visual>)",
              "name": "setVisuals",
              "parameters": [
                {
                  "modifier": "",
                  "name": "visuals",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[Visual](tools.aqua.bgw.visual.Visual)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets all [visuals]() for this DiceView. Clears old visuals. All visuals get copied before being added. If [currentSide]() is out of range, a [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion) will be shown.",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "GameComponentView": {
        "type": "directory",
        "originalName": "-game-component-view",
        "packageName": "tools.aqua.bgw.components.gamecomponentviews.GameComponentView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "HexagonView": {
        "type": "directory",
        "originalName": "-hexagon-view",
        "packageName": "tools.aqua.bgw.components.gamecomponentviews.HexagonView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, size: Number = DEFAULT_HEXAGON_SIZE, visual: Visual, orientation: HexOrientation = HexOrientation.POINTY_TOP)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [HexagonView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [HexagonView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "size",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_HEXAGON_SIZE",
                  "brief": "Represents the radius of the outer circle of the [HexagonView]() all six points lie on. Default: [DEFAULT_HEXAGON_SIZE](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "",
                  "brief": "Visual for this [HexagonView]()."
                },
                {
                  "modifier": "",
                  "name": "orientation",
                  "type": "[HexOrientation](tools.aqua.bgw.core.HexOrientation)",
                  "defaultValue": "HexOrientation.POINTY_TOP",
                  "brief": "Orientation of the [HexagonView](). Default: [HexOrientation.POINTY_TOP](tools.aqua.bgw.core.HexOrientation.POINTY_TOP)."
                }
              ],
              "brief": "Creates a [HexagonView]() with a given [Visual](tools.aqua.bgw.visual.Visual)."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var orientation: HexOrientation",
              "modifier": "var",
              "name": "orientation",
              "type": "[HexOrientation](tools.aqua.bgw.core.HexOrientation)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val size: Number",
              "modifier": "val",
              "name": "size",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "TokenView": {
        "type": "directory",
        "originalName": "-token-view",
        "packageName": "tools.aqua.bgw.components.gamecomponentviews.TokenView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOKEN_WIDTH, height: Number = DEFAULT_TOKEN_HEIGHT, visual: Visual)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this TokenView. Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this TokenView. Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOKEN_WIDTH",
                  "brief": "Width for this TokenView. Default: [DEFAULT_TOKEN_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOKEN_HEIGHT",
                  "brief": "Height for this TokenView. Default: [DEFAULT_TOKEN_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "",
                  "brief": "Visual for this TokenView."
                }
              ],
              "brief": "Creates a [TokenView]() with given [Visual](tools.aqua.bgw.visual.Visual)."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether component is draggable or not."
            },
            {
              "signature": "val isDraggableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDraggableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "modifier": "val",
              "name": "isDraggedProperty",
              "type": "[ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event.DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.components.layoutviews": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.components.layoutviews",
    "packageName": "tools.aqua.bgw.components.layoutviews",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class CameraPane<T : LayoutView<*>>(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY, target: T) : ComponentView",
          "brief": "A pane representing a camera view that can be used to display and manipulate a target layout view."
        },
        {
          "signature": "open class GridPane<T : ComponentView>(posX: Number = 0, posY: Number = 0, columns: Int, rows: Int, spacing: Number = DEFAULT_GRID_SPACING, layoutFromCenter: Boolean = true, visual: Visual = Visual.EMPTY) : LayoutView<T> , Iterable<GridIteratorElement<T>>",
          "brief": "Defines a [LayoutView](LayoutView) that orders components in a grid structure."
        },
        {
          "signature": "sealed class LayoutView<T : ComponentView> : StaticComponentView<T>",
          "brief": "Baseclass for all layout components."
        },
        {
          "signature": "open class Pane<T : ComponentView>(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY) : LayoutView<T> , LayeredContainer<T> , Iterable<T>",
          "brief": "A [Pane](Pane) can be used to group ComponentViews for easier position management and layout."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "CameraPane": {
        "type": "directory",
        "originalName": "-camera-pane",
        "packageName": "tools.aqua.bgw.components.layoutviews.CameraPane",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY, target: T)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The x-coordinate of the camera pane's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The y-coordinate of the camera pane's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "The width of the camera pane."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "The height of the camera pane."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "The visual representation of the camera pane. Default is an empty visual."
                },
                {
                  "modifier": "",
                  "name": "target",
                  "type": "[T]()",
                  "defaultValue": "",
                  "brief": "The target layout view that this camera pane will display."
                }
              ],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var interactive: Boolean",
              "modifier": "var",
              "name": "interactive",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Determines if the camera pane is interactive, which means that you can scroll to zoom and drag to move around."
            },
            {
              "signature": "val interactiveProperty: BooleanProperty",
              "modifier": "val",
              "name": "interactiveProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [interactive]() state of the [CameraPane]()."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scroll: Coordinate",
              "modifier": "val",
              "name": "scroll",
              "type": "[Coordinate](tools.aqua.bgw.util.Coordinate)",
              "defaultValue": "",
              "brief": "Upper-left corner of the current scrolling window. It is initialized at (0,0)"
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "var zoom: Double",
              "modifier": "var",
              "name": "zoom",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Zoom factor of the camera starting from 1."
            },
            {
              "signature": "val zoomProperty: DoubleProperty",
              "modifier": "val",
              "name": "zoomProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [zoom]() state of the [CameraPane]()."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun pan(x: Number, y: Number)",
              "name": "pan",
              "parameters": [
                {
                  "modifier": "",
                  "name": "x",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "y",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "pans the view of the camera to the specified coordinates. The coordinates specified represent the upper-left corner of the view.",
              "isSuspend": false
            },
            {
              "signature": "fun panBy(xOffset: Number, yOffset: Number)",
              "name": "panBy",
              "parameters": [
                {
                  "modifier": "",
                  "name": "xOffset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "yOffset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "pans the view of the camera by the given offsets.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "GridPane": {
        "type": "directory",
        "originalName": "-grid-pane",
        "packageName": "tools.aqua.bgw.components.layoutviews.GridPane",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, columns: Int, rows: Int, spacing: Number = DEFAULT_GRID_SPACING, layoutFromCenter: Boolean = true, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [GridPane](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [GridPane](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "columns",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": "Initial column count."
                },
                {
                  "modifier": "",
                  "name": "rows",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": "Initial row count."
                },
                {
                  "modifier": "",
                  "name": "spacing",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_GRID_SPACING",
                  "brief": "Spacing between rows and columns. Default: [DEFAULT_GRID_SPACING](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "layoutFromCenter",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "brief": "Whether the [GridPane]() should anchor in the center (true) or top-Left (false). Default: true."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Initial visual for this [GridPane](). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)."
                }
              ],
              "brief": "Creates a [GridPane]() with given rows and columns."
            }
          ],
          "types": [
            {
              "signature": "object Companion",
              "brief": ""
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "val columns: Int",
              "modifier": "val",
              "name": "columns",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Current column count."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rows: Int",
              "modifier": "val",
              "name": "rows",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Current row count."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var spacing: Double",
              "modifier": "var",
              "name": "spacing",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Current spacing."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addColumns(columnIndex: Int, count: Int = 1)",
              "name": "addColumns",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "count",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "1",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds the desired amount of columns between column columnIndex - 1 and columnIndex. New columns get null-initialized.",
              "isSuspend": false
            },
            {
              "signature": "fun addRows(rowIndex: Int, count: Int = 1)",
              "name": "addRows",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "count",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "1",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds the desired amount of rows between row rowIndex and rowIndex + 1. New rows get null-initialized.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(columnIndex: Int, rowIndex: Int): T?",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()?",
              "brief": "Returns [ComponentView](tools.aqua.bgw.components.ComponentView) in specified cell. Returns null if there was no component.",
              "isSuspend": false
            },
            {
              "signature": "fun getCellCenterMode(columnIndex: Int, rowIndex: Int): Alignment",
              "name": "getCellCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "brief": "Returns centering mode as an [Alignment](tools.aqua.bgw.core.Alignment) of the specified cell.",
              "isSuspend": false
            },
            {
              "signature": "fun getColumnWidth(columnIndex: Int): Double",
              "name": "getColumnWidth",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "brief": "Returns the set column width for the given column.",
              "isSuspend": false
            },
            {
              "signature": "fun getRowHeight(rowIndex: Int): Double",
              "name": "getRowHeight",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "brief": "Returns the set row height for the given row.",
              "isSuspend": false
            },
            {
              "signature": "fun grow(left: Int = 0, right: Int = 0, top: Int = 0, bottom: Int = 0): Boolean",
              "name": "grow",
              "parameters": [
                {
                  "modifier": "",
                  "name": "left",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "right",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "top",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "bottom",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Grows grid by specified dimensions, filling new cells with null values.",
              "isSuspend": false
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeColumn(columnIndex: Int)",
              "name": "removeColumn",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes the desired column in the grid. Removes all, views in the column. If there is no column left in the grid, it gets trimmed to size 0x0.",
              "isSuspend": false
            },
            {
              "signature": "fun removeEmptyColumns()",
              "name": "removeEmptyColumns",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all empty columns e.g. all rows that have no views in their cells."
            },
            {
              "signature": "fun removeEmptyRows()",
              "name": "removeEmptyRows",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all empty rows e.g. all rows that have no views in their cells."
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun removeRow(rowIndex: Int)",
              "name": "removeRow",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes the desired row in the grid. Removes all, views in the row.",
              "isSuspend": false
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(columnIndex: Int, rowIndex: Int, component: T?)",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "component",
                  "type": "[T]()?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets content of desired grid cell. Overrides existing component in this cell. Pass null to remove a component.",
              "isSuspend": false
            },
            {
              "signature": "fun setAutoColumnWidth(columnIndex: Int)",
              "name": "setAutoColumnWidth",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Restores automatic resizing behavior for desired column.",
              "isSuspend": false
            },
            {
              "signature": "fun setAutoColumnWidths()",
              "name": "setAutoColumnWidths",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Restores automatic resizing behavior for all columns."
            },
            {
              "signature": "fun setAutoRowHeight(rowIndex: Int)",
              "name": "setAutoRowHeight",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Restores automatic resizing behavior for desired row.",
              "isSuspend": false
            },
            {
              "signature": "fun setAutoRowHeights()",
              "name": "setAutoRowHeights",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Restores automatic resizing behavior for all rows."
            },
            {
              "signature": "fun setCellCenterMode(columnIndex: Int, rowIndex: Int, value: Alignment)",
              "name": "setCellCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets centering mode of desired grid cell with given [Alignment](tools.aqua.bgw.core.Alignment). Overrides existing mode in this cell.",
              "isSuspend": false
            },
            {
              "signature": "fun setCenterMode(value: Alignment)",
              "name": "setCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets centering mode of all cells in the grid with given [Alignment](tools.aqua.bgw.core.Alignment). Overrides existing modes of all cells.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnCenterMode(columnIndex: Int, value: Alignment)",
              "name": "setColumnCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets centering mode of desired column in grid with given [Alignment](tools.aqua.bgw.core.Alignment). Overrides existing mode in the whole column.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnWidth(columnIndex: Int, columnWidth: Number)",
              "name": "setColumnWidth",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "columnWidth",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Manually set column width of one column. Overrides automatic resizing based on content from this column.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnWidths(columnWidths: DoubleArray)",
              "name": "setColumnWidths",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnWidths",
                  "type": "[DoubleArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Manually set column width of all columns. Overrides automatic resizing based on content from this column.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnWidths(columnWidth: Number)",
              "name": "setColumnWidths",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnWidth",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Manually set column width of all columns. Overrides automatic resizing based on content from this column.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowCenterMode(rowIndex: Int, value: Alignment)",
              "name": "setRowCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets centering mode of desired row in grid with given [Alignment](tools.aqua.bgw.core.Alignment). Overrides existing mode in the whole row.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowHeight(rowIndex: Int, rowHeight: Number)",
              "name": "setRowHeight",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowHeight",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Manually set row height of one row. Overrides automatic resizing based on content from this row.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowHeights(rowHeights: DoubleArray)",
              "name": "setRowHeights",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowHeights",
                  "type": "[DoubleArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Manually set row height of all rows. Overrides automatic resizing based on content from this row.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowHeights(rowHeight: Number)",
              "name": "setRowHeights",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowHeight",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Manually set row height of all rows. Overrides automatic resizing based on content from this row.",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun trim(): Boolean",
              "name": "trim",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes all empty outer rows and columns e.g. all rows and columns counted from left, right, top and bottom that have no views in their cells."
            }
          ]
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.components.layoutviews.GridPane.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "const val COLUMN_WIDTH_AUTO: Double",
                  "modifier": "val",
                  "name": "COLUMN_WIDTH_AUTO",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "brief": "Constant for automatic column width."
                },
                {
                  "signature": "const val ROW_HEIGHT_AUTO: Double",
                  "modifier": "val",
                  "name": "ROW_HEIGHT_AUTO",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "brief": "Constant for automatic row height."
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "LayoutView": {
        "type": "directory",
        "originalName": "-layout-view",
        "packageName": "tools.aqua.bgw.components.layoutviews.LayoutView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "Pane": {
        "type": "directory",
        "originalName": "-pane",
        "packageName": "tools.aqua.bgw.components.layoutviews.Pane",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [Pane](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [Pane](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "Width for this [Pane]()."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "Height for this [Pane]()."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Visual for this [Pane](). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)."
                }
              ],
              "brief": "Creates a [Pane]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "ComponentViews that are contained in this [Pane]()."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "[onAdd]() gets invoked anytime after a [ComponentView](tools.aqua.bgw.components.ComponentView) is added to this [Pane]() with the added ComponentView as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "type": "[T]().() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "[onRemove]() gets invoked anytime after a [ComponentView](tools.aqua.bgw.components.ComponentView) is removed from this [Pane]() with the removed ComponentView as its receiver."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all ComponentViews passed as varargs to this [Pane]().Adds all ComponentViews contained in [collection]() to this Pane.",
              "isSuspend": false
            },
            {
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "addComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds the [ValueObserver](tools.aqua.bgw.observable.ValueObserver) to the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponentsListener()",
              "name": "clearComponentsListener",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners from the observableComponents list."
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the components list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns whether the components list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "parameters": [],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the size of the components list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "name": "removeComponentsListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes the [ValueObserver](tools.aqua.bgw.observable.ValueObserver) from the observableComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the back inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer)."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly.Puts the [component]() to the front inside the [LayeredContainer](tools.aqua.bgw.components.LayeredContainer)."
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.components.uicomponents": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.components.uicomponents",
    "packageName": "tools.aqua.bgw.components.uicomponents",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "sealed class BinaryStateButton : LabeledUIComponent",
          "brief": "Baseclass for ToggleButtons and RadioButtons."
        },
        {
          "signature": "open class Button(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_BUTTON_WIDTH, height: Number = DEFAULT_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = ColorVisual.WHITE) : LabeledUIComponent",
          "brief": "A simple [Button](Button) with a text."
        },
        {
          "signature": "open class CheckBox(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CHECKBOX_WIDTH, height: Number = DEFAULT_CHECKBOX_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY, isChecked: Boolean = false, allowIndeterminate: Boolean = false, isIndeterminate: Boolean = false) : LabeledUIComponent",
          "brief": "A simple [CheckBox](CheckBox) with a text."
        },
        {
          "signature": "open class ColorPicker(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COLOR_PICKER_WIDTH, height: Number = DEFAULT_COLOR_PICKER_HEIGHT, initialColor: Color = Color.WHITE) : UIComponent",
          "brief": "A [ColorPicker](ColorPicker) that allows to choose a [Color](tools.aqua.bgw.core.Color)."
        },
        {
          "signature": "open class ComboBox<T>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COMBOBOX_WIDTH, height: Number = DEFAULT_COMBOBOX_HEIGHT, font: Font = Font(), val prompt: String = \"\", items: List<T> = emptyList(), formatFunction: (T) -> String? = null) : UIComponent",
          "brief": "A standard [ComboBox](ComboBox) that may be populated with items of specified type parameter."
        },
        {
          "signature": "open class Label(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LABEL_WIDTH, height: Number = DEFAULT_LABEL_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY) : LabeledUIComponent",
          "brief": "A basic [Label](Label) displaying text."
        },
        {
          "signature": "sealed class LabeledUIComponent : UIComponent",
          "brief": "Baseclass for all UIComponents that have a label."
        },
        {
          "signature": "open class ListView<T>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LIST_VIEW_WIDTH, height: Number = DEFAULT_LIST_VIEW_HEIGHT, items: List<T> = emptyList(), font: Font = Font(), visual: Visual = ColorVisual.WHITE, orientation: Orientation = Orientation.VERTICAL, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE, formatFunction: (T) -> String? = null) : StructuredDataView<T>",
          "brief": "A [ListView](ListView) displaying its items next to each other in the given orientation."
        },
        {
          "signature": "enum Orientation : Enum<Orientation>",
          "brief": "Enum for orientations [HORIZONTAL](Orientation.HORIZONTAL) and [VERTICAL](Orientation.VERTICAL)."
        },
        {
          "signature": "open class PasswordField(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_FIELD_WIDTH, height: Number = DEFAULT_TEXT_FIELD_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240))) : TextInputUIComponent",
          "brief": "A [PasswordField](PasswordField) is a single line input field that shows stars instead of typed text."
        },
        {
          "signature": "open class ProgressBar(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_PROGRESSBAR_WIDTH, height: Number = DEFAULT_PROGRESSBAR_HEIGHT, progress: Double = 0.0, barColor: Color = Color.CYAN) : UIComponent",
          "brief": "A [ProgressBar](ProgressBar)."
        },
        {
          "signature": "open class RadioButton(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_RADIO_BUTTON_WIDTH, height: Number = DEFAULT_RADIO_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY) : BinaryStateButton",
          "brief": "[RadioButton](RadioButton) is analogous to a [ToggleButton](ToggleButton) with a different visual representation but cannot be deselected."
        },
        {
          "signature": "enum SelectionMode : Enum<SelectionMode>",
          "brief": "Enum indicating allowed selection mode."
        },
        {
          "signature": "sealed class StructuredDataView<T> : UIComponent",
          "brief": "A [StructuredDataView](StructuredDataView) displaying its items with given format function."
        },
        {
          "signature": "open class TableColumn<T>(title: String, width: Number, font: Font = Font(), formatFunction: (T) -> String)",
          "brief": "A [TableColumn](TableColumn) may be used to represent a column in a [TableView](TableView)."
        },
        {
          "signature": "open class TableView<T>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TABLE_VIEW_WIDTH, height: Number = DEFAULT_TABLE_VIEW_HEIGHT, columns: List<TableColumn<T>> = emptyList(), items: List<T> = emptyList(), visual: Visual = ColorVisual.WHITE, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE) : StructuredDataView<T>",
          "brief": "A [TableView](TableView) may be used to visualize a data table."
        },
        {
          "signature": "open class TextArea(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_AREA_WIDTH, height: Number = DEFAULT_TEXT_AREA_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240))) : TextInputUIComponent",
          "brief": "A [TextArea](TextArea) is a multi line input field."
        },
        {
          "signature": "open class TextField(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_FIELD_WIDTH, height: Number = DEFAULT_TEXT_FIELD_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240))) : TextInputUIComponent",
          "brief": "A [TextField](TextField) is a single line input field."
        },
        {
          "signature": "sealed class TextInputUIComponent : UIComponent",
          "brief": "Baseclass for all UIComponents that have a text input field."
        },
        {
          "signature": "class ToggleButton(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOGGLE_BUTTON_WIDTH, height: Number = DEFAULT_TOGGLE_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isWrapText: Boolean = false, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY) : BinaryStateButton",
          "brief": "A [ToggleButton](ToggleButton) may be used as a [Button](Button) that is either selected or not selected. An important feature of ToggleButtons is the [ToggleGroup](ToggleGroup)."
        },
        {
          "signature": "open class ToggleGroup",
          "brief": "A [ToggleGroup](ToggleGroup) may be set as an attribute in [ToggleButton](ToggleButton) or [RadioButton](RadioButton)."
        },
        {
          "signature": "abstract class UIComponent(posX: Number, posY: Number, width: Number, height: Number, font: Font, visual: Visual) : StaticComponentView<UIComponent>",
          "brief": "Baseclass for all UI components."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "BinaryStateButton": {
        "type": "directory",
        "originalName": "-binary-state-button",
        "packageName": "tools.aqua.bgw.components.uicomponents.BinaryStateButton",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isSelected: Boolean",
              "modifier": "var",
              "name": "isSelected",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Selected state for this [ToggleButton](ToggleButton)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label](Label)'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText](LabeledUIComponent) state of this [Label](Label)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val selectedProperty: BooleanProperty",
              "modifier": "val",
              "name": "selectedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the selected state of this [ToggleButton](ToggleButton)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var toggleGroup: ToggleGroup",
              "modifier": "var",
              "name": "toggleGroup",
              "type": "[ToggleGroup](ToggleGroup)",
              "defaultValue": "",
              "brief": "The ToggleGroup of this ToggleButton."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "Button": {
        "type": "directory",
        "originalName": "-button",
        "packageName": "tools.aqua.bgw.components.uicomponents.Button",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_BUTTON_WIDTH, height: Number = DEFAULT_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = ColorVisual.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [Button](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [Button](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_BUTTON_WIDTH",
                  "brief": "Width for this [Button](). Default: [DEFAULT_BUTTON_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_BUTTON_HEIGHT",
                  "brief": "Height for this [Button](). Default: [DEFAULT_BUTTON_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Text for this [Button](). Default: empty String."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for the text. Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER",
                  "brief": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core.Alignment.CENTER)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "Defines if text should be wrapped. Default: false."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "ColorVisual.WHITE",
                  "brief": "Visual for this button. Default: [ColorVisual.WHITE](tools.aqua.bgw.visual.ColorVisual.Companion)"
                }
              ],
              "brief": "Creates a [Button]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label](Label)'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText](LabeledUIComponent) state of this [Label](Label)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "CheckBox": {
        "type": "directory",
        "originalName": "-check-box",
        "packageName": "tools.aqua.bgw.components.uicomponents.CheckBox",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CHECKBOX_WIDTH, height: Number = DEFAULT_CHECKBOX_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY, isChecked: Boolean = false, allowIndeterminate: Boolean = false, isIndeterminate: Boolean = false)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [CheckBox](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [CheckBox](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CHECKBOX_WIDTH",
                  "brief": "Width for this [CheckBox](). Default: [DEFAULT_CHECKBOX_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CHECKBOX_HEIGHT",
                  "brief": "Height for this [CheckBox](). Default: [DEFAULT_CHECKBOX_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Text for this [CheckBox](). Default: empty String."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for the text. Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER",
                  "brief": "[Alignment](tools.aqua.bgw.core.Alignment) to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core.Alignment.CENTER)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "Defines if text should be wrapped. Default: false."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)"
                },
                {
                  "modifier": "",
                  "name": "isChecked",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "The initial checked state. Default: false."
                },
                {
                  "modifier": "",
                  "name": "allowIndeterminate",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "The initial [isIndeterminateAllowed]() state. Default: false."
                },
                {
                  "modifier": "",
                  "name": "isIndeterminate",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "The initial [isIndeterminate]() state. Default: false."
                }
              ],
              "brief": "Creates a [CheckBox]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isChecked: Boolean",
              "modifier": "var",
              "name": "isChecked",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "The checked state."
            },
            {
              "signature": "val isCheckedProperty: BooleanProperty",
              "modifier": "val",
              "name": "isCheckedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the checked state."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isIndeterminate: Boolean",
              "modifier": "var",
              "name": "isIndeterminate",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) whether this component in the indeterminate state."
            },
            {
              "signature": "var isIndeterminateAllowed: Boolean",
              "modifier": "var",
              "name": "isIndeterminateAllowed",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) whether this component allows an indeterminate state."
            },
            {
              "signature": "val isIndeterminateAllowedProperty: BooleanProperty",
              "modifier": "val",
              "name": "isIndeterminateAllowedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for whether this component allows an indeterminate state."
            },
            {
              "signature": "val isIndeterminateProperty: BooleanProperty",
              "modifier": "val",
              "name": "isIndeterminateProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the indeterminate state."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label](Label)'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText](LabeledUIComponent) state of this [Label](Label)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "ColorPicker": {
        "type": "directory",
        "originalName": "-color-picker",
        "packageName": "tools.aqua.bgw.components.uicomponents.ColorPicker",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COLOR_PICKER_WIDTH, height: Number = DEFAULT_COLOR_PICKER_HEIGHT, initialColor: Color = Color.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [ColorPicker](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [ColorPicker](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_COLOR_PICKER_WIDTH",
                  "brief": "Width for this [ColorPicker](). Default: [DEFAULT_COLOR_PICKER_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_COLOR_PICKER_HEIGHT",
                  "brief": "Height for this [ColorPicker](). Default: [DEFAULT_COLOR_PICKER_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "initialColor",
                  "type": "[Color](tools.aqua.bgw.core.Color)",
                  "defaultValue": "Color.WHITE",
                  "brief": "The [Color](tools.aqua.bgw.core.Color) that is initially selected. Default: [Color.WHITE](tools.aqua.bgw.core.Color.Companion)."
                }
              ],
              "brief": "Creates a [ColorPicker]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var selectedColor: Color",
              "modifier": "var",
              "name": "selectedColor",
              "type": "[Color](tools.aqua.bgw.core.Color)",
              "defaultValue": "",
              "brief": "The currently selected [Color](tools.aqua.bgw.core.Color)."
            },
            {
              "signature": "val selectedColorProperty: Property<Color>",
              "modifier": "val",
              "name": "selectedColorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Color](tools.aqua.bgw.core.Color)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the currently selected [Color](tools.aqua.bgw.core.Color)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "ComboBox": {
        "type": "directory",
        "originalName": "-combo-box",
        "packageName": "tools.aqua.bgw.components.uicomponents.ComboBox",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Label": {
        "type": "directory",
        "originalName": "-label",
        "packageName": "tools.aqua.bgw.components.uicomponents.Label",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LABEL_WIDTH, height: Number = DEFAULT_LABEL_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [Label](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [Label](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LABEL_WIDTH",
                  "brief": "Width for this [Label](). Default: [DEFAULT_LABEL_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LABEL_HEIGHT",
                  "brief": "Height for this [Label](). Default: [DEFAULT_LABEL_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Text for this [Label](). Default: empty String."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for the text. Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER",
                  "brief": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core.Alignment.CENTER)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "Defines if text should be wrapped. Default: false."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)"
                }
              ],
              "brief": "Creates a [Label]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label]()'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText](LabeledUIComponent) state of this [Label]()."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "LabeledUIComponent": {
        "type": "directory",
        "originalName": "-labeled-u-i-component",
        "packageName": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent]()."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent]()."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label](Label)'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText]() state of this [Label](Label)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent]()."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent]()."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "ListView": {
        "type": "directory",
        "originalName": "-list-view",
        "packageName": "tools.aqua.bgw.components.uicomponents.ListView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LIST_VIEW_WIDTH, height: Number = DEFAULT_LIST_VIEW_HEIGHT, items: List<T> = emptyList(), font: Font = Font(), visual: Visual = ColorVisual.WHITE, orientation: Orientation = Orientation.VERTICAL, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE, formatFunction: (T) -> String? = null)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [ListView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [ListView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LIST_VIEW_WIDTH",
                  "brief": "Width for this [ListView](). Default: [DEFAULT_LIST_VIEW_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LIST_VIEW_HEIGHT",
                  "brief": "Height for this [ListView](). Default: [DEFAULT_LIST_VIEW_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "items",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "emptyList()",
                  "brief": "Initial list of items for this [ListView](). Default: empty list."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for this [ListView](). Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual).WHITE",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual.ColorVisual.Companion)."
                },
                {
                  "modifier": "",
                  "name": "orientation",
                  "type": "[Orientation](Orientation)",
                  "defaultValue": "Orientation.VERTICAL",
                  "brief": "Orientation for this [ListView](). Default: [Orientation.VERTICAL](Orientation.VERTICAL)."
                },
                {
                  "modifier": "",
                  "name": "selectionMode",
                  "type": "[SelectionMode](SelectionMode)",
                  "defaultValue": "SelectionMode.SINGLE",
                  "brief": "Selection mode to be used for this [ListView](). Default: [SelectionMode.SINGLE](SelectionMode.SINGLE)."
                },
                {
                  "modifier": "",
                  "name": "selectionBackground",
                  "type": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual)",
                  "defaultValue": "ColorVisual.BLUE",
                  "brief": "Background for selected items in this [ListView](). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual.ColorVisual.Companion)."
                },
                {
                  "modifier": "",
                  "name": "formatFunction",
                  "type": "([T]()) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?",
                  "defaultValue": "null",
                  "brief": "The [formatFunction]() that is used to represent the items. Default: null."
                }
              ],
              "brief": "Creates a [ListView]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var formatFunction: (T) -> String?",
              "modifier": "var",
              "name": "formatFunction",
              "type": "([T]()) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "brief": "The [formatFunction]() that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "val formatFunctionProperty: Property<(T) -> String?>",
              "modifier": "val",
              "name": "formatFunctionProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<([T]()) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [formatFunction]() that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val items: ObservableList<T>",
              "modifier": "val",
              "name": "items",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists.ObservableList)<[T]()>",
              "defaultValue": "",
              "brief": "An [ObservableList](tools.aqua.bgw.observable.lists.ObservableList) that contains the data objects. The first object in this ObservableList will be the topmost row in the rendered [UIComponent](UIComponent)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var orientation: Orientation",
              "modifier": "var",
              "name": "orientation",
              "type": "[Orientation](Orientation)",
              "defaultValue": "",
              "brief": "[Orientation](Orientation) of this [ListView]() displayed."
            },
            {
              "signature": "val orientationProperty: Property<Orientation>",
              "modifier": "val",
              "name": "orientationProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Orientation](Orientation)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Orientation](Orientation) of this [ListView]()."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "modifier": "val",
              "name": "selectedIndices",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
              "defaultValue": "",
              "brief": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "modifier": "val",
              "name": "selectedItems",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList)<[T]()>",
              "defaultValue": "",
              "brief": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList) containing all currently selected items in this [UIComponent](UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "var selectionBackground: ColorVisual",
              "modifier": "var",
              "name": "selectionBackground",
              "type": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual)",
              "defaultValue": "",
              "brief": "Background color for selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "val selectionBackgroundProperty: Property<ColorVisual>",
              "modifier": "val",
              "name": "selectionBackgroundProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[ColorVisual](tools.aqua.bgw.visual.ColorVisual)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the background color for selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "var selectionMode: SelectionMode",
              "modifier": "var",
              "name": "selectionMode",
              "type": "[SelectionMode](SelectionMode)",
              "defaultValue": "",
              "brief": "Selection mode to be used for this [UIComponent](UIComponent)."
            },
            {
              "signature": "val selectionModeProperty: Property<SelectionMode>",
              "modifier": "val",
              "name": "selectionModeProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[SelectionMode](SelectionMode)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [selectionMode](StructuredDataView) of this [UIComponent](UIComponent)."
            },
            {
              "signature": "var selectionStyle: String",
              "modifier": "var",
              "name": "selectionStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Style of selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "val selectionStyleProperty: Property<String>",
              "modifier": "val",
              "name": "selectionStyleProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the style of selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun clearSelection()",
              "name": "clearSelection",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            {
              "signature": "fun formatItem(item: Any?): String",
              "name": "formatItem",
              "parameters": [
                {
                  "modifier": "",
                  "name": "item",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "brief": "",
              "isSuspend": false
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun select(element: T)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Selects the specified element. Clears current selection.Selects the element at the specified index in this [UIComponent](UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun select(index: Int)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Selects the specified element. Clears current selection.Selects the element at the specified index in this [UIComponent](UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun selectAll()",
              "name": "selectAll",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects all items in this [UIComponent](UIComponent)."
            },
            {
              "signature": "fun selectFirst()",
              "name": "selectFirst",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the first element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectLast()",
              "name": "selectLast",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the last element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectNext()",
              "name": "selectNext",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the next element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectPrevious()",
              "name": "selectPrevious",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the previous element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "Orientation": {
        "type": "directory",
        "originalName": "-orientation",
        "packageName": "tools.aqua.bgw.components.uicomponents.Orientation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<Orientation>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[Orientation]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): Orientation",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Orientation]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<Orientation>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[Orientation]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "HORIZONTAL": {
            "type": "directory",
            "originalName": "-h-o-r-i-z-o-n-t-a-l",
            "packageName": "tools.aqua.bgw.components.uicomponents.Orientation.HORIZONTAL",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "VERTICAL": {
            "type": "directory",
            "originalName": "-v-e-r-t-i-c-a-l",
            "packageName": "tools.aqua.bgw.components.uicomponents.Orientation.VERTICAL",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "PasswordField": {
        "type": "directory",
        "originalName": "-password-field",
        "packageName": "tools.aqua.bgw.components.uicomponents.PasswordField",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "ProgressBar": {
        "type": "directory",
        "originalName": "-progress-bar",
        "packageName": "tools.aqua.bgw.components.uicomponents.ProgressBar",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_PROGRESSBAR_WIDTH, height: Number = DEFAULT_PROGRESSBAR_HEIGHT, progress: Double = 0.0, barColor: Color = Color.CYAN)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [ProgressBar](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [ProgressBar](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_PROGRESSBAR_WIDTH",
                  "brief": "Width for this [ProgressBar](). Default: [DEFAULT_PROGRESSBAR_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_PROGRESSBAR_HEIGHT",
                  "brief": "Height for this [ProgressBar](). Default: [DEFAULT_PROGRESSBAR_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "progress",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "0.0",
                  "brief": "The initial progress of this [ProgressBar](). Default 0."
                },
                {
                  "modifier": "",
                  "name": "barColor",
                  "type": "[Color](tools.aqua.bgw.core.Color)",
                  "defaultValue": "Color.CYAN",
                  "brief": "The initial bar color of this [ProgressBar](). Default [Color.CYAN](tools.aqua.bgw.core.Color.Companion)."
                }
              ],
              "brief": "Creates a [ProgressBar]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var barColor: Color",
              "modifier": "var",
              "name": "barColor",
              "type": "[Color](tools.aqua.bgw.core.Color)",
              "defaultValue": "",
              "brief": "Bar [Color](tools.aqua.bgw.core.Color) of this [ProgressBar]()."
            },
            {
              "signature": "val barColorProperty: Property<Color>",
              "modifier": "val",
              "name": "barColorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Color](tools.aqua.bgw.core.Color)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the bar [Color](tools.aqua.bgw.core.Color) of this [ProgressBar]()."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var progress: Double",
              "modifier": "var",
              "name": "progress",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Progress state of this [ProgressBar]()."
            },
            {
              "signature": "val progressProperty: DoubleProperty",
              "modifier": "val",
              "name": "progressProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the progress state of this [ProgressBar]()."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "RadioButton": {
        "type": "directory",
        "originalName": "-radio-button",
        "packageName": "tools.aqua.bgw.components.uicomponents.RadioButton",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_RADIO_BUTTON_WIDTH, height: Number = DEFAULT_RADIO_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [RadioButton](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [RadioButton](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_RADIO_BUTTON_WIDTH",
                  "brief": "Width for this [RadioButton](). Default: [DEFAULT_RADIO_BUTTON_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_RADIO_BUTTON_HEIGHT",
                  "brief": "Height for this [RadioButton](). Default: [DEFAULT_RADIO_BUTTON_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Text to be displayed for this [RadioButton]()."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used to display text."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER_LEFT",
                  "brief": "Alignment to be used for this [RadioButton]()."
                },
                {
                  "modifier": "",
                  "name": "isSelected",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "The initial state for this [RadioButton](). Default: false."
                },
                {
                  "modifier": "",
                  "name": "toggleGroup",
                  "type": "[ToggleGroup](ToggleGroup)",
                  "defaultValue": "ToggleGroup()",
                  "brief": "The ToggleGroup of this [RadioButton](). Default: empty group."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)"
                }
              ],
              "brief": "Creates a [RadioButton]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isSelected: Boolean",
              "modifier": "var",
              "name": "isSelected",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Selected state for this [ToggleButton](ToggleButton)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label](Label)'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText](LabeledUIComponent) state of this [Label](Label)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val selectedProperty: BooleanProperty",
              "modifier": "val",
              "name": "selectedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the selected state of this [ToggleButton](ToggleButton)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var toggleGroup: ToggleGroup",
              "modifier": "var",
              "name": "toggleGroup",
              "type": "[ToggleGroup](ToggleGroup)",
              "defaultValue": "",
              "brief": "The ToggleGroup of this ToggleButton."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "SelectionMode": {
        "type": "directory",
        "originalName": "-selection-mode",
        "packageName": "tools.aqua.bgw.components.uicomponents.SelectionMode",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<SelectionMode>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[SelectionMode]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): SelectionMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[SelectionMode]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<SelectionMode>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[SelectionMode]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "MULTIPLE": {
            "type": "directory",
            "originalName": "-m-u-l-t-i-p-l-e",
            "packageName": "tools.aqua.bgw.components.uicomponents.SelectionMode.MULTIPLE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NONE": {
            "type": "directory",
            "originalName": "-n-o-n-e",
            "packageName": "tools.aqua.bgw.components.uicomponents.SelectionMode.NONE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "SINGLE": {
            "type": "directory",
            "originalName": "-s-i-n-g-l-e",
            "packageName": "tools.aqua.bgw.components.uicomponents.SelectionMode.SINGLE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "StructuredDataView": {
        "type": "directory",
        "originalName": "-structured-data-view",
        "packageName": "tools.aqua.bgw.components.uicomponents.StructuredDataView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val items: ObservableList<T>",
              "modifier": "val",
              "name": "items",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists.ObservableList)<[T]()>",
              "defaultValue": "",
              "brief": "An [ObservableList](tools.aqua.bgw.observable.lists.ObservableList) that contains the data objects. The first object in this ObservableList will be the topmost row in the rendered [UIComponent](UIComponent)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "modifier": "val",
              "name": "selectedIndices",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
              "defaultValue": "",
              "brief": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode]()."
            },
            {
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "modifier": "val",
              "name": "selectedItems",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList)<[T]()>",
              "defaultValue": "",
              "brief": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList) containing all currently selected items in this [UIComponent](UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode]()."
            },
            {
              "signature": "var selectionBackground: ColorVisual",
              "modifier": "var",
              "name": "selectionBackground",
              "type": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual)",
              "defaultValue": "",
              "brief": "Background color for selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode]()."
            },
            {
              "signature": "val selectionBackgroundProperty: Property<ColorVisual>",
              "modifier": "val",
              "name": "selectionBackgroundProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[ColorVisual](tools.aqua.bgw.visual.ColorVisual)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the background color for selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode]()."
            },
            {
              "signature": "var selectionMode: SelectionMode",
              "modifier": "var",
              "name": "selectionMode",
              "type": "[SelectionMode](SelectionMode)",
              "defaultValue": "",
              "brief": "Selection mode to be used for this [UIComponent](UIComponent)."
            },
            {
              "signature": "val selectionModeProperty: Property<SelectionMode>",
              "modifier": "val",
              "name": "selectionModeProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[SelectionMode](SelectionMode)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [selectionMode]() of this [UIComponent](UIComponent)."
            },
            {
              "signature": "var selectionStyle: String",
              "modifier": "var",
              "name": "selectionStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Style of selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode]()."
            },
            {
              "signature": "val selectionStyleProperty: Property<String>",
              "modifier": "val",
              "name": "selectionStyleProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the style of selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode]()."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun clearSelection()",
              "name": "clearSelection",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun select(element: T)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Selects the specified element. Clears current selection.Selects the element at the specified index in this [UIComponent](UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun select(index: Int)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Selects the specified element. Clears current selection.Selects the element at the specified index in this [UIComponent](UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun selectAll()",
              "name": "selectAll",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects all items in this [UIComponent](UIComponent)."
            },
            {
              "signature": "fun selectFirst()",
              "name": "selectFirst",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the first element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectLast()",
              "name": "selectLast",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the last element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectNext()",
              "name": "selectNext",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the next element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectPrevious()",
              "name": "selectPrevious",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the previous element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "TableColumn": {
        "type": "directory",
        "originalName": "-table-column",
        "packageName": "tools.aqua.bgw.components.uicomponents.TableColumn",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(title: String, width: Number, font: Font = Font(), formatFunction: (T) -> String)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "title",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": "The title for this [TableColumn](). It gets displayed in the header row of the [TableView](TableView)."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "The [width]() for this [TableColumn]()."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for this [TableColumn](). Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "formatFunction",
                  "type": "([T]()) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": "The format function for this [TableColumn](). It gets applied to each item in the [TableView](TableView) to get a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) for its cell."
                }
              ],
              "brief": "Creates a [TableColumn]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [TableColumn]()."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [TableColumn]()."
            },
            {
              "signature": "var formatFunction: (T) -> String?",
              "modifier": "var",
              "name": "formatFunction",
              "type": "([T]()) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "brief": "The [formatFunction]() that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "val formatFunctionProperty: Property<(T) -> String?>",
              "modifier": "val",
              "name": "formatFunctionProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<([T]()) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [formatFunction]() that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "var title: String",
              "modifier": "var",
              "name": "title",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Title of this [TableColumn]()."
            },
            {
              "signature": "val titleProperty: StringProperty",
              "modifier": "val",
              "name": "titleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the title of this [TableColumn]()."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [TableColumn](). Must not be negative."
            },
            {
              "signature": "val widthProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the width of this [TableColumn](). Must not be negative."
            }
          ],
          "functions": [
            {
              "signature": "fun formatItem(item: Any?): String",
              "name": "formatItem",
              "parameters": [
                {
                  "modifier": "",
                  "name": "item",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "brief": "",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "TableView": {
        "type": "directory",
        "originalName": "-table-view",
        "packageName": "tools.aqua.bgw.components.uicomponents.TableView",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TABLE_VIEW_WIDTH, height: Number = DEFAULT_TABLE_VIEW_HEIGHT, columns: List<TableColumn<T>> = emptyList(), items: List<T> = emptyList(), visual: Visual = ColorVisual.WHITE, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [TableView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [TableView](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TABLE_VIEW_WIDTH",
                  "brief": "Width for this [TableView](). Default: [DEFAULT_TABLE_VIEW_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TABLE_VIEW_HEIGHT",
                  "brief": "Height for this [TableView](). Default: [DEFAULT_TABLE_VIEW_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "columns",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[TableColumn](TableColumn)<[T]()>>",
                  "defaultValue": "emptyList()",
                  "brief": "Initial columns for this [TableView](). Default: empty list."
                },
                {
                  "modifier": "",
                  "name": "items",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "emptyList()",
                  "brief": "Initial list of items for this [TableView](). Default: empty list."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual).WHITE",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual.ColorVisual.Companion)."
                },
                {
                  "modifier": "",
                  "name": "selectionMode",
                  "type": "[SelectionMode](SelectionMode)",
                  "defaultValue": "SelectionMode.SINGLE",
                  "brief": "Selection mode to be used for this [TableView](). Default: [SelectionMode.SINGLE](SelectionMode.SINGLE)."
                },
                {
                  "modifier": "",
                  "name": "selectionBackground",
                  "type": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual)",
                  "defaultValue": "ColorVisual.BLUE",
                  "brief": "Background for selected items in this [TableView](). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual.ColorVisual.Companion)."
                }
              ],
              "brief": "Creates a [TableView]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val columns: ObservableList<TableColumn<T>>",
              "modifier": "val",
              "name": "columns",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists.ObservableList)<[TableColumn](TableColumn)<[T]()>>",
              "defaultValue": "",
              "brief": "An [ObservableList](tools.aqua.bgw.observable.lists.ObservableList) that contains TableColumns which specify how the data is represented in that column. The first [TableColumn](TableColumn) in this ObservableList will be the leftmost column in the rendered [TableView]()."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val items: ObservableList<T>",
              "modifier": "val",
              "name": "items",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists.ObservableList)<[T]()>",
              "defaultValue": "",
              "brief": "An [ObservableList](tools.aqua.bgw.observable.lists.ObservableList) that contains the data objects. The first object in this ObservableList will be the topmost row in the rendered [UIComponent](UIComponent)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "modifier": "val",
              "name": "selectedIndices",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
              "defaultValue": "",
              "brief": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "modifier": "val",
              "name": "selectedItems",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList)<[T]()>",
              "defaultValue": "",
              "brief": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists.ReadonlyObservableList) containing all currently selected items in this [UIComponent](UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "var selectionBackground: ColorVisual",
              "modifier": "var",
              "name": "selectionBackground",
              "type": "[ColorVisual](tools.aqua.bgw.visual.ColorVisual)",
              "defaultValue": "",
              "brief": "Background color for selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "val selectionBackgroundProperty: Property<ColorVisual>",
              "modifier": "val",
              "name": "selectionBackgroundProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[ColorVisual](tools.aqua.bgw.visual.ColorVisual)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the background color for selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "var selectionMode: SelectionMode",
              "modifier": "var",
              "name": "selectionMode",
              "type": "[SelectionMode](SelectionMode)",
              "defaultValue": "",
              "brief": "Selection mode to be used for this [UIComponent](UIComponent)."
            },
            {
              "signature": "val selectionModeProperty: Property<SelectionMode>",
              "modifier": "val",
              "name": "selectionModeProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[SelectionMode](SelectionMode)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [selectionMode](StructuredDataView) of this [UIComponent](UIComponent)."
            },
            {
              "signature": "var selectionStyle: String",
              "modifier": "var",
              "name": "selectionStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Style of selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "val selectionStyleProperty: Property<String>",
              "modifier": "val",
              "name": "selectionStyleProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the style of selected items in this [UIComponent](UIComponent). Item selection is enabled via [selectionMode](StructuredDataView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun clearSelection()",
              "name": "clearSelection",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun select(element: T)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Selects the specified element. Clears current selection.Selects the element at the specified index in this [UIComponent](UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun select(index: Int)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Selects the specified element. Clears current selection.Selects the element at the specified index in this [UIComponent](UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun selectAll()",
              "name": "selectAll",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects all items in this [UIComponent](UIComponent)."
            },
            {
              "signature": "fun selectFirst()",
              "name": "selectFirst",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the first element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectLast()",
              "name": "selectLast",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the last element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectNext()",
              "name": "selectNext",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the next element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectPrevious()",
              "name": "selectPrevious",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Selects the previous element in this [UIComponent](UIComponent). Clears current selection."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "TextArea": {
        "type": "directory",
        "originalName": "-text-area",
        "packageName": "tools.aqua.bgw.components.uicomponents.TextArea",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "TextField": {
        "type": "directory",
        "originalName": "-text-field",
        "packageName": "tools.aqua.bgw.components.uicomponents.TextField",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "TextInputUIComponent": {
        "type": "directory",
        "originalName": "-text-input-u-i-component",
        "packageName": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var prompt: String",
              "modifier": "var",
              "name": "prompt",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Prompt of this [TextInputUIComponent]()."
            },
            {
              "signature": "val promptProperty: StringProperty",
              "modifier": "val",
              "name": "promptProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the prompt of this [TextInputUIComponent]()."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Text of this [TextInputUIComponent]()."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the text of this [TextInputUIComponent]()."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "ToggleButton": {
        "type": "directory",
        "originalName": "-toggle-button",
        "packageName": "tools.aqua.bgw.components.uicomponents.ToggleButton",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOGGLE_BUTTON_WIDTH, height: Number = DEFAULT_TOGGLE_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isWrapText: Boolean = false, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Horizontal coordinate for this [ToggleButton](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "Vertical coordinate for this [ToggleButton](). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOGGLE_BUTTON_WIDTH",
                  "brief": "Width for this [ToggleButton](). Default: [DEFAULT_TOGGLE_BUTTON_WIDTH](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOGGLE_BUTTON_HEIGHT",
                  "brief": "Height for this [ToggleButton](). Default: [DEFAULT_TOGGLE_BUTTON_HEIGHT](tools.aqua.bgw.core)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Text to be displayed for this [ToggleButton]()."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for this [ToggleButton](). Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER_LEFT",
                  "brief": "Alignment to be used for this [ToggleButton]()."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "Defines if text should be wrapped, if it exceeds the label's width. Default: false."
                },
                {
                  "modifier": "",
                  "name": "isSelected",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "The initial state for this [ToggleButton](). Default: false."
                },
                {
                  "modifier": "",
                  "name": "toggleGroup",
                  "type": "[ToggleGroup](ToggleGroup)",
                  "defaultValue": "ToggleGroup()",
                  "brief": "The ToggleGroup of this [ToggleButton](). Default: empty group."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "Visual.EMPTY",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual.Visual.Companion)."
                }
              ],
              "brief": "Creates a [ToggleButton]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "[Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Alignment](tools.aqua.bgw.core.Alignment) of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent](UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isSelected: Boolean",
              "modifier": "var",
              "name": "isSelected",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Selected state for this [ToggleButton]()."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Defines if text should be wrapped, if it exceeds the [Label](Label)'s width."
            },
            {
              "signature": "val isWrapTextProperty: BooleanProperty",
              "modifier": "val",
              "name": "isWrapTextProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [isWrapText](LabeledUIComponent) state of this [Label](Label)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val selectedProperty: BooleanProperty",
              "modifier": "val",
              "name": "selectedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the selected state of this [ToggleButton]()."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the label of this [LabeledUIComponent](LabeledUIComponent)."
            },
            {
              "signature": "var toggleGroup: ToggleGroup",
              "modifier": "var",
              "name": "toggleGroup",
              "type": "[ToggleGroup](ToggleGroup)",
              "defaultValue": "",
              "brief": "The ToggleGroup of this ToggleButton."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      },
      "ToggleGroup": {
        "type": "directory",
        "originalName": "-toggle-group",
        "packageName": "tools.aqua.bgw.components.uicomponents.ToggleGroup",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": "Creates a [ToggleGroup]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": []
        },
        "children": {}
      },
      "UIComponent": {
        "type": "directory",
        "originalName": "-u-i-component",
        "packageName": "tools.aqua.bgw.components.uicomponents.UIComponent",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(posX: Number, posY: Number, width: Number, height: Number, font: Font, visual: Visual)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "Horizontal coordinate for this [UIComponent]()."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "Vertical coordinate for this [UIComponent]()."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "Width for this [UIComponent]()."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "brief": "Height for this [UIComponent]()."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "",
                  "brief": "Font for this [UIComponent](). Usage depends on subclass."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "",
                  "brief": "Background [Visual](tools.aqua.bgw.visual.Visual)."
                }
              ],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The actual [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent]()'s background."
            },
            {
              "signature": "val backgroundStyleProperty: StringProperty",
              "modifier": "val",
              "name": "backgroundStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent]()'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [UIComponent]()."
            },
            {
              "signature": "val componentStyleProperty: StringProperty",
              "modifier": "val",
              "name": "componentStyleProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the css style that gets applied to this [UIComponent]()."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "brief": "Returns whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event.DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "[Font](tools.aqua.bgw.util.Font) of this [UIComponent](). Usage depends on subclass."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [Font](tools.aqua.bgw.util.Font) of this [UIComponent](). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val heightProperty: DoubleProperty",
              "modifier": "val",
              "name": "heightProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [height](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "val isDisabledProperty: BooleanProperty",
              "modifier": "val",
              "name": "isDisabledProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components.ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "val isFocusableProperty: BooleanProperty",
              "modifier": "val",
              "name": "isFocusableProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) that controls whether this [ComponentView](tools.aqua.bgw.components.ComponentView) is focusable or not."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val isVisibleProperty: BooleanProperty",
              "modifier": "val",
              "name": "isVisibleProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the visibility of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain)",
              "defaultValue": "",
              "brief": "Returns a [CoordinatePlain](tools.aqua.bgw.util.CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components.ComponentView) and the [dropAcceptor](tools.aqua.bgw.components.ComponentView) returns true for the given DragEvent."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event.DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [DragEvent](tools.aqua.bgw.event.DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components.ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components.ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components.ComponentView) and [onMouseReleased](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event.MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event.MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "modifier": "var",
              "name": "onScroll",
              "type": "([ScrollEvent](tools.aqua.bgw.event.ScrollEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event.ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "opacityProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [opacity](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)?",
              "defaultValue": "",
              "brief": "The parent of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posXProperty: DoubleProperty",
              "modifier": "val",
              "name": "posXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val posYProperty: DoubleProperty",
              "modifier": "val",
              "name": "posYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "val rotationProperty: DoubleProperty",
              "modifier": "val",
              "name": "rotationProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the rotation of this [ComponentView](tools.aqua.bgw.components.ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleXProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "val scaleYProperty: DoubleProperty",
              "modifier": "val",
              "name": "scaleYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components.ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Current [Visual](tools.aqua.bgw.visual.Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) for this ComponentView."
            },
            {
              "signature": "val widthProperty: DoubleProperty",
              "modifier": "val",
              "name": "widthProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [width](tools.aqua.bgw.components.[ComponentView](tools.aqua.bgw.components.ComponentView)) of this ComponentView."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            },
            {
              "signature": "val zIndexProperty: IntegerProperty",
              "modifier": "val",
              "name": "zIndexProperty",
              "type": "[IntegerProperty](tools.aqua.bgw.observable.properties.IntegerProperty)",
              "defaultValue": "",
              "brief": "Property for the order of [ComponentView](tools.aqua.bgw.components.ComponentView) inside of [parent](tools.aqua.bgw.components.ComponentView).#"
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds an offset to this [ComponentView](tools.aqua.bgw.components.ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "parameters": [],
              "returnType": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
              "brief": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Repositions this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Resizes this [ComponentView](tools.aqua.bgw.components.ComponentView) to the specified [width](tools.aqua.bgw.components.ComponentView) and [height](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Rotates this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given number of [degrees](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView) by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s width by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Scales this [ComponentView](tools.aqua.bgw.components.ComponentView)'s height by the given [scalar](tools.aqua.bgw.components.ComponentView).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the back inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Puts the [ComponentView](tools.aqua.bgw.components.ComponentView) to the front inside its [parent](tools.aqua.bgw.components.ComponentView) and Changes its [zIndex](tools.aqua.bgw.components.ComponentView) accordingly."
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.core": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.core",
    "packageName": "tools.aqua.bgw.core",
    "tags": [
      "common",
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "enum Alignment : Enum<Alignment>",
          "brief": "Used to define a centering behaviour. Encapsulates [VerticalAlignment](VerticalAlignment) and [HorizontalAlignment](HorizontalAlignment)."
        },
        {
          "signature": "data class AspectRatio",
          "brief": "Class representing an aspect ratio between the window sides."
        },
        {
          "signature": "open class BoardGameApplication(windowTitle: String = DEFAULT_WINDOW_TITLE, aspectRatio: AspectRatio = AspectRatio(), windowMode: WindowMode? = null)",
          "brief": "Baseclass for all BGW Applications. Extend from this class in order to create your own game application. You may only instantiate one application."
        },
        {
          "signature": "open class BoardGameScene(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE) : Scene<ComponentView>",
          "brief": "Baseclass for BGW game scenes."
        },
        {
          "signature": "data class Color(val red: Int, val green: Int, val blue: Int, val alpha: Double = 1.0)",
          "brief": ""
        },
        {
          "signature": "enum HexOrientation : Enum<HexOrientation>",
          "brief": "Enumeration class representing the orientation options for hexagonal grids and views."
        },
        {
          "signature": "enum HorizontalAlignment : Enum<HorizontalAlignment>",
          "brief": "Used to define horizontal centering behaviour."
        },
        {
          "signature": "open class MenuScene(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE) : Scene<StaticComponentView<out StaticComponentView<*>>>",
          "brief": "Baseclass for BGW menu scenes. Extend this class in order to create your own menu scene."
        },
        {
          "signature": "enum ScaleMode : Enum<ScaleMode>",
          "brief": "Used to define the scaling behaviour of a Scene."
        },
        {
          "signature": "sealed class Scene<T : ComponentView>",
          "brief": "Baseclass for BGW scenes."
        },
        {
          "signature": "enum VerticalAlignment : Enum<VerticalAlignment>",
          "brief": "Used to define vertical centering behaviour."
        },
        {
          "signature": "enum WindowMode : Enum<WindowMode>",
          "brief": "Enum for different window modes."
        }
      ],
      "properties": [
        {
          "signature": "const val DEFAULT_ANIMATION_DURATION: Int = 1000",
          "modifier": "val",
          "name": "DEFAULT_ANIMATION_DURATION",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "1000",
          "brief": "Default Animation duration in milliseconds."
        },
        {
          "signature": "const val DEFAULT_ANIMATION_SPEED: Int = 50",
          "modifier": "val",
          "name": "DEFAULT_ANIMATION_SPEED",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "50",
          "brief": "Default Animation speed in steps."
        },
        {
          "signature": "const val DEFAULT_AREA_HEIGHT: Double",
          "modifier": "val",
          "name": "DEFAULT_AREA_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default Area height."
        },
        {
          "signature": "const val DEFAULT_AREA_WIDTH: Double",
          "modifier": "val",
          "name": "DEFAULT_AREA_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default Area width."
        },
        {
          "signature": "const val DEFAULT_BLUR_RADIUS: Double = 63.0",
          "modifier": "val",
          "name": "DEFAULT_BLUR_RADIUS",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "63.0",
          "brief": "Default blur radius for menuScene overlay."
        },
        {
          "signature": "const val DEFAULT_BOARD_HEIGHT: Double = 900.0",
          "modifier": "val",
          "name": "DEFAULT_BOARD_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "900.0",
          "brief": "Default TableView height."
        },
        {
          "signature": "const val DEFAULT_BOARD_WIDTH: Double = 1600.0",
          "modifier": "val",
          "name": "DEFAULT_BOARD_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "1600.0",
          "brief": "Default TableView width."
        },
        {
          "signature": "const val DEFAULT_BUTTON_HEIGHT: Double = 45.0",
          "modifier": "val",
          "name": "DEFAULT_BUTTON_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "45.0",
          "brief": "Default Button height."
        },
        {
          "signature": "const val DEFAULT_BUTTON_WIDTH: Double = 120.0",
          "modifier": "val",
          "name": "DEFAULT_BUTTON_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "120.0",
          "brief": "Default Button width."
        },
        {
          "signature": "const val DEFAULT_CARD_HEIGHT: Double = 200.0",
          "modifier": "val",
          "name": "DEFAULT_CARD_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "200.0",
          "brief": "Default CardView height."
        },
        {
          "signature": "const val DEFAULT_CARD_STACK_HEIGHT: Double",
          "modifier": "val",
          "name": "DEFAULT_CARD_STACK_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default CardStack height."
        },
        {
          "signature": "const val DEFAULT_CARD_STACK_WIDTH: Double",
          "modifier": "val",
          "name": "DEFAULT_CARD_STACK_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default CardStack width."
        },
        {
          "signature": "const val DEFAULT_CARD_WIDTH: Double = 130.0",
          "modifier": "val",
          "name": "DEFAULT_CARD_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "130.0",
          "brief": "Default CardView width."
        },
        {
          "signature": "const val DEFAULT_CHECKBOX_HEIGHT: Int = 30",
          "modifier": "val",
          "name": "DEFAULT_CHECKBOX_HEIGHT",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "30",
          "brief": "Default CheckBox height."
        },
        {
          "signature": "const val DEFAULT_CHECKBOX_WIDTH: Int = 120",
          "modifier": "val",
          "name": "DEFAULT_CHECKBOX_WIDTH",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "120",
          "brief": "Default CheckBox width."
        },
        {
          "signature": "const val DEFAULT_COLOR_PICKER_HEIGHT: Int = 30",
          "modifier": "val",
          "name": "DEFAULT_COLOR_PICKER_HEIGHT",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "30",
          "brief": "Default ColorPicker height."
        },
        {
          "signature": "const val DEFAULT_COLOR_PICKER_WIDTH: Int = 120",
          "modifier": "val",
          "name": "DEFAULT_COLOR_PICKER_WIDTH",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "120",
          "brief": "Default ColorPicker width."
        },
        {
          "signature": "const val DEFAULT_COMBOBOX_HEIGHT: Int = 30",
          "modifier": "val",
          "name": "DEFAULT_COMBOBOX_HEIGHT",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "30",
          "brief": "Default ComboBox height."
        },
        {
          "signature": "const val DEFAULT_COMBOBOX_WIDTH: Int = 120",
          "modifier": "val",
          "name": "DEFAULT_COMBOBOX_WIDTH",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "120",
          "brief": "Default ComboBox width."
        },
        {
          "signature": "const val DEFAULT_DICE_HEIGHT: Double = 80.0",
          "modifier": "val",
          "name": "DEFAULT_DICE_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "80.0",
          "brief": "Default DiceView height."
        },
        {
          "signature": "const val DEFAULT_DICE_WIDTH: Double = 80.0",
          "modifier": "val",
          "name": "DEFAULT_DICE_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "80.0",
          "brief": "Default DiceView width."
        },
        {
          "signature": "const val DEFAULT_FADE_TIME: Int = 250",
          "modifier": "val",
          "name": "DEFAULT_FADE_TIME",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "250",
          "brief": "The default fade time for MenuScenes in BoardGameApplication.showMenuScene or BoardGameApplication.hideMenuScene in milliseconds."
        },
        {
          "signature": "const val DEFAULT_FONT_SIZE: Double = 14.0",
          "modifier": "val",
          "name": "DEFAULT_FONT_SIZE",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "14.0",
          "brief": "Default Font size."
        },
        {
          "signature": "const val DEFAULT_GRID_SPACING: Double = 0.0",
          "modifier": "val",
          "name": "DEFAULT_GRID_SPACING",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "0.0",
          "brief": "Default GridPane spacing."
        },
        {
          "signature": "const val DEFAULT_HEXAGON_SIZE: Double = 100.0",
          "modifier": "val",
          "name": "DEFAULT_HEXAGON_SIZE",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "100.0",
          "brief": "Default [DEFAULT_HEXAGON_SIZE]() size."
        },
        {
          "signature": "const val DEFAULT_LABEL_HEIGHT: Double = 30.0",
          "modifier": "val",
          "name": "DEFAULT_LABEL_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "30.0",
          "brief": "Default Label height."
        },
        {
          "signature": "const val DEFAULT_LABEL_WIDTH: Double = 120.0",
          "modifier": "val",
          "name": "DEFAULT_LABEL_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "120.0",
          "brief": "Default Label width."
        },
        {
          "signature": "const val DEFAULT_LINEAR_LAYOUT_HEIGHT: Double",
          "modifier": "val",
          "name": "DEFAULT_LINEAR_LAYOUT_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default LinearLayout height."
        },
        {
          "signature": "const val DEFAULT_LINEAR_LAYOUT_SPACING: Double = 0.0",
          "modifier": "val",
          "name": "DEFAULT_LINEAR_LAYOUT_SPACING",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "0.0",
          "brief": "Default LinearLayout spacing."
        },
        {
          "signature": "const val DEFAULT_LINEAR_LAYOUT_WIDTH: Double",
          "modifier": "val",
          "name": "DEFAULT_LINEAR_LAYOUT_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default LinearLayout width."
        },
        {
          "signature": "const val DEFAULT_LIST_VIEW_HEIGHT: Int = 400",
          "modifier": "val",
          "name": "DEFAULT_LIST_VIEW_HEIGHT",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "400",
          "brief": "Default ListView width."
        },
        {
          "signature": "const val DEFAULT_LIST_VIEW_WIDTH: Int = 200",
          "modifier": "val",
          "name": "DEFAULT_LIST_VIEW_WIDTH",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "200",
          "brief": "Default ListView width."
        },
        {
          "signature": "const val DEFAULT_MENU_SCENE_OPACITY: Double = 0.75",
          "modifier": "val",
          "name": "DEFAULT_MENU_SCENE_OPACITY",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "0.75",
          "brief": "Default menu scene opacity."
        },
        {
          "signature": "const val DEFAULT_PROGRESSBAR_HEIGHT: Int = 20",
          "modifier": "val",
          "name": "DEFAULT_PROGRESSBAR_HEIGHT",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "20",
          "brief": "Default ProgressBar height."
        },
        {
          "signature": "const val DEFAULT_PROGRESSBAR_WIDTH: Int = 250",
          "modifier": "val",
          "name": "DEFAULT_PROGRESSBAR_WIDTH",
          "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
          "defaultValue": "250",
          "brief": "Default ProgressBar width."
        },
        {
          "signature": "const val DEFAULT_RADIO_BUTTON_HEIGHT: Double",
          "modifier": "val",
          "name": "DEFAULT_RADIO_BUTTON_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default RadioButton height."
        },
        {
          "signature": "const val DEFAULT_RADIO_BUTTON_WIDTH: Double",
          "modifier": "val",
          "name": "DEFAULT_RADIO_BUTTON_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default RadioButton width."
        },
        {
          "signature": "const val DEFAULT_SATCHEL_HEIGHT: Double",
          "modifier": "val",
          "name": "DEFAULT_SATCHEL_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default Satchel height."
        },
        {
          "signature": "const val DEFAULT_SATCHEL_WIDTH: Double",
          "modifier": "val",
          "name": "DEFAULT_SATCHEL_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default Satchel width."
        },
        {
          "signature": "const val DEFAULT_SCENE_HEIGHT: Double = 1080.0",
          "modifier": "val",
          "name": "DEFAULT_SCENE_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "1080.0",
          "brief": "Default scene height in virtual pixels."
        },
        {
          "signature": "const val DEFAULT_SCENE_WIDTH: Double = 1920.0",
          "modifier": "val",
          "name": "DEFAULT_SCENE_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "1920.0",
          "brief": "Default scene width in virtual pixels."
        },
        {
          "signature": "const val DEFAULT_TABLE_VIEW_HEIGHT: Double = 500.0",
          "modifier": "val",
          "name": "DEFAULT_TABLE_VIEW_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "500.0",
          "brief": "Default TableView height."
        },
        {
          "signature": "const val DEFAULT_TABLE_VIEW_WIDTH: Double = 400.0",
          "modifier": "val",
          "name": "DEFAULT_TABLE_VIEW_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "400.0",
          "brief": "Default TableView width."
        },
        {
          "signature": "const val DEFAULT_TEXT_AREA_HEIGHT: Double = 100.0",
          "modifier": "val",
          "name": "DEFAULT_TEXT_AREA_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "100.0",
          "brief": "Default TextArea height."
        },
        {
          "signature": "const val DEFAULT_TEXT_AREA_WIDTH: Double = 200.0",
          "modifier": "val",
          "name": "DEFAULT_TEXT_AREA_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "200.0",
          "brief": "Default TextArea width."
        },
        {
          "signature": "const val DEFAULT_TEXT_FIELD_HEIGHT: Double = 30.0",
          "modifier": "val",
          "name": "DEFAULT_TEXT_FIELD_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "30.0",
          "brief": "Default TextField height."
        },
        {
          "signature": "const val DEFAULT_TEXT_FIELD_WIDTH: Double = 140.0",
          "modifier": "val",
          "name": "DEFAULT_TEXT_FIELD_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "140.0",
          "brief": "Default TextField width."
        },
        {
          "signature": "const val DEFAULT_TOGGLE_BUTTON_HEIGHT: Double",
          "modifier": "val",
          "name": "DEFAULT_TOGGLE_BUTTON_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default ToggleButton height."
        },
        {
          "signature": "const val DEFAULT_TOGGLE_BUTTON_WIDTH: Double",
          "modifier": "val",
          "name": "DEFAULT_TOGGLE_BUTTON_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "",
          "brief": "Default ToggleButton width."
        },
        {
          "signature": "const val DEFAULT_TOKEN_HEIGHT: Double = 50.0",
          "modifier": "val",
          "name": "DEFAULT_TOKEN_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "50.0",
          "brief": "Default TokenView height."
        },
        {
          "signature": "const val DEFAULT_TOKEN_WIDTH: Double = 50.0",
          "modifier": "val",
          "name": "DEFAULT_TOKEN_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "50.0",
          "brief": "Default TokenView width."
        },
        {
          "signature": "const val DEFAULT_WINDOW_BORDER: Double = 0.8",
          "modifier": "val",
          "name": "DEFAULT_WINDOW_BORDER",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "0.8",
          "brief": "Default minimization factor of window."
        },
        {
          "signature": "const val DEFAULT_WINDOW_HEIGHT: Double = 747.0",
          "modifier": "val",
          "name": "DEFAULT_WINDOW_HEIGHT",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "747.0",
          "brief": "Default window height in non-maximized mode."
        },
        {
          "signature": "const val DEFAULT_WINDOW_TITLE: String",
          "modifier": "val",
          "name": "DEFAULT_WINDOW_TITLE",
          "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
          "defaultValue": "",
          "brief": "Default window title."
        },
        {
          "signature": "const val DEFAULT_WINDOW_WIDTH: Double = 1280.0",
          "modifier": "val",
          "name": "DEFAULT_WINDOW_WIDTH",
          "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
          "defaultValue": "1280.0",
          "brief": "Default window width in non-maximized mode."
        }
      ],
      "functions": []
    },
    "children": {
      "Alignment": {
        "type": "directory",
        "originalName": "-alignment",
        "packageName": "tools.aqua.bgw.core.Alignment",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [
            {
              "signature": "object Companion",
              "brief": ""
            }
          ],
          "properties": [
            {
              "signature": "val entries: EnumEntries<Alignment>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[Alignment]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val horizontalAlignment: HorizontalAlignment",
              "modifier": "val",
              "name": "horizontalAlignment",
              "type": "[HorizontalAlignment](HorizontalAlignment)",
              "defaultValue": "",
              "brief": "Horizontal alignment component."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val verticalAlignment: VerticalAlignment",
              "modifier": "val",
              "name": "verticalAlignment",
              "type": "[VerticalAlignment](VerticalAlignment)",
              "defaultValue": "",
              "brief": "Vertical alignment component."
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): Alignment",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Alignment]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<Alignment>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[Alignment]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "BOTTOM_CENTER": {
            "type": "directory",
            "originalName": "-b-o-t-t-o-m_-c-e-n-t-e-r",
            "packageName": "tools.aqua.bgw.core.Alignment.BOTTOM_CENTER",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "BOTTOM_LEFT": {
            "type": "directory",
            "originalName": "-b-o-t-t-o-m_-l-e-f-t",
            "packageName": "tools.aqua.bgw.core.Alignment.BOTTOM_LEFT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "BOTTOM_RIGHT": {
            "type": "directory",
            "originalName": "-b-o-t-t-o-m_-r-i-g-h-t",
            "packageName": "tools.aqua.bgw.core.Alignment.BOTTOM_RIGHT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "CENTER": {
            "type": "directory",
            "originalName": "-c-e-n-t-e-r",
            "packageName": "tools.aqua.bgw.core.Alignment.CENTER",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "CENTER_LEFT": {
            "type": "directory",
            "originalName": "-c-e-n-t-e-r_-l-e-f-t",
            "packageName": "tools.aqua.bgw.core.Alignment.CENTER_LEFT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "CENTER_RIGHT": {
            "type": "directory",
            "originalName": "-c-e-n-t-e-r_-r-i-g-h-t",
            "packageName": "tools.aqua.bgw.core.Alignment.CENTER_RIGHT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.core.Alignment.Companion",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [],
              "functions": [
                {
                  "signature": "fun of(v: VerticalAlignment, h: HorizontalAlignment): Alignment",
                  "name": "of",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "v",
                      "type": "[VerticalAlignment](VerticalAlignment)",
                      "defaultValue": "",
                      "isLambda": false
                    },
                    {
                      "modifier": "",
                      "name": "h",
                      "type": "[HorizontalAlignment](HorizontalAlignment)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[Alignment]()",
                  "brief": "Creates [Alignment]() instance out of [VerticalAlignment](VerticalAlignment) and [HorizontalAlignment](HorizontalAlignment).",
                  "isSuspend": false
                }
              ]
            },
            "children": {}
          },
          "TOP_CENTER": {
            "type": "directory",
            "originalName": "-t-o-p_-c-e-n-t-e-r",
            "packageName": "tools.aqua.bgw.core.Alignment.TOP_CENTER",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "TOP_LEFT": {
            "type": "directory",
            "originalName": "-t-o-p_-l-e-f-t",
            "packageName": "tools.aqua.bgw.core.Alignment.TOP_LEFT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "TOP_RIGHT": {
            "type": "directory",
            "originalName": "-t-o-p_-r-i-g-h-t",
            "packageName": "tools.aqua.bgw.core.Alignment.TOP_RIGHT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val horizontalAlignment: HorizontalAlignment",
                  "modifier": "val",
                  "name": "horizontalAlignment",
                  "type": "[HorizontalAlignment](HorizontalAlignment)",
                  "defaultValue": "",
                  "brief": "Horizontal alignment component."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val verticalAlignment: VerticalAlignment",
                  "modifier": "val",
                  "name": "verticalAlignment",
                  "type": "[VerticalAlignment](VerticalAlignment)",
                  "defaultValue": "",
                  "brief": "Vertical alignment component."
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "AspectRatio": {
        "type": "directory",
        "originalName": "-aspect-ratio",
        "packageName": "tools.aqua.bgw.core.AspectRatio",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [
            {
              "signature": "object Companion",
              "brief": ""
            }
          ],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.core.AspectRatio.Companion",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [],
              "functions": [
                {
                  "signature": "fun of(width: Number = DEFAULT_WINDOW_WIDTH, height: Number = DEFAULT_WINDOW_HEIGHT): AspectRatio",
                  "name": "of",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "width",
                      "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                      "defaultValue": "DEFAULT_WINDOW_WIDTH",
                      "isLambda": false
                    },
                    {
                      "modifier": "",
                      "name": "height",
                      "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                      "defaultValue": "DEFAULT_WINDOW_HEIGHT",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[AspectRatio]()",
                  "brief": "Creates an aspect ratio out of width and height. May be for example 1920 : 1080 as well as 16 : 9.",
                  "isSuspend": false
                }
              ]
            },
            "children": {}
          }
        }
      },
      "BoardGameApplication": {
        "type": "directory",
        "originalName": "-board-game-application",
        "packageName": "tools.aqua.bgw.core.BoardGameApplication",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.core.BoardGameApplication.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [],
              "functions": [
                {
                  "signature": "fun loadFont(path: String, fontName: String, weight: Font.FontWeight): Boolean",
                  "name": "loadFont",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "path",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "isLambda": false
                    },
                    {
                      "modifier": "",
                      "name": "fontName",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "isLambda": false
                    },
                    {
                      "modifier": "",
                      "name": "weight",
                      "type": "[Font.FontWeight](tools.aqua.bgw.util.Font.FontWeight)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "brief": "Loads a font file and registers it in the JFX graphics system.",
                  "isSuspend": false
                },
                {
                  "signature": "fun runOnGUIThread(task: Runnable)",
                  "name": "runOnGUIThread",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "task",
                      "type": "[Runnable](https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "Unit",
                  "brief": "Executes given [task]() on the UI thread. Use this method to update properties of ComponentViews from asynchronous environments like [Animation.onFinished](tools.aqua.bgw.animation.Animation) events. If no Application has yet been started, the task is executed on the calling Thread. This function is Thread safe.",
                  "isSuspend": false
                }
              ]
            },
            "children": {}
          }
        }
      },
      "BoardGameScene": {
        "type": "directory",
        "originalName": "-board-game-scene",
        "packageName": "tools.aqua.bgw.core.BoardGameScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_WIDTH",
                  "brief": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH]()."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_HEIGHT",
                  "brief": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT]()."
                },
                {
                  "modifier": "",
                  "name": "background",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "ColorVisual.WHITE",
                  "brief": "BoardGameScene [Visual](tools.aqua.bgw.visual.Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual.ColorVisual.Companion)."
                }
              ],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](Scene)."
            },
            {
              "signature": "val components: List<ComponentView>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](Scene) in virtual coordinates."
            },
            {
              "signature": "val lockedProperty: BooleanProperty",
              "modifier": "val",
              "name": "lockedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "Property that indicates if this [BoardGameScene]() is locked from user input."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background]([Scene](Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<ComponentView>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: ComponentView)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun lock()",
              "name": "lock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Locks [Scene](Scene) from any user input."
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: ComponentView)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun unlock()",
              "name": "unlock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Unlocks [Scene](Scene) for user input."
            }
          ]
        },
        "children": {}
      },
      "Color": {
        "type": "directory",
        "originalName": "-color",
        "packageName": "tools.aqua.bgw.core.Color",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.core.Color.Companion",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val BLACK: Color",
                  "modifier": "val",
                  "name": "BLACK",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val BLUE: Color",
                  "modifier": "val",
                  "name": "BLUE",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val CYAN: Color",
                  "modifier": "val",
                  "name": "CYAN",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val DARK_GRAY: Color",
                  "modifier": "val",
                  "name": "DARK_GRAY",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val GRAY: Color",
                  "modifier": "val",
                  "name": "GRAY",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val GREEN: Color",
                  "modifier": "val",
                  "name": "GREEN",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val LIGHT_GRAY: Color",
                  "modifier": "val",
                  "name": "LIGHT_GRAY",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val MAGENTA: Color",
                  "modifier": "val",
                  "name": "MAGENTA",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ORANGE: Color",
                  "modifier": "val",
                  "name": "ORANGE",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val PINK: Color",
                  "modifier": "val",
                  "name": "PINK",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val RED: Color",
                  "modifier": "val",
                  "name": "RED",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val TRANSPARENT: Color",
                  "modifier": "val",
                  "name": "TRANSPARENT",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val WHITE: Color",
                  "modifier": "val",
                  "name": "WHITE",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val YELLOW: Color",
                  "modifier": "val",
                  "name": "YELLOW",
                  "type": "[Color]()",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "HexOrientation": {
        "type": "directory",
        "originalName": "-hex-orientation",
        "packageName": "tools.aqua.bgw.core.HexOrientation",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<HexOrientation>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[HexOrientation]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): HexOrientation",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[HexOrientation]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<HexOrientation>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[HexOrientation]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "FLAT_TOP": {
            "type": "directory",
            "originalName": "-f-l-a-t_-t-o-p",
            "packageName": "tools.aqua.bgw.core.HexOrientation.FLAT_TOP",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "POINTY_TOP": {
            "type": "directory",
            "originalName": "-p-o-i-n-t-y_-t-o-p",
            "packageName": "tools.aqua.bgw.core.HexOrientation.POINTY_TOP",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "HorizontalAlignment": {
        "type": "directory",
        "originalName": "-horizontal-alignment",
        "packageName": "tools.aqua.bgw.core.HorizontalAlignment",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<HorizontalAlignment>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[HorizontalAlignment]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): HorizontalAlignment",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[HorizontalAlignment]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<HorizontalAlignment>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[HorizontalAlignment]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "CENTER": {
            "type": "directory",
            "originalName": "-c-e-n-t-e-r",
            "packageName": "tools.aqua.bgw.core.HorizontalAlignment.CENTER",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "LEFT": {
            "type": "directory",
            "originalName": "-l-e-f-t",
            "packageName": "tools.aqua.bgw.core.HorizontalAlignment.LEFT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "RIGHT": {
            "type": "directory",
            "originalName": "-r-i-g-h-t",
            "packageName": "tools.aqua.bgw.core.HorizontalAlignment.RIGHT",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "MenuScene": {
        "type": "directory",
        "originalName": "-menu-scene",
        "packageName": "tools.aqua.bgw.core.MenuScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_WIDTH",
                  "brief": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH]()."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_HEIGHT",
                  "brief": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT]()."
                },
                {
                  "modifier": "",
                  "name": "background",
                  "type": "[Visual](tools.aqua.bgw.visual.Visual)",
                  "defaultValue": "ColorVisual.WHITE",
                  "brief": "BoardGameScene [Visual](tools.aqua.bgw.visual.Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual.ColorVisual.Companion)."
                }
              ],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](Scene)."
            },
            {
              "signature": "val components: List<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](Scene) in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background]([Scene](Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ScaleMode": {
        "type": "directory",
        "originalName": "-scale-mode",
        "packageName": "tools.aqua.bgw.core.ScaleMode",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<ScaleMode>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[ScaleMode]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): ScaleMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[ScaleMode]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<ScaleMode>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[ScaleMode]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "FULL": {
            "type": "directory",
            "originalName": "-f-u-l-l",
            "packageName": "tools.aqua.bgw.core.ScaleMode.FULL",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NO_SCALE": {
            "type": "directory",
            "originalName": "-n-o_-s-c-a-l-e",
            "packageName": "tools.aqua.bgw.core.ScaleMode.NO_SCALE",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "ONLY_SHRINK": {
            "type": "directory",
            "originalName": "-o-n-l-y_-s-h-r-i-n-k",
            "packageName": "tools.aqua.bgw.core.ScaleMode.ONLY_SHRINK",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "Scene": {
        "type": "directory",
        "originalName": "-scene",
        "packageName": "tools.aqua.bgw.core.Scene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene]()."
            },
            {
              "signature": "val components: List<T>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene]()."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene]() in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed]() ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background]() of this [Scene]()."
            },
            {
              "signature": "val rootNode: RootComponent<T>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[T]()>",
              "defaultValue": "",
              "brief": "The root node of this [Scene]()."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene]() in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: T)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node]() recursively through the visual tree and logs path where the node appears as first component and the [rootNode]() as last.",
              "isSuspend": false
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: T)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "VerticalAlignment": {
        "type": "directory",
        "originalName": "-vertical-alignment",
        "packageName": "tools.aqua.bgw.core.VerticalAlignment",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<VerticalAlignment>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[VerticalAlignment]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): VerticalAlignment",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[VerticalAlignment]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<VerticalAlignment>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[VerticalAlignment]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "BOTTOM": {
            "type": "directory",
            "originalName": "-b-o-t-t-o-m",
            "packageName": "tools.aqua.bgw.core.VerticalAlignment.BOTTOM",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "CENTER": {
            "type": "directory",
            "originalName": "-c-e-n-t-e-r",
            "packageName": "tools.aqua.bgw.core.VerticalAlignment.CENTER",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "TOP": {
            "type": "directory",
            "originalName": "-t-o-p",
            "packageName": "tools.aqua.bgw.core.VerticalAlignment.TOP",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "WindowMode": {
        "type": "directory",
        "originalName": "-window-mode",
        "packageName": "tools.aqua.bgw.core.WindowMode",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<WindowMode>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[WindowMode]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): WindowMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[WindowMode]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<WindowMode>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[WindowMode]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "FULLSCREEN": {
            "type": "directory",
            "originalName": "-f-u-l-l-s-c-r-e-e-n",
            "packageName": "tools.aqua.bgw.core.WindowMode.FULLSCREEN",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "MAXIMIZED": {
            "type": "directory",
            "originalName": "-m-a-x-i-m-i-z-e-d",
            "packageName": "tools.aqua.bgw.core.WindowMode.MAXIMIZED",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NORMAL": {
            "type": "directory",
            "originalName": "-n-o-r-m-a-l",
            "packageName": "tools.aqua.bgw.core.WindowMode.NORMAL",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      }
    }
  },
  "tools.aqua.bgw.dialog": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.dialog",
    "packageName": "tools.aqua.bgw.dialog",
    "tags": [
      "common",
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "enum ButtonType : Enum<ButtonType>",
          "brief": "Enum for all available button types."
        },
        {
          "signature": "data class Dialog",
          "brief": "Shows a dialog containing the given [message](Dialog) and [buttons](Dialog)."
        },
        {
          "signature": "enum DialogType : Enum<DialogType>",
          "brief": "Enum for all available alert types."
        },
        {
          "signature": "data class ExtensionFilter",
          "brief": "Extension filters for FileDialogs."
        },
        {
          "signature": "data class FileDialog(val mode: FileDialogMode, val title: String = \"\", val initialFileName: String = \"\", val initialDirectoryPath: File? = null, val extensionFilters: List<ExtensionFilter> = emptyList())",
          "brief": "A [FileDialog](FileDialog) such as a file chooser or save dialog, depending on [FileDialogMode](FileDialogMode)."
        },
        {
          "signature": "enum FileDialogMode : Enum<FileDialogMode>",
          "brief": "Enum for possible [FileDialog](FileDialog) modes."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "ButtonType": {
        "type": "directory",
        "originalName": "-button-type",
        "packageName": "tools.aqua.bgw.dialog.ButtonType",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<ButtonType>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[ButtonType]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): ButtonType",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[ButtonType]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<ButtonType>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[ButtonType]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "APPLY": {
            "type": "directory",
            "originalName": "-a-p-p-l-y",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.APPLY",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "CANCEL": {
            "type": "directory",
            "originalName": "-c-a-n-c-e-l",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.CANCEL",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "CLOSE": {
            "type": "directory",
            "originalName": "-c-l-o-s-e",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.CLOSE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "FINISH": {
            "type": "directory",
            "originalName": "-f-i-n-i-s-h",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.FINISH",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NEXT": {
            "type": "directory",
            "originalName": "-n-e-x-t",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.NEXT",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NO": {
            "type": "directory",
            "originalName": "-n-o",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.NO",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "OK": {
            "type": "directory",
            "originalName": "-o-k",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.OK",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "PREVIOUS": {
            "type": "directory",
            "originalName": "-p-r-e-v-i-o-u-s",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.PREVIOUS",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "YES": {
            "type": "directory",
            "originalName": "-y-e-s",
            "packageName": "tools.aqua.bgw.dialog.ButtonType.YES",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "Dialog": {
        "type": "directory",
        "originalName": "-dialog",
        "packageName": "tools.aqua.bgw.dialog.Dialog",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "DialogType": {
        "type": "directory",
        "originalName": "-dialog-type",
        "packageName": "tools.aqua.bgw.dialog.DialogType",
        "tags": [
          "common"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<DialogType>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[DialogType]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): DialogType",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[DialogType]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<DialogType>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[DialogType]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "CONFIRMATION": {
            "type": "directory",
            "originalName": "-c-o-n-f-i-r-m-a-t-i-o-n",
            "packageName": "tools.aqua.bgw.dialog.DialogType.CONFIRMATION",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "ERROR": {
            "type": "directory",
            "originalName": "-e-r-r-o-r",
            "packageName": "tools.aqua.bgw.dialog.DialogType.ERROR",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "EXCEPTION": {
            "type": "directory",
            "originalName": "-e-x-c-e-p-t-i-o-n",
            "packageName": "tools.aqua.bgw.dialog.DialogType.EXCEPTION",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "INFORMATION": {
            "type": "directory",
            "originalName": "-i-n-f-o-r-m-a-t-i-o-n",
            "packageName": "tools.aqua.bgw.dialog.DialogType.INFORMATION",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NONE": {
            "type": "directory",
            "originalName": "-n-o-n-e",
            "packageName": "tools.aqua.bgw.dialog.DialogType.NONE",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "WARNING": {
            "type": "directory",
            "originalName": "-w-a-r-n-i-n-g",
            "packageName": "tools.aqua.bgw.dialog.DialogType.WARNING",
            "tags": [
              "common"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "ExtensionFilter": {
        "type": "directory",
        "originalName": "-extension-filter",
        "packageName": "tools.aqua.bgw.dialog.ExtensionFilter",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "FileDialog": {
        "type": "directory",
        "originalName": "-file-dialog",
        "packageName": "tools.aqua.bgw.dialog.FileDialog",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "FileDialogMode": {
        "type": "directory",
        "originalName": "-file-dialog-mode",
        "packageName": "tools.aqua.bgw.dialog.FileDialogMode",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<FileDialogMode>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[FileDialogMode]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): FileDialogMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[FileDialogMode]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<FileDialogMode>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[FileDialogMode]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "CHOOSE_DIRECTORY": {
            "type": "directory",
            "originalName": "-c-h-o-o-s-e_-d-i-r-e-c-t-o-r-y",
            "packageName": "tools.aqua.bgw.dialog.FileDialogMode.CHOOSE_DIRECTORY",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "OPEN_FILE": {
            "type": "directory",
            "originalName": "-o-p-e-n_-f-i-l-e",
            "packageName": "tools.aqua.bgw.dialog.FileDialogMode.OPEN_FILE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "OPEN_MULTIPLE_FILES": {
            "type": "directory",
            "originalName": "-o-p-e-n_-m-u-l-t-i-p-l-e_-f-i-l-e-s",
            "packageName": "tools.aqua.bgw.dialog.FileDialogMode.OPEN_MULTIPLE_FILES",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "SAVE_FILE": {
            "type": "directory",
            "originalName": "-s-a-v-e_-f-i-l-e",
            "packageName": "tools.aqua.bgw.dialog.FileDialogMode.SAVE_FILE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      }
    }
  },
  "tools.aqua.bgw.io": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.io",
    "packageName": "tools.aqua.bgw.io",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "interface BufferedImage",
          "brief": ""
        },
        {
          "signature": "interface File",
          "brief": ""
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "BufferedImage": {
        "type": "directory",
        "originalName": "-buffered-image",
        "packageName": "tools.aqua.bgw.io.BufferedImage",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "abstract val height: Int",
              "modifier": "val",
              "name": "height",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "abstract val width: Int",
              "modifier": "val",
              "name": "width",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "abstract fun getSubimage(offsetX: Int, offsetY: Int, subWidth: Int, subHeight: Int): BufferedImage",
              "name": "getSubimage",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "subWidth",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "subHeight",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[BufferedImage]()",
              "brief": "",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "File": {
        "type": "directory",
        "originalName": "-file",
        "packageName": "tools.aqua.bgw.io.File",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "abstract val absolutePath: String",
              "modifier": "val",
              "name": "absolutePath",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": []
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.main": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.main",
    "packageName": "tools.aqua.bgw.main",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [],
      "properties": [],
      "functions": [
        {
          "signature": "fun getRandomImageVisual(): ImageVisual",
          "name": "getRandomImageVisual",
          "parameters": [],
          "returnType": "[ImageVisual](tools.aqua.bgw.visual.ImageVisual)",
          "brief": ""
        },
        {
          "signature": "fun main()",
          "name": "main",
          "parameters": [],
          "returnType": "Unit",
          "brief": ""
        },
        {
          "signature": "fun main()",
          "name": "main",
          "parameters": [],
          "returnType": "Unit",
          "brief": ""
        }
      ]
    },
    "children": {}
  },
  "tools.aqua.bgw.main.view": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.main.view",
    "packageName": "tools.aqua.bgw.main.view",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "class AnimationScene : BoardGameScene",
          "brief": ""
        },
        {
          "signature": "object Application : BoardGameApplication",
          "brief": ""
        },
        {
          "signature": "class DragDropScene : BoardGameScene",
          "brief": ""
        },
        {
          "signature": "class GridGameScene : BoardGameScene",
          "brief": ""
        },
        {
          "signature": "class MyMenuScene : MenuScene",
          "brief": ""
        },
        {
          "signature": "class UIScene : MenuScene",
          "brief": ""
        },
        {
          "signature": "class VisualScene : BoardGameScene",
          "brief": ""
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "AnimationScene": {
        "type": "directory",
        "originalName": "-animation-scene",
        "packageName": "tools.aqua.bgw.main.view.AnimationScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val components: List<ComponentView>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            },
            {
              "signature": "val lockedProperty: BooleanProperty",
              "modifier": "val",
              "name": "lockedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "Property that indicates if this [BoardGameScene](tools.aqua.bgw.core.BoardGameScene) is locked from user input."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core.Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background](tools.aqua.bgw.core.[Scene](tools.aqua.bgw.core.Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<ComponentView>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: ComponentView)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](tools.aqua.bgw.core.Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](tools.aqua.bgw.core.Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun lock()",
              "name": "lock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Locks [Scene](tools.aqua.bgw.core.Scene) from any user input."
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: ComponentView)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun unlock()",
              "name": "unlock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Unlocks [Scene](tools.aqua.bgw.core.Scene) for user input."
            }
          ]
        },
        "children": {}
      },
      "Application": {
        "type": "directory",
        "originalName": "-application",
        "packageName": "tools.aqua.bgw.main.view.Application",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "Background [Visual](tools.aqua.bgw.visual.Visual) for the [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication)."
            },
            {
              "signature": "var fullscreenExitCombination: KeyEvent?",
              "modifier": "var",
              "name": "fullscreenExitCombination",
              "type": "[KeyEvent](tools.aqua.bgw.event.KeyEvent)?",
              "defaultValue": "",
              "brief": "Specifies the KeyCombination that will allow the user to exit full screen mode. A value of 'null' will not match any KeyEvent and will make it so the user is not able to escape from fullscreen mode."
            },
            {
              "signature": "var fullscreenExitCombinationHint: String?",
              "modifier": "var",
              "name": "fullscreenExitCombinationHint",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "brief": "Specifies the KeyCombination hint that will be shown upon entering fullscreen mode. Hint will only be shown if an exit combination other than 'null' has been set."
            },
            {
              "signature": "var icon: ImageVisual?",
              "modifier": "var",
              "name": "icon",
              "type": "[ImageVisual](tools.aqua.bgw.visual.ImageVisual)?",
              "defaultValue": "",
              "brief": "Window icon displayed in the title and task bar."
            },
            {
              "signature": "var isFullScreen: Boolean",
              "modifier": "var",
              "name": "isFullScreen",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Sets this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication)'s fullscreen mode. true for fullscreen mode, false for default window."
            },
            {
              "signature": "var isMaximized: Boolean",
              "modifier": "var",
              "name": "isMaximized",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Sets this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication)'s maximized mode."
            },
            {
              "signature": "val menuScene: MyMenuScene",
              "modifier": "val",
              "name": "menuScene",
              "type": "[MyMenuScene](MyMenuScene)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var onWindowClosed: () -> Unit?",
              "modifier": "var",
              "name": "onWindowClosed",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked after the application window was closed."
            },
            {
              "signature": "var onWindowShown: () -> Unit?",
              "modifier": "var",
              "name": "onWindowShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked when the application was started and the window was shown."
            },
            {
              "signature": "var title: String",
              "modifier": "var",
              "name": "title",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Window title displayed in the title bar."
            },
            {
              "signature": "var windowHeight: Number",
              "modifier": "var",
              "name": "windowHeight",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "brief": "Sets this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication)'s preferred height. Only affects non-maximized, non-fullscreen windows."
            },
            {
              "signature": "var windowWidth: Number",
              "modifier": "var",
              "name": "windowWidth",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "brief": "Sets this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication)'s preferred width. Only affects non-maximized, non-fullscreen windows."
            }
          ],
          "functions": [
            {
              "signature": "fun exit()",
              "name": "exit",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Returns the [show](tools.aqua.bgw.core.BoardGameApplication) function, thus closing the application window."
            },
            {
              "signature": "fun hideMenuScene(fadeTime: Number = DEFAULT_FADE_TIME)",
              "name": "hideMenuScene",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fadeTime",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_FADE_TIME",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Hides currently shown [MenuScene](tools.aqua.bgw.core.MenuScene). Activates [BoardGameScene](tools.aqua.bgw.core.BoardGameScene) if present.",
              "isSuspend": false
            },
            {
              "signature": "fun repaint()",
              "name": "repaint",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Manually refreshes currently displayed Scenes."
            },
            {
              "signature": "fun setHorizontalSceneAlignment(newHorizontalAlignment: HorizontalAlignment)",
              "name": "setHorizontalSceneAlignment",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newHorizontalAlignment",
                  "type": "[HorizontalAlignment](tools.aqua.bgw.core.HorizontalAlignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets [HorizontalAlignment](tools.aqua.bgw.core.HorizontalAlignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun setScaleMode(newScaleMode: ScaleMode)",
              "name": "setScaleMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newScaleMode",
                  "type": "[ScaleMode](tools.aqua.bgw.core.ScaleMode)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets [ScaleMode](tools.aqua.bgw.core.ScaleMode) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun setSceneAlignment(newAlignment: Alignment)",
              "name": "setSceneAlignment",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newAlignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets [Alignment](tools.aqua.bgw.core.Alignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun setVerticalSceneAlignment(newVerticalAlignment: VerticalAlignment)",
              "name": "setVerticalSceneAlignment",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newVerticalAlignment",
                  "type": "[VerticalAlignment](tools.aqua.bgw.core.VerticalAlignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sets [VerticalAlignment](tools.aqua.bgw.core.VerticalAlignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun show()",
              "name": "show",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Shows the [BoardGameApplication](tools.aqua.bgw.core.BoardGameApplication)."
            },
            {
              "signature": "fun showDialog(dialog: Dialog): Optional<ButtonType>",
              "name": "showDialog",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dialog",
                  "type": "[Dialog](tools.aqua.bgw.dialog.Dialog)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)<[ButtonType](tools.aqua.bgw.dialog.ButtonType)>",
              "brief": "Shows a dialog and blocks further thread execution.",
              "isSuspend": false
            },
            {
              "signature": "fun showDialogNonBlocking(dialog: Dialog)",
              "name": "showDialogNonBlocking",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dialog",
                  "type": "[Dialog](tools.aqua.bgw.dialog.Dialog)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Shows a dialog without blocking further thread execution.",
              "isSuspend": false
            },
            {
              "signature": "fun showFileDialog(dialog: FileDialog): Optional<List<File>>",
              "name": "showFileDialog",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dialog",
                  "type": "[FileDialog](tools.aqua.bgw.dialog.FileDialog)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html)>>",
              "brief": "Shows the given [FileDialog](tools.aqua.bgw.dialog.FileDialog).",
              "isSuspend": false
            },
            {
              "signature": "fun showGameScene(scene: BoardGameScene)",
              "name": "showGameScene",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scene",
                  "type": "[BoardGameScene](tools.aqua.bgw.core.BoardGameScene)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Shows given [BoardGameScene](tools.aqua.bgw.core.BoardGameScene).",
              "isSuspend": false
            },
            {
              "signature": "fun showMenuScene(scene: MenuScene, fadeTime: Number = DEFAULT_FADE_TIME)",
              "name": "showMenuScene",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scene",
                  "type": "[MenuScene](tools.aqua.bgw.core.MenuScene)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "fadeTime",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_FADE_TIME",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Shows given [MenuScene](tools.aqua.bgw.core.MenuScene). If [BoardGameScene](tools.aqua.bgw.core.BoardGameScene) is currently displayed, it gets deactivated and blurred.",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "DragDropScene": {
        "type": "directory",
        "originalName": "-drag-drop-scene",
        "packageName": "tools.aqua.bgw.main.view.DragDropScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val components: List<ComponentView>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            },
            {
              "signature": "val lockedProperty: BooleanProperty",
              "modifier": "val",
              "name": "lockedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "Property that indicates if this [BoardGameScene](tools.aqua.bgw.core.BoardGameScene) is locked from user input."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core.Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background](tools.aqua.bgw.core.[Scene](tools.aqua.bgw.core.Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<ComponentView>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: ComponentView)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](tools.aqua.bgw.core.Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](tools.aqua.bgw.core.Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun lock()",
              "name": "lock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Locks [Scene](tools.aqua.bgw.core.Scene) from any user input."
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: ComponentView)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun unlock()",
              "name": "unlock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Unlocks [Scene](tools.aqua.bgw.core.Scene) for user input."
            }
          ]
        },
        "children": {}
      },
      "GridGameScene": {
        "type": "directory",
        "originalName": "-grid-game-scene",
        "packageName": "tools.aqua.bgw.main.view.GridGameScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val components: List<ComponentView>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            },
            {
              "signature": "val lockedProperty: BooleanProperty",
              "modifier": "val",
              "name": "lockedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "Property that indicates if this [BoardGameScene](tools.aqua.bgw.core.BoardGameScene) is locked from user input."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core.Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background](tools.aqua.bgw.core.[Scene](tools.aqua.bgw.core.Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<ComponentView>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: ComponentView)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](tools.aqua.bgw.core.Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](tools.aqua.bgw.core.Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun lock()",
              "name": "lock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Locks [Scene](tools.aqua.bgw.core.Scene) from any user input."
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: ComponentView)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun unlock()",
              "name": "unlock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Unlocks [Scene](tools.aqua.bgw.core.Scene) for user input."
            }
          ]
        },
        "children": {}
      },
      "MyMenuScene": {
        "type": "directory",
        "originalName": "-my-menu-scene",
        "packageName": "tools.aqua.bgw.main.view.MyMenuScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val components: List<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core.Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background](tools.aqua.bgw.core.[Scene](tools.aqua.bgw.core.Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](tools.aqua.bgw.core.Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](tools.aqua.bgw.core.Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "UIScene": {
        "type": "directory",
        "originalName": "-u-i-scene",
        "packageName": "tools.aqua.bgw.main.view.UIScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [
            {
              "signature": "inner class TestObject(val name: String)",
              "brief": ""
            }
          ],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val combo: ComboBox<UIScene.TestObject>",
              "modifier": "val",
              "name": "combo",
              "type": "[ComboBox](tools.aqua.bgw.components.uicomponents.ComboBox)<[UIScene.TestObject](TestObject)>",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val components: List<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core.Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background](tools.aqua.bgw.core.[Scene](tools.aqua.bgw.core.Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](tools.aqua.bgw.core.Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](tools.aqua.bgw.core.Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[StaticComponentView](tools.aqua.bgw.components.StaticComponentView)<out StaticComponentView<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            }
          ]
        },
        "children": {
          "TestObject": {
            "type": "directory",
            "originalName": "-test-object",
            "packageName": "tools.aqua.bgw.main.view.UIScene.TestObject",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "VisualScene": {
        "type": "directory",
        "originalName": "-visual-scene",
        "packageName": "tools.aqua.bgw.main.view.VisualScene",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "type": "[Visual](tools.aqua.bgw.visual.Visual)",
              "defaultValue": "",
              "brief": "The background [Visual](tools.aqua.bgw.visual.Visual) of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val button: Button",
              "modifier": "val",
              "name": "button",
              "type": "[Button](tools.aqua.bgw.components.uicomponents.Button)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val card: CardView",
              "modifier": "val",
              "name": "card",
              "type": "[CardView](tools.aqua.bgw.components.gamecomponentviews.CardView)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val card2: CardView",
              "modifier": "val",
              "name": "card2",
              "type": "[CardView](tools.aqua.bgw.components.gamecomponentviews.CardView)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val column1: TableColumn<GameComponentView>",
              "modifier": "val",
              "name": "column1",
              "type": "[TableColumn](tools.aqua.bgw.components.uicomponents.TableColumn)<[GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView)>",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val column2: TableColumn<GameComponentView>",
              "modifier": "val",
              "name": "column2",
              "type": "[TableColumn](tools.aqua.bgw.components.uicomponents.TableColumn)<[GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView)>",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val components: List<ComponentView>",
              "modifier": "val",
              "name": "components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The height of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            },
            {
              "signature": "val label: Label",
              "modifier": "val",
              "name": "label",
              "type": "[Label](tools.aqua.bgw.components.uicomponents.Label)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val list: ListView<GameComponentView>",
              "modifier": "val",
              "name": "list",
              "type": "[ListView](tools.aqua.bgw.components.uicomponents.ListView)<[GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView)>",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val lockedProperty: BooleanProperty",
              "modifier": "val",
              "name": "lockedProperty",
              "type": "[BooleanProperty](tools.aqua.bgw.observable.properties.BooleanProperty)",
              "defaultValue": "",
              "brief": "Property that indicates if this [BoardGameScene](tools.aqua.bgw.core.BoardGameScene) is locked from user input."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event.KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event.KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core.Scene) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "brief": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Opacity of the [background](tools.aqua.bgw.core.[Scene](tools.aqua.bgw.core.Scene)) of this Scene."
            },
            {
              "signature": "val rootNode: RootComponent<ComponentView>",
              "modifier": "val",
              "name": "rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components.RootComponent)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "defaultValue": "",
              "brief": "The root node of this [Scene](tools.aqua.bgw.core.Scene)."
            },
            {
              "signature": "val table: TableView<GameComponentView>",
              "modifier": "val",
              "name": "table",
              "type": "[TableView](tools.aqua.bgw.components.uicomponents.TableView)<[GameComponentView](tools.aqua.bgw.components.gamecomponentviews.GameComponentView)>",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val token1: TokenView",
              "modifier": "val",
              "name": "token1",
              "type": "[TokenView](tools.aqua.bgw.components.gamecomponentviews.TokenView)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The width of this [Scene](tools.aqua.bgw.core.Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: ComponentView)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components.ComponentView)>",
              "brief": "Searches [node](tools.aqua.bgw.core.Scene) recursively through the visual tree and logs path where the node appears as first component and the [rootNode](tools.aqua.bgw.core.Scene) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun lock()",
              "name": "lock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Locks [Scene](tools.aqua.bgw.core.Scene) from any user input."
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "type": "[Animation](tools.aqua.bgw.animation.Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Plays given [Animation](tools.aqua.bgw.animation.Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: ComponentView)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "type": "[ComponentView](tools.aqua.bgw.components.ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun unlock()",
              "name": "unlock",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Unlocks [Scene](tools.aqua.bgw.core.Scene) for user input."
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.observable": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.observable",
    "packageName": "tools.aqua.bgw.observable",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "abstract class Observable",
          "brief": "Basic observable."
        },
        {
          "signature": "fun interface Observer",
          "brief": "Observer interface for observable Properties."
        },
        {
          "signature": "abstract class ValueObservable<T>",
          "brief": "Basic observable with value."
        },
        {
          "signature": "fun interface ValueObserver<T>",
          "brief": "Observer interface for observable properties with values."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "Observable": {
        "type": "directory",
        "originalName": "-observable",
        "packageName": "tools.aqua.bgw.observable.Observable",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": "Empty constructor."
            }
          ],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [Observer.update](Observer) on this new listener.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners by calling [Observer.update](Observer)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "Observer": {
        "type": "directory",
        "originalName": "-observer",
        "packageName": "tools.aqua.bgw.observable.Observer",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "abstract fun update()",
              "name": "update",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Can be implemented to react on changes in the observed property."
            }
          ]
        },
        "children": {}
      },
      "ValueObservable": {
        "type": "directory",
        "originalName": "-value-observable",
        "packageName": "tools.aqua.bgw.observable.ValueObservable",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": "Empty constructor."
            }
          ],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](ValueObserver)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([T](), T) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([T](), T) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](ValueObserver)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ValueObserver": {
        "type": "directory",
        "originalName": "-value-observer",
        "packageName": "tools.aqua.bgw.observable.ValueObserver",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "abstract fun update(oldValue: T, newValue: T)",
              "name": "update",
              "parameters": [
                {
                  "modifier": "",
                  "name": "oldValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "newValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Can be implemented to react on changes to the observed property.",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.observable.lists": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.observable.lists",
    "packageName": "tools.aqua.bgw.observable.lists",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class ObservableArrayList<T>(elements: Collection<T> = emptyList()) : ObservableList<T>",
          "brief": "An observable [ArrayList](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/index.html)."
        },
        {
          "signature": "open class ObservableLinkedList<T>(elements: Collection<T> = emptyList()) : ObservableList<T>",
          "brief": "An observable LinkedList."
        },
        {
          "signature": "abstract class ObservableList<T> : ReadonlyObservableList<T>",
          "brief": "An observable [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html) implementation."
        },
        {
          "signature": "abstract class ReadonlyObservableList<T> : ValueObservable<List<T>> , Iterable<T>",
          "brief": "An observable [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html) implementation."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "ObservableArrayList": {
        "type": "directory",
        "originalName": "-observable-array-list",
        "packageName": "tools.aqua.bgw.observable.lists.ObservableArrayList",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(elements: Collection<T> = emptyList())",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "emptyList()",
                  "brief": "Initial elements in this [ObservableList](ObservableList)."
                }
              ],
              "brief": "Creates an [ObservableArrayList]() with given initial elements."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "brief": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: T): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends the specified element to the end of this list.Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun add(index: Int, element: T)",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Appends the specified element to the end of this list.Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all elements from this list. The list will be empty after this call returns."
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()?",
              "brief": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun remove(o: T): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes the first occurrence of the specified element from this list, if it is present.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "name": "removeAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes from this list all of its elements that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAt(index: Int): T",
              "name": "removeAt",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Removes an element at the specified [index](ObservableList) from the list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFirst(): T",
              "name": "removeFirst",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Removes the first element from this list and returns that removed element."
            },
            {
              "signature": "fun removeFirstOrNull(): T?",
              "name": "removeFirstOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "name": "removeIf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "type": "([T]()) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes all elements of this collection that satisfy the given predicate.",
              "isSuspend": false
            },
            {
              "signature": "fun removeLast(): T",
              "name": "removeLast",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Removes the last element from this list and returns that removed element."
            },
            {
              "signature": "fun removeLastOrNull(): T?",
              "name": "removeLastOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeSilent(o: T): Boolean",
              "name": "removeSilent",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "removes [o]([ObservableList](ObservableList)) from the ObservableList silently.",
              "isSuspend": false
            },
            {
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "name": "retainAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Retains only the elements in this list that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(index: Int, element: T): T",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Replaces the element at the specified position in this list with the specified element.",
              "isSuspend": false
            },
            {
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "name": "setAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/index.html)<in [T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sorts this list by given comparator.",
              "isSuspend": false
            },
            {
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "name": "subList",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fromIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "toIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "brief": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ObservableLinkedList": {
        "type": "directory",
        "originalName": "-observable-linked-list",
        "packageName": "tools.aqua.bgw.observable.lists.ObservableLinkedList",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(elements: Collection<T> = emptyList())",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "emptyList()",
                  "brief": "Initial elements in this [ObservableList](ObservableList)."
                }
              ],
              "brief": "Creates an [ObservableLinkedList]() with given initial elements."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "brief": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: T): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends the specified element to the end of this list.Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun add(index: Int, element: T)",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Appends the specified element to the end of this list.Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all elements from this list. The list will be empty after this call returns."
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()?",
              "brief": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun remove(o: T): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes the first occurrence of the specified element from this list, if it is present.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "name": "removeAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes from this list all of its elements that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAt(index: Int): T",
              "name": "removeAt",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Removes an element at the specified [index](ObservableList) from the list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFirst(): T",
              "name": "removeFirst",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Removes the first element from this list and returns that removed element."
            },
            {
              "signature": "fun removeFirstOrNull(): T?",
              "name": "removeFirstOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "name": "removeIf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "type": "([T]()) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes all elements of this collection that satisfy the given predicate.",
              "isSuspend": false
            },
            {
              "signature": "fun removeLast(): T",
              "name": "removeLast",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Removes the last element from this list and returns that removed element."
            },
            {
              "signature": "fun removeLastOrNull(): T?",
              "name": "removeLastOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeSilent(o: T): Boolean",
              "name": "removeSilent",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "removes [o]([ObservableList](ObservableList)) from the ObservableList silently.",
              "isSuspend": false
            },
            {
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "name": "retainAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Retains only the elements in this list that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(index: Int, element: T): T",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Replaces the element at the specified position in this list with the specified element.",
              "isSuspend": false
            },
            {
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "name": "setAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/index.html)<in [T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sorts this list by given comparator.",
              "isSuspend": false
            },
            {
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "name": "subList",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fromIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "toIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "brief": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ObservableList": {
        "type": "directory",
        "originalName": "-observable-list",
        "packageName": "tools.aqua.bgw.observable.lists.ObservableList",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": "Creates an [ObservableList]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "brief": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: T): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends the specified element to the end of this list.Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun add(index: Int, element: T)",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Appends the specified element to the end of this list.Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all elements from this list. The list will be empty after this call returns."
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()?",
              "brief": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun remove(o: T): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes the first occurrence of the specified element from this list, if it is present.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "name": "removeAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes from this list all of its elements that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAt(index: Int): T",
              "name": "removeAt",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Removes an element at the specified [index]() from the list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFirst(): T",
              "name": "removeFirst",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Removes the first element from this list and returns that removed element."
            },
            {
              "signature": "fun removeFirstOrNull(): T?",
              "name": "removeFirstOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "name": "removeIf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "type": "([T]()) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes all elements of this collection that satisfy the given predicate.",
              "isSuspend": false
            },
            {
              "signature": "fun removeLast(): T",
              "name": "removeLast",
              "parameters": [],
              "returnType": "[T]()",
              "brief": "Removes the last element from this list and returns that removed element."
            },
            {
              "signature": "fun removeLastOrNull(): T?",
              "name": "removeLastOrNull",
              "parameters": [],
              "returnType": "[T]()?",
              "brief": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeSilent(o: T): Boolean",
              "name": "removeSilent",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "removes [o]() from the [ObservableList]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "name": "retainAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Retains only the elements in this list that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(index: Int, element: T): T",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Replaces the element at the specified position in this list with the specified element.",
              "isSuspend": false
            },
            {
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "name": "setAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/index.html)<in [T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Sorts this list by given comparator.",
              "isSuspend": false
            },
            {
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "name": "subList",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fromIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "toIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
              "brief": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ReadonlyObservableList": {
        "type": "directory",
        "originalName": "-readonly-observable-list",
        "packageName": "tools.aqua.bgw.observable.lists.ReadonlyObservableList",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": "Creates an [ReadonlyObservableList]()."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "brief": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()",
              "brief": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[T]()?",
              "brief": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "parameters": [],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "brief": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>, List<T>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)<[T]()>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.observable.properties": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.observable.properties",
    "packageName": "tools.aqua.bgw.observable.properties",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class BooleanProperty(initialValue: Boolean = false) : Property<Boolean>",
          "brief": "A BooleanProperty."
        },
        {
          "signature": "open class DoubleProperty(initialValue: Number = 0.0) : Property<Double>",
          "brief": "A DoubleProperty."
        },
        {
          "signature": "open class IntegerProperty(initialValue: Int = 0) : Property<Int>",
          "brief": "An IntegerProperty."
        },
        {
          "signature": "open class LimitedDoubleProperty(lowerBoundInclusive: Number = Double.NEGATIVE_INFINITY, upperBoundInclusive: Number = Double.POSITIVE_INFINITY, initialValue: Number = lowerBoundInclusive) : Property<Double>",
          "brief": "A limited DoubleProperty to a value range. Value will be checked to be in range lowerBoundInclusive to upperBoundInclusive."
        },
        {
          "signature": "open class Property<T>(initialValue: T) : ReadonlyProperty<T>",
          "brief": "Property baseclass providing observable fields."
        },
        {
          "signature": "open class ReadonlyBooleanProperty(initialValue: Boolean = false) : ReadonlyProperty<Boolean>",
          "brief": "A ReadonlyBooleanProperty."
        },
        {
          "signature": "open class ReadonlyDoubleProperty(initialValue: Number = 0.0) : ReadonlyProperty<Double>",
          "brief": "A ReadonlyDoubleProperty."
        },
        {
          "signature": "open class ReadonlyIntegerProperty(initialValue: Int = 0) : ReadonlyProperty<Int>",
          "brief": "An ReadonlyIntegerProperty."
        },
        {
          "signature": "open class ReadonlyProperty<T>(initialValue: T) : ValueObservable<T>",
          "brief": "Property baseclass providing observable fields."
        },
        {
          "signature": "open class ReadonlyStringProperty(initialValue: String = \"\") : ReadonlyProperty<String>",
          "brief": "A ReadonlyStringProperty."
        },
        {
          "signature": "open class StringProperty(initialValue: String = \"\") : Property<String>",
          "brief": "A StringProperty."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "BooleanProperty": {
        "type": "directory",
        "originalName": "-boolean-property",
        "packageName": "tools.aqua.bgw.observable.properties.BooleanProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Boolean = false)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "Initial Value. Default: false."
                }
              ],
              "brief": "Creates a [BooleanProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open override var value: Boolean",
              "modifier": "var",
              "name": "value",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Boolean>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyBooleanProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), Boolean) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyBooleanProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Boolean, expectedValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), Boolean) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyBooleanProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyBooleanProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Boolean>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyBooleanProperty).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "DoubleProperty": {
        "type": "directory",
        "originalName": "-double-property",
        "packageName": "tools.aqua.bgw.observable.properties.DoubleProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Number = 0.0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0.0",
                  "brief": "Initial Value. Default: 0.0."
                }
              ],
              "brief": "Creates a [DoubleProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open override var value: Double",
              "modifier": "var",
              "name": "value",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Double>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyDoubleProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Double, listener: (Double, Double) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html), Double) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Double, expectedValue: Double, listener: (Double, Double) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html), Double) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyDoubleProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Double>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyDoubleProperty).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "IntegerProperty": {
        "type": "directory",
        "originalName": "-integer-property",
        "packageName": "tools.aqua.bgw.observable.properties.IntegerProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Int = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "brief": "Initial Value. Default: 0."
                }
              ],
              "brief": "Creates a [IntegerProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open override var value: Int",
              "modifier": "var",
              "name": "value",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Int>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyIntegerProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Int, listener: (Int, Int) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html), Int) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyIntegerProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Int, expectedValue: Int, listener: (Int, Int) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html), Int) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyIntegerProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyIntegerProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Int>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyIntegerProperty).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "LimitedDoubleProperty": {
        "type": "directory",
        "originalName": "-limited-double-property",
        "packageName": "tools.aqua.bgw.observable.properties.LimitedDoubleProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(lowerBoundInclusive: Number = Double.NEGATIVE_INFINITY, upperBoundInclusive: Number = Double.POSITIVE_INFINITY, initialValue: Number = lowerBoundInclusive)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "lowerBoundInclusive",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "Double.NEGATIVE_INFINITY",
                  "brief": "Lower bound inclusive. Default: -inf."
                },
                {
                  "modifier": "",
                  "name": "upperBoundInclusive",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "Double.POSITIVE_INFINITY",
                  "brief": "Upper bound inclusive. Default: +inf."
                },
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "lowerBoundInclusive",
                  "brief": "Initial Value. Default: lowerBoundInclusive."
                }
              ],
              "brief": "Creates a [LimitedDoubleProperty]() with given bounds and initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open override var value: Double",
              "modifier": "var",
              "name": "value",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Double>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyDoubleProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Double, listener: (Double, Double) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html), Double) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Double, expectedValue: Double, listener: (Double, Double) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html), Double) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](ReadonlyDoubleProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Double>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](ReadonlyDoubleProperty).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "Property": {
        "type": "directory",
        "originalName": "-property",
        "packageName": "tools.aqua.bgw.observable.properties.Property",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: T)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "brief": "Initial value of this property."
                }
              ],
              "brief": "Creates a [Property]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open override var value: T",
              "modifier": "var",
              "name": "value",
              "type": "[T]()",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.ValueObservable) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([T](), T) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.ValueObservable) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([T](), T) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.ValueObservable) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.ValueObservable).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](tools.aqua.bgw.observable.ValueObservable).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ReadonlyBooleanProperty": {
        "type": "directory",
        "originalName": "-readonly-boolean-property",
        "packageName": "tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Boolean = false)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "brief": "Initial Value. Default: false."
                }
              ],
              "brief": "Creates a [ReadonlyBooleanProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open var value: Boolean",
              "modifier": "var",
              "name": "value",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Boolean>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), Boolean) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Boolean, expectedValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), Boolean) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Boolean>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ReadonlyDoubleProperty": {
        "type": "directory",
        "originalName": "-readonly-double-property",
        "packageName": "tools.aqua.bgw.observable.properties.ReadonlyDoubleProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Number = 0.0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0.0",
                  "brief": "Initial Value. Default: 0.0."
                }
              ],
              "brief": "Creates a [ReadonlyDoubleProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open var value: Double",
              "modifier": "var",
              "name": "value",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Double>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Double, listener: (Double, Double) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html), Double) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Double, expectedValue: Double, listener: (Double, Double) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html), Double) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Double>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ReadonlyIntegerProperty": {
        "type": "directory",
        "originalName": "-readonly-integer-property",
        "packageName": "tools.aqua.bgw.observable.properties.ReadonlyIntegerProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Int = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "brief": "Initial Value. Default: 0."
                }
              ],
              "brief": "Creates a [ReadonlyIntegerProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open var value: Int",
              "modifier": "var",
              "name": "value",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Int>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Int, listener: (Int, Int) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html), Int) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Int, expectedValue: Int, listener: (Int, Int) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html), Int) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Int>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ReadonlyProperty": {
        "type": "directory",
        "originalName": "-readonly-property",
        "packageName": "tools.aqua.bgw.observable.properties.ReadonlyProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: T)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "brief": "Initial value of this property."
                }
              ],
              "brief": "Creates a [ReadonlyProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open var value: T",
              "modifier": "var",
              "name": "value",
              "type": "[T]()",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.ValueObservable) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([T](), T) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.ValueObservable) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[T]()",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([T](), T) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.ValueObservable) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.ValueObservable).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[T]()>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](tools.aqua.bgw.observable.ValueObservable).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "ReadonlyStringProperty": {
        "type": "directory",
        "originalName": "-readonly-string-property",
        "packageName": "tools.aqua.bgw.observable.properties.ReadonlyStringProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: String = \"\")",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Initial Value. Default: Empty string."
                }
              ],
              "brief": "Creates a [ReadonlyStringProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open var value: String",
              "modifier": "var",
              "name": "value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<String>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](StringProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: String, listener: (String, String) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html), String) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](StringProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: String, expectedValue: String, listener: (String, String) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html), String) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](StringProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue](StringProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<String>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](StringProperty).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "StringProperty": {
        "type": "directory",
        "originalName": "-string-property",
        "packageName": "tools.aqua.bgw.observable.properties.StringProperty",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(initialValue: String = \"\")",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "brief": "Initial Value. Default: Empty string."
                }
              ],
              "brief": "Creates a [StringProperty]() with given initial value."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "open override var value: String",
              "modifier": "var",
              "name": "value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<String>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: String, listener: (String, String) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html), String) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: String, expectedValue: String, listener: (String, String) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html), String) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener]() and calls [ValueObserver.update](tools.aqua.bgw.observable.ValueObserver) on this new listener with given initial value. The listener will be removed after the first notification. This is useful for one-time listeners. The listener will only be called if the new value equals [expectedValue]().",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<String>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable.ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.style": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.style",
    "packageName": "tools.aqua.bgw.style",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "class BackgroundRadius : StyleDeclaration",
          "brief": ""
        },
        {
          "signature": "class BlurFilter(radius: Double) : FilterDeclaration",
          "brief": ""
        },
        {
          "signature": "class BorderColor : StyleDeclaration",
          "brief": ""
        },
        {
          "signature": "class BorderRadius : StyleDeclaration",
          "brief": ""
        },
        {
          "signature": "class BorderStyle : StyleDeclaration",
          "brief": ""
        },
        {
          "signature": "class BorderWidth : StyleDeclaration",
          "brief": ""
        },
        {
          "signature": "class Cursor : StyleDeclaration",
          "brief": ""
        },
        {
          "signature": "class Filter",
          "brief": ""
        },
        {
          "signature": "interface FilterDeclaration",
          "brief": ""
        },
        {
          "signature": "enum Flip : Enum<Flip>",
          "brief": ""
        },
        {
          "signature": "class SaturationFilter(saturation: Double) : FilterDeclaration",
          "brief": ""
        },
        {
          "signature": "class Style",
          "brief": ""
        },
        {
          "signature": "interface StyleDeclaration",
          "brief": ""
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "BackgroundRadius": {
        "type": "directory",
        "originalName": "-background-radius",
        "packageName": "tools.aqua.bgw.style.BackgroundRadius",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "BlurFilter": {
        "type": "directory",
        "originalName": "-blur-filter",
        "packageName": "tools.aqua.bgw.style.BlurFilter",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.style.BlurFilter.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val LARGE: BlurFilter",
                  "modifier": "val",
                  "name": "LARGE",
                  "type": "[BlurFilter]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val MEDIUM: BlurFilter",
                  "modifier": "val",
                  "name": "MEDIUM",
                  "type": "[BlurFilter]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val NONE: BlurFilter",
                  "modifier": "val",
                  "name": "NONE",
                  "type": "[BlurFilter]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val SMALL: BlurFilter",
                  "modifier": "val",
                  "name": "SMALL",
                  "type": "[BlurFilter]()",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "BorderColor": {
        "type": "directory",
        "originalName": "-border-color",
        "packageName": "tools.aqua.bgw.style.BorderColor",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "BorderRadius": {
        "type": "directory",
        "originalName": "-border-radius",
        "packageName": "tools.aqua.bgw.style.BorderRadius",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.style.BorderRadius.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val FULL: BorderRadius",
                  "modifier": "val",
                  "name": "FULL",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val LARGE: BorderRadius",
                  "modifier": "val",
                  "name": "LARGE",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val MEDIUM: BorderRadius",
                  "modifier": "val",
                  "name": "MEDIUM",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val NONE: BorderRadius",
                  "modifier": "val",
                  "name": "NONE",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val SMALL: BorderRadius",
                  "modifier": "val",
                  "name": "SMALL",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val XL: BorderRadius",
                  "modifier": "val",
                  "name": "XL",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val XS: BorderRadius",
                  "modifier": "val",
                  "name": "XS",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val XXL: BorderRadius",
                  "modifier": "val",
                  "name": "XXL",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val XXXL: BorderRadius",
                  "modifier": "val",
                  "name": "XXXL",
                  "type": "[BorderRadius]()",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "BorderStyle": {
        "type": "directory",
        "originalName": "-border-style",
        "packageName": "tools.aqua.bgw.style.BorderStyle",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "BorderWidth": {
        "type": "directory",
        "originalName": "-border-width",
        "packageName": "tools.aqua.bgw.style.BorderWidth",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Cursor": {
        "type": "directory",
        "originalName": "-cursor",
        "packageName": "tools.aqua.bgw.style.Cursor",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Filter": {
        "type": "directory",
        "originalName": "-filter",
        "packageName": "tools.aqua.bgw.style.Filter",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var blur: BlurFilter",
              "modifier": "var",
              "name": "blur",
              "type": "[BlurFilter](BlurFilter)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var saturation: SaturationFilter",
              "modifier": "var",
              "name": "saturation",
              "type": "[SaturationFilter](SaturationFilter)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun getDeclarations(): Map<String, String?>",
              "name": "getDeclarations",
              "parameters": [],
              "returnType": "[Map](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html), String?>",
              "brief": ""
            }
          ]
        },
        "children": {}
      },
      "FilterDeclaration": {
        "type": "directory",
        "originalName": "-filter-declaration",
        "packageName": "tools.aqua.bgw.style.FilterDeclaration",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "abstract var value: String?",
              "modifier": "var",
              "name": "value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "abstract fun toFilter(): String?",
              "name": "toFilter",
              "parameters": [],
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)?",
              "brief": ""
            }
          ]
        },
        "children": {}
      },
      "Flip": {
        "type": "directory",
        "originalName": "-flip",
        "packageName": "tools.aqua.bgw.style.Flip",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "val entries: EnumEntries<Flip>",
              "modifier": "val",
              "name": "entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[Flip]()>",
              "defaultValue": "",
              "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): Flip",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Flip]()",
              "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<Flip>",
              "name": "values",
              "parameters": [],
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[Flip]()>",
              "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        },
        "children": {
          "BOTH": {
            "type": "directory",
            "originalName": "-b-o-t-h",
            "packageName": "tools.aqua.bgw.style.Flip.BOTH",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "HORIZONTAL": {
            "type": "directory",
            "originalName": "-h-o-r-i-z-o-n-t-a-l",
            "packageName": "tools.aqua.bgw.style.Flip.HORIZONTAL",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "NONE": {
            "type": "directory",
            "originalName": "-n-o-n-e",
            "packageName": "tools.aqua.bgw.style.Flip.NONE",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          },
          "VERTICAL": {
            "type": "directory",
            "originalName": "-v-e-r-t-i-c-a-l",
            "packageName": "tools.aqua.bgw.style.Flip.VERTICAL",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "SaturationFilter": {
        "type": "directory",
        "originalName": "-saturation-filter",
        "packageName": "tools.aqua.bgw.style.SaturationFilter",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.style.SaturationFilter.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val BLACK_WHITE: SaturationFilter",
                  "modifier": "val",
                  "name": "BLACK_WHITE",
                  "type": "[SaturationFilter]()",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val DEFAULT: SaturationFilter",
                  "modifier": "val",
                  "name": "DEFAULT",
                  "type": "[SaturationFilter]()",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "Style": {
        "type": "directory",
        "originalName": "-style",
        "packageName": "tools.aqua.bgw.style.Style",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": ""
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var borderRadius: BorderRadius",
              "modifier": "var",
              "name": "borderRadius",
              "type": "[BorderRadius](BorderRadius)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun getDeclarations(): Map<String, String>",
              "name": "getDeclarations",
              "parameters": [],
              "returnType": "[Map](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html), String>",
              "brief": ""
            }
          ]
        },
        "children": {}
      },
      "StyleDeclaration": {
        "type": "directory",
        "originalName": "-style-declaration",
        "packageName": "tools.aqua.bgw.style.StyleDeclaration",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "abstract fun toCSS(): String",
              "name": "toCSS",
              "parameters": [],
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "brief": ""
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.util": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.util",
    "packageName": "tools.aqua.bgw.util",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class BidirectionalMap<T : Any, R : Any>(elements: Pair<T, R>)",
          "brief": "A bidirectional map. Each key-value-pair gets mapped in both directions. Keys and values must be unique in the sense that there must not be a duplicate key in the domain, nor a duplicate value in the coDomain, but the same element may appear once as key and once as value."
        },
        {
          "signature": "open class Coordinate(xCoord: Number = 0, yCoord: Number = 0)",
          "brief": "A Coordinate containing [xCoord](Coordinate) and [yCoord](Coordinate)."
        },
        {
          "signature": "open class CoordinatePlain",
          "brief": "A CoordinatePlain with its four corners as Coordinates."
        },
        {
          "signature": "data class Font(val size: Number = DEFAULT_FONT_SIZE, val color: Color = Color.BLACK, val family: String = \"Arial\", val fontWeight: Font.FontWeight = FontWeight.NORMAL, val fontStyle: Font.FontStyle = FontStyle.NORMAL)",
          "brief": "This class is used to represent a font. For more customization of fonts, the CSS feature can be used."
        },
        {
          "signature": "data class GridIteratorElement<T>(val columnIndex: Int, val rowIndex: Int, val component: T?)",
          "brief": "Data class containing meta info about current grid element returned by its GridIterator."
        },
        {
          "signature": "open class Stack<T>(elements: Collection<T>)",
          "brief": "[Stack](Stack) represents a Last In First Out (LIFO) data structure. It provides useful functions to manipulate the Stack."
        },
        {
          "signature": "object Trig",
          "brief": "Utility class for trigonometry functions."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "BidirectionalMap": {
        "type": "directory",
        "originalName": "-bidirectional-map",
        "packageName": "tools.aqua.bgw.util.BidirectionalMap",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Coordinate": {
        "type": "directory",
        "originalName": "-coordinate",
        "packageName": "tools.aqua.bgw.util.Coordinate",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(xCoord: Number = 0, yCoord: Number = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "xCoord",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The x coordinate."
                },
                {
                  "modifier": "",
                  "name": "yCoord",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The y coordinate."
                }
              ],
              "brief": "Creates a [Coordinate]() with given xCoord and yCoord."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "val xCoord: Double",
              "modifier": "val",
              "name": "xCoord",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "X coordinate."
            },
            {
              "signature": "val yCoord: Double",
              "modifier": "val",
              "name": "yCoord",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "Y coordinate."
            }
          ],
          "functions": [
            {
              "signature": "operator fun div(denominator: Number): Coordinate",
              "name": "div",
              "parameters": [
                {
                  "modifier": "",
                  "name": "denominator",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Coordinate]()",
              "brief": "Returns a new coordinate object containing divided [Coordinate]() by [denominator]().",
              "isSuspend": false
            },
            {
              "signature": "operator fun minus(other: Coordinate): Coordinate",
              "name": "minus",
              "parameters": [
                {
                  "modifier": "",
                  "name": "other",
                  "type": "[Coordinate]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Coordinate]()",
              "brief": "Returns a new coordinate object containing subtracted [xCoord]() and [yCoord]().",
              "isSuspend": false
            },
            {
              "signature": "operator fun plus(other: Coordinate): Coordinate",
              "name": "plus",
              "parameters": [
                {
                  "modifier": "",
                  "name": "other",
                  "type": "[Coordinate]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Coordinate]()",
              "brief": "Returns a new coordinate object containing added [xCoord]() and [yCoord]().",
              "isSuspend": false
            },
            {
              "signature": "fun rotated(angle: Double): Coordinate",
              "name": "rotated",
              "parameters": [
                {
                  "modifier": "",
                  "name": "angle",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Coordinate]()",
              "brief": "Rotates coordinate by [angle]() degrees around point (0,0).Rotates [Coordinate]() by angle degrees around center point.",
              "isSuspend": false
            },
            {
              "signature": "fun rotated(angle: Number, center: Coordinate): Coordinate",
              "name": "rotated",
              "parameters": [
                {
                  "modifier": "",
                  "name": "angle",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "center",
                  "type": "[Coordinate]()",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Coordinate]()",
              "brief": "Rotates coordinate by [angle]() degrees around point (0,0).Rotates [Coordinate]() by angle degrees around center point.",
              "isSuspend": false
            },
            {
              "signature": "operator fun times(factor: Number): Coordinate",
              "name": "times",
              "parameters": [
                {
                  "modifier": "",
                  "name": "factor",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Coordinate]()",
              "brief": "Returns a new coordinate object containing multiplied [Coordinate]() with [factor]().",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "CoordinatePlain": {
        "type": "directory",
        "originalName": "-coordinate-plain",
        "packageName": "tools.aqua.bgw.util.CoordinatePlain",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Font": {
        "type": "directory",
        "originalName": "-font",
        "packageName": "tools.aqua.bgw.util.Font",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "FontStyle": {
            "type": "directory",
            "originalName": "-font-style",
            "packageName": "tools.aqua.bgw.util.Font.FontStyle",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val entries: EnumEntries<Font.FontStyle>",
                  "modifier": "val",
                  "name": "entries",
                  "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[Font.FontStyle]()>",
                  "defaultValue": "",
                  "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": [
                {
                  "signature": "fun valueOf(value: String): Font.FontStyle",
                  "name": "valueOf",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "value",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[Font.FontStyle]()",
                  "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                  "isSuspend": false
                },
                {
                  "signature": "fun values(): Array<Font.FontStyle>",
                  "name": "values",
                  "parameters": [],
                  "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[Font.FontStyle]()>",
                  "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
                }
              ]
            },
            "children": {
              "ITALIC": {
                "type": "directory",
                "originalName": "-i-t-a-l-i-c",
                "packageName": "tools.aqua.bgw.util.Font.FontStyle.ITALIC",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "NORMAL": {
                "type": "directory",
                "originalName": "-n-o-r-m-a-l",
                "packageName": "tools.aqua.bgw.util.Font.FontStyle.NORMAL",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "OBLIQUE": {
                "type": "directory",
                "originalName": "-o-b-l-i-q-u-e",
                "packageName": "tools.aqua.bgw.util.Font.FontStyle.OBLIQUE",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              }
            }
          },
          "FontWeight": {
            "type": "directory",
            "originalName": "-font-weight",
            "packageName": "tools.aqua.bgw.util.Font.FontWeight",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val entries: EnumEntries<Font.FontWeight>",
                  "modifier": "val",
                  "name": "entries",
                  "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[Font.FontWeight]()>",
                  "defaultValue": "",
                  "brief": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
                },
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "brief": ""
                }
              ],
              "functions": [
                {
                  "signature": "fun valueOf(value: String): Font.FontWeight",
                  "name": "valueOf",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "value",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[Font.FontWeight]()",
                  "brief": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                  "isSuspend": false
                },
                {
                  "signature": "fun values(): Array<Font.FontWeight>",
                  "name": "values",
                  "parameters": [],
                  "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[Font.FontWeight]()>",
                  "brief": "Returns an array containing the constants of this enum type, in the order they're declared."
                }
              ]
            },
            "children": {
              "BLACK": {
                "type": "directory",
                "originalName": "-b-l-a-c-k",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.BLACK",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "BOLD": {
                "type": "directory",
                "originalName": "-b-o-l-d",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.BOLD",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "EXTRA_BOLD": {
                "type": "directory",
                "originalName": "-e-x-t-r-a_-b-o-l-d",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.EXTRA_BOLD",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "EXTRA_LIGHT": {
                "type": "directory",
                "originalName": "-e-x-t-r-a_-l-i-g-h-t",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.EXTRA_LIGHT",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "LIGHT": {
                "type": "directory",
                "originalName": "-l-i-g-h-t",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.LIGHT",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "MEDIUM": {
                "type": "directory",
                "originalName": "-m-e-d-i-u-m",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.MEDIUM",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "NORMAL": {
                "type": "directory",
                "originalName": "-n-o-r-m-a-l",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.NORMAL",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "SEMI_BOLD": {
                "type": "directory",
                "originalName": "-s-e-m-i_-b-o-l-d",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.SEMI_BOLD",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              },
              "THIN": {
                "type": "directory",
                "originalName": "-t-h-i-n",
                "packageName": "tools.aqua.bgw.util.Font.FontWeight.THIN",
                "tags": [
                  "jvm"
                ],
                "sections": {
                  "constructors": [],
                  "types": [],
                  "properties": [
                    {
                      "signature": "val name: String",
                      "modifier": "val",
                      "name": "name",
                      "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    },
                    {
                      "signature": "val ordinal: Int",
                      "modifier": "val",
                      "name": "ordinal",
                      "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                      "defaultValue": "",
                      "brief": ""
                    }
                  ],
                  "functions": []
                },
                "children": {}
              }
            }
          }
        }
      },
      "GridIteratorElement": {
        "type": "directory",
        "originalName": "-grid-iterator-element",
        "packageName": "tools.aqua.bgw.util.GridIteratorElement",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Stack": {
        "type": "directory",
        "originalName": "-stack",
        "packageName": "tools.aqua.bgw.util.Stack",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "Trig": {
        "type": "directory",
        "originalName": "-trig",
        "packageName": "tools.aqua.bgw.util.Trig",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": [
            {
              "signature": "fun cosD(degrees: Number): Double",
              "name": "cosD",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "brief": "Cos function for angles in degrees.",
              "isSuspend": false
            },
            {
              "signature": "fun sinD(degrees: Number): Double",
              "name": "sinD",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "brief": "Sin function for angles in degrees.",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      }
    }
  },
  "tools.aqua.bgw.visual": {
    "type": "directory",
    "originalName": "tools.aqua.bgw.visual",
    "packageName": "tools.aqua.bgw.visual",
    "tags": [
      "jvm"
    ],
    "sections": {
      "constructors": [],
      "types": [
        {
          "signature": "open class ColorVisual(color: Color) : SingleLayerVisual",
          "brief": "A solid [color](ColorVisual) visual. Displays a rectangle filled with the given color."
        },
        {
          "signature": "open class CompoundVisual(children: List<SingleLayerVisual>) : Visual",
          "brief": "A compound visual containing stacked SingleLayerVisuals."
        },
        {
          "signature": "open class ImageVisual(val path: String = \"\", val width: Int = -1, val height: Int = -1, val offsetX: Int = 0, val offsetY: Int = 0) : SingleLayerVisual",
          "brief": "Visual showing an Image."
        },
        {
          "signature": "sealed class SingleLayerVisual : Visual",
          "brief": "Baseclass for single layer visuals."
        },
        {
          "signature": "open class TextVisual(text: String, font: Font = Font(), alignment: Alignment = Alignment.CENTER, offsetX: Number = 0, offsetY: Number = 0) : SingleLayerVisual",
          "brief": "A visual displaying text."
        },
        {
          "signature": "abstract class Visual : Observable",
          "brief": "Visual baseclass."
        }
      ],
      "properties": [],
      "functions": []
    },
    "children": {
      "ColorVisual": {
        "type": "directory",
        "originalName": "-color-visual",
        "packageName": "tools.aqua.bgw.visual.ColorVisual",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.visual.ColorVisual.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val BLACK: ColorVisual",
                  "modifier": "val",
                  "name": "BLACK",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [BLACK]()."
                },
                {
                  "signature": "val BLUE: ColorVisual",
                  "modifier": "val",
                  "name": "BLUE",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [BLUE]()."
                },
                {
                  "signature": "val CYAN: ColorVisual",
                  "modifier": "val",
                  "name": "CYAN",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [CYAN]()."
                },
                {
                  "signature": "val DARK_GRAY: ColorVisual",
                  "modifier": "val",
                  "name": "DARK_GRAY",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [DARK_GRAY]()."
                },
                {
                  "signature": "val GRAY: ColorVisual",
                  "modifier": "val",
                  "name": "GRAY",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [GRAY]()."
                },
                {
                  "signature": "val GREEN: ColorVisual",
                  "modifier": "val",
                  "name": "GREEN",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [GREEN]()."
                },
                {
                  "signature": "val LIGHT_GRAY: ColorVisual",
                  "modifier": "val",
                  "name": "LIGHT_GRAY",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [LIGHT_GRAY]()."
                },
                {
                  "signature": "val MAGENTA: ColorVisual",
                  "modifier": "val",
                  "name": "MAGENTA",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [MAGENTA]()."
                },
                {
                  "signature": "val ORANGE: ColorVisual",
                  "modifier": "val",
                  "name": "ORANGE",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [ORANGE]()."
                },
                {
                  "signature": "val PINK: ColorVisual",
                  "modifier": "val",
                  "name": "PINK",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [PINK]()."
                },
                {
                  "signature": "val RED: ColorVisual",
                  "modifier": "val",
                  "name": "RED",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [RED]()."
                },
                {
                  "signature": "val TRANSPARENT: ColorVisual",
                  "modifier": "val",
                  "name": "TRANSPARENT",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [WHITE]() but completely opaque."
                },
                {
                  "signature": "val WHITE: ColorVisual",
                  "modifier": "val",
                  "name": "WHITE",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [WHITE]()."
                },
                {
                  "signature": "val YELLOW: ColorVisual",
                  "modifier": "val",
                  "name": "YELLOW",
                  "type": "[ColorVisual]()",
                  "defaultValue": "",
                  "brief": "[ColorVisual]() filled [YELLOW]()."
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      },
      "CompoundVisual": {
        "type": "directory",
        "originalName": "-compound-visual",
        "packageName": "tools.aqua.bgw.visual.CompoundVisual",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {}
      },
      "ImageVisual": {
        "type": "directory",
        "originalName": "-image-visual",
        "packageName": "tools.aqua.bgw.visual.ImageVisual",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [],
          "functions": []
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.visual.ImageVisual.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [],
              "functions": [
                {
                  "signature": "fun toDataURI(image: BufferedImage): String",
                  "name": "toDataURI",
                  "parameters": [
                    {
                      "modifier": "",
                      "name": "image",
                      "type": "[BufferedImage](https://docs.oracle.com/javase/8/docs/api/java/awt/image/BufferedImage.html)",
                      "defaultValue": "",
                      "isLambda": false
                    }
                  ],
                  "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "brief": "",
                  "isSuspend": false
                }
              ]
            },
            "children": {}
          }
        }
      },
      "SingleLayerVisual": {
        "type": "directory",
        "originalName": "-single-layer-visual",
        "packageName": "tools.aqua.bgw.visual.SingleLayerVisual",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [],
          "types": [],
          "properties": [
            {
              "signature": "open var backgroundRadius: BackgroundRadius?",
              "modifier": "var",
              "name": "backgroundRadius",
              "type": "[BackgroundRadius](tools.aqua.bgw.style.BackgroundRadius)?",
              "defaultValue": "",
              "brief": "Background radius."
            },
            {
              "signature": "var backgroundRadiusProperty: Property<BackgroundRadius?>",
              "modifier": "var",
              "name": "backgroundRadiusProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BackgroundRadius](tools.aqua.bgw.style.BackgroundRadius)?>",
              "defaultValue": "",
              "brief": "Property for [backgroundRadius](Visual)."
            },
            {
              "signature": "open var borderColor: BorderColor?",
              "modifier": "var",
              "name": "borderColor",
              "type": "[BorderColor](tools.aqua.bgw.style.BorderColor)?",
              "defaultValue": "",
              "brief": "Border color."
            },
            {
              "signature": "var borderColorProperty: Property<BorderColor?>",
              "modifier": "var",
              "name": "borderColorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderColor](tools.aqua.bgw.style.BorderColor)?>",
              "defaultValue": "",
              "brief": "Property for [borderColor](Visual)."
            },
            {
              "signature": "open var borderRadius: BorderRadius?",
              "modifier": "var",
              "name": "borderRadius",
              "type": "[BorderRadius](tools.aqua.bgw.style.BorderRadius)?",
              "defaultValue": "",
              "brief": "Border radius."
            },
            {
              "signature": "var borderRadiusProperty: Property<BorderRadius?>",
              "modifier": "var",
              "name": "borderRadiusProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderRadius](tools.aqua.bgw.style.BorderRadius)?>",
              "defaultValue": "",
              "brief": "Property for [borderRadius](Visual)."
            },
            {
              "signature": "open var borderStyle: BorderStyle?",
              "modifier": "var",
              "name": "borderStyle",
              "type": "[BorderStyle](tools.aqua.bgw.style.BorderStyle)?",
              "defaultValue": "",
              "brief": "Border style."
            },
            {
              "signature": "var borderStyleProperty: Property<BorderStyle?>",
              "modifier": "var",
              "name": "borderStyleProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderStyle](tools.aqua.bgw.style.BorderStyle)?>",
              "defaultValue": "",
              "brief": "Property for [borderStyle](Visual)."
            },
            {
              "signature": "open var borderWidth: BorderWidth?",
              "modifier": "var",
              "name": "borderWidth",
              "type": "[BorderWidth](tools.aqua.bgw.style.BorderWidth)?",
              "defaultValue": "",
              "brief": "Border width."
            },
            {
              "signature": "var borderWidthProperty: Property<BorderWidth?>",
              "modifier": "var",
              "name": "borderWidthProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderWidth](tools.aqua.bgw.style.BorderWidth)?>",
              "defaultValue": "",
              "brief": "Property for [borderWidth](Visual)."
            },
            {
              "signature": "open var cursor: Cursor?",
              "modifier": "var",
              "name": "cursor",
              "type": "[Cursor](tools.aqua.bgw.style.Cursor)?",
              "defaultValue": "",
              "brief": "Cursor."
            },
            {
              "signature": "var cursorProperty: Property<Cursor?>",
              "modifier": "var",
              "name": "cursorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Cursor](tools.aqua.bgw.style.Cursor)?>",
              "defaultValue": "",
              "brief": "Property for [cursor](Visual)."
            },
            {
              "signature": "var filters: Filter",
              "modifier": "var",
              "name": "filters",
              "type": "[Filter](tools.aqua.bgw.style.Filter)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var flipped: Flip",
              "modifier": "var",
              "name": "flipped",
              "type": "[Flip](tools.aqua.bgw.style.Flip)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var style: Style",
              "modifier": "var",
              "name": "style",
              "type": "[Style](tools.aqua.bgw.style.Style)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [Visual](Visual)."
            },
            {
              "signature": "var transparency: Double",
              "modifier": "var",
              "name": "transparency",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [transparency]() / alpha channel for this [Visual](Visual)."
            },
            {
              "signature": "val transparencyProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "transparencyProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "Property for the [transparency]() / alpha channel for this [Visual](Visual)."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.Observable) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.Observable) and calls [Observer.update](tools.aqua.bgw.observable.Observer) on this new listener.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "abstract fun copy(): Visual",
              "name": "copy",
              "parameters": [],
              "returnType": "[Visual](Visual)",
              "brief": "Copies this [Visual](Visual) to a new object."
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable.Observer)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](tools.aqua.bgw.observable.Observable).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "TextVisual": {
        "type": "directory",
        "originalName": "-text-visual",
        "packageName": "tools.aqua.bgw.visual.TextVisual",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor(text: String, font: Font = Font(), alignment: Alignment = Alignment.CENTER, offsetX: Number = 0, offsetY: Number = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "brief": "Text to display."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util.Font)",
                  "defaultValue": "Font()",
                  "brief": "[Font](tools.aqua.bgw.util.Font) to be used for the [text](). Default: default Font constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
                  "defaultValue": "Alignment.CENTER",
                  "brief": "[Alignment](tools.aqua.bgw.core.Alignment) for the [text](). Default: [Alignment.CENTER](tools.aqua.bgw.core.Alignment.CENTER)."
                },
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The horizontal offset of the [text]() from its anchorpoint. Default: 0."
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "brief": "The vertical offset of the [text]() from its anchorpoint. Default: 0."
                }
              ],
              "brief": "Creates a [TextVisual]() with given text."
            }
          ],
          "types": [],
          "properties": [
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "type": "[Alignment](tools.aqua.bgw.core.Alignment)",
              "defaultValue": "",
              "brief": "The [text](tools.aqua.bgw.core.Alignment)."
            },
            {
              "signature": "val alignmentProperty: Property<Alignment>",
              "modifier": "val",
              "name": "alignmentProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Alignment](tools.aqua.bgw.core.Alignment)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the [text](tools.aqua.bgw.core.Alignment)."
            },
            {
              "signature": "open var backgroundRadius: BackgroundRadius?",
              "modifier": "var",
              "name": "backgroundRadius",
              "type": "[BackgroundRadius](tools.aqua.bgw.style.BackgroundRadius)?",
              "defaultValue": "",
              "brief": "Background radius."
            },
            {
              "signature": "var backgroundRadiusProperty: Property<BackgroundRadius?>",
              "modifier": "var",
              "name": "backgroundRadiusProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BackgroundRadius](tools.aqua.bgw.style.BackgroundRadius)?>",
              "defaultValue": "",
              "brief": "Property for [backgroundRadius](Visual)."
            },
            {
              "signature": "open var borderColor: BorderColor?",
              "modifier": "var",
              "name": "borderColor",
              "type": "[BorderColor](tools.aqua.bgw.style.BorderColor)?",
              "defaultValue": "",
              "brief": "Border color."
            },
            {
              "signature": "var borderColorProperty: Property<BorderColor?>",
              "modifier": "var",
              "name": "borderColorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderColor](tools.aqua.bgw.style.BorderColor)?>",
              "defaultValue": "",
              "brief": "Property for [borderColor](Visual)."
            },
            {
              "signature": "open var borderRadius: BorderRadius?",
              "modifier": "var",
              "name": "borderRadius",
              "type": "[BorderRadius](tools.aqua.bgw.style.BorderRadius)?",
              "defaultValue": "",
              "brief": "Border radius."
            },
            {
              "signature": "var borderRadiusProperty: Property<BorderRadius?>",
              "modifier": "var",
              "name": "borderRadiusProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderRadius](tools.aqua.bgw.style.BorderRadius)?>",
              "defaultValue": "",
              "brief": "Property for [borderRadius](Visual)."
            },
            {
              "signature": "open var borderStyle: BorderStyle?",
              "modifier": "var",
              "name": "borderStyle",
              "type": "[BorderStyle](tools.aqua.bgw.style.BorderStyle)?",
              "defaultValue": "",
              "brief": "Border style."
            },
            {
              "signature": "var borderStyleProperty: Property<BorderStyle?>",
              "modifier": "var",
              "name": "borderStyleProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderStyle](tools.aqua.bgw.style.BorderStyle)?>",
              "defaultValue": "",
              "brief": "Property for [borderStyle](Visual)."
            },
            {
              "signature": "open var borderWidth: BorderWidth?",
              "modifier": "var",
              "name": "borderWidth",
              "type": "[BorderWidth](tools.aqua.bgw.style.BorderWidth)?",
              "defaultValue": "",
              "brief": "Border width."
            },
            {
              "signature": "var borderWidthProperty: Property<BorderWidth?>",
              "modifier": "var",
              "name": "borderWidthProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderWidth](tools.aqua.bgw.style.BorderWidth)?>",
              "defaultValue": "",
              "brief": "Property for [borderWidth](Visual)."
            },
            {
              "signature": "open var cursor: Cursor?",
              "modifier": "var",
              "name": "cursor",
              "type": "[Cursor](tools.aqua.bgw.style.Cursor)?",
              "defaultValue": "",
              "brief": "Cursor."
            },
            {
              "signature": "var cursorProperty: Property<Cursor?>",
              "modifier": "var",
              "name": "cursorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Cursor](tools.aqua.bgw.style.Cursor)?>",
              "defaultValue": "",
              "brief": "Property for [cursor](Visual)."
            },
            {
              "signature": "var filters: Filter",
              "modifier": "var",
              "name": "filters",
              "type": "[Filter](tools.aqua.bgw.style.Filter)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var flipped: Flip",
              "modifier": "var",
              "name": "flipped",
              "type": "[Flip](tools.aqua.bgw.style.Flip)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "type": "[Font](tools.aqua.bgw.util.Font)",
              "defaultValue": "",
              "brief": "The displayed [text](tools.aqua.bgw.util.Font)."
            },
            {
              "signature": "val fontProperty: Property<Font>",
              "modifier": "val",
              "name": "fontProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Font](tools.aqua.bgw.util.Font)>",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the displayed [text](tools.aqua.bgw.util.Font)."
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            },
            {
              "signature": "var offsetX: Double",
              "modifier": "var",
              "name": "offsetX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The x-axis [text]() offset."
            },
            {
              "signature": "val offsetXProperty: DoubleProperty",
              "modifier": "val",
              "name": "offsetXProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the x-axis [text]() offset."
            },
            {
              "signature": "var offsetY: Double",
              "modifier": "var",
              "name": "offsetY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The y-axis [text]() offset."
            },
            {
              "signature": "val offsetYProperty: DoubleProperty",
              "modifier": "val",
              "name": "offsetYProperty",
              "type": "[DoubleProperty](tools.aqua.bgw.observable.properties.DoubleProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the y-axis [text]() offset."
            },
            {
              "signature": "var style: Style",
              "modifier": "var",
              "name": "style",
              "type": "[Style](tools.aqua.bgw.style.Style)",
              "defaultValue": "",
              "brief": "Css style that gets applied to this [Visual](Visual)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": "The displayed [text]()."
            },
            {
              "signature": "val textProperty: StringProperty",
              "modifier": "val",
              "name": "textProperty",
              "type": "[StringProperty](tools.aqua.bgw.observable.properties.StringProperty)",
              "defaultValue": "",
              "brief": "[Property](tools.aqua.bgw.observable.properties.Property) for the displayed [text]()."
            },
            {
              "signature": "var transparency: Double",
              "modifier": "var",
              "name": "transparency",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "brief": "The [transparency](SingleLayerVisual) / alpha channel for this [Visual](Visual)."
            },
            {
              "signature": "val transparencyProperty: LimitedDoubleProperty",
              "modifier": "val",
              "name": "transparencyProperty",
              "type": "[LimitedDoubleProperty](tools.aqua.bgw.observable.properties.LimitedDoubleProperty)",
              "defaultValue": "",
              "brief": "Property for the [transparency](SingleLayerVisual) / alpha channel for this [Visual](Visual)."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.Observable) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.Observable) and calls [Observer.update](tools.aqua.bgw.observable.Observer) on this new listener.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable.Observer)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](tools.aqua.bgw.observable.Observable).",
              "isSuspend": false
            }
          ]
        },
        "children": {}
      },
      "Visual": {
        "type": "directory",
        "originalName": "-visual",
        "packageName": "tools.aqua.bgw.visual.Visual",
        "tags": [
          "jvm"
        ],
        "sections": {
          "constructors": [
            {
              "signature": "constructor()",
              "parameters": [],
              "brief": "Creates a [Visual]()."
            }
          ],
          "types": [
            {
              "signature": "object Companion",
              "brief": ""
            }
          ],
          "properties": [
            {
              "signature": "open var backgroundRadius: BackgroundRadius?",
              "modifier": "var",
              "name": "backgroundRadius",
              "type": "[BackgroundRadius](tools.aqua.bgw.style.BackgroundRadius)?",
              "defaultValue": "",
              "brief": "Background radius."
            },
            {
              "signature": "var backgroundRadiusProperty: Property<BackgroundRadius?>",
              "modifier": "var",
              "name": "backgroundRadiusProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BackgroundRadius](tools.aqua.bgw.style.BackgroundRadius)?>",
              "defaultValue": "",
              "brief": "Property for [backgroundRadius]()."
            },
            {
              "signature": "open var borderColor: BorderColor?",
              "modifier": "var",
              "name": "borderColor",
              "type": "[BorderColor](tools.aqua.bgw.style.BorderColor)?",
              "defaultValue": "",
              "brief": "Border color."
            },
            {
              "signature": "var borderColorProperty: Property<BorderColor?>",
              "modifier": "var",
              "name": "borderColorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderColor](tools.aqua.bgw.style.BorderColor)?>",
              "defaultValue": "",
              "brief": "Property for [borderColor]()."
            },
            {
              "signature": "open var borderRadius: BorderRadius?",
              "modifier": "var",
              "name": "borderRadius",
              "type": "[BorderRadius](tools.aqua.bgw.style.BorderRadius)?",
              "defaultValue": "",
              "brief": "Border radius."
            },
            {
              "signature": "var borderRadiusProperty: Property<BorderRadius?>",
              "modifier": "var",
              "name": "borderRadiusProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderRadius](tools.aqua.bgw.style.BorderRadius)?>",
              "defaultValue": "",
              "brief": "Property for [borderRadius]()."
            },
            {
              "signature": "open var borderStyle: BorderStyle?",
              "modifier": "var",
              "name": "borderStyle",
              "type": "[BorderStyle](tools.aqua.bgw.style.BorderStyle)?",
              "defaultValue": "",
              "brief": "Border style."
            },
            {
              "signature": "var borderStyleProperty: Property<BorderStyle?>",
              "modifier": "var",
              "name": "borderStyleProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderStyle](tools.aqua.bgw.style.BorderStyle)?>",
              "defaultValue": "",
              "brief": "Property for [borderStyle]()."
            },
            {
              "signature": "open var borderWidth: BorderWidth?",
              "modifier": "var",
              "name": "borderWidth",
              "type": "[BorderWidth](tools.aqua.bgw.style.BorderWidth)?",
              "defaultValue": "",
              "brief": "Border width."
            },
            {
              "signature": "var borderWidthProperty: Property<BorderWidth?>",
              "modifier": "var",
              "name": "borderWidthProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[BorderWidth](tools.aqua.bgw.style.BorderWidth)?>",
              "defaultValue": "",
              "brief": "Property for [borderWidth]()."
            },
            {
              "signature": "open var cursor: Cursor?",
              "modifier": "var",
              "name": "cursor",
              "type": "[Cursor](tools.aqua.bgw.style.Cursor)?",
              "defaultValue": "",
              "brief": "Cursor."
            },
            {
              "signature": "var cursorProperty: Property<Cursor?>",
              "modifier": "var",
              "name": "cursorProperty",
              "type": "[Property](tools.aqua.bgw.observable.properties.Property)<[Cursor](tools.aqua.bgw.style.Cursor)?>",
              "defaultValue": "",
              "brief": "Property for [cursor]()."
            },
            {
              "signature": "val id: String",
              "modifier": "val",
              "name": "id",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "brief": ""
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.Observable) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "Unit",
              "brief": "Adds a [listener](tools.aqua.bgw.observable.Observable) and calls [Observer.update](tools.aqua.bgw.observable.Observer) on this new listener.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Removes all listeners."
            },
            {
              "signature": "abstract fun copy(): Visual",
              "name": "copy",
              "parameters": [],
              "returnType": "[Visual]()",
              "brief": "Copies this [Visual]() to a new object."
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "parameters": [],
              "returnType": "Unit",
              "brief": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable.Observer)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "type": "[Observer](tools.aqua.bgw.observable.Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "brief": "Removes a [listener](tools.aqua.bgw.observable.Observable).",
              "isSuspend": false
            }
          ]
        },
        "children": {
          "Companion": {
            "type": "directory",
            "originalName": "-companion",
            "packageName": "tools.aqua.bgw.visual.Visual.Companion",
            "tags": [
              "jvm"
            ],
            "sections": {
              "constructors": [],
              "types": [],
              "properties": [
                {
                  "signature": "val EMPTY: Visual",
                  "modifier": "val",
                  "name": "EMPTY",
                  "type": "[Visual]()",
                  "defaultValue": "",
                  "brief": "An empty [Visual]()."
                }
              ],
              "functions": []
            },
            "children": {}
          }
        }
      }
    }
  }
}