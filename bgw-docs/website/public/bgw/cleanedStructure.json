{
  "tools.aqua.bgw.animation": {
    "Animation": {
      "Animation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "Animation",
          "Animation"
        ],
        "package": "tools.aqua.bgw.animation.Animation.Animation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-animation\\-animation.html",
        "details": [
          {
            "info": {
              "name": "Animation",
              "signature": "constructor(duration: Int)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "duration",
                "doc": "Duration in milliseconds."
              }
            ]
          }
        ]
      },
      "duration": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "Animation",
          "duration"
        ],
        "package": "tools.aqua.bgw.animation.Animation.duration",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-animation\\duration.html",
        "details": [
          {
            "info": {
              "name": "duration",
              "signature": "val duration: Int",
              "doc": "Duration in milliseconds."
            }
          }
        ]
      },
      "id": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "Animation",
          "id"
        ],
        "package": "tools.aqua.bgw.animation.Animation.id",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-animation\\id.html",
        "details": [
          {
            "info": {
              "name": "id",
              "signature": "val id: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "Animation"
        ],
        "package": "tools.aqua.bgw.animation.Animation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-animation\\index.html",
        "details": {
          "info": {
            "name": "Animation",
            "signature": "abstract class Animation(val duration: Int)",
            "doc": "[Animation](tools.aqua.bgw.animation/Animation) baseclass.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "DelayAnimation",
              "link": "tools.aqua.bgw.animation/DelayAnimation"
            },
            {
              "name": "ParallelAnimation",
              "link": "tools.aqua.bgw.animation/ParallelAnimation"
            },
            {
              "name": "SequentialAnimation",
              "link": "tools.aqua.bgw.animation/SequentialAnimation"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "duration",
              "doc": "Duration in milliseconds."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(duration: Int)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": "Duration in milliseconds."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            }
          ]
        }
      },
      "isRunning": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "Animation",
          "isRunning"
        ],
        "package": "tools.aqua.bgw.animation.Animation.isRunning",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-animation\\is-running.html",
        "details": [
          {
            "info": {
              "name": "isRunning",
              "signature": "var isRunning: Boolean",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            }
          }
        ]
      },
      "onFinished": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "Animation",
          "onFinished"
        ],
        "package": "tools.aqua.bgw.animation.Animation.onFinished",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-animation\\on-finished.html",
        "details": [
          {
            "info": {
              "name": "onFinished",
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            }
          }
        ]
      }
    },
    "ComponentAnimation": {
      "componentView": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ComponentAnimation",
          "componentView"
        ],
        "package": "tools.aqua.bgw.animation.ComponentAnimation.componentView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-component-animation\\component-view.html",
        "details": [
          {
            "info": {
              "name": "componentView",
              "signature": "val componentView: T",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ComponentAnimation"
        ],
        "package": "tools.aqua.bgw.animation.ComponentAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-component-animation\\index.html",
        "details": {
          "info": {
            "name": "ComponentAnimation",
            "signature": "sealed class ComponentAnimation<T : ComponentView> : Animation",
            "doc": "[ComponentAnimation](tools.aqua.bgw.animation/ComponentAnimation) baseclass.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "FadeAnimation",
              "link": "tools.aqua.bgw.animation/FadeAnimation"
            },
            {
              "name": "FlipAnimation",
              "link": "tools.aqua.bgw.animation/FlipAnimation"
            },
            {
              "name": "MovementAnimation",
              "link": "tools.aqua.bgw.animation/MovementAnimation"
            },
            {
              "name": "RotationAnimation",
              "link": "tools.aqua.bgw.animation/RotationAnimation"
            },
            {
              "name": "ScaleAnimation",
              "link": "tools.aqua.bgw.animation/ScaleAnimation"
            },
            {
              "name": "SteppedComponentAnimation",
              "link": "tools.aqua.bgw.animation/SteppedComponentAnimation"
            }
          ],
          "seeAlso": [
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "componentView",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/ComponentAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            }
          ]
        }
      }
    },
    "DelayAnimation": {
      "DelayAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "DelayAnimation",
          "DelayAnimation"
        ],
        "package": "tools.aqua.bgw.animation.DelayAnimation.DelayAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-delay-animation\\-delay-animation.html",
        "details": [
          {
            "info": {
              "name": "DelayAnimation",
              "signature": "constructor(duration: Int = DEFAULT_ANIMATION_DURATION)",
              "doc": "Creates a [DelayAnimation](tools.aqua.bgw.animation/DelayAnimation) with given duration."
            },
            "parameters": [
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "DelayAnimation"
        ],
        "package": "tools.aqua.bgw.animation.DelayAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-delay-animation\\index.html",
        "details": {
          "info": {
            "name": "DelayAnimation",
            "signature": "class DelayAnimation(val duration: Int = DEFAULT_ANIMATION_DURATION) : Animation",
            "doc": "An asynchronous delay that fires onFinished after given duration.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(duration: Int = DEFAULT_ANIMATION_DURATION)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_DURATION",
                  "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
                }
              ],
              "doc": "Creates a [DelayAnimation](tools.aqua.bgw.animation/DelayAnimation) with given duration.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            }
          ]
        }
      }
    },
    "DiceAnimation": {
      "DiceAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "DiceAnimation",
          "DiceAnimation"
        ],
        "package": "tools.aqua.bgw.animation.DiceAnimation.DiceAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-dice-animation\\-dice-animation.html",
        "details": [
          {
            "info": {
              "name": "DiceAnimation",
              "signature": "constructor(dice: T, toSide: Int, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED)",
              "doc": "Creates a [DiceAnimation](tools.aqua.bgw.animation/DiceAnimation) for the given [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView)."
              },
              {
                "name": "dice",
                "doc": "[DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) to animate."
              },
              {
                "name": "toSide",
                "doc": "Resulting side after roll."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
              },
              {
                "name": "speed",
                "doc": "Count of changes to be performed in duration. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "DiceAnimation"
        ],
        "package": "tools.aqua.bgw.animation.DiceAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-dice-animation\\index.html",
        "details": {
          "info": {
            "name": "DiceAnimation",
            "signature": "class DiceAnimation<T : DiceView>(dice: T, val toSide: Int, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED) : SteppedComponentAnimation<T>",
            "doc": "A die roll [Animation](tools.aqua.bgw.animation/Animation).\n\nShuffles through die visuals for given duration and shows [toSide](tools.aqua.bgw.animation/DiceAnimation/toSide) in the end. Use the speed parameter to define how many steps the animation should have.\n\nFor example:\n\nAn animation with duration = 1s and speed = 50 will change the visual 50 times within the duration of one second.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "SteppedComponentAnimation",
              "link": "tools.aqua.bgw.animation/SteppedComponentAnimation"
            },
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "DiceView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView)."
            },
            {
              "name": "dice",
              "doc": "[DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) to animate."
            },
            {
              "name": "toSide",
              "doc": "Resulting side after roll."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
            },
            {
              "name": "speed",
              "doc": "Count of changes to be performed in duration. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(dice: T, toSide: Int, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dice",
                  "type": "[T](tools.aqua.bgw.animation/DiceAnimation)",
                  "defaultValue": "",
                  "doc": "[DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) to animate."
                },
                {
                  "modifier": "",
                  "name": "toSide",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": "Resulting side after roll."
                },
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_DURATION",
                  "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
                },
                {
                  "modifier": "",
                  "name": "speed",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_SPEED",
                  "doc": "Count of changes to be performed in duration. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
                }
              ],
              "doc": "Creates a [DiceAnimation](tools.aqua.bgw.animation/DiceAnimation) for the given [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/DiceAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val speed: Int",
              "modifier": "val",
              "name": "speed",
              "link": "tools.aqua.bgw.animation/SteppedComponentAnimation/speed",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Count of changes to be performed in duration."
            },
            {
              "signature": "val toSide: Int",
              "modifier": "val",
              "name": "toSide",
              "link": "tools.aqua.bgw.animation/DiceAnimation/toSide",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Resulting side after roll."
            }
          ]
        }
      },
      "toSide": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "DiceAnimation",
          "toSide"
        ],
        "package": "tools.aqua.bgw.animation.DiceAnimation.toSide",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-dice-animation\\to-side.html",
        "details": [
          {
            "info": {
              "name": "toSide",
              "signature": "val toSide: Int",
              "doc": "Resulting side after roll."
            }
          }
        ]
      }
    },
    "FadeAnimation": {
      "FadeAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FadeAnimation",
          "FadeAnimation"
        ],
        "package": "tools.aqua.bgw.animation.FadeAnimation.FadeAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-fade-animation\\-fade-animation.html",
        "details": [
          {
            "info": {
              "name": "FadeAnimation",
              "signature": "constructor(componentView: T, fromOpacity: Number = componentView.opacity, toOpacity: Number = componentView.opacity, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "doc": "Creates a [FadeAnimation](tools.aqua.bgw.animation/FadeAnimation) for the given [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
              },
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
              },
              {
                "name": "fromOpacity",
                "doc": "Initial opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components/ComponentView/opacity)."
              },
              {
                "name": "toOpacity",
                "doc": "Resulting opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components/ComponentView/opacity)."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
              }
            ]
          }
        ]
      },
      "fromOpacity": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FadeAnimation",
          "fromOpacity"
        ],
        "package": "tools.aqua.bgw.animation.FadeAnimation.fromOpacity",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-fade-animation\\from-opacity.html",
        "details": [
          {
            "info": {
              "name": "fromOpacity",
              "signature": "val fromOpacity: Double",
              "doc": "Initial opacity."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FadeAnimation"
        ],
        "package": "tools.aqua.bgw.animation.FadeAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-fade-animation\\index.html",
        "details": {
          "info": {
            "name": "FadeAnimation",
            "signature": "class FadeAnimation<T : ComponentView>(componentView: T, fromOpacity: Number = componentView.opacity, toOpacity: Number = componentView.opacity, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
            "doc": "A fade [Animation](tools.aqua.bgw.animation/Animation).\n\nFades given [ComponentView](tools.aqua.bgw.components/ComponentView)'s opacity i.e. alpha channel.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "ComponentView",
              "link": "tools.aqua.bgw.components/ComponentView"
            }
          ],
          "since": "0.3",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "componentView",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "name": "fromOpacity",
              "doc": "Initial opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components/ComponentView/opacity)."
            },
            {
              "name": "toOpacity",
              "doc": "Resulting opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components/ComponentView/opacity)."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(componentView: T, fromOpacity: Number = componentView.opacity, toOpacity: Number = componentView.opacity, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "componentView",
                  "type": "[T](tools.aqua.bgw.animation/FadeAnimation)",
                  "defaultValue": "",
                  "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
                },
                {
                  "modifier": "",
                  "name": "fromOpacity",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "componentView.opacity",
                  "doc": "Initial opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components/ComponentView/opacity)."
                },
                {
                  "modifier": "",
                  "name": "toOpacity",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "componentView.opacity",
                  "doc": "Resulting opacity. Default: Current [ComponentView.opacity](tools.aqua.bgw.components/ComponentView/opacity)."
                },
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_SPEED",
                  "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
                }
              ],
              "doc": "Creates a [FadeAnimation](tools.aqua.bgw.animation/FadeAnimation) for the given [ComponentView](tools.aqua.bgw.components/ComponentView).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/FadeAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "val fromOpacity: Double",
              "modifier": "val",
              "name": "fromOpacity",
              "link": "tools.aqua.bgw.animation/FadeAnimation/fromOpacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Initial opacity."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val toOpacity: Double",
              "modifier": "val",
              "name": "toOpacity",
              "link": "tools.aqua.bgw.animation/FadeAnimation/toOpacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Resulting opacity."
            }
          ]
        }
      },
      "toOpacity": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FadeAnimation",
          "toOpacity"
        ],
        "package": "tools.aqua.bgw.animation.FadeAnimation.toOpacity",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-fade-animation\\to-opacity.html",
        "details": [
          {
            "info": {
              "name": "toOpacity",
              "signature": "val toOpacity: Double",
              "doc": "Resulting opacity."
            }
          }
        ]
      }
    },
    "FlipAnimation": {
      "FlipAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FlipAnimation",
          "FlipAnimation"
        ],
        "package": "tools.aqua.bgw.animation.FlipAnimation.FlipAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-flip-animation\\-flip-animation.html",
        "details": [
          {
            "info": {
              "name": "FlipAnimation",
              "signature": "constructor(gameComponentView: T, fromVisual: Visual = gameComponentView.visual, toVisual: Visual, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "doc": "Creates a [FlipAnimation](tools.aqua.bgw.animation/FlipAnimation) for the given [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
              },
              {
                "name": "gameComponentView",
                "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
              },
              {
                "name": "fromVisual",
                "doc": "Initial [Visual](tools.aqua.bgw.visual/Visual)."
              },
              {
                "name": "toVisual",
                "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual)."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
              }
            ]
          }
        ]
      },
      "fromVisual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FlipAnimation",
          "fromVisual"
        ],
        "package": "tools.aqua.bgw.animation.FlipAnimation.fromVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-flip-animation\\from-visual.html",
        "details": [
          {
            "info": {
              "name": "fromVisual",
              "signature": "val fromVisual: Visual",
              "doc": "Initial [Visual](tools.aqua.bgw.visual/Visual)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FlipAnimation"
        ],
        "package": "tools.aqua.bgw.animation.FlipAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-flip-animation\\index.html",
        "details": {
          "info": {
            "name": "FlipAnimation",
            "signature": "class FlipAnimation<T : GameComponentView>(gameComponentView: T, val fromVisual: Visual = gameComponentView.visual, val toVisual: Visual, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
            "doc": "A flip [Animation](tools.aqua.bgw.animation/Animation).\n\nSets background to given [fromVisual](tools.aqua.bgw.animation/FlipAnimation/fromVisual) than contracts background in half the given duration, switches to [toVisual](tools.aqua.bgw.animation/FlipAnimation/toVisual) and extends again in half the given duration.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "gameComponentView",
              "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
            },
            {
              "name": "fromVisual",
              "doc": "Initial [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "name": "toVisual",
              "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(gameComponentView: T, fromVisual: Visual = gameComponentView.visual, toVisual: Visual, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "gameComponentView",
                  "type": "[T](tools.aqua.bgw.animation/FlipAnimation)",
                  "defaultValue": "",
                  "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
                },
                {
                  "modifier": "",
                  "name": "fromVisual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "gameComponentView.visual",
                  "doc": "Initial [Visual](tools.aqua.bgw.visual/Visual)."
                },
                {
                  "modifier": "",
                  "name": "toVisual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual)."
                },
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_SPEED",
                  "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
                }
              ],
              "doc": "Creates a [FlipAnimation](tools.aqua.bgw.animation/FlipAnimation) for the given [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/FlipAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "val fromVisual: Visual",
              "modifier": "val",
              "name": "fromVisual",
              "link": "tools.aqua.bgw.animation/FlipAnimation/fromVisual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Initial [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val toVisual: Visual",
              "modifier": "val",
              "name": "toVisual",
              "link": "tools.aqua.bgw.animation/FlipAnimation/toVisual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ]
        }
      },
      "toVisual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "FlipAnimation",
          "toVisual"
        ],
        "package": "tools.aqua.bgw.animation.FlipAnimation.toVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-flip-animation\\to-visual.html",
        "details": [
          {
            "info": {
              "name": "toVisual",
              "signature": "val toVisual: Visual",
              "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual)."
            }
          }
        ]
      }
    },
    "MovementAnimation": {
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.animation",
            "MovementAnimation",
            "Companion"
          ],
          "package": "tools.aqua.bgw.animation.MovementAnimation.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "functions": []
          }
        },
        "toComponentView": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.animation",
            "MovementAnimation",
            "Companion",
            "toComponentView"
          ],
          "package": "tools.aqua.bgw.animation.MovementAnimation.Companion.toComponentView",
          "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\-companion\\to-component-view.html",
          "details": [
            {
              "info": {
                "name": "toComponentView",
                "signature": "fun <T : ComponentView> toComponentView(componentView: T, toComponentViewPosition: T, scene: Scene<*>, duration: Int = 1000): MovementAnimation<T>",
                "doc": "Creates a [MovementAnimation](tools.aqua.bgw.animation/MovementAnimation) to another component's position. Moves given [ComponentView](tools.aqua.bgw.components/ComponentView) relative to parents anchor point."
              },
              "parameters": [
                {
                  "name": "T",
                  "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
                },
                {
                  "name": "componentView",
                  "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
                },
                {
                  "name": "toComponentViewPosition",
                  "doc": "Defines the destination [ComponentView](tools.aqua.bgw.components/ComponentView) to move the given component to."
                },
                {
                  "name": "scene",
                  "doc": "The [Scene](tools.aqua.bgw.core/Scene)."
                },
                {
                  "name": "duration",
                  "doc": "[Animation](tools.aqua.bgw.animation/Animation) duration in milliseconds. Default: 1 second"
                }
              ]
            }
          ]
        }
      },
      "MovementAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "MovementAnimation",
          "MovementAnimation"
        ],
        "package": "tools.aqua.bgw.animation.MovementAnimation.MovementAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\-movement-animation.html",
        "details": [
          {
            "info": {
              "name": "MovementAnimation",
              "signature": "constructor(componentView: T, byX: Number = 0.0, byY: Number = 0.0, duration: Int = 1000)",
              "doc": "A movement animation. Moves given [ComponentView](tools.aqua.bgw.components/ComponentView) relative to parents anchor point."
            },
            "seeAlso": [
              {
                "name": "ComponentAnimation",
                "link": "tools.aqua.bgw.animation/ComponentAnimation"
              },
              {
                "name": "Animation",
                "link": "tools.aqua.bgw.animation/Animation"
              },
              {
                "name": "ComponentView",
                "link": "tools.aqua.bgw.components/ComponentView"
              }
            ],
            "since": "0.1",
            "parameters": [
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
              },
              {
                "name": "byX",
                "doc": "Relative X movement."
              },
              {
                "name": "byY",
                "doc": "Relative Y movement."
              },
              {
                "name": "duration",
                "doc": "[Animation](tools.aqua.bgw.animation/Animation) duration in milliseconds. Default: 1 second"
              }
            ],
            "samples": [
              {
                "codepoint": [
                  "tools.aqua.bgw.main.examples.ExampleAnimationScene.redToken",
                  "tools.aqua.bgw.main.examples.ExampleAnimationScene.movementAnimationBy"
                ],
                "sample": "val redToken =\n    TokenView(posX = 100, posY = 50, width = 100, height = 160, visual = ColorVisual.LIGHT_GRAY)\n\nval movementAnimationBy =\n      MovementAnimation(componentView = redToken, byX = 100.0, byY = 200.0, duration = 1000)\n\nplayAnimation(movementAnimationBy)",
                "doc": "Creates a movement animation that moves the card by x = 100 and y = 200 in 1 second."
              }
            ]
          },
          {
            "info": {
              "name": "MovementAnimation",
              "signature": "constructor(componentView: T, fromX: Number = componentView.posX, toX: Number = componentView.posX, fromY: Number = componentView.posY, toY: Number = componentView.posY, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "doc": "Creates a [MovementAnimation](tools.aqua.bgw.animation/MovementAnimation) for the given [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
              },
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
              },
              {
                "name": "fromX",
                "doc": "Initial X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
              },
              {
                "name": "toX",
                "doc": "Resulting X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
              },
              {
                "name": "fromY",
                "doc": "Initial Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
              },
              {
                "name": "toY",
                "doc": "Resulting Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
              }
            ]
          }
        ]
      },
      "fromX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "MovementAnimation",
          "fromX"
        ],
        "package": "tools.aqua.bgw.animation.MovementAnimation.fromX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\from-x.html",
        "details": [
          {
            "info": {
              "name": "fromX",
              "signature": "val fromX: Double",
              "doc": "Initial X position."
            }
          }
        ]
      },
      "fromY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "MovementAnimation",
          "fromY"
        ],
        "package": "tools.aqua.bgw.animation.MovementAnimation.fromY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\from-y.html",
        "details": [
          {
            "info": {
              "name": "fromY",
              "signature": "val fromY: Double",
              "doc": "Initial Y position."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "MovementAnimation"
        ],
        "package": "tools.aqua.bgw.animation.MovementAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\index.html",
        "details": {
          "info": {
            "name": "MovementAnimation",
            "signature": "class MovementAnimation<T : ComponentView>(componentView: T, fromX: Number = componentView.posX, toX: Number = componentView.posX, fromY: Number = componentView.posY, toY: Number = componentView.posY, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
            "doc": "A movement [Animation](tools.aqua.bgw.animation/Animation).\n\nMoves given [ComponentView](tools.aqua.bgw.components/ComponentView) relative to parents anchor point.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "ComponentView",
              "link": "tools.aqua.bgw.components/ComponentView"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "componentView",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
            },
            {
              "name": "fromX",
              "doc": "Initial X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
            },
            {
              "name": "toX",
              "doc": "Resulting X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
            },
            {
              "name": "fromY",
              "doc": "Initial Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
            },
            {
              "name": "toY",
              "doc": "Resulting Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
            }
          ],
          "samples": [
            {
              "codepoint": [
                "tools.aqua.bgw.main.examples.ExampleAnimationScene.greyToken",
                "tools.aqua.bgw.main.examples.ExampleAnimationScene.movementAnimationTo"
              ],
              "sample": "val greyToken =\n      TokenView(posX = 100, posY = 50, width = 100, height = 160, visual = ColorVisual.LIGHT_GRAY)\n\nval movementAnimationTo =\n      MovementAnimation(componentView = greyToken, fromX = 100.0, toX = 200.0, duration = 1000)\n\nplayAnimation(movementAnimationTo)",
              "doc": "Creates a movement animation that moves the card from x = 100 to x = 200 in 1 second."
            }
          ]
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.animation/MovementAnimation/Companion"
            }
          ],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/MovementAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "val fromX: Double",
              "modifier": "val",
              "name": "fromX",
              "link": "tools.aqua.bgw.animation/MovementAnimation/fromX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Initial X position."
            },
            {
              "signature": "val fromY: Double",
              "modifier": "val",
              "name": "fromY",
              "link": "tools.aqua.bgw.animation/MovementAnimation/fromY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Initial Y position."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val toX: Double",
              "modifier": "val",
              "name": "toX",
              "link": "tools.aqua.bgw.animation/MovementAnimation/toX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Resulting X position."
            },
            {
              "signature": "val toY: Double",
              "modifier": "val",
              "name": "toY",
              "link": "tools.aqua.bgw.animation/MovementAnimation/toY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Resulting Y position."
            }
          ]
        }
      },
      "toX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "MovementAnimation",
          "toX"
        ],
        "package": "tools.aqua.bgw.animation.MovementAnimation.toX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\to-x.html",
        "details": [
          {
            "info": {
              "name": "toX",
              "signature": "val toX: Double",
              "doc": "Resulting X position."
            }
          }
        ]
      },
      "toY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "MovementAnimation",
          "toY"
        ],
        "package": "tools.aqua.bgw.animation.MovementAnimation.toY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-movement-animation\\to-y.html",
        "details": [
          {
            "info": {
              "name": "toY",
              "signature": "val toY: Double",
              "doc": "Resulting Y position."
            }
          }
        ]
      }
    },
    "ParallelAnimation": {
      "ParallelAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ParallelAnimation",
          "ParallelAnimation"
        ],
        "package": "tools.aqua.bgw.animation.ParallelAnimation.ParallelAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-parallel-animation\\-parallel-animation.html",
        "details": [
          {
            "info": {
              "name": "ParallelAnimation",
              "signature": "constructor(vararg animation: Animation)",
              "doc": "Creates a new [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation). Additional constructor that enables the use of varargs for the animations."
            },
            "seeAlso": [
              {
                "name": "Animation",
                "link": "tools.aqua.bgw.animation/Animation"
              },
              {
                "name": "SequentialAnimation",
                "link": "tools.aqua.bgw.animation/SequentialAnimation"
              }
            ],
            "since": "0.5",
            "parameters": [
              {
                "name": "animation",
                "doc": "The Animations that this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) should contain."
              }
            ]
          },
          {
            "info": {
              "name": "ParallelAnimation",
              "signature": "constructor(animations: List<Animation>)",
              "doc": "Creates a new [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation)."
            },
            "parameters": [
              {
                "name": "animations",
                "doc": "The Animations that this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) should contain."
              }
            ]
          }
        ]
      },
      "animations": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ParallelAnimation",
          "animations"
        ],
        "package": "tools.aqua.bgw.animation.ParallelAnimation.animations",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-parallel-animation\\animations.html",
        "details": [
          {
            "info": {
              "name": "animations",
              "signature": "val animations: List<Animation>",
              "doc": "The Animations that this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) should contain."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ParallelAnimation"
        ],
        "package": "tools.aqua.bgw.animation.ParallelAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-parallel-animation\\index.html",
        "details": {
          "info": {
            "name": "ParallelAnimation",
            "signature": "data class ParallelAnimation(val animations: List<Animation>) : Animation",
            "doc": "An [Animation](tools.aqua.bgw.animation/Animation) consisting of multiple Animations that are played in parallel, when this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) is played.",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "SequentialAnimation",
              "link": "tools.aqua.bgw.animation/SequentialAnimation"
            }
          ],
          "since": "0.5",
          "parameters": [
            {
              "name": "animations",
              "doc": "The Animations that this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) should contain."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val animations: List<Animation>",
              "modifier": "val",
              "name": "animations",
              "link": "tools.aqua.bgw.animation/ParallelAnimation/animations",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[Animation](tools.aqua.bgw.animation/Animation)>",
              "defaultValue": "",
              "doc": "The Animations that this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) should contain."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            }
          ]
        }
      }
    },
    "RandomizeAnimation": {
      "RandomizeAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RandomizeAnimation",
          "RandomizeAnimation"
        ],
        "package": "tools.aqua.bgw.animation.RandomizeAnimation.RandomizeAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-randomize-animation\\-randomize-animation.html",
        "details": [
          {
            "info": {
              "name": "RandomizeAnimation",
              "signature": "constructor(gameComponentView: T, visuals: List<Visual>, toVisual: Visual, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED)",
              "doc": "Creates a [RandomizeAnimation](tools.aqua.bgw.animation/RandomizeAnimation) for the given [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
              },
              {
                "name": "gameComponentView",
                "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
              },
              {
                "name": "visuals",
                "doc": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) of Visuals to shuffle through."
              },
              {
                "name": "toVisual",
                "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual) after shuffle."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
              },
              {
                "name": "speed",
                "doc": "Count of changes to be performed in duration. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RandomizeAnimation"
        ],
        "package": "tools.aqua.bgw.animation.RandomizeAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-randomize-animation\\index.html",
        "details": {
          "info": {
            "name": "RandomizeAnimation",
            "signature": "class RandomizeAnimation<T : GameComponentView>(gameComponentView: T, val visuals: List<Visual>, val toVisual: Visual, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED) : SteppedComponentAnimation<T>",
            "doc": "A randomization [Animation](tools.aqua.bgw.animation/Animation) that shuffles between different [visuals](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html).\n\nShuffles through [visuals](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) in the given [visuals](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) for given duration and shows [toVisual](tools.aqua.bgw.animation/RandomizeAnimation/toVisual) in the end. Use the speed parameter to define how many steps the animation should have.\n\nFor example:\n\nAn animation with duration = 1s and speed = 50 will change the visual 50 times within the duration of one second.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "SteppedComponentAnimation",
              "link": "tools.aqua.bgw.animation/SteppedComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            },
            {
              "name": "Visual",
              "link": "tools.aqua.bgw.visual/Visual"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "gameComponentView",
              "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
            },
            {
              "name": "visuals",
              "doc": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) of Visuals to shuffle through."
            },
            {
              "name": "toVisual",
              "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual) after shuffle."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
            },
            {
              "name": "speed",
              "doc": "Count of changes to be performed in duration. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(gameComponentView: T, visuals: List<Visual>, toVisual: Visual, duration: Int = DEFAULT_ANIMATION_DURATION, speed: Int = DEFAULT_ANIMATION_SPEED)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "gameComponentView",
                  "type": "[T](tools.aqua.bgw.animation/RandomizeAnimation)",
                  "defaultValue": "",
                  "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
                },
                {
                  "modifier": "",
                  "name": "visuals",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[Visual](tools.aqua.bgw.visual/Visual)>",
                  "defaultValue": "",
                  "doc": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) of Visuals to shuffle through."
                },
                {
                  "modifier": "",
                  "name": "toVisual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual) after shuffle."
                },
                {
                  "modifier": "",
                  "name": "duration",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_DURATION",
                  "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
                },
                {
                  "modifier": "",
                  "name": "speed",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "DEFAULT_ANIMATION_SPEED",
                  "doc": "Count of changes to be performed in duration. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
                }
              ],
              "doc": "Creates a [RandomizeAnimation](tools.aqua.bgw.animation/RandomizeAnimation) for the given [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/RandomizeAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val speed: Int",
              "modifier": "val",
              "name": "speed",
              "link": "tools.aqua.bgw.animation/SteppedComponentAnimation/speed",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Count of changes to be performed in duration."
            },
            {
              "signature": "val toVisual: Visual",
              "modifier": "val",
              "name": "toVisual",
              "link": "tools.aqua.bgw.animation/RandomizeAnimation/toVisual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual) after shuffle."
            },
            {
              "signature": "val visuals: List<Visual>",
              "modifier": "val",
              "name": "visuals",
              "link": "tools.aqua.bgw.animation/RandomizeAnimation/visuals",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[Visual](tools.aqua.bgw.visual/Visual)>",
              "defaultValue": "",
              "doc": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) of Visuals to shuffle through."
            }
          ]
        }
      },
      "toVisual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RandomizeAnimation",
          "toVisual"
        ],
        "package": "tools.aqua.bgw.animation.RandomizeAnimation.toVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-randomize-animation\\to-visual.html",
        "details": [
          {
            "info": {
              "name": "toVisual",
              "signature": "val toVisual: Visual",
              "doc": "Resulting [Visual](tools.aqua.bgw.visual/Visual) after shuffle."
            }
          }
        ]
      },
      "visuals": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RandomizeAnimation",
          "visuals"
        ],
        "package": "tools.aqua.bgw.animation.RandomizeAnimation.visuals",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-randomize-animation\\visuals.html",
        "details": [
          {
            "info": {
              "name": "visuals",
              "signature": "val visuals: List<Visual>",
              "doc": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) of Visuals to shuffle through."
            }
          }
        ]
      }
    },
    "RotationAnimation": {
      "RotationAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RotationAnimation",
          "RotationAnimation"
        ],
        "package": "tools.aqua.bgw.animation.RotationAnimation.RotationAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-rotation-animation\\-rotation-animation.html",
        "details": [
          {
            "info": {
              "name": "RotationAnimation",
              "signature": "constructor(componentView: T, byAngle: Double = 0.0, duration: Int = 1000)",
              "doc": "A rotation animation. Rotates given [ComponentView](tools.aqua.bgw.components/ComponentView) by a given angle."
            },
            "seeAlso": [
              {
                "name": "ComponentAnimation",
                "link": "tools.aqua.bgw.animation/ComponentAnimation"
              },
              {
                "name": "Animation",
                "link": "tools.aqua.bgw.animation/Animation"
              },
              {
                "name": "ComponentView",
                "link": "tools.aqua.bgw.components/ComponentView"
              }
            ],
            "since": "0.1",
            "parameters": [
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
              },
              {
                "name": "byAngle",
                "doc": "relative angle. Default: 0"
              },
              {
                "name": "duration",
                "doc": "[Animation](tools.aqua.bgw.animation/Animation) duration in milliseconds. Default: 1 second"
              }
            ]
          },
          {
            "info": {
              "name": "RotationAnimation",
              "signature": "constructor(componentView: T, fromAngle: Number = componentView.rotation, toAngle: Number = componentView.rotation, duration: Int = DEFAULT_ANIMATION_DURATION)",
              "doc": "Creates a [RotationAnimation](tools.aqua.bgw.animation/RotationAnimation) for the given [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
              },
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
              },
              {
                "name": "fromAngle",
                "doc": "Initial angle. Default: Current [ComponentView.rotation](tools.aqua.bgw.components/ComponentView/rotation)."
              },
              {
                "name": "toAngle",
                "doc": "Resulting angle. Default: Current [ComponentView.rotation](tools.aqua.bgw.components/ComponentView/rotation)."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
              }
            ]
          }
        ]
      },
      "fromAngle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RotationAnimation",
          "fromAngle"
        ],
        "package": "tools.aqua.bgw.animation.RotationAnimation.fromAngle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-rotation-animation\\from-angle.html",
        "details": [
          {
            "info": {
              "name": "fromAngle",
              "signature": "val fromAngle: Double",
              "doc": "Initial angle."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RotationAnimation"
        ],
        "package": "tools.aqua.bgw.animation.RotationAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-rotation-animation\\index.html",
        "details": {
          "info": {
            "name": "RotationAnimation",
            "signature": "class RotationAnimation<T : ComponentView>(componentView: T, fromAngle: Number = componentView.rotation, toAngle: Number = componentView.rotation, duration: Int = DEFAULT_ANIMATION_DURATION) : ComponentAnimation<T>",
            "doc": "A rotation [Animation](tools.aqua.bgw.animation/Animation).\n\nRotates [ComponentView](tools.aqua.bgw.components/ComponentView) to given angle.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "ComponentView",
              "link": "tools.aqua.bgw.components/ComponentView"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "componentView",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "name": "fromAngle",
              "doc": "Initial angle. Default: Current [ComponentView.rotation](tools.aqua.bgw.components/ComponentView/rotation)."
            },
            {
              "name": "toAngle",
              "doc": "Resulting angle. Default: Current [ComponentView.rotation](tools.aqua.bgw.components/ComponentView/rotation)."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_DURATION](tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/RotationAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "val fromAngle: Double",
              "modifier": "val",
              "name": "fromAngle",
              "link": "tools.aqua.bgw.animation/RotationAnimation/fromAngle",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Initial angle."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val toAngle: Double",
              "modifier": "val",
              "name": "toAngle",
              "link": "tools.aqua.bgw.animation/RotationAnimation/toAngle",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Resulting angle."
            }
          ]
        }
      },
      "toAngle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "RotationAnimation",
          "toAngle"
        ],
        "package": "tools.aqua.bgw.animation.RotationAnimation.toAngle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-rotation-animation\\to-angle.html",
        "details": [
          {
            "info": {
              "name": "toAngle",
              "signature": "val toAngle: Double",
              "doc": "Resulting angle."
            }
          }
        ]
      }
    },
    "ScaleAnimation": {
      "ScaleAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ScaleAnimation",
          "ScaleAnimation"
        ],
        "package": "tools.aqua.bgw.animation.ScaleAnimation.ScaleAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-scale-animation\\-scale-animation.html",
        "details": [
          {
            "info": {
              "name": "ScaleAnimation",
              "signature": "constructor(componentView: T, byScaleX: Number = 0.0, byScaleY: Number = 0.0, duration: Int = 1000)",
              "doc": "A scale animation. Scales given [ComponentView](tools.aqua.bgw.components/ComponentView) by given x and y scalar."
            },
            "seeAlso": [
              {
                "name": "ComponentAnimation",
                "link": "tools.aqua.bgw.animation/ComponentAnimation"
              },
              {
                "name": "Animation",
                "link": "tools.aqua.bgw.animation/Animation"
              },
              {
                "name": "ComponentView",
                "link": "tools.aqua.bgw.components/ComponentView"
              }
            ],
            "since": "0.3",
            "parameters": [
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
              },
              {
                "name": "byScaleX",
                "doc": "Relative X scale."
              },
              {
                "name": "byScaleY",
                "doc": "Relative Y scale."
              },
              {
                "name": "duration",
                "doc": "[Animation](tools.aqua.bgw.animation/Animation) duration in milliseconds. Default: 1 second"
              }
            ]
          },
          {
            "info": {
              "name": "ScaleAnimation",
              "signature": "constructor(componentView: T, byScale: Number = 0.0, duration: Int = 1000)",
              "doc": "A scale animation. Scales given [ComponentView](tools.aqua.bgw.components/ComponentView) by given scalar."
            },
            "seeAlso": [
              {
                "name": "ComponentAnimation",
                "link": "tools.aqua.bgw.animation/ComponentAnimation"
              },
              {
                "name": "Animation",
                "link": "tools.aqua.bgw.animation/Animation"
              },
              {
                "name": "ComponentView",
                "link": "tools.aqua.bgw.components/ComponentView"
              }
            ],
            "since": "0.3",
            "parameters": [
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
              },
              {
                "name": "byScale",
                "doc": "Relative scale."
              },
              {
                "name": "duration",
                "doc": "[Animation](tools.aqua.bgw.animation/Animation) duration in milliseconds. Default: 1 second"
              }
            ]
          },
          {
            "info": {
              "name": "ScaleAnimation",
              "signature": "constructor(componentView: T, fromScaleX: Number = componentView.scaleX, toScaleX: Number = componentView.scaleX, fromScaleY: Number = componentView.scaleY, toScaleY: Number = componentView.scaleY, duration: Int = DEFAULT_ANIMATION_SPEED)",
              "doc": "Creates a [ScaleAnimation](tools.aqua.bgw.animation/ScaleAnimation) for the given [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
              },
              {
                "name": "componentView",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
              },
              {
                "name": "fromScaleX",
                "doc": "Initial X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
              },
              {
                "name": "toScaleX",
                "doc": "Resulting X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
              },
              {
                "name": "fromScaleY",
                "doc": "Initial Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
              },
              {
                "name": "toScaleY",
                "doc": "Resulting Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
              },
              {
                "name": "duration",
                "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
              }
            ]
          }
        ]
      },
      "fromScaleX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ScaleAnimation",
          "fromScaleX"
        ],
        "package": "tools.aqua.bgw.animation.ScaleAnimation.fromScaleX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-scale-animation\\from-scale-x.html",
        "details": [
          {
            "info": {
              "name": "fromScaleX",
              "signature": "val fromScaleX: Double",
              "doc": "Initial X scale."
            }
          }
        ]
      },
      "fromScaleY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ScaleAnimation",
          "fromScaleY"
        ],
        "package": "tools.aqua.bgw.animation.ScaleAnimation.fromScaleY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-scale-animation\\from-scale-y.html",
        "details": [
          {
            "info": {
              "name": "fromScaleY",
              "signature": "val fromScaleY: Double",
              "doc": "Initial Y scale."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ScaleAnimation"
        ],
        "package": "tools.aqua.bgw.animation.ScaleAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-scale-animation\\index.html",
        "details": {
          "info": {
            "name": "ScaleAnimation",
            "signature": "class ScaleAnimation<T : ComponentView>(componentView: T, fromScaleX: Number = componentView.scaleX, toScaleX: Number = componentView.scaleX, fromScaleY: Number = componentView.scaleY, toScaleY: Number = componentView.scaleY, duration: Int = DEFAULT_ANIMATION_SPEED) : ComponentAnimation<T>",
            "doc": "A scale [Animation](tools.aqua.bgw.animation/Animation).\n\nScales given [ComponentView](tools.aqua.bgw.components/ComponentView) to given scalar.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "ComponentView",
              "link": "tools.aqua.bgw.components/ComponentView"
            }
          ],
          "since": "0.3",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "componentView",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate"
            },
            {
              "name": "fromScaleX",
              "doc": "Initial X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
            },
            {
              "name": "toScaleX",
              "doc": "Resulting X position. Default: Current [ComponentView.posX](tools.aqua.bgw.components/ComponentView/posX)."
            },
            {
              "name": "fromScaleY",
              "doc": "Initial Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
            },
            {
              "name": "toScaleY",
              "doc": "Resulting Y position. Default: Current [ComponentView.posY](tools.aqua.bgw.components/ComponentView/posY)."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds. Default: [DEFAULT_ANIMATION_SPEED](tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/ScaleAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "val fromScaleX: Double",
              "modifier": "val",
              "name": "fromScaleX",
              "link": "tools.aqua.bgw.animation/ScaleAnimation/fromScaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Initial X scale."
            },
            {
              "signature": "val fromScaleY: Double",
              "modifier": "val",
              "name": "fromScaleY",
              "link": "tools.aqua.bgw.animation/ScaleAnimation/fromScaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Initial Y scale."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val toScaleX: Double",
              "modifier": "val",
              "name": "toScaleX",
              "link": "tools.aqua.bgw.animation/ScaleAnimation/toScaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Resulting X scale."
            },
            {
              "signature": "val toScaleY: Double",
              "modifier": "val",
              "name": "toScaleY",
              "link": "tools.aqua.bgw.animation/ScaleAnimation/toScaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Resulting Y scale."
            }
          ]
        }
      },
      "toScaleX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ScaleAnimation",
          "toScaleX"
        ],
        "package": "tools.aqua.bgw.animation.ScaleAnimation.toScaleX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-scale-animation\\to-scale-x.html",
        "details": [
          {
            "info": {
              "name": "toScaleX",
              "signature": "val toScaleX: Double",
              "doc": "Resulting X scale."
            }
          }
        ]
      },
      "toScaleY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "ScaleAnimation",
          "toScaleY"
        ],
        "package": "tools.aqua.bgw.animation.ScaleAnimation.toScaleY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-scale-animation\\to-scale-y.html",
        "details": [
          {
            "info": {
              "name": "toScaleY",
              "signature": "val toScaleY: Double",
              "doc": "Resulting Y scale."
            }
          }
        ]
      }
    },
    "SequentialAnimation": {
      "SequentialAnimation": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "SequentialAnimation",
          "SequentialAnimation"
        ],
        "package": "tools.aqua.bgw.animation.SequentialAnimation.SequentialAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-sequential-animation\\-sequential-animation.html",
        "details": [
          {
            "info": {
              "name": "SequentialAnimation",
              "signature": "constructor(vararg animation: Animation)",
              "doc": "Creates a new [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) Additional constructor that enables the use of varargs for the animations."
            },
            "seeAlso": [
              {
                "name": "Animation",
                "link": "tools.aqua.bgw.animation/Animation"
              },
              {
                "name": "ParallelAnimation",
                "link": "tools.aqua.bgw.animation/ParallelAnimation"
              }
            ],
            "since": "0.5",
            "parameters": [
              {
                "name": "animation",
                "doc": "The Animations that this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) should contain."
              }
            ]
          },
          {
            "info": {
              "name": "SequentialAnimation",
              "signature": "constructor(animations: List<Animation>)",
              "doc": "Creates a new [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation)."
            },
            "parameters": [
              {
                "name": "animations",
                "doc": "The Animations that this [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) should contain. Lowest index is played first, the highest index is played last."
              }
            ]
          }
        ]
      },
      "animations": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "SequentialAnimation",
          "animations"
        ],
        "package": "tools.aqua.bgw.animation.SequentialAnimation.animations",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-sequential-animation\\animations.html",
        "details": [
          {
            "info": {
              "name": "animations",
              "signature": "val animations: List<Animation>",
              "doc": "The Animations that this [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) contains. Lowest index is played first, the highest index is played last."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "SequentialAnimation"
        ],
        "package": "tools.aqua.bgw.animation.SequentialAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-sequential-animation\\index.html",
        "details": {
          "info": {
            "name": "SequentialAnimation",
            "signature": "data class SequentialAnimation(val animations: List<Animation>) : Animation",
            "doc": "An [Animation](tools.aqua.bgw.animation/Animation) consisting of multiple Animations that is played in sequence, when this [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) is played.",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "ParallelAnimation",
              "link": "tools.aqua.bgw.animation/ParallelAnimation"
            }
          ],
          "since": "0.5",
          "parameters": [
            {
              "name": "animations",
              "doc": "The Animations that this [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) should contain. Lowest index is played first, the highest index is played last."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val animations: List<Animation>",
              "modifier": "val",
              "name": "animations",
              "link": "tools.aqua.bgw.animation/SequentialAnimation/animations",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[Animation](tools.aqua.bgw.animation/Animation)>",
              "defaultValue": "",
              "doc": "The Animations that this [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) contains. Lowest index is played first, the highest index is played last."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            }
          ]
        }
      }
    },
    "SteppedComponentAnimation": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "SteppedComponentAnimation"
        ],
        "package": "tools.aqua.bgw.animation.SteppedComponentAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-stepped-component-animation\\index.html",
        "details": {
          "info": {
            "name": "SteppedComponentAnimation",
            "signature": "sealed class SteppedComponentAnimation<T : GameComponentView> : ComponentAnimation<T>",
            "doc": "[SteppedComponentAnimation](tools.aqua.bgw.animation/SteppedComponentAnimation) baseclass.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "DiceAnimation",
              "link": "tools.aqua.bgw.animation/DiceAnimation"
            },
            {
              "name": "RandomizeAnimation",
              "link": "tools.aqua.bgw.animation/RandomizeAnimation"
            }
          ],
          "seeAlso": [
            {
              "name": "ComponentAnimation",
              "link": "tools.aqua.bgw.animation/ComponentAnimation"
            },
            {
              "name": "Animation",
              "link": "tools.aqua.bgw.animation/Animation"
            },
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            }
          ],
          "since": "0.2",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "gameComponentView",
              "doc": "[GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to animate."
            },
            {
              "name": "duration",
              "doc": "Duration in milliseconds."
            },
            {
              "name": "speed",
              "doc": "Count of changes to be performed in duration."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "val componentView: T",
              "modifier": "val",
              "name": "componentView",
              "link": "tools.aqua.bgw.animation/ComponentAnimation/componentView",
              "type": "[T](tools.aqua.bgw.animation/SteppedComponentAnimation)",
              "defaultValue": "",
              "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to animate."
            },
            {
              "signature": "val duration: Int",
              "modifier": "val",
              "name": "duration",
              "link": "tools.aqua.bgw.animation/Animation/duration",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Duration in milliseconds."
            },
            {
              "signature": "var isRunning: Boolean",
              "modifier": "var",
              "name": "isRunning",
              "link": "tools.aqua.bgw.animation/Animation/isRunning",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) indicating whether the [Animation](tools.aqua.bgw.animation/Animation) is currently running."
            },
            {
              "signature": "var onFinished: (AnimationFinishedEvent) -> Unit?",
              "modifier": "var",
              "name": "onFinished",
              "link": "tools.aqua.bgw.animation/Animation/onFinished",
              "type": "([AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when [Animation](tools.aqua.bgw.animation/Animation) has finished."
            },
            {
              "signature": "val speed: Int",
              "modifier": "val",
              "name": "speed",
              "link": "tools.aqua.bgw.animation/SteppedComponentAnimation/speed",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Count of changes to be performed in duration."
            }
          ]
        }
      },
      "speed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.animation",
          "SteppedComponentAnimation",
          "speed"
        ],
        "package": "tools.aqua.bgw.animation.SteppedComponentAnimation.speed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\-stepped-component-animation\\speed.html",
        "details": [
          {
            "info": {
              "name": "speed",
              "signature": "val speed: Int",
              "doc": "Count of changes to be performed in duration."
            }
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.animation"
      ],
      "package": "tools.aqua.bgw.animation",
      "path": "example\\htmlPartial\\tools.aqua.bgw.animation\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "abstract class Animation(val duration: Int)",
          "doc": "",
          "tags": {
            "modifiers": [
              "abstract"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "Animation",
            "doc": "[Animation](tools.aqua.bgw.animation/Animation) baseclass.",
            "link": "tools.aqua.bgw.animation/Animation"
          },
          {
            "name": "ComponentAnimation",
            "doc": "[ComponentAnimation](tools.aqua.bgw.animation/ComponentAnimation) baseclass.",
            "link": "tools.aqua.bgw.animation/ComponentAnimation"
          },
          {
            "name": "DelayAnimation",
            "doc": "An asynchronous delay that fires onFinished after given duration.",
            "link": "tools.aqua.bgw.animation/DelayAnimation"
          },
          {
            "name": "DiceAnimation",
            "doc": "A die roll Animation.",
            "link": "tools.aqua.bgw.animation/DiceAnimation"
          },
          {
            "name": "FadeAnimation",
            "doc": "A fade Animation.",
            "link": "tools.aqua.bgw.animation/FadeAnimation"
          },
          {
            "name": "FlipAnimation",
            "doc": "A flip Animation.",
            "link": "tools.aqua.bgw.animation/FlipAnimation"
          },
          {
            "name": "MovementAnimation",
            "doc": "A movement Animation.",
            "link": "tools.aqua.bgw.animation/MovementAnimation"
          },
          {
            "name": "ParallelAnimation",
            "doc": "An [Animation](tools.aqua.bgw.animation/Animation) consisting of multiple Animations that are played in parallel, when this [ParallelAnimation](tools.aqua.bgw.animation/ParallelAnimation) is played.",
            "link": "tools.aqua.bgw.animation/ParallelAnimation"
          },
          {
            "name": "RandomizeAnimation",
            "doc": "A randomization Animation that shuffles between different visuals.",
            "link": "tools.aqua.bgw.animation/RandomizeAnimation"
          },
          {
            "name": "RotationAnimation",
            "doc": "A rotation Animation.",
            "link": "tools.aqua.bgw.animation/RotationAnimation"
          },
          {
            "name": "ScaleAnimation",
            "doc": "A scale Animation.",
            "link": "tools.aqua.bgw.animation/ScaleAnimation"
          },
          {
            "name": "SequentialAnimation",
            "doc": "An [Animation](tools.aqua.bgw.animation/Animation) consisting of multiple Animations that is played in sequence, when this [SequentialAnimation](tools.aqua.bgw.animation/SequentialAnimation) is played.",
            "link": "tools.aqua.bgw.animation/SequentialAnimation"
          },
          {
            "name": "SteppedComponentAnimation",
            "doc": "[SteppedComponentAnimation](tools.aqua.bgw.animation/SteppedComponentAnimation) baseclass.",
            "link": "tools.aqua.bgw.animation/SteppedComponentAnimation"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.components": {
    "ComponentView": {
      "actualHeight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "actualHeight"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.actualHeight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\actual-height.html",
        "details": [
          {
            "info": {
              "name": "actualHeight",
              "signature": "var actualHeight: Double",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            "seeAlso": [
              {
                "name": "ComponentView.height",
                "link": "tools.aqua.bgw.components/ComponentView/height"
              }
            ]
          }
        ]
      },
      "actualPosX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "actualPosX"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.actualPosX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\actual-pos-x.html",
        "details": [
          {
            "info": {
              "name": "actualPosX",
              "signature": "var actualPosX: Double",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            "seeAlso": [
              {
                "name": "ComponentView.posX",
                "link": "tools.aqua.bgw.components/ComponentView/posX"
              }
            ]
          }
        ]
      },
      "actualPosY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "actualPosY"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.actualPosY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\actual-pos-y.html",
        "details": [
          {
            "info": {
              "name": "actualPosY",
              "signature": "var actualPosY: Double",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            "seeAlso": [
              {
                "name": "ComponentView.posY",
                "link": "tools.aqua.bgw.components/ComponentView/posY"
              }
            ]
          }
        ]
      },
      "actualWidth": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "actualWidth"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.actualWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\actual-width.html",
        "details": [
          {
            "info": {
              "name": "actualWidth",
              "signature": "var actualWidth: Double",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            "seeAlso": [
              {
                "name": "ComponentView.width",
                "link": "tools.aqua.bgw.components/ComponentView/width"
              }
            ]
          }
        ]
      },
      "dropAcceptor": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "dropAcceptor"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.dropAcceptor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\drop-acceptor.html",
        "details": [
          {
            "info": {
              "name": "dropAcceptor",
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not.\n\nImplement this function in such a way that it returns true if this [ComponentView](tools.aqua.bgw.components/ComponentView) accepts the drop of the given [DropEvent](tools.aqua.bgw.event/DropEvent)t.draggedComponent](tools.aqua.bgw.event/DropEvent/draggedComponent) or false if a drop is not valid. The [DropEvent](tools.aqua.bgw.event/DropEvent)t.draggedComponent](tools.aqua.bgw.event/DropEvent/draggedComponent) will snap back if all available drop targets return false.\n\nIt is advised not to modify the [Scene](tools.aqua.bgw.core/Scene) or its children in this function. A better suited function to modify the [Scene](tools.aqua.bgw.core/Scene) or its children after a drag and drop gesture is [onDragDropped](tools.aqua.bgw.components/ComponentView/onDragDropped) .\n\nNote: [onDragDropped](tools.aqua.bgw.components/ComponentView/onDragDropped) only gets invoked if the dropAcceptor returns true for the given [DropEvent](tools.aqua.bgw.event/DropEvent)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.onDragDropped",
                "link": "tools.aqua.bgw.components/ComponentView/onDragDropped"
              },
              {
                "name": "DropEvent",
                "link": "tools.aqua.bgw.event/DropEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "heightProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "heightProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.heightProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\height-property.html",
        "details": [
          {
            "info": {
              "name": "heightProperty",
              "signature": "val heightProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [height](tools.aqua.bgw.components/ComponentView/height) of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.height",
                "link": "tools.aqua.bgw.components/ComponentView/height"
              },
              {
                "name": "ComponentView.actualHeight",
                "link": "tools.aqua.bgw.components/ComponentView/actualHeight"
              }
            ]
          }
        ]
      },
      "height": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "height"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.height",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\height.html",
        "details": [
          {
            "info": {
              "name": "height",
              "signature": "var height: Double",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.actualHeight",
                "link": "tools.aqua.bgw.components/ComponentView/actualHeight"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView"
        ],
        "package": "tools.aqua.bgw.components.ComponentView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\index.html",
        "details": {
          "info": {
            "name": "ComponentView",
            "signature": "abstract class ComponentView",
            "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) is the abstract baseclass of all framework components.\n\nIt defines important fields and functions that are necessary to visualize inheriting components.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "DynamicComponentView",
              "link": "tools.aqua.bgw.components/DynamicComponentView"
            },
            {
              "name": "RootComponent",
              "link": "tools.aqua.bgw.components/RootComponent"
            },
            {
              "name": "StaticComponentView",
              "link": "tools.aqua.bgw.components/StaticComponentView"
            },
            {
              "name": "CameraPane",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "the X coordinate for this [ComponentView](tools.aqua.bgw.components/ComponentView) relative to its container."
            },
            {
              "name": "posY",
              "doc": "the Y coordinate for this [ComponentView](tools.aqua.bgw.components/ComponentView) relative to its container."
            },
            {
              "name": "width",
              "doc": "width for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "height",
              "doc": "height for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "visual",
              "doc": "visual for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            }
          ],
          "throws": [
            {
              "name": "IllegalInheritanceException",
              "doc": "inheriting from this [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) is not advised, because it cannot be rendered and trying to do so will result in an tools.aqua.bgw.exception.IllegalInheritanceException."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isDisabledProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isDisabledProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isDisabledProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-disabled-property.html",
        "details": [
          {
            "info": {
              "name": "isDisabledProperty",
              "signature": "val isDisabledProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) that controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked.\n\ntrue means no invocation, where false means invocation.\n\nFor a list of affected functions refer to the See Also section."
            },
            "seeAlso": [
              {
                "name": "ComponentView.onMouseEntered",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered"
              },
              {
                "name": "ComponentView.onMouseExited",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseExited"
              },
              {
                "name": "ComponentView.dropAcceptor",
                "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor"
              },
              {
                "name": "ComponentView.onDragDropped",
                "link": "tools.aqua.bgw.components/ComponentView/onDragDropped"
              },
              {
                "name": "ComponentView.onKeyPressed",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed"
              },
              {
                "name": "ComponentView.onKeyReleased",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased"
              },
              {
                "name": "ComponentView.onKeyTyped",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped"
              },
              {
                "name": "ComponentView.onMousePressed",
                "link": "tools.aqua.bgw.components/ComponentView/onMousePressed"
              },
              {
                "name": "ComponentView.onMouseReleased",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased"
              },
              {
                "name": "ComponentView.onMouseClicked",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "isDisabled": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isDisabled"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isDisabled",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-disabled.html",
        "details": [
          {
            "info": {
              "name": "isDisabled",
              "signature": "var isDisabled: Boolean",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked.\n\ntrue means no invocation, where false means invocation.\n\nFor a list of affected functions refer to the See Also section."
            },
            "seeAlso": [
              {
                "name": "ComponentView.onMouseEntered",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered"
              },
              {
                "name": "ComponentView.onMouseExited",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseExited"
              },
              {
                "name": "ComponentView.dropAcceptor",
                "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor"
              },
              {
                "name": "ComponentView.onDragDropped",
                "link": "tools.aqua.bgw.components/ComponentView/onDragDropped"
              },
              {
                "name": "ComponentView.onKeyPressed",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed"
              },
              {
                "name": "ComponentView.onKeyReleased",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased"
              },
              {
                "name": "ComponentView.onKeyTyped",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped"
              },
              {
                "name": "ComponentView.onMousePressed",
                "link": "tools.aqua.bgw.components/ComponentView/onMousePressed"
              },
              {
                "name": "ComponentView.onMouseReleased",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased"
              },
              {
                "name": "ComponentView.onMouseClicked",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked"
              }
            ]
          }
        ]
      },
      "isFocusableProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isFocusableProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isFocusableProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-focusable-property.html",
        "details": [
          {
            "info": {
              "name": "isFocusableProperty",
              "signature": "val isFocusableProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) that controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            "seeAlso": [
              {
                "name": "ComponentView.isFocusable",
                "link": "tools.aqua.bgw.components/ComponentView/isFocusable"
              }
            ]
          }
        ]
      },
      "isFocusable": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isFocusable"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isFocusable",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-focusable.html",
        "details": [
          {
            "info": {
              "name": "isFocusable",
              "signature": "var isFocusable: Boolean",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            }
          }
        ]
      },
      "isLayoutFromCenter": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isLayoutFromCenter"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isLayoutFromCenter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-layout-from-center.html",
        "details": [
          {
            "info": {
              "name": "isLayoutFromCenter",
              "signature": "var isLayoutFromCenter: Boolean",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            }
          }
        ]
      },
      "isVisibleProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isVisibleProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isVisibleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-visible-property.html",
        "details": [
          {
            "info": {
              "name": "isVisibleProperty",
              "signature": "val isVisibleProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView).\n\nInvisible ComponentViews are disabled. An object marked as visible may still be opaque due to opacity."
            },
            "seeAlso": [
              {
                "name": "ComponentView.isDisabledProperty",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabledProperty"
              },
              {
                "name": "ComponentView.opacityProperty",
                "link": "tools.aqua.bgw.components/ComponentView/opacityProperty"
              }
            ]
          }
        ]
      },
      "isVisible": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "isVisible"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.isVisible",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\is-visible.html",
        "details": [
          {
            "info": {
              "name": "isVisible",
              "signature": "var isVisible: Boolean",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView).\n\nInvisible ComponentViews are disabled. An object marked as visible may still be opaque due to opacity."
            },
            "seeAlso": [
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              },
              {
                "name": "ComponentView.opacity",
                "link": "tools.aqua.bgw.components/ComponentView/opacity"
              }
            ]
          }
        ]
      },
      "layoutBounds": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "layoutBounds"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.layoutBounds",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\layout-bounds.html",
        "details": [
          {
            "info": {
              "name": "layoutBounds",
              "signature": "var layoutBounds: CoordinatePlain",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            }
          }
        ]
      },
      "name": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "name"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.name",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\name.html",
        "details": [
          {
            "info": {
              "name": "name",
              "signature": "val name: String",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            }
          }
        ]
      },
      "offset": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "offset"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.offset",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\offset.html",
        "details": [
          {
            "info": {
              "name": "offset",
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position."
            },
            "parameters": [
              {
                "name": "offsetX",
                "doc": "Offset for the X coordinate."
              },
              {
                "name": "offsetY",
                "doc": "Offset for the Y coordinate."
              }
            ]
          }
        ]
      },
      "onDragDropped": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onDragDropped"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onDragDropped",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-drag-dropped.html",
        "details": [
          {
            "info": {
              "name": "onDragDropped",
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.dropAcceptor",
                "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor"
              },
              {
                "name": "DropEvent",
                "link": "tools.aqua.bgw.event/DropEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onDragGestureEntered": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onDragGestureEntered"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onDragGestureEntered",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-drag-gesture-entered.html",
        "details": [
          {
            "info": {
              "name": "onDragGestureEntered",
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            "seeAlso": [
              {
                "name": "DragEvent",
                "link": "tools.aqua.bgw.event/DragEvent"
              }
            ]
          }
        ]
      },
      "onDragGestureExited": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onDragGestureExited"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onDragGestureExited",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-drag-gesture-exited.html",
        "details": [
          {
            "info": {
              "name": "onDragGestureExited",
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            "seeAlso": [
              {
                "name": "DragEvent",
                "link": "tools.aqua.bgw.event/DragEvent"
              }
            ]
          }
        ]
      },
      "onKeyPressed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onKeyPressed"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onKeyPressed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-key-pressed.html",
        "details": [
          {
            "info": {
              "name": "onKeyPressed",
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            "seeAlso": [
              {
                "name": "KeyEvent",
                "link": "tools.aqua.bgw.event/KeyEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              },
              {
                "name": "ComponentView.isFocusable",
                "link": "tools.aqua.bgw.components/ComponentView/isFocusable"
              }
            ]
          }
        ]
      },
      "onKeyReleased": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onKeyReleased"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onKeyReleased",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-key-released.html",
        "details": [
          {
            "info": {
              "name": "onKeyReleased",
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            "seeAlso": [
              {
                "name": "KeyEvent",
                "link": "tools.aqua.bgw.event/KeyEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              },
              {
                "name": "ComponentView.isFocusable",
                "link": "tools.aqua.bgw.components/ComponentView/isFocusable"
              }
            ]
          }
        ]
      },
      "onKeyTyped": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onKeyTyped"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onKeyTyped",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-key-typed.html",
        "details": [
          {
            "info": {
              "name": "onKeyTyped",
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            "seeAlso": [
              {
                "name": "KeyEvent",
                "link": "tools.aqua.bgw.event/KeyEvent"
              },
              {
                "name": "ComponentView.onKeyPressed",
                "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              },
              {
                "name": "ComponentView.isFocusable",
                "link": "tools.aqua.bgw.components/ComponentView/isFocusable"
              }
            ],
            "deprecated": {
              "description": "The onKeyTyped event is defined in this specification for reference and completeness and will be removed in a future version.",
              "replaceWith": "onKeyPressed"
            }
          }
        ]
      },
      "onMouseClicked": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onMouseClicked"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onMouseClicked",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-mouse-clicked.html",
        "details": [
          {
            "info": {
              "name": "onMouseClicked",
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            "seeAlso": [
              {
                "name": "MouseEvent",
                "link": "tools.aqua.bgw.event/MouseEvent"
              },
              {
                "name": "ComponentView.onMousePressed",
                "link": "tools.aqua.bgw.components/ComponentView/onMousePressed"
              },
              {
                "name": "ComponentView.onMouseReleased",
                "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onMouseEntered": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onMouseEntered"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onMouseEntered",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-mouse-entered.html",
        "details": [
          {
            "info": {
              "name": "onMouseEntered",
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "Event",
                "link": "tools.aqua.bgw.event/Event"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onMouseExited": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onMouseExited"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onMouseExited",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-mouse-exited.html",
        "details": [
          {
            "info": {
              "name": "onMouseExited",
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "Event",
                "link": "tools.aqua.bgw.event/Event"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onMousePressed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onMousePressed"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onMousePressed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-mouse-pressed.html",
        "details": [
          {
            "info": {
              "name": "onMousePressed",
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "MouseEvent",
                "link": "tools.aqua.bgw.event/MouseEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onMouseReleased": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onMouseReleased"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onMouseReleased",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-mouse-released.html",
        "details": [
          {
            "info": {
              "name": "onMouseReleased",
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "MouseEvent",
                "link": "tools.aqua.bgw.event/MouseEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onScroll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onScroll"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onScroll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-scroll.html",
        "details": [
          {
            "info": {
              "name": "onScroll",
              "signature": "var onScroll: (ScrollEvent) -> Unit?",
              "doc": "Gets invoked with a [ScrollEvent](tools.aqua.bgw.event/ScrollEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ScrollEvent",
                "link": "tools.aqua.bgw.event/ScrollEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "onWheel": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "onWheel"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.onWheel",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\on-wheel.html",
        "details": [
          {
            "info": {
              "name": "onWheel",
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "WheelEvent",
                "link": "tools.aqua.bgw.event/WheelEvent"
              },
              {
                "name": "ComponentView.isDisabled",
                "link": "tools.aqua.bgw.components/ComponentView/isDisabled"
              }
            ]
          }
        ]
      },
      "opacityProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "opacityProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.opacityProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\opacity-property.html",
        "details": [
          {
            "info": {
              "name": "opacityProperty",
              "signature": "val opacityProperty: LimitedDoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [opacity](tools.aqua.bgw.components/ComponentView/opacity) of this [ComponentView](tools.aqua.bgw.components/ComponentView).\n\nMust be in range 0.0 to 1.0.\n\n0.0 corresponds to 0% [opacity](tools.aqua.bgw.components/ComponentView/opacity), where 1.0 corresponds to 100% [opacity](tools.aqua.bgw.components/ComponentView/opacity).\n\nNote that invisible objects ([opacity](tools.aqua.bgw.components/ComponentView/opacity) == 0.0) still remain interactive."
            },
            "seeAlso": [
              {
                "name": "ComponentView.opacity",
                "link": "tools.aqua.bgw.components/ComponentView/opacity"
              }
            ]
          }
        ]
      },
      "opacity": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "opacity"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.opacity",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\opacity.html",
        "details": [
          {
            "info": {
              "name": "opacity",
              "signature": "var opacity: Double",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView).\n\nMust be in range 0.0 to 1.0.\n\n0.0 corresponds to 0% opacity, where 1.0 corresponds to 100% opacity.\n\nNote that invisible objects (opacity == 0.0) still remain interactive."
            }
          }
        ]
      },
      "parent": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "parent"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.parent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\parent.html",
        "details": [
          {
            "info": {
              "name": "parent",
              "signature": "var parent: ComponentView?",
              "doc": "The [parent](tools.aqua.bgw.components/ComponentView/parent) of this [ComponentView](tools.aqua.bgw.components/ComponentView).\n\nnull if this [ComponentView](tools.aqua.bgw.components/ComponentView) is not contained in a [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer), [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView), or a [Scene](tools.aqua.bgw.core/Scene).\n\nIf the component has been added directly to a [Scene](tools.aqua.bgw.core/Scene), [parent](tools.aqua.bgw.components/ComponentView/parent) is equal to the scene's [RootComponent](tools.aqua.bgw.components/RootComponent).\n\nIf the component is contained within a container, [parent](tools.aqua.bgw.components/ComponentView/parent) is equal to that container."
            },
            "seeAlso": [
              {
                "name": "Scene",
                "link": "tools.aqua.bgw.core/Scene"
              },
              {
                "name": "GameComponentContainer",
                "link": "tools.aqua.bgw.components.container/GameComponentContainer"
              }
            ]
          }
        ]
      },
      "posXProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "posXProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.posXProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\pos-x-property.html",
        "details": [
          {
            "info": {
              "name": "posXProperty",
              "signature": "val posXProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.posX",
                "link": "tools.aqua.bgw.components/ComponentView/posX"
              },
              {
                "name": "ComponentView.actualPosX",
                "link": "tools.aqua.bgw.components/ComponentView/actualPosX"
              }
            ]
          }
        ]
      },
      "posX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "posX"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.posX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\pos-x.html",
        "details": [
          {
            "info": {
              "name": "posX",
              "signature": "var posX: Double",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.actualPosX",
                "link": "tools.aqua.bgw.components/ComponentView/actualPosX"
              }
            ]
          }
        ]
      },
      "posYProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "posYProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.posYProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\pos-y-property.html",
        "details": [
          {
            "info": {
              "name": "posYProperty",
              "signature": "val posYProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.posY",
                "link": "tools.aqua.bgw.components/ComponentView/posY"
              },
              {
                "name": "ComponentView.actualPosY",
                "link": "tools.aqua.bgw.components/ComponentView/actualPosY"
              }
            ]
          }
        ]
      },
      "posY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "posY"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.posY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\pos-y.html",
        "details": [
          {
            "info": {
              "name": "posY",
              "signature": "var posY: Double",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.actualPosY",
                "link": "tools.aqua.bgw.components/ComponentView/actualPosY"
              }
            ]
          }
        ]
      },
      "removeFromParent": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "removeFromParent"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.removeFromParent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\remove-from-parent.html",
        "details": [
          {
            "info": {
              "name": "removeFromParent",
              "signature": "fun removeFromParent(): ComponentView",
              "doc": "Removes this component from its parent."
            },
            "seeAlso": [
              {
                "name": "ComponentView.parent",
                "link": "tools.aqua.bgw.components/ComponentView/parent"
              }
            ],
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If this component is not contained in any container. Use parent field to check."
              }
            ]
          }
        ]
      },
      "reposition": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "reposition"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.reposition",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\reposition.html",
        "details": [
          {
            "info": {
              "name": "reposition",
              "signature": "fun reposition(posX: Number, posY: Number)",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "New X coordinate."
              },
              {
                "name": "posY",
                "doc": "New Y coordinate."
              }
            ]
          }
        ]
      },
      "resize": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "resize"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.resize",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\resize.html",
        "details": [
          {
            "info": {
              "name": "resize",
              "signature": "fun resize(width: Number, height: Number)",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize)."
            },
            "parameters": [
              {
                "name": "width",
                "doc": "New width."
              },
              {
                "name": "height",
                "doc": "New height."
              }
            ]
          }
        ]
      },
      "rotate": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "rotate"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.rotate",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\rotate.html",
        "details": [
          {
            "info": {
              "name": "rotate",
              "signature": "fun rotate(degrees: Number)",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate)."
            },
            "parameters": [
              {
                "name": "degrees",
                "doc": "Degrees to add to current rotation. May be negative."
              }
            ]
          }
        ]
      },
      "rotationProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "rotationProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.rotationProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\rotation-property.html",
        "details": [
          {
            "info": {
              "name": "rotationProperty",
              "signature": "val rotationProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees.\n\nValues not in [0,360) get mapped to values in [0,360) by modulo operation with 360.\n\nexample conversions: -10 -> 350 -370 -> 350 370 -> 10 730 -> 10"
            },
            "seeAlso": [
              {
                "name": "ComponentView.rotation",
                "link": "tools.aqua.bgw.components/ComponentView/rotation"
              }
            ]
          }
        ]
      },
      "rotation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "rotation"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.rotation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\rotation.html",
        "details": [
          {
            "info": {
              "name": "rotation",
              "signature": "var rotation: Double",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees.\n\nValues not in [0,360) get mapped to values in [0,360) by modulo operation with 360.\n\nexample conversions: -10 -> 350 -370 -> 350 370 -> 10 730 -> 10"
            }
          }
        ]
      },
      "scaleXProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "scaleXProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.scaleXProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\scale-x-property.html",
        "details": [
          {
            "info": {
              "name": "scaleXProperty",
              "signature": "val scaleXProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.scaleX",
                "link": "tools.aqua.bgw.components/ComponentView/scaleX"
              }
            ]
          }
        ]
      },
      "scaleX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "scaleX"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.scaleX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\scale-x.html",
        "details": [
          {
            "info": {
              "name": "scaleX",
              "signature": "fun scaleX(scalar: Number)",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX)."
            },
            "parameters": [
              {
                "name": "scalar",
                "doc": "New x scale."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX) is negative."
              }
            ]
          },
          {
            "info": {
              "name": "scaleX",
              "signature": "var scaleX: Double",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            }
          }
        ]
      },
      "scaleYProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "scaleYProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.scaleYProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\scale-y-property.html",
        "details": [
          {
            "info": {
              "name": "scaleYProperty",
              "signature": "val scaleYProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.scaleY",
                "link": "tools.aqua.bgw.components/ComponentView/scaleY"
              }
            ]
          }
        ]
      },
      "scaleY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "scaleY"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.scaleY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\scale-y.html",
        "details": [
          {
            "info": {
              "name": "scaleY",
              "signature": "fun scaleY(scalar: Number)",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY)."
            },
            "parameters": [
              {
                "name": "scalar",
                "doc": "New y scale."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY) is negative."
              }
            ]
          },
          {
            "info": {
              "name": "scaleY",
              "signature": "var scaleY: Double",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            }
          }
        ]
      },
      "scale": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "scale"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.scale",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\scale.html",
        "details": [
          {
            "info": {
              "name": "scale",
              "signature": "fun scale(scalar: Number)",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale)."
            },
            "parameters": [
              {
                "name": "scalar",
                "doc": "New scale."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If the given [scalar](tools.aqua.bgw.components/ComponentView/scale) is negative."
              }
            ]
          },
          {
            "info": {
              "name": "scale",
              "signature": "var scale: Double",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.scaleX",
                "link": "tools.aqua.bgw.components/ComponentView/scaleX"
              },
              {
                "name": "ComponentView.scaleY",
                "link": "tools.aqua.bgw.components/ComponentView/scaleY"
              }
            ],
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "When invoking getter if scaleX and scaleY differ. Use scaleX and scaleY getters instead. Safe to use if scale is equal in both directions."
              }
            ]
          }
        ]
      },
      "toBack": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "toBack"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.toBack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\to-back.html",
        "details": [
          {
            "info": {
              "name": "toBack",
              "signature": "fun toBack()",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "if the [parent](tools.aqua.bgw.components/ComponentView/parent) is not [LayeredContainer](tools.aqua.bgw.components/LayeredContainer) with the generic type [ComponentView](tools.aqua.bgw.components/ComponentView)"
              }
            ]
          }
        ]
      },
      "toFront": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "toFront"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.toFront",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\to-front.html",
        "details": [
          {
            "info": {
              "name": "toFront",
              "signature": "fun toFront()",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "if the [parent](tools.aqua.bgw.components/ComponentView/parent) is not [LayeredContainer](tools.aqua.bgw.components/LayeredContainer) with the generic type [ComponentView](tools.aqua.bgw.components/ComponentView)"
              }
            ]
          }
        ]
      },
      "visual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "visual"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.visual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\visual.html",
        "details": [
          {
            "info": {
              "name": "visual",
              "signature": "open var visual: Visual",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            }
          }
        ]
      },
      "widthProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "widthProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.widthProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\width-property.html",
        "details": [
          {
            "info": {
              "name": "widthProperty",
              "signature": "val widthProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [width](tools.aqua.bgw.components/ComponentView/width) of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.width",
                "link": "tools.aqua.bgw.components/ComponentView/width"
              },
              {
                "name": "ComponentView.actualWidth",
                "link": "tools.aqua.bgw.components/ComponentView/actualWidth"
              }
            ]
          }
        ]
      },
      "width": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "width"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.width",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\width.html",
        "details": [
          {
            "info": {
              "name": "width",
              "signature": "var width: Double",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "ComponentView.actualWidth",
                "link": "tools.aqua.bgw.components/ComponentView/actualWidth"
              }
            ]
          }
        ]
      },
      "zIndexProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "zIndexProperty"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.zIndexProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\z-index-property.html",
        "details": [
          {
            "info": {
              "name": "zIndexProperty",
              "signature": "val zIndexProperty: IntegerProperty",
              "doc": "Property for the order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent).#"
            },
            "seeAlso": [
              {
                "name": "ComponentView.zIndex",
                "link": "tools.aqua.bgw.components/ComponentView/zIndex"
              }
            ]
          }
        ]
      },
      "zIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "ComponentView",
          "zIndex"
        ],
        "package": "tools.aqua.bgw.components.ComponentView.zIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-component-view\\z-index.html",
        "details": [
          {
            "info": {
              "name": "zIndex",
              "signature": "var zIndex: Int",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          }
        ]
      }
    },
    "DynamicComponentView": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\index.html",
        "details": {
          "info": {
            "name": "DynamicComponentView",
            "signature": "abstract class DynamicComponentView : ComponentView",
            "doc": "Baseclass for all ComponentViews that can be draggable.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "GameComponentContainer",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer"
            },
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            }
          ],
          "seeAlso": [
            {
              "name": "BoardGameScene",
              "link": "tools.aqua.bgw.core/BoardGameScene"
            },
            {
              "name": "MenuScene",
              "link": "tools.aqua.bgw.core/MenuScene"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "The X coordinate for this [DynamicComponentView](tools.aqua.bgw.components/DynamicComponentView) relative to its container."
            },
            {
              "name": "posY",
              "doc": "The Y coordinate for this [DynamicComponentView](tools.aqua.bgw.components/DynamicComponentView) relative to its container."
            },
            {
              "name": "width",
              "doc": "Width for this [DynamicComponentView](tools.aqua.bgw.components/DynamicComponentView)."
            },
            {
              "name": "height",
              "doc": "Height for this [DynamicComponentView](tools.aqua.bgw.components/DynamicComponentView)."
            },
            {
              "name": "visual",
              "doc": "Visual for this [DynamicComponentView](tools.aqua.bgw.components/DynamicComponentView)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isDraggableProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "isDraggableProperty"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.isDraggableProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\is-draggable-property.html",
        "details": [
          {
            "info": {
              "name": "isDraggableProperty",
              "signature": "val isDraggableProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) that controls whether component is draggable or not."
            },
            "seeAlso": [
              {
                "name": "DynamicComponentView.isDraggable",
                "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable"
              }
            ]
          }
        ]
      },
      "isDraggable": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "isDraggable"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.isDraggable",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\is-draggable.html",
        "details": [
          {
            "info": {
              "name": "isDraggable",
              "signature": "var isDraggable: Boolean",
              "doc": "Controls whether component is draggable or not."
            }
          }
        ]
      },
      "isDraggedProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "isDraggedProperty"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.isDraggedProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\is-dragged-property.html",
        "details": [
          {
            "info": {
              "name": "isDraggedProperty",
              "signature": "val isDraggedProperty: ReadonlyBooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) that reflects whether component is currently dragged or not."
            },
            "seeAlso": [
              {
                "name": "DynamicComponentView.isDragged",
                "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged"
              }
            ]
          }
        ]
      },
      "isDragged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "isDragged"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.isDragged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\is-dragged.html",
        "details": [
          {
            "info": {
              "name": "isDragged",
              "signature": "var isDragged: Boolean",
              "doc": "Reflects whether component is currently dragged or not."
            }
          }
        ]
      },
      "onDragGestureEnded": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "onDragGestureEnded"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.onDragGestureEnded",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\on-drag-gesture-ended.html",
        "details": [
          {
            "info": {
              "name": "onDragGestureEnded",
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView).\n\nSecond parameter is true if at least one drop target accepted drop, false otherwise."
            },
            "seeAlso": [
              {
                "name": "DragEvent",
                "link": "tools.aqua.bgw.event/DragEvent"
              }
            ]
          }
        ]
      },
      "onDragGestureMoved": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "onDragGestureMoved"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.onDragGestureMoved",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\on-drag-gesture-moved.html",
        "details": [
          {
            "info": {
              "name": "onDragGestureMoved",
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "DragEvent",
                "link": "tools.aqua.bgw.event/DragEvent"
              }
            ]
          }
        ]
      },
      "onDragGestureStarted": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "DynamicComponentView",
          "onDragGestureStarted"
        ],
        "package": "tools.aqua.bgw.components.DynamicComponentView.onDragGestureStarted",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-dynamic-component-view\\on-drag-gesture-started.html",
        "details": [
          {
            "info": {
              "name": "onDragGestureStarted",
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            "seeAlso": [
              {
                "name": "DragEvent",
                "link": "tools.aqua.bgw.event/DragEvent"
              }
            ]
          }
        ]
      }
    },
    "LayeredContainer": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "LayeredContainer"
        ],
        "package": "tools.aqua.bgw.components.LayeredContainer",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-layered-container\\index.html",
        "details": {
          "info": {
            "name": "LayeredContainer",
            "signature": "interface LayeredContainer<T : ComponentView>",
            "doc": "An interface that describes a container which can hold [ComponentView](tools.aqua.bgw.components/ComponentView) that can be layered.",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          },
          "inheritors": [
            {
              "name": "RootComponent",
              "link": "tools.aqua.bgw.components/RootComponent"
            },
            {
              "name": "GameComponentContainer",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer"
            },
            {
              "name": "Pane",
              "link": "tools.aqua.bgw.components.layoutviews/Pane"
            }
          ]
        },
        "members": {
          "functions": [
            {
              "signature": "abstract fun setZIndex(component: T, zIndex: Int)",
              "name": "setZIndex",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "link": "tools.aqua.bgw.components/LayeredContainer/setZIndex",
                  "type": "[T](tools.aqua.bgw.components/LayeredContainer)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "zIndex",
                  "link": "tools.aqua.bgw.components/LayeredContainer/setZIndex",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/LayeredContainer/setZIndex",
              "returnType": "Unit",
              "doc": "Puts the [component](tools.aqua.bgw.components/LayeredContainer/setZIndex) in the appropriate place compared to the other components by the [zIndex](tools.aqua.bgw.components/LayeredContainer/setZIndex).",
              "isSuspend": false
            },
            {
              "signature": "abstract fun toBack(component: T)",
              "name": "toBack",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "link": "tools.aqua.bgw.components/LayeredContainer/toBack",
                  "type": "[T](tools.aqua.bgw.components/LayeredContainer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/LayeredContainer/toBack",
              "returnType": "Unit",
              "doc": "Puts the [component](tools.aqua.bgw.components/LayeredContainer/toBack) to the back inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer).",
              "isSuspend": false
            },
            {
              "signature": "abstract fun toFront(component: T)",
              "name": "toFront",
              "parameters": [
                {
                  "modifier": "",
                  "name": "component",
                  "link": "tools.aqua.bgw.components/LayeredContainer/toFront",
                  "type": "[T](tools.aqua.bgw.components/LayeredContainer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/LayeredContainer/toFront",
              "returnType": "Unit",
              "doc": "Puts the [component](tools.aqua.bgw.components/LayeredContainer/toFront) to the front inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer).",
              "isSuspend": false
            }
          ]
        }
      },
      "setZIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "LayeredContainer",
          "setZIndex"
        ],
        "package": "tools.aqua.bgw.components.LayeredContainer.setZIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-layered-container\\set-z-index.html",
        "details": [
          {
            "info": {
              "name": "setZIndex",
              "signature": "abstract fun setZIndex(component: T, zIndex: Int)",
              "doc": "Puts the [component](tools.aqua.bgw.components/LayeredContainer/setZIndex) in the appropriate place compared to the other components by the [zIndex](tools.aqua.bgw.components/LayeredContainer/setZIndex)."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved accordingly."
              },
              {
                "name": "zIndex",
                "doc": "The value that is used to compare the order of components."
              }
            ]
          }
        ]
      },
      "toBack": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "LayeredContainer",
          "toBack"
        ],
        "package": "tools.aqua.bgw.components.LayeredContainer.toBack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-layered-container\\to-back.html",
        "details": [
          {
            "info": {
              "name": "toBack",
              "signature": "abstract fun toBack(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components/LayeredContainer/toBack) to the back inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer)."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the back."
              }
            ]
          }
        ]
      },
      "toFront": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "LayeredContainer",
          "toFront"
        ],
        "package": "tools.aqua.bgw.components.LayeredContainer.toFront",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-layered-container\\to-front.html",
        "details": [
          {
            "info": {
              "name": "toFront",
              "signature": "abstract fun toFront(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components/LayeredContainer/toFront) to the front inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer)."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the front."
              }
            ]
          }
        ]
      }
    },
    "RootComponent": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "RootComponent"
        ],
        "package": "tools.aqua.bgw.components.RootComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-root-component\\index.html",
        "details": {
          "info": {
            "name": "RootComponent",
            "signature": "class RootComponent<T : ComponentView> : ComponentView, LayeredContainer<T>",
            "doc": "The root component in the view hierarchy of a [Scene](tools.aqua.bgw.core/Scene).",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val scene: Scene<T>",
              "modifier": "val",
              "name": "scene",
              "link": "tools.aqua.bgw.components/RootComponent/scene",
              "type": "[Scene](tools.aqua.bgw.core/Scene)<[T](tools.aqua.bgw.components/RootComponent)>",
              "defaultValue": "",
              "doc": "Scene of this root component."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "scene": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "RootComponent",
          "scene"
        ],
        "package": "tools.aqua.bgw.components.RootComponent.scene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-root-component\\scene.html",
        "details": [
          {
            "info": {
              "name": "scene",
              "signature": "val scene: Scene<T>",
              "doc": ""
            }
          }
        ]
      },
      "setZIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "RootComponent",
          "setZIndex"
        ],
        "package": "tools.aqua.bgw.components.RootComponent.setZIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-root-component\\set-z-index.html",
        "details": [
          {
            "info": {
              "name": "setZIndex",
              "signature": "open override fun setZIndex(component: T, zIndex: Int)",
              "doc": "Puts the [component](tools.aqua.bgw.components/RootComponent/setZIndex) in the appropriate place compared to the other components by the [zIndex](tools.aqua.bgw.components/RootComponent/setZIndex) and Changes its [zIndex](tools.aqua.bgw.components/RootComponent/setZIndex) accordingly."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved accordingly."
              },
              {
                "name": "zIndex",
                "doc": "The value that is used to compare the order of components."
              }
            ]
          }
        ]
      },
      "toBack": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "RootComponent",
          "toBack"
        ],
        "package": "tools.aqua.bgw.components.RootComponent.toBack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-root-component\\to-back.html",
        "details": [
          {
            "info": {
              "name": "toBack",
              "signature": "open override fun toBack(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components/RootComponent/toBack) to the back inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer) and Changes its zIndex accordingly."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the back."
              }
            ]
          }
        ]
      },
      "toFront": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "RootComponent",
          "toFront"
        ],
        "package": "tools.aqua.bgw.components.RootComponent.toFront",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-root-component\\to-front.html",
        "details": [
          {
            "info": {
              "name": "toFront",
              "signature": "open override fun toFront(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components/RootComponent/toFront) to the front inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer) and Changes its zIndex accordingly."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the front."
              }
            ]
          }
        ]
      }
    },
    "StaticComponentView": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components",
          "StaticComponentView"
        ],
        "package": "tools.aqua.bgw.components.StaticComponentView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components\\-static-component-view\\index.html",
        "details": {
          "info": {
            "name": "StaticComponentView",
            "signature": "abstract class StaticComponentView<T : ComponentView> : ComponentView",
            "doc": "Baseclass for all ComponentViews that are considered static.\n\nThis class is used to distinguish between ComponentViews that can be used in MenuScenes and those that can't.\n\nOnly StaticViews are allowed in MenuScenes.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "LayoutView",
              "link": "tools.aqua.bgw.components.layoutviews/LayoutView"
            },
            {
              "name": "UIComponent",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent"
            }
          ],
          "seeAlso": [
            {
              "name": "MenuScene",
              "link": "tools.aqua.bgw.core/MenuScene"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "posX",
              "doc": "The X coordinate for this [StaticComponentView](tools.aqua.bgw.components/StaticComponentView) relative to its container."
            },
            {
              "name": "posY",
              "doc": "The Y coordinate for this [StaticComponentView](tools.aqua.bgw.components/StaticComponentView) relative to its container."
            },
            {
              "name": "width",
              "doc": "Width for this [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)."
            },
            {
              "name": "height",
              "doc": "Height for this [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)."
            },
            {
              "name": "visual",
              "doc": "Visual for this [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.components"
      ],
      "package": "tools.aqua.bgw.components",
      "path": "example\\htmlPartial\\tools.aqua.bgw.components\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "abstract class ComponentView",
          "doc": "",
          "tags": {
            "modifiers": [
              "abstract"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "ComponentView",
            "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) is the abstract baseclass of all framework components.",
            "link": "tools.aqua.bgw.components/ComponentView"
          },
          {
            "name": "DynamicComponentView",
            "doc": "Baseclass for all ComponentViews that can be draggable.",
            "link": "tools.aqua.bgw.components/DynamicComponentView"
          },
          {
            "name": "LayeredContainer",
            "doc": "An interface that describes a container which can hold [ComponentView](tools.aqua.bgw.components/ComponentView) that can be layered.",
            "link": "tools.aqua.bgw.components/LayeredContainer"
          },
          {
            "name": "RootComponent",
            "doc": "The root component in the view hierarchy of a Scene.",
            "link": "tools.aqua.bgw.components/RootComponent"
          },
          {
            "name": "StaticComponentView",
            "doc": "Baseclass for all ComponentViews that are considered static.",
            "link": "tools.aqua.bgw.components/StaticComponentView"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.components.container": {
    "Area": {
      "Area": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "Area",
          "Area"
        ],
        "package": "tools.aqua.bgw.components.container.Area.Area",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-area\\-area.html",
        "details": [
          {
            "info": {
              "name": "Area",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_AREA_WIDTH, height: Number = DEFAULT_AREA_HEIGHT, visual: Visual = Visual.EMPTY)",
              "doc": "Creates an [Area](tools.aqua.bgw.components.container/Area)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [Area](tools.aqua.bgw.components.container/Area). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [Area](tools.aqua.bgw.components.container/Area). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [Area](tools.aqua.bgw.components.container/Area). Default: [DEFAULT_AREA_WIDTH](tools.aqua.bgw.core/DEFAULT_AREA_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [Area](tools.aqua.bgw.components.container/Area). Default: [DEFAULT_AREA_HEIGHT](tools.aqua.bgw.core/DEFAULT_AREA_HEIGHT)."
              },
              {
                "name": "visual",
                "doc": "Visual for this [Area](tools.aqua.bgw.components.container/Area). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "Area"
        ],
        "package": "tools.aqua.bgw.components.container.Area",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-area\\index.html",
        "details": {
          "info": {
            "name": "Area",
            "signature": "open class Area<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_AREA_WIDTH, height: Number = DEFAULT_AREA_HEIGHT, visual: Visual = Visual.EMPTY) : GameComponentContainer<T> , Iterable<T>",
            "doc": "An [Area](tools.aqua.bgw.components.container/Area) may be used to visualize a zone containing GameComponentViews.\n\nVisualization:\n\nThe [Visual](tools.aqua.bgw.visual/Visual) is used to visualize a background.\n\nThe positioning of the contained GameComponentViews is used to place them relative to the top left corner of this [Area](tools.aqua.bgw.components.container/Area).\n\nComponents that are out of bounds for this [Area](tools.aqua.bgw.components.container/Area) will still get rendered.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            },
            {
              "name": "Visual",
              "link": "tools.aqua.bgw.visual/Visual"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [Area](tools.aqua.bgw.components.container/Area). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [Area](tools.aqua.bgw.components.container/Area). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [Area](tools.aqua.bgw.components.container/Area). Default: [DEFAULT_AREA_WIDTH](tools.aqua.bgw.core/DEFAULT_AREA_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [Area](tools.aqua.bgw.components.container/Area). Default: [DEFAULT_AREA_HEIGHT](tools.aqua.bgw.core/DEFAULT_AREA_HEIGHT)."
            },
            {
              "name": "visual",
              "doc": "Visual for this [Area](tools.aqua.bgw.components.container/Area). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_AREA_WIDTH, height: Number = DEFAULT_AREA_HEIGHT, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [Area](tools.aqua.bgw.components.container/Area). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [Area](tools.aqua.bgw.components.container/Area). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_AREA_WIDTH",
                  "doc": "Width for this [Area](tools.aqua.bgw.components.container/Area). Default: [DEFAULT_AREA_WIDTH](tools.aqua.bgw.core/DEFAULT_AREA_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_AREA_HEIGHT",
                  "doc": "Height for this [Area](tools.aqua.bgw.components.container/Area). Default: [DEFAULT_AREA_HEIGHT](tools.aqua.bgw.core/DEFAULT_AREA_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Visual for this [Area](tools.aqua.bgw.components.container/Area). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
                }
              ],
              "doc": "Creates an [Area](tools.aqua.bgw.components.container/Area).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.container/Area)>",
              "defaultValue": "",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onAdd",
              "type": "[T](tools.aqua.bgw.components.container/Area).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onRemove",
              "type": "[T](tools.aqua.bgw.components.container/Area).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.container/Satchel",
                  "type": "[T](tools.aqua.bgw.components.container/Area)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/Satchel",
              "returnType": "Unit",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "CardStack": {
      "CardStack": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "CardStack"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.CardStack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\-card-stack.html",
        "details": [
          {
            "info": {
              "name": "CardStack",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_STACK_WIDTH, height: Number = DEFAULT_CARD_STACK_HEIGHT, alignment: Alignment = Alignment.CENTER, visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView)."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [DEFAULT_CARD_STACK_WIDTH](tools.aqua.bgw.core/DEFAULT_CARD_STACK_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [DEFAULT_CARD_STACK_HEIGHT](tools.aqua.bgw.core/DEFAULT_CARD_STACK_HEIGHT)."
              },
              {
                "name": "alignment",
                "doc": "Specifies how the contained CardViews should be aligned. Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)"
              },
              {
                "name": "visual",
                "doc": "Visual for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
              }
            ]
          }
        ]
      },
      "alignmentProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "alignmentProperty"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.alignmentProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\alignment-property.html",
        "details": [
          {
            "info": {
              "name": "alignmentProperty",
              "signature": "val alignmentProperty: Property<Alignment>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Alignment](tools.aqua.bgw.core/Alignment) of CardViews in this [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            "seeAlso": [
              {
                "name": "CardStack.alignment",
                "link": "tools.aqua.bgw.components.container/CardStack/alignment"
              }
            ]
          }
        ]
      },
      "alignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "alignment"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.alignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\alignment.html",
        "details": [
          {
            "info": {
              "name": "alignment",
              "signature": "var alignment: Alignment",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of CardViews in this [CardStack](tools.aqua.bgw.components.container/CardStack)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\index.html",
        "details": {
          "info": {
            "name": "CardStack",
            "signature": "open class CardStack<T : CardView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_STACK_WIDTH, height: Number = DEFAULT_CARD_STACK_HEIGHT, alignment: Alignment = Alignment.CENTER, visual: Visual = Visual.EMPTY) : GameComponentContainer<T>",
            "doc": "A CardStackView may be used to visualize a card stack.\n\nVisualization:\n\nThe [Visual](tools.aqua.bgw.visual/Visual) is used to visualize a background.\n\nThe positioning of contained CardViews gets ignored and the specified alignment gets used to position them instead.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "CardView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView"
            },
            {
              "name": "Visual",
              "link": "tools.aqua.bgw.visual/Visual"
            },
            {
              "name": "Alignment",
              "link": "tools.aqua.bgw.core/Alignment"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView)."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [DEFAULT_CARD_STACK_WIDTH](tools.aqua.bgw.core/DEFAULT_CARD_STACK_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [DEFAULT_CARD_STACK_HEIGHT](tools.aqua.bgw.core/DEFAULT_CARD_STACK_HEIGHT)."
            },
            {
              "name": "alignment",
              "doc": "Specifies how the contained CardViews should be aligned. Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)"
            },
            {
              "name": "visual",
              "doc": "Visual for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_STACK_WIDTH, height: Number = DEFAULT_CARD_STACK_HEIGHT, alignment: Alignment = Alignment.CENTER, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_STACK_WIDTH",
                  "doc": "Width for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [DEFAULT_CARD_STACK_WIDTH](tools.aqua.bgw.core/DEFAULT_CARD_STACK_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_STACK_HEIGHT",
                  "doc": "Height for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [DEFAULT_CARD_STACK_HEIGHT](tools.aqua.bgw.core/DEFAULT_CARD_STACK_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER",
                  "doc": "Specifies how the contained CardViews should be aligned. Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)"
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Visual for this [CardStack](tools.aqua.bgw.components.container/CardStack). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
                }
              ],
              "doc": "Creates a [CardStack](tools.aqua.bgw.components.container/CardStack).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.container/CardStack/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of CardViews in this [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.container/CardStack)>",
              "defaultValue": "",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onAdd",
              "type": "[T](tools.aqua.bgw.components.container/CardStack).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onRemove",
              "type": "[T](tools.aqua.bgw.components.container/CardStack).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.container/CardStack",
                  "type": "[T](tools.aqua.bgw.components.container/CardStack)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/CardStack",
              "returnType": "Unit",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun peek(): T",
              "name": "peek",
              "link": "tools.aqua.bgw.components.container/CardStack/peek",
              "returnType": "[T](tools.aqua.bgw.components.container/CardStack)",
              "doc": "Returns the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Does not modify the [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            {
              "signature": "fun peekOrNull(): T?",
              "name": "peekOrNull",
              "link": "tools.aqua.bgw.components.container/CardStack/peekOrNull",
              "returnType": "[T](tools.aqua.bgw.components.container/CardStack)?",
              "doc": "Returns the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView), or null, if the stack is empty. Does not modify the [CardStack](tools.aqua.bgw.components.container/CardStack) ."
            },
            {
              "signature": "fun pop(): T",
              "name": "pop",
              "link": "tools.aqua.bgw.components.container/CardStack/pop",
              "returnType": "[T](tools.aqua.bgw.components.container/CardStack)",
              "doc": "Pops the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) from this [CardStack](tools.aqua.bgw.components.container/CardStack) and returns it. Removes it from the [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            {
              "signature": "fun popOrNull(): T?",
              "name": "popOrNull",
              "link": "tools.aqua.bgw.components.container/CardStack/popOrNull",
              "returnType": "[T](tools.aqua.bgw.components.container/CardStack)?",
              "doc": "Pops the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) from this [CardStack](tools.aqua.bgw.components.container/CardStack) and returns it, or null, if the stack is empty. Removes it from the [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            {
              "signature": "fun push(cardView: T)",
              "name": "push",
              "parameters": [
                {
                  "modifier": "",
                  "name": "cardView",
                  "link": "tools.aqua.bgw.components.container/CardStack/push",
                  "type": "[T](tools.aqua.bgw.components.container/CardStack)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/CardStack/push",
              "returnType": "Unit",
              "doc": "Adds a [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) on top of this [CardStack](tools.aqua.bgw.components.container/CardStack).",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "iterator": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "iterator"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.iterator",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\iterator.html",
        "details": [
          {
            "info": {
              "name": "iterator",
              "signature": "open override fun iterator(): Iterator<T>",
              "doc": "Returns an iterator over the elements of this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            }
          }
        ]
      },
      "peekOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "peekOrNull"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.peekOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\peek-or-null.html",
        "details": [
          {
            "info": {
              "name": "peekOrNull",
              "signature": "fun peekOrNull(): T?",
              "doc": "Returns the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView), or null, if the stack is empty. Does not modify the [CardStack](tools.aqua.bgw.components.container/CardStack) ."
            }
          }
        ]
      },
      "peek": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "peek"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.peek",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\peek.html",
        "details": [
          {
            "info": {
              "name": "peek",
              "signature": "fun peek(): T",
              "doc": "Returns the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Does not modify the [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "if stack was empty."
              }
            ]
          }
        ]
      },
      "popOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "popOrNull"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.popOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\pop-or-null.html",
        "details": [
          {
            "info": {
              "name": "popOrNull",
              "signature": "fun popOrNull(): T?",
              "doc": "Pops the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) from this [CardStack](tools.aqua.bgw.components.container/CardStack) and returns it, or null, if the stack is empty. Removes it from the [CardStack](tools.aqua.bgw.components.container/CardStack)."
            }
          }
        ]
      },
      "pop": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "pop"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.pop",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\pop.html",
        "details": [
          {
            "info": {
              "name": "pop",
              "signature": "fun pop(): T",
              "doc": "Pops the topmost [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) from this [CardStack](tools.aqua.bgw.components.container/CardStack) and returns it. Removes it from the [CardStack](tools.aqua.bgw.components.container/CardStack)."
            },
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "if stack was empty."
              }
            ]
          }
        ]
      },
      "push": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "CardStack",
          "push"
        ],
        "package": "tools.aqua.bgw.components.container.CardStack.push",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-card-stack\\push.html",
        "details": [
          {
            "info": {
              "name": "push",
              "signature": "fun push(cardView: T)",
              "doc": "Adds a [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) on top of this [CardStack](tools.aqua.bgw.components.container/CardStack)."
            }
          }
        ]
      }
    },
    "GameComponentContainer": {
      "addAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "addAll"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.addAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\add-all.html",
        "details": [
          {
            "info": {
              "name": "addAll",
              "signature": "fun addAll(vararg components: T)",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).\n\nWhenever a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is encountered, that is already contained, an [IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-illegal-argument-exception/index.html) is thrown and no further [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added."
            },
            "parameters": [
              {
                "name": "components",
                "doc": "Vararg GameComponentViews to add."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is already contained."
              }
            ]
          },
          {
            "info": {
              "name": "addAll",
              "signature": "@Synchronizedfun addAll(collection: Collection<T>)",
              "doc": "Adds all GameComponentViews contained in [collection](tools.aqua.bgw.components.container/GameComponentContainer/addAll) to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).\n\nWhenever an [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)] is encountered, that is already contained, an [IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-illegal-argument-exception/index.html) is thrown and no further [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added."
            },
            "parameters": [
              {
                "name": "collection",
                "doc": "Collection containing the GameComponentViews to add."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is already contained."
              }
            ]
          }
        ]
      },
      "addComponentsListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "addComponentsListener"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.addComponentsListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\add-components-listener.html",
        "details": [
          {
            "info": {
              "name": "addComponentsListener",
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "doc": "Adds a [ValueObserver](tools.aqua.bgw.observable/ValueObserver) on the observableComponents list."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "The [ValueObserver](tools.aqua.bgw.observable/ValueObserver) to add."
              }
            ]
          }
        ]
      },
      "add": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "add"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.add",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\add.html",
        "details": [
          {
            "info": {
              "name": "add",
              "signature": "@Synchronizedfun add(component: T, index: Int = observableComponents.size)",
              "doc": "Adds a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            "parameters": [
              {
                "name": "component",
                "doc": "Component to add."
              },
              {
                "name": "index",
                "doc": "Index at which [component](tools.aqua.bgw.components.container/GameComponentContainer/add) will be added (Z-Height)."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If [index](tools.aqua.bgw.components.container/GameComponentContainer/add) is out of bounds for [components](tools.aqua.bgw.components.container/GameComponentContainer/components)."
              }
            ]
          }
        ]
      },
      "clearComponentsListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "clearComponentsListener"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.clearComponentsListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\clear-components-listener.html",
        "details": [
          {
            "info": {
              "name": "clearComponentsListener",
              "signature": "fun clearComponentsListener()",
              "doc": "Removes all listeners from the observableComponents list."
            }
          }
        ]
      },
      "clear": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "clear"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.clear",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\clear.html",
        "details": [
          {
            "info": {
              "name": "clear",
              "signature": "@Synchronizedfun clear(): List<T>",
              "doc": "Removes all GameComponentViews from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            }
          }
        ]
      },
      "components": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "components"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.components",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\components.html",
        "details": [
          {
            "info": {
              "name": "components",
              "signature": "var components: List<T>",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\index.html",
        "details": {
          "info": {
            "name": "GameComponentContainer",
            "signature": "sealed class GameComponentContainer<T : DynamicComponentView> : DynamicComponentView, LayeredContainer<T>",
            "doc": "Baseclass for containers that can contain GameComponentViews or its subclasses.\n\nIt provides the list to store GameComponentViews and some useful methods to work on said list.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "Area",
              "link": "tools.aqua.bgw.components.container/Area"
            },
            {
              "name": "CardStack",
              "link": "tools.aqua.bgw.components.container/CardStack"
            },
            {
              "name": "HexagonGrid",
              "link": "tools.aqua.bgw.components.container/HexagonGrid"
            },
            {
              "name": "LinearLayout",
              "link": "tools.aqua.bgw.components.container/LinearLayout"
            },
            {
              "name": "Satchel",
              "link": "tools.aqua.bgw.components.container/Satchel"
            }
          ],
          "seeAlso": [
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            },
            {
              "name": "DynamicComponentView",
              "link": "tools.aqua.bgw.components/DynamicComponentView"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "posX",
              "doc": "horizontal coordinate for this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "name": "posY",
              "doc": "vertical coordinate for this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "name": "width",
              "doc": "width for this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "name": "height",
              "doc": "height for this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "name": "visual",
              "doc": "visual for this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.container/GameComponentContainer)>",
              "defaultValue": "",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onAdd",
              "type": "[T](tools.aqua.bgw.components.container/GameComponentContainer).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onRemove",
              "type": "[T](tools.aqua.bgw.components.container/GameComponentContainer).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.container/GameComponentContainer/addAll",
                  "type": "[T](tools.aqua.bgw.components.container/GameComponentContainer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/addAll",
              "returnType": "Unit",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "isEmpty"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.isEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\is-empty.html",
        "details": [
          {
            "info": {
              "name": "isEmpty",
              "signature": "fun isEmpty(): Boolean",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            "seeAlso": [
              {
                "name": "GameComponentContainer.isNotEmpty",
                "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty"
              },
              {
                "name": "GameComponentContainer.components",
                "link": "tools.aqua.bgw.components.container/GameComponentContainer/components"
              }
            ]
          }
        ]
      },
      "isNotEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "isNotEmpty"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.isNotEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\is-not-empty.html",
        "details": [
          {
            "info": {
              "name": "isNotEmpty",
              "signature": "fun isNotEmpty(): Boolean",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            "seeAlso": [
              {
                "name": "GameComponentContainer.isEmpty",
                "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty"
              },
              {
                "name": "GameComponentContainer.components",
                "link": "tools.aqua.bgw.components.container/GameComponentContainer/components"
              }
            ]
          }
        ]
      },
      "iterator": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "iterator"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.iterator",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\iterator.html",
        "details": [
          {
            "info": {
              "name": "iterator",
              "signature": "open fun iterator(): Iterator<T>",
              "doc": "Returns an iterator over the elements of this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            }
          }
        ]
      },
      "numberOfComponents": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "numberOfComponents"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.numberOfComponents",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\number-of-components.html",
        "details": [
          {
            "info": {
              "name": "numberOfComponents",
              "signature": "fun numberOfComponents(): Int",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            "seeAlso": [
              {
                "name": "GameComponentContainer.components",
                "link": "tools.aqua.bgw.components.container/GameComponentContainer/components"
              }
            ]
          }
        ]
      },
      "onAdd": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "onAdd"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.onAdd",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\on-add.html",
        "details": [
          {
            "info": {
              "name": "onAdd",
              "signature": "var onAdd: T.() -> Unit?",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            }
          }
        ]
      },
      "onRemove": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "onRemove"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.onRemove",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\on-remove.html",
        "details": [
          {
            "info": {
              "name": "onRemove",
              "signature": "var onRemove: T.() -> Unit?",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            }
          }
        ]
      },
      "removeAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "removeAll"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.removeAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\remove-all.html",
        "details": [
          {
            "info": {
              "name": "removeAll",
              "signature": "@Synchronizedfun removeAll(collection: Collection<T>): Boolean",
              "doc": "Removes all GameComponentViews contained in [collection](tools.aqua.bgw.components.container/GameComponentContainer/removeAll) from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            "parameters": [
              {
                "name": "collection",
                "doc": "The GameComponentViews to remove."
              }
            ]
          },
          {
            "info": {
              "name": "removeAll",
              "signature": "@Synchronizedfun removeAll(predicate: (T) -> Boolean): Boolean",
              "doc": "Removes all GameComponentViews matching the [predicate](tools.aqua.bgw.components.container/GameComponentContainer/removeAll) from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            "parameters": [
              {
                "name": "predicate",
                "doc": "The predicate to evaluate."
              }
            ]
          }
        ]
      },
      "removeComponentsListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "removeComponentsListener"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.removeComponentsListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\remove-components-listener.html",
        "details": [
          {
            "info": {
              "name": "removeComponentsListener",
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "doc": "Removes a [listener](tools.aqua.bgw.components.container/GameComponentContainer/removeComponentsListener) from the observableComponents list."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "The [ValueObserver](tools.aqua.bgw.observable/ValueObserver) to remove."
              }
            ]
          }
        ]
      },
      "remove": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "remove"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.remove",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\remove.html",
        "details": [
          {
            "info": {
              "name": "remove",
              "signature": "@Synchronizedfun remove(component: T): Boolean",
              "doc": "Removes the [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) specified by the parameter from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            "parameters": [
              {
                "name": "component",
                "doc": "The [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to remove."
              }
            ]
          }
        ]
      },
      "setZIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "setZIndex"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.setZIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\set-z-index.html",
        "details": [
          {
            "info": {
              "name": "setZIndex",
              "signature": "open override fun setZIndex(component: T, zIndex: Int)",
              "doc": "Puts the [component](tools.aqua.bgw.components.container/GameComponentContainer/setZIndex) in the appropriate place compared to the other observableComponents by the [zIndex](tools.aqua.bgw.components.container/GameComponentContainer/setZIndex)."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved accordingly."
              },
              {
                "name": "zIndex",
                "doc": "The value that is used to compare the order of observableComponents."
              }
            ]
          }
        ]
      },
      "toBack": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "toBack"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.toBack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\to-back.html",
        "details": [
          {
            "info": {
              "name": "toBack",
              "signature": "open override fun toBack(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components.container/GameComponentContainer/toBack) to the back inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer) and Changes its zIndex accordingly."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the back."
              }
            ]
          }
        ]
      },
      "toFront": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "GameComponentContainer",
          "toFront"
        ],
        "package": "tools.aqua.bgw.components.container.GameComponentContainer.toFront",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-game-component-container\\to-front.html",
        "details": [
          {
            "info": {
              "name": "toFront",
              "signature": "open override fun toFront(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components.container/GameComponentContainer/toFront) to the front inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer) and Changes its zIndex accordingly."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the front."
              }
            ]
          }
        ]
      }
    },
    "HexagonGrid": {
      "CoordinateSystem": {
        "AXIAL": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.components.container",
              "HexagonGrid",
              "CoordinateSystem",
              "AXIAL"
            ],
            "package": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.AXIAL",
            "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-coordinate-system\\-a-x-i-a-l\\index.html",
            "details": {
              "info": {
                "name": "AXIAL",
                "signature": "AXIAL",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "OFFSET": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.components.container",
              "HexagonGrid",
              "CoordinateSystem",
              "OFFSET"
            ],
            "package": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.OFFSET",
            "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-coordinate-system\\-o-f-f-s-e-t\\index.html",
            "details": {
              "info": {
                "name": "OFFSET",
                "signature": "OFFSET",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "entries": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.container",
            "HexagonGrid",
            "CoordinateSystem",
            "entries"
          ],
          "package": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.entries",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-coordinate-system\\entries.html",
          "details": [
            {
              "info": {
                "name": "entries",
                "signature": "val entries: EnumEntries<HexagonGrid.CoordinateSystem>",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.container",
            "HexagonGrid",
            "CoordinateSystem"
          ],
          "package": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-coordinate-system\\index.html",
          "details": {
            "info": {
              "name": "CoordinateSystem",
              "signature": "enum CoordinateSystem : Enum<HexagonGrid.CoordinateSystem>",
              "doc": "Enumeration class representing the coordinate system options for the hexagon grid.",
              "tags": {
                "modifiers": [],
                "type": "enum"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val entries: EnumEntries<HexagonGrid.CoordinateSystem>",
                "modifier": "val",
                "name": "entries",
                "link": "tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/entries",
                "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[HexagonGrid.CoordinateSystem](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem)>",
                "defaultValue": "",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "fun valueOf(value: String): HexagonGrid.CoordinateSystem",
                "name": "valueOf",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "value",
                    "link": "tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/valueOf",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/valueOf",
                "returnType": "[HexagonGrid.CoordinateSystem](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem)",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                "isSuspend": false
              },
              {
                "signature": "fun values(): Array<HexagonGrid.CoordinateSystem>",
                "name": "values",
                "link": "tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/values",
                "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[HexagonGrid.CoordinateSystem](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem)>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
              }
            ]
          }
        },
        "valueOf": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.container",
            "HexagonGrid",
            "CoordinateSystem",
            "valueOf"
          ],
          "package": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.valueOf",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-coordinate-system\\value-of.html",
          "details": [
            {
              "info": {
                "name": "valueOf",
                "signature": "fun valueOf(value: String): HexagonGrid.CoordinateSystem",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
              },
              "throws": [
                {
                  "name": "IllegalArgumentException",
                  "doc": "if this enum type has no constant with the specified name"
                }
              ]
            }
          ]
        },
        "values": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.container",
            "HexagonGrid",
            "CoordinateSystem",
            "values"
          ],
          "package": "tools.aqua.bgw.components.container.HexagonGrid.CoordinateSystem.values",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-coordinate-system\\values.html",
          "details": [
            {
              "info": {
                "name": "values",
                "signature": "fun values(): Array<HexagonGrid.CoordinateSystem>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
              }
            }
          ]
        }
      },
      "HexagonGrid": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid",
          "HexagonGrid"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid.HexagonGrid",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\-hexagon-grid.html",
        "details": [
          {
            "info": {
              "name": "HexagonGrid",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = 0, height: Number = 0, visual: Visual = Visual.EMPTY, coordinateSystem: HexagonGrid.CoordinateSystem = CoordinateSystem.OFFSET, orientation: HexOrientation = HexOrientation.POINTY_TOP)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "The x-coordinate of the hexagon grid's position on the screen. Default is 0."
              },
              {
                "name": "posY",
                "doc": "The y-coordinate of the hexagon grid's position on the screen. Default is 0."
              },
              {
                "name": "width",
                "doc": "The width of the hexagon grid. It grows dynamically by the amount hexagons in it."
              },
              {
                "name": "height",
                "doc": "The height of the hexagon grid. It grows dynamically by the amount hexagons in it."
              },
              {
                "name": "visual",
                "doc": "The visual representation of the hexagon grid. Default is an empty visual."
              },
              {
                "name": "coordinateSystem",
                "doc": "The coordinate system to use for the grid. Default is [CoordinateSystem.OFFSET](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/OFFSET)."
              },
              {
                "name": "orientation",
                "doc": "The orientation of the hexagons in the grid. Default is [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
              }
            ]
          }
        ]
      },
      "coordinateSystem": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid",
          "coordinateSystem"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid.coordinateSystem",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\coordinate-system.html",
        "details": [
          {
            "info": {
              "name": "coordinateSystem",
              "signature": "val coordinateSystem: HexagonGrid.CoordinateSystem",
              "doc": "The coordinate system to use for the grid. Default is [CoordinateSystem.OFFSET](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/OFFSET)."
            }
          }
        ]
      },
      "get": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid",
          "get"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid.get",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\get.html",
        "details": [
          {
            "info": {
              "name": "get",
              "signature": "operator fun get(columnIndex: Int, rowIndex: Int): T?",
              "doc": "Gets the hexagon at the specified column index and row index."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "The column index of the hexagon."
              },
              {
                "name": "rowIndex",
                "doc": "The row index of the hexagon."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\index.html",
        "details": {
          "info": {
            "name": "HexagonGrid",
            "signature": "class HexagonGrid<T : HexagonView>(posX: Number = 0, posY: Number = 0, width: Number = 0, height: Number = 0, visual: Visual = Visual.EMPTY, val coordinateSystem: HexagonGrid.CoordinateSystem = CoordinateSystem.OFFSET, var orientation: HexOrientation = HexOrientation.POINTY_TOP) : GameComponentContainer<T>",
            "doc": "A class representing a grid of hexagons.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "HexagonGrid.CoordinateSystem",
              "link": "tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem"
            },
            {
              "name": "HexOrientation",
              "link": "tools.aqua.bgw.core/HexOrientation"
            },
            {
              "name": "HexagonView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/HexagonView"
            }
          ],
          "since": "0.8",
          "parameters": [
            {
              "name": "posX",
              "doc": "The x-coordinate of the hexagon grid's position on the screen. Default is 0."
            },
            {
              "name": "posY",
              "doc": "The y-coordinate of the hexagon grid's position on the screen. Default is 0."
            },
            {
              "name": "width",
              "doc": "The width of the hexagon grid. It grows dynamically by the amount hexagons in it."
            },
            {
              "name": "height",
              "doc": "The height of the hexagon grid. It grows dynamically by the amount hexagons in it."
            },
            {
              "name": "visual",
              "doc": "The visual representation of the hexagon grid. Default is an empty visual."
            },
            {
              "name": "coordinateSystem",
              "doc": "The coordinate system to use for the grid. Default is [CoordinateSystem.OFFSET](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/OFFSET)."
            },
            {
              "name": "orientation",
              "doc": "The orientation of the hexagons in the grid. Default is [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = 0, height: Number = 0, visual: Visual = Visual.EMPTY, coordinateSystem: HexagonGrid.CoordinateSystem = CoordinateSystem.OFFSET, orientation: HexOrientation = HexOrientation.POINTY_TOP)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The x-coordinate of the hexagon grid's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The y-coordinate of the hexagon grid's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The width of the hexagon grid. It grows dynamically by the amount hexagons in it."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The height of the hexagon grid. It grows dynamically by the amount hexagons in it."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "The visual representation of the hexagon grid. Default is an empty visual."
                },
                {
                  "modifier": "",
                  "name": "coordinateSystem",
                  "type": "[HexagonGrid.CoordinateSystem](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem)",
                  "defaultValue": "CoordinateSystem.OFFSET",
                  "doc": "The coordinate system to use for the grid. Default is [CoordinateSystem.OFFSET](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/OFFSET)."
                },
                {
                  "modifier": "",
                  "name": "orientation",
                  "type": "[HexOrientation](tools.aqua.bgw.core/HexOrientation)",
                  "defaultValue": "[HexOrientation](tools.aqua.bgw.core/HexOrientation).POINTY_TOP",
                  "doc": "The orientation of the hexagons in the grid. Default is [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "types": [
            {
              "name": "CoordinateSystem",
              "doc": "Enumeration class representing the coordinate system options for the hexagon grid.",
              "link": "tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem"
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.container/HexagonGrid)>",
              "defaultValue": "",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "signature": "val coordinateSystem: HexagonGrid.CoordinateSystem",
              "modifier": "val",
              "name": "coordinateSystem",
              "link": "tools.aqua.bgw.components.container/HexagonGrid/coordinateSystem",
              "type": "[HexagonGrid.CoordinateSystem](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem)",
              "defaultValue": "",
              "doc": "The coordinate system to use for the grid. Default is [CoordinateSystem.OFFSET](tools.aqua.bgw.components.container/HexagonGrid/CoordinateSystem/OFFSET)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val map: MutableMap<OffsetCoordinate, T>",
              "modifier": "val",
              "name": "map",
              "link": "tools.aqua.bgw.components.container/HexagonGrid/map",
              "type": "[MutableMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-mutable-map/index.html)<OffsetCoordinate, [T](tools.aqua.bgw.components.container/HexagonGrid)>",
              "defaultValue": "",
              "doc": "A mutable map that stores the hexagons in the grid."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onAdd",
              "type": "[T](tools.aqua.bgw.components.container/HexagonGrid).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onRemove",
              "type": "[T](tools.aqua.bgw.components.container/HexagonGrid).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var orientation: HexOrientation",
              "modifier": "var",
              "name": "orientation",
              "link": "tools.aqua.bgw.components.container/HexagonGrid/orientation",
              "type": "[HexOrientation](tools.aqua.bgw.core/HexOrientation)",
              "defaultValue": "",
              "doc": "The orientation of the hexagons in the grid. Default is [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.container/HexagonGrid",
                  "type": "[T](tools.aqua.bgw.components.container/HexagonGrid)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/HexagonGrid",
              "returnType": "Unit",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(columnIndex: Int, rowIndex: Int): T?",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.container/HexagonGrid/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.container/HexagonGrid/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/HexagonGrid/get",
              "returnType": "[T](tools.aqua.bgw.components.container/HexagonGrid)?",
              "doc": "Gets the hexagon at the specified column index and row index.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(columnIndex: Int, rowIndex: Int, component: T)",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.container/HexagonGrid/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.container/HexagonGrid/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "component",
                  "link": "tools.aqua.bgw.components.container/HexagonGrid/set",
                  "type": "[T](tools.aqua.bgw.components.container/HexagonGrid)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/HexagonGrid/set",
              "returnType": "Unit",
              "doc": "Sets the hexagon at the specified column index and row index.",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "map": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid",
          "map"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid.map",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\map.html",
        "details": [
          {
            "info": {
              "name": "map",
              "signature": "val map: MutableMap<OffsetCoordinate, T>",
              "doc": "A mutable map that stores the hexagons in the grid."
            },
            "deprecated": {
              "description": "Getting components using the map is no longer supported as of BGW 1.0.",
              "replaceWith": "this.components"
            }
          }
        ]
      },
      "orientation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid",
          "orientation"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid.orientation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\orientation.html",
        "details": [
          {
            "info": {
              "name": "orientation",
              "signature": "var orientation: HexOrientation",
              "doc": "The orientation of the hexagons in the grid. Default is [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
            },
            "since": "1.0"
          }
        ]
      },
      "set": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "HexagonGrid",
          "set"
        ],
        "package": "tools.aqua.bgw.components.container.HexagonGrid.set",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-hexagon-grid\\set.html",
        "details": [
          {
            "info": {
              "name": "set",
              "signature": "operator fun set(columnIndex: Int, rowIndex: Int, component: T)",
              "doc": "Sets the hexagon at the specified column index and row index."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "The column index of the hexagon."
              },
              {
                "name": "rowIndex",
                "doc": "The row index of the hexagon."
              },
              {
                "name": "component",
                "doc": "The hexagon component to set."
              }
            ]
          }
        ]
      }
    },
    "LinearLayout": {
      "LinearLayout": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "LinearLayout"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.LinearLayout",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\-linear-layout.html",
        "details": [
          {
            "info": {
              "name": "LinearLayout",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = 0, height: Number = 0, spacing: Number = 0, visual: Visual = Visual.EMPTY, orientation: Orientation = Orientation.HORIZONTAL, verticalAlignment: VerticalAlignment = VerticalAlignment.TOP, horizontalAlignment: HorizontalAlignment = HorizontalAlignment.LEFT)",
              "doc": "Secondary constructor taking separate alignment components."
            },
            "seeAlso": [
              {
                "name": "VerticalAlignment",
                "link": "tools.aqua.bgw.core/VerticalAlignment"
              },
              {
                "name": "HorizontalAlignment",
                "link": "tools.aqua.bgw.core/HorizontalAlignment"
              },
              {
                "name": "Orientation",
                "link": "tools.aqua.bgw.components.uicomponents/Orientation"
              },
              {
                "name": "Visual",
                "link": "tools.aqua.bgw.visual/Visual"
              }
            ],
            "since": "0.1",
            "parameters": [
              {
                "name": "posX",
                "doc": "horizontal coordinate for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
              },
              {
                "name": "posY",
                "doc": "vertical coordinate for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
              },
              {
                "name": "width",
                "doc": "width for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
              },
              {
                "name": "height",
                "doc": "height for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
              },
              {
                "name": "spacing",
                "doc": "spacing between contained GameComponentViews. Default: 0."
              },
              {
                "name": "visual",
                "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
              },
              {
                "name": "orientation",
                "doc": "orientation for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [Orientation.HORIZONTAL](tools.aqua.bgw.components.uicomponents/Orientation/HORIZONTAL)."
              },
              {
                "name": "verticalAlignment",
                "doc": "specifies how the contained components should be aligned vertically. Default: [VerticalAlignment.TOP](tools.aqua.bgw.core/VerticalAlignment/TOP)."
              },
              {
                "name": "horizontalAlignment",
                "doc": "specifies how the contained components should be aligned horizontally. Default: [HorizontalAlignment.LEFT](tools.aqua.bgw.core/HorizontalAlignment/LEFT)."
              }
            ]
          },
          {
            "info": {
              "name": "LinearLayout",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LINEAR_LAYOUT_WIDTH, height: Number = DEFAULT_LINEAR_LAYOUT_HEIGHT, spacing: Number = DEFAULT_LINEAR_LAYOUT_SPACING, visual: Visual = Visual.EMPTY, orientation: Orientation = Orientation.HORIZONTAL, alignment: Alignment = Alignment.TOP_LEFT)",
              "doc": "Creates a [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
              },
              {
                "name": "posX",
                "doc": "horizontal coordinate for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
              },
              {
                "name": "posY",
                "doc": "vertical coordinate for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
              },
              {
                "name": "width",
                "doc": "width for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [DEFAULT_LINEAR_LAYOUT_WIDTH](tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_WIDTH)."
              },
              {
                "name": "height",
                "doc": "height for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [DEFAULT_LINEAR_LAYOUT_HEIGHT](tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_HEIGHT)."
              },
              {
                "name": "spacing",
                "doc": "spacing between contained GameComponentViews. Default: [DEFAULT_LINEAR_LAYOUT_SPACING](tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_SPACING)."
              },
              {
                "name": "visual",
                "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
              },
              {
                "name": "orientation",
                "doc": "orientation for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [Orientation.HORIZONTAL](tools.aqua.bgw.components.uicomponents/Orientation/HORIZONTAL)."
              },
              {
                "name": "alignment",
                "doc": "specifies how the contained GameComponentViews should be aligned. Default: [Alignment.TOP_LEFT](tools.aqua.bgw.core/Alignment/TOP_LEFT)."
              }
            ]
          }
        ]
      },
      "alignmentProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "alignmentProperty"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.alignmentProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\alignment-property.html",
        "details": [
          {
            "info": {
              "name": "alignmentProperty",
              "signature": "val alignmentProperty: Property<Alignment>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Alignment](tools.aqua.bgw.core/Alignment) of GameComponentViews in this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            "seeAlso": [
              {
                "name": "Alignment",
                "link": "tools.aqua.bgw.core/Alignment"
              },
              {
                "name": "LinearLayout.alignment",
                "link": "tools.aqua.bgw.components.container/LinearLayout/alignment"
              }
            ]
          }
        ]
      },
      "alignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "alignment"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.alignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\alignment.html",
        "details": [
          {
            "info": {
              "name": "alignment",
              "signature": "var alignment: Alignment",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            "seeAlso": [
              {
                "name": "Alignment",
                "link": "tools.aqua.bgw.core/Alignment"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\index.html",
        "details": {
          "info": {
            "name": "LinearLayout",
            "signature": "open class LinearLayout<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LINEAR_LAYOUT_WIDTH, height: Number = DEFAULT_LINEAR_LAYOUT_HEIGHT, spacing: Number = DEFAULT_LINEAR_LAYOUT_SPACING, visual: Visual = Visual.EMPTY, orientation: Orientation = Orientation.HORIZONTAL, alignment: Alignment = Alignment.TOP_LEFT) : GameComponentContainer<T> , Iterable<T>",
            "doc": "A [LinearLayout](tools.aqua.bgw.components.container/LinearLayout) may be used to visualize a zone containing GameComponentViews.\n\nGameComponentViews inside the container get placed according to the specified [Orientation](tools.aqua.bgw.components.uicomponents/Orientation) and [Alignment](tools.aqua.bgw.core/Alignment). A [spacing](tools.aqua.bgw.components.container/LinearLayout/spacing) between components may be specified which may also be negative e.g. components like playing cards should overlap.\n\nVisualization:\n\nThe [Visual](tools.aqua.bgw.visual/Visual) is used to visualize a background.\n\nIf all components are still within bounds with the user defined [spacing](tools.aqua.bgw.components.container/LinearLayout/spacing), the user defined [spacing](tools.aqua.bgw.components.container/LinearLayout/spacing) gets used to space the components. Otherwise, the biggest possible [spacing](tools.aqua.bgw.components.container/LinearLayout/spacing) is used so that all components are still withing bounds of the [LinearLayout](tools.aqua.bgw.components.container/LinearLayout).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            },
            {
              "name": "Orientation",
              "link": "tools.aqua.bgw.components.uicomponents/Orientation"
            },
            {
              "name": "Alignment",
              "link": "tools.aqua.bgw.core/Alignment"
            },
            {
              "name": "Visual",
              "link": "tools.aqua.bgw.visual/Visual"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "posX",
              "doc": "horizontal coordinate for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
            },
            {
              "name": "posY",
              "doc": "vertical coordinate for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: 0."
            },
            {
              "name": "width",
              "doc": "width for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [DEFAULT_LINEAR_LAYOUT_WIDTH](tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_WIDTH)."
            },
            {
              "name": "height",
              "doc": "height for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [DEFAULT_LINEAR_LAYOUT_HEIGHT](tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_HEIGHT)."
            },
            {
              "name": "spacing",
              "doc": "spacing between contained GameComponentViews. Default: [DEFAULT_LINEAR_LAYOUT_SPACING](tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_SPACING)."
            },
            {
              "name": "visual",
              "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            {
              "name": "orientation",
              "doc": "orientation for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout). Default: [Orientation.HORIZONTAL](tools.aqua.bgw.components.uicomponents/Orientation/HORIZONTAL)."
            },
            {
              "name": "alignment",
              "doc": "specifies how the contained GameComponentViews should be aligned. Default: [Alignment.TOP_LEFT](tools.aqua.bgw.core/Alignment/TOP_LEFT)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.container/LinearLayout/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.container/LinearLayout)>",
              "defaultValue": "",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onAdd",
              "type": "[T](tools.aqua.bgw.components.container/LinearLayout).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onRemove",
              "type": "[T](tools.aqua.bgw.components.container/LinearLayout).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var orientation: Orientation",
              "modifier": "var",
              "name": "orientation",
              "link": "tools.aqua.bgw.components.container/LinearLayout/orientation",
              "type": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation)",
              "defaultValue": "",
              "doc": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation) of GameComponentViews in this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var spacing: Double",
              "modifier": "var",
              "name": "spacing",
              "link": "tools.aqua.bgw.components.container/LinearLayout/spacing",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Spacing for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.container/Satchel",
                  "type": "[T](tools.aqua.bgw.components.container/LinearLayout)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/Satchel",
              "returnType": "Unit",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "orientationProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "orientationProperty"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.orientationProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\orientation-property.html",
        "details": [
          {
            "info": {
              "name": "orientationProperty",
              "signature": "val orientationProperty: Property<Orientation>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Orientation](tools.aqua.bgw.components.uicomponents/Orientation) of GameComponentViews in this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            "seeAlso": [
              {
                "name": "Orientation",
                "link": "tools.aqua.bgw.components.uicomponents/Orientation"
              },
              {
                "name": "LinearLayout.orientation",
                "link": "tools.aqua.bgw.components.container/LinearLayout/orientation"
              }
            ]
          }
        ]
      },
      "orientation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "orientation"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.orientation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\orientation.html",
        "details": [
          {
            "info": {
              "name": "orientation",
              "signature": "var orientation: Orientation",
              "doc": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation) of GameComponentViews in this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            "seeAlso": [
              {
                "name": "Orientation",
                "link": "tools.aqua.bgw.components.uicomponents/Orientation"
              }
            ]
          }
        ]
      },
      "spacingProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "spacingProperty"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.spacingProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\spacing-property.html",
        "details": [
          {
            "info": {
              "name": "spacingProperty",
              "signature": "val spacingProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the spacing of GameComponentViews in this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            },
            "seeAlso": [
              {
                "name": "LinearLayout.spacing",
                "link": "tools.aqua.bgw.components.container/LinearLayout/spacing"
              }
            ]
          }
        ]
      },
      "spacing": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "LinearLayout",
          "spacing"
        ],
        "package": "tools.aqua.bgw.components.container.LinearLayout.spacing",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-linear-layout\\spacing.html",
        "details": [
          {
            "info": {
              "name": "spacing",
              "signature": "var spacing: Double",
              "doc": "Spacing for this [LinearLayout](tools.aqua.bgw.components.container/LinearLayout)."
            }
          }
        ]
      }
    },
    "Satchel": {
      "Satchel": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "Satchel",
          "Satchel"
        ],
        "package": "tools.aqua.bgw.components.container.Satchel.Satchel",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-satchel\\-satchel.html",
        "details": [
          {
            "info": {
              "name": "Satchel",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_SATCHEL_WIDTH, height: Number = DEFAULT_SATCHEL_HEIGHT, visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [Satchel](tools.aqua.bgw.components.container/Satchel)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
              },
              {
                "name": "posX",
                "doc": "horizontal coordinate for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: 0."
              },
              {
                "name": "posY",
                "doc": "vertical coordinate for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: 0."
              },
              {
                "name": "width",
                "doc": "width for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [DEFAULT_SATCHEL_WIDTH](tools.aqua.bgw.core/DEFAULT_SATCHEL_WIDTH)."
              },
              {
                "name": "height",
                "doc": "height for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [DEFAULT_SATCHEL_HEIGHT](tools.aqua.bgw.core/DEFAULT_SATCHEL_HEIGHT)."
              },
              {
                "name": "visual",
                "doc": "visual for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.container",
          "Satchel"
        ],
        "package": "tools.aqua.bgw.components.container.Satchel",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\-satchel\\index.html",
        "details": {
          "info": {
            "name": "Satchel",
            "signature": "open class Satchel<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_SATCHEL_WIDTH, height: Number = DEFAULT_SATCHEL_HEIGHT, visual: Visual = Visual.EMPTY) : GameComponentContainer<T> , Iterable<T>",
            "doc": "A [Satchel](tools.aqua.bgw.components.container/Satchel) may be used to visualize a pool containing GameComponentViews.\n\nA typical use case for a [Satchel](tools.aqua.bgw.components.container/Satchel) may be to visualize a pile of hidden items, where the user should not know what item might be drawn next.\n\nVisualization:\n\nThe current [Visual](tools.aqua.bgw.visual/Visual) is used to visualize the area from where the user can start a drag and drop gesture.\n\nHow to Use:\n\nUpon adding a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) to a [Satchel](tools.aqua.bgw.components.container/Satchel) a snapshot of the initial state of the [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) gets created and stored. Then the [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is made draggable, invisible and its size gets fit to the [Satchel](tools.aqua.bgw.components.container/Satchel) size.\n\nAny changes made to those properties while a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is contained in the [Satchel](tools.aqua.bgw.components.container/Satchel) get ignored, but they override the initial state.\n\nAs soon as a component gets removed (e.g. by initiating a drag and drop gesture) the initial state gets restored. The [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) at the highest index in the components list registers the next drag and drop gesture above this [Satchel](tools.aqua.bgw.components.container/Satchel).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "GameComponentView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
            },
            {
              "name": "Visual",
              "link": "tools.aqua.bgw.visual/Visual"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "posX",
              "doc": "horizontal coordinate for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: 0."
            },
            {
              "name": "posY",
              "doc": "vertical coordinate for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: 0."
            },
            {
              "name": "width",
              "doc": "width for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [DEFAULT_SATCHEL_WIDTH](tools.aqua.bgw.core/DEFAULT_SATCHEL_WIDTH)."
            },
            {
              "name": "height",
              "doc": "height for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [DEFAULT_SATCHEL_HEIGHT](tools.aqua.bgw.core/DEFAULT_SATCHEL_HEIGHT)."
            },
            {
              "name": "visual",
              "doc": "visual for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_SATCHEL_WIDTH, height: Number = DEFAULT_SATCHEL_HEIGHT, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "horizontal coordinate for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "vertical coordinate for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SATCHEL_WIDTH",
                  "doc": "width for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [DEFAULT_SATCHEL_WIDTH](tools.aqua.bgw.core/DEFAULT_SATCHEL_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SATCHEL_HEIGHT",
                  "doc": "height for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [DEFAULT_SATCHEL_HEIGHT](tools.aqua.bgw.core/DEFAULT_SATCHEL_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "visual for this [Satchel](tools.aqua.bgw.components.container/Satchel). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
                }
              ],
              "doc": "Creates a [Satchel](tools.aqua.bgw.components.container/Satchel).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.container/Satchel)>",
              "defaultValue": "",
              "doc": "GameComponentViews that are contained in this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onAdd",
              "type": "[T](tools.aqua.bgw.components.container/Satchel).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onAdd gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is added to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the added [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/onRemove",
              "type": "[T](tools.aqua.bgw.components.container/Satchel).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "onRemove gets invoked anytime after a [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) is removed from this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer) with the removed [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.container/Satchel",
                  "type": "[T](tools.aqua.bgw.components.container/Satchel)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.container/Satchel",
              "returnType": "Unit",
              "doc": "Adds all GameComponentViews passed as varargs to this [GameComponentContainer](tools.aqua.bgw.components.container/GameComponentContainer).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.container/GameComponentContainer/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the [components](tools.aqua.bgw.components.container/GameComponentContainer/components) list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.components.container"
      ],
      "package": "tools.aqua.bgw.components.container",
      "path": "example\\htmlPartial\\tools.aqua.bgw.components.container\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class Area<T : GameComponentView>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_AREA_WIDTH, height: Number = DEFAULT_AREA_HEIGHT, visual: Visual = Visual.EMPTY) : GameComponentContainer<T> , Iterable<T>",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "Area",
            "doc": "An [Area](tools.aqua.bgw.components.container/Area) may be used to visualize a zone containing GameComponentViews.",
            "link": "tools.aqua.bgw.components.container/Area"
          },
          {
            "name": "CardStack",
            "doc": "A CardStackView may be used to visualize a card stack.",
            "link": "tools.aqua.bgw.components.container/CardStack"
          },
          {
            "name": "GameComponentContainer",
            "doc": "Baseclass for containers that can contain GameComponentViews or its subclasses.",
            "link": "tools.aqua.bgw.components.container/GameComponentContainer"
          },
          {
            "name": "HexagonGrid",
            "doc": "A class representing a grid of hexagons.",
            "link": "tools.aqua.bgw.components.container/HexagonGrid"
          },
          {
            "name": "LinearLayout",
            "doc": "A [LinearLayout](tools.aqua.bgw.components.container/LinearLayout) may be used to visualize a zone containing GameComponentViews.",
            "link": "tools.aqua.bgw.components.container/LinearLayout"
          },
          {
            "name": "Satchel",
            "doc": "A [Satchel](tools.aqua.bgw.components.container/Satchel) may be used to visualize a pool containing GameComponentViews.",
            "link": "tools.aqua.bgw.components.container/Satchel"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.components.gamecomponentviews": {
    "CardView": {
      "CardSide": {
        "BACK": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.components.gamecomponentviews",
              "CardView",
              "CardSide",
              "BACK"
            ],
            "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.BACK",
            "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-side\\-b-a-c-k\\index.html",
            "details": {
              "info": {
                "name": "BACK",
                "signature": "BACK",
                "doc": "The [BACK](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/BACK) side.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "FRONT": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.components.gamecomponentviews",
              "CardView",
              "CardSide",
              "FRONT"
            ],
            "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.FRONT",
            "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-side\\-f-r-o-n-t\\index.html",
            "details": {
              "info": {
                "name": "FRONT",
                "signature": "FRONT",
                "doc": "The [FRONT](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/FRONT) side.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "entries": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.gamecomponentviews",
            "CardView",
            "CardSide",
            "entries"
          ],
          "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.entries",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-side\\entries.html",
          "details": [
            {
              "info": {
                "name": "entries",
                "signature": "val entries: EnumEntries<CardView.CardSide>",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.gamecomponentviews",
            "CardView",
            "CardSide"
          ],
          "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-side\\index.html",
          "details": {
            "info": {
              "name": "CardSide",
              "signature": "enum CardSide : Enum<CardView.CardSide>",
              "doc": "Enum for the card sides [FRONT](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/FRONT) and [BACK](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/BACK) with their visual indices.",
              "tags": {
                "modifiers": [],
                "type": "enum"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val entries: EnumEntries<CardView.CardSide>",
                "modifier": "val",
                "name": "entries",
                "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/entries",
                "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[CardView.CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide)>",
                "defaultValue": "",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "fun valueOf(value: String): CardView.CardSide",
                "name": "valueOf",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "value",
                    "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/valueOf",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/valueOf",
                "returnType": "[CardView.CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide)",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                "isSuspend": false
              },
              {
                "signature": "fun values(): Array<CardView.CardSide>",
                "name": "values",
                "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/values",
                "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[CardView.CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide)>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
              }
            ]
          }
        },
        "valueOf": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.gamecomponentviews",
            "CardView",
            "CardSide",
            "valueOf"
          ],
          "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.valueOf",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-side\\value-of.html",
          "details": [
            {
              "info": {
                "name": "valueOf",
                "signature": "fun valueOf(value: String): CardView.CardSide",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
              },
              "throws": [
                {
                  "name": "IllegalArgumentException",
                  "doc": "if this enum type has no constant with the specified name"
                }
              ]
            }
          ]
        },
        "values": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.gamecomponentviews",
            "CardView",
            "CardSide",
            "values"
          ],
          "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardSide.values",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-side\\values.html",
          "details": [
            {
              "info": {
                "name": "values",
                "signature": "fun values(): Array<CardView.CardSide>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
              }
            }
          ]
        }
      },
      "CardView": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "CardView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.CardView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\-card-view.html",
        "details": [
          {
            "info": {
              "name": "CardView",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_WIDTH, height: Number = DEFAULT_CARD_HEIGHT, front: Visual, back: Visual = front)",
              "doc": "Creates a [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) with given Visuals."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: [DEFAULT_CARD_WIDTH](tools.aqua.bgw.core/DEFAULT_CARD_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: [DEFAULT_CARD_HEIGHT](tools.aqua.bgw.core/DEFAULT_CARD_HEIGHT)."
              },
              {
                "name": "front",
                "doc": "Visual to represent the front side of the card."
              },
              {
                "name": "back",
                "doc": "[Visual](tools.aqua.bgw.visual/Visual) to represent the back side of the card. Default: same [Visual](tools.aqua.bgw.visual/Visual) as front."
              }
            ]
          }
        ]
      },
      "backVisual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "backVisual"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.backVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\back-visual.html",
        "details": [
          {
            "info": {
              "name": "backVisual",
              "signature": "var backVisual: Visual",
              "doc": "Back [Visual](tools.aqua.bgw.visual/Visual) for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) to be displayed for [CardSide.BACK](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/BACK)."
            }
          }
        ]
      },
      "currentSide": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "currentSide"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.currentSide",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\current-side.html",
        "details": [
          {
            "info": {
              "name": "currentSide",
              "signature": "var currentSide: CardView.CardSide",
              "doc": "The current [CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide) that is displayed."
            },
            "seeAlso": [
              {
                "name": "CardView.showFront",
                "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/showFront"
              },
              {
                "name": "CardView.showBack",
                "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/showBack"
              },
              {
                "name": "CardView.flip",
                "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/flip"
              }
            ]
          }
        ]
      },
      "flip": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "flip"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.flip",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\flip.html",
        "details": [
          {
            "info": {
              "name": "flip",
              "signature": "fun flip()",
              "doc": "Flips the [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) by seting the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to the other value."
            },
            "since": "0.7.1"
          }
        ]
      },
      "frontVisual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "frontVisual"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.frontVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\front-visual.html",
        "details": [
          {
            "info": {
              "name": "frontVisual",
              "signature": "var frontVisual: Visual",
              "doc": "Front [Visual](tools.aqua.bgw.visual/Visual) for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) to be displayed for [CardSide.FRONT](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/FRONT)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\index.html",
        "details": {
          "info": {
            "name": "CardView",
            "signature": "open class CardView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_WIDTH, height: Number = DEFAULT_CARD_HEIGHT, front: Visual, back: Visual = front) : GameComponentView",
            "doc": "A [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) may be used to visualize a card.\n\nYou can inherit from this class if you want to add additional functionality or fields. Inheriting does NOT change how a cardView is visualized by the BGW framework.\n\nVisualization:\n\nThe [Visual](tools.aqua.bgw.visual/Visual) at the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) value is used to visualize the card. By default, the back side is shown.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "CardView.CardSide",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: [DEFAULT_CARD_WIDTH](tools.aqua.bgw.core/DEFAULT_CARD_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: [DEFAULT_CARD_HEIGHT](tools.aqua.bgw.core/DEFAULT_CARD_HEIGHT)."
            },
            {
              "name": "front",
              "doc": "Visual to represent the front side of the card."
            },
            {
              "name": "back",
              "doc": "[Visual](tools.aqua.bgw.visual/Visual) to represent the back side of the card. Default: same [Visual](tools.aqua.bgw.visual/Visual) as front."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_WIDTH, height: Number = DEFAULT_CARD_HEIGHT, front: Visual, back: Visual = front)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_WIDTH",
                  "doc": "Width for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: [DEFAULT_CARD_WIDTH](tools.aqua.bgw.core/DEFAULT_CARD_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CARD_HEIGHT",
                  "doc": "Height for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView). Default: [DEFAULT_CARD_HEIGHT](tools.aqua.bgw.core/DEFAULT_CARD_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "front",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Visual to represent the front side of the card."
                },
                {
                  "modifier": "",
                  "name": "back",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "front",
                  "doc": "[Visual](tools.aqua.bgw.visual/Visual) to represent the back side of the card. Default: same [Visual](tools.aqua.bgw.visual/Visual) as front."
                }
              ],
              "doc": "Creates a [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) with given Visuals.",
              "isSecondaryConstructor": true
            }
          ],
          "types": [
            {
              "name": "CardSide",
              "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for the card sides FRONT and BACK with their visual indices.",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide"
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backVisual: Visual",
              "modifier": "var",
              "name": "backVisual",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/backVisual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Back [Visual](tools.aqua.bgw.visual/Visual) for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) to be displayed for [CardSide.BACK](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/BACK)."
            },
            {
              "signature": "var currentSide: CardView.CardSide",
              "modifier": "var",
              "name": "currentSide",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide",
              "type": "[CardView.CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide)",
              "defaultValue": "",
              "doc": "The current [CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide) that is displayed."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var frontVisual: Visual",
              "modifier": "var",
              "name": "frontVisual",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/frontVisual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Front [Visual](tools.aqua.bgw.visual/Visual) for this [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) to be displayed for [CardSide.FRONT](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/FRONT)."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open override var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun flip()",
              "name": "flip",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/flip",
              "returnType": "Unit",
              "doc": "Flips the [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) by seting the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to the other value."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun showBack()",
              "name": "showBack",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/showBack",
              "returnType": "Unit",
              "doc": "Sets the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to be displayed to [CardSide.BACK](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/BACK)."
            },
            {
              "signature": "fun showCardSide(side: CardView.CardSide)",
              "name": "showCardSide",
              "parameters": [
                {
                  "modifier": "",
                  "name": "side",
                  "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/showCardSide",
                  "type": "[CardView.CardSide](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/showCardSide",
              "returnType": "Unit",
              "doc": "Sets the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to the parameter value.",
              "isSuspend": false
            },
            {
              "signature": "fun showFront()",
              "name": "showFront",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView/showFront",
              "returnType": "Unit",
              "doc": "Sets the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to be displayed to [CardSide.FRONT](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/FRONT)."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "showBack": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "showBack"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.showBack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\show-back.html",
        "details": [
          {
            "info": {
              "name": "showBack",
              "signature": "fun showBack()",
              "doc": "Sets the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to be displayed to [CardSide.BACK](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/BACK)."
            }
          }
        ]
      },
      "showCardSide": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "showCardSide"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.showCardSide",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\show-card-side.html",
        "details": [
          {
            "info": {
              "name": "showCardSide",
              "signature": "fun showCardSide(side: CardView.CardSide)",
              "doc": "Sets the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to the parameter value."
            }
          }
        ]
      },
      "showFront": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "showFront"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.showFront",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\show-front.html",
        "details": [
          {
            "info": {
              "name": "showFront",
              "signature": "fun showFront()",
              "doc": "Sets the [currentSide](tools.aqua.bgw.components.gamecomponentviews/CardView/currentSide) to be displayed to [CardSide.FRONT](tools.aqua.bgw.components.gamecomponentviews/CardView/CardSide/FRONT)."
            }
          }
        ]
      },
      "visual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "CardView",
          "visual"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.CardView.visual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-card-view\\visual.html",
        "details": [
          {
            "info": {
              "name": "visual",
              "signature": "open override var visual: Visual",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            }
          }
        ]
      }
    },
    "DiceView": {
      "DiceView": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "DiceView",
          "DiceView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.DiceView.DiceView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-dice-view\\-dice-view.html",
        "details": [
          {
            "info": {
              "name": "DiceView",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_DICE_WIDTH, height: Number = DEFAULT_DICE_HEIGHT, visuals: List<Visual>)",
              "doc": "Creates a [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) with given Visuals."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: [DEFAULT_DICE_WIDTH](tools.aqua.bgw.core/DEFAULT_DICE_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: [DEFAULT_DICE_HEIGHT](tools.aqua.bgw.core/DEFAULT_DICE_HEIGHT)."
              },
              {
                "name": "visuals",
                "doc": "List of visuals to represent the sides of the die."
              }
            ]
          }
        ]
      },
      "currentSide": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "DiceView",
          "currentSide"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.DiceView.currentSide",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-dice-view\\current-side.html",
        "details": [
          {
            "info": {
              "name": "currentSide",
              "signature": "var currentSide: Int",
              "doc": "Current side that is displayed, 0-based."
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If index is greater than the amount of visuals stored in visuals or negative."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "DiceView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.DiceView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-dice-view\\index.html",
        "details": {
          "info": {
            "name": "DiceView",
            "signature": "open class DiceView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_DICE_WIDTH, height: Number = DEFAULT_DICE_HEIGHT, visuals: List<Visual>) : GameComponentView",
            "doc": "A [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) may be used to visualize a die.\n\nVisualization:\n\nThe Visual at the [currentSide](tools.aqua.bgw.components.gamecomponentviews/DiceView/currentSide) value is used to visualize the dice.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "since": "0.1",
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: [DEFAULT_DICE_WIDTH](tools.aqua.bgw.core/DEFAULT_DICE_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: [DEFAULT_DICE_HEIGHT](tools.aqua.bgw.core/DEFAULT_DICE_HEIGHT)."
            },
            {
              "name": "visuals",
              "doc": "List of visuals to represent the sides of the die."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_DICE_WIDTH, height: Number = DEFAULT_DICE_HEIGHT, visuals: List<Visual>)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_DICE_WIDTH",
                  "doc": "Width for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: [DEFAULT_DICE_WIDTH](tools.aqua.bgw.core/DEFAULT_DICE_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_DICE_HEIGHT",
                  "doc": "Height for this [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView). Default: [DEFAULT_DICE_HEIGHT](tools.aqua.bgw.core/DEFAULT_DICE_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "visuals",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[Visual](tools.aqua.bgw.visual/Visual)>",
                  "defaultValue": "",
                  "doc": "List of visuals to represent the sides of the die."
                }
              ],
              "doc": "Creates a [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) with given Visuals.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var currentSide: Int",
              "modifier": "var",
              "name": "currentSide",
              "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView/currentSide",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Current side that is displayed, 0-based."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open override var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun setVisuals(visuals: List<Visual>)",
              "name": "setVisuals",
              "parameters": [
                {
                  "modifier": "",
                  "name": "visuals",
                  "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[Visual](tools.aqua.bgw.visual/Visual)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals",
              "returnType": "Unit",
              "doc": "Sets all [visuals](tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals) for this DiceView. Clears old [visuals](tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals). All [visuals](tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals) get copied before being added. If [currentSide](tools.aqua.bgw.components.gamecomponentviews/DiceView/currentSide) is out of range, a [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY) will be shown.",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "setVisuals": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "DiceView",
          "setVisuals"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.DiceView.setVisuals",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-dice-view\\set-visuals.html",
        "details": [
          {
            "info": {
              "name": "setVisuals",
              "signature": "fun setVisuals(visuals: List<Visual>)",
              "doc": "Sets all [visuals](tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals) for this DiceView. Clears old [visuals](tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals). All [visuals](tools.aqua.bgw.components.gamecomponentviews/DiceView/setVisuals) get copied before being added. If [currentSide](tools.aqua.bgw.components.gamecomponentviews/DiceView/currentSide) is out of range, a [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY) will be shown."
            }
          }
        ]
      },
      "visual": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "DiceView",
          "visual"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.DiceView.visual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-dice-view\\visual.html",
        "details": [
          {
            "info": {
              "name": "visual",
              "signature": "open override var visual: Visual",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            }
          }
        ]
      }
    },
    "GameComponentView": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "GameComponentView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.GameComponentView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-game-component-view\\index.html",
        "details": {
          "info": {
            "name": "GameComponentView",
            "signature": "sealed class GameComponentView : DynamicComponentView",
            "doc": "Abstract baseclass for game components like CardViews or TokenViews.\n\nThis class is used to restrict the type argument of containers.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "CardView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/CardView"
            },
            {
              "name": "DiceView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView"
            },
            {
              "name": "HexagonView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/HexagonView"
            },
            {
              "name": "TokenView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/TokenView"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "width",
              "doc": "Width for this [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "height",
              "doc": "Height for this [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            },
            {
              "name": "visual",
              "doc": "Visual for this [GameComponentView](tools.aqua.bgw.components.gamecomponentviews/GameComponentView)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "HexagonView": {
      "HexagonView": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "HexagonView",
          "HexagonView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.HexagonView.HexagonView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-hexagon-view\\-hexagon-view.html",
        "details": [
          {
            "info": {
              "name": "HexagonView",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, size: Number = DEFAULT_HEXAGON_SIZE, visual: Visual, orientation: HexOrientation = HexOrientation.POINTY_TOP)",
              "doc": "Creates a [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView) with a given [Visual](tools.aqua.bgw.visual/Visual)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: 0."
              },
              {
                "name": "size",
                "doc": "Represents the distance to the outermost corner of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: [DEFAULT_HEXAGON_SIZE](tools.aqua.bgw.core/DEFAULT_HEXAGON_SIZE)."
              },
              {
                "name": "visual",
                "doc": "Visual for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView)."
              },
              {
                "name": "orientation",
                "doc": "Orientation of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "HexagonView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.HexagonView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-hexagon-view\\index.html",
        "details": {
          "info": {
            "name": "HexagonView",
            "signature": "open class HexagonView(posX: Number = 0, posY: Number = 0, size: Number = DEFAULT_HEXAGON_SIZE, visual: Visual, var orientation: HexOrientation = HexOrientation.POINTY_TOP) : GameComponentView",
            "doc": "A [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView) represents a hexagonal shaped game component view.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "HexOrientation",
              "link": "tools.aqua.bgw.core/HexOrientation"
            },
            {
              "name": "HexagonView",
              "link": "tools.aqua.bgw.components.gamecomponentviews/HexagonView"
            }
          ],
          "since": "0.8",
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: 0."
            },
            {
              "name": "size",
              "doc": "Represents the distance to the outermost corner of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: [DEFAULT_HEXAGON_SIZE](tools.aqua.bgw.core/DEFAULT_HEXAGON_SIZE)."
            },
            {
              "name": "visual",
              "doc": "Visual for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView)."
            },
            {
              "name": "orientation",
              "doc": "Orientation of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, size: Number = DEFAULT_HEXAGON_SIZE, visual: Visual, orientation: HexOrientation = HexOrientation.POINTY_TOP)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "size",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_HEXAGON_SIZE",
                  "doc": "Represents the distance to the outermost corner of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: [DEFAULT_HEXAGON_SIZE](tools.aqua.bgw.core/DEFAULT_HEXAGON_SIZE)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Visual for this [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView)."
                },
                {
                  "modifier": "",
                  "name": "orientation",
                  "type": "[HexOrientation](tools.aqua.bgw.core/HexOrientation)",
                  "defaultValue": "[HexOrientation](tools.aqua.bgw.core/HexOrientation).POINTY_TOP",
                  "doc": "Orientation of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). Default: [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP)."
                }
              ],
              "doc": "Creates a [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView) with a given [Visual](tools.aqua.bgw.visual/Visual).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var orientation: HexOrientation",
              "modifier": "var",
              "name": "orientation",
              "link": "tools.aqua.bgw.components.gamecomponentviews/HexagonView/orientation",
              "type": "[HexOrientation](tools.aqua.bgw.core/HexOrientation)",
              "defaultValue": "",
              "doc": "Orientation of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var size: Double",
              "modifier": "var",
              "name": "size",
              "link": "tools.aqua.bgw.components.gamecomponentviews/HexagonView/size",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Size of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). For [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP) this is the distance from the center to the top or bottom corner representing half the height of the container. For [HexOrientation.FLAT_TOP](tools.aqua.bgw.core/HexOrientation/FLAT_TOP) this is the distance from the center to the left or right corner representing half the width of the container."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "orientation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "HexagonView",
          "orientation"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.HexagonView.orientation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-hexagon-view\\orientation.html",
        "details": [
          {
            "info": {
              "name": "orientation",
              "signature": "var orientation: HexOrientation",
              "doc": "Orientation of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView)."
            },
            "seeAlso": [
              {
                "name": "HexOrientation",
                "link": "tools.aqua.bgw.core/HexOrientation"
              }
            ],
            "since": "1.0"
          }
        ]
      },
      "size": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "HexagonView",
          "size"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.HexagonView.size",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-hexagon-view\\size.html",
        "details": [
          {
            "info": {
              "name": "size",
              "signature": "var size: Double",
              "doc": "Size of the [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView). For [HexOrientation.POINTY_TOP](tools.aqua.bgw.core/HexOrientation/POINTY_TOP) this is the distance from the center to the top or bottom corner representing half the height of the container. For [HexOrientation.FLAT_TOP](tools.aqua.bgw.core/HexOrientation/FLAT_TOP) this is the distance from the center to the left or right corner representing half the width of the container."
            }
          }
        ]
      }
    },
    "TokenView": {
      "TokenView": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "TokenView",
          "TokenView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.TokenView.TokenView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-token-view\\-token-view.html",
        "details": [
          {
            "info": {
              "name": "TokenView",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOKEN_WIDTH, height: Number = DEFAULT_TOKEN_HEIGHT, visual: Visual)",
              "doc": "Creates a [TokenView](tools.aqua.bgw.components.gamecomponentviews/TokenView) with given [Visual](tools.aqua.bgw.visual/Visual)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this TokenView. Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this TokenView. Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this TokenView. Default: [DEFAULT_TOKEN_WIDTH](tools.aqua.bgw.core/DEFAULT_TOKEN_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this TokenView. Default: [DEFAULT_TOKEN_HEIGHT](tools.aqua.bgw.core/DEFAULT_TOKEN_HEIGHT)."
              },
              {
                "name": "visual",
                "doc": "Visual for this TokenView."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.gamecomponentviews",
          "TokenView"
        ],
        "package": "tools.aqua.bgw.components.gamecomponentviews.TokenView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\-token-view\\index.html",
        "details": {
          "info": {
            "name": "TokenView",
            "signature": "open class TokenView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOKEN_WIDTH, height: Number = DEFAULT_TOKEN_HEIGHT, visual: Visual) : GameComponentView",
            "doc": "A [TokenView](tools.aqua.bgw.components.gamecomponentviews/TokenView) may be used to visualize any kind of token.\n\nVisualization:\n\nThe current [Visual](tools.aqua.bgw.visual/Visual) is used to visualize the token.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "since": "0.1",
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this TokenView. Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this TokenView. Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this TokenView. Default: [DEFAULT_TOKEN_WIDTH](tools.aqua.bgw.core/DEFAULT_TOKEN_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this TokenView. Default: [DEFAULT_TOKEN_HEIGHT](tools.aqua.bgw.core/DEFAULT_TOKEN_HEIGHT)."
            },
            {
              "name": "visual",
              "doc": "Visual for this TokenView."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOKEN_WIDTH, height: Number = DEFAULT_TOKEN_HEIGHT, visual: Visual)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this TokenView. Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this TokenView. Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOKEN_WIDTH",
                  "doc": "Width for this TokenView. Default: [DEFAULT_TOKEN_WIDTH](tools.aqua.bgw.core/DEFAULT_TOKEN_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOKEN_HEIGHT",
                  "doc": "Height for this TokenView. Default: [DEFAULT_TOKEN_HEIGHT](tools.aqua.bgw.core/DEFAULT_TOKEN_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Visual for this TokenView."
                }
              ],
              "doc": "Creates a [TokenView](tools.aqua.bgw.components.gamecomponentviews/TokenView) with given [Visual](tools.aqua.bgw.visual/Visual).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isDraggable: Boolean",
              "modifier": "var",
              "name": "isDraggable",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDraggable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether component is draggable or not."
            },
            {
              "signature": "var isDragged: Boolean",
              "modifier": "var",
              "name": "isDragged",
              "link": "tools.aqua.bgw.components/DynamicComponentView/isDragged",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Reflects whether component is currently dragged or not."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEnded: (DropEvent, Boolean) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEnded",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureEnded",
              "type": "([DropEvent](tools.aqua.bgw.event/DropEvent), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture has ended on this rendered [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureMoved: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureMoved",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureMoved",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a mouse movement occurs during a drag gesture on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onDragGestureStarted: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureStarted",
              "link": "tools.aqua.bgw.components/DynamicComponentView/onDragGestureStarted",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag gesture is started on this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.components.gamecomponentviews"
      ],
      "package": "tools.aqua.bgw.components.gamecomponentviews",
      "path": "example\\htmlPartial\\tools.aqua.bgw.components.gamecomponentviews\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class CardView(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CARD_WIDTH, height: Number = DEFAULT_CARD_HEIGHT, front: Visual, back: Visual = front) : GameComponentView",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "CardView",
            "doc": "A [CardView](tools.aqua.bgw.components.gamecomponentviews/CardView) may be used to visualize a card.",
            "link": "tools.aqua.bgw.components.gamecomponentviews/CardView"
          },
          {
            "name": "DiceView",
            "doc": "A [DiceView](tools.aqua.bgw.components.gamecomponentviews/DiceView) may be used to visualize a die.",
            "link": "tools.aqua.bgw.components.gamecomponentviews/DiceView"
          },
          {
            "name": "GameComponentView",
            "doc": "Abstract baseclass for game components like CardViews or TokenViews.",
            "link": "tools.aqua.bgw.components.gamecomponentviews/GameComponentView"
          },
          {
            "name": "HexagonView",
            "doc": "A [HexagonView](tools.aqua.bgw.components.gamecomponentviews/HexagonView) represents a hexagonal shaped game component view.",
            "link": "tools.aqua.bgw.components.gamecomponentviews/HexagonView"
          },
          {
            "name": "TokenView",
            "doc": "A [TokenView](tools.aqua.bgw.components.gamecomponentviews/TokenView) may be used to visualize any kind of token.",
            "link": "tools.aqua.bgw.components.gamecomponentviews/TokenView"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.components.layoutviews": {
    "CameraPane": {
      "CameraPane": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "CameraPane"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.CameraPane",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\-camera-pane.html",
        "details": [
          {
            "info": {
              "name": "CameraPane",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY, limitBounds: Boolean = true, target: T)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "T",
                "doc": "The type of the [target](tools.aqua.bgw.components.layoutviews/LayoutView). Must extend the [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) class."
              },
              {
                "name": "posX",
                "doc": "The x-coordinate of the camera pane's position on the screen. Default is 0."
              },
              {
                "name": "posY",
                "doc": "The y-coordinate of the camera pane's position on the screen. Default is 0."
              },
              {
                "name": "width",
                "doc": "The width of the camera pane."
              },
              {
                "name": "height",
                "doc": "The height of the camera pane."
              },
              {
                "name": "visual",
                "doc": "The visual representation of the camera pane. Default is an empty visual."
              },
              {
                "name": "target",
                "doc": "The target [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) that this camera pane will display."
              },
              {
                "name": "limitBounds",
                "doc": "Whether the target layout view should be limited to the bounds of the camera pane. Default is true."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\index.html",
        "details": {
          "info": {
            "name": "CameraPane",
            "signature": "open class CameraPane<T : LayoutView<*>>(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY, limitBounds: Boolean = true, target: T) : ComponentView",
            "doc": "A pane representing a camera view that can be used to display and manipulate a target layout view.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "GridPane",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane"
            },
            {
              "name": "Pane",
              "link": "tools.aqua.bgw.components.layoutviews/Pane"
            }
          ],
          "since": "0.8",
          "parameters": [
            {
              "name": "T",
              "doc": "The type of the [target](tools.aqua.bgw.components.layoutviews/LayoutView). Must extend the [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) class."
            },
            {
              "name": "posX",
              "doc": "The x-coordinate of the camera pane's position on the screen. Default is 0."
            },
            {
              "name": "posY",
              "doc": "The y-coordinate of the camera pane's position on the screen. Default is 0."
            },
            {
              "name": "width",
              "doc": "The width of the camera pane."
            },
            {
              "name": "height",
              "doc": "The height of the camera pane."
            },
            {
              "name": "visual",
              "doc": "The visual representation of the camera pane. Default is an empty visual."
            },
            {
              "name": "target",
              "doc": "The target [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) that this camera pane will display."
            },
            {
              "name": "limitBounds",
              "doc": "Whether the target layout view should be limited to the bounds of the camera pane. Default is true."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY, limitBounds: Boolean = true, target: T)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The x-coordinate of the camera pane's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The y-coordinate of the camera pane's position on the screen. Default is 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "The width of the camera pane."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "The height of the camera pane."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "The visual representation of the camera pane. Default is an empty visual."
                },
                {
                  "modifier": "",
                  "name": "limitBounds",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "doc": "Whether the target layout view should be limited to the bounds of the camera pane. Default is true."
                },
                {
                  "modifier": "",
                  "name": "target",
                  "type": "[T](tools.aqua.bgw.components.layoutviews/CameraPane)",
                  "defaultValue": "",
                  "doc": "The target [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) that this camera pane will display."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var interactive: Boolean",
              "modifier": "var",
              "name": "interactive",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/interactive",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Determines if the camera pane is interactive, which means that you can scroll to zoom and drag to pan around."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "var limitBounds: Boolean",
              "modifier": "var",
              "name": "limitBounds",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Determines if the target layout view should be limited to the bounds of the camera pane. This will also affect the panning of the camera pane with [pan](tools.aqua.bgw.components.layoutviews/CameraPane/pan) and [panBy](tools.aqua.bgw.components.layoutviews/CameraPane/panBy) as well as zooming."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onZoomed: (Number) -> Unit?",
              "modifier": "var",
              "name": "onZoomed",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/onZoomed",
              "type": "([Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the camera pane is zoomed."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var panMouseButton: MouseButtonType",
              "modifier": "var",
              "name": "panMouseButton",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panMouseButton",
              "type": "[MouseButtonType](tools.aqua.bgw.event/MouseButtonType)",
              "defaultValue": "",
              "doc": "The mouse button that is used to pan the camera pane."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val scroll: Coordinate",
              "modifier": "val",
              "name": "scroll",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/scroll",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Upper-left corner of the current scrolling window."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            },
            {
              "signature": "var zoom: Double",
              "modifier": "var",
              "name": "zoom",
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/zoom",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Zoom factor of the camera starting from 1."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun pan(x: Number, y: Number, smooth: Boolean = true)",
              "name": "pan",
              "parameters": [
                {
                  "modifier": "",
                  "name": "x",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "y",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "smooth",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
              "returnType": "Unit",
              "doc": "Pans the view of the camera to focus the specified coordinates. The coordinates specified represent the center of the view. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane.",
              "isSuspend": false
            },
            {
              "signature": "fun pan(x: Number, y: Number, zoom: Double, smooth: Boolean = true)",
              "name": "pan",
              "parameters": [
                {
                  "modifier": "",
                  "name": "x",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "y",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "zoom",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "smooth",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan",
              "returnType": "Unit",
              "doc": "Pans the view of the camera to focus the specified coordinates and zoom level. The coordinates specified represent the center of the view. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane.",
              "isSuspend": false
            },
            {
              "signature": "fun panBy(xOffset: Number, yOffset: Number, smooth: Boolean = true)",
              "name": "panBy",
              "parameters": [
                {
                  "modifier": "",
                  "name": "xOffset",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "yOffset",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "smooth",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
              "returnType": "Unit",
              "doc": "Pans the view of the camera by the given offsets. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane.",
              "isSuspend": false
            },
            {
              "signature": "fun panBy(xOffset: Number, yOffset: Number, zoom: Double, smooth: Boolean = true)",
              "name": "panBy",
              "parameters": [
                {
                  "modifier": "",
                  "name": "xOffset",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "yOffset",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "zoom",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "smooth",
                  "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy",
              "returnType": "Unit",
              "doc": "Pans the view of the camera by the given offsets and zooms to the specified zoom level. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "interactiveProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "interactiveProperty"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.interactiveProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\interactive-property.html",
        "details": [
          {
            "info": {
              "name": "interactiveProperty",
              "signature": "val interactiveProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [interactive](tools.aqua.bgw.components.layoutviews/CameraPane/interactive) state of the [CameraPane](tools.aqua.bgw.components.layoutviews/CameraPane)."
            }
          }
        ]
      },
      "interactive": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "interactive"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.interactive",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\interactive.html",
        "details": [
          {
            "info": {
              "name": "interactive",
              "signature": "var interactive: Boolean",
              "doc": "Determines if the camera pane is interactive, which means that you can scroll to zoom and drag to pan around."
            },
            "seeAlso": [
              {
                "name": "CameraPane.panMouseButton",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panMouseButton"
              }
            ]
          }
        ]
      },
      "limitBounds": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "limitBounds"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.limitBounds",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\limit-bounds.html",
        "details": [
          {
            "info": {
              "name": "limitBounds",
              "signature": "var limitBounds: Boolean",
              "doc": "Determines if the target layout view should be limited to the bounds of the camera pane. This will also affect the panning of the camera pane with [pan](tools.aqua.bgw.components.layoutviews/CameraPane/pan) and [panBy](tools.aqua.bgw.components.layoutviews/CameraPane/panBy) as well as zooming."
            },
            "since": "1.0"
          }
        ]
      },
      "onZoom": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "onZoom"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.onZoom",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\on-zoom.html",
        "details": [
          {
            "info": {
              "name": "onZoom",
              "signature": "var onZoom: (Number) -> Unit?",
              "doc": "Gets invoked whenever the camera pane is zoomed."
            }
          }
        ]
      },
      "onZoomed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "onZoomed"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.onZoomed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\on-zoomed.html",
        "details": [
          {
            "info": {
              "name": "onZoomed",
              "signature": "var onZoomed: (Number) -> Unit?",
              "doc": "Gets invoked whenever the camera pane is zoomed."
            },
            "since": "1.0"
          }
        ]
      },
      "panBy": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "panBy"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.panBy",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\pan-by.html",
        "details": [
          {
            "info": {
              "name": "panBy",
              "signature": "fun panBy(xOffset: Number, yOffset: Number, zoom: Double, smooth: Boolean = true)",
              "doc": "Pans the view of the camera by the given offsets and zooms to the specified zoom level. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane."
            },
            "seeAlso": [
              {
                "name": "CameraPane.limitBounds",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds"
              },
              {
                "name": "CameraPane.pan",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan"
              },
              {
                "name": "CameraPane.panBy",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy"
              }
            ],
            "since": "1.0",
            "parameters": [
              {
                "name": "xOffset",
                "doc": "The amount to pan the view horizontally."
              },
              {
                "name": "yOffset",
                "doc": "The amount to pan the view vertically."
              },
              {
                "name": "zoom",
                "doc": "The zoom level to zoom to."
              },
              {
                "name": "smooth",
                "doc": "Whether the pan should be smooth (or instant). Default is true."
              }
            ]
          },
          {
            "info": {
              "name": "panBy",
              "signature": "fun panBy(xOffset: Number, yOffset: Number, smooth: Boolean = true)",
              "doc": "Pans the view of the camera by the given offsets. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane."
            },
            "seeAlso": [
              {
                "name": "CameraPane.limitBounds",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds"
              },
              {
                "name": "CameraPane.pan",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan"
              },
              {
                "name": "CameraPane.panBy",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy"
              }
            ],
            "parameters": [
              {
                "name": "xOffset",
                "doc": "The amount to pan the view horizontally."
              },
              {
                "name": "yOffset",
                "doc": "The amount to pan the view vertically."
              },
              {
                "name": "smooth",
                "doc": "Whether the pan should be smooth (or instant). Default is true."
              }
            ]
          }
        ]
      },
      "panMouseButton": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "panMouseButton"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.panMouseButton",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\pan-mouse-button.html",
        "details": [
          {
            "info": {
              "name": "panMouseButton",
              "signature": "var panMouseButton: MouseButtonType",
              "doc": "The mouse button that is used to pan the camera pane."
            },
            "seeAlso": [
              {
                "name": "CameraPane.interactive",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/interactive"
              }
            ],
            "since": "0.9"
          }
        ]
      },
      "pan": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "pan"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.pan",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\pan.html",
        "details": [
          {
            "info": {
              "name": "pan",
              "signature": "fun pan(x: Number, y: Number, zoom: Double, smooth: Boolean = true)",
              "doc": "Pans the view of the camera to focus the specified coordinates and zoom level. The coordinates specified represent the center of the view. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane."
            },
            "seeAlso": [
              {
                "name": "CameraPane.limitBounds",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds"
              },
              {
                "name": "CameraPane.pan",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan"
              },
              {
                "name": "CameraPane.panBy",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy"
              }
            ],
            "since": "1.0",
            "parameters": [
              {
                "name": "x",
                "doc": "The x-coordinate to scroll to."
              },
              {
                "name": "y",
                "doc": "The y-coordinate to scroll to."
              },
              {
                "name": "zoom",
                "doc": "The zoom level to zoom to."
              },
              {
                "name": "smooth",
                "doc": "Whether the pan should be smooth (or instant). Default is true."
              }
            ]
          },
          {
            "info": {
              "name": "pan",
              "signature": "fun pan(x: Number, y: Number, smooth: Boolean = true)",
              "doc": "Pans the view of the camera to focus the specified coordinates. The coordinates specified represent the center of the view. If [limitBounds](tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds) is set to true, the target layout view will be limited to the bounds of the camera pane."
            },
            "seeAlso": [
              {
                "name": "CameraPane.limitBounds",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/limitBounds"
              },
              {
                "name": "CameraPane.pan",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/pan"
              },
              {
                "name": "CameraPane.panBy",
                "link": "tools.aqua.bgw.components.layoutviews/CameraPane/panBy"
              }
            ],
            "parameters": [
              {
                "name": "x",
                "doc": "The x-coordinate to scroll to."
              },
              {
                "name": "y",
                "doc": "The y-coordinate to scroll to."
              },
              {
                "name": "smooth",
                "doc": "Whether the pan should be smooth (or instant). Default is true."
              }
            ]
          }
        ]
      },
      "scroll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "scroll"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.scroll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\scroll.html",
        "details": [
          {
            "info": {
              "name": "scroll",
              "signature": "val scroll: Coordinate",
              "doc": "Upper-left corner of the current scrolling window."
            },
            "deprecated": {
              "description": "May result in wrong values.",
              "replaceWith": ""
            }
          }
        ]
      },
      "zoomProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "zoomProperty"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.zoomProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\zoom-property.html",
        "details": [
          {
            "info": {
              "name": "zoomProperty",
              "signature": "val zoomProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the zoom state of the [CameraPane](tools.aqua.bgw.components.layoutviews/CameraPane)."
            }
          }
        ]
      },
      "zoom": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "CameraPane",
          "zoom"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.CameraPane.zoom",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-camera-pane\\zoom.html",
        "details": [
          {
            "info": {
              "name": "zoom",
              "signature": "var zoom: Double",
              "doc": "Zoom factor of the camera starting from 1."
            }
          }
        ]
      }
    },
    "GridPane": {
      "Companion": {
        "COLUMN_WIDTH_AUTO": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.layoutviews",
            "GridPane",
            "Companion",
            "COLUMN_WIDTH_AUTO"
          ],
          "package": "tools.aqua.bgw.components.layoutviews.GridPane.Companion.COLUMN_WIDTH_AUTO",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\-companion\\-c-o-l-u-m-n_-w-i-d-t-h_-a-u-t-o.html",
          "details": [
            {
              "info": {
                "name": "COLUMN_WIDTH_AUTO",
                "signature": "const val COLUMN_WIDTH_AUTO: Double",
                "doc": "Constant for automatic column width."
              }
            }
          ]
        },
        "ROW_HEIGHT_AUTO": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.components.layoutviews",
            "GridPane",
            "Companion",
            "ROW_HEIGHT_AUTO"
          ],
          "package": "tools.aqua.bgw.components.layoutviews.GridPane.Companion.ROW_HEIGHT_AUTO",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\-companion\\-r-o-w_-h-e-i-g-h-t_-a-u-t-o.html",
          "details": [
            {
              "info": {
                "name": "ROW_HEIGHT_AUTO",
                "signature": "const val ROW_HEIGHT_AUTO: Double",
                "doc": "Constant for automatic row height."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.layoutviews",
            "GridPane",
            "Companion"
          ],
          "package": "tools.aqua.bgw.components.layoutviews.GridPane.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "const val COLUMN_WIDTH_AUTO: Double",
                "modifier": "val",
                "name": "COLUMN_WIDTH_AUTO",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/Companion/COLUMN_WIDTH_AUTO",
                "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                "defaultValue": "",
                "doc": "Constant for automatic column width."
              },
              {
                "signature": "const val ROW_HEIGHT_AUTO: Double",
                "modifier": "val",
                "name": "ROW_HEIGHT_AUTO",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/Companion/ROW_HEIGHT_AUTO",
                "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                "defaultValue": "",
                "doc": "Constant for automatic row height."
              }
            ]
          }
        }
      },
      "GridPane": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "GridPane"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.GridPane",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\-grid-pane.html",
        "details": [
          {
            "info": {
              "name": "GridPane",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, columns: Int, rows: Int, spacing: Number = DEFAULT_GRID_SPACING, layoutFromCenter: Boolean = true, visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [GridPane](tools.aqua.bgw.components.layoutviews/GridPane) with given rows and columns."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: 0."
              },
              {
                "name": "columns",
                "doc": "Initial column count."
              },
              {
                "name": "rows",
                "doc": "Initial row count."
              },
              {
                "name": "spacing",
                "doc": "Spacing between rows and columns. Default: [DEFAULT_GRID_SPACING](tools.aqua.bgw.core/DEFAULT_GRID_SPACING)."
              },
              {
                "name": "layoutFromCenter",
                "doc": "Whether the [GridPane](tools.aqua.bgw.components.layoutviews/GridPane) should anchor in the center (true) or top-Left (false). Default: true."
              },
              {
                "name": "visual",
                "doc": "Initial visual for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
              }
            ]
          }
        ]
      },
      "addColumns": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "addColumns"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.addColumns",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\add-columns.html",
        "details": [
          {
            "info": {
              "name": "addColumns",
              "signature": "fun addColumns(columnIndex: Int, count: Int = 1)",
              "doc": "Adds the desired amount of columns between column columnIndex - 1 and columnIndex. New columns get null-initialized."
            },
            "seeAlso": [
              {
                "name": "GridPane.addRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows"
              },
              {
                "name": "GridPane.removeColumn",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeColumn"
              }
            ],
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Index on which the new column should be added"
              },
              {
                "name": "count",
                "doc": "Column count to be added. Default: 1"
              }
            ]
          }
        ]
      },
      "addRows": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "addRows"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.addRows",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\add-rows.html",
        "details": [
          {
            "info": {
              "name": "addRows",
              "signature": "fun addRows(rowIndex: Int, count: Int = 1)",
              "doc": "Adds the desired amount of rows between row rowIndex and rowIndex + 1. New rows get null-initialized."
            },
            "seeAlso": [
              {
                "name": "GridPane.addColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns"
              },
              {
                "name": "GridPane.removeRow",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow"
              }
            ],
            "parameters": [
              {
                "name": "rowIndex",
                "doc": "Index after which the new row should be added"
              },
              {
                "name": "count",
                "doc": "Count of rows to be added. Default: 1"
              }
            ]
          }
        ]
      },
      "columns": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "columns"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.columns",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\columns.html",
        "details": [
          {
            "info": {
              "name": "columns",
              "signature": "val columns: Int",
              "doc": "Current column count."
            }
          }
        ]
      },
      "getCellCenterMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "getCellCenterMode"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.getCellCenterMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\get-cell-center-mode.html",
        "details": [
          {
            "info": {
              "name": "getCellCenterMode",
              "signature": "fun getCellCenterMode(columnIndex: Int, rowIndex: Int): Alignment",
              "doc": "Returns centering mode as an [Alignment](tools.aqua.bgw.core/Alignment) of the specified cell."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Column index in grid."
              },
              {
                "name": "rowIndex",
                "doc": "Row index in grid."
              }
            ]
          }
        ]
      },
      "getColumnWidth": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "getColumnWidth"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.getColumnWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\get-column-width.html",
        "details": [
          {
            "info": {
              "name": "getColumnWidth",
              "signature": "fun getColumnWidth(columnIndex: Int): Double",
              "doc": "Returns the set column width for the given column."
            },
            "seeAlso": [
              {
                "name": "GridPane.setColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth"
              },
              {
                "name": "GridPane.setColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths"
              },
              {
                "name": "GridPane.setAutoColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Target column."
              }
            ]
          }
        ]
      },
      "getRowHeight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "getRowHeight"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.getRowHeight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\get-row-height.html",
        "details": [
          {
            "info": {
              "name": "getRowHeight",
              "signature": "fun getRowHeight(rowIndex: Int): Double",
              "doc": "Returns the set row height for the given row."
            },
            "seeAlso": [
              {
                "name": "GridPane.setRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight"
              },
              {
                "name": "GridPane.setRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights"
              },
              {
                "name": "GridPane.setAutoRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeight"
              },
              {
                "name": "GridPane.setAutoRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeights"
              }
            ],
            "parameters": [
              {
                "name": "rowIndex",
                "doc": "Target row."
              }
            ]
          }
        ]
      },
      "get": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "get"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.get",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\get.html",
        "details": [
          {
            "info": {
              "name": "get",
              "signature": "operator fun get(columnIndex: Int, rowIndex: Int): T?",
              "doc": "Returns [ComponentView](tools.aqua.bgw.components/ComponentView) in specified cell. Returns null if there was no component."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Column index in grid."
              },
              {
                "name": "rowIndex",
                "doc": "Row index in grid."
              }
            ]
          }
        ]
      },
      "grow": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "grow"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.grow",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\grow.html",
        "details": [
          {
            "info": {
              "name": "grow",
              "signature": "fun grow(left: Int = 0, right: Int = 0, top: Int = 0, bottom: Int = 0): Boolean",
              "doc": "Grows grid by specified dimensions, filling new cells with null values.\n\nNew rows and columns get automatic resizing behaviour, specified as [COLUMN_WIDTH_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/COLUMN_WIDTH_AUTO) and [ROW_HEIGHT_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/ROW_HEIGHT_AUTO). Therefore, new empty rows and columns get rendered with height and width 0.0 e.g. invisible if not specified otherwise."
            },
            "seeAlso": [
              {
                "name": "GridPane.trim",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/trim"
              },
              {
                "name": "GridPane.removeEmptyColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyColumns"
              },
              {
                "name": "GridPane.removeEmptyRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyRows"
              },
              {
                "name": "GridPane.addColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns"
              },
              {
                "name": "GridPane.removeColumn",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeColumn"
              },
              {
                "name": "GridPane.addRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows"
              },
              {
                "name": "GridPane.removeRow",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow"
              }
            ],
            "parameters": [
              {
                "name": "left",
                "doc": "Column count to be added to the left."
              },
              {
                "name": "right",
                "doc": "Column count to be added to the right."
              },
              {
                "name": "top",
                "doc": "Row count to be added on the top."
              },
              {
                "name": "bottom",
                "doc": "Row count to be added on the bottom."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If any value passed was negative."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\index.html",
        "details": {
          "info": {
            "name": "GridPane",
            "signature": "open class GridPane<T : ComponentView>(posX: Number = 0, posY: Number = 0, columns: Int, rows: Int, spacing: Number = DEFAULT_GRID_SPACING, layoutFromCenter: Boolean = true, visual: Visual = Visual.EMPTY) : LayoutView<T> , Iterable<GridIteratorElement<T>>",
            "doc": "Defines a [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) that orders components in a grid structure.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: 0."
            },
            {
              "name": "columns",
              "doc": "Initial column count."
            },
            {
              "name": "rows",
              "doc": "Initial row count."
            },
            {
              "name": "spacing",
              "doc": "Spacing between rows and columns. Default: [DEFAULT_GRID_SPACING](tools.aqua.bgw.core/DEFAULT_GRID_SPACING)."
            },
            {
              "name": "layoutFromCenter",
              "doc": "Whether the [GridPane](tools.aqua.bgw.components.layoutviews/GridPane) should anchor in the center (true) or top-Left (false). Default: true."
            },
            {
              "name": "visual",
              "doc": "Initial visual for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, columns: Int, rows: Int, spacing: Number = DEFAULT_GRID_SPACING, layoutFromCenter: Boolean = true, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "columns",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": "Initial column count."
                },
                {
                  "modifier": "",
                  "name": "rows",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": "Initial row count."
                },
                {
                  "modifier": "",
                  "name": "spacing",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_GRID_SPACING",
                  "doc": "Spacing between rows and columns. Default: [DEFAULT_GRID_SPACING](tools.aqua.bgw.core/DEFAULT_GRID_SPACING)."
                },
                {
                  "modifier": "",
                  "name": "layoutFromCenter",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "true",
                  "doc": "Whether the [GridPane](tools.aqua.bgw.components.layoutviews/GridPane) should anchor in the center (true) or top-Left (false). Default: true."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Initial visual for this [GridPane](tools.aqua.bgw.components.layoutviews/GridPane). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
                }
              ],
              "doc": "Creates a [GridPane](tools.aqua.bgw.components.layoutviews/GridPane) with given rows and columns.",
              "isSecondaryConstructor": true
            }
          ],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/Companion"
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "val columns: Int",
              "modifier": "val",
              "name": "columns",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/columns",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Current column count."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "val rows: Int",
              "modifier": "val",
              "name": "rows",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/rows",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Current row count."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var spacing: Double",
              "modifier": "var",
              "name": "spacing",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/spacing",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Current spacing."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addColumns(columnIndex: Int, count: Int = 1)",
              "name": "addColumns",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "count",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "1",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns",
              "returnType": "Unit",
              "doc": "Adds the desired amount of columns between column columnIndex - 1 and columnIndex. New columns get null-initialized.",
              "isSuspend": false
            },
            {
              "signature": "fun addRows(rowIndex: Int, count: Int = 1)",
              "name": "addRows",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "count",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "1",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows",
              "returnType": "Unit",
              "doc": "Adds the desired amount of rows between row rowIndex and rowIndex + 1. New rows get null-initialized.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(columnIndex: Int, rowIndex: Int): T?",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/get",
              "returnType": "[T](tools.aqua.bgw.components.layoutviews/GridPane)?",
              "doc": "Returns [ComponentView](tools.aqua.bgw.components/ComponentView) in specified cell. Returns null if there was no component.",
              "isSuspend": false
            },
            {
              "signature": "fun getCellCenterMode(columnIndex: Int, rowIndex: Int): Alignment",
              "name": "getCellCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/getCellCenterMode",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/getCellCenterMode",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/getCellCenterMode",
              "returnType": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "doc": "Returns centering mode as an [Alignment](tools.aqua.bgw.core/Alignment) of the specified cell.",
              "isSuspend": false
            },
            {
              "signature": "fun getColumnWidth(columnIndex: Int): Double",
              "name": "getColumnWidth",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/getColumnWidth",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/getColumnWidth",
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "doc": "Returns the set column width for the given column.",
              "isSuspend": false
            },
            {
              "signature": "fun getRowHeight(rowIndex: Int): Double",
              "name": "getRowHeight",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/getRowHeight",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/getRowHeight",
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "doc": "Returns the set row height for the given row.",
              "isSuspend": false
            },
            {
              "signature": "fun grow(left: Int = 0, right: Int = 0, top: Int = 0, bottom: Int = 0): Boolean",
              "name": "grow",
              "parameters": [
                {
                  "modifier": "",
                  "name": "left",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/grow",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "right",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/grow",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "top",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/grow",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "bottom",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/grow",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/grow",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Grows grid by specified dimensions, filling new cells with null values.",
              "isSuspend": false
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeColumn(columnIndex: Int)",
              "name": "removeColumn",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeColumn",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeColumn",
              "returnType": "Unit",
              "doc": "Removes the desired column in the grid. Removes all, views in the column. If there is no column left in the grid, it gets trimmed to size 0x0.",
              "isSuspend": false
            },
            {
              "signature": "fun removeEmptyColumns()",
              "name": "removeEmptyColumns",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyColumns",
              "returnType": "Unit",
              "doc": "Removes all empty columns e.g. all rows that have no views in their cells."
            },
            {
              "signature": "fun removeEmptyRows()",
              "name": "removeEmptyRows",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyRows",
              "returnType": "Unit",
              "doc": "Removes all empty rows e.g. all rows that have no views in their cells."
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun removeRow(rowIndex: Int)",
              "name": "removeRow",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow",
              "returnType": "Unit",
              "doc": "Removes the desired row in the grid. Removes all, views in the row.",
              "isSuspend": false
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(columnIndex: Int, rowIndex: Int, component: T?)",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "component",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/set",
                  "type": "[T](tools.aqua.bgw.components.layoutviews/GridPane)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/set",
              "returnType": "Unit",
              "doc": "Sets content of desired grid cell. Overrides existing component in this cell. Pass null to remove a component.",
              "isSuspend": false
            },
            {
              "signature": "fun setAutoColumnWidth(columnIndex: Int)",
              "name": "setAutoColumnWidth",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth",
              "returnType": "Unit",
              "doc": "Restores automatic resizing behavior for desired column.",
              "isSuspend": false
            },
            {
              "signature": "fun setAutoColumnWidths()",
              "name": "setAutoColumnWidths",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths",
              "returnType": "Unit",
              "doc": "Restores automatic resizing behavior for all columns."
            },
            {
              "signature": "fun setAutoRowHeight(rowIndex: Int)",
              "name": "setAutoRowHeight",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeight",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeight",
              "returnType": "Unit",
              "doc": "Restores automatic resizing behavior for desired row.",
              "isSuspend": false
            },
            {
              "signature": "fun setAutoRowHeights()",
              "name": "setAutoRowHeights",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeights",
              "returnType": "Unit",
              "doc": "Restores automatic resizing behavior for all rows."
            },
            {
              "signature": "fun setCellCenterMode(columnIndex: Int, rowIndex: Int, value: Alignment)",
              "name": "setCellCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setCellCenterMode",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setCellCenterMode",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setCellCenterMode",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setCellCenterMode",
              "returnType": "Unit",
              "doc": "Sets centering mode of desired grid cell with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing mode in this cell.",
              "isSuspend": false
            },
            {
              "signature": "fun setCenterMode(value: Alignment)",
              "name": "setCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setCenterMode",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setCenterMode",
              "returnType": "Unit",
              "doc": "Sets centering mode of all cells in the grid with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing modes of all cells.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnCenterMode(columnIndex: Int, value: Alignment)",
              "name": "setColumnCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnCenterMode",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnCenterMode",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnCenterMode",
              "returnType": "Unit",
              "doc": "Sets centering mode of desired column in grid with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing mode in the whole column.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnWidth(columnIndex: Int, columnWidth: Number)",
              "name": "setColumnWidth",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "columnWidth",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth",
              "returnType": "Unit",
              "doc": "Manually set column width of one column. Overrides automatic resizing based on content from this column.",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnWidths(columnWidths: DoubleArray)",
              "name": "setColumnWidths",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnWidths",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths",
                  "type": "[DoubleArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double-array/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths",
              "returnType": "Unit",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun setColumnWidths(columnWidth: Number)",
              "name": "setColumnWidths",
              "parameters": [
                {
                  "modifier": "",
                  "name": "columnWidth",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths",
              "returnType": "Unit",
              "doc": "Manually set column width of all columns. Overrides automatic resizing based on content from this column.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowCenterMode(rowIndex: Int, value: Alignment)",
              "name": "setRowCenterMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowCenterMode",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowCenterMode",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowCenterMode",
              "returnType": "Unit",
              "doc": "Sets centering mode of desired row in grid with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing mode in the whole row.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowHeight(rowIndex: Int, rowHeight: Number)",
              "name": "setRowHeight",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowIndex",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "rowHeight",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight",
              "returnType": "Unit",
              "doc": "Manually set row height of one row. Overrides automatic resizing based on content from this row.",
              "isSuspend": false
            },
            {
              "signature": "fun setRowHeights(rowHeights: DoubleArray)",
              "name": "setRowHeights",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowHeights",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights",
                  "type": "[DoubleArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double-array/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights",
              "returnType": "Unit",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun setRowHeights(rowHeight: Number)",
              "name": "setRowHeights",
              "parameters": [
                {
                  "modifier": "",
                  "name": "rowHeight",
                  "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights",
              "returnType": "Unit",
              "doc": "Manually set row height of all rows. Overrides automatic resizing based on content from this row.",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun trim(): Boolean",
              "name": "trim",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane/trim",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes all empty outer rows and columns e.g. all rows and columns counted from left, right, top and bottom that have no views in their cells."
            }
          ]
        }
      },
      "iterator": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "iterator"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.iterator",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\iterator.html",
        "details": [
          {
            "info": {
              "name": "iterator",
              "signature": "open operator override fun iterator(): Iterator<GridIteratorElement<T>>",
              "doc": "Returns an [Iterator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-iterator/index.html) over the grid components.\n\nIteration is columns-first which means that the iterator starts at cell 0,0 and then proceeds iterating through the first row from left to right. When reaching the end of a row it proceeds to the next one resetting the column pointer to 0.\n\n[Iterator.hasNext](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-iterator/has-next.html)://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-iterator/index.html).hasNext Returns true if at least one cell is left to iterate.\n\n[Iterator.next](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-iterator/next.html)tps://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-iterator/index.html).next Returns a data object [GridIteratorElement](tools.aqua.bgw.util/GridIteratorElement) that contains the current row and column as well as the component itself. Refer to the [GridIteratorElement](tools.aqua.bgw.util/GridIteratorElement) documentation for further information."
            }
          }
        ]
      },
      "removeColumn": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "removeColumn"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.removeColumn",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\remove-column.html",
        "details": [
          {
            "info": {
              "name": "removeColumn",
              "signature": "fun removeColumn(columnIndex: Int)",
              "doc": "Removes the desired column in the grid. Removes all, views in the column. If there is no column left in the grid, it gets trimmed to size 0x0."
            },
            "seeAlso": [
              {
                "name": "GridPane.addColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns"
              },
              {
                "name": "GridPane.removeEmptyColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyColumns"
              }
            ],
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Index of the column to be deleted."
              }
            ]
          }
        ]
      },
      "removeEmptyColumns": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "removeEmptyColumns"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.removeEmptyColumns",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\remove-empty-columns.html",
        "details": [
          {
            "info": {
              "name": "removeEmptyColumns",
              "signature": "fun removeEmptyColumns()",
              "doc": "Removes all empty [columns](tools.aqua.bgw.components.layoutviews/GridPane/columns) e.g. all rows that have no views in their cells.\n\nThat means after calling every column has at least one component in its cells.\n\nAttribute [columns](tools.aqua.bgw.components.layoutviews/GridPane/columns) get updated according to new dimension.\n\nIf the grid was empty the grid gets trimmed to size 0x0."
            },
            "seeAlso": [
              {
                "name": "GridPane.addRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows"
              },
              {
                "name": "GridPane.removeRow",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow"
              }
            ]
          }
        ]
      },
      "removeEmptyRows": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "removeEmptyRows"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.removeEmptyRows",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\remove-empty-rows.html",
        "details": [
          {
            "info": {
              "name": "removeEmptyRows",
              "signature": "fun removeEmptyRows()",
              "doc": "Removes all empty [rows](tools.aqua.bgw.components.layoutviews/GridPane/rows) e.g. all [rows](tools.aqua.bgw.components.layoutviews/GridPane/rows) that have no views in their cells.\n\nThat means after calling every row has at least one component in its cells.\n\nAttribute [rows](tools.aqua.bgw.components.layoutviews/GridPane/rows) gets updated according to new dimension.\n\nIf the grid was empty the grid gets trimmed to size 0x0."
            },
            "seeAlso": [
              {
                "name": "GridPane.addRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows"
              },
              {
                "name": "GridPane.removeRow",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow"
              }
            ]
          }
        ]
      },
      "removeRow": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "removeRow"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.removeRow",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\remove-row.html",
        "details": [
          {
            "info": {
              "name": "removeRow",
              "signature": "fun removeRow(rowIndex: Int)",
              "doc": "Removes the desired row in the grid. Removes all, views in the row.\n\nIf there is no row left in the grid, it gets trimmed to size 0x0."
            },
            "seeAlso": [
              {
                "name": "GridPane.addRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows"
              },
              {
                "name": "GridPane.removeEmptyRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyRows"
              }
            ],
            "parameters": [
              {
                "name": "rowIndex",
                "doc": "Index of the row te be deleted."
              }
            ]
          }
        ]
      },
      "rows": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "rows"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.rows",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\rows.html",
        "details": [
          {
            "info": {
              "name": "rows",
              "signature": "val rows: Int",
              "doc": "Current row count."
            }
          }
        ]
      },
      "setAutoColumnWidth": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setAutoColumnWidth"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setAutoColumnWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-auto-column-width.html",
        "details": [
          {
            "info": {
              "name": "setAutoColumnWidth",
              "signature": "fun setAutoColumnWidth(columnIndex: Int)",
              "doc": "Restores automatic resizing behavior for desired column."
            },
            "seeAlso": [
              {
                "name": "GridPane.setColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth"
              },
              {
                "name": "GridPane.setColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Target column."
              }
            ]
          }
        ]
      },
      "setAutoColumnWidths": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setAutoColumnWidths"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setAutoColumnWidths",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-auto-column-widths.html",
        "details": [
          {
            "info": {
              "name": "setAutoColumnWidths",
              "signature": "fun setAutoColumnWidths()",
              "doc": "Restores automatic resizing behavior for all columns."
            },
            "seeAlso": [
              {
                "name": "GridPane.setColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth"
              },
              {
                "name": "GridPane.setColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths"
              },
              {
                "name": "GridPane.setAutoColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth"
              }
            ]
          }
        ]
      },
      "setAutoRowHeight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setAutoRowHeight"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setAutoRowHeight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-auto-row-height.html",
        "details": [
          {
            "info": {
              "name": "setAutoRowHeight",
              "signature": "fun setAutoRowHeight(rowIndex: Int)",
              "doc": "Restores automatic resizing behavior for desired row."
            },
            "seeAlso": [
              {
                "name": "GridPane.setRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight"
              },
              {
                "name": "GridPane.setRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "rowIndex",
                "doc": "Target row."
              }
            ]
          }
        ]
      },
      "setAutoRowHeights": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setAutoRowHeights"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setAutoRowHeights",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-auto-row-heights.html",
        "details": [
          {
            "info": {
              "name": "setAutoRowHeights",
              "signature": "fun setAutoRowHeights()",
              "doc": "Restores automatic resizing behavior for all rows."
            },
            "seeAlso": [
              {
                "name": "GridPane.setRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight"
              },
              {
                "name": "GridPane.setRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights"
              },
              {
                "name": "GridPane.setAutoRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeight"
              }
            ]
          }
        ]
      },
      "setCellCenterMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setCellCenterMode"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setCellCenterMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-cell-center-mode.html",
        "details": [
          {
            "info": {
              "name": "setCellCenterMode",
              "signature": "fun setCellCenterMode(columnIndex: Int, rowIndex: Int, value: Alignment)",
              "doc": "Sets centering mode of desired grid cell with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing mode in this cell."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Column index in grid."
              },
              {
                "name": "rowIndex",
                "doc": "Row index in grid."
              },
              {
                "name": "value",
                "doc": "New centering mode to be set for the specified cell."
              }
            ]
          }
        ]
      },
      "setCenterMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setCenterMode"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setCenterMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-center-mode.html",
        "details": [
          {
            "info": {
              "name": "setCenterMode",
              "signature": "fun setCenterMode(value: Alignment)",
              "doc": "Sets centering mode of all cells in the grid with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing modes of all cells."
            },
            "parameters": [
              {
                "name": "value",
                "doc": "New centering mode to be set for all cells."
              }
            ]
          }
        ]
      },
      "setColumnCenterMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setColumnCenterMode"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setColumnCenterMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-column-center-mode.html",
        "details": [
          {
            "info": {
              "name": "setColumnCenterMode",
              "signature": "fun setColumnCenterMode(columnIndex: Int, value: Alignment)",
              "doc": "Sets centering mode of desired column in grid with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing mode in the whole column."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Column index in grid."
              },
              {
                "name": "value",
                "doc": "New centering mode to be set for the whole column."
              }
            ]
          }
        ]
      },
      "setColumnWidth": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setColumnWidth"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setColumnWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-column-width.html",
        "details": [
          {
            "info": {
              "name": "setColumnWidth",
              "signature": "fun setColumnWidth(columnIndex: Int, columnWidth: Number)",
              "doc": "Manually set column width of one column. Overrides automatic resizing based on content from this column."
            },
            "seeAlso": [
              {
                "name": "GridPane.setColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidths"
              },
              {
                "name": "GridPane.setAutoColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Target column."
              },
              {
                "name": "columnWidth",
                "doc": "New column width. Use [COLUMN_WIDTH_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/COLUMN_WIDTH_AUTO) to restore automatic resizing behaviour."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If value was negative."
              }
            ]
          }
        ]
      },
      "setColumnWidths": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setColumnWidths"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setColumnWidths",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-column-widths.html",
        "details": [
          {
            "info": {
              "name": "setColumnWidths",
              "signature": "fun setColumnWidths(columnWidth: Number)",
              "doc": "Manually set column width of all columns. Overrides automatic resizing based on content from this column."
            },
            "seeAlso": [
              {
                "name": "GridPane.setColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "columnWidth",
                "doc": "New column width for all columns. Use [COLUMN_WIDTH_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/COLUMN_WIDTH_AUTO) to restore automatic resizing behaviour."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If value is negative."
              }
            ]
          },
          {
            "info": {
              "name": "setColumnWidths",
              "signature": "fun setColumnWidths(columnWidths: DoubleArray)",
              "doc": "Manually set column width of all columns. Overrides automatic resizing based on content from this column."
            },
            "seeAlso": [
              {
                "name": "GridPane.setColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "columnWidths",
                "doc": "New column widths. Array index 0 get applied for the first column etc. Use [COLUMN_WIDTH_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/COLUMN_WIDTH_AUTO) to restore automatic resizing behaviour."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If Array size does not match column count or values were negative."
              }
            ]
          }
        ]
      },
      "setRowCenterMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setRowCenterMode"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setRowCenterMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-row-center-mode.html",
        "details": [
          {
            "info": {
              "name": "setRowCenterMode",
              "signature": "fun setRowCenterMode(rowIndex: Int, value: Alignment)",
              "doc": "Sets centering mode of desired row in grid with given [Alignment](tools.aqua.bgw.core/Alignment). Overrides existing mode in the whole row."
            },
            "parameters": [
              {
                "name": "rowIndex",
                "doc": "Row index in grid."
              },
              {
                "name": "value",
                "doc": "New centering mode to be set for the whole row."
              }
            ]
          }
        ]
      },
      "setRowHeight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setRowHeight"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setRowHeight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-row-height.html",
        "details": [
          {
            "info": {
              "name": "setRowHeight",
              "signature": "fun setRowHeight(rowIndex: Int, rowHeight: Number)",
              "doc": "Manually set row height of one row. Overrides automatic resizing based on content from this row."
            },
            "seeAlso": [
              {
                "name": "GridPane.setRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeights"
              },
              {
                "name": "GridPane.setAutoColumnWidth",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidth"
              },
              {
                "name": "GridPane.setAutoColumnWidths",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoColumnWidths"
              }
            ],
            "parameters": [
              {
                "name": "rowIndex",
                "doc": "Target row."
              },
              {
                "name": "rowHeight",
                "doc": "New row height. Use [ROW_HEIGHT_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/ROW_HEIGHT_AUTO) to restore automatic resizing behaviour."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If value was negative."
              }
            ]
          }
        ]
      },
      "setRowHeights": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "setRowHeights"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.setRowHeights",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set-row-heights.html",
        "details": [
          {
            "info": {
              "name": "setRowHeights",
              "signature": "fun setRowHeights(rowHeight: Number)",
              "doc": "Manually set row height of all rows. Overrides automatic resizing based on content from this row."
            },
            "seeAlso": [
              {
                "name": "GridPane.setRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight"
              },
              {
                "name": "GridPane.setAutoRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeight"
              },
              {
                "name": "GridPane.setAutoRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeights"
              }
            ],
            "parameters": [
              {
                "name": "rowHeight",
                "doc": "New row height. Use [ROW_HEIGHT_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/ROW_HEIGHT_AUTO) to restore automatic resizing behaviour."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If Array size does not match row count or values were negative."
              }
            ]
          },
          {
            "info": {
              "name": "setRowHeights",
              "signature": "fun setRowHeights(rowHeights: DoubleArray)",
              "doc": "Manually set row height of all rows. Overrides automatic resizing based on content from this row."
            },
            "seeAlso": [
              {
                "name": "GridPane.setRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setRowHeight"
              },
              {
                "name": "GridPane.setAutoRowHeight",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeight"
              },
              {
                "name": "GridPane.setAutoRowHeights",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/setAutoRowHeights"
              }
            ],
            "parameters": [
              {
                "name": "rowHeights",
                "doc": "New row heights. Array index 0 get applied for the first row etc. Use [ROW_HEIGHT_AUTO](tools.aqua.bgw.components.layoutviews/GridPane/Companion/ROW_HEIGHT_AUTO) to restore automatic resizing behaviour."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If Array size does not match row count or values were negative."
              }
            ]
          }
        ]
      },
      "set": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "set"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.set",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\set.html",
        "details": [
          {
            "info": {
              "name": "set",
              "signature": "operator fun set(columnIndex: Int, rowIndex: Int, component: T?)",
              "doc": "Sets content of desired grid cell. Overrides existing component in this cell. Pass null to remove a component."
            },
            "parameters": [
              {
                "name": "columnIndex",
                "doc": "Column index in grid."
              },
              {
                "name": "rowIndex",
                "doc": "Row index in grid."
              },
              {
                "name": "component",
                "doc": "[ComponentView](tools.aqua.bgw.components/ComponentView) to be added to the specified cell."
              }
            ]
          }
        ]
      },
      "spacing": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "spacing"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.spacing",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\spacing.html",
        "details": [
          {
            "info": {
              "name": "spacing",
              "signature": "var spacing: Double",
              "doc": "Current spacing."
            }
          }
        ]
      },
      "trim": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "GridPane",
          "trim"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.GridPane.trim",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-grid-pane\\trim.html",
        "details": [
          {
            "info": {
              "name": "trim",
              "signature": "fun trim(): Boolean",
              "doc": "Removes all empty outer [rows](tools.aqua.bgw.components.layoutviews/GridPane/rows) and [columns](tools.aqua.bgw.components.layoutviews/GridPane/columns) e.g. all [rows](tools.aqua.bgw.components.layoutviews/GridPane/rows) and [columns](tools.aqua.bgw.components.layoutviews/GridPane/columns) counted from left, right, top and bottom that have no views in their cells.\n\nThat means after calling the first and last row as well as the first and last column have at least one component in their cells.\n\nAttributes [rows](tools.aqua.bgw.components.layoutviews/GridPane/rows) and [columns](tools.aqua.bgw.components.layoutviews/GridPane/columns) get updated according to new dimensions.\n\nIf the grid was empty the grid gets trimmed to size 0x0."
            },
            "seeAlso": [
              {
                "name": "GridPane.grow",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/grow"
              },
              {
                "name": "GridPane.removeEmptyColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyColumns"
              },
              {
                "name": "GridPane.removeEmptyRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeEmptyRows"
              },
              {
                "name": "GridPane.addColumns",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addColumns"
              },
              {
                "name": "GridPane.removeColumn",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeColumn"
              },
              {
                "name": "GridPane.addRows",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/addRows"
              },
              {
                "name": "GridPane.removeRow",
                "link": "tools.aqua.bgw.components.layoutviews/GridPane/removeRow"
              }
            ]
          }
        ]
      }
    },
    "LayoutView": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "LayoutView"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.LayoutView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-layout-view\\index.html",
        "details": {
          "info": {
            "name": "LayoutView",
            "signature": "sealed class LayoutView<T : ComponentView> : StaticComponentView<T>",
            "doc": "Baseclass for all layout components.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "GridPane",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane"
            },
            {
              "name": "Pane",
              "link": "tools.aqua.bgw.components.layoutviews/Pane"
            }
          ],
          "seeAlso": [
            {
              "name": "Pane",
              "link": "tools.aqua.bgw.components.layoutviews/Pane"
            },
            {
              "name": "GridPane",
              "link": "tools.aqua.bgw.components.layoutviews/GridPane"
            }
          ],
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView)."
            },
            {
              "name": "width",
              "doc": "Width for this [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView)."
            },
            {
              "name": "height",
              "doc": "Height for this [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView)."
            },
            {
              "name": "visual",
              "doc": "Initial visual for this [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "Pane": {
      "Pane": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "Pane"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.Pane",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\-pane.html",
        "details": [
          {
            "info": {
              "name": "Pane",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
              },
              {
                "name": "height",
                "doc": "Height for this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
              },
              {
                "name": "visual",
                "doc": "Visual for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
              }
            ]
          }
        ]
      },
      "addAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "addAll"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.addAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\add-all.html",
        "details": [
          {
            "info": {
              "name": "addAll",
              "signature": "fun addAll(vararg components: T)",
              "doc": "Adds all ComponentViews passed as varargs to this [Pane](tools.aqua.bgw.components.layoutviews/Pane).\n\nWhenever a [ComponentView](tools.aqua.bgw.components/ComponentView) is encountered, that is already contained, an [IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-illegal-argument-exception/index.html) is thrown and no further [ComponentView](tools.aqua.bgw.components/ComponentView) is added."
            },
            "parameters": [
              {
                "name": "components",
                "doc": "Vararg ComponentViews to add."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If an [ComponentView](tools.aqua.bgw.components/ComponentView) is already contained."
              }
            ]
          },
          {
            "info": {
              "name": "addAll",
              "signature": "@Synchronizedfun addAll(collection: Collection<T>)",
              "doc": "Adds all ComponentViews contained in [collection](tools.aqua.bgw.components.layoutviews/Pane/addAll) to this [Pane](tools.aqua.bgw.components.layoutviews/Pane).\n\nWhenever an [ComponentView](tools.aqua.bgw.components/ComponentView) is encountered, that is already contained, an [IllegalArgumentException](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-illegal-argument-exception/index.html) is thrown and no further [ComponentView](tools.aqua.bgw.components/ComponentView) is added."
            },
            "parameters": [
              {
                "name": "collection",
                "doc": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html) containing the ComponentViews to add."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If an [ComponentView](tools.aqua.bgw.components/ComponentView) is already contained."
              }
            ]
          }
        ]
      },
      "addComponentsListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "addComponentsListener"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.addComponentsListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\add-components-listener.html",
        "details": [
          {
            "info": {
              "name": "addComponentsListener",
              "signature": "fun addComponentsListener(listener: ValueObserver<List<T>>)",
              "doc": "Adds the [ValueObserver](tools.aqua.bgw.observable/ValueObserver) to the observableComponents list."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "The [ValueObserver](tools.aqua.bgw.observable/ValueObserver) to add."
              }
            ]
          }
        ]
      },
      "add": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "add"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.add",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\add.html",
        "details": [
          {
            "info": {
              "name": "add",
              "signature": "@Synchronizedfun add(component: T, index: Int = observableComponents.size)",
              "doc": "Adds a [ComponentView](tools.aqua.bgw.components/ComponentView) to this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            "parameters": [
              {
                "name": "component",
                "doc": "Component to add."
              },
              {
                "name": "index",
                "doc": "Index at which [component](tools.aqua.bgw.components.layoutviews/Pane/add) will be added (Z-Height)."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If [index](tools.aqua.bgw.components.layoutviews/Pane/add) is out of bounds for [components](tools.aqua.bgw.components.layoutviews/Pane/components)."
              }
            ]
          }
        ]
      },
      "clearComponentsListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "clearComponentsListener"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.clearComponentsListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\clear-components-listener.html",
        "details": [
          {
            "info": {
              "name": "clearComponentsListener",
              "signature": "fun clearComponentsListener()",
              "doc": "Removes all listeners from the observableComponents list."
            }
          }
        ]
      },
      "clear": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "clear"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.clear",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\clear.html",
        "details": [
          {
            "info": {
              "name": "clear",
              "signature": "@Synchronizedfun clear(): List<T>",
              "doc": "Removes all ComponentViews from this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            "since": "0.3"
          }
        ]
      },
      "components": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "components"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.components",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\components.html",
        "details": [
          {
            "info": {
              "name": "components",
              "signature": "var components: List<T>",
              "doc": "ComponentViews that are contained in this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\index.html",
        "details": {
          "info": {
            "name": "Pane",
            "signature": "open class Pane<T : ComponentView>(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY) : LayoutView<T> , LayeredContainer<T> , Iterable<T>",
            "doc": "A [Pane](tools.aqua.bgw.components.layoutviews/Pane) can be used to group ComponentViews for easier position management and layout.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "since": "0.1",
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            {
              "name": "height",
              "doc": "Height for this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            {
              "name": "visual",
              "doc": "Visual for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Width for this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Height for this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Visual for this [Pane](tools.aqua.bgw.components.layoutviews/Pane). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)."
                }
              ],
              "doc": "Creates a [Pane](tools.aqua.bgw.components.layoutviews/Pane).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var components: List<T>",
              "modifier": "var",
              "name": "components",
              "link": "tools.aqua.bgw.components.layoutviews/Pane/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.layoutviews/Pane)>",
              "defaultValue": "",
              "doc": "ComponentViews that are contained in this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onAdd: T.() -> Unit?",
              "modifier": "var",
              "name": "onAdd",
              "link": "tools.aqua.bgw.components.layoutviews/Pane/onAdd",
              "type": "[T](tools.aqua.bgw.components.layoutviews/Pane).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "[onAdd](tools.aqua.bgw.components.layoutviews/Pane/onAdd) gets invoked anytime after a [ComponentView](tools.aqua.bgw.components/ComponentView) is added to this [Pane](tools.aqua.bgw.components.layoutviews/Pane) with the added [ComponentView](tools.aqua.bgw.components/ComponentView) as its receiver."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onRemove: T.() -> Unit?",
              "modifier": "var",
              "name": "onRemove",
              "link": "tools.aqua.bgw.components.layoutviews/Pane/onRemove",
              "type": "[T](tools.aqua.bgw.components.layoutviews/Pane).() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "[onRemove](tools.aqua.bgw.components.layoutviews/Pane/onRemove) gets invoked anytime after a [ComponentView](tools.aqua.bgw.components/ComponentView) is removed from this [Pane](tools.aqua.bgw.components.layoutviews/Pane) with the removed [ComponentView](tools.aqua.bgw.components/ComponentView) as its receiver."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun addAll(vararg components: T)",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.components.layoutviews/Pane/addAll",
                  "type": "[T](tools.aqua.bgw.components.layoutviews/Pane)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.layoutviews/Pane/addAll",
              "returnType": "Unit",
              "doc": "Adds all ComponentViews passed as varargs to this [Pane](tools.aqua.bgw.components.layoutviews/Pane).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.components.layoutviews/Pane/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the components list is empty."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.components.layoutviews/Pane/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether the components list is not empty."
            },
            {
              "signature": "fun numberOfComponents(): Int",
              "name": "numberOfComponents",
              "link": "tools.aqua.bgw.components.layoutviews/Pane/numberOfComponents",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the size of the components list."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "isEmpty"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.isEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\is-empty.html",
        "details": [
          {
            "info": {
              "name": "isEmpty",
              "signature": "fun isEmpty(): Boolean",
              "doc": "Returns whether the components list is empty."
            },
            "seeAlso": [
              {
                "name": "Pane.isNotEmpty",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/isNotEmpty"
              },
              {
                "name": "Pane.components",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/components"
              }
            ]
          }
        ]
      },
      "isNotEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "isNotEmpty"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.isNotEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\is-not-empty.html",
        "details": [
          {
            "info": {
              "name": "isNotEmpty",
              "signature": "fun isNotEmpty(): Boolean",
              "doc": "Returns whether the components list is not empty."
            },
            "seeAlso": [
              {
                "name": "Pane.isEmpty",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/isEmpty"
              },
              {
                "name": "Pane.components",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/components"
              }
            ]
          }
        ]
      },
      "iterator": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "iterator"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.iterator",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\iterator.html",
        "details": [
          {
            "info": {
              "name": "iterator",
              "signature": "open operator override fun iterator(): Iterator<T>",
              "doc": "Returns an iterator over the elements of this object."
            }
          }
        ]
      },
      "numberOfComponents": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "numberOfComponents"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.numberOfComponents",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\number-of-components.html",
        "details": [
          {
            "info": {
              "name": "numberOfComponents",
              "signature": "fun numberOfComponents(): Int",
              "doc": "Returns the size of the components list."
            },
            "seeAlso": [
              {
                "name": "Pane.components",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/components"
              }
            ]
          }
        ]
      },
      "onAdd": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "onAdd"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.onAdd",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\on-add.html",
        "details": [
          {
            "info": {
              "name": "onAdd",
              "signature": "var onAdd: T.() -> Unit?",
              "doc": "[onAdd](tools.aqua.bgw.components.layoutviews/Pane/onAdd) gets invoked anytime after a [ComponentView](tools.aqua.bgw.components/ComponentView) is added to this [Pane](tools.aqua.bgw.components.layoutviews/Pane) with the added [ComponentView](tools.aqua.bgw.components/ComponentView) as its receiver."
            },
            "seeAlso": [
              {
                "name": "T",
                "link": "tools.aqua.bgw.components.layoutviews/Pane"
              },
              {
                "name": "Pane.onRemove",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/onRemove"
              }
            ],
            "since": "0.3"
          }
        ]
      },
      "onRemove": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "onRemove"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.onRemove",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\on-remove.html",
        "details": [
          {
            "info": {
              "name": "onRemove",
              "signature": "var onRemove: T.() -> Unit?",
              "doc": "[onRemove](tools.aqua.bgw.components.layoutviews/Pane/onRemove) gets invoked anytime after a [ComponentView](tools.aqua.bgw.components/ComponentView) is removed from this [Pane](tools.aqua.bgw.components.layoutviews/Pane) with the removed [ComponentView](tools.aqua.bgw.components/ComponentView) as its receiver."
            },
            "seeAlso": [
              {
                "name": "T",
                "link": "tools.aqua.bgw.components.layoutviews/Pane"
              },
              {
                "name": "Pane.onAdd",
                "link": "tools.aqua.bgw.components.layoutviews/Pane/onAdd"
              }
            ],
            "since": "0.3"
          }
        ]
      },
      "removeAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "removeAll"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.removeAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\remove-all.html",
        "details": [
          {
            "info": {
              "name": "removeAll",
              "signature": "@Synchronizedfun removeAll(collection: Collection<T>): Boolean",
              "doc": "Removes all ComponentViews contained in [collection](tools.aqua.bgw.components.layoutviews/Pane/removeAll) from this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            "parameters": [
              {
                "name": "collection",
                "doc": "The ComponentViews to remove."
              }
            ]
          },
          {
            "info": {
              "name": "removeAll",
              "signature": "@Synchronizedfun removeAll(predicate: (T) -> Boolean): Boolean",
              "doc": "Removes all ComponentViews matching the [predicate](tools.aqua.bgw.components.layoutviews/Pane/removeAll) from this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            "parameters": [
              {
                "name": "predicate",
                "doc": "The predicate to evaluate."
              }
            ]
          }
        ]
      },
      "removeComponentsListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "removeComponentsListener"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.removeComponentsListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\remove-components-listener.html",
        "details": [
          {
            "info": {
              "name": "removeComponentsListener",
              "signature": "fun removeComponentsListener(listener: ValueObserver<List<T>>)",
              "doc": "Removes the [ValueObserver](tools.aqua.bgw.observable/ValueObserver) from the observableComponents list."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "The [ValueObserver](tools.aqua.bgw.observable/ValueObserver) to remove."
              }
            ]
          }
        ]
      },
      "remove": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "remove"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.remove",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\remove.html",
        "details": [
          {
            "info": {
              "name": "remove",
              "signature": "@Synchronizedfun remove(component: T): Boolean",
              "doc": "Removes the [ComponentView](tools.aqua.bgw.components/ComponentView) specified by the parameter from this [Pane](tools.aqua.bgw.components.layoutviews/Pane)."
            },
            "parameters": [
              {
                "name": "component",
                "doc": "The [ComponentView](tools.aqua.bgw.components/ComponentView) to remove."
              }
            ]
          }
        ]
      },
      "setZIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "setZIndex"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.setZIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\set-z-index.html",
        "details": [
          {
            "info": {
              "name": "setZIndex",
              "signature": "open override fun setZIndex(component: T, zIndex: Int)",
              "doc": "Puts the [component](tools.aqua.bgw.components.layoutviews/Pane/setZIndex) in the appropriate place compared to the other observableComponents by the [zIndex](tools.aqua.bgw.components.layoutviews/Pane/setZIndex)."
            },
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved accordingly."
              },
              {
                "name": "zIndex",
                "doc": "The value that is used to compare the order of observableComponents."
              }
            ]
          }
        ]
      },
      "toBack": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "toBack"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.toBack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\to-back.html",
        "details": [
          {
            "info": {
              "name": "toBack",
              "signature": "open override fun toBack(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components.layoutviews/Pane/toBack) to the back inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer)."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the back."
              }
            ]
          }
        ]
      },
      "toFront": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.layoutviews",
          "Pane",
          "toFront"
        ],
        "package": "tools.aqua.bgw.components.layoutviews.Pane.toFront",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\-pane\\to-front.html",
        "details": [
          {
            "info": {
              "name": "toFront",
              "signature": "open override fun toFront(component: T)",
              "doc": "Puts the [component](tools.aqua.bgw.components.layoutviews/Pane/toFront) to the front inside the [LayeredContainer](tools.aqua.bgw.components/LayeredContainer)."
            },
            "since": "0.8",
            "parameters": [
              {
                "name": "component",
                "doc": "Child that is moved to the front."
              }
            ]
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.components.layoutviews"
      ],
      "package": "tools.aqua.bgw.components.layoutviews",
      "path": "example\\htmlPartial\\tools.aqua.bgw.components.layoutviews\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class CameraPane<T : LayoutView<*>>(posX: Number = 0, posY: Number = 0, width: Number, height: Number, visual: Visual = Visual.EMPTY, limitBounds: Boolean = true, target: T) : ComponentView",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "CameraPane",
            "doc": "A pane representing a camera view that can be used to display and manipulate a target layout view.",
            "link": "tools.aqua.bgw.components.layoutviews/CameraPane"
          },
          {
            "name": "GridPane",
            "doc": "Defines a [LayoutView](tools.aqua.bgw.components.layoutviews/LayoutView) that orders components in a grid structure.",
            "link": "tools.aqua.bgw.components.layoutviews/GridPane"
          },
          {
            "name": "LayoutView",
            "doc": "Baseclass for all layout components.",
            "link": "tools.aqua.bgw.components.layoutviews/LayoutView"
          },
          {
            "name": "Pane",
            "doc": "A [Pane](tools.aqua.bgw.components.layoutviews/Pane) can be used to group ComponentViews for easier position management and layout.",
            "link": "tools.aqua.bgw.components.layoutviews/Pane"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.components.uicomponents": {
    "BinaryStateButton": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\index.html",
        "details": {
          "info": {
            "name": "BinaryStateButton",
            "signature": "sealed class BinaryStateButton : LabeledUIComponent",
            "doc": "Baseclass for ToggleButtons and RadioButtons.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "RadioButton",
              "link": "tools.aqua.bgw.components.uicomponents/RadioButton"
            },
            {
              "name": "ToggleButton",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleButton"
            }
          ],
          "seeAlso": [
            {
              "name": "ToggleGroup",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup"
            },
            {
              "name": "RadioButton",
              "link": "tools.aqua.bgw.components.uicomponents/RadioButton"
            }
          ],
          "since": "0.5",
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "width",
              "doc": "Width for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "height",
              "doc": "Height for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "text",
              "doc": "Text to be displayed for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "font",
              "doc": "Font to be used for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "alignment",
              "doc": "Alignment to be used for the text."
            },
            {
              "name": "isWrapText",
              "doc": "Defines if text should be wrapped, if it exceeds the label's width."
            },
            {
              "name": "isSelected",
              "doc": "The initial state for this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "toggleGroup",
              "doc": "The ToggleGroup of this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isSelected: Boolean",
              "modifier": "var",
              "name": "isSelected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/isSelected",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Selected state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDeselected: () -> Unit?",
              "modifier": "var",
              "name": "onDeselected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onDeselected",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is deselected."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onSelected: () -> Unit?",
              "modifier": "var",
              "name": "onSelected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelected",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is selected."
            },
            {
              "signature": "var onSelectionChanged: (Boolean) -> Unit?",
              "modifier": "var",
              "name": "onSelectionChanged",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelectionChanged",
              "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when the selection state of this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var toggleGroup: ToggleGroup",
              "modifier": "var",
              "name": "toggleGroup",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/toggleGroup",
              "type": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)",
              "defaultValue": "",
              "doc": "The ToggleGroup of this ToggleButton."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isSelected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton",
          "isSelected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton.isSelected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\is-selected.html",
        "details": [
          {
            "info": {
              "name": "isSelected",
              "signature": "var isSelected: Boolean",
              "doc": "Selected state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            }
          }
        ]
      },
      "onDeselected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton",
          "onDeselected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton.onDeselected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\on-deselected.html",
        "details": [
          {
            "info": {
              "name": "onDeselected",
              "signature": "var onDeselected: () -> Unit?",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is deselected."
            },
            "seeAlso": [
              {
                "name": "BinaryStateButton.onSelected",
                "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelected"
              }
            ],
            "since": "1.0"
          }
        ]
      },
      "onSelected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton",
          "onSelected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton.onSelected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\on-selected.html",
        "details": [
          {
            "info": {
              "name": "onSelected",
              "signature": "var onSelected: () -> Unit?",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is selected."
            },
            "seeAlso": [
              {
                "name": "BinaryStateButton.onDeselected",
                "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onDeselected"
              }
            ],
            "since": "1.0"
          }
        ]
      },
      "onSelectionChanged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton",
          "onSelectionChanged"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton.onSelectionChanged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\on-selection-changed.html",
        "details": [
          {
            "info": {
              "name": "onSelectionChanged",
              "signature": "var onSelectionChanged: (Boolean) -> Unit?",
              "doc": "Gets called when the selection state of this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) changes."
            },
            "seeAlso": [
              {
                "name": "BinaryStateButton.onSelected",
                "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelected"
              },
              {
                "name": "BinaryStateButton.onDeselected",
                "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onDeselected"
              }
            ],
            "since": "1.0"
          }
        ]
      },
      "selectedProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton",
          "selectedProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton.selectedProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\selected-property.html",
        "details": [
          {
            "info": {
              "name": "selectedProperty",
              "signature": "val selectedProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the selected state of this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            "seeAlso": [
              {
                "name": "BinaryStateButton.isSelected",
                "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/isSelected"
              }
            ]
          }
        ]
      },
      "toggleGroup": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "BinaryStateButton",
          "toggleGroup"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.BinaryStateButton.toggleGroup",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-binary-state-button\\toggle-group.html",
        "details": [
          {
            "info": {
              "name": "toggleGroup",
              "signature": "var toggleGroup: ToggleGroup",
              "doc": "The ToggleGroup of this ToggleButton."
            },
            "seeAlso": [
              {
                "name": "ToggleGroup",
                "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup"
              }
            ]
          }
        ]
      }
    },
    "Button": {
      "Button": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Button",
          "Button"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Button.Button",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-button\\-button.html",
        "details": [
          {
            "info": {
              "name": "Button",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_BUTTON_WIDTH, height: Number = DEFAULT_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = ColorVisual.WHITE)",
              "doc": "Creates a [Button](tools.aqua.bgw.components.uicomponents/Button)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: [DEFAULT_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_BUTTON_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: [DEFAULT_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_BUTTON_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Text for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: empty String."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "alignment",
                "doc": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)."
              },
              {
                "name": "isWrapText",
                "doc": "Defines if text should be wrapped. Default: false."
              },
              {
                "name": "visual",
                "doc": "Visual for this button. Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Button"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Button",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-button\\index.html",
        "details": {
          "info": {
            "name": "Button",
            "signature": "open class Button(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_BUTTON_WIDTH, height: Number = DEFAULT_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = ColorVisual.WHITE) : LabeledUIComponent",
            "doc": "A simple [Button](tools.aqua.bgw.components.uicomponents/Button) with a text.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: [DEFAULT_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_BUTTON_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: [DEFAULT_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_BUTTON_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Text for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: empty String."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "alignment",
              "doc": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)."
            },
            {
              "name": "isWrapText",
              "doc": "Defines if text should be wrapped. Default: false."
            },
            {
              "name": "visual",
              "doc": "Visual for this button. Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)"
            }
          ],
          "samples": [
            {
              "codepoint": [
                "tools.aqua.bgw.main.examples.ExampleUIScene.button"
              ],
              "sample": "val button =\n      Button(\n          posX = 100,\n          posY = 50,\n          width = 200,\n          height = 100,\n          text = \"I am a Button.\",\n          visual = ColorVisual.LIGHT_GRAY)",
              "doc": "Create a light gray button."
            },
            {
              "codepoint": [
                "tools.aqua.bgw.main.examples.ExampleUIScene.button2"
              ],
              "sample": "val button2 =\n      Button(\n          posX = 0,\n          posY = 0,\n          width = 200,\n          height = 200,\n          text = \"Also a Button.\",\n          visual = ColorVisual.RED.apply { style.borderRadius = BorderRadius.LARGE })",
              "doc": "Creates a red button with large border radius."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_BUTTON_WIDTH, height: Number = DEFAULT_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = ColorVisual.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_BUTTON_WIDTH",
                  "doc": "Width for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: [DEFAULT_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_BUTTON_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_BUTTON_HEIGHT",
                  "doc": "Height for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: [DEFAULT_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_BUTTON_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Text for this [Button](tools.aqua.bgw.components.uicomponents/Button). Default: empty String."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER",
                  "doc": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "Defines if text should be wrapped. Default: false."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "ColorVisual.WHITE",
                  "doc": "Visual for this button. Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)"
                }
              ],
              "doc": "Creates a [Button](tools.aqua.bgw.components.uicomponents/Button).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "CheckBox": {
      "CheckBox": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "CheckBox"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.CheckBox",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\-check-box.html",
        "details": [
          {
            "info": {
              "name": "CheckBox",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CHECKBOX_WIDTH, height: Number = DEFAULT_CHECKBOX_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY, isChecked: Boolean = false, allowIndeterminate: Boolean = false, isIndeterminate: Boolean = false)",
              "doc": "Creates a [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: [DEFAULT_CHECKBOX_WIDTH](tools.aqua.bgw.core/DEFAULT_CHECKBOX_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: [DEFAULT_CHECKBOX_HEIGHT](tools.aqua.bgw.core/DEFAULT_CHECKBOX_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Text for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: empty String."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "alignment",
                "doc": "[Alignment](tools.aqua.bgw.core/Alignment) to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)s.aqua.bgw.core/Alignment).CENTER."
              },
              {
                "name": "isWrapText",
                "doc": "Defines if text should be wrapped. Default: false."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
              },
              {
                "name": "isChecked",
                "doc": "The initial checked state. Default: false."
              },
              {
                "name": "allowIndeterminate",
                "doc": "The initial [isIndeterminateAllowed](tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminateAllowed) state. Default: false."
              },
              {
                "name": "isIndeterminate",
                "doc": "The initial isIndeterminate state. Default: false."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\index.html",
        "details": {
          "info": {
            "name": "CheckBox",
            "signature": "open class CheckBox(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CHECKBOX_WIDTH, height: Number = DEFAULT_CHECKBOX_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY, isChecked: Boolean = false, allowIndeterminate: Boolean = false, isIndeterminate: Boolean = false) : LabeledUIComponent",
            "doc": "A simple [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox) with a text.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: [DEFAULT_CHECKBOX_WIDTH](tools.aqua.bgw.core/DEFAULT_CHECKBOX_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: [DEFAULT_CHECKBOX_HEIGHT](tools.aqua.bgw.core/DEFAULT_CHECKBOX_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Text for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: empty String."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "alignment",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)s.aqua.bgw.core/Alignment).CENTER."
            },
            {
              "name": "isWrapText",
              "doc": "Defines if text should be wrapped. Default: false."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
            },
            {
              "name": "isChecked",
              "doc": "The initial checked state. Default: false."
            },
            {
              "name": "allowIndeterminate",
              "doc": "The initial [isIndeterminateAllowed](tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminateAllowed) state. Default: false."
            },
            {
              "name": "isIndeterminate",
              "doc": "The initial [isIndeterminate](tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminate) state. Default: false."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_CHECKBOX_WIDTH, height: Number = DEFAULT_CHECKBOX_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY, isChecked: Boolean = false, allowIndeterminate: Boolean = false, isIndeterminate: Boolean = false)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CHECKBOX_WIDTH",
                  "doc": "Width for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: [DEFAULT_CHECKBOX_WIDTH](tools.aqua.bgw.core/DEFAULT_CHECKBOX_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_CHECKBOX_HEIGHT",
                  "doc": "Height for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: [DEFAULT_CHECKBOX_HEIGHT](tools.aqua.bgw.core/DEFAULT_CHECKBOX_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Text for this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox). Default: empty String."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER",
                  "doc": "[Alignment](tools.aqua.bgw.core/Alignment) to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)s.aqua.bgw.core/Alignment).CENTER."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "Defines if text should be wrapped. Default: false."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
                },
                {
                  "modifier": "",
                  "name": "isChecked",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "The initial checked state. Default: false."
                },
                {
                  "modifier": "",
                  "name": "allowIndeterminate",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "The initial [isIndeterminateAllowed](tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminateAllowed) state. Default: false."
                },
                {
                  "modifier": "",
                  "name": "isIndeterminate",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "The initial [isIndeterminate](tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminate) state. Default: false."
                }
              ],
              "doc": "Creates a [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isChecked: Boolean",
              "modifier": "var",
              "name": "isChecked",
              "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isChecked",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "The checked state."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isIndeterminate: Boolean",
              "modifier": "var",
              "name": "isIndeterminate",
              "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminate",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) whether this component in the indeterminate state."
            },
            {
              "signature": "var isIndeterminateAllowed: Boolean",
              "modifier": "var",
              "name": "isIndeterminateAllowed",
              "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminateAllowed",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) whether this component allows an indeterminate state."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onCheckedChanged: (Boolean) -> Unit?",
              "modifier": "var",
              "name": "onCheckedChanged",
              "link": "tools.aqua.bgw.components.uicomponents/CheckBox/onCheckedChanged",
              "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox) gets checked or unchecked."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onIndeterminateChanged: (Boolean) -> Unit?",
              "modifier": "var",
              "name": "onIndeterminateChanged",
              "link": "tools.aqua.bgw.components.uicomponents/CheckBox/onIndeterminateChanged",
              "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox) gets set to indeterminate or not."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isCheckedProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "isCheckedProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.isCheckedProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\is-checked-property.html",
        "details": [
          {
            "info": {
              "name": "isCheckedProperty",
              "signature": "val isCheckedProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the checked state."
            },
            "seeAlso": [
              {
                "name": "CheckBox.isChecked",
                "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isChecked"
              }
            ]
          }
        ]
      },
      "isChecked": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "isChecked"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.isChecked",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\is-checked.html",
        "details": [
          {
            "info": {
              "name": "isChecked",
              "signature": "var isChecked: Boolean",
              "doc": "The checked state."
            }
          }
        ]
      },
      "isIndeterminateAllowedProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "isIndeterminateAllowedProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.isIndeterminateAllowedProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\is-indeterminate-allowed-property.html",
        "details": [
          {
            "info": {
              "name": "isIndeterminateAllowedProperty",
              "signature": "val isIndeterminateAllowedProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for whether this component allows an indeterminate state."
            },
            "seeAlso": [
              {
                "name": "CheckBox.isIndeterminateAllowed",
                "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminateAllowed"
              }
            ]
          }
        ]
      },
      "isIndeterminateAllowed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "isIndeterminateAllowed"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.isIndeterminateAllowed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\is-indeterminate-allowed.html",
        "details": [
          {
            "info": {
              "name": "isIndeterminateAllowed",
              "signature": "var isIndeterminateAllowed: Boolean",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) whether this component allows an indeterminate state."
            }
          }
        ]
      },
      "isIndeterminateProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "isIndeterminateProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.isIndeterminateProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\is-indeterminate-property.html",
        "details": [
          {
            "info": {
              "name": "isIndeterminateProperty",
              "signature": "val isIndeterminateProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the indeterminate state."
            },
            "seeAlso": [
              {
                "name": "CheckBox.isIndeterminate",
                "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminate"
              }
            ]
          }
        ]
      },
      "isIndeterminate": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "isIndeterminate"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.isIndeterminate",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\is-indeterminate.html",
        "details": [
          {
            "info": {
              "name": "isIndeterminate",
              "signature": "var isIndeterminate: Boolean",
              "doc": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html) whether this component in the indeterminate state."
            }
          }
        ]
      },
      "onCheckedChanged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "onCheckedChanged"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.onCheckedChanged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\on-checked-changed.html",
        "details": [
          {
            "info": {
              "name": "onCheckedChanged",
              "signature": "var onCheckedChanged: (Boolean) -> Unit?",
              "doc": "Gets invoked whenever this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox) gets checked or unchecked."
            },
            "seeAlso": [
              {
                "name": "CheckBox.isChecked",
                "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isChecked"
              }
            ]
          }
        ]
      },
      "onIndeterminateChanged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "CheckBox",
          "onIndeterminateChanged"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.CheckBox.onIndeterminateChanged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-check-box\\on-indeterminate-changed.html",
        "details": [
          {
            "info": {
              "name": "onIndeterminateChanged",
              "signature": "var onIndeterminateChanged: (Boolean) -> Unit?",
              "doc": "Gets invoked whenever this [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox) gets set to indeterminate or not."
            },
            "seeAlso": [
              {
                "name": "CheckBox.isIndeterminate",
                "link": "tools.aqua.bgw.components.uicomponents/CheckBox/isIndeterminate"
              }
            ]
          }
        ]
      }
    },
    "ColorPicker": {
      "ColorPicker": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ColorPicker",
          "ColorPicker"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ColorPicker.ColorPicker",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-color-picker\\-color-picker.html",
        "details": [
          {
            "info": {
              "name": "ColorPicker",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COLOR_PICKER_WIDTH, height: Number = DEFAULT_COLOR_PICKER_HEIGHT, initialColor: Color = Color.WHITE)",
              "doc": "Creates a [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: [DEFAULT_COLOR_PICKER_WIDTH](tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: [DEFAULT_COLOR_PICKER_HEIGHT](tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_HEIGHT)."
              },
              {
                "name": "initialColor",
                "doc": "The [Color](tools.aqua.bgw.core/Color) that is initially selected. Default: [Color.WHITE](tools.aqua.bgw.core/Color/Companion/WHITE)ls.aqua.bgw.core/Color).WHITE."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ColorPicker"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ColorPicker",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-color-picker\\index.html",
        "details": {
          "info": {
            "name": "ColorPicker",
            "signature": "open class ColorPicker(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COLOR_PICKER_WIDTH, height: Number = DEFAULT_COLOR_PICKER_HEIGHT, initialColor: Color = Color.WHITE) : UIComponent",
            "doc": "A [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker) that allows to choose a [Color](tools.aqua.bgw.core/Color).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: [DEFAULT_COLOR_PICKER_WIDTH](tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: [DEFAULT_COLOR_PICKER_HEIGHT](tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_HEIGHT)."
            },
            {
              "name": "initialColor",
              "doc": "The [Color](tools.aqua.bgw.core/Color) that is initially selected. Default: [Color.WHITE](tools.aqua.bgw.core/Color/Companion/WHITE)ls.aqua.bgw.core/Color).WHITE."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COLOR_PICKER_WIDTH, height: Number = DEFAULT_COLOR_PICKER_HEIGHT, initialColor: Color = Color.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_COLOR_PICKER_WIDTH",
                  "doc": "Width for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: [DEFAULT_COLOR_PICKER_WIDTH](tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_COLOR_PICKER_HEIGHT",
                  "doc": "Height for this [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker). Default: [DEFAULT_COLOR_PICKER_HEIGHT](tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "initialColor",
                  "type": "[Color](tools.aqua.bgw.core/Color)",
                  "defaultValue": "[Color](tools.aqua.bgw.core/Color).WHITE",
                  "doc": "The [Color](tools.aqua.bgw.core/Color) that is initially selected. Default: [Color.WHITE](tools.aqua.bgw.core/Color/Companion/WHITE)ls.aqua.bgw.core/Color).WHITE."
                }
              ],
              "doc": "Creates a [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onColorSelected: (Color) -> Unit?",
              "modifier": "var",
              "name": "onColorSelected",
              "link": "tools.aqua.bgw.components.uicomponents/ColorPicker/onColorSelected",
              "type": "([Color](tools.aqua.bgw.core/Color)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the selected [Color](tools.aqua.bgw.core/Color) changes."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var selectedColor: Color",
              "modifier": "var",
              "name": "selectedColor",
              "link": "tools.aqua.bgw.components.uicomponents/ColorPicker/selectedColor",
              "type": "[Color](tools.aqua.bgw.core/Color)",
              "defaultValue": "",
              "doc": "The currently selected [Color](tools.aqua.bgw.core/Color)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "onColorSelected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ColorPicker",
          "onColorSelected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ColorPicker.onColorSelected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-color-picker\\on-color-selected.html",
        "details": [
          {
            "info": {
              "name": "onColorSelected",
              "signature": "var onColorSelected: (Color) -> Unit?",
              "doc": "Gets invoked whenever the selected [Color](tools.aqua.bgw.core/Color) changes."
            },
            "seeAlso": [
              {
                "name": "ColorPicker.selectedColor",
                "link": "tools.aqua.bgw.components.uicomponents/ColorPicker/selectedColor"
              }
            ]
          }
        ]
      },
      "selectedColorProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ColorPicker",
          "selectedColorProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ColorPicker.selectedColorProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-color-picker\\selected-color-property.html",
        "details": [
          {
            "info": {
              "name": "selectedColorProperty",
              "signature": "val selectedColorProperty: Property<Color>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the currently selected [Color](tools.aqua.bgw.core/Color)."
            },
            "seeAlso": [
              {
                "name": "ColorPicker.selectedColor",
                "link": "tools.aqua.bgw.components.uicomponents/ColorPicker/selectedColor"
              }
            ]
          }
        ]
      },
      "selectedColor": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ColorPicker",
          "selectedColor"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ColorPicker.selectedColor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-color-picker\\selected-color.html",
        "details": [
          {
            "info": {
              "name": "selectedColor",
              "signature": "var selectedColor: Color",
              "doc": "The currently selected [Color](tools.aqua.bgw.core/Color)."
            }
          }
        ]
      }
    },
    "ComboBox": {
      "ComboBox": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "ComboBox"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.ComboBox",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\-combo-box.html",
        "details": [
          {
            "info": {
              "name": "ComboBox",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COMBOBOX_WIDTH, height: Number = DEFAULT_COMBOBOX_HEIGHT, font: Font = Font(), prompt: String = \"\", items: List<T> = emptyList(), formatFunction: (T) -> String? = null)",
              "doc": "Creates a [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox) content."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: [DEFAULT_COMBOBOX_WIDTH](tools.aqua.bgw.core/DEFAULT_COMBOBOX_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: [DEFAULT_COMBOBOX_HEIGHT](tools.aqua.bgw.core/DEFAULT_COMBOBOX_HEIGHT)."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the options. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "items",
                "doc": "The initial selection of items. Default: empty list."
              },
              {
                "name": "formatFunction",
                "doc": "The formatFunction that is used to represent the items. Default: null."
              }
            ]
          }
        ]
      },
      "formatFunctionProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "formatFunctionProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.formatFunctionProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\format-function-property.html",
        "details": [
          {
            "info": {
              "name": "formatFunctionProperty",
              "signature": "var formatFunctionProperty: Property<(T) -> String?>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [formatFunction](tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item.\n\nIf the value is null, the toString function of the item is used instead."
            },
            "seeAlso": [
              {
                "name": "ComboBox.formatFunction",
                "link": "tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction"
              }
            ]
          }
        ]
      },
      "formatFunction": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "formatFunction"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.formatFunction",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\format-function.html",
        "details": [
          {
            "info": {
              "name": "formatFunction",
              "signature": "var formatFunction: (T) -> String?",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation for each item.\n\nIf the value is null, the toString function of the item is used instead."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\index.html",
        "details": {
          "info": {
            "name": "ComboBox",
            "signature": "open class ComboBox<T>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_COMBOBOX_WIDTH, height: Number = DEFAULT_COMBOBOX_HEIGHT, font: Font = Font(), val prompt: String = \"\", items: List<T> = emptyList(), formatFunction: (T) -> String? = null) : UIComponent",
            "doc": "A standard [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox) that may be populated with items of specified type parameter.\n\nThe [formatFunction](tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction) is used to gain a String representation of each item. If no [formatFunction](tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction) is specified the toString function gets used instead.\n\nWhenever the user selects an item, the selectedItemProperty gets updated.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox) content."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: [DEFAULT_COMBOBOX_WIDTH](tools.aqua.bgw.core/DEFAULT_COMBOBOX_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). Default: [DEFAULT_COMBOBOX_HEIGHT](tools.aqua.bgw.core/DEFAULT_COMBOBOX_HEIGHT)."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the options. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "items",
              "doc": "The initial selection of items. Default: empty list."
            },
            {
              "name": "formatFunction",
              "doc": "The formatFunction that is used to represent the items. Default: null."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var formatFunction: (T) -> String?",
              "modifier": "var",
              "name": "formatFunction",
              "link": "tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction",
              "type": "([T](tools.aqua.bgw.components.uicomponents/ComboBox)) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/ComboBox/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var items: List<T>",
              "modifier": "var",
              "name": "items",
              "link": "tools.aqua.bgw.components.uicomponents/ComboBox/items",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.uicomponents/ComboBox)>",
              "defaultValue": "",
              "doc": "Items [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onItemSelected: (T?) -> Unit?",
              "modifier": "var",
              "name": "onItemSelected",
              "link": "tools.aqua.bgw.components.uicomponents/ComboBox/onItemSelected",
              "type": "([T](tools.aqua.bgw.components.uicomponents/ComboBox)?) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever an item is selected."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val prompt: String",
              "modifier": "val",
              "name": "prompt",
              "link": "tools.aqua.bgw.components.uicomponents/ComboBox/prompt",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Prompt for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox). This gets displayed as a prompt to the user whenever the selectedItemProperty value is null.Default: empty string."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var selectedItem: T?",
              "modifier": "var",
              "name": "selectedItem",
              "link": "tools.aqua.bgw.components.uicomponents/ComboBox/selectedItem",
              "type": "[T](tools.aqua.bgw.components.uicomponents/ComboBox)?",
              "defaultValue": "",
              "doc": "The selected item."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "items": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "items"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.items",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\items.html",
        "details": [
          {
            "info": {
              "name": "items",
              "signature": "var items: List<T>",
              "doc": "Items [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox)."
            }
          }
        ]
      },
      "observableItemsList": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "observableItemsList"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.observableItemsList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\observable-items-list.html",
        "details": [
          {
            "info": {
              "name": "observableItemsList",
              "signature": "val observableItemsList: ObservableList<T>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [items](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html) for this [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox)."
            },
            "seeAlso": [
              {
                "name": "ComboBox.items",
                "link": "tools.aqua.bgw.components.uicomponents/ComboBox/items"
              }
            ]
          }
        ]
      },
      "onItemSelected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "onItemSelected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.onItemSelected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\on-item-selected.html",
        "details": [
          {
            "info": {
              "name": "onItemSelected",
              "signature": "var onItemSelected: (T?) -> Unit?",
              "doc": "Gets invoked whenever an item is selected."
            },
            "seeAlso": [
              {
                "name": "ComboBox.selectedItem",
                "link": "tools.aqua.bgw.components.uicomponents/ComboBox/selectedItem"
              }
            ]
          }
        ]
      },
      "prompt": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "prompt"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.prompt",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\prompt.html",
        "details": [
          {
            "info": {
              "name": "prompt",
              "signature": "val prompt: String",
              "doc": ""
            }
          }
        ]
      },
      "selectedItemProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "selectedItemProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.selectedItemProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\selected-item-property.html",
        "details": [
          {
            "info": {
              "name": "selectedItemProperty",
              "signature": "val selectedItemProperty: Property<T?>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the selected item.\n\nValue may be null if no item is selected."
            },
            "seeAlso": [
              {
                "name": "ComboBox.selectedItem",
                "link": "tools.aqua.bgw.components.uicomponents/ComboBox/selectedItem"
              }
            ]
          }
        ]
      },
      "selectedItem": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ComboBox",
          "selectedItem"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ComboBox.selectedItem",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-combo-box\\selected-item.html",
        "details": [
          {
            "info": {
              "name": "selectedItem",
              "signature": "var selectedItem: T?",
              "doc": "The selected item.\n\nMay be null if no item is selected."
            }
          }
        ]
      }
    },
    "Label": {
      "Label": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Label",
          "Label"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Label.Label",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-label\\-label.html",
        "details": [
          {
            "info": {
              "name": "Label",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LABEL_WIDTH, height: Number = DEFAULT_LABEL_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [Label](tools.aqua.bgw.components.uicomponents/Label)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: [DEFAULT_LABEL_WIDTH](tools.aqua.bgw.core/DEFAULT_LABEL_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: [DEFAULT_LABEL_HEIGHT](tools.aqua.bgw.core/DEFAULT_LABEL_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Text for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: empty String."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "alignment",
                "doc": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)."
              },
              {
                "name": "isWrapText",
                "doc": "Defines if text should be wrapped. Default: false."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Label"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Label",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-label\\index.html",
        "details": {
          "info": {
            "name": "Label",
            "signature": "open class Label(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LABEL_WIDTH, height: Number = DEFAULT_LABEL_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY) : LabeledUIComponent",
            "doc": "A basic [Label](tools.aqua.bgw.components.uicomponents/Label) displaying text.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: [DEFAULT_LABEL_WIDTH](tools.aqua.bgw.core/DEFAULT_LABEL_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: [DEFAULT_LABEL_HEIGHT](tools.aqua.bgw.core/DEFAULT_LABEL_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Text for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: empty String."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "alignment",
              "doc": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)."
            },
            {
              "name": "isWrapText",
              "doc": "Defines if text should be wrapped. Default: false."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LABEL_WIDTH, height: Number = DEFAULT_LABEL_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER, isWrapText: Boolean = false, visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LABEL_WIDTH",
                  "doc": "Width for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: [DEFAULT_LABEL_WIDTH](tools.aqua.bgw.core/DEFAULT_LABEL_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LABEL_HEIGHT",
                  "doc": "Height for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: [DEFAULT_LABEL_HEIGHT](tools.aqua.bgw.core/DEFAULT_LABEL_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Text for this [Label](tools.aqua.bgw.components.uicomponents/Label). Default: empty String."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER",
                  "doc": "Alignment to be used for the text Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "Defines if text should be wrapped. Default: false."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
                }
              ],
              "doc": "Creates a [Label](tools.aqua.bgw.components.uicomponents/Label).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "LabeledUIComponent": {
      "LabeledUIComponent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "LabeledUIComponent"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.LabeledUIComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\-labeled-u-i-component.html",
        "details": [
          {
            "info": {
              "name": "LabeledUIComponent",
              "signature": "constructor(posX: Number, posY: Number, width: Number, height: Number, text: String, font: Font, alignment: Alignment, isWrapText: Boolean, visual: Visual)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
              },
              {
                "name": "width",
                "doc": "Width for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
              },
              {
                "name": "height",
                "doc": "Height for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
              },
              {
                "name": "text",
                "doc": "Label for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text."
              },
              {
                "name": "alignment",
                "doc": "Alignment to be used for the text."
              },
              {
                "name": "isWrapText",
                "doc": "Defines if text should be wrapped, if it exceeds the label's width."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
              }
            ]
          }
        ]
      },
      "alignmentProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "alignmentProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.alignmentProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\alignment-property.html",
        "details": [
          {
            "info": {
              "name": "alignmentProperty",
              "signature": "val alignmentProperty: Property<Alignment>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            "seeAlso": [
              {
                "name": "LabeledUIComponent.alignment",
                "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment"
              }
            ]
          }
        ]
      },
      "alignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "alignment"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.alignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\alignment.html",
        "details": [
          {
            "info": {
              "name": "alignment",
              "signature": "var alignment: Alignment",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\index.html",
        "details": {
          "info": {
            "name": "LabeledUIComponent",
            "signature": "abstract class LabeledUIComponent(posX: Number, posY: Number, width: Number, height: Number, text: String, font: Font, alignment: Alignment, isWrapText: Boolean, visual: Visual) : UIComponent",
            "doc": "Baseclass for all UIComponents that have a label.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "BinaryStateButton",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton"
            },
            {
              "name": "Button",
              "link": "tools.aqua.bgw.components.uicomponents/Button"
            },
            {
              "name": "CheckBox",
              "link": "tools.aqua.bgw.components.uicomponents/CheckBox"
            },
            {
              "name": "Label",
              "link": "tools.aqua.bgw.components.uicomponents/Label"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "name": "width",
              "doc": "Width for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "name": "height",
              "doc": "Height for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "name": "text",
              "doc": "Label for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the [text](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text)."
            },
            {
              "name": "alignment",
              "doc": "Alignment to be used for the [text](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text)."
            },
            {
              "name": "isWrapText",
              "doc": "Defines if [text](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text) should be wrapped, if it exceeds the label's width."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number, posY: Number, width: Number, height: Number, text: String, font: Font, alignment: Alignment, isWrapText: Boolean, visual: Visual)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Horizontal coordinate for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Vertical coordinate for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Width for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Height for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": "Label for this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the [text](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text)."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "",
                  "doc": "Alignment to be used for the [text](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "doc": "Defines if [text](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text) should be wrapped, if it exceeds the label's width."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "isWrapTextProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "isWrapTextProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.isWrapTextProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\is-wrap-text-property.html",
        "details": [
          {
            "info": {
              "name": "isWrapTextProperty",
              "signature": "val isWrapTextProperty: BooleanProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [isWrapText](tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText) state of this [Label](tools.aqua.bgw.components.uicomponents/Label)."
            },
            "seeAlso": [
              {
                "name": "LabeledUIComponent.isWrapText",
                "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText"
              }
            ]
          }
        ]
      },
      "isWrapText": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "isWrapText"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.isWrapText",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\is-wrap-text.html",
        "details": [
          {
            "info": {
              "name": "isWrapText",
              "signature": "var isWrapText: Boolean",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            }
          }
        ]
      },
      "textProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "textProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.textProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\text-property.html",
        "details": [
          {
            "info": {
              "name": "textProperty",
              "signature": "val textProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            "seeAlso": [
              {
                "name": "LabeledUIComponent.text",
                "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text"
              }
            ]
          }
        ]
      },
      "text": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "LabeledUIComponent",
          "text"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.LabeledUIComponent.text",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-labeled-u-i-component\\text.html",
        "details": [
          {
            "info": {
              "name": "text",
              "signature": "var text: String",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            }
          }
        ]
      }
    },
    "ListView": {
      "ListView": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView",
          "ListView"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView.ListView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\-list-view.html",
        "details": [
          {
            "info": {
              "name": "ListView",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LIST_VIEW_WIDTH, height: Number = DEFAULT_LIST_VIEW_HEIGHT, items: List<T> = emptyList(), font: Font = Font(), visual: Visual = ColorVisual.WHITE, orientation: Orientation = Orientation.VERTICAL, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE, formatFunction: (T) -> String? = null)",
              "doc": "Creates a [ListView](tools.aqua.bgw.components.uicomponents/ListView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [ListView](tools.aqua.bgw.components.uicomponents/ListView) content."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [DEFAULT_LIST_VIEW_WIDTH](tools.aqua.bgw.core/DEFAULT_LIST_VIEW_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [DEFAULT_LIST_VIEW_HEIGHT](tools.aqua.bgw.core/DEFAULT_LIST_VIEW_HEIGHT)."
              },
              {
                "name": "items",
                "doc": "Initial list of items for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: empty list."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
              },
              {
                "name": "orientation",
                "doc": "Orientation for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [Orientation.VERTICAL](tools.aqua.bgw.components.uicomponents/Orientation/VERTICAL)."
              },
              {
                "name": "selectionMode",
                "doc": "Selection mode to be used for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
              },
              {
                "name": "selectionBackground",
                "doc": "Background for selected items in this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
              },
              {
                "name": "formatFunction",
                "doc": "The formatFunction that is used to represent the items. Default: null."
              }
            ]
          }
        ]
      },
      "formatFunctionProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView",
          "formatFunctionProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView.formatFunctionProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\format-function-property.html",
        "details": [
          {
            "info": {
              "name": "formatFunctionProperty",
              "signature": "val formatFunctionProperty: Property<(T) -> String?>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item.\n\nIf the value is null, the toString function of the item is used instead."
            },
            "seeAlso": [
              {
                "name": "ListView.formatFunction",
                "link": "tools.aqua.bgw.components.uicomponents/ListView/formatFunction"
              }
            ]
          }
        ]
      },
      "formatFunction": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView",
          "formatFunction"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView.formatFunction",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\format-function.html",
        "details": [
          {
            "info": {
              "name": "formatFunction",
              "signature": "var formatFunction: (T) -> String?",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation for each item.\n\nIf the value is null, the toString function of the item is used instead."
            }
          }
        ]
      },
      "formatItem": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView",
          "formatItem"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView.formatItem",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\format-item.html",
        "details": [
          {
            "info": {
              "name": "formatItem",
              "signature": "fun formatItem(item: Any?): String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\index.html",
        "details": {
          "info": {
            "name": "ListView",
            "signature": "open class ListView<T>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LIST_VIEW_WIDTH, height: Number = DEFAULT_LIST_VIEW_HEIGHT, items: List<T> = emptyList(), font: Font = Font(), visual: Visual = ColorVisual.WHITE, orientation: Orientation = Orientation.VERTICAL, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE, formatFunction: (T) -> String? = null) : StructuredDataView<T>",
            "doc": "A [ListView](tools.aqua.bgw.components.uicomponents/ListView) displaying its items next to each other in the given orientation.\n\nThe [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) is used to gain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation of each item. If no [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) is specified the toString function gets used instead.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ListView](tools.aqua.bgw.components.uicomponents/ListView) content."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [DEFAULT_LIST_VIEW_WIDTH](tools.aqua.bgw.core/DEFAULT_LIST_VIEW_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [DEFAULT_LIST_VIEW_HEIGHT](tools.aqua.bgw.core/DEFAULT_LIST_VIEW_HEIGHT)."
            },
            {
              "name": "items",
              "doc": "Initial list of items for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: empty list."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
            },
            {
              "name": "orientation",
              "doc": "Orientation for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [Orientation.VERTICAL](tools.aqua.bgw.components.uicomponents/Orientation/VERTICAL)."
            },
            {
              "name": "selectionMode",
              "doc": "Selection mode to be used for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
            },
            {
              "name": "selectionBackground",
              "doc": "Background for selected items in this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
            },
            {
              "name": "formatFunction",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) that is used to represent the items. Default: null."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_LIST_VIEW_WIDTH, height: Number = DEFAULT_LIST_VIEW_HEIGHT, items: List<T> = emptyList(), font: Font = Font(), visual: Visual = ColorVisual.WHITE, orientation: Orientation = Orientation.VERTICAL, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE, formatFunction: (T) -> String? = null)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LIST_VIEW_WIDTH",
                  "doc": "Width for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [DEFAULT_LIST_VIEW_WIDTH](tools.aqua.bgw.core/DEFAULT_LIST_VIEW_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_LIST_VIEW_HEIGHT",
                  "doc": "Height for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [DEFAULT_LIST_VIEW_HEIGHT](tools.aqua.bgw.core/DEFAULT_LIST_VIEW_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "items",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.uicomponents/ListView)>",
                  "defaultValue": "emptyList()",
                  "doc": "Initial list of items for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: empty list."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual).WHITE",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
                },
                {
                  "modifier": "",
                  "name": "orientation",
                  "type": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation)",
                  "defaultValue": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation).VERTICAL",
                  "doc": "Orientation for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [Orientation.VERTICAL](tools.aqua.bgw.components.uicomponents/Orientation/VERTICAL)."
                },
                {
                  "modifier": "",
                  "name": "selectionMode",
                  "type": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)",
                  "defaultValue": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode).SINGLE",
                  "doc": "Selection mode to be used for this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
                },
                {
                  "modifier": "",
                  "name": "selectionBackground",
                  "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                  "defaultValue": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual).BLUE",
                  "doc": "Background for selected items in this [ListView](tools.aqua.bgw.components.uicomponents/ListView). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
                },
                {
                  "modifier": "",
                  "name": "formatFunction",
                  "type": "([T](tools.aqua.bgw.components.uicomponents/ListView)) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
                  "defaultValue": "null",
                  "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) that is used to represent the items. Default: null."
                }
              ],
              "doc": "Creates a [ListView](tools.aqua.bgw.components.uicomponents/ListView).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var formatFunction: (T) -> String?",
              "modifier": "var",
              "name": "formatFunction",
              "link": "tools.aqua.bgw.components.uicomponents/ListView/formatFunction",
              "type": "([T](tools.aqua.bgw.components.uicomponents/ListView)) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/ListView/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val items: ObservableList<T>",
              "modifier": "val",
              "name": "items",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/items",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists/ObservableList)<[T](tools.aqua.bgw.components.uicomponents/ListView)>",
              "defaultValue": "",
              "doc": "An [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) that contains the data objects. The first object in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) will be the topmost row in the rendered [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var orientation: Orientation",
              "modifier": "var",
              "name": "orientation",
              "link": "tools.aqua.bgw.components.uicomponents/ListView/orientation",
              "type": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation)",
              "defaultValue": "",
              "doc": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation) of this [ListView](tools.aqua.bgw.components.uicomponents/ListView) displayed."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "modifier": "val",
              "name": "selectedIndices",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedIndices",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
              "defaultValue": "",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "modifier": "val",
              "name": "selectedItems",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedItems",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)<[T](tools.aqua.bgw.components.uicomponents/ListView)>",
              "defaultValue": "",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "var selectionBackground: ColorVisual",
              "modifier": "var",
              "name": "selectionBackground",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionBackground",
              "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
              "defaultValue": "",
              "doc": "Background color for selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "var selectionMode: SelectionMode",
              "modifier": "var",
              "name": "selectionMode",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode",
              "type": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)",
              "defaultValue": "",
              "doc": "Selection mode to be used for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var selectionStyle: String",
              "modifier": "var",
              "name": "selectionStyle",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Style of selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun clearSelection()",
              "name": "clearSelection",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/clearSelection",
              "returnType": "Unit",
              "doc": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            {
              "signature": "fun formatItem(item: Any?): String",
              "name": "formatItem",
              "parameters": [
                {
                  "modifier": "",
                  "name": "item",
                  "link": "tools.aqua.bgw.components.uicomponents/ListView/formatItem",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/ListView/formatItem",
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun select(element: T)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
                  "type": "[T](tools.aqua.bgw.components.uicomponents/ListView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
              "returnType": "Unit",
              "doc": "Selects the specified element. Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun select(index: Int)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
              "returnType": "Unit",
              "doc": "Selects the element at the specified index in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun selectAll()",
              "name": "selectAll",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectAll",
              "returnType": "Unit",
              "doc": "Selects all items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "fun selectFirst()",
              "name": "selectFirst",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectFirst",
              "returnType": "Unit",
              "doc": "Selects the first element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectLast()",
              "name": "selectLast",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectLast",
              "returnType": "Unit",
              "doc": "Selects the last element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectNext()",
              "name": "selectNext",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectNext",
              "returnType": "Unit",
              "doc": "Selects the next element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectPrevious()",
              "name": "selectPrevious",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectPrevious",
              "returnType": "Unit",
              "doc": "Selects the previous element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "orientationProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView",
          "orientationProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView.orientationProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\orientation-property.html",
        "details": [
          {
            "info": {
              "name": "orientationProperty",
              "signature": "val orientationProperty: Property<Orientation>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Orientation](tools.aqua.bgw.components.uicomponents/Orientation) of this [ListView](tools.aqua.bgw.components.uicomponents/ListView)."
            },
            "seeAlso": [
              {
                "name": "ListView.orientation",
                "link": "tools.aqua.bgw.components.uicomponents/ListView/orientation"
              }
            ]
          }
        ]
      },
      "orientation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ListView",
          "orientation"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ListView.orientation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-list-view\\orientation.html",
        "details": [
          {
            "info": {
              "name": "orientation",
              "signature": "var orientation: Orientation",
              "doc": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation) of this [ListView](tools.aqua.bgw.components.uicomponents/ListView) displayed."
            }
          }
        ]
      }
    },
    "Orientation": {
      "HORIZONTAL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.uicomponents",
            "Orientation",
            "HORIZONTAL"
          ],
          "package": "tools.aqua.bgw.components.uicomponents.Orientation.HORIZONTAL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-orientation\\-h-o-r-i-z-o-n-t-a-l\\index.html",
          "details": {
            "info": {
              "name": "HORIZONTAL",
              "signature": "HORIZONTAL",
              "doc": "[HORIZONTAL](tools.aqua.bgw.components.uicomponents/Orientation/HORIZONTAL) orientation.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "VERTICAL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.uicomponents",
            "Orientation",
            "VERTICAL"
          ],
          "package": "tools.aqua.bgw.components.uicomponents.Orientation.VERTICAL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-orientation\\-v-e-r-t-i-c-a-l\\index.html",
          "details": {
            "info": {
              "name": "VERTICAL",
              "signature": "VERTICAL",
              "doc": "[VERTICAL](tools.aqua.bgw.components.uicomponents/Orientation/VERTICAL) orientation.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Orientation",
          "entries"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Orientation.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-orientation\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<Orientation>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Orientation"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Orientation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-orientation\\index.html",
        "details": {
          "info": {
            "name": "Orientation",
            "signature": "enum Orientation : Enum<Orientation>",
            "doc": "Enum for orientations [HORIZONTAL](tools.aqua.bgw.components.uicomponents/Orientation/HORIZONTAL) and [VERTICAL](tools.aqua.bgw.components.uicomponents/Orientation/VERTICAL).",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<Orientation>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.components.uicomponents/Orientation/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[Orientation](tools.aqua.bgw.components.uicomponents/Orientation)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): Orientation",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.components.uicomponents/Orientation/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/Orientation/valueOf",
              "returnType": "[Orientation](tools.aqua.bgw.components.uicomponents/Orientation)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<Orientation>",
              "name": "values",
              "link": "tools.aqua.bgw.components.uicomponents/Orientation/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[Orientation](tools.aqua.bgw.components.uicomponents/Orientation)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Orientation",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Orientation.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-orientation\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): Orientation",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "Orientation",
          "values"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.Orientation.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-orientation\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<Orientation>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "PasswordField": {
      "PasswordField": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "PasswordField",
          "PasswordField"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.PasswordField.PasswordField",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-password-field\\-password-field.html",
        "details": [
          {
            "info": {
              "name": "PasswordField",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_FIELD_WIDTH, height: Number = DEFAULT_TEXT_FIELD_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240)))",
              "doc": "Creates a [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: [DEFAULT_TEXT_FIELD_WIDTH](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: [DEFAULT_TEXT_FIELD_HEIGHT](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Initial text for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: empty String."
              },
              {
                "name": "prompt",
                "doc": "Prompt for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). This gets displayed as a prompt to the user whenever the label is an empty string. Default: empty string."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
              },
              {
                "name": "visual",
                "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "PasswordField"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.PasswordField",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-password-field\\index.html",
        "details": {
          "info": {
            "name": "PasswordField",
            "signature": "open class PasswordField(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_FIELD_WIDTH, height: Number = DEFAULT_TEXT_FIELD_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240))) : TextInputUIComponent",
            "doc": "A [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField) is a single line input field that shows stars instead of typed text.\n\nWhenever user input occurs the text field gets updated.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "TextField",
              "link": "tools.aqua.bgw.components.uicomponents/TextField"
            },
            {
              "name": "TextArea",
              "link": "tools.aqua.bgw.components.uicomponents/TextArea"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: [DEFAULT_TEXT_FIELD_WIDTH](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: [DEFAULT_TEXT_FIELD_HEIGHT](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Initial text for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). Default: empty String."
            },
            {
              "name": "prompt",
              "doc": "Prompt for this [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField). This gets displayed as a prompt to the user whenever the label is an empty string. Default: empty string."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
            },
            {
              "name": "visual",
              "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onTextChanged: (String) -> Unit?",
              "modifier": "var",
              "name": "onTextChanged",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/onTextChanged",
              "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the [text](tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text) of this component changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var prompt: String",
              "modifier": "var",
              "name": "prompt",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/prompt",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Prompt of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Text of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "ProgressBar": {
      "ProgressBar": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar",
          "ProgressBar"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar.ProgressBar",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\-progress-bar.html",
        "details": [
          {
            "info": {
              "name": "ProgressBar",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_PROGRESSBAR_WIDTH, height: Number = DEFAULT_PROGRESSBAR_HEIGHT, progress: Double = 0.0, barColor: Color = Color.CYAN)",
              "doc": "Creates a [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: [DEFAULT_PROGRESSBAR_WIDTH](tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: [DEFAULT_PROGRESSBAR_HEIGHT](tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_HEIGHT)."
              },
              {
                "name": "progress",
                "doc": "The initial progress of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default 0."
              },
              {
                "name": "barColor",
                "doc": "The initial bar color of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default [Color.CYAN](tools.aqua.bgw.core/Color/Companion/CYAN)."
              }
            ]
          }
        ]
      },
      "barColorProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar",
          "barColorProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar.barColorProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\bar-color-property.html",
        "details": [
          {
            "info": {
              "name": "barColorProperty",
              "signature": "val barColorProperty: Property<Color>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the bar [Color](tools.aqua.bgw.core/Color) of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)."
            },
            "seeAlso": [
              {
                "name": "ProgressBar.barColor",
                "link": "tools.aqua.bgw.components.uicomponents/ProgressBar/barColor"
              }
            ]
          }
        ]
      },
      "barColor": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar",
          "barColor"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar.barColor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\bar-color.html",
        "details": [
          {
            "info": {
              "name": "barColor",
              "signature": "var barColor: Color",
              "doc": "Bar [Color](tools.aqua.bgw.core/Color) of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\index.html",
        "details": {
          "info": {
            "name": "ProgressBar",
            "signature": "open class ProgressBar(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_PROGRESSBAR_WIDTH, height: Number = DEFAULT_PROGRESSBAR_HEIGHT, progress: Double = 0.0, barColor: Color = Color.CYAN) : UIComponent",
            "doc": "A [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: [DEFAULT_PROGRESSBAR_WIDTH](tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: [DEFAULT_PROGRESSBAR_HEIGHT](tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_HEIGHT)."
            },
            {
              "name": "progress",
              "doc": "The initial progress of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default 0."
            },
            {
              "name": "barColor",
              "doc": "The initial bar color of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default [Color.CYAN](tools.aqua.bgw.core/Color/Companion/CYAN)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_PROGRESSBAR_WIDTH, height: Number = DEFAULT_PROGRESSBAR_HEIGHT, progress: Double = 0.0, barColor: Color = Color.CYAN)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_PROGRESSBAR_WIDTH",
                  "doc": "Width for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: [DEFAULT_PROGRESSBAR_WIDTH](tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_PROGRESSBAR_HEIGHT",
                  "doc": "Height for this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default: [DEFAULT_PROGRESSBAR_HEIGHT](tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "progress",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "0.0",
                  "doc": "The initial progress of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default 0."
                },
                {
                  "modifier": "",
                  "name": "barColor",
                  "type": "[Color](tools.aqua.bgw.core/Color)",
                  "defaultValue": "[Color](tools.aqua.bgw.core/Color).CYAN",
                  "doc": "The initial bar color of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar). Default [Color.CYAN](tools.aqua.bgw.core/Color/Companion/CYAN)."
                }
              ],
              "doc": "Creates a [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var barColor: Color",
              "modifier": "var",
              "name": "barColor",
              "link": "tools.aqua.bgw.components.uicomponents/ProgressBar/barColor",
              "type": "[Color](tools.aqua.bgw.core/Color)",
              "defaultValue": "",
              "doc": "Bar [Color](tools.aqua.bgw.core/Color) of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onProgressed: (Double) -> Unit?",
              "modifier": "var",
              "name": "onProgressed",
              "link": "tools.aqua.bgw.components.uicomponents/ProgressBar/onProgressed",
              "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)'s progress changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var progress: Double",
              "modifier": "var",
              "name": "progress",
              "link": "tools.aqua.bgw.components.uicomponents/ProgressBar/progress",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Progress state of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "onProgressed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar",
          "onProgressed"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar.onProgressed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\on-progressed.html",
        "details": [
          {
            "info": {
              "name": "onProgressed",
              "signature": "var onProgressed: (Double) -> Unit?",
              "doc": "Gets invoked whenever this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar)'s progress changes."
            },
            "seeAlso": [
              {
                "name": "ProgressBar.progress",
                "link": "tools.aqua.bgw.components.uicomponents/ProgressBar/progress"
              }
            ]
          }
        ]
      },
      "progressProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar",
          "progressProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar.progressProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\progress-property.html",
        "details": [
          {
            "info": {
              "name": "progressProperty",
              "signature": "val progressProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the progress state of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar).\n\nShould be in range of 0 to 1.\n\nA value between 0 and 1 represents the percentage of progress where 0 is 0% and 1 is 100% progress. Any value less than 0 gets represented as 0% progress, while any value greater than 1 gets represented as 100% progress."
            },
            "seeAlso": [
              {
                "name": "ProgressBar.progress",
                "link": "tools.aqua.bgw.components.uicomponents/ProgressBar/progress"
              }
            ]
          }
        ]
      },
      "progress": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ProgressBar",
          "progress"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ProgressBar.progress",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-progress-bar\\progress.html",
        "details": [
          {
            "info": {
              "name": "progress",
              "signature": "var progress: Double",
              "doc": "Progress state of this [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar).\n\nShould be in range of 0 to 1.\n\nA value between 0 and 1 represents the percentage of progress where 0 is 0% and 1 is 100% progress. Any value less than 0 gets represented as 0% progress, while any value greater than 1 gets represented as 100% progress."
            }
          }
        ]
      }
    },
    "RadioButton": {
      "RadioButton": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "RadioButton",
          "RadioButton"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.RadioButton.RadioButton",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-radio-button\\-radio-button.html",
        "details": [
          {
            "info": {
              "name": "RadioButton",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_RADIO_BUTTON_WIDTH, height: Number = DEFAULT_RADIO_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: [DEFAULT_RADIO_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: [DEFAULT_RADIO_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Text to be displayed for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
              },
              {
                "name": "alignment",
                "doc": "Alignment to be used for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
              },
              {
                "name": "isSelected",
                "doc": "The initial state for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: false."
              },
              {
                "name": "toggleGroup",
                "doc": "The ToggleGroup of this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: empty group."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "RadioButton"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.RadioButton",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-radio-button\\index.html",
        "details": {
          "info": {
            "name": "RadioButton",
            "signature": "open class RadioButton(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_RADIO_BUTTON_WIDTH, height: Number = DEFAULT_RADIO_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY) : BinaryStateButton",
            "doc": "[RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) is analogous to a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) with a different visual representation but cannot be deselected.\n\nA [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) may be used as a [Button](tools.aqua.bgw.components.uicomponents/Button) that is either selected or not selected. An important feature of RadioButtons is the [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).\n\nToggleGroups can be used to group RadioButtons.\n\nAll RadioButtons that keep the same instance of a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) belong to that [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup). Only one [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) may be selected in a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup). This means whenever a [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) changes its selected state to true, all other RadioButtons in the same [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) get deselected.\n\nAn exception to this rule is, whenever a new [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) that is currently selected gets added to the [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).\n\nNote: Field isWrapText inherited from [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) has no effect on RadioButtons.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ToggleButton",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleButton"
            },
            {
              "name": "ToggleGroup",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: [DEFAULT_RADIO_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: [DEFAULT_RADIO_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Text to be displayed for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
            },
            {
              "name": "alignment",
              "doc": "Alignment to be used for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
            },
            {
              "name": "isSelected",
              "doc": "The initial state for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: false."
            },
            {
              "name": "toggleGroup",
              "doc": "The ToggleGroup of this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: empty group."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_RADIO_BUTTON_WIDTH, height: Number = DEFAULT_RADIO_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_RADIO_BUTTON_WIDTH",
                  "doc": "Width for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: [DEFAULT_RADIO_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_RADIO_BUTTON_HEIGHT",
                  "doc": "Height for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: [DEFAULT_RADIO_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Text to be displayed for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER_LEFT",
                  "doc": "Alignment to be used for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton)."
                },
                {
                  "modifier": "",
                  "name": "isSelected",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "The initial state for this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: false."
                },
                {
                  "modifier": "",
                  "name": "toggleGroup",
                  "type": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)",
                  "defaultValue": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)()",
                  "doc": "The ToggleGroup of this [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton). Default: empty group."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY"
                }
              ],
              "doc": "Creates a [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isSelected: Boolean",
              "modifier": "var",
              "name": "isSelected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/isSelected",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Selected state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDeselected: () -> Unit?",
              "modifier": "var",
              "name": "onDeselected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onDeselected",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is deselected."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onSelected: () -> Unit?",
              "modifier": "var",
              "name": "onSelected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelected",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is selected."
            },
            {
              "signature": "var onSelectionChanged: (Boolean) -> Unit?",
              "modifier": "var",
              "name": "onSelectionChanged",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelectionChanged",
              "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when the selection state of this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var toggleGroup: ToggleGroup",
              "modifier": "var",
              "name": "toggleGroup",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/toggleGroup",
              "type": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)",
              "defaultValue": "",
              "doc": "The ToggleGroup of this ToggleButton."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "SelectionMode": {
      "MULTIPLE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.uicomponents",
            "SelectionMode",
            "MULTIPLE"
          ],
          "package": "tools.aqua.bgw.components.uicomponents.SelectionMode.MULTIPLE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\-m-u-l-t-i-p-l-e\\index.html",
          "details": {
            "info": {
              "name": "MULTIPLE",
              "signature": "MULTIPLE",
              "doc": "Enum constant indicating that any number of selected elements is valid.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NONE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.uicomponents",
            "SelectionMode",
            "NONE"
          ],
          "package": "tools.aqua.bgw.components.uicomponents.SelectionMode.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\-n-o-n-e\\index.html",
          "details": {
            "info": {
              "name": "NONE",
              "signature": "NONE",
              "doc": "Enum constant indicating that NO selection is possible.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "SINGLE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.components.uicomponents",
            "SelectionMode",
            "SINGLE"
          ],
          "package": "tools.aqua.bgw.components.uicomponents.SelectionMode.SINGLE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\-s-i-n-g-l-e\\index.html",
          "details": {
            "info": {
              "name": "SINGLE",
              "signature": "SINGLE",
              "doc": "Enum constant indicating that only a single element may be selected.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "SelectionMode",
          "entries"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.SelectionMode.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<SelectionMode>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "SelectionMode"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.SelectionMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\index.html",
        "details": {
          "info": {
            "name": "SelectionMode",
            "signature": "enum SelectionMode : Enum<SelectionMode>",
            "doc": "Enum indicating allowed selection mode.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<SelectionMode>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.components.uicomponents/SelectionMode/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): SelectionMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.components.uicomponents/SelectionMode/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/SelectionMode/valueOf",
              "returnType": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<SelectionMode>",
              "name": "values",
              "link": "tools.aqua.bgw.components.uicomponents/SelectionMode/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "SelectionMode",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.SelectionMode.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): SelectionMode",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "SelectionMode",
          "values"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.SelectionMode.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-selection-mode\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<SelectionMode>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "StructuredDataView": {
      "clearSelection": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "clearSelection"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.clearSelection",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\clear-selection.html",
        "details": [
          {
            "info": {
              "name": "clearSelection",
              "signature": "fun clearSelection()",
              "doc": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            "seeAlso": [
              {
                "name": "StructuredDataView.selectAll",
                "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectAll"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\index.html",
        "details": {
          "info": {
            "name": "StructuredDataView",
            "signature": "sealed class StructuredDataView<T> : UIComponent",
            "doc": "A [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView) displaying its items with given format function.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ListView",
              "link": "tools.aqua.bgw.components.uicomponents/ListView"
            },
            {
              "name": "TableView",
              "link": "tools.aqua.bgw.components.uicomponents/TableView"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView) content."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "width",
              "doc": "Width for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "height",
              "doc": "Height for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "items",
              "doc": "Initial list of items for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "name": "selectionMode",
              "doc": "Selection mode to be used for this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            },
            {
              "name": "selectionBackground",
              "doc": "Background for selected items in this [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val items: ObservableList<T>",
              "modifier": "val",
              "name": "items",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/items",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists/ObservableList)<[T](tools.aqua.bgw.components.uicomponents/StructuredDataView)>",
              "defaultValue": "",
              "doc": "An [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) that contains the data objects. The first object in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) will be the topmost row in the rendered [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "modifier": "val",
              "name": "selectedIndices",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedIndices",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
              "defaultValue": "",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "modifier": "val",
              "name": "selectedItems",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedItems",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)<[T](tools.aqua.bgw.components.uicomponents/StructuredDataView)>",
              "defaultValue": "",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "var selectionBackground: ColorVisual",
              "modifier": "var",
              "name": "selectionBackground",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionBackground",
              "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
              "defaultValue": "",
              "doc": "Background color for selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "var selectionMode: SelectionMode",
              "modifier": "var",
              "name": "selectionMode",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode",
              "type": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)",
              "defaultValue": "",
              "doc": "Selection mode to be used for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var selectionStyle: String",
              "modifier": "var",
              "name": "selectionStyle",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Style of selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun clearSelection()",
              "name": "clearSelection",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/clearSelection",
              "returnType": "Unit",
              "doc": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun select(element: T)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
                  "type": "[T](tools.aqua.bgw.components.uicomponents/StructuredDataView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
              "returnType": "Unit",
              "doc": "Selects the specified element. Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun select(index: Int)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
              "returnType": "Unit",
              "doc": "Selects the element at the specified index in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun selectAll()",
              "name": "selectAll",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectAll",
              "returnType": "Unit",
              "doc": "Selects all items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "fun selectFirst()",
              "name": "selectFirst",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectFirst",
              "returnType": "Unit",
              "doc": "Selects the first element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectLast()",
              "name": "selectLast",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectLast",
              "returnType": "Unit",
              "doc": "Selects the last element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectNext()",
              "name": "selectNext",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectNext",
              "returnType": "Unit",
              "doc": "Selects the next element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectPrevious()",
              "name": "selectPrevious",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectPrevious",
              "returnType": "Unit",
              "doc": "Selects the previous element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "items": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "items"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.items",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\items.html",
        "details": [
          {
            "info": {
              "name": "items",
              "signature": "val items: ObservableList<T>",
              "doc": "An [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) that contains the data objects. The first object in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) will be the topmost row in the rendered [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            }
          }
        ]
      },
      "selectAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectAll"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\select-all.html",
        "details": [
          {
            "info": {
              "name": "selectAll",
              "signature": "fun selectAll()",
              "doc": "Selects all items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            "seeAlso": [
              {
                "name": "StructuredDataView.clearSelection",
                "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/clearSelection"
              }
            ],
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is not set to [SelectionMode.MULTIPLE](tools.aqua.bgw.components.uicomponents/SelectionMode/MULTIPLE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent) is empty."
              }
            ]
          }
        ]
      },
      "selectFirst": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectFirst"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectFirst",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\select-first.html",
        "details": [
          {
            "info": {
              "name": "selectFirst",
              "signature": "fun selectFirst()",
              "doc": "Selects the first element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is [SelectionMode.NONE](tools.aqua.bgw.components.uicomponents/SelectionMode/NONE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent) is empty."
              }
            ]
          }
        ]
      },
      "selectLast": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectLast"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectLast",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\select-last.html",
        "details": [
          {
            "info": {
              "name": "selectLast",
              "signature": "fun selectLast()",
              "doc": "Selects the last element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is [SelectionMode.NONE](tools.aqua.bgw.components.uicomponents/SelectionMode/NONE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent) is empty."
              }
            ]
          }
        ]
      },
      "selectNext": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectNext"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectNext",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\select-next.html",
        "details": [
          {
            "info": {
              "name": "selectNext",
              "signature": "fun selectNext()",
              "doc": "Selects the next element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection.\n\nSelects first element if none is currently selected. If the last element is selected the selection does not change."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is not [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent) is empty."
              }
            ]
          }
        ]
      },
      "selectPrevious": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectPrevious"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectPrevious",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\select-previous.html",
        "details": [
          {
            "info": {
              "name": "selectPrevious",
              "signature": "fun selectPrevious()",
              "doc": "Selects the previous element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection.\n\nSelects last element if none is currently selected."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is not [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent) is empty."
              }
            ]
          }
        ]
      },
      "select": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "select"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.select",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\select.html",
        "details": [
          {
            "info": {
              "name": "select",
              "signature": "fun select(index: Int)",
              "doc": "Selects the element at the specified index in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is [SelectionMode.NONE](tools.aqua.bgw.components.uicomponents/SelectionMode/NONE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [index](tools.aqua.bgw.components.uicomponents/StructuredDataView/select) is out of bounds."
              }
            ]
          },
          {
            "info": {
              "name": "select",
              "signature": "fun select(element: T)",
              "doc": "Selects the specified element. Clears current selection."
            },
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If selection mode is [SelectionMode.NONE](tools.aqua.bgw.components.uicomponents/SelectionMode/NONE)."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If [element](tools.aqua.bgw.components.uicomponents/StructuredDataView/select) is not contained in [items](tools.aqua.bgw.components.uicomponents/StructuredDataView/items)."
              }
            ]
          }
        ]
      },
      "selectedIndices": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectedIndices"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectedIndices",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selected-indices.html",
        "details": [
          {
            "info": {
              "name": "selectedIndices",
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            "seeAlso": [
              {
                "name": "StructuredDataView.selectedItems",
                "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedItems"
              },
              {
                "name": "StructuredDataView.selectionMode",
                "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode"
              }
            ]
          }
        ]
      },
      "selectedItems": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectedItems"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectedItems",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selected-items.html",
        "details": [
          {
            "info": {
              "name": "selectedItems",
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            "seeAlso": [
              {
                "name": "StructuredDataView.selectedIndices",
                "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedIndices"
              },
              {
                "name": "StructuredDataView.selectionMode",
                "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode"
              }
            ]
          }
        ]
      },
      "selectionBackgroundProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectionBackgroundProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectionBackgroundProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selection-background-property.html",
        "details": [
          {
            "info": {
              "name": "selectionBackgroundProperty",
              "signature": "val selectionBackgroundProperty: Property<ColorVisual>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the background color for selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            }
          }
        ]
      },
      "selectionBackground": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectionBackground"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectionBackground",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selection-background.html",
        "details": [
          {
            "info": {
              "name": "selectionBackground",
              "signature": "var selectionBackground: ColorVisual",
              "doc": "Background color for selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            }
          }
        ]
      },
      "selectionModeProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectionModeProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectionModeProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selection-mode-property.html",
        "details": [
          {
            "info": {
              "name": "selectionModeProperty",
              "signature": "val selectionModeProperty: Property<SelectionMode>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent).\n\nChanging from [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE) to [SelectionMode.MULTIPLE](tools.aqua.bgw.components.uicomponents/SelectionMode/MULTIPLE) keeps selection as is. Changing from [SelectionMode.MULTIPLE](tools.aqua.bgw.components.uicomponents/SelectionMode/MULTIPLE) to [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE) selects the item that was last selected. Changing from or to [SelectionMode.NONE](tools.aqua.bgw.components.uicomponents/SelectionMode/NONE) clears selection.\n\nSelected items and indices may be observed by registering observers on [selectedItems](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedItems) and [selectedIndices](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedIndices)."
            }
          }
        ]
      },
      "selectionMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectionMode"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectionMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selection-mode.html",
        "details": [
          {
            "info": {
              "name": "selectionMode",
              "signature": "var selectionMode: SelectionMode",
              "doc": "Selection mode to be used for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent).\n\nChanging from [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE) to [SelectionMode.MULTIPLE](tools.aqua.bgw.components.uicomponents/SelectionMode/MULTIPLE) keeps selection as is. Changing from [SelectionMode.MULTIPLE](tools.aqua.bgw.components.uicomponents/SelectionMode/MULTIPLE) to [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE) selects the item that was last selected. Changing from or to [SelectionMode.NONE](tools.aqua.bgw.components.uicomponents/SelectionMode/NONE) clears selection.\n\nSelected items and indices may be observed by registering observers on [selectedItems](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedItems) and [selectedIndices](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedIndices)."
            }
          }
        ]
      },
      "selectionStyleProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectionStyleProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectionStyleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selection-style-property.html",
        "details": [
          {
            "info": {
              "name": "selectionStyleProperty",
              "signature": "val selectionStyleProperty: Property<String>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the style of selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode).\n\nThis gets applied last, so it may override any changes made via other fields and functions of the elements in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Critical failures, bugs or other undefined behaviour could occur when using this feature."
            },
            "deprecated": {
              "description": "The property is no longer used as of BGW 1.0.",
              "replaceWith": ""
            }
          }
        ]
      },
      "selectionStyle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "StructuredDataView",
          "selectionStyle"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.StructuredDataView.selectionStyle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-structured-data-view\\selection-style.html",
        "details": [
          {
            "info": {
              "name": "selectionStyle",
              "signature": "var selectionStyle: String",
              "doc": "Style of selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode).\n\nThis gets applied last, so it may override any changes made via other fields and functions of the elements in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Critical failures, bugs or other undefined behaviour could occur when using this feature."
            },
            "deprecated": {
              "description": "CSS Styling is no longer supported as of BGW 1.0.",
              "replaceWith": ""
            }
          }
        ]
      }
    },
    "TableColumn": {
      "TableColumn": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "TableColumn"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.TableColumn",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\-table-column.html",
        "details": [
          {
            "info": {
              "name": "TableColumn",
              "signature": "constructor(title: String, width: Number, font: Font = Font(), formatFunction: (T) -> String)",
              "doc": "Creates a [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "[TableView](tools.aqua.bgw.components.uicomponents/TableView) content type."
              },
              {
                "name": "title",
                "doc": "The title for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). It gets displayed in the header row of the [TableView](tools.aqua.bgw.components.uicomponents/TableView)."
              },
              {
                "name": "width",
                "doc": "The width for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "formatFunction",
                "doc": "The format function for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). It gets applied to each item in the [TableView](tools.aqua.bgw.components.uicomponents/TableView) to get a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) for its cell."
              }
            ]
          }
        ]
      },
      "fontProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "fontProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.fontProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\font-property.html",
        "details": [
          {
            "info": {
              "name": "fontProperty",
              "signature": "val fontProperty: Property<Font>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Font](tools.aqua.bgw.util/Font) of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            "seeAlso": [
              {
                "name": "Font",
                "link": "tools.aqua.bgw.util/Font"
              }
            ]
          }
        ]
      },
      "font": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "font"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.font",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\font.html",
        "details": [
          {
            "info": {
              "name": "font",
              "signature": "var font: Font",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            "seeAlso": [
              {
                "name": "Font",
                "link": "tools.aqua.bgw.util/Font"
              }
            ]
          }
        ]
      },
      "formatFunctionProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "formatFunctionProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.formatFunctionProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\format-function-property.html",
        "details": [
          {
            "info": {
              "name": "formatFunctionProperty",
              "signature": "val formatFunctionProperty: Property<(T) -> String?>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [formatFunction](tools.aqua.bgw.components.uicomponents/TableColumn/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) representation for each item.\n\nIf the value is null, the toString function of the item is used instead."
            },
            "seeAlso": [
              {
                "name": "TableColumn.formatFunction",
                "link": "tools.aqua.bgw.components.uicomponents/TableColumn/formatFunction"
              }
            ]
          }
        ]
      },
      "formatFunction": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "formatFunction"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.formatFunction",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\format-function.html",
        "details": [
          {
            "info": {
              "name": "formatFunction",
              "signature": "var formatFunction: (T) -> String?",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/TableColumn/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation for each item.\n\nIf the value is null, the toString function of the item is used instead."
            }
          }
        ]
      },
      "formatItem": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "formatItem"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.formatItem",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\format-item.html",
        "details": [
          {
            "info": {
              "name": "formatItem",
              "signature": "fun formatItem(item: Any?): String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\index.html",
        "details": {
          "info": {
            "name": "TableColumn",
            "signature": "open class TableColumn<T>(title: String, width: Number, font: Font = Font(), formatFunction: (T) -> String)",
            "doc": "A [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn) may be used to represent a column in a [TableView](tools.aqua.bgw.components.uicomponents/TableView).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "TableView",
              "link": "tools.aqua.bgw.components.uicomponents/TableView"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "[TableView](tools.aqua.bgw.components.uicomponents/TableView) content type."
            },
            {
              "name": "title",
              "doc": "The title for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). It gets displayed in the header row of the [TableView](tools.aqua.bgw.components.uicomponents/TableView)."
            },
            {
              "name": "width",
              "doc": "The [width](tools.aqua.bgw.components.uicomponents/TableColumn/width) for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "formatFunction",
              "doc": "The format function for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). It gets applied to each item in the [TableView](tools.aqua.bgw.components.uicomponents/TableView) to get a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) for its cell."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(title: String, width: Number, font: Font = Font(), formatFunction: (T) -> String)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "title",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": "The title for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). It gets displayed in the header row of the [TableView](tools.aqua.bgw.components.uicomponents/TableView)."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "The [width](tools.aqua.bgw.components.uicomponents/TableColumn/width) for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "formatFunction",
                  "type": "([T](tools.aqua.bgw.components.uicomponents/TableColumn)) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": "The format function for this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). It gets applied to each item in the [TableView](tools.aqua.bgw.components.uicomponents/TableView) to get a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) for its cell."
                }
              ],
              "doc": "Creates a [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/TableColumn/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            {
              "signature": "var formatFunction: (T) -> String?",
              "modifier": "var",
              "name": "formatFunction",
              "link": "tools.aqua.bgw.components.uicomponents/TableColumn/formatFunction",
              "type": "([T](tools.aqua.bgw.components.uicomponents/TableColumn)) -> [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": "The [formatFunction](tools.aqua.bgw.components.uicomponents/TableColumn/formatFunction) that gets used to obtain a [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html) representation for each item."
            },
            {
              "signature": "var title: String",
              "modifier": "var",
              "name": "title",
              "link": "tools.aqua.bgw.components.uicomponents/TableColumn/title",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Title of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components.uicomponents/TableColumn/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The width of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). Must not be negative."
            }
          ],
          "functions": [
            {
              "signature": "fun formatItem(item: Any?): String",
              "name": "formatItem",
              "parameters": [
                {
                  "modifier": "",
                  "name": "item",
                  "link": "tools.aqua.bgw.components.uicomponents/TableColumn/formatItem",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/TableColumn/formatItem",
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "doc": "",
              "isSuspend": false
            }
          ]
        }
      },
      "titleProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "titleProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.titleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\title-property.html",
        "details": [
          {
            "info": {
              "name": "titleProperty",
              "signature": "val titleProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the title of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            },
            "seeAlso": [
              {
                "name": "TableColumn.title",
                "link": "tools.aqua.bgw.components.uicomponents/TableColumn/title"
              }
            ]
          }
        ]
      },
      "title": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "title"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.title",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\title.html",
        "details": [
          {
            "info": {
              "name": "title",
              "signature": "var title: String",
              "doc": "Title of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)."
            }
          }
        ]
      },
      "widthProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "widthProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.widthProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\width-property.html",
        "details": [
          {
            "info": {
              "name": "widthProperty",
              "signature": "val widthProperty: LimitedDoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the width of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). Must not be negative."
            },
            "seeAlso": [
              {
                "name": "TableColumn.width",
                "link": "tools.aqua.bgw.components.uicomponents/TableColumn/width"
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If a negative value was set."
              }
            ]
          }
        ]
      },
      "width": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableColumn",
          "width"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableColumn.width",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-column\\width.html",
        "details": [
          {
            "info": {
              "name": "width",
              "signature": "var width: Double",
              "doc": "The width of this [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn). Must not be negative."
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If a negative value was set."
              }
            ]
          }
        ]
      }
    },
    "TableView": {
      "TableView": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableView",
          "TableView"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableView.TableView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-view\\-table-view.html",
        "details": [
          {
            "info": {
              "name": "TableView",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TABLE_VIEW_WIDTH, height: Number = DEFAULT_TABLE_VIEW_HEIGHT, columns: List<TableColumn<T>> = emptyList(), items: List<T> = emptyList(), visual: Visual = ColorVisual.WHITE, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE)",
              "doc": "Creates a [TableView](tools.aqua.bgw.components.uicomponents/TableView)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Generic [TableView](tools.aqua.bgw.components.uicomponents/TableView) content."
              },
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [DEFAULT_TABLE_VIEW_WIDTH](tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [DEFAULT_TABLE_VIEW_HEIGHT](tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_HEIGHT)."
              },
              {
                "name": "columns",
                "doc": "Initial columns for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: empty list."
              },
              {
                "name": "items",
                "doc": "Initial list of items for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: empty list."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
              },
              {
                "name": "selectionMode",
                "doc": "Selection mode to be used for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
              },
              {
                "name": "selectionBackground",
                "doc": "Background for selected items in this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
              }
            ]
          }
        ]
      },
      "columns": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableView",
          "columns"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableView.columns",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-view\\columns.html",
        "details": [
          {
            "info": {
              "name": "columns",
              "signature": "val columns: ObservableList<TableColumn<T>>",
              "doc": "An [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) that contains TableColumns which specify how the data is represented in that column. The first [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn) in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) will be the leftmost column in the rendered [TableView](tools.aqua.bgw.components.uicomponents/TableView)."
            },
            "seeAlso": [
              {
                "name": "TableColumn",
                "link": "tools.aqua.bgw.components.uicomponents/TableColumn"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TableView"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TableView",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-table-view\\index.html",
        "details": {
          "info": {
            "name": "TableView",
            "signature": "open class TableView<T>(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TABLE_VIEW_WIDTH, height: Number = DEFAULT_TABLE_VIEW_HEIGHT, columns: List<TableColumn<T>> = emptyList(), items: List<T> = emptyList(), visual: Visual = ColorVisual.WHITE, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE) : StructuredDataView<T>",
            "doc": "A [TableView](tools.aqua.bgw.components.uicomponents/TableView) may be used to visualize a data table.\n\nThe items list is used as the data model. The columns list defines how the data is represented.\n\nSimplified example on how the columns list is used to represent the data:\n\nitems: 1, 2, 3\n\ncolumns: (\"first\", {x -> x+1}, 10),",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "TableColumn",
              "link": "tools.aqua.bgw.components.uicomponents/TableColumn"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [TableView](tools.aqua.bgw.components.uicomponents/TableView) content."
            },
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [DEFAULT_TABLE_VIEW_WIDTH](tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [DEFAULT_TABLE_VIEW_HEIGHT](tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_HEIGHT)."
            },
            {
              "name": "columns",
              "doc": "Initial columns for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: empty list."
            },
            {
              "name": "items",
              "doc": "Initial list of items for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: empty list."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
            },
            {
              "name": "selectionMode",
              "doc": "Selection mode to be used for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
            },
            {
              "name": "selectionBackground",
              "doc": "Background for selected items in this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TABLE_VIEW_WIDTH, height: Number = DEFAULT_TABLE_VIEW_HEIGHT, columns: List<TableColumn<T>> = emptyList(), items: List<T> = emptyList(), visual: Visual = ColorVisual.WHITE, selectionMode: SelectionMode = SelectionMode.SINGLE, selectionBackground: ColorVisual = ColorVisual.BLUE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TABLE_VIEW_WIDTH",
                  "doc": "Width for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [DEFAULT_TABLE_VIEW_WIDTH](tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TABLE_VIEW_HEIGHT",
                  "doc": "Height for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [DEFAULT_TABLE_VIEW_HEIGHT](tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "columns",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)<[T](tools.aqua.bgw.components.uicomponents/TableView)>>",
                  "defaultValue": "emptyList()",
                  "doc": "Initial columns for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: empty list."
                },
                {
                  "modifier": "",
                  "name": "items",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.components.uicomponents/TableView)>",
                  "defaultValue": "emptyList()",
                  "doc": "Initial list of items for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: empty list."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual).WHITE",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
                },
                {
                  "modifier": "",
                  "name": "selectionMode",
                  "type": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)",
                  "defaultValue": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode).SINGLE",
                  "doc": "Selection mode to be used for this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [SelectionMode.SINGLE](tools.aqua.bgw.components.uicomponents/SelectionMode/SINGLE)."
                },
                {
                  "modifier": "",
                  "name": "selectionBackground",
                  "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                  "defaultValue": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual).BLUE",
                  "doc": "Background for selected items in this [TableView](tools.aqua.bgw.components.uicomponents/TableView). Default: [ColorVisual.BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
                }
              ],
              "doc": "Creates a [TableView](tools.aqua.bgw.components.uicomponents/TableView).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "val columns: ObservableList<TableColumn<T>>",
              "modifier": "val",
              "name": "columns",
              "link": "tools.aqua.bgw.components.uicomponents/TableView/columns",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists/ObservableList)<[TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn)<[T](tools.aqua.bgw.components.uicomponents/TableView)>>",
              "defaultValue": "",
              "doc": "An [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) that contains TableColumns which specify how the data is represented in that column. The first [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn) in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) will be the leftmost column in the rendered [TableView](tools.aqua.bgw.components.uicomponents/TableView)."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val items: ObservableList<T>",
              "modifier": "val",
              "name": "items",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/items",
              "type": "[ObservableList](tools.aqua.bgw.observable.lists/ObservableList)<[T](tools.aqua.bgw.components.uicomponents/TableView)>",
              "defaultValue": "",
              "doc": "An [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) that contains the data objects. The first object in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) will be the topmost row in the rendered [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val selectedIndices: ReadonlyObservableList<Int>",
              "modifier": "val",
              "name": "selectedIndices",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedIndices",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
              "defaultValue": "",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing indices of all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "val selectedItems: ReadonlyObservableList<T>",
              "modifier": "val",
              "name": "selectedItems",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectedItems",
              "type": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)<[T](tools.aqua.bgw.components.uicomponents/TableView)>",
              "defaultValue": "",
              "doc": "[ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList) containing all currently selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Register a listener to listen for selection changes. Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "var selectionBackground: ColorVisual",
              "modifier": "var",
              "name": "selectionBackground",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionBackground",
              "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
              "defaultValue": "",
              "doc": "Background color for selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "var selectionMode: SelectionMode",
              "modifier": "var",
              "name": "selectionMode",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode",
              "type": "[SelectionMode](tools.aqua.bgw.components.uicomponents/SelectionMode)",
              "defaultValue": "",
              "doc": "Selection mode to be used for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var selectionStyle: String",
              "modifier": "var",
              "name": "selectionStyle",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Style of selected items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Item selection is enabled via [selectionMode](tools.aqua.bgw.components.uicomponents/StructuredDataView/selectionMode)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun clearSelection()",
              "name": "clearSelection",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/clearSelection",
              "returnType": "Unit",
              "doc": "Clears selection of items. Instantly returns if no item is currently selected."
            },
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun select(element: T)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
                  "type": "[T](tools.aqua.bgw.components.uicomponents/TableView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
              "returnType": "Unit",
              "doc": "Selects the specified element. Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun select(index: Int)",
              "name": "select",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/select",
              "returnType": "Unit",
              "doc": "Selects the element at the specified index in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection.",
              "isSuspend": false
            },
            {
              "signature": "fun selectAll()",
              "name": "selectAll",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectAll",
              "returnType": "Unit",
              "doc": "Selects all items in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "fun selectFirst()",
              "name": "selectFirst",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectFirst",
              "returnType": "Unit",
              "doc": "Selects the first element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectLast()",
              "name": "selectLast",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectLast",
              "returnType": "Unit",
              "doc": "Selects the last element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectNext()",
              "name": "selectNext",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectNext",
              "returnType": "Unit",
              "doc": "Selects the next element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun selectPrevious()",
              "name": "selectPrevious",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView/selectPrevious",
              "returnType": "Unit",
              "doc": "Selects the previous element in this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Clears current selection."
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "TextArea": {
      "TextArea": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextArea",
          "TextArea"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextArea.TextArea",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-area\\-text-area.html",
        "details": [
          {
            "info": {
              "name": "TextArea",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_AREA_WIDTH, height: Number = DEFAULT_TEXT_AREA_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240)))",
              "doc": "Creates a [TextArea](tools.aqua.bgw.components.uicomponents/TextArea)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: [DEFAULT_TEXT_AREA_WIDTH](tools.aqua.bgw.core/DEFAULT_TEXT_AREA_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: [DEFAULT_TEXT_AREA_HEIGHT](tools.aqua.bgw.core/DEFAULT_TEXT_AREA_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Initial text for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: empty String."
              },
              {
                "name": "prompt",
                "doc": "Prompt for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). This gets displayed as a prompt to the user whenever the label is an empty string. Default: empty string."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
              },
              {
                "name": "visual",
                "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextArea"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextArea",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-area\\index.html",
        "details": {
          "info": {
            "name": "TextArea",
            "signature": "open class TextArea(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_AREA_WIDTH, height: Number = DEFAULT_TEXT_AREA_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240))) : TextInputUIComponent",
            "doc": "A [TextArea](tools.aqua.bgw.components.uicomponents/TextArea) is a multi line input field.\n\nWhenever user input occurs the text field gets updated.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "TextField",
              "link": "tools.aqua.bgw.components.uicomponents/TextField"
            },
            {
              "name": "PasswordField",
              "link": "tools.aqua.bgw.components.uicomponents/PasswordField"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: [DEFAULT_TEXT_AREA_WIDTH](tools.aqua.bgw.core/DEFAULT_TEXT_AREA_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: [DEFAULT_TEXT_AREA_HEIGHT](tools.aqua.bgw.core/DEFAULT_TEXT_AREA_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Initial text for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). Default: empty String."
            },
            {
              "name": "prompt",
              "doc": "Prompt for this [TextArea](tools.aqua.bgw.components.uicomponents/TextArea). This gets displayed as a prompt to the user whenever the label is an empty string. Default: empty string."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
            },
            {
              "name": "visual",
              "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onTextChanged: (String) -> Unit?",
              "modifier": "var",
              "name": "onTextChanged",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/onTextChanged",
              "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the [text](tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text) of this component changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var prompt: String",
              "modifier": "var",
              "name": "prompt",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/prompt",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Prompt of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Text of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "TextField": {
      "TextField": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextField",
          "TextField"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextField.TextField",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-field\\-text-field.html",
        "details": [
          {
            "info": {
              "name": "TextField",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_FIELD_WIDTH, height: Number = DEFAULT_TEXT_FIELD_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240)))",
              "doc": "Creates a [TextField](tools.aqua.bgw.components.uicomponents/TextField)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: [DEFAULT_TEXT_FIELD_WIDTH](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: [DEFAULT_TEXT_FIELD_HEIGHT](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Initial text for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: empty String."
              },
              {
                "name": "prompt",
                "doc": "Prompt for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). This gets displayed as a prompt to the user whenever the label is an empty string. Default: empty string."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
              },
              {
                "name": "visual",
                "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextField"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextField",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-field\\index.html",
        "details": {
          "info": {
            "name": "TextField",
            "signature": "open class TextField(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TEXT_FIELD_WIDTH, height: Number = DEFAULT_TEXT_FIELD_HEIGHT, text: String = \"\", prompt: String = \"\", font: Font = Font(), visual: Visual = ColorVisual(Color(240, 240, 240))) : TextInputUIComponent",
            "doc": "A [TextField](tools.aqua.bgw.components.uicomponents/TextField) is a single line input field.\n\nWhenever user input occurs the text field gets updated.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "PasswordField",
              "link": "tools.aqua.bgw.components.uicomponents/PasswordField"
            },
            {
              "name": "TextArea",
              "link": "tools.aqua.bgw.components.uicomponents/TextArea"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: [DEFAULT_TEXT_FIELD_WIDTH](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: [DEFAULT_TEXT_FIELD_HEIGHT](tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Initial text for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). Default: empty String."
            },
            {
              "name": "prompt",
              "doc": "Prompt for this [TextField](tools.aqua.bgw.components.uicomponents/TextField). This gets displayed as a prompt to the user whenever the label is an empty string. Default: empty string."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used to display text."
            },
            {
              "name": "visual",
              "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onTextChanged: (String) -> Unit?",
              "modifier": "var",
              "name": "onTextChanged",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/onTextChanged",
              "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the [text](tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text) of this component changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var prompt: String",
              "modifier": "var",
              "name": "prompt",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/prompt",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Prompt of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Text of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "TextInputUIComponent": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextInputUIComponent"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-input-u-i-component\\index.html",
        "details": {
          "info": {
            "name": "TextInputUIComponent",
            "signature": "sealed class TextInputUIComponent : UIComponent",
            "doc": "Baseclass for all UIComponents that have a text input field.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "PasswordField",
              "link": "tools.aqua.bgw.components.uicomponents/PasswordField"
            },
            {
              "name": "TextArea",
              "link": "tools.aqua.bgw.components.uicomponents/TextArea"
            },
            {
              "name": "TextField",
              "link": "tools.aqua.bgw.components.uicomponents/TextField"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "name": "width",
              "doc": "Width for this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "name": "height",
              "doc": "Height for this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "name": "text",
              "doc": "Text for this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "name": "prompt",
              "doc": "Prompt for this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "name": "font",
              "doc": "Font to be used for the [text](tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text)."
            },
            {
              "name": "visual",
              "doc": "[Visual](tools.aqua.bgw.visual/Visual) to be used as a background. Defaults to a Light-gray [ColorVisual](tools.aqua.bgw.visual/ColorVisual)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onTextChanged: (String) -> Unit?",
              "modifier": "var",
              "name": "onTextChanged",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/onTextChanged",
              "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the [text](tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text) of this component changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var prompt: String",
              "modifier": "var",
              "name": "prompt",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/prompt",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Prompt of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Text of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      },
      "onTextChanged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextInputUIComponent",
          "onTextChanged"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent.onTextChanged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-input-u-i-component\\on-text-changed.html",
        "details": [
          {
            "info": {
              "name": "onTextChanged",
              "signature": "var onTextChanged: (String) -> Unit?",
              "doc": "Gets invoked whenever the [text](tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text) of this component changes."
            },
            "seeAlso": [
              {
                "name": "TextInputUIComponent.text",
                "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text"
              }
            ]
          }
        ]
      },
      "promptProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextInputUIComponent",
          "promptProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent.promptProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-input-u-i-component\\prompt-property.html",
        "details": [
          {
            "info": {
              "name": "promptProperty",
              "signature": "val promptProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the prompt of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            "seeAlso": [
              {
                "name": "TextInputUIComponent.prompt",
                "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/prompt"
              }
            ]
          }
        ]
      },
      "prompt": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextInputUIComponent",
          "prompt"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent.prompt",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-input-u-i-component\\prompt.html",
        "details": [
          {
            "info": {
              "name": "prompt",
              "signature": "var prompt: String",
              "doc": "Prompt of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            }
          }
        ]
      },
      "textProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextInputUIComponent",
          "textProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent.textProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-input-u-i-component\\text-property.html",
        "details": [
          {
            "info": {
              "name": "textProperty",
              "signature": "val textProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the text of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            },
            "seeAlso": [
              {
                "name": "TextInputUIComponent.text",
                "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent/text"
              }
            ]
          }
        ]
      },
      "text": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "TextInputUIComponent",
          "text"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.TextInputUIComponent.text",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-text-input-u-i-component\\text.html",
        "details": [
          {
            "info": {
              "name": "text",
              "signature": "var text: String",
              "doc": "Text of this [TextInputUIComponent](tools.aqua.bgw.components.uicomponents/TextInputUIComponent)."
            }
          }
        ]
      }
    },
    "ToggleButton": {
      "ToggleButton": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleButton",
          "ToggleButton"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleButton.ToggleButton",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-button\\-toggle-button.html",
        "details": [
          {
            "info": {
              "name": "ToggleButton",
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOGGLE_BUTTON_WIDTH, height: Number = DEFAULT_TOGGLE_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isWrapText: Boolean = false, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY)",
              "doc": "Creates a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: 0."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: 0."
              },
              {
                "name": "width",
                "doc": "Width for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: [DEFAULT_TOGGLE_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Height for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: [DEFAULT_TOGGLE_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_HEIGHT)."
              },
              {
                "name": "text",
                "doc": "Text to be displayed for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "alignment",
                "doc": "Alignment to be used for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
              },
              {
                "name": "isWrapText",
                "doc": "Defines if text should be wrapped, if it exceeds the label's width. Default: false."
              },
              {
                "name": "isSelected",
                "doc": "The initial state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: false."
              },
              {
                "name": "toggleGroup",
                "doc": "The ToggleGroup of this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: empty group."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleButton"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleButton",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-button\\index.html",
        "details": {
          "info": {
            "name": "ToggleButton",
            "signature": "class ToggleButton(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOGGLE_BUTTON_WIDTH, height: Number = DEFAULT_TOGGLE_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isWrapText: Boolean = false, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY) : BinaryStateButton",
            "doc": "A [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) may be used as a [Button](tools.aqua.bgw.components.uicomponents/Button) that is either selected or not selected. An important feature of ToggleButtons is the [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).\n\nToggleGroups can be used to group ToggleButtons.\n\nAll ToggleButtons that keep the same instance of a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) belong to that [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup). Only one [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) may be selected in a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup). This means whenever a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) changes its selected state to true, all other ToggleButtons in the same [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) get deselected.\n\nAn exception to this rule is, whenever a new [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) that is currently selected gets added to the [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ToggleGroup",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: 0."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: 0."
            },
            {
              "name": "width",
              "doc": "Width for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: [DEFAULT_TOGGLE_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Height for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: [DEFAULT_TOGGLE_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_HEIGHT)."
            },
            {
              "name": "text",
              "doc": "Text to be displayed for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "alignment",
              "doc": "Alignment to be used for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            {
              "name": "isWrapText",
              "doc": "Defines if text should be wrapped, if it exceeds the label's width. Default: false."
            },
            {
              "name": "isSelected",
              "doc": "The initial state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: false."
            },
            {
              "name": "toggleGroup",
              "doc": "The ToggleGroup of this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: empty group."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number = 0, posY: Number = 0, width: Number = DEFAULT_TOGGLE_BUTTON_WIDTH, height: Number = DEFAULT_TOGGLE_BUTTON_HEIGHT, text: String = \"\", font: Font = Font(), alignment: Alignment = Alignment.CENTER_LEFT, isWrapText: Boolean = false, isSelected: Boolean = false, toggleGroup: ToggleGroup = ToggleGroup(), visual: Visual = Visual.EMPTY)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Horizontal coordinate for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "Vertical coordinate for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: 0."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOGGLE_BUTTON_WIDTH",
                  "doc": "Width for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: [DEFAULT_TOGGLE_BUTTON_WIDTH](tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_TOGGLE_BUTTON_HEIGHT",
                  "doc": "Height for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: [DEFAULT_TOGGLE_BUTTON_HEIGHT](tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Text to be displayed for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER_LEFT",
                  "doc": "Alignment to be used for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
                },
                {
                  "modifier": "",
                  "name": "isWrapText",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "Defines if text should be wrapped, if it exceeds the label's width. Default: false."
                },
                {
                  "modifier": "",
                  "name": "isSelected",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "The initial state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: false."
                },
                {
                  "modifier": "",
                  "name": "toggleGroup",
                  "type": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)",
                  "defaultValue": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)()",
                  "doc": "The ToggleGroup of this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton). Default: empty group."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "[Visual](tools.aqua.bgw.visual/Visual).EMPTY",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual). Default: [Visual.EMPTY](tools.aqua.bgw.visual/Visual/Companion/EMPTY)ls.aqua.bgw.visual/Visual).EMPTY."
                }
              ],
              "doc": "Creates a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isSelected: Boolean",
              "modifier": "var",
              "name": "isSelected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/isSelected",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Selected state for this [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isWrapText: Boolean",
              "modifier": "var",
              "name": "isWrapText",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/isWrapText",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Defines if text should be wrapped, if it exceeds the [Label](tools.aqua.bgw.components.uicomponents/Label)'s width."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDeselected: () -> Unit?",
              "modifier": "var",
              "name": "onDeselected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onDeselected",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is deselected."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onSelected: () -> Unit?",
              "modifier": "var",
              "name": "onSelected",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelected",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) is selected."
            },
            {
              "signature": "var onSelectionChanged: (Boolean) -> Unit?",
              "modifier": "var",
              "name": "onSelectionChanged",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/onSelectionChanged",
              "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when the selection state of this [BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton) changes."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Label of this [LabeledUIComponent](tools.aqua.bgw.components.uicomponents/LabeledUIComponent)."
            },
            {
              "signature": "var toggleGroup: ToggleGroup",
              "modifier": "var",
              "name": "toggleGroup",
              "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton/toggleGroup",
              "type": "[ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)",
              "defaultValue": "",
              "doc": "The ToggleGroup of this ToggleButton."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "ToggleGroup": {
      "ToggleGroup": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleGroup",
          "ToggleGroup"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleGroup.ToggleGroup",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-group\\-toggle-group.html",
        "details": [
          {
            "info": {
              "name": "ToggleGroup",
              "signature": "constructor()",
              "doc": "Creates a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup)."
            }
          }
        ]
      },
      "id": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleGroup",
          "id"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleGroup.id",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-group\\id.html",
        "details": [
          {
            "info": {
              "name": "id",
              "signature": "val id: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleGroup"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleGroup",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-group\\index.html",
        "details": {
          "info": {
            "name": "ToggleGroup",
            "signature": "open class ToggleGroup",
            "doc": "A [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) may be set as an attribute in [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) or [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton).\n\nAll Buttons that keep the same instance of a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) belong to that [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup). Only one Button may be selected in a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup). This means whenever a Button changes its selected state to true, all other Buttons in the same [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) get deselected.\n\nAn exception to this rule is, whenever a new [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) or [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) that is currently selected gets added to the [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "ToggleButton",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleButton"
            },
            {
              "name": "RadioButton",
              "link": "tools.aqua.bgw.components.uicomponents/RadioButton"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Creates a [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var onDeselected: (BinaryStateButton) -> Unit?",
              "modifier": "var",
              "name": "onDeselected",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup/onDeselected",
              "type": "([BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) or [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) gets deselected."
            },
            {
              "signature": "var onSelected: (BinaryStateButton) -> Unit?",
              "modifier": "var",
              "name": "onSelected",
              "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup/onSelected",
              "type": "([BinaryStateButton](tools.aqua.bgw.components.uicomponents/BinaryStateButton)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets called when a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) or [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) gets selected."
            }
          ]
        }
      },
      "onDeselected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleGroup",
          "onDeselected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleGroup.onDeselected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-group\\on-deselected.html",
        "details": [
          {
            "info": {
              "name": "onDeselected",
              "signature": "var onDeselected: (BinaryStateButton) -> Unit?",
              "doc": "Gets called when a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) or [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) gets deselected."
            },
            "seeAlso": [
              {
                "name": "ToggleGroup.onSelected",
                "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup/onSelected"
              }
            ]
          }
        ]
      },
      "onSelected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "ToggleGroup",
          "onSelected"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.ToggleGroup.onSelected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-toggle-group\\on-selected.html",
        "details": [
          {
            "info": {
              "name": "onSelected",
              "signature": "var onSelected: (BinaryStateButton) -> Unit?",
              "doc": "Gets called when a [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) or [RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) gets selected."
            },
            "seeAlso": [
              {
                "name": "ToggleGroup.onDeselected",
                "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup/onDeselected"
              }
            ]
          }
        ]
      }
    },
    "UIComponent": {
      "UIComponent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "UIComponent"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.UIComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\-u-i-component.html",
        "details": [
          {
            "info": {
              "name": "UIComponent",
              "signature": "constructor(posX: Number, posY: Number, width: Number, height: Number, font: Font, visual: Visual)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "posX",
                "doc": "Horizontal coordinate for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
              },
              {
                "name": "posY",
                "doc": "Vertical coordinate for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
              },
              {
                "name": "width",
                "doc": "Width for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
              },
              {
                "name": "height",
                "doc": "Height for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
              },
              {
                "name": "font",
                "doc": "Font for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
              },
              {
                "name": "visual",
                "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
              }
            ]
          }
        ]
      },
      "backgroundStyleProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "backgroundStyleProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.backgroundStyleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\background-style-property.html",
        "details": [
          {
            "info": {
              "name": "backgroundStyleProperty",
              "signature": "val backgroundStyleProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background.\n\nThis gets applied last, so it may override any changes made via other fields and functions of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Critical failures, bugs or other undefined behaviour could occur when using this feature."
            },
            "seeAlso": [
              {
                "name": "UIComponent.backgroundStyle",
                "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle"
              }
            ],
            "deprecated": {
              "description": "The property is no longer used as of BGW 1.0.",
              "replaceWith": "this.visual.style"
            }
          }
        ]
      },
      "backgroundStyle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "backgroundStyle"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.backgroundStyle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\background-style.html",
        "details": [
          {
            "info": {
              "name": "backgroundStyle",
              "signature": "var backgroundStyle: String",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background.\n\nThis gets applied last, so it may override any changes made via other fields and functions of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Critical failures, bugs or other undefined behaviour could occur when using this feature."
            },
            "deprecated": {
              "description": "CSS Styling is no longer supported as of BGW 1.0.",
              "replaceWith": "this.visual.style"
            }
          }
        ]
      },
      "componentStyleProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "componentStyleProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.componentStyleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\component-style-property.html",
        "details": [
          {
            "info": {
              "name": "componentStyleProperty",
              "signature": "val componentStyleProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent).\n\nThis gets applied last, so it may override any changes made via other fields and functions of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Critical failures, bugs or other undefined behaviour could occur when using this feature."
            },
            "seeAlso": [
              {
                "name": "UIComponent.componentStyle",
                "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle"
              }
            ],
            "deprecated": {
              "description": "The property is no longer used as of BGW 1.0.",
              "replaceWith": "this.visual.style"
            }
          }
        ]
      },
      "componentStyle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "componentStyle"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.componentStyle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\component-style.html",
        "details": [
          {
            "info": {
              "name": "componentStyle",
              "signature": "var componentStyle: String",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent).\n\nThis gets applied last, so it may override any changes made via other fields and functions of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Critical failures, bugs or other undefined behaviour could occur when using this feature."
            },
            "deprecated": {
              "description": "CSS Styling is no longer supported as of BGW 1.0.",
              "replaceWith": "this.visual.style"
            }
          }
        ]
      },
      "fontProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "fontProperty"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.fontProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\font-property.html",
        "details": [
          {
            "info": {
              "name": "fontProperty",
              "signature": "val fontProperty: Property<Font>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            "seeAlso": [
              {
                "name": "Font",
                "link": "tools.aqua.bgw.util/Font"
              }
            ]
          }
        ]
      },
      "font": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent",
          "font"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent.font",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\font.html",
        "details": [
          {
            "info": {
              "name": "font",
              "signature": "var font: Font",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            "seeAlso": [
              {
                "name": "Font",
                "link": "tools.aqua.bgw.util/Font"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.components.uicomponents",
          "UIComponent"
        ],
        "package": "tools.aqua.bgw.components.uicomponents.UIComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\-u-i-component\\index.html",
        "details": {
          "info": {
            "name": "UIComponent",
            "signature": "abstract class UIComponent(posX: Number, posY: Number, width: Number, height: Number, font: Font, visual: Visual) : StaticComponentView<UIComponent>",
            "doc": "Baseclass for all UI components.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ColorPicker",
              "link": "tools.aqua.bgw.components.uicomponents/ColorPicker"
            },
            {
              "name": "ComboBox",
              "link": "tools.aqua.bgw.components.uicomponents/ComboBox"
            },
            {
              "name": "LabeledUIComponent",
              "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent"
            },
            {
              "name": "ProgressBar",
              "link": "tools.aqua.bgw.components.uicomponents/ProgressBar"
            },
            {
              "name": "StructuredDataView",
              "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView"
            },
            {
              "name": "TextInputUIComponent",
              "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent"
            }
          ],
          "parameters": [
            {
              "name": "posX",
              "doc": "Horizontal coordinate for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "name": "posY",
              "doc": "Vertical coordinate for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "name": "width",
              "doc": "Width for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "name": "height",
              "doc": "Height for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "name": "font",
              "doc": "Font for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "name": "visual",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(posX: Number, posY: Number, width: Number, height: Number, font: Font, visual: Visual)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Horizontal coordinate for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Vertical coordinate for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
                },
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Width for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "doc": "Height for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "",
                  "doc": "Font for this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
                },
                {
                  "modifier": "",
                  "name": "visual",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "",
                  "doc": "Background [Visual](tools.aqua.bgw.visual/Visual)."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var actualHeight: Double",
              "modifier": "var",
              "name": "actualHeight",
              "link": "tools.aqua.bgw.components/ComponentView/actualHeight",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosX: Double",
              "modifier": "var",
              "name": "actualPosX",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualPosY: Double",
              "modifier": "var",
              "name": "actualPosY",
              "link": "tools.aqua.bgw.components/ComponentView/actualPosY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var actualWidth: Double",
              "modifier": "var",
              "name": "actualWidth",
              "link": "tools.aqua.bgw.components/ComponentView/actualWidth",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The actual [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView) considering scale."
            },
            {
              "signature": "var backgroundStyle: String",
              "modifier": "var",
              "name": "backgroundStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/backgroundStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)'s background."
            },
            {
              "signature": "var componentStyle: String",
              "modifier": "var",
              "name": "componentStyle",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/componentStyle",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Css style that gets applied to this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent)."
            },
            {
              "signature": "var dropAcceptor: (DragEvent) -> Boolean?",
              "modifier": "var",
              "name": "dropAcceptor",
              "link": "tools.aqua.bgw.components/ComponentView/dropAcceptor",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)?",
              "defaultValue": "",
              "doc": "Returns whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is a valid drop target for the dragged component in the given [DragEvent](tools.aqua.bgw.event/DragEvent) or not."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.components.uicomponents/UIComponent/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "[Font](tools.aqua.bgw.util/Font) of this [UIComponent](tools.aqua.bgw.components.uicomponents/UIComponent). Usage depends on subclass."
            },
            {
              "signature": "var height: Double",
              "modifier": "var",
              "name": "height",
              "link": "tools.aqua.bgw.components/ComponentView/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [height](tools.aqua.bgw.components/ComponentView/height) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isDisabled: Boolean",
              "modifier": "var",
              "name": "isDisabled",
              "link": "tools.aqua.bgw.components/ComponentView/isDisabled",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls if user input events cause input functions of this [ComponentView](tools.aqua.bgw.components/ComponentView) to get invoked."
            },
            {
              "signature": "var isFocusable: Boolean",
              "modifier": "var",
              "name": "isFocusable",
              "link": "tools.aqua.bgw.components/ComponentView/isFocusable",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Controls whether this [ComponentView](tools.aqua.bgw.components/ComponentView) is focusable or not."
            },
            {
              "signature": "var isLayoutFromCenter: Boolean",
              "modifier": "var",
              "name": "isLayoutFromCenter",
              "link": "tools.aqua.bgw.components/ComponentView/isLayoutFromCenter",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Field that indicates whether posX and posY denote the center or top left of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var isVisible: Boolean",
              "modifier": "var",
              "name": "isVisible",
              "link": "tools.aqua.bgw.components/ComponentView/isVisible",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Visibility of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var layoutBounds: CoordinatePlain",
              "modifier": "var",
              "name": "layoutBounds",
              "link": "tools.aqua.bgw.components/ComponentView/layoutBounds",
              "type": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "defaultValue": "",
              "doc": "Returns a [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) containing the component's corner Coordinates and its layout bounds."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.components/ComponentView/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Name field only for debugging purposes. Has no effect on rendering."
            },
            {
              "signature": "var onDragDropped: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragDropped",
              "link": "tools.aqua.bgw.components/ComponentView/onDragDropped",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever a drag and drop gesture finishes over this [ComponentView](tools.aqua.bgw.components/ComponentView) and the [dropAcceptor](tools.aqua.bgw.components/ComponentView/dropAcceptor) returns true for the given [DragEvent](tools.aqua.bgw.event/DragEvent)."
            },
            {
              "signature": "var onDragGestureEntered: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureEntered",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onDragGestureExited: (DragEvent) -> Unit?",
              "modifier": "var",
              "name": "onDragGestureExited",
              "link": "tools.aqua.bgw.components/ComponentView/onDragGestureExited",
              "type": "([DragEvent](tools.aqua.bgw.event/DragEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [DragEvent](tools.aqua.bgw.event/DragEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView) while performing a drag gesture."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.components/ComponentView/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed while this [ComponentView](tools.aqua.bgw.components/ComponentView) has focus. Gets invoked after [onKeyPressed](tools.aqua.bgw.components/ComponentView/onKeyPressed)."
            },
            {
              "signature": "var onMouseClicked: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseClicked",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseClicked",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is clicked inside this [ComponentView](tools.aqua.bgw.components/ComponentView). Gets invoked after [onMousePressed](tools.aqua.bgw.components/ComponentView/onMousePressed) and [onMouseReleased](tools.aqua.bgw.components/ComponentView/onMouseReleased)."
            },
            {
              "signature": "var onMouseEntered: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseEntered",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseEntered",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse enters this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseExited: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseExited",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseExited",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse leaves this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMousePressed: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMousePressed",
              "link": "tools.aqua.bgw.components/ComponentView/onMousePressed",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is pressed inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onMouseReleased: (MouseEvent) -> Unit?",
              "modifier": "var",
              "name": "onMouseReleased",
              "link": "tools.aqua.bgw.components/ComponentView/onMouseReleased",
              "type": "([MouseEvent](tools.aqua.bgw.event/MouseEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [MouseEvent](tools.aqua.bgw.event/MouseEvent) whenever the mouse is released inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var onWheel: (WheelEvent) -> Unit?",
              "modifier": "var",
              "name": "onWheel",
              "link": "tools.aqua.bgw.components/ComponentView/onWheel",
              "type": "([WheelEvent](tools.aqua.bgw.event/WheelEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [WheelEvent](tools.aqua.bgw.event/WheelEvent) whenever the mouse wheel is turned while the mouse is inside this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.components/ComponentView/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var parent: ComponentView?",
              "modifier": "var",
              "name": "parent",
              "link": "tools.aqua.bgw.components/ComponentView/parent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)?",
              "defaultValue": "",
              "doc": "The parent of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posX: Double",
              "modifier": "var",
              "name": "posX",
              "link": "tools.aqua.bgw.components/ComponentView/posX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var posY: Double",
              "modifier": "var",
              "name": "posY",
              "link": "tools.aqua.bgw.components/ComponentView/posY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical position of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var rotation: Double",
              "modifier": "var",
              "name": "rotation",
              "link": "tools.aqua.bgw.components/ComponentView/rotation",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Rotation of this [ComponentView](tools.aqua.bgw.components/ComponentView) in degrees."
            },
            {
              "signature": "var scale: Double",
              "modifier": "var",
              "name": "scale",
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleX: Double",
              "modifier": "var",
              "name": "scaleX",
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Horizontal scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var scaleY: Double",
              "modifier": "var",
              "name": "scaleY",
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Vertical scale of this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "open var visual: Visual",
              "modifier": "var",
              "name": "visual",
              "link": "tools.aqua.bgw.components/ComponentView/visual",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Current [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var width: Double",
              "modifier": "var",
              "name": "width",
              "link": "tools.aqua.bgw.components/ComponentView/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [width](tools.aqua.bgw.components/ComponentView/width) for this [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "var zIndex: Int",
              "modifier": "var",
              "name": "zIndex",
              "link": "tools.aqua.bgw.components/ComponentView/zIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Order of [ComponentView](tools.aqua.bgw.components/ComponentView) inside of [parent](tools.aqua.bgw.components/ComponentView/parent)."
            }
          ],
          "functions": [
            {
              "signature": "fun offset(offsetX: Number, offsetY: Number)",
              "name": "offset",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.components/ComponentView/offset",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/offset",
              "returnType": "Unit",
              "doc": "Adds an offset to this [ComponentView](tools.aqua.bgw.components/ComponentView)'s Position.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFromParent(): ComponentView",
              "name": "removeFromParent",
              "link": "tools.aqua.bgw.components/ComponentView/removeFromParent",
              "returnType": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "doc": "Removes this component from its parent."
            },
            {
              "signature": "fun reposition(posX: Number, posY: Number)",
              "name": "reposition",
              "parameters": [
                {
                  "modifier": "",
                  "name": "posX",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "posY",
                  "link": "tools.aqua.bgw.components/ComponentView/reposition",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/reposition",
              "returnType": "Unit",
              "doc": "Repositions this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified coordinates.",
              "isSuspend": false
            },
            {
              "signature": "fun resize(width: Number, height: Number)",
              "name": "resize",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "height",
                  "link": "tools.aqua.bgw.components/ComponentView/resize",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/resize",
              "returnType": "Unit",
              "doc": "Resizes this [ComponentView](tools.aqua.bgw.components/ComponentView) to the specified [width](tools.aqua.bgw.components/ComponentView/resize) and [height](tools.aqua.bgw.components/ComponentView/resize).",
              "isSuspend": false
            },
            {
              "signature": "fun rotate(degrees: Number)",
              "name": "rotate",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.components/ComponentView/rotate",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/rotate",
              "returnType": "Unit",
              "doc": "Rotates this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given number of [degrees](tools.aqua.bgw.components/ComponentView/rotate).",
              "isSuspend": false
            },
            {
              "signature": "fun scale(scalar: Number)",
              "name": "scale",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scale",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scale",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView) by the given [scalar](tools.aqua.bgw.components/ComponentView/scale).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleX(scalar: Number)",
              "name": "scaleX",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleX",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s width by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleX).",
              "isSuspend": false
            },
            {
              "signature": "fun scaleY(scalar: Number)",
              "name": "scaleY",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.components/ComponentView/scaleY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.components/ComponentView/scaleY",
              "returnType": "Unit",
              "doc": "Scales this [ComponentView](tools.aqua.bgw.components/ComponentView)'s height by the given [scalar](tools.aqua.bgw.components/ComponentView/scaleY).",
              "isSuspend": false
            },
            {
              "signature": "fun toBack()",
              "name": "toBack",
              "link": "tools.aqua.bgw.components/ComponentView/toBack",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the back inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            },
            {
              "signature": "fun toFront()",
              "name": "toFront",
              "link": "tools.aqua.bgw.components/ComponentView/toFront",
              "returnType": "Unit",
              "doc": "Puts the [ComponentView](tools.aqua.bgw.components/ComponentView) to the front inside its [parent](tools.aqua.bgw.components/ComponentView/parent) and Changes its [zIndex](tools.aqua.bgw.components/ComponentView/zIndex) accordingly."
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.components.uicomponents"
      ],
      "package": "tools.aqua.bgw.components.uicomponents",
      "path": "example\\htmlPartial\\tools.aqua.bgw.components.uicomponents\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "sealed class BinaryStateButton : LabeledUIComponent",
          "doc": "",
          "tags": {
            "modifiers": [
              "sealed"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "BinaryStateButton",
            "doc": "Baseclass for ToggleButtons and RadioButtons.",
            "link": "tools.aqua.bgw.components.uicomponents/BinaryStateButton"
          },
          {
            "name": "Button",
            "doc": "A simple [Button](tools.aqua.bgw.components.uicomponents/Button) with a text.",
            "link": "tools.aqua.bgw.components.uicomponents/Button"
          },
          {
            "name": "CheckBox",
            "doc": "A simple [CheckBox](tools.aqua.bgw.components.uicomponents/CheckBox) with a text.",
            "link": "tools.aqua.bgw.components.uicomponents/CheckBox"
          },
          {
            "name": "ColorPicker",
            "doc": "A [ColorPicker](tools.aqua.bgw.components.uicomponents/ColorPicker) that allows to choose a [Color](tools.aqua.bgw.core/Color).",
            "link": "tools.aqua.bgw.components.uicomponents/ColorPicker"
          },
          {
            "name": "ComboBox",
            "doc": "A standard [ComboBox](tools.aqua.bgw.components.uicomponents/ComboBox) that may be populated with items of specified type parameter.",
            "link": "tools.aqua.bgw.components.uicomponents/ComboBox"
          },
          {
            "name": "Label",
            "doc": "A basic [Label](tools.aqua.bgw.components.uicomponents/Label) displaying text.",
            "link": "tools.aqua.bgw.components.uicomponents/Label"
          },
          {
            "name": "LabeledUIComponent",
            "doc": "Baseclass for all UIComponents that have a label.",
            "link": "tools.aqua.bgw.components.uicomponents/LabeledUIComponent"
          },
          {
            "name": "ListView",
            "doc": "A [ListView](tools.aqua.bgw.components.uicomponents/ListView) displaying its items next to each other in the given orientation.",
            "link": "tools.aqua.bgw.components.uicomponents/ListView"
          },
          {
            "name": "Orientation",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for orientations HORIZONTAL and VERTICAL.",
            "link": "tools.aqua.bgw.components.uicomponents/Orientation"
          },
          {
            "name": "PasswordField",
            "doc": "A [PasswordField](tools.aqua.bgw.components.uicomponents/PasswordField) is a single line input field that shows stars instead of typed text.",
            "link": "tools.aqua.bgw.components.uicomponents/PasswordField"
          },
          {
            "name": "ProgressBar",
            "doc": "A [ProgressBar](tools.aqua.bgw.components.uicomponents/ProgressBar).",
            "link": "tools.aqua.bgw.components.uicomponents/ProgressBar"
          },
          {
            "name": "RadioButton",
            "doc": "[RadioButton](tools.aqua.bgw.components.uicomponents/RadioButton) is analogous to a ToggleButton with a different visual representation but cannot be deselected.",
            "link": "tools.aqua.bgw.components.uicomponents/RadioButton"
          },
          {
            "name": "SelectionMode",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) indicating allowed selection mode.",
            "link": "tools.aqua.bgw.components.uicomponents/SelectionMode"
          },
          {
            "name": "StructuredDataView",
            "doc": "A [StructuredDataView](tools.aqua.bgw.components.uicomponents/StructuredDataView) displaying its items with given format function.",
            "link": "tools.aqua.bgw.components.uicomponents/StructuredDataView"
          },
          {
            "name": "TableColumn",
            "doc": "A [TableColumn](tools.aqua.bgw.components.uicomponents/TableColumn) may be used to represent a column in a TableView.",
            "link": "tools.aqua.bgw.components.uicomponents/TableColumn"
          },
          {
            "name": "TableView",
            "doc": "A [TableView](tools.aqua.bgw.components.uicomponents/TableView) may be used to visualize a data table.",
            "link": "tools.aqua.bgw.components.uicomponents/TableView"
          },
          {
            "name": "TextArea",
            "doc": "A [TextArea](tools.aqua.bgw.components.uicomponents/TextArea) is a multi line input field.",
            "link": "tools.aqua.bgw.components.uicomponents/TextArea"
          },
          {
            "name": "TextField",
            "doc": "A [TextField](tools.aqua.bgw.components.uicomponents/TextField) is a single line input field.",
            "link": "tools.aqua.bgw.components.uicomponents/TextField"
          },
          {
            "name": "TextInputUIComponent",
            "doc": "Baseclass for all UIComponents that have a text input field.",
            "link": "tools.aqua.bgw.components.uicomponents/TextInputUIComponent"
          },
          {
            "name": "ToggleButton",
            "doc": "A [ToggleButton](tools.aqua.bgw.components.uicomponents/ToggleButton) may be used as a Button that is either selected or not selected. An important feature of ToggleButtons is the [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup).",
            "link": "tools.aqua.bgw.components.uicomponents/ToggleButton"
          },
          {
            "name": "ToggleGroup",
            "doc": "A [ToggleGroup](tools.aqua.bgw.components.uicomponents/ToggleGroup) may be set as an attribute in ToggleButton or RadioButton.",
            "link": "tools.aqua.bgw.components.uicomponents/ToggleGroup"
          },
          {
            "name": "UIComponent",
            "doc": "Baseclass for all UI components.",
            "link": "tools.aqua.bgw.components.uicomponents/UIComponent"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.core": {
    "Alignment": {
      "BOTTOM_CENTER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "BOTTOM_CENTER"
          ],
          "package": "tools.aqua.bgw.core.Alignment.BOTTOM_CENTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-b-o-t-t-o-m_-c-e-n-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "BOTTOM_CENTER",
              "signature": "BOTTOM_CENTER",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the bottom centered horizontally.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "BOTTOM_LEFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "BOTTOM_LEFT"
          ],
          "package": "tools.aqua.bgw.core.Alignment.BOTTOM_LEFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-b-o-t-t-o-m_-l-e-f-t\\index.html",
          "details": {
            "info": {
              "name": "BOTTOM_LEFT",
              "signature": "BOTTOM_LEFT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) in the bottom left corner.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "BOTTOM_RIGHT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "BOTTOM_RIGHT"
          ],
          "package": "tools.aqua.bgw.core.Alignment.BOTTOM_RIGHT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-b-o-t-t-o-m_-r-i-g-h-t\\index.html",
          "details": {
            "info": {
              "name": "BOTTOM_RIGHT",
              "signature": "BOTTOM_RIGHT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) in the bottom right corner.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "CENTER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "CENTER"
          ],
          "package": "tools.aqua.bgw.core.Alignment.CENTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-c-e-n-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "CENTER",
              "signature": "CENTER",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) centered horizontally and vertically.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "CENTER_LEFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "CENTER_LEFT"
          ],
          "package": "tools.aqua.bgw.core.Alignment.CENTER_LEFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-c-e-n-t-e-r_-l-e-f-t\\index.html",
          "details": {
            "info": {
              "name": "CENTER_LEFT",
              "signature": "CENTER_LEFT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the left centered vertically.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "CENTER_RIGHT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "CENTER_RIGHT"
          ],
          "package": "tools.aqua.bgw.core.Alignment.CENTER_RIGHT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-c-e-n-t-e-r_-r-i-g-h-t\\index.html",
          "details": {
            "info": {
              "name": "CENTER_RIGHT",
              "signature": "CENTER_RIGHT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the right centered vertically.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "Companion"
          ],
          "package": "tools.aqua.bgw.core.Alignment.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "functions": [
              {
                "signature": "fun of(v: VerticalAlignment, h: HorizontalAlignment): Alignment",
                "name": "of",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "v",
                    "link": "tools.aqua.bgw.core/Alignment/Companion/of",
                    "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                    "defaultValue": "",
                    "isLambda": false
                  },
                  {
                    "modifier": "",
                    "name": "h",
                    "link": "tools.aqua.bgw.core/Alignment/Companion/of",
                    "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.core/Alignment/Companion/of",
                "returnType": "[Alignment](tools.aqua.bgw.core/Alignment)",
                "doc": "Creates a unified [Alignment](tools.aqua.bgw.core/Alignment) instance out of [VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment) and [HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment).",
                "isSuspend": false
              }
            ]
          }
        },
        "of": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "Companion",
            "of"
          ],
          "package": "tools.aqua.bgw.core.Alignment.Companion.of",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-companion\\of.html",
          "details": [
            {
              "info": {
                "name": "of",
                "signature": "fun of(v: VerticalAlignment, h: HorizontalAlignment): Alignment",
                "doc": "Creates a unified [Alignment](tools.aqua.bgw.core/Alignment) instance out of [VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment) and [HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)."
              },
              "seeAlso": [
                {
                  "name": "VerticalAlignment",
                  "link": "tools.aqua.bgw.core/VerticalAlignment"
                },
                {
                  "name": "HorizontalAlignment",
                  "link": "tools.aqua.bgw.core/HorizontalAlignment"
                }
              ],
              "since": "0.1",
              "parameters": [
                {
                  "name": "v",
                  "doc": "Vertical component of [Alignment](tools.aqua.bgw.core/Alignment)."
                },
                {
                  "name": "h",
                  "doc": "Horizontal component [Alignment](tools.aqua.bgw.core/Alignment)."
                }
              ]
            }
          ]
        }
      },
      "TOP_CENTER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "TOP_CENTER"
          ],
          "package": "tools.aqua.bgw.core.Alignment.TOP_CENTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-t-o-p_-c-e-n-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "TOP_CENTER",
              "signature": "TOP_CENTER",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the top centered horizontally.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "TOP_LEFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "TOP_LEFT"
          ],
          "package": "tools.aqua.bgw.core.Alignment.TOP_LEFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-t-o-p_-l-e-f-t\\index.html",
          "details": {
            "info": {
              "name": "TOP_LEFT",
              "signature": "TOP_LEFT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) in the top left corner.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "TOP_RIGHT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Alignment",
            "TOP_RIGHT"
          ],
          "package": "tools.aqua.bgw.core.Alignment.TOP_RIGHT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\-t-o-p_-r-i-g-h-t\\index.html",
          "details": {
            "info": {
              "name": "TOP_RIGHT",
              "signature": "TOP_RIGHT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) in the top right corner.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val horizontalAlignment: HorizontalAlignment",
                "modifier": "val",
                "name": "horizontalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
                "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                "defaultValue": "",
                "doc": "Horizontal alignment component."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val verticalAlignment: VerticalAlignment",
                "modifier": "val",
                "name": "verticalAlignment",
                "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
                "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                "defaultValue": "",
                "doc": "Vertical alignment component."
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Alignment",
          "entries"
        ],
        "package": "tools.aqua.bgw.core.Alignment.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<Alignment>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "horizontalAlignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Alignment",
          "horizontalAlignment"
        ],
        "package": "tools.aqua.bgw.core.Alignment.horizontalAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\horizontal-alignment.html",
        "details": [
          {
            "info": {
              "name": "horizontalAlignment",
              "signature": "val horizontalAlignment: HorizontalAlignment",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Alignment"
        ],
        "package": "tools.aqua.bgw.core.Alignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\index.html",
        "details": {
          "info": {
            "name": "Alignment",
            "signature": "enum Alignment : Enum<Alignment>",
            "doc": "Used to define a centering behaviour. Encapsulates [VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment) and [HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment).",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "seeAlso": [
            {
              "name": "VerticalAlignment",
              "link": "tools.aqua.bgw.core/VerticalAlignment"
            },
            {
              "name": "HorizontalAlignment",
              "link": "tools.aqua.bgw.core/HorizontalAlignment"
            }
          ],
          "since": "0.1"
        },
        "members": {
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.core/Alignment/Companion"
            }
          ],
          "properties": [
            {
              "signature": "val entries: EnumEntries<Alignment>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.core/Alignment/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[Alignment](tools.aqua.bgw.core/Alignment)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val horizontalAlignment: HorizontalAlignment",
              "modifier": "val",
              "name": "horizontalAlignment",
              "link": "tools.aqua.bgw.core/Alignment/horizontalAlignment",
              "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
              "defaultValue": "",
              "doc": "Horizontal alignment component."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val verticalAlignment: VerticalAlignment",
              "modifier": "val",
              "name": "verticalAlignment",
              "link": "tools.aqua.bgw.core/Alignment/verticalAlignment",
              "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
              "defaultValue": "",
              "doc": "Vertical alignment component."
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): Alignment",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.core/Alignment/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Alignment/valueOf",
              "returnType": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<Alignment>",
              "name": "values",
              "link": "tools.aqua.bgw.core/Alignment/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[Alignment](tools.aqua.bgw.core/Alignment)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Alignment",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.core.Alignment.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): Alignment",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Alignment",
          "values"
        ],
        "package": "tools.aqua.bgw.core.Alignment.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<Alignment>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      },
      "verticalAlignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Alignment",
          "verticalAlignment"
        ],
        "package": "tools.aqua.bgw.core.Alignment.verticalAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-alignment\\vertical-alignment.html",
        "details": [
          {
            "info": {
              "name": "verticalAlignment",
              "signature": "val verticalAlignment: VerticalAlignment",
              "doc": ""
            }
          }
        ]
      }
    },
    "AspectRatio": {
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "AspectRatio",
            "Companion"
          ],
          "package": "tools.aqua.bgw.core.AspectRatio.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-aspect-ratio\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "functions": [
              {
                "signature": "fun of(width: Number = DEFAULT_WINDOW_WIDTH, height: Number = DEFAULT_WINDOW_HEIGHT): AspectRatio",
                "name": "of",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "width",
                    "link": "tools.aqua.bgw.core/AspectRatio/Companion/of",
                    "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                    "defaultValue": "DEFAULT_WINDOW_WIDTH",
                    "isLambda": false
                  },
                  {
                    "modifier": "",
                    "name": "height",
                    "link": "tools.aqua.bgw.core/AspectRatio/Companion/of",
                    "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                    "defaultValue": "DEFAULT_WINDOW_HEIGHT",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.core/AspectRatio/Companion/of",
                "returnType": "[AspectRatio](tools.aqua.bgw.core/AspectRatio)",
                "doc": "Creates an aspect ratio out of width and height. May be for example 1920 : 1080 as well as 16 : 9.",
                "isSuspend": false
              }
            ]
          }
        },
        "of": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "AspectRatio",
            "Companion",
            "of"
          ],
          "package": "tools.aqua.bgw.core.AspectRatio.Companion.of",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-aspect-ratio\\-companion\\of.html",
          "details": [
            {
              "info": {
                "name": "of",
                "signature": "fun of(width: Number = DEFAULT_WINDOW_WIDTH, height: Number = DEFAULT_WINDOW_HEIGHT): AspectRatio",
                "doc": "Creates an aspect ratio out of width and height. May be for example 1920 : 1080 as well as 16 : 9."
              },
              "parameters": [
                {
                  "name": "width",
                  "doc": "Width of ratio. Default: [DEFAULT_WINDOW_WIDTH](tools.aqua.bgw.core/DEFAULT_WINDOW_WIDTH)."
                },
                {
                  "name": "height",
                  "doc": "Height of ratio. Default: [DEFAULT_WINDOW_HEIGHT](tools.aqua.bgw.core/DEFAULT_WINDOW_HEIGHT)."
                }
              ]
            }
          ]
        }
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "AspectRatio"
        ],
        "package": "tools.aqua.bgw.core.AspectRatio",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-aspect-ratio\\index.html",
        "details": {
          "info": {
            "name": "AspectRatio",
            "signature": "data class AspectRatio",
            "doc": "Class representing an aspect ratio between the window sides.",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          },
          "since": "0.3"
        },
        "members": {
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.core/AspectRatio/Companion"
            }
          ]
        }
      }
    },
    "BoardGameApplication": {
      "BoardGameApplication": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "BoardGameApplication"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.BoardGameApplication",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\-board-game-application.html",
        "details": [
          {
            "info": {
              "name": "BoardGameApplication",
              "signature": "constructor(windowTitle: String = DEFAULT_WINDOW_TITLE, width: Number = DEFAULT_WINDOW_WIDTH, height: Number = DEFAULT_WINDOW_HEIGHT, windowMode: WindowMode? = null)",
              "doc": "Creates the BoardGameApplication with optional title and dimension. May only be called once per execution."
            },
            "parameters": [
              {
                "name": "windowTitle",
                "doc": "Title for the application window. Gets displayed in the title bar. Default: [DEFAULT_WINDOW_TITLE](tools.aqua.bgw.core/DEFAULT_WINDOW_TITLE)."
              },
              {
                "name": "width",
                "doc": "Initial window width. Default: [DEFAULT_WINDOW_WIDTH](tools.aqua.bgw.core/DEFAULT_WINDOW_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Initial window height. Default: [DEFAULT_WINDOW_HEIGHT](tools.aqua.bgw.core/DEFAULT_WINDOW_HEIGHT)."
              },
              {
                "name": "windowMode",
                "doc": "Initial window mode. Overrides [isMaximized](tools.aqua.bgw.core/BoardGameApplication/isMaximized) and [isFullScreen](tools.aqua.bgw.core/BoardGameApplication/isFullScreen) if passed. Refer to [WindowMode](tools.aqua.bgw.core/WindowMode) docs for further information about the effects."
              }
            ]
          },
          {
            "info": {
              "name": "BoardGameApplication",
              "signature": "constructor(windowTitle: String = DEFAULT_WINDOW_TITLE, aspectRatio: AspectRatio = AspectRatio(), windowMode: WindowMode? = null)",
              "doc": "Creates the BoardGameApplication with optional title and aspect ratio. May only be called once per execution."
            },
            "parameters": [
              {
                "name": "windowTitle",
                "doc": "Title for the application window. Gets displayed in the title bar. Default: [DEFAULT_WINDOW_TITLE](tools.aqua.bgw.core/DEFAULT_WINDOW_TITLE)."
              },
              {
                "name": "aspectRatio",
                "doc": "Initial aspect ratio of application window. Default: empty [AspectRatio](tools.aqua.bgw.core/AspectRatio) constructor."
              },
              {
                "name": "windowMode",
                "doc": "Initial window mode. Overrides [isMaximized](tools.aqua.bgw.core/BoardGameApplication/isMaximized) and [isFullScreen](tools.aqua.bgw.core/BoardGameApplication/isFullScreen) if passed. Refer to [WindowMode](tools.aqua.bgw.core/WindowMode) docs for further information about the effects."
              }
            ]
          }
        ]
      },
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "BoardGameApplication",
            "Companion"
          ],
          "package": "tools.aqua.bgw.core.BoardGameApplication.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "functions": [
              {
                "signature": "fun loadFont(path: String): Boolean",
                "name": "loadFont",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "path",
                    "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/loadFont",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/loadFont",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Loads a font file and registers it in the GUI. The default font weight is [Font.FontWeight.NORMAL](tools.aqua.bgw.util/Font/FontWeight/NORMAL). The font name is derived from the file name without the file extension.",
                "isSuspend": false
              },
              {
                "signature": "fun loadFont(path: String, fontName: String, weight: Font.FontWeight): Boolean",
                "name": "loadFont",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "path",
                    "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/loadFont",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  },
                  {
                    "modifier": "",
                    "name": "fontName",
                    "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/loadFont",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  },
                  {
                    "modifier": "",
                    "name": "weight",
                    "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/loadFont",
                    "type": "[Font.FontWeight](tools.aqua.bgw.util/Font/FontWeight)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/loadFont",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Loads a font file and registers it in the GUI.",
                "isSuspend": false
              },
              {
                "signature": "fun runOnGUIThread(task: Runnable)",
                "name": "runOnGUIThread",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "task",
                    "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/runOnGUIThread",
                    "type": "[Runnable](https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.core/BoardGameApplication/Companion/runOnGUIThread",
                "returnType": "Unit",
                "doc": "Executes given [task](tools.aqua.bgw.core/BoardGameApplication/Companion/runOnGUIThread) on the UI thread. Use this method to update properties of ComponentViews from asynchronous environments like [Animation.onFinished](tools.aqua.bgw.animation/Animation/onFinished) events. If no Application has yet been started, the [task](tools.aqua.bgw.core/BoardGameApplication/Companion/runOnGUIThread) is executed on the calling Thread. This function is Thread safe.",
                "isSuspend": false
              }
            ]
          }
        },
        "loadFont": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "BoardGameApplication",
            "Companion",
            "loadFont"
          ],
          "package": "tools.aqua.bgw.core.BoardGameApplication.Companion.loadFont",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\-companion\\load-font.html",
          "details": [
            {
              "info": {
                "name": "loadFont",
                "signature": "fun loadFont(path: String, fontName: String, weight: Font.FontWeight): Boolean",
                "doc": "Loads a font file and registers it in the GUI."
              },
              "parameters": [
                {
                  "name": "path",
                  "doc": "The font file path relative to resources and with file extension which is to be loaded"
                },
                {
                  "name": "fontName",
                  "doc": "The font name used to reference the font"
                },
                {
                  "name": "weight",
                  "doc": "The font weight used to reference the font"
                }
              ]
            },
            {
              "info": {
                "name": "loadFont",
                "signature": "fun loadFont(path: String): Boolean",
                "doc": "Loads a font file and registers it in the GUI. The default font weight is [Font.FontWeight.NORMAL](tools.aqua.bgw.util/Font/FontWeight/NORMAL). The font name is derived from the file name without the file extension."
              },
              "parameters": [
                {
                  "name": "path",
                  "doc": "The font file path relative to resources and with file extension which is to be loaded"
                }
              ]
            }
          ]
        },
        "runOnGUIThread": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "BoardGameApplication",
            "Companion",
            "runOnGUIThread"
          ],
          "package": "tools.aqua.bgw.core.BoardGameApplication.Companion.runOnGUIThread",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\-companion\\run-on-g-u-i-thread.html",
          "details": [
            {
              "info": {
                "name": "runOnGUIThread",
                "signature": "fun runOnGUIThread(task: Runnable)",
                "doc": "Executes given [task](tools.aqua.bgw.core/BoardGameApplication/Companion/runOnGUIThread) on the UI thread. Use this method to update properties of ComponentViews from asynchronous environments like [Animation.onFinished](tools.aqua.bgw.animation/Animation/onFinished) events. If no Application has yet been started, the [task](tools.aqua.bgw.core/BoardGameApplication/Companion/runOnGUIThread) is executed on the calling Thread. This function is Thread safe."
              }
            }
          ]
        }
      },
      "background": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "background"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.background",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\background.html",
        "details": [
          {
            "info": {
              "name": "background",
              "signature": "var background: Visual",
              "doc": "Background [Visual](tools.aqua.bgw.core/Scene/background) for the [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication).\n\nIt is visible in the space that appears if the application window ratio does not fit the [Scene](tools.aqua.bgw.core/Scene) ratio.\n\nDo not mix up this [Property](tools.aqua.bgw.observable.properties/Property) with the [Scene](tools.aqua.bgw.core/Scene) background [Visual](tools.aqua.bgw.core/Scene/background)."
            }
          }
        ]
      },
      "exit": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "exit"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.exit",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\exit.html",
        "details": [
          {
            "info": {
              "name": "exit",
              "signature": "fun exit()",
              "doc": "Returns the [show](tools.aqua.bgw.core/BoardGameApplication/show) function, thus closing the application window."
            }
          }
        ]
      },
      "fullscreenExitCombinationHint": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "fullscreenExitCombinationHint"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.fullscreenExitCombinationHint",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\fullscreen-exit-combination-hint.html",
        "details": [
          {
            "info": {
              "name": "fullscreenExitCombinationHint",
              "signature": "var fullscreenExitCombinationHint: String?",
              "doc": "Specifies the KeyCombination hint that will be shown upon entering fullscreen mode. Hint will only be shown if an exit combination other than 'null' has been set.\n\nA value of 'null' will result in the default text being shown. An empty string will result in no text being shown despite [fullscreenExitCombination](tools.aqua.bgw.core/BoardGameApplication/fullscreenExitCombination) being set."
            },
            "seeAlso": [
              {
                "name": "BoardGameApplication.isFullScreen",
                "link": "tools.aqua.bgw.core/BoardGameApplication/isFullScreen"
              },
              {
                "name": "BoardGameApplication.fullscreenExitCombination",
                "link": "tools.aqua.bgw.core/BoardGameApplication/fullscreenExitCombination"
              }
            ]
          }
        ]
      },
      "fullscreenExitCombination": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "fullscreenExitCombination"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.fullscreenExitCombination",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\fullscreen-exit-combination.html",
        "details": [
          {
            "info": {
              "name": "fullscreenExitCombination",
              "signature": "var fullscreenExitCombination: KeyEvent?",
              "doc": "Specifies the KeyCombination that will allow the user to exit full screen mode. A value of 'null' will not match any [KeyEvent](tools.aqua.bgw.event/KeyEvent) and will make it so the user is not able to escape from fullscreen mode.\n\nThe 'character' field in the [KeyEvent](tools.aqua.bgw.event/KeyEvent) is unused."
            },
            "seeAlso": [
              {
                "name": "BoardGameApplication.isFullScreen",
                "link": "tools.aqua.bgw.core/BoardGameApplication/isFullScreen"
              },
              {
                "name": "BoardGameApplication.fullscreenExitCombinationHint",
                "link": "tools.aqua.bgw.core/BoardGameApplication/fullscreenExitCombinationHint"
              }
            ]
          }
        ]
      },
      "hideMenuScene": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "hideMenuScene"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.hideMenuScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\hide-menu-scene.html",
        "details": [
          {
            "info": {
              "name": "hideMenuScene",
              "signature": "fun hideMenuScene(fadeTime: Number = DEFAULT_FADE_TIME)",
              "doc": "Hides currently shown [MenuScene](tools.aqua.bgw.core/MenuScene). Activates [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) if present."
            },
            "parameters": [
              {
                "name": "fadeTime",
                "doc": "Time to fade out in milliseconds. Default: [DEFAULT_FADE_TIME](tools.aqua.bgw.core/DEFAULT_FADE_TIME)."
              }
            ]
          }
        ]
      },
      "icon": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "icon"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.icon",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\icon.html",
        "details": [
          {
            "info": {
              "name": "icon",
              "signature": "var icon: ImageVisual?",
              "doc": "Window icon displayed in the title and task bar."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\index.html",
        "details": {
          "info": {
            "name": "BoardGameApplication",
            "signature": "open class BoardGameApplication(windowTitle: String = DEFAULT_WINDOW_TITLE, aspectRatio: AspectRatio = AspectRatio(), windowMode: WindowMode? = null)",
            "doc": "Baseclass for all BGW Applications. Extend from this class in order to create your own game application. You may only instantiate one application.\n\nScenes get shown by calling [showMenuScene](tools.aqua.bgw.core/BoardGameApplication/showMenuScene) and [showGameScene](tools.aqua.bgw.core/BoardGameApplication/showGameScene). Application starts by calling [show](tools.aqua.bgw.core/BoardGameApplication/show).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "BoardGameScene",
              "link": "tools.aqua.bgw.core/BoardGameScene"
            },
            {
              "name": "MenuScene",
              "link": "tools.aqua.bgw.core/MenuScene"
            }
          ],
          "parameters": [
            {
              "name": "windowTitle",
              "doc": "Title for the application window. Gets displayed in the title bar. Default: [DEFAULT_WINDOW_TITLE](tools.aqua.bgw.core/DEFAULT_WINDOW_TITLE)."
            },
            {
              "name": "aspectRatio",
              "doc": "Initial aspect ratio of application window. Default: empty [AspectRatio](tools.aqua.bgw.core/AspectRatio) constructor."
            },
            {
              "name": "windowMode",
              "doc": "Initial window mode. Overrides [isMaximized](tools.aqua.bgw.core/BoardGameApplication/isMaximized) and [isFullScreen](tools.aqua.bgw.core/BoardGameApplication/isFullScreen) if passed. Refer to [WindowMode](tools.aqua.bgw.core/WindowMode) docs for further information about the effects."
            }
          ]
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.core/BoardGameApplication/Companion"
            }
          ],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "link": "tools.aqua.bgw.core/BoardGameApplication/background",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "Background [Visual](tools.aqua.bgw.visual/Visual) for the [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            },
            {
              "signature": "var fullscreenExitCombination: KeyEvent?",
              "modifier": "var",
              "name": "fullscreenExitCombination",
              "link": "tools.aqua.bgw.core/BoardGameApplication/fullscreenExitCombination",
              "type": "[KeyEvent](tools.aqua.bgw.event/KeyEvent)?",
              "defaultValue": "",
              "doc": "Specifies the KeyCombination that will allow the user to exit full screen mode. A value of 'null' will not match any KeyEvent and will make it so the user is not able to escape from fullscreen mode."
            },
            {
              "signature": "var fullscreenExitCombinationHint: String?",
              "modifier": "var",
              "name": "fullscreenExitCombinationHint",
              "link": "tools.aqua.bgw.core/BoardGameApplication/fullscreenExitCombinationHint",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": "Specifies the KeyCombination hint that will be shown upon entering fullscreen mode. Hint will only be shown if an exit combination other than 'null' has been set."
            },
            {
              "signature": "var icon: ImageVisual?",
              "modifier": "var",
              "name": "icon",
              "link": "tools.aqua.bgw.core/BoardGameApplication/icon",
              "type": "[ImageVisual](tools.aqua.bgw.visual/ImageVisual)?",
              "defaultValue": "",
              "doc": "Window icon displayed in the title and task bar."
            },
            {
              "signature": "var isFullScreen: Boolean",
              "modifier": "var",
              "name": "isFullScreen",
              "link": "tools.aqua.bgw.core/BoardGameApplication/isFullScreen",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s fullscreen mode. true for fullscreen mode, false for default window."
            },
            {
              "signature": "var isMaximized: Boolean",
              "modifier": "var",
              "name": "isMaximized",
              "link": "tools.aqua.bgw.core/BoardGameApplication/isMaximized",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s maximized mode."
            },
            {
              "signature": "var onWindowClosed: () -> Unit?",
              "modifier": "var",
              "name": "onWindowClosed",
              "link": "tools.aqua.bgw.core/BoardGameApplication/onWindowClosed",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked after the application window was closed."
            },
            {
              "signature": "var onWindowShown: () -> Unit?",
              "modifier": "var",
              "name": "onWindowShown",
              "link": "tools.aqua.bgw.core/BoardGameApplication/onWindowShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked when the application was started and the window was shown."
            },
            {
              "signature": "var title: String",
              "modifier": "var",
              "name": "title",
              "link": "tools.aqua.bgw.core/BoardGameApplication/title",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Window title displayed in the title bar."
            },
            {
              "signature": "var windowHeight: Number",
              "modifier": "var",
              "name": "windowHeight",
              "link": "tools.aqua.bgw.core/BoardGameApplication/windowHeight",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s preferred height. Only affects non-maximized, non-fullscreen windows."
            },
            {
              "signature": "var windowWidth: Number",
              "modifier": "var",
              "name": "windowWidth",
              "link": "tools.aqua.bgw.core/BoardGameApplication/windowWidth",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s preferred width. Only affects non-maximized, non-fullscreen windows."
            }
          ],
          "functions": [
            {
              "signature": "fun exit()",
              "name": "exit",
              "link": "tools.aqua.bgw.core/BoardGameApplication/exit",
              "returnType": "Unit",
              "doc": "Returns the [show](tools.aqua.bgw.core/BoardGameApplication/show) function, thus closing the application window."
            },
            {
              "signature": "fun hideMenuScene(fadeTime: Number = DEFAULT_FADE_TIME)",
              "name": "hideMenuScene",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fadeTime",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/hideMenuScene",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_FADE_TIME",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/hideMenuScene",
              "returnType": "Unit",
              "doc": "Hides currently shown [MenuScene](tools.aqua.bgw.core/MenuScene). Activates [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) if present.",
              "isSuspend": false
            },
            {
              "signature": "fun repaint()",
              "name": "repaint",
              "link": "tools.aqua.bgw.core/BoardGameApplication/repaint",
              "returnType": "Unit",
              "doc": "Manually refreshes currently displayed Scenes."
            },
            {
              "signature": "fun setHorizontalSceneAlignment(newHorizontalAlignment: HorizontalAlignment)",
              "name": "setHorizontalSceneAlignment",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newHorizontalAlignment",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/setHorizontalSceneAlignment",
                  "type": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/setHorizontalSceneAlignment",
              "returnType": "Unit",
              "doc": "Sets [HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun setScaleMode(newScaleMode: ScaleMode)",
              "name": "setScaleMode",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newScaleMode",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/setScaleMode",
                  "type": "[ScaleMode](tools.aqua.bgw.core/ScaleMode)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/setScaleMode",
              "returnType": "Unit",
              "doc": "Sets [ScaleMode](tools.aqua.bgw.core/ScaleMode) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun setSceneAlignment(newAlignment: Alignment)",
              "name": "setSceneAlignment",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newAlignment",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/setSceneAlignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/setSceneAlignment",
              "returnType": "Unit",
              "doc": "Sets [Alignment](tools.aqua.bgw.core/Alignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun setVerticalSceneAlignment(newVerticalAlignment: VerticalAlignment)",
              "name": "setVerticalSceneAlignment",
              "parameters": [
                {
                  "modifier": "",
                  "name": "newVerticalAlignment",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/setVerticalSceneAlignment",
                  "type": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/setVerticalSceneAlignment",
              "returnType": "Unit",
              "doc": "Sets [VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication).",
              "isSuspend": false
            },
            {
              "signature": "fun show()",
              "name": "show",
              "link": "tools.aqua.bgw.core/BoardGameApplication/show",
              "returnType": "Unit",
              "doc": "Shows the [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            },
            {
              "signature": "fun showDialog(dialog: Dialog): Optional<ButtonType>",
              "name": "showDialog",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dialog",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/showDialog",
                  "type": "[Dialog](tools.aqua.bgw.dialog/Dialog)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/showDialog",
              "returnType": "[Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)<[ButtonType](tools.aqua.bgw.dialog/ButtonType)>",
              "doc": "Shows a dialog and blocks further thread execution.",
              "isSuspend": false
            },
            {
              "signature": "fun showDialogNonBlocking(dialog: Dialog)",
              "name": "showDialogNonBlocking",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dialog",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/showDialogNonBlocking",
                  "type": "[Dialog](tools.aqua.bgw.dialog/Dialog)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/showDialogNonBlocking",
              "returnType": "Unit",
              "doc": "Shows a dialog without blocking further thread execution.",
              "isSuspend": false
            },
            {
              "signature": "fun showFileDialog(dialog: FileDialog)",
              "name": "showFileDialog",
              "parameters": [
                {
                  "modifier": "",
                  "name": "dialog",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/showFileDialog",
                  "type": "[FileDialog](tools.aqua.bgw.dialog/FileDialog)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/showFileDialog",
              "returnType": "Unit",
              "doc": "Shows the given [FileDialog](tools.aqua.bgw.dialog/FileDialog).",
              "isSuspend": false
            },
            {
              "signature": "fun showGameScene(scene: BoardGameScene)",
              "name": "showGameScene",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scene",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/showGameScene",
                  "type": "[BoardGameScene](tools.aqua.bgw.core/BoardGameScene)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/showGameScene",
              "returnType": "Unit",
              "doc": "Shows given [BoardGameScene](tools.aqua.bgw.core/BoardGameScene).",
              "isSuspend": false
            },
            {
              "signature": "fun showMenuScene(scene: MenuScene, fadeTime: Number = DEFAULT_FADE_TIME)",
              "name": "showMenuScene",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scene",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/showMenuScene",
                  "type": "[MenuScene](tools.aqua.bgw.core/MenuScene)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "fadeTime",
                  "link": "tools.aqua.bgw.core/BoardGameApplication/showMenuScene",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_FADE_TIME",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameApplication/showMenuScene",
              "returnType": "Unit",
              "doc": "Shows given [MenuScene](tools.aqua.bgw.core/MenuScene). If [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) is currently displayed, it gets deactivated and blurred.",
              "isSuspend": false
            }
          ]
        }
      },
      "isFullScreen": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "isFullScreen"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.isFullScreen",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\is-full-screen.html",
        "details": [
          {
            "info": {
              "name": "isFullScreen",
              "signature": "var isFullScreen: Boolean",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s fullscreen mode. true for fullscreen mode, false for default window."
            }
          }
        ]
      },
      "isMaximized": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "isMaximized"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.isMaximized",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\is-maximized.html",
        "details": [
          {
            "info": {
              "name": "isMaximized",
              "signature": "var isMaximized: Boolean",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s maximized mode.\n\ntrue for maximized mode, false for default window size."
            }
          }
        ]
      },
      "onWindowClosed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "onWindowClosed"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.onWindowClosed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\on-window-closed.html",
        "details": [
          {
            "info": {
              "name": "onWindowClosed",
              "signature": "var onWindowClosed: () -> Unit?",
              "doc": "Gets invoked after the application window was closed."
            },
            "seeAlso": [
              {
                "name": "BoardGameApplication.onWindowShown",
                "link": "tools.aqua.bgw.core/BoardGameApplication/onWindowShown"
              }
            ]
          }
        ]
      },
      "onWindowShown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "onWindowShown"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.onWindowShown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\on-window-shown.html",
        "details": [
          {
            "info": {
              "name": "onWindowShown",
              "signature": "var onWindowShown: () -> Unit?",
              "doc": "Gets invoked when the application was started and the window was shown."
            },
            "seeAlso": [
              {
                "name": "BoardGameApplication.onWindowClosed",
                "link": "tools.aqua.bgw.core/BoardGameApplication/onWindowClosed"
              }
            ]
          }
        ]
      },
      "repaint": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "repaint"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.repaint",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\repaint.html",
        "details": [
          {
            "info": {
              "name": "repaint",
              "signature": "fun repaint()",
              "doc": "Manually refreshes currently displayed Scenes."
            }
          }
        ]
      },
      "setHorizontalSceneAlignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "setHorizontalSceneAlignment"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.setHorizontalSceneAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\set-horizontal-scene-alignment.html",
        "details": [
          {
            "info": {
              "name": "setHorizontalSceneAlignment",
              "signature": "fun setHorizontalSceneAlignment(newHorizontalAlignment: HorizontalAlignment)",
              "doc": "Sets [HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            },
            "parameters": [
              {
                "name": "newHorizontalAlignment",
                "doc": "New alignment to set."
              }
            ]
          }
        ]
      },
      "setScaleMode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "setScaleMode"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.setScaleMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\set-scale-mode.html",
        "details": [
          {
            "info": {
              "name": "setScaleMode",
              "signature": "fun setScaleMode(newScaleMode: ScaleMode)",
              "doc": "Sets [ScaleMode](tools.aqua.bgw.core/ScaleMode) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            },
            "parameters": [
              {
                "name": "newScaleMode",
                "doc": "New scale mode to set."
              }
            ]
          }
        ]
      },
      "setSceneAlignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "setSceneAlignment"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.setSceneAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\set-scene-alignment.html",
        "details": [
          {
            "info": {
              "name": "setSceneAlignment",
              "signature": "fun setSceneAlignment(newAlignment: Alignment)",
              "doc": "Sets [Alignment](tools.aqua.bgw.core/Alignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            },
            "parameters": [
              {
                "name": "newAlignment",
                "doc": "New alignment to set."
              }
            ]
          }
        ]
      },
      "setVerticalSceneAlignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "setVerticalSceneAlignment"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.setVerticalSceneAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\set-vertical-scene-alignment.html",
        "details": [
          {
            "info": {
              "name": "setVerticalSceneAlignment",
              "signature": "fun setVerticalSceneAlignment(newVerticalAlignment: VerticalAlignment)",
              "doc": "Sets [VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment) of all Scenes in this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            },
            "parameters": [
              {
                "name": "newVerticalAlignment",
                "doc": "New alignment to set."
              }
            ]
          }
        ]
      },
      "showDialogNonBlocking": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "showDialogNonBlocking"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.showDialogNonBlocking",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\show-dialog-non-blocking.html",
        "details": [
          {
            "info": {
              "name": "showDialogNonBlocking",
              "signature": "fun showDialogNonBlocking(dialog: Dialog)",
              "doc": "Shows a dialog without blocking further thread execution."
            },
            "parameters": [
              {
                "name": "dialog",
                "doc": "The [Dialog](tools.aqua.bgw.dialog/Dialog) to show."
              }
            ]
          }
        ]
      },
      "showDialog": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "showDialog"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.showDialog",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\show-dialog.html",
        "details": [
          {
            "info": {
              "name": "showDialog",
              "signature": "fun showDialog(dialog: Dialog): Optional<ButtonType>",
              "doc": "Shows a dialog and blocks further thread execution."
            },
            "parameters": [
              {
                "name": "dialog",
                "doc": "The [Dialog](tools.aqua.bgw.dialog/Dialog) to show."
              }
            ]
          }
        ]
      },
      "showFileDialog": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "showFileDialog"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.showFileDialog",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\show-file-dialog.html",
        "details": [
          {
            "info": {
              "name": "showFileDialog",
              "signature": "fun showFileDialog(dialog: FileDialog)",
              "doc": "Shows the given [FileDialog](tools.aqua.bgw.dialog/FileDialog)."
            },
            "parameters": [
              {
                "name": "dialog",
                "doc": "The [FileDialog](tools.aqua.bgw.dialog/FileDialog) to be shown."
              }
            ]
          }
        ]
      },
      "showGameScene": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "showGameScene"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.showGameScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\show-game-scene.html",
        "details": [
          {
            "info": {
              "name": "showGameScene",
              "signature": "fun showGameScene(scene: BoardGameScene)",
              "doc": "Shows given [BoardGameScene](tools.aqua.bgw.core/BoardGameScene)."
            },
            "parameters": [
              {
                "name": "scene",
                "doc": "[BoardGameScene](tools.aqua.bgw.core/BoardGameScene) to show."
              }
            ]
          }
        ]
      },
      "showMenuScene": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "showMenuScene"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.showMenuScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\show-menu-scene.html",
        "details": [
          {
            "info": {
              "name": "showMenuScene",
              "signature": "fun showMenuScene(scene: MenuScene, fadeTime: Number = DEFAULT_FADE_TIME)",
              "doc": "Shows given [MenuScene](tools.aqua.bgw.core/MenuScene). If [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) is currently displayed, it gets deactivated and blurred."
            },
            "parameters": [
              {
                "name": "scene",
                "doc": "[MenuScene](tools.aqua.bgw.core/MenuScene) to show."
              },
              {
                "name": "fadeTime",
                "doc": "Time to fade in, specified in milliseconds. Default: [DEFAULT_FADE_TIME](tools.aqua.bgw.core/DEFAULT_FADE_TIME)."
              }
            ]
          }
        ]
      },
      "show": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "show"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.show",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\show.html",
        "details": [
          {
            "info": {
              "name": "show",
              "signature": "fun show()",
              "doc": "Shows the [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)."
            }
          }
        ]
      },
      "title": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "title"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.title",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\title.html",
        "details": [
          {
            "info": {
              "name": "title",
              "signature": "var title: String",
              "doc": "Window title displayed in the title bar."
            }
          }
        ]
      },
      "windowHeight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "windowHeight"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.windowHeight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\window-height.html",
        "details": [
          {
            "info": {
              "name": "windowHeight",
              "signature": "var windowHeight: Number",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s preferred height. Only affects non-maximized, non-fullscreen windows."
            }
          }
        ]
      },
      "windowWidth": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameApplication",
          "windowWidth"
        ],
        "package": "tools.aqua.bgw.core.BoardGameApplication.windowWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-application\\window-width.html",
        "details": [
          {
            "info": {
              "name": "windowWidth",
              "signature": "var windowWidth: Number",
              "doc": "Sets this [BoardGameApplication](tools.aqua.bgw.core/BoardGameApplication)'s preferred width. Only affects non-maximized, non-fullscreen windows."
            }
          }
        ]
      }
    },
    "BoardGameScene": {
      "BoardGameScene": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameScene",
          "BoardGameScene"
        ],
        "package": "tools.aqua.bgw.core.BoardGameScene.BoardGameScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-scene\\-board-game-scene.html",
        "details": [
          {
            "info": {
              "name": "BoardGameScene",
              "signature": "constructor(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "width",
                "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH](tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT](tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT)."
              },
              {
                "name": "background",
                "doc": "BoardGameScene [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameScene"
        ],
        "package": "tools.aqua.bgw.core.BoardGameScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-scene\\index.html",
        "details": {
          "info": {
            "name": "BoardGameScene",
            "signature": "open class BoardGameScene(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE) : Scene<ComponentView>",
            "doc": "Baseclass for BGW game scenes.\n\nExtend this class in order to create your own game scene.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "width",
              "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH](tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT](tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT)."
            },
            {
              "name": "background",
              "doc": "BoardGameScene [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_WIDTH",
                  "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH](tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_HEIGHT",
                  "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT](tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "background",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "ColorVisual.WHITE",
                  "doc": "BoardGameScene [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "link": "tools.aqua.bgw.core/Scene/background",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "The background [Visual](tools.aqua.bgw.visual/Visual) of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val components: List<ComponentView>",
              "modifier": "val",
              "name": "components",
              "link": "tools.aqua.bgw.core/Scene/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components/ComponentView)>",
              "defaultValue": "",
              "doc": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "link": "tools.aqua.bgw.core/Scene/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The height of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.core/Scene/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.core/Scene/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.core/Scene/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core/Scene/onKeyPressed) ."
            },
            {
              "signature": "var onLockChanged: (Boolean) -> Unit?",
              "modifier": "var",
              "name": "onLockChanged",
              "link": "tools.aqua.bgw.core/BoardGameScene/onLockChanged",
              "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever the [lock](tools.aqua.bgw.core/BoardGameScene/lock) state of this [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) changes."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "link": "tools.aqua.bgw.core/Scene/onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "link": "tools.aqua.bgw.core/Scene/onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.core/Scene/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of the [background](tools.aqua.bgw.core/Scene/background) of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val rootNode: RootComponent<ComponentView>",
              "modifier": "val",
              "name": "rootNode",
              "link": "tools.aqua.bgw.core/Scene/rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components/RootComponent)<[ComponentView](tools.aqua.bgw.components/ComponentView)>",
              "defaultValue": "",
              "doc": "The root node of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "link": "tools.aqua.bgw.core/Scene/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The width of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: ComponentView)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.core/BoardGameScene",
                  "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameScene",
              "returnType": "Unit",
              "doc": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "link": "tools.aqua.bgw.core/Scene/clearComponents",
              "returnType": "Unit",
              "doc": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "link": "tools.aqua.bgw.core/Scene/findPathToChild",
                  "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/findPathToChild",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components/ComponentView)>",
              "doc": "Searches [node](tools.aqua.bgw.core/Scene/findPathToChild) recursively through the visual tree and logs path where the [node](tools.aqua.bgw.core/Scene/findPathToChild) appears as first component and the [rootNode](tools.aqua.bgw.core/Scene/rootNode) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun lock()",
              "name": "lock",
              "link": "tools.aqua.bgw.core/BoardGameScene/lock",
              "returnType": "Unit",
              "doc": "Locks [Scene](tools.aqua.bgw.core/Scene) from any user input."
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "link": "tools.aqua.bgw.core/Scene/playAnimation",
                  "type": "[Animation](tools.aqua.bgw.animation/Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/playAnimation",
              "returnType": "Unit",
              "doc": "Plays given [Animation](tools.aqua.bgw.animation/Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: ComponentView)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.core/BoardGameScene",
                  "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/BoardGameScene",
              "returnType": "Unit",
              "doc": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun unlock()",
              "name": "unlock",
              "link": "tools.aqua.bgw.core/BoardGameScene/unlock",
              "returnType": "Unit",
              "doc": "Unlocks [Scene](tools.aqua.bgw.core/Scene) for user input."
            }
          ]
        }
      },
      "lock": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameScene",
          "lock"
        ],
        "package": "tools.aqua.bgw.core.BoardGameScene.lock",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-scene\\lock.html",
        "details": [
          {
            "info": {
              "name": "lock",
              "signature": "fun lock()",
              "doc": "Locks [Scene](tools.aqua.bgw.core/Scene) from any user input."
            },
            "seeAlso": [
              {
                "name": "BoardGameScene.unlock",
                "link": "tools.aqua.bgw.core/BoardGameScene/unlock"
              }
            ]
          }
        ]
      },
      "lockedProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameScene",
          "lockedProperty"
        ],
        "package": "tools.aqua.bgw.core.BoardGameScene.lockedProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-scene\\locked-property.html",
        "details": [
          {
            "info": {
              "name": "lockedProperty",
              "signature": "val lockedProperty: BooleanProperty",
              "doc": "Property that indicates if this [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) is locked from user input."
            },
            "seeAlso": [
              {
                "name": "BoardGameScene.lock",
                "link": "tools.aqua.bgw.core/BoardGameScene/lock"
              },
              {
                "name": "BoardGameScene.unlock",
                "link": "tools.aqua.bgw.core/BoardGameScene/unlock"
              }
            ]
          }
        ]
      },
      "onLockChanged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameScene",
          "onLockChanged"
        ],
        "package": "tools.aqua.bgw.core.BoardGameScene.onLockChanged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-scene\\on-lock-changed.html",
        "details": [
          {
            "info": {
              "name": "onLockChanged",
              "signature": "var onLockChanged: (Boolean) -> Unit?",
              "doc": "Gets invoked whenever the [lock](tools.aqua.bgw.core/BoardGameScene/lock) state of this [BoardGameScene](tools.aqua.bgw.core/BoardGameScene) changes."
            },
            "seeAlso": [
              {
                "name": "BoardGameScene.lock",
                "link": "tools.aqua.bgw.core/BoardGameScene/lock"
              },
              {
                "name": "BoardGameScene.unlock",
                "link": "tools.aqua.bgw.core/BoardGameScene/unlock"
              }
            ],
            "since": "1.0"
          }
        ]
      },
      "unlock": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "BoardGameScene",
          "unlock"
        ],
        "package": "tools.aqua.bgw.core.BoardGameScene.unlock",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-board-game-scene\\unlock.html",
        "details": [
          {
            "info": {
              "name": "unlock",
              "signature": "fun unlock()",
              "doc": "Unlocks [Scene](tools.aqua.bgw.core/Scene) for user input."
            },
            "seeAlso": [
              {
                "name": "BoardGameScene.lock",
                "link": "tools.aqua.bgw.core/BoardGameScene/lock"
              }
            ]
          }
        ]
      }
    },
    "Color": {
      "Color": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color",
          "Color"
        ],
        "package": "tools.aqua.bgw.core.Color.Color",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-color.html",
        "details": [
          {
            "info": {
              "name": "Color",
              "signature": "constructor(red: Int, green: Int, blue: Int)",
              "doc": "Creates a [Color](tools.aqua.bgw.core/Color) with given red, green and blue values."
            },
            "parameters": [
              {
                "name": "red",
                "doc": "Red value. Must be in range 0 until 255."
              },
              {
                "name": "green",
                "doc": "Green value. Must be in range 0 until 255."
              },
              {
                "name": "blue",
                "doc": "Blue value. Must be in range 0 until 255."
              }
            ]
          },
          {
            "info": {
              "name": "Color",
              "signature": "constructor(red: Int, green: Int, blue: Int, alpha: Int)",
              "doc": "Creates a [Color](tools.aqua.bgw.core/Color) with given red, green, blue and alpha values."
            },
            "parameters": [
              {
                "name": "red",
                "doc": "Red value. Must be in range 0 until 255."
              },
              {
                "name": "green",
                "doc": "Green value. Must be in range 0 until 255."
              },
              {
                "name": "blue",
                "doc": "Blue value. Must be in range 0 until 255."
              },
              {
                "name": "alpha",
                "doc": "Alpha value. Must be in range 0 until 255."
              }
            ]
          },
          {
            "info": {
              "name": "Color",
              "signature": "constructor(hex: String)",
              "doc": "Creates a [Color](tools.aqua.bgw.core/Color) with given string hex value."
            },
            "parameters": [
              {
                "name": "hex",
                "doc": "Hexadecimal string representation of the color."
              }
            ]
          },
          {
            "info": {
              "name": "Color",
              "signature": "constructor(hex: Int)",
              "doc": "Creates a [Color](tools.aqua.bgw.core/Color) with given numeric hex value."
            },
            "parameters": [
              {
                "name": "hex",
                "doc": "Hexadecimal numerical representation of the color."
              }
            ]
          },
          {
            "info": {
              "name": "Color",
              "signature": "constructor(red: Int, green: Int, blue: Int, alpha: Double)",
              "doc": "Creates a [Color](tools.aqua.bgw.core/Color) with given red, green, blue and alpha values."
            }
          }
        ]
      },
      "Companion": {
        "BLACK": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "BLACK"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.BLACK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-b-l-a-c-k.html",
          "details": [
            {
              "info": {
                "name": "BLACK",
                "signature": "val BLACK: Color",
                "doc": "Black [Color](tools.aqua.bgw.core/Color) with values (0, 0, 0, 1.0)"
              }
            }
          ]
        },
        "BLUE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "BLUE"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.BLUE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-b-l-u-e.html",
          "details": [
            {
              "info": {
                "name": "BLUE",
                "signature": "val BLUE: Color",
                "doc": "Blue [Color](tools.aqua.bgw.core/Color) with values (0, 0, 255, 1.0)"
              }
            }
          ]
        },
        "BROWN": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "BROWN"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.BROWN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-b-r-o-w-n.html",
          "details": [
            {
              "info": {
                "name": "BROWN",
                "signature": "val BROWN: Color",
                "doc": "Brown [Color](tools.aqua.bgw.core/Color) with values (139, 69, 19, 1.0)"
              }
            }
          ]
        },
        "CYAN": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "CYAN"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.CYAN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-c-y-a-n.html",
          "details": [
            {
              "info": {
                "name": "CYAN",
                "signature": "val CYAN: Color",
                "doc": "Cyan [Color](tools.aqua.bgw.core/Color) with values (0, 255, 255, 1.0)"
              }
            }
          ]
        },
        "DARK_GRAY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "DARK_GRAY"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.DARK_GRAY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-d-a-r-k_-g-r-a-y.html",
          "details": [
            {
              "info": {
                "name": "DARK_GRAY",
                "signature": "val DARK_GRAY: Color",
                "doc": "Dark gray [Color](tools.aqua.bgw.core/Color) with values (64, 64, 64, 1.0)"
              }
            }
          ]
        },
        "GRAY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "GRAY"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.GRAY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-g-r-a-y.html",
          "details": [
            {
              "info": {
                "name": "GRAY",
                "signature": "val GRAY: Color",
                "doc": "Gray [Color](tools.aqua.bgw.core/Color) with values (128, 128, 128, 1.0)"
              }
            }
          ]
        },
        "GREEN": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "GREEN"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.GREEN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-g-r-e-e-n.html",
          "details": [
            {
              "info": {
                "name": "GREEN",
                "signature": "val GREEN: Color",
                "doc": "Green [Color](tools.aqua.bgw.core/Color) with values (0, 255, 0, 1.0)"
              }
            }
          ]
        },
        "LIGHT_GRAY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "LIGHT_GRAY"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.LIGHT_GRAY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-l-i-g-h-t_-g-r-a-y.html",
          "details": [
            {
              "info": {
                "name": "LIGHT_GRAY",
                "signature": "val LIGHT_GRAY: Color",
                "doc": "Light gray [Color](tools.aqua.bgw.core/Color) with values (192, 192, 192, 1.0)"
              }
            }
          ]
        },
        "LIME": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "LIME"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.LIME",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-l-i-m-e.html",
          "details": [
            {
              "info": {
                "name": "LIME",
                "signature": "val LIME: Color",
                "doc": "Lime [Color](tools.aqua.bgw.core/Color) with values (200, 255, 0)"
              }
            }
          ]
        },
        "MAGENTA": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "MAGENTA"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.MAGENTA",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-m-a-g-e-n-t-a.html",
          "details": [
            {
              "info": {
                "name": "MAGENTA",
                "signature": "val MAGENTA: Color",
                "doc": "Magenta [Color](tools.aqua.bgw.core/Color) with values (255, 0, 255, 1.0)"
              }
            }
          ]
        },
        "ORANGE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "ORANGE"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.ORANGE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-o-r-a-n-g-e.html",
          "details": [
            {
              "info": {
                "name": "ORANGE",
                "signature": "val ORANGE: Color",
                "doc": "Orange [Color](tools.aqua.bgw.core/Color) with values (255, 200, 0, 1.0)"
              }
            }
          ]
        },
        "PINK": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "PINK"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.PINK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-p-i-n-k.html",
          "details": [
            {
              "info": {
                "name": "PINK",
                "signature": "val PINK: Color",
                "doc": "Pink [Color](tools.aqua.bgw.core/Color) with values (255, 175, 175, 1.0)"
              }
            }
          ]
        },
        "PURPLE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "PURPLE"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.PURPLE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-p-u-r-p-l-e.html",
          "details": [
            {
              "info": {
                "name": "PURPLE",
                "signature": "val PURPLE: Color",
                "doc": "Purple [Color](tools.aqua.bgw.core/Color) with values (200, 0, 255, 1.0)"
              }
            }
          ]
        },
        "RED": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "RED"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.RED",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-r-e-d.html",
          "details": [
            {
              "info": {
                "name": "RED",
                "signature": "val RED: Color",
                "doc": "Red [Color](tools.aqua.bgw.core/Color) with values (255, 0, 0, 1.0)"
              }
            }
          ]
        },
        "TRANSPARENT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "TRANSPARENT"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.TRANSPARENT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-t-r-a-n-s-p-a-r-e-n-t.html",
          "details": [
            {
              "info": {
                "name": "TRANSPARENT",
                "signature": "val TRANSPARENT: Color",
                "doc": "Transparent [Color](tools.aqua.bgw.core/Color) with values (0, 0, 0, 0.0)"
              }
            }
          ]
        },
        "WHITE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "WHITE"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.WHITE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-w-h-i-t-e.html",
          "details": [
            {
              "info": {
                "name": "WHITE",
                "signature": "val WHITE: Color",
                "doc": "White [Color](tools.aqua.bgw.core/Color) with values (255, 255, 255, 1.0)"
              }
            }
          ]
        },
        "YELLOW": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion",
            "YELLOW"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion.YELLOW",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\-y-e-l-l-o-w.html",
          "details": [
            {
              "info": {
                "name": "YELLOW",
                "signature": "val YELLOW: Color",
                "doc": "Yellow [Color](tools.aqua.bgw.core/Color) with values (255, 255, 0, 1.0)"
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "Color",
            "Companion"
          ],
          "package": "tools.aqua.bgw.core.Color.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val BLACK: Color",
                "modifier": "val",
                "name": "BLACK",
                "link": "tools.aqua.bgw.core/Color/Companion/BLACK",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Black [Color](tools.aqua.bgw.core/Color) with values (0, 0, 0, 1.0)"
              },
              {
                "signature": "val BLUE: Color",
                "modifier": "val",
                "name": "BLUE",
                "link": "tools.aqua.bgw.core/Color/Companion/BLUE",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Blue [Color](tools.aqua.bgw.core/Color) with values (0, 0, 255, 1.0)"
              },
              {
                "signature": "val BROWN: Color",
                "modifier": "val",
                "name": "BROWN",
                "link": "tools.aqua.bgw.core/Color/Companion/BROWN",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Brown [Color](tools.aqua.bgw.core/Color) with values (139, 69, 19, 1.0)"
              },
              {
                "signature": "val CYAN: Color",
                "modifier": "val",
                "name": "CYAN",
                "link": "tools.aqua.bgw.core/Color/Companion/CYAN",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Cyan [Color](tools.aqua.bgw.core/Color) with values (0, 255, 255, 1.0)"
              },
              {
                "signature": "val DARK_GRAY: Color",
                "modifier": "val",
                "name": "DARK_GRAY",
                "link": "tools.aqua.bgw.core/Color/Companion/DARK_GRAY",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Dark gray [Color](tools.aqua.bgw.core/Color) with values (64, 64, 64, 1.0)"
              },
              {
                "signature": "val GRAY: Color",
                "modifier": "val",
                "name": "GRAY",
                "link": "tools.aqua.bgw.core/Color/Companion/GRAY",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Gray [Color](tools.aqua.bgw.core/Color) with values (128, 128, 128, 1.0)"
              },
              {
                "signature": "val GREEN: Color",
                "modifier": "val",
                "name": "GREEN",
                "link": "tools.aqua.bgw.core/Color/Companion/GREEN",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Green [Color](tools.aqua.bgw.core/Color) with values (0, 255, 0, 1.0)"
              },
              {
                "signature": "val LIGHT_GRAY: Color",
                "modifier": "val",
                "name": "LIGHT_GRAY",
                "link": "tools.aqua.bgw.core/Color/Companion/LIGHT_GRAY",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Light gray [Color](tools.aqua.bgw.core/Color) with values (192, 192, 192, 1.0)"
              },
              {
                "signature": "val LIME: Color",
                "modifier": "val",
                "name": "LIME",
                "link": "tools.aqua.bgw.core/Color/Companion/LIME",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Lime [Color](tools.aqua.bgw.core/Color) with values (200, 255, 0)"
              },
              {
                "signature": "val MAGENTA: Color",
                "modifier": "val",
                "name": "MAGENTA",
                "link": "tools.aqua.bgw.core/Color/Companion/MAGENTA",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Magenta [Color](tools.aqua.bgw.core/Color) with values (255, 0, 255, 1.0)"
              },
              {
                "signature": "val ORANGE: Color",
                "modifier": "val",
                "name": "ORANGE",
                "link": "tools.aqua.bgw.core/Color/Companion/ORANGE",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Orange [Color](tools.aqua.bgw.core/Color) with values (255, 200, 0, 1.0)"
              },
              {
                "signature": "val PINK: Color",
                "modifier": "val",
                "name": "PINK",
                "link": "tools.aqua.bgw.core/Color/Companion/PINK",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Pink [Color](tools.aqua.bgw.core/Color) with values (255, 175, 175, 1.0)"
              },
              {
                "signature": "val PURPLE: Color",
                "modifier": "val",
                "name": "PURPLE",
                "link": "tools.aqua.bgw.core/Color/Companion/PURPLE",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Purple [Color](tools.aqua.bgw.core/Color) with values (200, 0, 255, 1.0)"
              },
              {
                "signature": "val RED: Color",
                "modifier": "val",
                "name": "RED",
                "link": "tools.aqua.bgw.core/Color/Companion/RED",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Red [Color](tools.aqua.bgw.core/Color) with values (255, 0, 0, 1.0)"
              },
              {
                "signature": "val TRANSPARENT: Color",
                "modifier": "val",
                "name": "TRANSPARENT",
                "link": "tools.aqua.bgw.core/Color/Companion/TRANSPARENT",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Transparent [Color](tools.aqua.bgw.core/Color) with values (0, 0, 0, 0.0)"
              },
              {
                "signature": "val WHITE: Color",
                "modifier": "val",
                "name": "WHITE",
                "link": "tools.aqua.bgw.core/Color/Companion/WHITE",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "White [Color](tools.aqua.bgw.core/Color) with values (255, 255, 255, 1.0)"
              },
              {
                "signature": "val YELLOW: Color",
                "modifier": "val",
                "name": "YELLOW",
                "link": "tools.aqua.bgw.core/Color/Companion/YELLOW",
                "type": "[Color](tools.aqua.bgw.core/Color)",
                "defaultValue": "",
                "doc": "Yellow [Color](tools.aqua.bgw.core/Color) with values (255, 255, 0, 1.0)"
              }
            ]
          }
        }
      },
      "alpha": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color",
          "alpha"
        ],
        "package": "tools.aqua.bgw.core.Color.alpha",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\alpha.html",
        "details": [
          {
            "info": {
              "name": "alpha",
              "signature": "val alpha: Double",
              "doc": ""
            }
          }
        ]
      },
      "blue": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color",
          "blue"
        ],
        "package": "tools.aqua.bgw.core.Color.blue",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\blue.html",
        "details": [
          {
            "info": {
              "name": "blue",
              "signature": "val blue: Int",
              "doc": ""
            }
          }
        ]
      },
      "green": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color",
          "green"
        ],
        "package": "tools.aqua.bgw.core.Color.green",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\green.html",
        "details": [
          {
            "info": {
              "name": "green",
              "signature": "val green: Int",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color"
        ],
        "package": "tools.aqua.bgw.core.Color",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\index.html",
        "details": {
          "info": {
            "name": "Color",
            "signature": "data class Color(val red: Int, val green: Int, val blue: Int, val alpha: Double)",
            "doc": "Represents a color with red, green, blue and alpha values.",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          },
          "since": "1.0"
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.core/Color/Companion"
            }
          ],
          "properties": [
            {
              "signature": "val alpha: Double",
              "modifier": "val",
              "name": "alpha",
              "link": "tools.aqua.bgw.core/Color/alpha",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Alpha value. Must be in range 0.0 until 1.0."
            },
            {
              "signature": "val blue: Int",
              "modifier": "val",
              "name": "blue",
              "link": "tools.aqua.bgw.core/Color/blue",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Blue value. Must be in range 0 until 255."
            },
            {
              "signature": "val green: Int",
              "modifier": "val",
              "name": "green",
              "link": "tools.aqua.bgw.core/Color/green",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Green value. Must be in range 0 until 255."
            },
            {
              "signature": "val red: Int",
              "modifier": "val",
              "name": "red",
              "link": "tools.aqua.bgw.core/Color/red",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Red value. Must be in range 0 until 255."
            }
          ]
        }
      },
      "red": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color",
          "red"
        ],
        "package": "tools.aqua.bgw.core.Color.red",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\red.html",
        "details": [
          {
            "info": {
              "name": "red",
              "signature": "val red: Int",
              "doc": ""
            }
          }
        ]
      },
      "toHex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Color",
          "toHex"
        ],
        "package": "tools.aqua.bgw.core.Color.toHex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-color\\to-hex.html",
        "details": [
          {
            "info": {
              "name": "toHex",
              "signature": "fun toHex(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "DEFAULT_ANIMATION_DURATION": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_ANIMATION_DURATION"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_ANIMATION_DURATION",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-a-n-i-m-a-t-i-o-n_-d-u-r-a-t-i-o-n.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_ANIMATION_DURATION",
            "signature": "const val DEFAULT_ANIMATION_DURATION: Int = 1000",
            "doc": "Default Animation duration in milliseconds."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_ANIMATION_SPEED": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_ANIMATION_SPEED"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_ANIMATION_SPEED",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-a-n-i-m-a-t-i-o-n_-s-p-e-e-d.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_ANIMATION_SPEED",
            "signature": "const val DEFAULT_ANIMATION_SPEED: Int = 50",
            "doc": "Default Animation speed in steps."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_AREA_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_AREA_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_AREA_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-a-r-e-a_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_AREA_HEIGHT",
            "signature": "const val DEFAULT_AREA_HEIGHT: Double",
            "doc": "Default Area height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_AREA_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_AREA_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_AREA_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-a-r-e-a_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_AREA_WIDTH",
            "signature": "const val DEFAULT_AREA_WIDTH: Double",
            "doc": "Default Area width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_BLUR_RADIUS": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_BLUR_RADIUS"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_BLUR_RADIUS",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-b-l-u-r_-r-a-d-i-u-s.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_BLUR_RADIUS",
            "signature": "const val DEFAULT_BLUR_RADIUS: Double = 40.0",
            "doc": "Default blur radius for menuScene overlay."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_BOARD_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_BOARD_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_BOARD_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-b-o-a-r-d_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_BOARD_HEIGHT",
            "signature": "const val DEFAULT_BOARD_HEIGHT: Double = 900.0",
            "doc": "Default TableView height."
          },
          "since": "0.8"
        }
      ]
    },
    "DEFAULT_BOARD_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_BOARD_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_BOARD_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-b-o-a-r-d_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_BOARD_WIDTH",
            "signature": "const val DEFAULT_BOARD_WIDTH: Double = 1600.0",
            "doc": "Default TableView width."
          },
          "since": "0.8"
        }
      ]
    },
    "DEFAULT_BUTTON_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_BUTTON_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_BUTTON_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-b-u-t-t-o-n_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_BUTTON_HEIGHT",
            "signature": "const val DEFAULT_BUTTON_HEIGHT: Double = 45.0",
            "doc": "Default Button height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_BUTTON_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_BUTTON_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_BUTTON_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-b-u-t-t-o-n_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_BUTTON_WIDTH",
            "signature": "const val DEFAULT_BUTTON_WIDTH: Double = 120.0",
            "doc": "Default Button width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_CARD_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_CARD_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_CARD_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-a-r-d_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_CARD_HEIGHT",
            "signature": "const val DEFAULT_CARD_HEIGHT: Double = 200.0",
            "doc": "Default CardView height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_CARD_STACK_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_CARD_STACK_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_CARD_STACK_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-a-r-d_-s-t-a-c-k_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_CARD_STACK_HEIGHT",
            "signature": "const val DEFAULT_CARD_STACK_HEIGHT: Double",
            "doc": "Default CardStack height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_CARD_STACK_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_CARD_STACK_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_CARD_STACK_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-a-r-d_-s-t-a-c-k_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_CARD_STACK_WIDTH",
            "signature": "const val DEFAULT_CARD_STACK_WIDTH: Double",
            "doc": "Default CardStack width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_CARD_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_CARD_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_CARD_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-a-r-d_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_CARD_WIDTH",
            "signature": "const val DEFAULT_CARD_WIDTH: Double = 130.0",
            "doc": "Default CardView width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_CHECKBOX_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_CHECKBOX_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_CHECKBOX_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-h-e-c-k-b-o-x_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_CHECKBOX_HEIGHT",
            "signature": "const val DEFAULT_CHECKBOX_HEIGHT: Int = 30",
            "doc": "Default CheckBox height."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_CHECKBOX_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_CHECKBOX_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_CHECKBOX_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-h-e-c-k-b-o-x_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_CHECKBOX_WIDTH",
            "signature": "const val DEFAULT_CHECKBOX_WIDTH: Int = 120",
            "doc": "Default CheckBox width."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_COLOR_PICKER_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_COLOR_PICKER_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_COLOR_PICKER_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-o-l-o-r_-p-i-c-k-e-r_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_COLOR_PICKER_HEIGHT",
            "signature": "const val DEFAULT_COLOR_PICKER_HEIGHT: Int = 30",
            "doc": "Default ColorPicker height."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_COLOR_PICKER_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_COLOR_PICKER_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_COLOR_PICKER_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-o-l-o-r_-p-i-c-k-e-r_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_COLOR_PICKER_WIDTH",
            "signature": "const val DEFAULT_COLOR_PICKER_WIDTH: Int = 120",
            "doc": "Default ColorPicker width."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_COMBOBOX_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_COMBOBOX_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_COMBOBOX_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-o-m-b-o-b-o-x_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_COMBOBOX_HEIGHT",
            "signature": "const val DEFAULT_COMBOBOX_HEIGHT: Int = 30",
            "doc": "Default ComboBox height."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_COMBOBOX_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_COMBOBOX_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_COMBOBOX_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-c-o-m-b-o-b-o-x_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_COMBOBOX_WIDTH",
            "signature": "const val DEFAULT_COMBOBOX_WIDTH: Int = 120",
            "doc": "Default ComboBox width."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_DICE_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_DICE_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_DICE_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-d-i-c-e_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_DICE_HEIGHT",
            "signature": "const val DEFAULT_DICE_HEIGHT: Double = 80.0",
            "doc": "Default DiceView height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_DICE_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_DICE_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_DICE_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-d-i-c-e_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_DICE_WIDTH",
            "signature": "const val DEFAULT_DICE_WIDTH: Double = 80.0",
            "doc": "Default DiceView width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_FADE_TIME": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_FADE_TIME"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_FADE_TIME",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-f-a-d-e_-t-i-m-e.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_FADE_TIME",
            "signature": "const val DEFAULT_FADE_TIME: Int = 250",
            "doc": "The default fade time for MenuScenes in BoardGameApplication.showMenuScene or BoardGameApplication.hideMenuScene in milliseconds."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_FONT_SIZE": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_FONT_SIZE"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_FONT_SIZE",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-f-o-n-t_-s-i-z-e.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_FONT_SIZE",
            "signature": "const val DEFAULT_FONT_SIZE: Double = 14.0",
            "doc": "Default Font size."
          },
          "since": "0.6"
        }
      ]
    },
    "DEFAULT_GRID_SPACING": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_GRID_SPACING"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_GRID_SPACING",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-g-r-i-d_-s-p-a-c-i-n-g.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_GRID_SPACING",
            "signature": "const val DEFAULT_GRID_SPACING: Double = 0.0",
            "doc": "Default GridPane spacing."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_HEXAGON_SIZE": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_HEXAGON_SIZE"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_HEXAGON_SIZE",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-h-e-x-a-g-o-n_-s-i-z-e.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_HEXAGON_SIZE",
            "signature": "const val DEFAULT_HEXAGON_SIZE: Double = 100.0",
            "doc": "Default [DEFAULT_HEXAGON_SIZE](tools.aqua.bgw.core/DEFAULT_HEXAGON_SIZE) size."
          },
          "since": "0.8"
        }
      ]
    },
    "DEFAULT_LABEL_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LABEL_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LABEL_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-a-b-e-l_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LABEL_HEIGHT",
            "signature": "const val DEFAULT_LABEL_HEIGHT: Double = 30.0",
            "doc": "Default Label height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_LABEL_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LABEL_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LABEL_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-a-b-e-l_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LABEL_WIDTH",
            "signature": "const val DEFAULT_LABEL_WIDTH: Double = 120.0",
            "doc": "Default Label width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_LINEAR_LAYOUT_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LINEAR_LAYOUT_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LINEAR_LAYOUT_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-i-n-e-a-r_-l-a-y-o-u-t_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LINEAR_LAYOUT_HEIGHT",
            "signature": "const val DEFAULT_LINEAR_LAYOUT_HEIGHT: Double",
            "doc": "Default LinearLayout height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_LINEAR_LAYOUT_SPACING": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LINEAR_LAYOUT_SPACING"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LINEAR_LAYOUT_SPACING",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-i-n-e-a-r_-l-a-y-o-u-t_-s-p-a-c-i-n-g.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LINEAR_LAYOUT_SPACING",
            "signature": "const val DEFAULT_LINEAR_LAYOUT_SPACING: Double = 0.0",
            "doc": "Default LinearLayout spacing."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_LINEAR_LAYOUT_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LINEAR_LAYOUT_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LINEAR_LAYOUT_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-i-n-e-a-r_-l-a-y-o-u-t_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LINEAR_LAYOUT_WIDTH",
            "signature": "const val DEFAULT_LINEAR_LAYOUT_WIDTH: Double",
            "doc": "Default LinearLayout width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_LIST_VIEW_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LIST_VIEW_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LIST_VIEW_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-i-s-t_-v-i-e-w_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LIST_VIEW_HEIGHT",
            "signature": "const val DEFAULT_LIST_VIEW_HEIGHT: Int = 400",
            "doc": "Default ListView width."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_LIST_VIEW_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_LIST_VIEW_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_LIST_VIEW_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-l-i-s-t_-v-i-e-w_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_LIST_VIEW_WIDTH",
            "signature": "const val DEFAULT_LIST_VIEW_WIDTH: Int = 200",
            "doc": "Default ListView width."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_MENU_SCENE_OPACITY": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_MENU_SCENE_OPACITY"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_MENU_SCENE_OPACITY",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-m-e-n-u_-s-c-e-n-e_-o-p-a-c-i-t-y.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_MENU_SCENE_OPACITY",
            "signature": "const val DEFAULT_MENU_SCENE_OPACITY: Double = 0.75",
            "doc": "Default menu scene opacity."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_PROGRESSBAR_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_PROGRESSBAR_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_PROGRESSBAR_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-p-r-o-g-r-e-s-s-b-a-r_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_PROGRESSBAR_HEIGHT",
            "signature": "const val DEFAULT_PROGRESSBAR_HEIGHT: Int = 20",
            "doc": "Default ProgressBar height."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_PROGRESSBAR_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_PROGRESSBAR_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_PROGRESSBAR_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-p-r-o-g-r-e-s-s-b-a-r_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_PROGRESSBAR_WIDTH",
            "signature": "const val DEFAULT_PROGRESSBAR_WIDTH: Int = 250",
            "doc": "Default ProgressBar width."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_RADIO_BUTTON_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_RADIO_BUTTON_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_RADIO_BUTTON_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-r-a-d-i-o_-b-u-t-t-o-n_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_RADIO_BUTTON_HEIGHT",
            "signature": "const val DEFAULT_RADIO_BUTTON_HEIGHT: Double",
            "doc": "Default RadioButton height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_RADIO_BUTTON_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_RADIO_BUTTON_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_RADIO_BUTTON_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-r-a-d-i-o_-b-u-t-t-o-n_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_RADIO_BUTTON_WIDTH",
            "signature": "const val DEFAULT_RADIO_BUTTON_WIDTH: Double",
            "doc": "Default RadioButton width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_SATCHEL_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_SATCHEL_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_SATCHEL_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-s-a-t-c-h-e-l_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_SATCHEL_HEIGHT",
            "signature": "const val DEFAULT_SATCHEL_HEIGHT: Double",
            "doc": "Default Satchel height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_SATCHEL_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_SATCHEL_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_SATCHEL_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-s-a-t-c-h-e-l_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_SATCHEL_WIDTH",
            "signature": "const val DEFAULT_SATCHEL_WIDTH: Double",
            "doc": "Default Satchel width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_SCENE_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_SCENE_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_SCENE_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-s-c-e-n-e_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_SCENE_HEIGHT",
            "signature": "const val DEFAULT_SCENE_HEIGHT: Double = 1080.0",
            "doc": "Default scene height in virtual pixels."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_SCENE_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_SCENE_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_SCENE_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-s-c-e-n-e_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_SCENE_WIDTH",
            "signature": "const val DEFAULT_SCENE_WIDTH: Double = 1920.0",
            "doc": "Default scene width in virtual pixels."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TABLE_VIEW_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TABLE_VIEW_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TABLE_VIEW_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-a-b-l-e_-v-i-e-w_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TABLE_VIEW_HEIGHT",
            "signature": "const val DEFAULT_TABLE_VIEW_HEIGHT: Double = 500.0",
            "doc": "Default TableView height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TABLE_VIEW_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TABLE_VIEW_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TABLE_VIEW_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-a-b-l-e_-v-i-e-w_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TABLE_VIEW_WIDTH",
            "signature": "const val DEFAULT_TABLE_VIEW_WIDTH: Double = 400.0",
            "doc": "Default TableView width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TEXT_AREA_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TEXT_AREA_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TEXT_AREA_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-e-x-t_-a-r-e-a_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TEXT_AREA_HEIGHT",
            "signature": "const val DEFAULT_TEXT_AREA_HEIGHT: Double = 100.0",
            "doc": "Default TextArea height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TEXT_AREA_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TEXT_AREA_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TEXT_AREA_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-e-x-t_-a-r-e-a_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TEXT_AREA_WIDTH",
            "signature": "const val DEFAULT_TEXT_AREA_WIDTH: Double = 200.0",
            "doc": "Default TextArea width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TEXT_FIELD_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TEXT_FIELD_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TEXT_FIELD_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-e-x-t_-f-i-e-l-d_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TEXT_FIELD_HEIGHT",
            "signature": "const val DEFAULT_TEXT_FIELD_HEIGHT: Double = 30.0",
            "doc": "Default TextField height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TEXT_FIELD_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TEXT_FIELD_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TEXT_FIELD_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-e-x-t_-f-i-e-l-d_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TEXT_FIELD_WIDTH",
            "signature": "const val DEFAULT_TEXT_FIELD_WIDTH: Double = 140.0",
            "doc": "Default TextField width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TOGGLE_BUTTON_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TOGGLE_BUTTON_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TOGGLE_BUTTON_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-o-g-g-l-e_-b-u-t-t-o-n_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TOGGLE_BUTTON_HEIGHT",
            "signature": "const val DEFAULT_TOGGLE_BUTTON_HEIGHT: Double",
            "doc": "Default ToggleButton height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TOGGLE_BUTTON_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TOGGLE_BUTTON_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TOGGLE_BUTTON_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-o-g-g-l-e_-b-u-t-t-o-n_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TOGGLE_BUTTON_WIDTH",
            "signature": "const val DEFAULT_TOGGLE_BUTTON_WIDTH: Double",
            "doc": "Default ToggleButton width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TOKEN_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TOKEN_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TOKEN_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-o-k-e-n_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TOKEN_HEIGHT",
            "signature": "const val DEFAULT_TOKEN_HEIGHT: Double = 50.0",
            "doc": "Default TokenView height."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_TOKEN_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_TOKEN_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_TOKEN_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-t-o-k-e-n_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_TOKEN_WIDTH",
            "signature": "const val DEFAULT_TOKEN_WIDTH: Double = 50.0",
            "doc": "Default TokenView width."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_WINDOW_BORDER": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_WINDOW_BORDER"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_WINDOW_BORDER",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-w-i-n-d-o-w_-b-o-r-d-e-r.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_WINDOW_BORDER",
            "signature": "const val DEFAULT_WINDOW_BORDER: Double = 0.8",
            "doc": "Default minimization factor of window."
          },
          "since": "0.3"
        }
      ]
    },
    "DEFAULT_WINDOW_HEIGHT": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_WINDOW_HEIGHT"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_WINDOW_HEIGHT",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-w-i-n-d-o-w_-h-e-i-g-h-t.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_WINDOW_HEIGHT",
            "signature": "const val DEFAULT_WINDOW_HEIGHT: Double = 747.0",
            "doc": "Default window height in non-maximized mode."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_WINDOW_TITLE": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_WINDOW_TITLE"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_WINDOW_TITLE",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-w-i-n-d-o-w_-t-i-t-l-e.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_WINDOW_TITLE",
            "signature": "const val DEFAULT_WINDOW_TITLE: String",
            "doc": "Default window title."
          },
          "since": "0.2"
        }
      ]
    },
    "DEFAULT_WINDOW_WIDTH": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "DEFAULT_WINDOW_WIDTH"
      ],
      "package": "tools.aqua.bgw.core.DEFAULT_WINDOW_WIDTH",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-d-e-f-a-u-l-t_-w-i-n-d-o-w_-w-i-d-t-h.html",
      "details": [
        {
          "info": {
            "name": "DEFAULT_WINDOW_WIDTH",
            "signature": "const val DEFAULT_WINDOW_WIDTH: Double = 1280.0",
            "doc": "Default window width in non-maximized mode."
          },
          "since": "0.2"
        }
      ]
    },
    "HexOrientation": {
      "FLAT_TOP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "HexOrientation",
            "FLAT_TOP"
          ],
          "package": "tools.aqua.bgw.core.HexOrientation.FLAT_TOP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-hex-orientation\\-f-l-a-t_-t-o-p\\index.html",
          "details": {
            "info": {
              "name": "FLAT_TOP",
              "signature": "FLAT_TOP",
              "doc": "",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "POINTY_TOP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "HexOrientation",
            "POINTY_TOP"
          ],
          "package": "tools.aqua.bgw.core.HexOrientation.POINTY_TOP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-hex-orientation\\-p-o-i-n-t-y_-t-o-p\\index.html",
          "details": {
            "info": {
              "name": "POINTY_TOP",
              "signature": "POINTY_TOP",
              "doc": "",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HexOrientation",
          "entries"
        ],
        "package": "tools.aqua.bgw.core.HexOrientation.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-hex-orientation\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<HexOrientation>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HexOrientation"
        ],
        "package": "tools.aqua.bgw.core.HexOrientation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-hex-orientation\\index.html",
        "details": {
          "info": {
            "name": "HexOrientation",
            "signature": "enum HexOrientation : Enum<HexOrientation>",
            "doc": "Enumeration class representing the orientation options for hexagonal grids and views.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<HexOrientation>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.core/HexOrientation/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[HexOrientation](tools.aqua.bgw.core/HexOrientation)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): HexOrientation",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.core/HexOrientation/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/HexOrientation/valueOf",
              "returnType": "[HexOrientation](tools.aqua.bgw.core/HexOrientation)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<HexOrientation>",
              "name": "values",
              "link": "tools.aqua.bgw.core/HexOrientation/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[HexOrientation](tools.aqua.bgw.core/HexOrientation)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HexOrientation",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.core.HexOrientation.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-hex-orientation\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): HexOrientation",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HexOrientation",
          "values"
        ],
        "package": "tools.aqua.bgw.core.HexOrientation.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-hex-orientation\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<HexOrientation>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "HorizontalAlignment": {
      "CENTER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "HorizontalAlignment",
            "CENTER"
          ],
          "package": "tools.aqua.bgw.core.HorizontalAlignment.CENTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\-c-e-n-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "CENTER",
              "signature": "CENTER",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) centered horizontally.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "LEFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "HorizontalAlignment",
            "LEFT"
          ],
          "package": "tools.aqua.bgw.core.HorizontalAlignment.LEFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\-l-e-f-t\\index.html",
          "details": {
            "info": {
              "name": "LEFT",
              "signature": "LEFT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the left.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "RIGHT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "HorizontalAlignment",
            "RIGHT"
          ],
          "package": "tools.aqua.bgw.core.HorizontalAlignment.RIGHT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\-r-i-g-h-t\\index.html",
          "details": {
            "info": {
              "name": "RIGHT",
              "signature": "RIGHT",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the right.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HorizontalAlignment",
          "entries"
        ],
        "package": "tools.aqua.bgw.core.HorizontalAlignment.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<HorizontalAlignment>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HorizontalAlignment"
        ],
        "package": "tools.aqua.bgw.core.HorizontalAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\index.html",
        "details": {
          "info": {
            "name": "HorizontalAlignment",
            "signature": "enum HorizontalAlignment : Enum<HorizontalAlignment>",
            "doc": "Used to define horizontal centering behaviour.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "seeAlso": [
            {
              "name": "Alignment",
              "link": "tools.aqua.bgw.core/Alignment"
            }
          ],
          "since": "0.1"
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<HorizontalAlignment>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.core/HorizontalAlignment/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): HorizontalAlignment",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.core/HorizontalAlignment/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/HorizontalAlignment/valueOf",
              "returnType": "[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<HorizontalAlignment>",
              "name": "values",
              "link": "tools.aqua.bgw.core/HorizontalAlignment/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[HorizontalAlignment](tools.aqua.bgw.core/HorizontalAlignment)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HorizontalAlignment",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.core.HorizontalAlignment.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): HorizontalAlignment",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "HorizontalAlignment",
          "values"
        ],
        "package": "tools.aqua.bgw.core.HorizontalAlignment.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-horizontal-alignment\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<HorizontalAlignment>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "MenuScene": {
      "MenuScene": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "MenuScene",
          "MenuScene"
        ],
        "package": "tools.aqua.bgw.core.MenuScene.MenuScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-menu-scene\\-menu-scene.html",
        "details": [
          {
            "info": {
              "name": "MenuScene",
              "signature": "constructor(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "width",
                "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH](tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH)."
              },
              {
                "name": "height",
                "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT](tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT)."
              },
              {
                "name": "background",
                "doc": "BoardGameScene [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "MenuScene"
        ],
        "package": "tools.aqua.bgw.core.MenuScene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-menu-scene\\index.html",
        "details": {
          "info": {
            "name": "MenuScene",
            "signature": "open class MenuScene(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE) : Scene<StaticComponentView<out StaticComponentView<*>>>",
            "doc": "Baseclass for BGW menu scenes. Extend this class in order to create your own menu scene.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "width",
              "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH](tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH)."
            },
            {
              "name": "height",
              "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT](tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT)."
            },
            {
              "name": "background",
              "doc": "BoardGameScene [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(width: Number = DEFAULT_SCENE_WIDTH, height: Number = DEFAULT_SCENE_HEIGHT, background: Visual = ColorVisual.WHITE)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "width",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_WIDTH",
                  "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_WIDTH](tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH)."
                },
                {
                  "modifier": "",
                  "name": "height",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "DEFAULT_SCENE_HEIGHT",
                  "doc": "Scene in virtual coordinates. Default: [DEFAULT_SCENE_HEIGHT](tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT)."
                },
                {
                  "modifier": "",
                  "name": "background",
                  "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                  "defaultValue": "ColorVisual.WHITE",
                  "doc": "BoardGameScene [Visual](tools.aqua.bgw.visual/Visual). Default: [ColorVisual.WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
                }
              ],
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "link": "tools.aqua.bgw.core/Scene/background",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "The background [Visual](tools.aqua.bgw.visual/Visual) of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val components: List<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "components",
              "link": "tools.aqua.bgw.core/Scene/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<out [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<*>>>",
              "defaultValue": "",
              "doc": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "link": "tools.aqua.bgw.core/Scene/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The height of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.core/Scene/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.core/Scene/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.core/Scene/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core/Scene/onKeyPressed) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "link": "tools.aqua.bgw.core/Scene/onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "link": "tools.aqua.bgw.core/Scene/onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.core/Scene/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of the [background](tools.aqua.bgw.core/Scene/background) of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val rootNode: RootComponent<StaticComponentView<out StaticComponentView<*>>>",
              "modifier": "val",
              "name": "rootNode",
              "link": "tools.aqua.bgw.core/Scene/rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components/RootComponent)<[StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<out [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<*>>>",
              "defaultValue": "",
              "doc": "The root node of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "link": "tools.aqua.bgw.core/Scene/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The width of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.core/MenuScene",
                  "type": "[StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<out [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/MenuScene",
              "returnType": "Unit",
              "doc": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "link": "tools.aqua.bgw.core/Scene/clearComponents",
              "returnType": "Unit",
              "doc": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "link": "tools.aqua.bgw.core/Scene/findPathToChild",
                  "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/findPathToChild",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components/ComponentView)>",
              "doc": "Searches [node](tools.aqua.bgw.core/Scene/findPathToChild) recursively through the visual tree and logs path where the [node](tools.aqua.bgw.core/Scene/findPathToChild) appears as first component and the [rootNode](tools.aqua.bgw.core/Scene/rootNode) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "link": "tools.aqua.bgw.core/Scene/playAnimation",
                  "type": "[Animation](tools.aqua.bgw.animation/Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/playAnimation",
              "returnType": "Unit",
              "doc": "Plays given [Animation](tools.aqua.bgw.animation/Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: StaticComponentView<out StaticComponentView<*>>)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.core/MenuScene",
                  "type": "[StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<out [StaticComponentView](tools.aqua.bgw.components/StaticComponentView)<*>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/MenuScene",
              "returnType": "Unit",
              "doc": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "ScaleMode": {
      "FULL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "ScaleMode",
            "FULL"
          ],
          "package": "tools.aqua.bgw.core.ScaleMode.FULL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\-f-u-l-l\\index.html",
          "details": {
            "info": {
              "name": "FULL",
              "signature": "FULL",
              "doc": "Fully automatic scaling to window size.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NO_SCALE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "ScaleMode",
            "NO_SCALE"
          ],
          "package": "tools.aqua.bgw.core.ScaleMode.NO_SCALE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\-n-o_-s-c-a-l-e\\index.html",
          "details": {
            "info": {
              "name": "NO_SCALE",
              "signature": "NO_SCALE",
              "doc": "Disables automatic rescaling.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "ONLY_SHRINK": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "ScaleMode",
            "ONLY_SHRINK"
          ],
          "package": "tools.aqua.bgw.core.ScaleMode.ONLY_SHRINK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\-o-n-l-y_-s-h-r-i-n-k\\index.html",
          "details": {
            "info": {
              "name": "ONLY_SHRINK",
              "signature": "ONLY_SHRINK",
              "doc": "Scaling only shrinks Scene when window gets to small.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "ScaleMode",
          "entries"
        ],
        "package": "tools.aqua.bgw.core.ScaleMode.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<ScaleMode>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "ScaleMode"
        ],
        "package": "tools.aqua.bgw.core.ScaleMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\index.html",
        "details": {
          "info": {
            "name": "ScaleMode",
            "signature": "enum ScaleMode : Enum<ScaleMode>",
            "doc": "Used to define the scaling behaviour of a Scene.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.1",
          "deprecated": {
            "description": "ScaleMode is no longer used as of BGW 1.0.",
            "replaceWith": ""
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<ScaleMode>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.core/ScaleMode/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[ScaleMode](tools.aqua.bgw.core/ScaleMode)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): ScaleMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.core/ScaleMode/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/ScaleMode/valueOf",
              "returnType": "[ScaleMode](tools.aqua.bgw.core/ScaleMode)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<ScaleMode>",
              "name": "values",
              "link": "tools.aqua.bgw.core/ScaleMode/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[ScaleMode](tools.aqua.bgw.core/ScaleMode)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "ScaleMode",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.core.ScaleMode.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): ScaleMode",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "ScaleMode",
          "values"
        ],
        "package": "tools.aqua.bgw.core.ScaleMode.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scale-mode\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<ScaleMode>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "Scene": {
      "addComponents": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "addComponents"
        ],
        "package": "tools.aqua.bgw.core.Scene.addComponents",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\add-components.html",
        "details": [
          {
            "info": {
              "name": "addComponents",
              "signature": "fun addComponents(vararg components: T)",
              "doc": "Adds all given ComponentViews to the root node and rootComponents list."
            },
            "parameters": [
              {
                "name": "components",
                "doc": "Components to add."
              }
            ]
          }
        ]
      },
      "background": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "background"
        ],
        "package": "tools.aqua.bgw.core.Scene.background",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\background.html",
        "details": [
          {
            "info": {
              "name": "background",
              "signature": "var background: Visual",
              "doc": "The background [Visual](tools.aqua.bgw.visual/Visual) of this [Scene](tools.aqua.bgw.core/Scene)."
            }
          }
        ]
      },
      "clearComponents": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "clearComponents"
        ],
        "package": "tools.aqua.bgw.core.Scene.clearComponents",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\clear-components.html",
        "details": [
          {
            "info": {
              "name": "clearComponents",
              "signature": "fun clearComponents()",
              "doc": "Removes all ComponentViews from the root node and rootComponents list."
            }
          }
        ]
      },
      "components": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "components"
        ],
        "package": "tools.aqua.bgw.core.Scene.components",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\components.html",
        "details": [
          {
            "info": {
              "name": "components",
              "signature": "val components: List<T>",
              "doc": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core/Scene)."
            }
          }
        ]
      },
      "findPathToChild": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "findPathToChild"
        ],
        "package": "tools.aqua.bgw.core.Scene.findPathToChild",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\find-path-to-child.html",
        "details": [
          {
            "info": {
              "name": "findPathToChild",
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "doc": "Searches [node](tools.aqua.bgw.core/Scene/findPathToChild) recursively through the visual tree and logs path where the [node](tools.aqua.bgw.core/Scene/findPathToChild) appears as first component and the [rootNode](tools.aqua.bgw.core/Scene/rootNode) as last."
            },
            "parameters": [
              {
                "name": "node",
                "doc": "Child to find."
              }
            ],
            "throws": [
              {
                "name": "IllegalStateException",
                "doc": "If child was not contained in this [Scene](tools.aqua.bgw.core/Scene)."
              }
            ]
          }
        ]
      },
      "height": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "height"
        ],
        "package": "tools.aqua.bgw.core.Scene.height",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\height.html",
        "details": [
          {
            "info": {
              "name": "height",
              "signature": "val height: Double",
              "doc": "The height of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene"
        ],
        "package": "tools.aqua.bgw.core.Scene",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\index.html",
        "details": {
          "info": {
            "name": "Scene",
            "signature": "sealed class Scene<T : ComponentView>",
            "doc": "Baseclass for BGW scenes.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "BoardGameScene",
              "link": "tools.aqua.bgw.core/BoardGameScene"
            },
            {
              "name": "MenuScene",
              "link": "tools.aqua.bgw.core/MenuScene"
            }
          ],
          "seeAlso": [
            {
              "name": "BoardGameScene",
              "link": "tools.aqua.bgw.core/BoardGameScene"
            },
            {
              "name": "MenuScene",
              "link": "tools.aqua.bgw.core/MenuScene"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "Generic [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "name": "width",
              "doc": "[Scene](tools.aqua.bgw.core/Scene) width in virtual coordinates."
            },
            {
              "name": "height",
              "doc": "[Scene](tools.aqua.bgw.core/Scene) height in virtual coordinates."
            },
            {
              "name": "background",
              "doc": "[Scene](tools.aqua.bgw.core/Scene/background) [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "var background: Visual",
              "modifier": "var",
              "name": "background",
              "link": "tools.aqua.bgw.core/Scene/background",
              "type": "[Visual](tools.aqua.bgw.visual/Visual)",
              "defaultValue": "",
              "doc": "The background [Visual](tools.aqua.bgw.visual/Visual) of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val components: List<T>",
              "modifier": "val",
              "name": "components",
              "link": "tools.aqua.bgw.core/Scene/components",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.core/Scene)>",
              "defaultValue": "",
              "doc": "Returns all root components that are currently contained in this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "link": "tools.aqua.bgw.core/Scene/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The height of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            },
            {
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyPressed",
              "link": "tools.aqua.bgw.core/Scene/onKeyPressed",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed."
            },
            {
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyReleased",
              "link": "tools.aqua.bgw.core/Scene/onKeyReleased",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released."
            },
            {
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "modifier": "var",
              "name": "onKeyTyped",
              "link": "tools.aqua.bgw.core/Scene/onKeyTyped",
              "type": "([KeyEvent](tools.aqua.bgw.event/KeyEvent)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core/Scene/onKeyPressed) ."
            },
            {
              "signature": "var onSceneHid: () -> Unit?",
              "modifier": "var",
              "name": "onSceneHid",
              "link": "tools.aqua.bgw.core/Scene/onSceneHid",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with no event whenever a scene is hid."
            },
            {
              "signature": "var onSceneShown: () -> Unit?",
              "modifier": "var",
              "name": "onSceneShown",
              "link": "tools.aqua.bgw.core/Scene/onSceneShown",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked with no event whenever a scene is shown."
            },
            {
              "signature": "var opacity: Double",
              "modifier": "var",
              "name": "opacity",
              "link": "tools.aqua.bgw.core/Scene/opacity",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Opacity of the [background](tools.aqua.bgw.core/Scene/background) of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val rootNode: RootComponent<T>",
              "modifier": "val",
              "name": "rootNode",
              "link": "tools.aqua.bgw.core/Scene/rootNode",
              "type": "[RootComponent](tools.aqua.bgw.components/RootComponent)<[T](tools.aqua.bgw.core/Scene)>",
              "defaultValue": "",
              "doc": "The root node of this [Scene](tools.aqua.bgw.core/Scene)."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "link": "tools.aqua.bgw.core/Scene/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The width of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            }
          ],
          "functions": [
            {
              "signature": "fun addComponents(vararg components: T)",
              "name": "addComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.core/Scene/addComponents",
                  "type": "[T](tools.aqua.bgw.core/Scene)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/addComponents",
              "returnType": "Unit",
              "doc": "Adds all given ComponentViews to the root node and rootComponents list.",
              "isSuspend": false
            },
            {
              "signature": "fun clearComponents()",
              "name": "clearComponents",
              "link": "tools.aqua.bgw.core/Scene/clearComponents",
              "returnType": "Unit",
              "doc": "Removes all ComponentViews from the root node and rootComponents list."
            },
            {
              "signature": "fun findPathToChild(node: ComponentView): List<ComponentView>",
              "name": "findPathToChild",
              "parameters": [
                {
                  "modifier": "",
                  "name": "node",
                  "link": "tools.aqua.bgw.core/Scene/findPathToChild",
                  "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/findPathToChild",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components/ComponentView)>",
              "doc": "Searches [node](tools.aqua.bgw.core/Scene/findPathToChild) recursively through the visual tree and logs path where the [node](tools.aqua.bgw.core/Scene/findPathToChild) appears as first component and the [rootNode](tools.aqua.bgw.core/Scene/rootNode) as last.",
              "isSuspend": false
            },
            {
              "signature": "fun playAnimation(animation: Animation)",
              "name": "playAnimation",
              "parameters": [
                {
                  "modifier": "",
                  "name": "animation",
                  "link": "tools.aqua.bgw.core/Scene/playAnimation",
                  "type": "[Animation](tools.aqua.bgw.animation/Animation)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/playAnimation",
              "returnType": "Unit",
              "doc": "Plays given [Animation](tools.aqua.bgw.animation/Animation).",
              "isSuspend": false
            },
            {
              "signature": "fun removeComponents(vararg components: T)",
              "name": "removeComponents",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "components",
                  "link": "tools.aqua.bgw.core/Scene/removeComponents",
                  "type": "[T](tools.aqua.bgw.core/Scene)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/Scene/removeComponents",
              "returnType": "Unit",
              "doc": "Removes all given ComponentViews from the root node and rootComponents list.",
              "isSuspend": false
            }
          ]
        }
      },
      "onKeyPressed": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "onKeyPressed"
        ],
        "package": "tools.aqua.bgw.core.Scene.onKeyPressed",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\on-key-pressed.html",
        "details": [
          {
            "info": {
              "name": "onKeyPressed",
              "signature": "var onKeyPressed: (KeyEvent) -> Unit?",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is pressed."
            },
            "seeAlso": [
              {
                "name": "KeyEvent",
                "link": "tools.aqua.bgw.event/KeyEvent"
              }
            ]
          }
        ]
      },
      "onKeyReleased": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "onKeyReleased"
        ],
        "package": "tools.aqua.bgw.core.Scene.onKeyReleased",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\on-key-released.html",
        "details": [
          {
            "info": {
              "name": "onKeyReleased",
              "signature": "var onKeyReleased: (KeyEvent) -> Unit?",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a key is released."
            },
            "seeAlso": [
              {
                "name": "KeyEvent",
                "link": "tools.aqua.bgw.event/KeyEvent"
              }
            ]
          }
        ]
      },
      "onKeyTyped": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "onKeyTyped"
        ],
        "package": "tools.aqua.bgw.core.Scene.onKeyTyped",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\on-key-typed.html",
        "details": [
          {
            "info": {
              "name": "onKeyTyped",
              "signature": "var onKeyTyped: (KeyEvent) -> Unit?",
              "doc": "Gets invoked with a [KeyEvent](tools.aqua.bgw.event/KeyEvent) whenever a Character is typed. Gets invoked after [onKeyPressed](tools.aqua.bgw.core/Scene/onKeyPressed) ."
            },
            "seeAlso": [
              {
                "name": "KeyEvent",
                "link": "tools.aqua.bgw.event/KeyEvent"
              },
              {
                "name": "Scene.onKeyPressed",
                "link": "tools.aqua.bgw.core/Scene/onKeyPressed"
              }
            ],
            "deprecated": {
              "description": "The onKeyTyped event is defined in this specification for reference and completeness and will be removed in a future version.",
              "replaceWith": ""
            }
          }
        ]
      },
      "onSceneHid": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "onSceneHid"
        ],
        "package": "tools.aqua.bgw.core.Scene.onSceneHid",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\on-scene-hid.html",
        "details": [
          {
            "info": {
              "name": "onSceneHid",
              "signature": "var onSceneHid: () -> Unit?",
              "doc": "Gets invoked with no event whenever a scene is hid."
            }
          }
        ]
      },
      "onSceneShown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "onSceneShown"
        ],
        "package": "tools.aqua.bgw.core.Scene.onSceneShown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\on-scene-shown.html",
        "details": [
          {
            "info": {
              "name": "onSceneShown",
              "signature": "var onSceneShown: () -> Unit?",
              "doc": "Gets invoked with no event whenever a scene is shown."
            }
          }
        ]
      },
      "opacity": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "opacity"
        ],
        "package": "tools.aqua.bgw.core.Scene.opacity",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\opacity.html",
        "details": [
          {
            "info": {
              "name": "opacity",
              "signature": "var opacity: Double",
              "doc": "Opacity of the [background](tools.aqua.bgw.core/Scene/background) of this [Scene](tools.aqua.bgw.core/Scene)."
            }
          }
        ]
      },
      "playAnimation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "playAnimation"
        ],
        "package": "tools.aqua.bgw.core.Scene.playAnimation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\play-animation.html",
        "details": [
          {
            "info": {
              "name": "playAnimation",
              "signature": "fun playAnimation(animation: Animation)",
              "doc": "Plays given [Animation](tools.aqua.bgw.animation/Animation)."
            },
            "parameters": [
              {
                "name": "animation",
                "doc": "[Animation](tools.aqua.bgw.animation/Animation) to play."
              }
            ]
          }
        ]
      },
      "removeComponents": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "removeComponents"
        ],
        "package": "tools.aqua.bgw.core.Scene.removeComponents",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\remove-components.html",
        "details": [
          {
            "info": {
              "name": "removeComponents",
              "signature": "fun removeComponents(vararg components: T)",
              "doc": "Removes all given ComponentViews from the root node and rootComponents list."
            },
            "parameters": [
              {
                "name": "components",
                "doc": "Components to remove."
              }
            ]
          }
        ]
      },
      "rootNode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "rootNode"
        ],
        "package": "tools.aqua.bgw.core.Scene.rootNode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\root-node.html",
        "details": [
          {
            "info": {
              "name": "rootNode",
              "signature": "val rootNode: RootComponent<T>",
              "doc": "The root node of this [Scene](tools.aqua.bgw.core/Scene).\n\nUse it to compare the parent [Property](tools.aqua.bgw.observable.properties/Property) of any [ComponentView](tools.aqua.bgw.components/ComponentView) to find out whether it was directly added to the [Scene](tools.aqua.bgw.core/Scene)."
            }
          }
        ]
      },
      "width": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "Scene",
          "width"
        ],
        "package": "tools.aqua.bgw.core.Scene.width",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-scene\\width.html",
        "details": [
          {
            "info": {
              "name": "width",
              "signature": "val width: Double",
              "doc": "The width of this [Scene](tools.aqua.bgw.core/Scene) in virtual coordinates."
            }
          }
        ]
      }
    },
    "VerticalAlignment": {
      "BOTTOM": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "VerticalAlignment",
            "BOTTOM"
          ],
          "package": "tools.aqua.bgw.core.VerticalAlignment.BOTTOM",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\-b-o-t-t-o-m\\index.html",
          "details": {
            "info": {
              "name": "BOTTOM",
              "signature": "BOTTOM",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the bottom.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "CENTER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "VerticalAlignment",
            "CENTER"
          ],
          "package": "tools.aqua.bgw.core.VerticalAlignment.CENTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\-c-e-n-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "CENTER",
              "signature": "CENTER",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) centered vertically.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "TOP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "VerticalAlignment",
            "TOP"
          ],
          "package": "tools.aqua.bgw.core.VerticalAlignment.TOP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\-t-o-p\\index.html",
          "details": {
            "info": {
              "name": "TOP",
              "signature": "TOP",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) on the top.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "VerticalAlignment",
          "entries"
        ],
        "package": "tools.aqua.bgw.core.VerticalAlignment.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<VerticalAlignment>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "VerticalAlignment"
        ],
        "package": "tools.aqua.bgw.core.VerticalAlignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\index.html",
        "details": {
          "info": {
            "name": "VerticalAlignment",
            "signature": "enum VerticalAlignment : Enum<VerticalAlignment>",
            "doc": "Used to define vertical centering behaviour.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "seeAlso": [
            {
              "name": "Alignment",
              "link": "tools.aqua.bgw.core/Alignment"
            }
          ],
          "since": "0.1"
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<VerticalAlignment>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.core/VerticalAlignment/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): VerticalAlignment",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.core/VerticalAlignment/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/VerticalAlignment/valueOf",
              "returnType": "[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<VerticalAlignment>",
              "name": "values",
              "link": "tools.aqua.bgw.core/VerticalAlignment/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[VerticalAlignment](tools.aqua.bgw.core/VerticalAlignment)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "VerticalAlignment",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.core.VerticalAlignment.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): VerticalAlignment",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "VerticalAlignment",
          "values"
        ],
        "package": "tools.aqua.bgw.core.VerticalAlignment.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-vertical-alignment\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<VerticalAlignment>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "WindowMode": {
      "FULLSCREEN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "WindowMode",
            "FULLSCREEN"
          ],
          "package": "tools.aqua.bgw.core.WindowMode.FULLSCREEN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\-f-u-l-l-s-c-r-e-e-n\\index.html",
          "details": {
            "info": {
              "name": "FULLSCREEN",
              "signature": "FULLSCREEN",
              "doc": "Starts Application as maximized window. Overrides BoardGameApplication.isFullScreen as 'true'.\n\nNote: This does not override BoardGameApplication.isMaximized which might become relevant after leaving fullscreen mode.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "MAXIMIZED": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "WindowMode",
            "MAXIMIZED"
          ],
          "package": "tools.aqua.bgw.core.WindowMode.MAXIMIZED",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\-m-a-x-i-m-i-z-e-d\\index.html",
          "details": {
            "info": {
              "name": "MAXIMIZED",
              "signature": "MAXIMIZED",
              "doc": "Starts Application as maximized non-fullscreen window. Overrides BoardGameApplication.isMaximized as 'true'. Overrides BoardGameApplication.isFullScreen as 'false'.",
              "tags": {
                "modifiers": []
              }
            },
            "deprecated": {
              "description": "WindowMode.MAXIMIZED is no longer used as of BGW 1.0.",
              "replaceWith": ""
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NORMAL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.core",
            "WindowMode",
            "NORMAL"
          ],
          "package": "tools.aqua.bgw.core.WindowMode.NORMAL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\-n-o-r-m-a-l\\index.html",
          "details": {
            "info": {
              "name": "NORMAL",
              "signature": "NORMAL",
              "doc": "Starts Application as normal window with given dimensions. Overrides BoardGameApplication.isMaximized as 'false'. Overrides BoardGameApplication.isFullScreen as 'false'.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "WindowMode",
          "entries"
        ],
        "package": "tools.aqua.bgw.core.WindowMode.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<WindowMode>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "WindowMode"
        ],
        "package": "tools.aqua.bgw.core.WindowMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\index.html",
        "details": {
          "info": {
            "name": "WindowMode",
            "signature": "enum WindowMode : Enum<WindowMode>",
            "doc": "Enum for different window modes.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.1"
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<WindowMode>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.core/WindowMode/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[WindowMode](tools.aqua.bgw.core/WindowMode)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): WindowMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.core/WindowMode/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.core/WindowMode/valueOf",
              "returnType": "[WindowMode](tools.aqua.bgw.core/WindowMode)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<WindowMode>",
              "name": "values",
              "link": "tools.aqua.bgw.core/WindowMode/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[WindowMode](tools.aqua.bgw.core/WindowMode)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "WindowMode",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.core.WindowMode.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): WindowMode",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.core",
          "WindowMode",
          "values"
        ],
        "package": "tools.aqua.bgw.core.WindowMode.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.core\\-window-mode\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<WindowMode>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "findComponent": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "findComponent"
      ],
      "package": "tools.aqua.bgw.core.findComponent",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\find-component.html",
      "details": [
        {
          "info": {
            "name": "findComponent",
            "signature": "fun Scene<*>.findComponent(id: String): ComponentView?",
            "doc": ""
          }
        }
      ]
    },
    "getRootNode": {
      "type": "none",
      "breadcrumbs": [
        "tools.aqua.bgw.core",
        "getRootNode"
      ],
      "package": "tools.aqua.bgw.core.getRootNode",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\get-root-node.html",
      "details": [
        {
          "info": {
            "name": "getRootNode",
            "signature": "fun ComponentView.getRootNode(): RootComponent<*>",
            "doc": ""
          }
        }
      ]
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.core"
      ],
      "package": "tools.aqua.bgw.core",
      "path": "example\\htmlPartial\\tools.aqua.bgw.core\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "enum Alignment : Enum<Alignment>",
          "doc": "",
          "tags": {
            "modifiers": [],
            "type": "enum"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "Alignment",
            "doc": "Used to define a centering behaviour. Encapsulates VerticalAlignment and HorizontalAlignment.",
            "link": "tools.aqua.bgw.core/Alignment"
          },
          {
            "name": "AspectRatio",
            "doc": "Class representing an aspect ratio between the window sides.",
            "link": "tools.aqua.bgw.core/AspectRatio"
          },
          {
            "name": "BoardGameApplication",
            "doc": "Baseclass for all BGW Applications. Extend from this class in order to create your own game application. You may only instantiate one application.",
            "link": "tools.aqua.bgw.core/BoardGameApplication"
          },
          {
            "name": "BoardGameScene",
            "doc": "Baseclass for BGW game scenes.",
            "link": "tools.aqua.bgw.core/BoardGameScene"
          },
          {
            "name": "Color",
            "doc": "Represents a color with red, green, blue and alpha values.",
            "link": "tools.aqua.bgw.core/Color"
          },
          {
            "name": "HexOrientation",
            "doc": "Enumeration class representing the orientation options for hexagonal grids and views.",
            "link": "tools.aqua.bgw.core/HexOrientation"
          },
          {
            "name": "HorizontalAlignment",
            "doc": "Used to define horizontal centering behaviour.",
            "link": "tools.aqua.bgw.core/HorizontalAlignment"
          },
          {
            "name": "MenuScene",
            "doc": "Baseclass for BGW menu scenes. Extend this class in order to create your own menu scene.",
            "link": "tools.aqua.bgw.core/MenuScene"
          },
          {
            "name": "ScaleMode",
            "doc": "Used to define the scaling behaviour of a Scene.",
            "link": "tools.aqua.bgw.core/ScaleMode"
          },
          {
            "name": "Scene",
            "doc": "Baseclass for BGW scenes.",
            "link": "tools.aqua.bgw.core/Scene"
          },
          {
            "name": "VerticalAlignment",
            "doc": "Used to define vertical centering behaviour.",
            "link": "tools.aqua.bgw.core/VerticalAlignment"
          },
          {
            "name": "WindowMode",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for different window modes.",
            "link": "tools.aqua.bgw.core/WindowMode"
          }
        ],
        "properties": [
          {
            "signature": "const val DEFAULT_ANIMATION_DURATION: Int = 1000",
            "modifier": "val",
            "name": "DEFAULT_ANIMATION_DURATION",
            "link": "tools.aqua.bgw.core/DEFAULT_ANIMATION_DURATION",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "1000",
            "doc": "Default Animation duration in milliseconds."
          },
          {
            "signature": "const val DEFAULT_ANIMATION_SPEED: Int = 50",
            "modifier": "val",
            "name": "DEFAULT_ANIMATION_SPEED",
            "link": "tools.aqua.bgw.core/DEFAULT_ANIMATION_SPEED",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "50",
            "doc": "Default Animation speed in steps."
          },
          {
            "signature": "const val DEFAULT_AREA_HEIGHT: Double",
            "modifier": "val",
            "name": "DEFAULT_AREA_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_AREA_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default Area height."
          },
          {
            "signature": "const val DEFAULT_AREA_WIDTH: Double",
            "modifier": "val",
            "name": "DEFAULT_AREA_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_AREA_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default Area width."
          },
          {
            "signature": "const val DEFAULT_BLUR_RADIUS: Double = 40.0",
            "modifier": "val",
            "name": "DEFAULT_BLUR_RADIUS",
            "link": "tools.aqua.bgw.core/DEFAULT_BLUR_RADIUS",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "40.0",
            "doc": "Default blur radius for menuScene overlay."
          },
          {
            "signature": "const val DEFAULT_BOARD_HEIGHT: Double = 900.0",
            "modifier": "val",
            "name": "DEFAULT_BOARD_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_BOARD_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "900.0",
            "doc": "Default TableView height."
          },
          {
            "signature": "const val DEFAULT_BOARD_WIDTH: Double = 1600.0",
            "modifier": "val",
            "name": "DEFAULT_BOARD_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_BOARD_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "1600.0",
            "doc": "Default TableView width."
          },
          {
            "signature": "const val DEFAULT_BUTTON_HEIGHT: Double = 45.0",
            "modifier": "val",
            "name": "DEFAULT_BUTTON_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_BUTTON_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "45.0",
            "doc": "Default Button height."
          },
          {
            "signature": "const val DEFAULT_BUTTON_WIDTH: Double = 120.0",
            "modifier": "val",
            "name": "DEFAULT_BUTTON_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_BUTTON_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "120.0",
            "doc": "Default Button width."
          },
          {
            "signature": "const val DEFAULT_CARD_HEIGHT: Double = 200.0",
            "modifier": "val",
            "name": "DEFAULT_CARD_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_CARD_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "200.0",
            "doc": "Default CardView height."
          },
          {
            "signature": "const val DEFAULT_CARD_STACK_HEIGHT: Double",
            "modifier": "val",
            "name": "DEFAULT_CARD_STACK_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_CARD_STACK_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default CardStack height."
          },
          {
            "signature": "const val DEFAULT_CARD_STACK_WIDTH: Double",
            "modifier": "val",
            "name": "DEFAULT_CARD_STACK_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_CARD_STACK_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default CardStack width."
          },
          {
            "signature": "const val DEFAULT_CARD_WIDTH: Double = 130.0",
            "modifier": "val",
            "name": "DEFAULT_CARD_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_CARD_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "130.0",
            "doc": "Default CardView width."
          },
          {
            "signature": "const val DEFAULT_CHECKBOX_HEIGHT: Int = 30",
            "modifier": "val",
            "name": "DEFAULT_CHECKBOX_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_CHECKBOX_HEIGHT",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "30",
            "doc": "Default CheckBox height."
          },
          {
            "signature": "const val DEFAULT_CHECKBOX_WIDTH: Int = 120",
            "modifier": "val",
            "name": "DEFAULT_CHECKBOX_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_CHECKBOX_WIDTH",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "120",
            "doc": "Default CheckBox width."
          },
          {
            "signature": "const val DEFAULT_COLOR_PICKER_HEIGHT: Int = 30",
            "modifier": "val",
            "name": "DEFAULT_COLOR_PICKER_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_HEIGHT",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "30",
            "doc": "Default ColorPicker height."
          },
          {
            "signature": "const val DEFAULT_COLOR_PICKER_WIDTH: Int = 120",
            "modifier": "val",
            "name": "DEFAULT_COLOR_PICKER_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_COLOR_PICKER_WIDTH",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "120",
            "doc": "Default ColorPicker width."
          },
          {
            "signature": "const val DEFAULT_COMBOBOX_HEIGHT: Int = 30",
            "modifier": "val",
            "name": "DEFAULT_COMBOBOX_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_COMBOBOX_HEIGHT",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "30",
            "doc": "Default ComboBox height."
          },
          {
            "signature": "const val DEFAULT_COMBOBOX_WIDTH: Int = 120",
            "modifier": "val",
            "name": "DEFAULT_COMBOBOX_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_COMBOBOX_WIDTH",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "120",
            "doc": "Default ComboBox width."
          },
          {
            "signature": "const val DEFAULT_DICE_HEIGHT: Double = 80.0",
            "modifier": "val",
            "name": "DEFAULT_DICE_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_DICE_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "80.0",
            "doc": "Default DiceView height."
          },
          {
            "signature": "const val DEFAULT_DICE_WIDTH: Double = 80.0",
            "modifier": "val",
            "name": "DEFAULT_DICE_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_DICE_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "80.0",
            "doc": "Default DiceView width."
          },
          {
            "signature": "const val DEFAULT_FADE_TIME: Int = 250",
            "modifier": "val",
            "name": "DEFAULT_FADE_TIME",
            "link": "tools.aqua.bgw.core/DEFAULT_FADE_TIME",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "250",
            "doc": "The default fade time for MenuScenes in BoardGameApplication.showMenuScene or BoardGameApplication.hideMenuScene in milliseconds."
          },
          {
            "signature": "const val DEFAULT_FONT_SIZE: Double = 14.0",
            "modifier": "val",
            "name": "DEFAULT_FONT_SIZE",
            "link": "tools.aqua.bgw.core/DEFAULT_FONT_SIZE",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "14.0",
            "doc": "Default Font size."
          },
          {
            "signature": "const val DEFAULT_GRID_SPACING: Double = 0.0",
            "modifier": "val",
            "name": "DEFAULT_GRID_SPACING",
            "link": "tools.aqua.bgw.core/DEFAULT_GRID_SPACING",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "0.0",
            "doc": "Default GridPane spacing."
          },
          {
            "signature": "const val DEFAULT_HEXAGON_SIZE: Double = 100.0",
            "modifier": "val",
            "name": "DEFAULT_HEXAGON_SIZE",
            "link": "tools.aqua.bgw.core/DEFAULT_HEXAGON_SIZE",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "100.0",
            "doc": "Default [DEFAULT_HEXAGON_SIZE](tools.aqua.bgw.core/DEFAULT_HEXAGON_SIZE) size."
          },
          {
            "signature": "const val DEFAULT_LABEL_HEIGHT: Double = 30.0",
            "modifier": "val",
            "name": "DEFAULT_LABEL_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_LABEL_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "30.0",
            "doc": "Default Label height."
          },
          {
            "signature": "const val DEFAULT_LABEL_WIDTH: Double = 120.0",
            "modifier": "val",
            "name": "DEFAULT_LABEL_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_LABEL_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "120.0",
            "doc": "Default Label width."
          },
          {
            "signature": "const val DEFAULT_LINEAR_LAYOUT_HEIGHT: Double",
            "modifier": "val",
            "name": "DEFAULT_LINEAR_LAYOUT_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default LinearLayout height."
          },
          {
            "signature": "const val DEFAULT_LINEAR_LAYOUT_SPACING: Double = 0.0",
            "modifier": "val",
            "name": "DEFAULT_LINEAR_LAYOUT_SPACING",
            "link": "tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_SPACING",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "0.0",
            "doc": "Default LinearLayout spacing."
          },
          {
            "signature": "const val DEFAULT_LINEAR_LAYOUT_WIDTH: Double",
            "modifier": "val",
            "name": "DEFAULT_LINEAR_LAYOUT_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_LINEAR_LAYOUT_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default LinearLayout width."
          },
          {
            "signature": "const val DEFAULT_LIST_VIEW_HEIGHT: Int = 400",
            "modifier": "val",
            "name": "DEFAULT_LIST_VIEW_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_LIST_VIEW_HEIGHT",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "400",
            "doc": "Default ListView width."
          },
          {
            "signature": "const val DEFAULT_LIST_VIEW_WIDTH: Int = 200",
            "modifier": "val",
            "name": "DEFAULT_LIST_VIEW_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_LIST_VIEW_WIDTH",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "200",
            "doc": "Default ListView width."
          },
          {
            "signature": "const val DEFAULT_MENU_SCENE_OPACITY: Double = 0.75",
            "modifier": "val",
            "name": "DEFAULT_MENU_SCENE_OPACITY",
            "link": "tools.aqua.bgw.core/DEFAULT_MENU_SCENE_OPACITY",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "0.75",
            "doc": "Default menu scene opacity."
          },
          {
            "signature": "const val DEFAULT_PROGRESSBAR_HEIGHT: Int = 20",
            "modifier": "val",
            "name": "DEFAULT_PROGRESSBAR_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_HEIGHT",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "20",
            "doc": "Default ProgressBar height."
          },
          {
            "signature": "const val DEFAULT_PROGRESSBAR_WIDTH: Int = 250",
            "modifier": "val",
            "name": "DEFAULT_PROGRESSBAR_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_PROGRESSBAR_WIDTH",
            "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
            "defaultValue": "250",
            "doc": "Default ProgressBar width."
          },
          {
            "signature": "const val DEFAULT_RADIO_BUTTON_HEIGHT: Double",
            "modifier": "val",
            "name": "DEFAULT_RADIO_BUTTON_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default RadioButton height."
          },
          {
            "signature": "const val DEFAULT_RADIO_BUTTON_WIDTH: Double",
            "modifier": "val",
            "name": "DEFAULT_RADIO_BUTTON_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_RADIO_BUTTON_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default RadioButton width."
          },
          {
            "signature": "const val DEFAULT_SATCHEL_HEIGHT: Double",
            "modifier": "val",
            "name": "DEFAULT_SATCHEL_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_SATCHEL_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default Satchel height."
          },
          {
            "signature": "const val DEFAULT_SATCHEL_WIDTH: Double",
            "modifier": "val",
            "name": "DEFAULT_SATCHEL_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_SATCHEL_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default Satchel width."
          },
          {
            "signature": "const val DEFAULT_SCENE_HEIGHT: Double = 1080.0",
            "modifier": "val",
            "name": "DEFAULT_SCENE_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_SCENE_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "1080.0",
            "doc": "Default scene height in virtual pixels."
          },
          {
            "signature": "const val DEFAULT_SCENE_WIDTH: Double = 1920.0",
            "modifier": "val",
            "name": "DEFAULT_SCENE_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_SCENE_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "1920.0",
            "doc": "Default scene width in virtual pixels."
          },
          {
            "signature": "const val DEFAULT_TABLE_VIEW_HEIGHT: Double = 500.0",
            "modifier": "val",
            "name": "DEFAULT_TABLE_VIEW_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "500.0",
            "doc": "Default TableView height."
          },
          {
            "signature": "const val DEFAULT_TABLE_VIEW_WIDTH: Double = 400.0",
            "modifier": "val",
            "name": "DEFAULT_TABLE_VIEW_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_TABLE_VIEW_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "400.0",
            "doc": "Default TableView width."
          },
          {
            "signature": "const val DEFAULT_TEXT_AREA_HEIGHT: Double = 100.0",
            "modifier": "val",
            "name": "DEFAULT_TEXT_AREA_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_TEXT_AREA_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "100.0",
            "doc": "Default TextArea height."
          },
          {
            "signature": "const val DEFAULT_TEXT_AREA_WIDTH: Double = 200.0",
            "modifier": "val",
            "name": "DEFAULT_TEXT_AREA_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_TEXT_AREA_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "200.0",
            "doc": "Default TextArea width."
          },
          {
            "signature": "const val DEFAULT_TEXT_FIELD_HEIGHT: Double = 30.0",
            "modifier": "val",
            "name": "DEFAULT_TEXT_FIELD_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "30.0",
            "doc": "Default TextField height."
          },
          {
            "signature": "const val DEFAULT_TEXT_FIELD_WIDTH: Double = 140.0",
            "modifier": "val",
            "name": "DEFAULT_TEXT_FIELD_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_TEXT_FIELD_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "140.0",
            "doc": "Default TextField width."
          },
          {
            "signature": "const val DEFAULT_TOGGLE_BUTTON_HEIGHT: Double",
            "modifier": "val",
            "name": "DEFAULT_TOGGLE_BUTTON_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default ToggleButton height."
          },
          {
            "signature": "const val DEFAULT_TOGGLE_BUTTON_WIDTH: Double",
            "modifier": "val",
            "name": "DEFAULT_TOGGLE_BUTTON_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_TOGGLE_BUTTON_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "",
            "doc": "Default ToggleButton width."
          },
          {
            "signature": "const val DEFAULT_TOKEN_HEIGHT: Double = 50.0",
            "modifier": "val",
            "name": "DEFAULT_TOKEN_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_TOKEN_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "50.0",
            "doc": "Default TokenView height."
          },
          {
            "signature": "const val DEFAULT_TOKEN_WIDTH: Double = 50.0",
            "modifier": "val",
            "name": "DEFAULT_TOKEN_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_TOKEN_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "50.0",
            "doc": "Default TokenView width."
          },
          {
            "signature": "const val DEFAULT_WINDOW_BORDER: Double = 0.8",
            "modifier": "val",
            "name": "DEFAULT_WINDOW_BORDER",
            "link": "tools.aqua.bgw.core/DEFAULT_WINDOW_BORDER",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "0.8",
            "doc": "Default minimization factor of window."
          },
          {
            "signature": "const val DEFAULT_WINDOW_HEIGHT: Double = 747.0",
            "modifier": "val",
            "name": "DEFAULT_WINDOW_HEIGHT",
            "link": "tools.aqua.bgw.core/DEFAULT_WINDOW_HEIGHT",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "747.0",
            "doc": "Default window height in non-maximized mode."
          },
          {
            "signature": "const val DEFAULT_WINDOW_TITLE: String",
            "modifier": "val",
            "name": "DEFAULT_WINDOW_TITLE",
            "link": "tools.aqua.bgw.core/DEFAULT_WINDOW_TITLE",
            "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
            "defaultValue": "",
            "doc": "Default window title."
          },
          {
            "signature": "const val DEFAULT_WINDOW_WIDTH: Double = 1280.0",
            "modifier": "val",
            "name": "DEFAULT_WINDOW_WIDTH",
            "link": "tools.aqua.bgw.core/DEFAULT_WINDOW_WIDTH",
            "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
            "defaultValue": "1280.0",
            "doc": "Default window width in non-maximized mode."
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.dialog": {
    "ButtonType": {
      "APPLY": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "APPLY"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.APPLY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-a-p-p-l-y\\index.html",
          "details": {
            "info": {
              "name": "APPLY",
              "signature": "APPLY",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"Apply\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "CANCEL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "CANCEL"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.CANCEL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-c-a-n-c-e-l\\index.html",
          "details": {
            "info": {
              "name": "CANCEL",
              "signature": "CANCEL",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"Cancel\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "CLOSE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "CLOSE"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.CLOSE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-c-l-o-s-e\\index.html",
          "details": {
            "info": {
              "name": "CLOSE",
              "signature": "CLOSE",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"Close\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "FINISH": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "FINISH"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.FINISH",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-f-i-n-i-s-h\\index.html",
          "details": {
            "info": {
              "name": "FINISH",
              "signature": "FINISH",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"Finish\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NEXT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "NEXT"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.NEXT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-n-e-x-t\\index.html",
          "details": {
            "info": {
              "name": "NEXT",
              "signature": "NEXT",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"Next\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NO": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "NO"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.NO",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-n-o\\index.html",
          "details": {
            "info": {
              "name": "NO",
              "signature": "NO",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"No\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "OK": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "OK"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.OK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-o-k\\index.html",
          "details": {
            "info": {
              "name": "OK",
              "signature": "OK",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"OK\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "PREVIOUS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "PREVIOUS"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.PREVIOUS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-p-r-e-v-i-o-u-s\\index.html",
          "details": {
            "info": {
              "name": "PREVIOUS",
              "signature": "PREVIOUS",
              "doc": "AButtonType that displays \"Previous\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "YES": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "ButtonType",
            "YES"
          ],
          "package": "tools.aqua.bgw.dialog.ButtonType.YES",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\-y-e-s\\index.html",
          "details": {
            "info": {
              "name": "YES",
              "signature": "YES",
              "doc": "A [ButtonType](tools.aqua.bgw.dialog/ButtonType) that displays \"Yes\".",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ButtonType",
          "entries"
        ],
        "package": "tools.aqua.bgw.dialog.ButtonType.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<ButtonType>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ButtonType"
        ],
        "package": "tools.aqua.bgw.dialog.ButtonType",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\index.html",
        "details": {
          "info": {
            "name": "ButtonType",
            "signature": "enum ButtonType : Enum<ButtonType>",
            "doc": "Enum for all available button types.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<ButtonType>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.dialog/ButtonType/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[ButtonType](tools.aqua.bgw.dialog/ButtonType)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): ButtonType",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.dialog/ButtonType/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.dialog/ButtonType/valueOf",
              "returnType": "[ButtonType](tools.aqua.bgw.dialog/ButtonType)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<ButtonType>",
              "name": "values",
              "link": "tools.aqua.bgw.dialog/ButtonType/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[ButtonType](tools.aqua.bgw.dialog/ButtonType)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ButtonType",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.dialog.ButtonType.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): ButtonType",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ButtonType",
          "values"
        ],
        "package": "tools.aqua.bgw.dialog.ButtonType.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-button-type\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<ButtonType>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "Dialog": {
      "Dialog": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "Dialog"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.Dialog",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\-dialog.html",
        "details": [
          {
            "info": {
              "name": "Dialog",
              "signature": "constructor(dialogType: DialogType, title: String, header: String, message: String, vararg buttons: ButtonType)",
              "doc": "Creates a Dialog.\n\nFor exception dialogs refer to exception constructor."
            },
            "parameters": [
              {
                "name": "dialogType",
                "doc": "The [DialogType](tools.aqua.bgw.dialog/DialogType) of the alert. Affects the displayed icon."
              },
              {
                "name": "title",
                "doc": "Title to be shown."
              },
              {
                "name": "header",
                "doc": "Headline to be shown in the dialogs content."
              },
              {
                "name": "message",
                "doc": "Message to be shown in the dialogs content."
              },
              {
                "name": "buttons",
                "doc": "Buttons to be shown. Standard set of buttons according to dialogType will be used if you don't pass any ButtonTypes."
              }
            ]
          },
          {
            "info": {
              "name": "Dialog",
              "signature": "constructor(title: String, header: String, message: String, exception: Throwable)",
              "doc": "Creates an exception Dialog.\n\nFor information dialogs refer to information constructor."
            },
            "parameters": [
              {
                "name": "title",
                "doc": "Title to be shown."
              },
              {
                "name": "header",
                "doc": "Headline to be shown in the dialogs content."
              },
              {
                "name": "message",
                "doc": "Message to be shown."
              },
              {
                "name": "exception",
                "doc": "[Throwable](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-throwable/index.html) to be shown in expandable content."
              }
            ]
          }
        ]
      },
      "buttons": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "buttons"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.buttons",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\buttons.html",
        "details": [
          {
            "info": {
              "name": "buttons",
              "signature": "val buttons: List<ButtonType>",
              "doc": ""
            }
          }
        ]
      },
      "dialogType": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "dialogType"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.dialogType",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\dialog-type.html",
        "details": [
          {
            "info": {
              "name": "dialogType",
              "signature": "val dialogType: DialogType",
              "doc": ""
            }
          }
        ]
      },
      "exception": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "exception"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.exception",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\exception.html",
        "details": [
          {
            "info": {
              "name": "exception",
              "signature": "val exception: Throwable",
              "doc": ""
            }
          }
        ]
      },
      "header": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "header"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.header",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\header.html",
        "details": [
          {
            "info": {
              "name": "header",
              "signature": "val header: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\index.html",
        "details": {
          "info": {
            "name": "Dialog",
            "signature": "data class Dialog",
            "doc": "Shows a dialog containing the given [message](tools.aqua.bgw.dialog/Dialog/message) and [buttons](tools.aqua.bgw.dialog/Dialog/buttons).",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val buttons: List<ButtonType>",
              "modifier": "val",
              "name": "buttons",
              "link": "tools.aqua.bgw.dialog/Dialog/buttons",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ButtonType](tools.aqua.bgw.dialog/ButtonType)>",
              "defaultValue": "",
              "doc": "Buttons to be shown. Standard set of buttons according to [dialogType](tools.aqua.bgw.dialog/Dialog/dialogType) will be used if you don't pass any ButtonTypes."
            },
            {
              "signature": "val dialogType: DialogType",
              "modifier": "val",
              "name": "dialogType",
              "link": "tools.aqua.bgw.dialog/Dialog/dialogType",
              "type": "[DialogType](tools.aqua.bgw.dialog/DialogType)",
              "defaultValue": "",
              "doc": "The [DialogType](tools.aqua.bgw.dialog/DialogType) of the alert. Affects the displayed icon."
            },
            {
              "signature": "val exception: Throwable",
              "modifier": "val",
              "name": "exception",
              "link": "tools.aqua.bgw.dialog/Dialog/exception",
              "type": "[Throwable](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-throwable/index.html)",
              "defaultValue": "",
              "doc": "[Throwable](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-throwable/index.html) to be shown in expandable content."
            },
            {
              "signature": "val header: String",
              "modifier": "val",
              "name": "header",
              "link": "tools.aqua.bgw.dialog/Dialog/header",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Headline to be shown in the dialogs content."
            },
            {
              "signature": "val message: String",
              "modifier": "val",
              "name": "message",
              "link": "tools.aqua.bgw.dialog/Dialog/message",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Message to be shown."
            },
            {
              "signature": "val title: String",
              "modifier": "val",
              "name": "title",
              "link": "tools.aqua.bgw.dialog/Dialog/title",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Title to be shown."
            }
          ]
        }
      },
      "message": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "message"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.message",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\message.html",
        "details": [
          {
            "info": {
              "name": "message",
              "signature": "val message: String",
              "doc": ""
            }
          }
        ]
      },
      "title": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "Dialog",
          "title"
        ],
        "package": "tools.aqua.bgw.dialog.Dialog.title",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog\\title.html",
        "details": [
          {
            "info": {
              "name": "title",
              "signature": "val title: String",
              "doc": ""
            }
          }
        ]
      }
    },
    "DialogType": {
      "CONFIRMATION": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "DialogType",
            "CONFIRMATION"
          ],
          "package": "tools.aqua.bgw.dialog.DialogType.CONFIRMATION",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\-c-o-n-f-i-r-m-a-t-i-o-n\\index.html",
          "details": {
            "info": {
              "name": "CONFIRMATION",
              "signature": "CONFIRMATION",
              "doc": "The [CONFIRMATION](tools.aqua.bgw.dialog/DialogType/CONFIRMATION) alert type configures the Alert dialog to appear in a way that suggests the content of the dialog is seeking confirmation from the user. This includes a 'confirmation' image, an appropriate title and header, and both ButtonType.YES and ButtonType.NO buttons for the user to click on to dismiss the dialog.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "ERROR": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "DialogType",
            "ERROR"
          ],
          "package": "tools.aqua.bgw.dialog.DialogType.ERROR",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\-e-r-r-o-r\\index.html",
          "details": {
            "info": {
              "name": "ERROR",
              "signature": "ERROR",
              "doc": "The [ERROR](tools.aqua.bgw.dialog/DialogType/ERROR) alert type configures the Alert dialog to appear in a way that suggests that something has gone wrong. This includes an 'error' image, an appropriate title and header, and just a ButtonType.OK button for the user to click on to dismiss the dialog.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "EXCEPTION": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "DialogType",
            "EXCEPTION"
          ],
          "package": "tools.aqua.bgw.dialog.DialogType.EXCEPTION",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\-e-x-c-e-p-t-i-o-n\\index.html",
          "details": {
            "info": {
              "name": "EXCEPTION",
              "signature": "EXCEPTION",
              "doc": "The [EXCEPTION](tools.aqua.bgw.dialog/DialogType/EXCEPTION) alert type configures the Alert dialog to show an exception stack trace. This includes an 'exception' image, an appropriate title and header, and just a ButtonType.OK button for the user to click on to dismiss the dialog.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "INFORMATION": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "DialogType",
            "INFORMATION"
          ],
          "package": "tools.aqua.bgw.dialog.DialogType.INFORMATION",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\-i-n-f-o-r-m-a-t-i-o-n\\index.html",
          "details": {
            "info": {
              "name": "INFORMATION",
              "signature": "INFORMATION",
              "doc": "The [INFORMATION](tools.aqua.bgw.dialog/DialogType/INFORMATION) alert type configures the Alert dialog to appear in a way that suggests the content of the dialog is informing the user of a piece of information. This includes an 'information' image, an appropriate title and header, and just a ButtonType.OK button for the user to click on to dismiss the dialog.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NONE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "DialogType",
            "NONE"
          ],
          "package": "tools.aqua.bgw.dialog.DialogType.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\-n-o-n-e\\index.html",
          "details": {
            "info": {
              "name": "NONE",
              "signature": "NONE",
              "doc": "The [NONE](tools.aqua.bgw.dialog/DialogType/NONE) alert type has the effect of not setting any default properties in the Alert besides an ButtonType.OK button for the user to click on to dismiss the dialog.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "WARNING": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "DialogType",
            "WARNING"
          ],
          "package": "tools.aqua.bgw.dialog.DialogType.WARNING",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\-w-a-r-n-i-n-g\\index.html",
          "details": {
            "info": {
              "name": "WARNING",
              "signature": "WARNING",
              "doc": "The [WARNING](tools.aqua.bgw.dialog/DialogType/WARNING) alert type configures the Alert dialog to appear in a way that suggests the content of the dialog is warning the user about some fact or action. This includes a 'warning' image, an appropriate title and header, and just a ButtonType.OK button for the user to click on to dismiss the dialog.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "DialogType",
          "entries"
        ],
        "package": "tools.aqua.bgw.dialog.DialogType.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<DialogType>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "DialogType"
        ],
        "package": "tools.aqua.bgw.dialog.DialogType",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\index.html",
        "details": {
          "info": {
            "name": "DialogType",
            "signature": "enum DialogType : Enum<DialogType>",
            "doc": "Enum for all available alert types.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.1"
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<DialogType>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.dialog/DialogType/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[DialogType](tools.aqua.bgw.dialog/DialogType)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): DialogType",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.dialog/DialogType/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.dialog/DialogType/valueOf",
              "returnType": "[DialogType](tools.aqua.bgw.dialog/DialogType)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<DialogType>",
              "name": "values",
              "link": "tools.aqua.bgw.dialog/DialogType/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[DialogType](tools.aqua.bgw.dialog/DialogType)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "DialogType",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.dialog.DialogType.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): DialogType",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "DialogType",
          "values"
        ],
        "package": "tools.aqua.bgw.dialog.DialogType.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-dialog-type\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<DialogType>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "ExtensionFilter": {
      "ExtensionFilter": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ExtensionFilter",
          "ExtensionFilter"
        ],
        "package": "tools.aqua.bgw.dialog.ExtensionFilter.ExtensionFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-extension-filter\\-extension-filter.html",
        "details": [
          {
            "info": {
              "name": "ExtensionFilter",
              "signature": "constructor(description: String, vararg extensions: String)",
              "doc": "Creates an [ExtensionFilter](tools.aqua.bgw.dialog/ExtensionFilter).\n\nMaps a file type description to its extensions.\n\nTo generate e.g. \"(*.png, *.jpg)\" set extensions = (\"png\", \"jpg\")."
            },
            "parameters": [
              {
                "name": "description",
                "doc": "File type description (not displayed in dialog)."
              },
              {
                "name": "extensions",
                "doc": "File extensions."
              }
            ]
          }
        ]
      },
      "description": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ExtensionFilter",
          "description"
        ],
        "package": "tools.aqua.bgw.dialog.ExtensionFilter.description",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-extension-filter\\description.html",
        "details": [
          {
            "info": {
              "name": "description",
              "signature": "val description: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "ExtensionFilter"
        ],
        "package": "tools.aqua.bgw.dialog.ExtensionFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-extension-filter\\index.html",
        "details": {
          "info": {
            "name": "ExtensionFilter",
            "signature": "data class ExtensionFilter",
            "doc": "Extension filters for FileDialogs.\n\nMaps a file type description to its extensions.\n\nTo generate e.g. \"(*.png, *.jpg)\" set extensions = (\"png\", \"jpg\").",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val description: String",
              "modifier": "val",
              "name": "description",
              "link": "tools.aqua.bgw.dialog/ExtensionFilter/description",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "File type description (not displayed in dialog)."
            }
          ]
        }
      }
    },
    "FileDialog": {
      "FileDialog": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "FileDialog"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.FileDialog",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\-file-dialog.html",
        "details": [
          {
            "info": {
              "name": "FileDialog",
              "signature": "constructor(mode: FileDialogMode, title: String = \"\", initialFileName: String = \"\", initialDirectoryPath: String? = null, extensionFilters: List<ExtensionFilter> = emptyList())",
              "doc": "Creates a [FileDialog](tools.aqua.bgw.dialog/FileDialog) with given [FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode)."
            }
          }
        ]
      },
      "extensionFilters": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "extensionFilters"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.extensionFilters",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\extension-filters.html",
        "details": [
          {
            "info": {
              "name": "extensionFilters",
              "signature": "val extensionFilters: List<ExtensionFilter>",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\index.html",
        "details": {
          "info": {
            "name": "FileDialog",
            "signature": "class FileDialog(val mode: FileDialogMode, val title: String = \"\", val initialFileName: String = \"\", val initialDirectoryPath: String? = null, val extensionFilters: List<ExtensionFilter> = emptyList())",
            "doc": "A [FileDialog](tools.aqua.bgw.dialog/FileDialog) such as a file chooser or save dialog, depending on [FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode).",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "FileDialogMode",
              "link": "tools.aqua.bgw.dialog/FileDialogMode"
            },
            {
              "name": "ExtensionFilter",
              "link": "tools.aqua.bgw.dialog/ExtensionFilter"
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val extensionFilters: List<ExtensionFilter>",
              "modifier": "val",
              "name": "extensionFilters",
              "link": "tools.aqua.bgw.dialog/FileDialog/extensionFilters",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ExtensionFilter](tools.aqua.bgw.dialog/ExtensionFilter)>",
              "defaultValue": "",
              "doc": "Extensions filters for this file chooser."
            },
            {
              "signature": "val initialDirectoryPath: String? = null",
              "modifier": "val",
              "name": "initialDirectoryPath",
              "link": "tools.aqua.bgw.dialog/FileDialog/initialDirectoryPath",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "null",
              "doc": ""
            },
            {
              "signature": "val initialFileName: String",
              "modifier": "val",
              "name": "initialFileName",
              "link": "tools.aqua.bgw.dialog/FileDialog/initialFileName",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "The initial file name in the file name text box."
            },
            {
              "signature": "val mode: FileDialogMode",
              "modifier": "val",
              "name": "mode",
              "link": "tools.aqua.bgw.dialog/FileDialog/mode",
              "type": "[FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode)",
              "defaultValue": "",
              "doc": "The Dialog's mode."
            },
            {
              "signature": "var onPathsSelected: (List<String>) -> Unit?",
              "modifier": "var",
              "name": "onPathsSelected",
              "link": "tools.aqua.bgw.dialog/FileDialog/onPathsSelected",
              "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever this [FileDialog](tools.aqua.bgw.dialog/FileDialog) is used to select file(s). It always returns a list of selected file paths."
            },
            {
              "signature": "var onSelectionCancelled: () -> Unit?",
              "modifier": "var",
              "name": "onSelectionCancelled",
              "link": "tools.aqua.bgw.dialog/FileDialog/onSelectionCancelled",
              "type": "() -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)?",
              "defaultValue": "",
              "doc": "Gets invoked whenever this [FileDialog](tools.aqua.bgw.dialog/FileDialog) is closed without selecting a path or the selection was cancelled."
            },
            {
              "signature": "val title: String",
              "modifier": "val",
              "name": "title",
              "link": "tools.aqua.bgw.dialog/FileDialog/title",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "The Dialog's title text."
            }
          ]
        }
      },
      "initialDirectoryPath": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "initialDirectoryPath"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.initialDirectoryPath",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\initial-directory-path.html",
        "details": [
          {
            "info": {
              "name": "initialDirectoryPath",
              "signature": "val initialDirectoryPath: String? = null",
              "doc": ""
            }
          }
        ]
      },
      "initialFileName": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "initialFileName"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.initialFileName",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\initial-file-name.html",
        "details": [
          {
            "info": {
              "name": "initialFileName",
              "signature": "val initialFileName: String",
              "doc": ""
            }
          }
        ]
      },
      "mode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "mode"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.mode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\mode.html",
        "details": [
          {
            "info": {
              "name": "mode",
              "signature": "val mode: FileDialogMode",
              "doc": ""
            }
          }
        ]
      },
      "onPathsSelected": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "onPathsSelected"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.onPathsSelected",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\on-paths-selected.html",
        "details": [
          {
            "info": {
              "name": "onPathsSelected",
              "signature": "var onPathsSelected: (List<String>) -> Unit?",
              "doc": "Gets invoked whenever this [FileDialog](tools.aqua.bgw.dialog/FileDialog) is used to select file(s). It always returns a list of selected file paths.\n\nIf [mode](tools.aqua.bgw.dialog/FileDialog/mode) is [FileDialogMode.OPEN_FILE](tools.aqua.bgw.dialog/FileDialogMode/OPEN_FILE), [FileDialogMode.SAVE_FILE](tools.aqua.bgw.dialog/FileDialogMode/SAVE_FILE) or [FileDialogMode.CHOOSE_DIRECTORY](tools.aqua.bgw.dialog/FileDialogMode/CHOOSE_DIRECTORY) it will always contain exactly one element.\n\nIf [mode](tools.aqua.bgw.dialog/FileDialog/mode) is [FileDialogMode.OPEN_MULTIPLE_FILES](tools.aqua.bgw.dialog/FileDialogMode/OPEN_MULTIPLE_FILES) it will contain multiple elements."
            },
            "seeAlso": [
              {
                "name": "FileDialogMode",
                "link": "tools.aqua.bgw.dialog/FileDialogMode"
              }
            ],
            "since": "1.0"
          }
        ]
      },
      "onSelectionCancelled": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "onSelectionCancelled"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.onSelectionCancelled",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\on-selection-cancelled.html",
        "details": [
          {
            "info": {
              "name": "onSelectionCancelled",
              "signature": "var onSelectionCancelled: () -> Unit?",
              "doc": "Gets invoked whenever this [FileDialog](tools.aqua.bgw.dialog/FileDialog) is closed without selecting a path or the selection was cancelled."
            },
            "since": "1.0"
          }
        ]
      },
      "title": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialog",
          "title"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialog.title",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog\\title.html",
        "details": [
          {
            "info": {
              "name": "title",
              "signature": "val title: String",
              "doc": ""
            }
          }
        ]
      }
    },
    "FileDialogMode": {
      "CHOOSE_DIRECTORY": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "FileDialogMode",
            "CHOOSE_DIRECTORY"
          ],
          "package": "tools.aqua.bgw.dialog.FileDialogMode.CHOOSE_DIRECTORY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\-c-h-o-o-s-e_-d-i-r-e-c-t-o-r-y\\index.html",
          "details": {
            "info": {
              "name": "CHOOSE_DIRECTORY",
              "signature": "CHOOSE_DIRECTORY",
              "doc": "Mode so select a directory.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "OPEN_FILE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "FileDialogMode",
            "OPEN_FILE"
          ],
          "package": "tools.aqua.bgw.dialog.FileDialogMode.OPEN_FILE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\-o-p-e-n_-f-i-l-e\\index.html",
          "details": {
            "info": {
              "name": "OPEN_FILE",
              "signature": "OPEN_FILE",
              "doc": "Mode to open one file.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "OPEN_MULTIPLE_FILES": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "FileDialogMode",
            "OPEN_MULTIPLE_FILES"
          ],
          "package": "tools.aqua.bgw.dialog.FileDialogMode.OPEN_MULTIPLE_FILES",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\-o-p-e-n_-m-u-l-t-i-p-l-e_-f-i-l-e-s\\index.html",
          "details": {
            "info": {
              "name": "OPEN_MULTIPLE_FILES",
              "signature": "OPEN_MULTIPLE_FILES",
              "doc": "Mode to open multiple files.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "SAVE_FILE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.dialog",
            "FileDialogMode",
            "SAVE_FILE"
          ],
          "package": "tools.aqua.bgw.dialog.FileDialogMode.SAVE_FILE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\-s-a-v-e_-f-i-l-e\\index.html",
          "details": {
            "info": {
              "name": "SAVE_FILE",
              "signature": "SAVE_FILE",
              "doc": "Mode to save a file.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialogMode",
          "entries"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialogMode.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<FileDialogMode>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialogMode"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialogMode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\index.html",
        "details": {
          "info": {
            "name": "FileDialogMode",
            "signature": "enum FileDialogMode : Enum<FileDialogMode>",
            "doc": "Enum for possible [FileDialog](tools.aqua.bgw.dialog/FileDialog) modes.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<FileDialogMode>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.dialog/FileDialogMode/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): FileDialogMode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.dialog/FileDialogMode/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.dialog/FileDialogMode/valueOf",
              "returnType": "[FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<FileDialogMode>",
              "name": "values",
              "link": "tools.aqua.bgw.dialog/FileDialogMode/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialogMode",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialogMode.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): FileDialogMode",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.dialog",
          "FileDialogMode",
          "values"
        ],
        "package": "tools.aqua.bgw.dialog.FileDialogMode.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\-file-dialog-mode\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<FileDialogMode>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.dialog"
      ],
      "package": "tools.aqua.bgw.dialog",
      "path": "example\\htmlPartial\\tools.aqua.bgw.dialog\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "enum ButtonType : Enum<ButtonType>",
          "doc": "",
          "tags": {
            "modifiers": [],
            "type": "enum"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "ButtonType",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for all available button types.",
            "link": "tools.aqua.bgw.dialog/ButtonType"
          },
          {
            "name": "Dialog",
            "doc": "Shows a dialog containing the given message and buttons.",
            "link": "tools.aqua.bgw.dialog/Dialog"
          },
          {
            "name": "DialogType",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for all available alert types.",
            "link": "tools.aqua.bgw.dialog/DialogType"
          },
          {
            "name": "ExtensionFilter",
            "doc": "Extension filters for FileDialogs.",
            "link": "tools.aqua.bgw.dialog/ExtensionFilter"
          },
          {
            "name": "FileDialog",
            "doc": "A [FileDialog](tools.aqua.bgw.dialog/FileDialog) such as a file chooser or save dialog, depending on [FileDialogMode](tools.aqua.bgw.dialog/FileDialogMode).",
            "link": "tools.aqua.bgw.dialog/FileDialog"
          },
          {
            "name": "FileDialogMode",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for possible FileDialog modes.",
            "link": "tools.aqua.bgw.dialog/FileDialogMode"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.event": {
    "AnimationFinishedEvent": {
      "AnimationFinishedEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "AnimationFinishedEvent",
          "AnimationFinishedEvent"
        ],
        "package": "tools.aqua.bgw.event.AnimationFinishedEvent.AnimationFinishedEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-animation-finished-event\\-animation-finished-event.html",
        "details": [
          {
            "info": {
              "name": "AnimationFinishedEvent",
              "signature": "constructor()",
              "doc": "Creates an [AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "AnimationFinishedEvent"
        ],
        "package": "tools.aqua.bgw.event.AnimationFinishedEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-animation-finished-event\\index.html",
        "details": {
          "info": {
            "name": "AnimationFinishedEvent",
            "signature": "class AnimationFinishedEvent : Event",
            "doc": "Gets raised when an [Animation](tools.aqua.bgw.animation/Animation) finished.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Creates an [AnimationFinishedEvent](tools.aqua.bgw.event/AnimationFinishedEvent).",
              "isSecondaryConstructor": true
            }
          ]
        }
      }
    },
    "DragEvent": {
      "DragEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DragEvent",
          "DragEvent"
        ],
        "package": "tools.aqua.bgw.event.DragEvent.DragEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drag-event\\-drag-event.html",
        "details": [
          {
            "info": {
              "name": "DragEvent",
              "signature": "constructor(draggedComponent: ComponentView)",
              "doc": "Creates a [DragEvent](tools.aqua.bgw.event/DragEvent) containing draggedComponent."
            }
          }
        ]
      },
      "draggedComponent": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DragEvent",
          "draggedComponent"
        ],
        "package": "tools.aqua.bgw.event.DragEvent.draggedComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drag-event\\dragged-component.html",
        "details": [
          {
            "info": {
              "name": "draggedComponent",
              "signature": "val draggedComponent: ComponentView",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DragEvent"
        ],
        "package": "tools.aqua.bgw.event.DragEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drag-event\\index.html",
        "details": {
          "info": {
            "name": "DragEvent",
            "signature": "class DragEvent(val draggedComponent: ComponentView) : Event",
            "doc": "Event that gets raised for drag gestures.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "DropEvent",
              "link": "tools.aqua.bgw.event/DropEvent"
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val draggedComponent: ComponentView",
              "modifier": "val",
              "name": "draggedComponent",
              "link": "tools.aqua.bgw.event/DragEvent/draggedComponent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "defaultValue": "",
              "doc": "Currently dragged [ComponentView](tools.aqua.bgw.components/ComponentView)."
            }
          ]
        }
      }
    },
    "DropEvent": {
      "DropEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DropEvent",
          "DropEvent"
        ],
        "package": "tools.aqua.bgw.event.DropEvent.DropEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drop-event\\-drop-event.html",
        "details": [
          {
            "info": {
              "name": "DropEvent",
              "signature": "constructor(draggedComponent: ComponentView, dragTargets: List<ComponentView> = emptyList())",
              "doc": "Creates a [DropEvent](tools.aqua.bgw.event/DropEvent) containing draggedComponent and dragTargets."
            }
          }
        ]
      },
      "dragTargets": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DropEvent",
          "dragTargets"
        ],
        "package": "tools.aqua.bgw.event.DropEvent.dragTargets",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drop-event\\drag-targets.html",
        "details": [
          {
            "info": {
              "name": "dragTargets",
              "signature": "val dragTargets: List<ComponentView>",
              "doc": ""
            }
          }
        ]
      },
      "draggedComponent": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DropEvent",
          "draggedComponent"
        ],
        "package": "tools.aqua.bgw.event.DropEvent.draggedComponent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drop-event\\dragged-component.html",
        "details": [
          {
            "info": {
              "name": "draggedComponent",
              "signature": "val draggedComponent: ComponentView",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "DropEvent"
        ],
        "package": "tools.aqua.bgw.event.DropEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-drop-event\\index.html",
        "details": {
          "info": {
            "name": "DropEvent",
            "signature": "class DropEvent(val draggedComponent: ComponentView, val dragTargets: List<ComponentView> = emptyList()) : Event",
            "doc": "Event that gets raised for drop gestures.\n\nReceiver is the dragged component.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "DragEvent",
              "link": "tools.aqua.bgw.event/DragEvent"
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val draggedComponent: ComponentView",
              "modifier": "val",
              "name": "draggedComponent",
              "link": "tools.aqua.bgw.event/DropEvent/draggedComponent",
              "type": "[ComponentView](tools.aqua.bgw.components/ComponentView)",
              "defaultValue": "",
              "doc": "Currently dragged [ComponentView](tools.aqua.bgw.components/ComponentView)."
            },
            {
              "signature": "val dragTargets: List<ComponentView>",
              "modifier": "val",
              "name": "dragTargets",
              "link": "tools.aqua.bgw.event/DropEvent/dragTargets",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[ComponentView](tools.aqua.bgw.components/ComponentView)>",
              "defaultValue": "",
              "doc": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) of all ComponentViews that accepted the drag gesture in case of a dragGestureEnded [Event](tools.aqua.bgw.event/Event). Contains all accepting ComponentViews in the order they accepted."
            }
          ]
        }
      }
    },
    "Event": {
      "Event": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "Event",
          "Event"
        ],
        "package": "tools.aqua.bgw.event.Event.Event",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-event\\-event.html",
        "details": [
          {
            "info": {
              "name": "Event",
              "signature": "constructor()",
              "doc": "Empty constructor."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "Event"
        ],
        "package": "tools.aqua.bgw.event.Event",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-event\\index.html",
        "details": {
          "info": {
            "name": "Event",
            "signature": "abstract class Event",
            "doc": "[Event](tools.aqua.bgw.event/Event) baseclass.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "AnimationFinishedEvent",
              "link": "tools.aqua.bgw.event/AnimationFinishedEvent"
            },
            {
              "name": "DragEvent",
              "link": "tools.aqua.bgw.event/DragEvent"
            },
            {
              "name": "DropEvent",
              "link": "tools.aqua.bgw.event/DropEvent"
            },
            {
              "name": "InputEvent",
              "link": "tools.aqua.bgw.event/InputEvent"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Empty constructor.",
              "isSecondaryConstructor": true
            }
          ]
        }
      }
    },
    "InputEvent": {
      "InputEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "InputEvent",
          "InputEvent"
        ],
        "package": "tools.aqua.bgw.event.InputEvent.InputEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-input-event\\-input-event.html",
        "details": [
          {
            "info": {
              "name": "InputEvent",
              "signature": "constructor()",
              "doc": "Empty constructor."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "InputEvent"
        ],
        "package": "tools.aqua.bgw.event.InputEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-input-event\\index.html",
        "details": {
          "info": {
            "name": "InputEvent",
            "signature": "abstract class InputEvent : Event",
            "doc": "InputEvent baseclass.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "KeyEvent",
              "link": "tools.aqua.bgw.event/KeyEvent"
            },
            {
              "name": "MouseEvent",
              "link": "tools.aqua.bgw.event/MouseEvent"
            },
            {
              "name": "WheelEvent",
              "link": "tools.aqua.bgw.event/WheelEvent"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Empty constructor.",
              "isSecondaryConstructor": true
            }
          ]
        }
      }
    },
    "KeyCode": {
      "A": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "A"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.A",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a\\index.html",
          "details": {
            "info": {
              "name": "A",
              "signature": "A",
              "doc": "Constant for the A key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ACUTE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ACUTE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ACUTE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-c-u-t-e\\index.html",
          "details": {
            "info": {
              "name": "ACUTE",
              "signature": "ACUTE",
              "doc": "Constant for the ´ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ADD": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ADD"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ADD",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-d-d\\index.html",
          "details": {
            "info": {
              "name": "ADD",
              "signature": "ADD",
              "doc": "Constant for the Numpad + key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ALT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ALT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ALT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-l-t\\index.html",
          "details": {
            "info": {
              "name": "ALT",
              "signature": "ALT",
              "doc": "Constant for the Alt key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ALT_GRAPH": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ALT_GRAPH"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ALT_GRAPH",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-l-t_-g-r-a-p-h\\index.html",
          "details": {
            "info": {
              "name": "ALT_GRAPH",
              "signature": "ALT_GRAPH",
              "doc": "Constant for the AltGr key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "AMPERSAND": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "AMPERSAND"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.AMPERSAND",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-m-p-e-r-s-a-n-d\\index.html",
          "details": {
            "info": {
              "name": "AMPERSAND",
              "signature": "AMPERSAND",
              "doc": "Constant for the & key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ASTERISK": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ASTERISK"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ASTERISK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-s-t-e-r-i-s-k\\index.html",
          "details": {
            "info": {
              "name": "ASTERISK",
              "signature": "ASTERISK",
              "doc": "Constant for the * key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "AT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "AT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.AT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-a-t\\index.html",
          "details": {
            "info": {
              "name": "AT",
              "signature": "AT",
              "doc": "Constant for the @ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "B": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "B"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.B",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-b\\index.html",
          "details": {
            "info": {
              "name": "B",
              "signature": "B",
              "doc": "Constant for the B key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "BACK_SLASH": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "BACK_SLASH"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.BACK_SLASH",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-b-a-c-k_-s-l-a-s-h\\index.html",
          "details": {
            "info": {
              "name": "BACK_SLASH",
              "signature": "BACK_SLASH",
              "doc": "Constant for the \\ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "BACK_SPACE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "BACK_SPACE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.BACK_SPACE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-b-a-c-k_-s-p-a-c-e\\index.html",
          "details": {
            "info": {
              "name": "BACK_SPACE",
              "signature": "BACK_SPACE",
              "doc": "Constant for the Backspace key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "C": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "C"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.C",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c\\index.html",
          "details": {
            "info": {
              "name": "C",
              "signature": "C",
              "doc": "Constant for the C key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CAPS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CAPS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CAPS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-a-p-s\\index.html",
          "details": {
            "info": {
              "name": "CAPS",
              "signature": "CAPS",
              "doc": "Constant for the Caps Lock key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CIRCUMFLEX": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CIRCUMFLEX"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CIRCUMFLEX",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-i-r-c-u-m-f-l-e-x\\index.html",
          "details": {
            "info": {
              "name": "CIRCUMFLEX",
              "signature": "CIRCUMFLEX",
              "doc": "Constant for the ^ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CLOSE_BRACKET": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CLOSE_BRACKET"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CLOSE_BRACKET",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-l-o-s-e_-b-r-a-c-k-e-t\\index.html",
          "details": {
            "info": {
              "name": "CLOSE_BRACKET",
              "signature": "CLOSE_BRACKET",
              "doc": "Constant for the ] key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "COLON": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "COLON"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.COLON",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-o-l-o-n\\index.html",
          "details": {
            "info": {
              "name": "COLON",
              "signature": "COLON",
              "doc": "Constant for the : key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "COMMA": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "COMMA"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.COMMA",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-o-m-m-a\\index.html",
          "details": {
            "info": {
              "name": "COMMA",
              "signature": "COMMA",
              "doc": "Constant for the , key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CONTEXT_MENU": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CONTEXT_MENU"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CONTEXT_MENU",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-o-n-t-e-x-t_-m-e-n-u\\index.html",
          "details": {
            "info": {
              "name": "CONTEXT_MENU",
              "signature": "CONTEXT_MENU",
              "doc": "Constant for the Microsoft Windows Context Menu key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CONTROL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CONTROL"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CONTROL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-o-n-t-r-o-l\\index.html",
          "details": {
            "info": {
              "name": "CONTROL",
              "signature": "CONTROL",
              "doc": "Constant for the Ctrl key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CURLY_BRACE_LEFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CURLY_BRACE_LEFT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CURLY_BRACE_LEFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-u-r-l-y_-b-r-a-c-e_-l-e-f-t\\index.html",
          "details": {
            "info": {
              "name": "CURLY_BRACE_LEFT",
              "signature": "CURLY_BRACE_LEFT",
              "doc": "Constant for the { key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "CURLY_BRACE_RIGHT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "CURLY_BRACE_RIGHT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.CURLY_BRACE_RIGHT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-c-u-r-l-y_-b-r-a-c-e_-r-i-g-h-t\\index.html",
          "details": {
            "info": {
              "name": "CURLY_BRACE_RIGHT",
              "signature": "CURLY_BRACE_RIGHT",
              "doc": "Constant for the } key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "D": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "D"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.D",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d\\index.html",
          "details": {
            "info": {
              "name": "D",
              "signature": "D",
              "doc": "Constant for the D key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DECIMAL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DECIMAL"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DECIMAL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-e-c-i-m-a-l\\index.html",
          "details": {
            "info": {
              "name": "DECIMAL",
              "signature": "DECIMAL",
              "doc": "Constant for the Numpad , key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DELETE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DELETE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DELETE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-e-l-e-t-e\\index.html",
          "details": {
            "info": {
              "name": "DELETE",
              "signature": "DELETE",
              "doc": "Constant for the Delete key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT0": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT0"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT0",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t0\\index.html",
          "details": {
            "info": {
              "name": "DIGIT0",
              "signature": "DIGIT0",
              "doc": "Constant for the 0 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT1": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT1"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT1",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t1\\index.html",
          "details": {
            "info": {
              "name": "DIGIT1",
              "signature": "DIGIT1",
              "doc": "Constant for the 1 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT2": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT2"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT2",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t2\\index.html",
          "details": {
            "info": {
              "name": "DIGIT2",
              "signature": "DIGIT2",
              "doc": "Constant for the 2 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT3": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT3"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT3",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t3\\index.html",
          "details": {
            "info": {
              "name": "DIGIT3",
              "signature": "DIGIT3",
              "doc": "Constant for the 3 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT4": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT4"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT4",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t4\\index.html",
          "details": {
            "info": {
              "name": "DIGIT4",
              "signature": "DIGIT4",
              "doc": "Constant for the 4 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT5": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT5"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT5",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t5\\index.html",
          "details": {
            "info": {
              "name": "DIGIT5",
              "signature": "DIGIT5",
              "doc": "Constant for the 5 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT6": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT6"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT6",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t6\\index.html",
          "details": {
            "info": {
              "name": "DIGIT6",
              "signature": "DIGIT6",
              "doc": "Constant for the 6 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT7": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT7"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT7",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t7\\index.html",
          "details": {
            "info": {
              "name": "DIGIT7",
              "signature": "DIGIT7",
              "doc": "Constant for the 7 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT8": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT8"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT8",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t8\\index.html",
          "details": {
            "info": {
              "name": "DIGIT8",
              "signature": "DIGIT8",
              "doc": "Constant for the 8 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIGIT9": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIGIT9"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIGIT9",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-g-i-t9\\index.html",
          "details": {
            "info": {
              "name": "DIGIT9",
              "signature": "DIGIT9",
              "doc": "Constant for the 9 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DIVIDE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DIVIDE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DIVIDE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-i-v-i-d-e\\index.html",
          "details": {
            "info": {
              "name": "DIVIDE",
              "signature": "DIVIDE",
              "doc": "Constant for the Numpad / key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DOLLAR": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DOLLAR"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DOLLAR",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-o-l-l-a-r\\index.html",
          "details": {
            "info": {
              "name": "DOLLAR",
              "signature": "DOLLAR",
              "doc": "Constant for the $ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DOUBLE_QUOTE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DOUBLE_QUOTE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DOUBLE_QUOTE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-o-u-b-l-e_-q-u-o-t-e\\index.html",
          "details": {
            "info": {
              "name": "DOUBLE_QUOTE",
              "signature": "DOUBLE_QUOTE",
              "doc": "Constant for the \" key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "DOWN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "DOWN"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.DOWN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-d-o-w-n\\index.html",
          "details": {
            "info": {
              "name": "DOWN",
              "signature": "DOWN",
              "doc": "Constant for the non-numpad down arrow key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "E": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "E"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.E",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e\\index.html",
          "details": {
            "info": {
              "name": "E",
              "signature": "E",
              "doc": "Constant for the E key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "END": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "END"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.END",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e-n-d\\index.html",
          "details": {
            "info": {
              "name": "END",
              "signature": "END",
              "doc": "Constant for the End key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ENTER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ENTER"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ENTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e-n-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "ENTER",
              "signature": "ENTER",
              "doc": "Constant for the Enter key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "EQUALS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "EQUALS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.EQUALS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e-q-u-a-l-s\\index.html",
          "details": {
            "info": {
              "name": "EQUALS",
              "signature": "EQUALS",
              "doc": "Constant for the = key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ESCAPE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ESCAPE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ESCAPE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e-s-c-a-p-e\\index.html",
          "details": {
            "info": {
              "name": "ESCAPE",
              "signature": "ESCAPE",
              "doc": "Constant for the Esc key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "EURO_SIGN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "EURO_SIGN"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.EURO_SIGN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e-u-r-o_-s-i-g-n\\index.html",
          "details": {
            "info": {
              "name": "EURO_SIGN",
              "signature": "EURO_SIGN",
              "doc": "Constant for the Euro currency sign € key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "EXCLAMATION_MARK": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "EXCLAMATION_MARK"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.EXCLAMATION_MARK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-e-x-c-l-a-m-a-t-i-o-n_-m-a-r-k\\index.html",
          "details": {
            "info": {
              "name": "EXCLAMATION_MARK",
              "signature": "EXCLAMATION_MARK",
              "doc": "Constant for the ! key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f\\index.html",
          "details": {
            "info": {
              "name": "F",
              "signature": "F",
              "doc": "Constant for the F key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F1": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F1"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F1",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f1\\index.html",
          "details": {
            "info": {
              "name": "F1",
              "signature": "F1",
              "doc": "Constant for the F1 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F10": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F10"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F10",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f10\\index.html",
          "details": {
            "info": {
              "name": "F10",
              "signature": "F10",
              "doc": "Constant for the F10 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F11": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F11"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F11",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f11\\index.html",
          "details": {
            "info": {
              "name": "F11",
              "signature": "F11",
              "doc": "Constant for the F11 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F12": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F12"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F12",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f12\\index.html",
          "details": {
            "info": {
              "name": "F12",
              "signature": "F12",
              "doc": "Constant for the F12 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F2": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F2"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F2",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f2\\index.html",
          "details": {
            "info": {
              "name": "F2",
              "signature": "F2",
              "doc": "Constant for the F2 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F3": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F3"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F3",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f3\\index.html",
          "details": {
            "info": {
              "name": "F3",
              "signature": "F3",
              "doc": "Constant for the F3 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F4": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F4"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F4",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f4\\index.html",
          "details": {
            "info": {
              "name": "F4",
              "signature": "F4",
              "doc": "Constant for the F4 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F5": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F5"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F5",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f5\\index.html",
          "details": {
            "info": {
              "name": "F5",
              "signature": "F5",
              "doc": "Constant for the F5 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F6": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F6"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F6",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f6\\index.html",
          "details": {
            "info": {
              "name": "F6",
              "signature": "F6",
              "doc": "Constant for the F6 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F7": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F7"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F7",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f7\\index.html",
          "details": {
            "info": {
              "name": "F7",
              "signature": "F7",
              "doc": "Constant for the F7 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F8": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F8"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F8",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f8\\index.html",
          "details": {
            "info": {
              "name": "F8",
              "signature": "F8",
              "doc": "Constant for the F8 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "F9": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "F9"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.F9",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-f9\\index.html",
          "details": {
            "info": {
              "name": "F9",
              "signature": "F9",
              "doc": "Constant for the F9 function key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "G": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "G"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.G",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-g\\index.html",
          "details": {
            "info": {
              "name": "G",
              "signature": "G",
              "doc": "Constant for the G key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "GRAVE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "GRAVE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.GRAVE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-g-r-a-v-e\\index.html",
          "details": {
            "info": {
              "name": "GRAVE",
              "signature": "GRAVE",
              "doc": "Constant for the ` key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "GREATER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "GREATER"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.GREATER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-g-r-e-a-t-e-r\\index.html",
          "details": {
            "info": {
              "name": "GREATER",
              "signature": "GREATER",
              "doc": "Constant for the key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "H": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "H"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.H",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-h\\index.html",
          "details": {
            "info": {
              "name": "H",
              "signature": "H",
              "doc": "Constant for the H key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "HOME_POS1": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "HOME_POS1"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.HOME_POS1",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-h-o-m-e_-p-o-s1\\index.html",
          "details": {
            "info": {
              "name": "HOME_POS1",
              "signature": "HOME_POS1",
              "doc": "Constant for the Home / Pos1 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "I": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "I"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.I",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-i\\index.html",
          "details": {
            "info": {
              "name": "I",
              "signature": "I",
              "doc": "Constant for the I key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "INSERT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "INSERT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.INSERT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-i-n-s-e-r-t\\index.html",
          "details": {
            "info": {
              "name": "INSERT",
              "signature": "INSERT",
              "doc": "Constant for the Insert key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "J": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "J"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.J",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-j\\index.html",
          "details": {
            "info": {
              "name": "J",
              "signature": "J",
              "doc": "Constant for the J key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "K": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "K"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.K",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-k\\index.html",
          "details": {
            "info": {
              "name": "K",
              "signature": "K",
              "doc": "Constant for the K key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "KeyType": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "KeyType"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.KeyType",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-key-type\\index.html",
          "details": {
            "info": {
              "name": "KeyType",
              "signature": "object KeyType",
              "doc": "Integer mask for KeyCode type.",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          }
        }
      },
      "L": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "L"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.L",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-l\\index.html",
          "details": {
            "info": {
              "name": "L",
              "signature": "L",
              "doc": "Constant for the L key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "LEFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "LEFT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.LEFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-l-e-f-t\\index.html",
          "details": {
            "info": {
              "name": "LEFT",
              "signature": "LEFT",
              "doc": "Constant for the non-numpad left arrow key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "LEFT_PARENTHESIS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "LEFT_PARENTHESIS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.LEFT_PARENTHESIS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-l-e-f-t_-p-a-r-e-n-t-h-e-s-i-s\\index.html",
          "details": {
            "info": {
              "name": "LEFT_PARENTHESIS",
              "signature": "LEFT_PARENTHESIS",
              "doc": "Constant for the ( key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "LESS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "LESS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.LESS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-l-e-s-s\\index.html",
          "details": {
            "info": {
              "name": "LESS",
              "signature": "LESS",
              "doc": "Constant for the < key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "M": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "M"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.M",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-m\\index.html",
          "details": {
            "info": {
              "name": "M",
              "signature": "M",
              "doc": "Constant for the M key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "MINUS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "MINUS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.MINUS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-m-i-n-u-s\\index.html",
          "details": {
            "info": {
              "name": "MINUS",
              "signature": "MINUS",
              "doc": "Constant for the - key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "MULTIPLY": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "MULTIPLY"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.MULTIPLY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-m-u-l-t-i-p-l-y\\index.html",
          "details": {
            "info": {
              "name": "MULTIPLY",
              "signature": "MULTIPLY",
              "doc": "Constant for the Numpad * key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "N": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "N"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.N",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n\\index.html",
          "details": {
            "info": {
              "name": "N",
              "signature": "N",
              "doc": "Constant for the N key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMBER_SIGN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMBER_SIGN"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMBER_SIGN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-b-e-r_-s-i-g-n\\index.html",
          "details": {
            "info": {
              "name": "NUMBER_SIGN",
              "signature": "NUMBER_SIGN",
              "doc": "Constant for the # key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD0": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD0"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD0",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d0\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD0",
              "signature": "NUMPAD0",
              "doc": "Constant for the Numpad 0 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD1": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD1"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD1",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d1\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD1",
              "signature": "NUMPAD1",
              "doc": "Constant for the Numpad 1 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD2": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD2"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD2",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d2\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD2",
              "signature": "NUMPAD2",
              "doc": "Constant for the Numpad 2 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD3": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD3"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD3",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d3\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD3",
              "signature": "NUMPAD3",
              "doc": "Constant for the Numpad 3 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD4": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD4"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD4",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d4\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD4",
              "signature": "NUMPAD4",
              "doc": "Constant for the Numpad 4 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD5": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD5"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD5",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d5\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD5",
              "signature": "NUMPAD5",
              "doc": "Constant for the Numpad 5 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD6": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD6"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD6",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d6\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD6",
              "signature": "NUMPAD6",
              "doc": "Constant for the Numpad 6 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD7": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD7"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD7",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d7\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD7",
              "signature": "NUMPAD7",
              "doc": "Constant for the Numpad 7 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD8": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD8"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD8",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d8\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD8",
              "signature": "NUMPAD8",
              "doc": "Constant for the Numpad 8 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUMPAD9": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUMPAD9"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUMPAD9",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m-p-a-d9\\index.html",
          "details": {
            "info": {
              "name": "NUMPAD9",
              "signature": "NUMPAD9",
              "doc": "Constant for the Numpad 9 key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "NUM_LOCK": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "NUM_LOCK"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.NUM_LOCK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-n-u-m_-l-o-c-k\\index.html",
          "details": {
            "info": {
              "name": "NUM_LOCK",
              "signature": "NUM_LOCK",
              "doc": "Constant for the Num Lock key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "O": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "O"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.O",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-o\\index.html",
          "details": {
            "info": {
              "name": "O",
              "signature": "O",
              "doc": "Constant for the O key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "OPEN_BRACKET": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "OPEN_BRACKET"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.OPEN_BRACKET",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-o-p-e-n_-b-r-a-c-k-e-t\\index.html",
          "details": {
            "info": {
              "name": "OPEN_BRACKET",
              "signature": "OPEN_BRACKET",
              "doc": "Constant for the [ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "P": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "P"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.P",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p\\index.html",
          "details": {
            "info": {
              "name": "P",
              "signature": "P",
              "doc": "Constant for the P key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "PAGE_DOWN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "PAGE_DOWN"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.PAGE_DOWN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p-a-g-e_-d-o-w-n\\index.html",
          "details": {
            "info": {
              "name": "PAGE_DOWN",
              "signature": "PAGE_DOWN",
              "doc": "Constant for the Page Down key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "PAGE_UP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "PAGE_UP"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.PAGE_UP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p-a-g-e_-u-p\\index.html",
          "details": {
            "info": {
              "name": "PAGE_UP",
              "signature": "PAGE_UP",
              "doc": "Constant for the Page Up key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "PAUSE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "PAUSE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.PAUSE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p-a-u-s-e\\index.html",
          "details": {
            "info": {
              "name": "PAUSE",
              "signature": "PAUSE",
              "doc": "Constant for the Pause key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "PERIOD": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "PERIOD"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.PERIOD",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p-e-r-i-o-d\\index.html",
          "details": {
            "info": {
              "name": "PERIOD",
              "signature": "PERIOD",
              "doc": "Constant for the . key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "PLUS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "PLUS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.PLUS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p-l-u-s\\index.html",
          "details": {
            "info": {
              "name": "PLUS",
              "signature": "PLUS",
              "doc": "Constant for the + key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "PRINT_SCREEN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "PRINT_SCREEN"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.PRINT_SCREEN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-p-r-i-n-t_-s-c-r-e-e-n\\index.html",
          "details": {
            "info": {
              "name": "PRINT_SCREEN",
              "signature": "PRINT_SCREEN",
              "doc": "Constant for the Print Screen key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "Q": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "Q"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.Q",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-q\\index.html",
          "details": {
            "info": {
              "name": "Q",
              "signature": "Q",
              "doc": "Constant for the Q key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "R": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "R"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.R",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-r\\index.html",
          "details": {
            "info": {
              "name": "R",
              "signature": "R",
              "doc": "Constant for the R key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "RIGHT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "RIGHT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.RIGHT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-r-i-g-h-t\\index.html",
          "details": {
            "info": {
              "name": "RIGHT",
              "signature": "RIGHT",
              "doc": "Constant for the non-numpad right arrow key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "RIGHT_PARENTHESIS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "RIGHT_PARENTHESIS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.RIGHT_PARENTHESIS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-r-i-g-h-t_-p-a-r-e-n-t-h-e-s-i-s\\index.html",
          "details": {
            "info": {
              "name": "RIGHT_PARENTHESIS",
              "signature": "RIGHT_PARENTHESIS",
              "doc": "Constant for the ) key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "S": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "S"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.S",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s\\index.html",
          "details": {
            "info": {
              "name": "S",
              "signature": "S",
              "doc": "Constant for the S key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "SCROLL_LOCK": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "SCROLL_LOCK"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.SCROLL_LOCK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s-c-r-o-l-l_-l-o-c-k\\index.html",
          "details": {
            "info": {
              "name": "SCROLL_LOCK",
              "signature": "SCROLL_LOCK",
              "doc": "Constant for the Scroll Lock key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "SEMICOLON": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "SEMICOLON"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.SEMICOLON",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s-e-m-i-c-o-l-o-n\\index.html",
          "details": {
            "info": {
              "name": "SEMICOLON",
              "signature": "SEMICOLON",
              "doc": "Constant for the ; key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "SHIFT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "SHIFT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.SHIFT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s-h-i-f-t\\index.html",
          "details": {
            "info": {
              "name": "SHIFT",
              "signature": "SHIFT",
              "doc": "Constant for the Shift key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "SLASH": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "SLASH"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.SLASH",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s-l-a-s-h\\index.html",
          "details": {
            "info": {
              "name": "SLASH",
              "signature": "SLASH",
              "doc": "Constant for the forward slash / key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "SPACE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "SPACE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.SPACE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s-p-a-c-e\\index.html",
          "details": {
            "info": {
              "name": "SPACE",
              "signature": "SPACE",
              "doc": "Constant for the Space key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "SUBTRACT": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "SUBTRACT"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.SUBTRACT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-s-u-b-t-r-a-c-t\\index.html",
          "details": {
            "info": {
              "name": "SUBTRACT",
              "signature": "SUBTRACT",
              "doc": "Constant for the Numpad - key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "T": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "T"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.T",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-t\\index.html",
          "details": {
            "info": {
              "name": "T",
              "signature": "T",
              "doc": "Constant for the T key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "TAB": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "TAB"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.TAB",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-t-a-b\\index.html",
          "details": {
            "info": {
              "name": "TAB",
              "signature": "TAB",
              "doc": "Constant for the Tab key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "TILDE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "TILDE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.TILDE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-t-i-l-d-e\\index.html",
          "details": {
            "info": {
              "name": "TILDE",
              "signature": "TILDE",
              "doc": "Constant for the ~ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "U": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "U"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.U",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-u\\index.html",
          "details": {
            "info": {
              "name": "U",
              "signature": "U",
              "doc": "Constant for the U key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "UNDEFINED": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "UNDEFINED"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.UNDEFINED",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-u-n-d-e-f-i-n-e-d\\index.html",
          "details": {
            "info": {
              "name": "UNDEFINED",
              "signature": "UNDEFINED",
              "doc": "This value is used to indicate that the keyCode is unknown. Key typed events do not have a keyCode value this value is used instead.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "UNDERSCORE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "UNDERSCORE"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.UNDERSCORE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-u-n-d-e-r-s-c-o-r-e\\index.html",
          "details": {
            "info": {
              "name": "UNDERSCORE",
              "signature": "UNDERSCORE",
              "doc": "Constant for the _ key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "UP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "UP"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.UP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-u-p\\index.html",
          "details": {
            "info": {
              "name": "UP",
              "signature": "UP",
              "doc": "Constant for the non-numpad up arrow key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "V": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "V"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.V",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-v\\index.html",
          "details": {
            "info": {
              "name": "V",
              "signature": "V",
              "doc": "Constant for the V key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "W": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "W"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.W",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-w\\index.html",
          "details": {
            "info": {
              "name": "W",
              "signature": "W",
              "doc": "Constant for the W key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "WINDOWS": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "WINDOWS"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.WINDOWS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-w-i-n-d-o-w-s\\index.html",
          "details": {
            "info": {
              "name": "WINDOWS",
              "signature": "WINDOWS",
              "doc": "Constant for the Microsoft Windows Win key. It is used for both the left and right version of the key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "X": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "X"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.X",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-x\\index.html",
          "details": {
            "info": {
              "name": "X",
              "signature": "X",
              "doc": "Constant for the X key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "Y": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "Y"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.Y",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-y\\index.html",
          "details": {
            "info": {
              "name": "Y",
              "signature": "Y",
              "doc": "Constant for the Y key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "Z": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "Z"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.Z",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\-z\\index.html",
          "details": {
            "info": {
              "name": "Z",
              "signature": "Z",
              "doc": "Constant for the Z key.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "entries"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<KeyCode>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "getKeyCodes": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "getKeyCodes"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.getKeyCodes",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\get-key-codes.html",
        "details": [
          {
            "info": {
              "name": "getKeyCodes",
              "signature": "fun getKeyCodes(): List<String>",
              "doc": "Returns the actual key codes for this key."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode"
        ],
        "package": "tools.aqua.bgw.event.KeyCode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\index.html",
        "details": {
          "info": {
            "name": "KeyCode",
            "signature": "enum KeyCode : Enum<KeyCode>",
            "doc": "Enum for available key codes.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.1"
        },
        "members": {
          "types": [
            {
              "name": "KeyType",
              "doc": "Integer mask for KeyCode type.",
              "link": "tools.aqua.bgw.event/KeyCode/KeyType"
            }
          ],
          "properties": [
            {
              "signature": "val entries: EnumEntries<KeyCode>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.event/KeyCode/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[KeyCode](tools.aqua.bgw.event/KeyCode)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val string: String",
              "modifier": "val",
              "name": "string",
              "link": "tools.aqua.bgw.event/KeyCode/string",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Key name."
            }
          ],
          "functions": [
            {
              "signature": "fun isArrow(): Boolean",
              "name": "isArrow",
              "link": "tools.aqua.bgw.event/KeyCode/isArrow",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was an arrow key, false otherwise."
            },
            {
              "signature": "fun isDigit(): Boolean",
              "name": "isDigit",
              "link": "tools.aqua.bgw.event/KeyCode/isDigit",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
            },
            {
              "signature": "fun isFunction(): Boolean",
              "name": "isFunction",
              "link": "tools.aqua.bgw.event/KeyCode/isFunction",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
            },
            {
              "signature": "fun isLetter(): Boolean",
              "name": "isLetter",
              "link": "tools.aqua.bgw.event/KeyCode/isLetter",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was a letter key A-Z, false otherwise."
            },
            {
              "signature": "fun isModifier(): Boolean",
              "name": "isModifier",
              "link": "tools.aqua.bgw.event/KeyCode/isModifier",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
            },
            {
              "signature": "fun isNavigation(): Boolean",
              "name": "isNavigation",
              "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
            },
            {
              "signature": "fun isOnNumpad(): Boolean",
              "name": "isOnNumpad",
              "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
            },
            {
              "signature": "fun isWhitespace(): Boolean",
              "name": "isWhitespace",
              "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
            },
            {
              "signature": "fun valueOf(value: String): KeyCode",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.event/KeyCode/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.event/KeyCode/valueOf",
              "returnType": "[KeyCode](tools.aqua.bgw.event/KeyCode)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<KeyCode>",
              "name": "values",
              "link": "tools.aqua.bgw.event/KeyCode/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[KeyCode](tools.aqua.bgw.event/KeyCode)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "isArrow": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isArrow"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isArrow",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-arrow.html",
        "details": [
          {
            "info": {
              "name": "isArrow",
              "signature": "fun isArrow(): Boolean",
              "doc": "Returns true if key was an arrow key, false otherwise."
            },
            "seeAlso": [
              {
                "name": "KeyCode.isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation"
              }
            ]
          }
        ]
      },
      "isDigit": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isDigit"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isDigit",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-digit.html",
        "details": [
          {
            "info": {
              "name": "isDigit",
              "signature": "fun isDigit(): Boolean",
              "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
            },
            "seeAlso": [
              {
                "name": "KeyCode.isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter"
              }
            ]
          }
        ]
      },
      "isFunction": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isFunction"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isFunction",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-function.html",
        "details": [
          {
            "info": {
              "name": "isFunction",
              "signature": "fun isFunction(): Boolean",
              "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
            }
          }
        ]
      },
      "isLetter": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isLetter"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isLetter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-letter.html",
        "details": [
          {
            "info": {
              "name": "isLetter",
              "signature": "fun isLetter(): Boolean",
              "doc": "Returns true if key was a letter key A-Z, false otherwise."
            },
            "seeAlso": [
              {
                "name": "KeyCode.isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit"
              }
            ]
          }
        ]
      },
      "isModifier": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isModifier"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isModifier",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-modifier.html",
        "details": [
          {
            "info": {
              "name": "isModifier",
              "signature": "fun isModifier(): Boolean",
              "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
            }
          }
        ]
      },
      "isNavigation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isNavigation"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isNavigation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-navigation.html",
        "details": [
          {
            "info": {
              "name": "isNavigation",
              "signature": "fun isNavigation(): Boolean",
              "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
            },
            "seeAlso": [
              {
                "name": "KeyCode.isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow"
              }
            ]
          }
        ]
      },
      "isOnNumpad": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isOnNumpad"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isOnNumpad",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-on-numpad.html",
        "details": [
          {
            "info": {
              "name": "isOnNumpad",
              "signature": "fun isOnNumpad(): Boolean",
              "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
            }
          }
        ]
      },
      "isWhitespace": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "isWhitespace"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.isWhitespace",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\is-whitespace.html",
        "details": [
          {
            "info": {
              "name": "isWhitespace",
              "signature": "fun isWhitespace(): Boolean",
              "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
            }
          }
        ]
      },
      "string": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "string"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.string",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\string.html",
        "details": [
          {
            "info": {
              "name": "string",
              "signature": "val string: String",
              "doc": ""
            }
          }
        ]
      },
      "toString": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "toString"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.toString",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\to-string.html",
        "details": [
          {
            "info": {
              "name": "toString",
              "signature": "open override fun toString(): String",
              "doc": "Returns a string representation of the key."
            }
          }
        ]
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): KeyCode",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyCode",
          "values"
        ],
        "package": "tools.aqua.bgw.event.KeyCode.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<KeyCode>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      },
      "Ä": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "Ä"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.Ä",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\Ä\\index.html",
          "details": {
            "info": {
              "name": "Ä",
              "signature": "Ä",
              "doc": "Constant for the Ä key.",
              "tags": {
                "modifiers": []
              }
            },
            "since": "1.0"
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "Ö": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "Ö"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.Ö",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\Ö\\index.html",
          "details": {
            "info": {
              "name": "Ö",
              "signature": "Ö",
              "doc": "Constant for the Ö key.",
              "tags": {
                "modifiers": []
              }
            },
            "since": "1.0"
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "Ü": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "Ü"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.Ü",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\Ü\\index.html",
          "details": {
            "info": {
              "name": "Ü",
              "signature": "Ü",
              "doc": "Constant for the Ü key.",
              "tags": {
                "modifiers": []
              }
            },
            "since": "1.0"
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      },
      "ß": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "KeyCode",
            "ß"
          ],
          "package": "tools.aqua.bgw.event.KeyCode.ß",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-code\\ß\\index.html",
          "details": {
            "info": {
              "name": "ß",
              "signature": "ß",
              "doc": "Constant for the ß key.",
              "tags": {
                "modifiers": []
              }
            },
            "since": "1.0"
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val string: String",
                "modifier": "val",
                "name": "string",
                "link": "tools.aqua.bgw.event/KeyCode/string",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": "Key name."
              }
            ],
            "functions": [
              {
                "signature": "fun isArrow(): Boolean",
                "name": "isArrow",
                "link": "tools.aqua.bgw.event/KeyCode/isArrow",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was an arrow key, false otherwise."
              },
              {
                "signature": "fun isDigit(): Boolean",
                "name": "isDigit",
                "link": "tools.aqua.bgw.event/KeyCode/isDigit",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was digit key 1-9 from key- or numpad, false otherwise."
              },
              {
                "signature": "fun isFunction(): Boolean",
                "name": "isFunction",
                "link": "tools.aqua.bgw.event/KeyCode/isFunction",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a function key F1, F2, etc., false otherwise."
              },
              {
                "signature": "fun isLetter(): Boolean",
                "name": "isLetter",
                "link": "tools.aqua.bgw.event/KeyCode/isLetter",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a letter key A-Z, false otherwise."
              },
              {
                "signature": "fun isModifier(): Boolean",
                "name": "isModifier",
                "link": "tools.aqua.bgw.event/KeyCode/isModifier",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a modifier like Shift or Ctrl etc., false otherwise."
              },
              {
                "signature": "fun isNavigation(): Boolean",
                "name": "isNavigation",
                "link": "tools.aqua.bgw.event/KeyCode/isNavigation",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a navigation key like arrows and page up / down, false otherwise."
              },
              {
                "signature": "fun isOnNumpad(): Boolean",
                "name": "isOnNumpad",
                "link": "tools.aqua.bgw.event/KeyCode/isOnNumpad",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was on numpad like numpad numbers or +,-,/,* etc., false otherwise."
              },
              {
                "signature": "fun isWhitespace(): Boolean",
                "name": "isWhitespace",
                "link": "tools.aqua.bgw.event/KeyCode/isWhitespace",
                "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
                "doc": "Returns true if key was a whitespace key like space, tab etc., false otherwise."
              }
            ]
          }
        }
      }
    },
    "KeyEvent": {
      "KeyEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent",
          "KeyEvent"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent.KeyEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\-key-event.html",
        "details": [
          {
            "info": {
              "name": "KeyEvent",
              "signature": "constructor(keyCode: KeyCode = KeyCode.UNDEFINED, character: String = \"\", isControlDown: Boolean, isShiftDown: Boolean, isAltDown: Boolean)",
              "doc": "Creates a [KeyEvent](tools.aqua.bgw.event/KeyEvent)."
            }
          }
        ]
      },
      "character": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent",
          "character"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent.character",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\character.html",
        "details": [
          {
            "info": {
              "name": "character",
              "signature": "val character: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\index.html",
        "details": {
          "info": {
            "name": "KeyEvent",
            "signature": "class KeyEvent(val keyCode: KeyCode = KeyCode.UNDEFINED, val character: String = \"\", val isControlDown: Boolean, val isShiftDown: Boolean, val isAltDown: Boolean) : InputEvent",
            "doc": "[Event](tools.aqua.bgw.event/Event) that gets raised for key inputs.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val character: String",
              "modifier": "val",
              "name": "character",
              "link": "tools.aqua.bgw.event/KeyEvent/character",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Corresponding character string."
            },
            {
              "signature": "val isAltDown: Boolean",
              "modifier": "val",
              "name": "isAltDown",
              "link": "tools.aqua.bgw.event/KeyEvent/isAltDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether alt key was pressed."
            },
            {
              "signature": "val isControlDown: Boolean",
              "modifier": "val",
              "name": "isControlDown",
              "link": "tools.aqua.bgw.event/KeyEvent/isControlDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether control key was pressed."
            },
            {
              "signature": "val isShiftDown: Boolean",
              "modifier": "val",
              "name": "isShiftDown",
              "link": "tools.aqua.bgw.event/KeyEvent/isShiftDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether shift key was pressed."
            },
            {
              "signature": "val keyCode: KeyCode",
              "modifier": "val",
              "name": "keyCode",
              "link": "tools.aqua.bgw.event/KeyEvent/keyCode",
              "type": "[KeyCode](tools.aqua.bgw.event/KeyCode)",
              "defaultValue": "",
              "doc": "Corresponding key code enum value. [keyCode](tools.aqua.bgw.event/KeyEvent/keyCode) is [KeyCode.UNDEFINED](tools.aqua.bgw.event/KeyCode/UNDEFINED) in any `onKeyTyped`. Only used for `onKeyPressed` and `onKeyReleased`."
            }
          ]
        }
      },
      "isAltDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent",
          "isAltDown"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent.isAltDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\is-alt-down.html",
        "details": [
          {
            "info": {
              "name": "isAltDown",
              "signature": "val isAltDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "isControlDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent",
          "isControlDown"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent.isControlDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\is-control-down.html",
        "details": [
          {
            "info": {
              "name": "isControlDown",
              "signature": "val isControlDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "isShiftDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent",
          "isShiftDown"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent.isShiftDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\is-shift-down.html",
        "details": [
          {
            "info": {
              "name": "isShiftDown",
              "signature": "val isShiftDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "keyCode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "KeyEvent",
          "keyCode"
        ],
        "package": "tools.aqua.bgw.event.KeyEvent.keyCode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-key-event\\key-code.html",
        "details": [
          {
            "info": {
              "name": "keyCode",
              "signature": "val keyCode: KeyCode",
              "doc": ""
            }
          }
        ]
      }
    },
    "MouseButtonType": {
      "LEFT_BUTTON": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "MouseButtonType",
            "LEFT_BUTTON"
          ],
          "package": "tools.aqua.bgw.event.MouseButtonType.LEFT_BUTTON",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\-l-e-f-t_-b-u-t-t-o-n\\index.html",
          "details": {
            "info": {
              "name": "LEFT_BUTTON",
              "signature": "LEFT_BUTTON",
              "doc": "LEFT / primary mouse button click.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "MOUSE_WHEEL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "MouseButtonType",
            "MOUSE_WHEEL"
          ],
          "package": "tools.aqua.bgw.event.MouseButtonType.MOUSE_WHEEL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\-m-o-u-s-e_-w-h-e-e-l\\index.html",
          "details": {
            "info": {
              "name": "MOUSE_WHEEL",
              "signature": "MOUSE_WHEEL",
              "doc": "MOUSE WHEEL button click.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "OTHER": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "MouseButtonType",
            "OTHER"
          ],
          "package": "tools.aqua.bgw.event.MouseButtonType.OTHER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\-o-t-h-e-r\\index.html",
          "details": {
            "info": {
              "name": "OTHER",
              "signature": "OTHER",
              "doc": "All other mouse button clicks.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "RIGHT_BUTTON": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "MouseButtonType",
            "RIGHT_BUTTON"
          ],
          "package": "tools.aqua.bgw.event.MouseButtonType.RIGHT_BUTTON",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\-r-i-g-h-t_-b-u-t-t-o-n\\index.html",
          "details": {
            "info": {
              "name": "RIGHT_BUTTON",
              "signature": "RIGHT_BUTTON",
              "doc": "RIGHT / secondary mouse button click.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "UNSPECIFIED": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "MouseButtonType",
            "UNSPECIFIED"
          ],
          "package": "tools.aqua.bgw.event.MouseButtonType.UNSPECIFIED",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\-u-n-s-p-e-c-i-f-i-e-d\\index.html",
          "details": {
            "info": {
              "name": "UNSPECIFIED",
              "signature": "UNSPECIFIED",
              "doc": "Unspecified.",
              "tags": {
                "modifiers": []
              }
            },
            "deprecated": {
              "description": "MouseButtonType.UNSPECIFIED should not be used.",
              "replaceWith": ""
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseButtonType",
          "entries"
        ],
        "package": "tools.aqua.bgw.event.MouseButtonType.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<MouseButtonType>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseButtonType"
        ],
        "package": "tools.aqua.bgw.event.MouseButtonType",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\index.html",
        "details": {
          "info": {
            "name": "MouseButtonType",
            "signature": "enum MouseButtonType : Enum<MouseButtonType>",
            "doc": "Enum for all available mouse button clicks.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.1"
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<MouseButtonType>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.event/MouseButtonType/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[MouseButtonType](tools.aqua.bgw.event/MouseButtonType)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): MouseButtonType",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.event/MouseButtonType/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.event/MouseButtonType/valueOf",
              "returnType": "[MouseButtonType](tools.aqua.bgw.event/MouseButtonType)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<MouseButtonType>",
              "name": "values",
              "link": "tools.aqua.bgw.event/MouseButtonType/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[MouseButtonType](tools.aqua.bgw.event/MouseButtonType)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseButtonType",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.event.MouseButtonType.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): MouseButtonType",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseButtonType",
          "values"
        ],
        "package": "tools.aqua.bgw.event.MouseButtonType.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-button-type\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<MouseButtonType>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "MouseEvent": {
      "MouseEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseEvent",
          "MouseEvent"
        ],
        "package": "tools.aqua.bgw.event.MouseEvent.MouseEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-event\\-mouse-event.html",
        "details": [
          {
            "info": {
              "name": "MouseEvent",
              "signature": "constructor(button: MouseButtonType, posX: Number, posY: Number)",
              "doc": "Creates a [MouseEvent](tools.aqua.bgw.event/MouseEvent) with given button."
            }
          }
        ]
      },
      "button": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseEvent",
          "button"
        ],
        "package": "tools.aqua.bgw.event.MouseEvent.button",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-event\\button.html",
        "details": [
          {
            "info": {
              "name": "button",
              "signature": "val button: MouseButtonType",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseEvent"
        ],
        "package": "tools.aqua.bgw.event.MouseEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-event\\index.html",
        "details": {
          "info": {
            "name": "MouseEvent",
            "signature": "class MouseEvent(val button: MouseButtonType, val posX: Number, val posY: Number) : InputEvent",
            "doc": "Event that gets raised for mouse inputs.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val button: MouseButtonType",
              "modifier": "val",
              "name": "button",
              "link": "tools.aqua.bgw.event/MouseEvent/button",
              "type": "[MouseButtonType](tools.aqua.bgw.event/MouseButtonType)",
              "defaultValue": "",
              "doc": "Corresponding mouse button enum value."
            },
            {
              "signature": "val posX: Number",
              "modifier": "val",
              "name": "posX",
              "link": "tools.aqua.bgw.event/MouseEvent/posX",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "doc": "The X-coordinate of the mouse event position."
            },
            {
              "signature": "val posY: Number",
              "modifier": "val",
              "name": "posY",
              "link": "tools.aqua.bgw.event/MouseEvent/posY",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "doc": "The Y-coordinate of the mouse event position."
            }
          ]
        }
      },
      "posX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseEvent",
          "posX"
        ],
        "package": "tools.aqua.bgw.event.MouseEvent.posX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-event\\pos-x.html",
        "details": [
          {
            "info": {
              "name": "posX",
              "signature": "val posX: Number",
              "doc": ""
            }
          }
        ]
      },
      "posY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "MouseEvent",
          "posY"
        ],
        "package": "tools.aqua.bgw.event.MouseEvent.posY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-mouse-event\\pos-y.html",
        "details": [
          {
            "info": {
              "name": "posY",
              "signature": "val posY: Number",
              "doc": ""
            }
          }
        ]
      }
    },
    "ScrollDirection": {
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "ScrollDirection",
            "Companion"
          ],
          "package": "tools.aqua.bgw.event.ScrollDirection.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          }
        }
      },
      "DOWN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "ScrollDirection",
            "DOWN"
          ],
          "package": "tools.aqua.bgw.event.ScrollDirection.DOWN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\-d-o-w-n\\index.html",
          "details": {
            "info": {
              "name": "DOWN",
              "signature": "DOWN",
              "doc": "Downwards scroll.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "operator fun times(scalar: Number): Double",
                "name": "times",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "scalar",
                    "link": "tools.aqua.bgw.event/ScrollDirection/times",
                    "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.event/ScrollDirection/times",
                "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                "doc": "Multiplies [scalar](tools.aqua.bgw.event/ScrollDirection/times) by 1 ([UP](tools.aqua.bgw.event/ScrollDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/ScrollDirection/DOWN)).",
                "isSuspend": false
              }
            ]
          }
        }
      },
      "UP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "ScrollDirection",
            "UP"
          ],
          "package": "tools.aqua.bgw.event.ScrollDirection.UP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\-u-p\\index.html",
          "details": {
            "info": {
              "name": "UP",
              "signature": "UP",
              "doc": "Upwards scroll.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "operator fun times(scalar: Number): Double",
                "name": "times",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "scalar",
                    "link": "tools.aqua.bgw.event/ScrollDirection/times",
                    "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.event/ScrollDirection/times",
                "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
                "doc": "Multiplies [scalar](tools.aqua.bgw.event/ScrollDirection/times) by 1 ([UP](tools.aqua.bgw.event/ScrollDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/ScrollDirection/DOWN)).",
                "isSuspend": false
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollDirection",
          "entries"
        ],
        "package": "tools.aqua.bgw.event.ScrollDirection.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<ScrollDirection>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollDirection"
        ],
        "package": "tools.aqua.bgw.event.ScrollDirection",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\index.html",
        "details": {
          "info": {
            "name": "ScrollDirection",
            "signature": "enum ScrollDirection : Enum<ScrollDirection>",
            "doc": "Enum indicating direction of a ScrollEvent.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.7.1"
        },
        "members": {
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.event/ScrollDirection/Companion"
            }
          ],
          "properties": [
            {
              "signature": "val entries: EnumEntries<ScrollDirection>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.event/ScrollDirection/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.enums/-enum-entries/index.html)<[ScrollDirection](tools.aqua.bgw.event/ScrollDirection)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/ScrollDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "operator fun times(scalar: Number): Double",
              "name": "times",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.event/ScrollDirection/times",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.event/ScrollDirection/times",
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html)",
              "doc": "Multiplies [scalar](tools.aqua.bgw.event/ScrollDirection/times) by 1 ([UP](tools.aqua.bgw.event/ScrollDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/ScrollDirection/DOWN)).",
              "isSuspend": false
            },
            {
              "signature": "fun valueOf(value: String): ScrollDirection",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.event/ScrollDirection/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.event/ScrollDirection/valueOf",
              "returnType": "[ScrollDirection](tools.aqua.bgw.event/ScrollDirection)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<ScrollDirection>",
              "name": "values",
              "link": "tools.aqua.bgw.event/ScrollDirection/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html)<[ScrollDirection](tools.aqua.bgw.event/ScrollDirection)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "times": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollDirection",
          "times"
        ],
        "package": "tools.aqua.bgw.event.ScrollDirection.times",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\times.html",
        "details": [
          {
            "info": {
              "name": "times",
              "signature": "operator fun times(scalar: Number): Double",
              "doc": "Multiplies [scalar](tools.aqua.bgw.event/ScrollDirection/times) by 1 ([UP](tools.aqua.bgw.event/ScrollDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/ScrollDirection/DOWN))."
            },
            "since": "0.7.1",
            "parameters": [
              {
                "name": "scalar",
                "doc": "Scalar to be multiplied."
              }
            ]
          }
        ]
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollDirection",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.event.ScrollDirection.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): ScrollDirection",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollDirection",
          "values"
        ],
        "package": "tools.aqua.bgw.event.ScrollDirection.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-direction\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<ScrollDirection>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "ScrollEvent": {
      "ScrollEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollEvent",
          "ScrollEvent"
        ],
        "package": "tools.aqua.bgw.event.ScrollEvent.ScrollEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-event\\-scroll-event.html",
        "details": [
          {
            "info": {
              "name": "ScrollEvent",
              "signature": "constructor(direction: ScrollDirection, isControlDown: Boolean, isShiftDown: Boolean, isAltDown: Boolean)",
              "doc": "Creates a [ScrollEvent](tools.aqua.bgw.event/ScrollEvent)."
            }
          }
        ]
      },
      "direction": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollEvent",
          "direction"
        ],
        "package": "tools.aqua.bgw.event.ScrollEvent.direction",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-event\\direction.html",
        "details": [
          {
            "info": {
              "name": "direction",
              "signature": "val direction: ScrollDirection",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollEvent"
        ],
        "package": "tools.aqua.bgw.event.ScrollEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-event\\index.html",
        "details": {
          "info": {
            "name": "ScrollEvent",
            "signature": "class ScrollEvent(val direction: ScrollDirection, val isControlDown: Boolean, val isShiftDown: Boolean, val isAltDown: Boolean) : InputEvent",
            "doc": "Event that gets raised for mouse wheel inputs.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val direction: ScrollDirection",
              "modifier": "val",
              "name": "direction",
              "link": "tools.aqua.bgw.event/ScrollEvent/direction",
              "type": "[ScrollDirection](tools.aqua.bgw.event/ScrollDirection)",
              "defaultValue": "",
              "doc": "The scroll direction."
            },
            {
              "signature": "val isAltDown: Boolean",
              "modifier": "val",
              "name": "isAltDown",
              "link": "tools.aqua.bgw.event/ScrollEvent/isAltDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether alt key was pressed."
            },
            {
              "signature": "val isControlDown: Boolean",
              "modifier": "val",
              "name": "isControlDown",
              "link": "tools.aqua.bgw.event/ScrollEvent/isControlDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether control key was pressed."
            },
            {
              "signature": "val isShiftDown: Boolean",
              "modifier": "val",
              "name": "isShiftDown",
              "link": "tools.aqua.bgw.event/ScrollEvent/isShiftDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether shift key was pressed."
            }
          ]
        }
      },
      "isAltDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollEvent",
          "isAltDown"
        ],
        "package": "tools.aqua.bgw.event.ScrollEvent.isAltDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-event\\is-alt-down.html",
        "details": [
          {
            "info": {
              "name": "isAltDown",
              "signature": "val isAltDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "isControlDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollEvent",
          "isControlDown"
        ],
        "package": "tools.aqua.bgw.event.ScrollEvent.isControlDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-event\\is-control-down.html",
        "details": [
          {
            "info": {
              "name": "isControlDown",
              "signature": "val isControlDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "isShiftDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "ScrollEvent",
          "isShiftDown"
        ],
        "package": "tools.aqua.bgw.event.ScrollEvent.isShiftDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-scroll-event\\is-shift-down.html",
        "details": [
          {
            "info": {
              "name": "isShiftDown",
              "signature": "val isShiftDown: Boolean",
              "doc": ""
            }
          }
        ]
      }
    },
    "WheelDirection": {
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "WheelDirection",
            "Companion"
          ],
          "package": "tools.aqua.bgw.event.WheelDirection.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          }
        }
      },
      "DOWN": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "WheelDirection",
            "DOWN"
          ],
          "package": "tools.aqua.bgw.event.WheelDirection.DOWN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\-d-o-w-n\\index.html",
          "details": {
            "info": {
              "name": "DOWN",
              "signature": "DOWN",
              "doc": "Downwards scroll.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "operator fun times(scalar: Number): Double",
                "name": "times",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "scalar",
                    "link": "tools.aqua.bgw.event/WheelDirection/times",
                    "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.event/WheelDirection/times",
                "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                "doc": "Multiplies [scalar](tools.aqua.bgw.event/WheelDirection/times) by 1 ([UP](tools.aqua.bgw.event/WheelDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/WheelDirection/DOWN)).",
                "isSuspend": false
              }
            ]
          }
        }
      },
      "UP": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.event",
            "WheelDirection",
            "UP"
          ],
          "package": "tools.aqua.bgw.event.WheelDirection.UP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\-u-p\\index.html",
          "details": {
            "info": {
              "name": "UP",
              "signature": "UP",
              "doc": "Upwards scroll.",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "operator fun times(scalar: Number): Double",
                "name": "times",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "scalar",
                    "link": "tools.aqua.bgw.event/WheelDirection/times",
                    "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.event/WheelDirection/times",
                "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                "doc": "Multiplies [scalar](tools.aqua.bgw.event/WheelDirection/times) by 1 ([UP](tools.aqua.bgw.event/WheelDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/WheelDirection/DOWN)).",
                "isSuspend": false
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelDirection",
          "entries"
        ],
        "package": "tools.aqua.bgw.event.WheelDirection.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<WheelDirection>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelDirection"
        ],
        "package": "tools.aqua.bgw.event.WheelDirection",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\index.html",
        "details": {
          "info": {
            "name": "WheelDirection",
            "signature": "enum WheelDirection : Enum<WheelDirection>",
            "doc": "Enum indicating direction of a WheelEvent.",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          },
          "since": "0.7.1"
        },
        "members": {
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.event/WheelDirection/Companion"
            }
          ],
          "properties": [
            {
              "signature": "val entries: EnumEntries<WheelDirection>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.event/WheelDirection/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[WheelDirection](tools.aqua.bgw.event/WheelDirection)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.event/WheelDirection/DOWN",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "operator fun times(scalar: Number): Double",
              "name": "times",
              "parameters": [
                {
                  "modifier": "",
                  "name": "scalar",
                  "link": "tools.aqua.bgw.event/WheelDirection/times",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.event/WheelDirection/times",
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "doc": "Multiplies [scalar](tools.aqua.bgw.event/WheelDirection/times) by 1 ([UP](tools.aqua.bgw.event/WheelDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/WheelDirection/DOWN)).",
              "isSuspend": false
            },
            {
              "signature": "fun valueOf(value: String): WheelDirection",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.event/WheelDirection/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.event/WheelDirection/valueOf",
              "returnType": "[WheelDirection](tools.aqua.bgw.event/WheelDirection)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<WheelDirection>",
              "name": "values",
              "link": "tools.aqua.bgw.event/WheelDirection/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[WheelDirection](tools.aqua.bgw.event/WheelDirection)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "times": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelDirection",
          "times"
        ],
        "package": "tools.aqua.bgw.event.WheelDirection.times",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\times.html",
        "details": [
          {
            "info": {
              "name": "times",
              "signature": "operator fun times(scalar: Number): Double",
              "doc": "Multiplies [scalar](tools.aqua.bgw.event/WheelDirection/times) by 1 ([UP](tools.aqua.bgw.event/WheelDirection/UP)) or -1 ([DOWN](tools.aqua.bgw.event/WheelDirection/DOWN))."
            },
            "since": "0.7.1",
            "parameters": [
              {
                "name": "scalar",
                "doc": "Scalar to be multiplied."
              }
            ]
          }
        ]
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelDirection",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.event.WheelDirection.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): WheelDirection",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelDirection",
          "values"
        ],
        "package": "tools.aqua.bgw.event.WheelDirection.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-direction\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<WheelDirection>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "WheelEvent": {
      "WheelEvent": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelEvent",
          "WheelEvent"
        ],
        "package": "tools.aqua.bgw.event.WheelEvent.WheelEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-event\\-wheel-event.html",
        "details": [
          {
            "info": {
              "name": "WheelEvent",
              "signature": "constructor(direction: WheelDirection, isControlDown: Boolean, isShiftDown: Boolean, isAltDown: Boolean)",
              "doc": "Creates a [WheelEvent](tools.aqua.bgw.event/WheelEvent)."
            }
          }
        ]
      },
      "direction": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelEvent",
          "direction"
        ],
        "package": "tools.aqua.bgw.event.WheelEvent.direction",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-event\\direction.html",
        "details": [
          {
            "info": {
              "name": "direction",
              "signature": "val direction: WheelDirection",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelEvent"
        ],
        "package": "tools.aqua.bgw.event.WheelEvent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-event\\index.html",
        "details": {
          "info": {
            "name": "WheelEvent",
            "signature": "class WheelEvent(val direction: WheelDirection, val isControlDown: Boolean, val isShiftDown: Boolean, val isAltDown: Boolean) : InputEvent",
            "doc": "Event that gets raised for mouse wheel inputs.",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val direction: WheelDirection",
              "modifier": "val",
              "name": "direction",
              "link": "tools.aqua.bgw.event/WheelEvent/direction",
              "type": "[WheelDirection](tools.aqua.bgw.event/WheelDirection)",
              "defaultValue": "",
              "doc": "The scroll direction."
            },
            {
              "signature": "val isAltDown: Boolean",
              "modifier": "val",
              "name": "isAltDown",
              "link": "tools.aqua.bgw.event/WheelEvent/isAltDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether alt key was pressed."
            },
            {
              "signature": "val isControlDown: Boolean",
              "modifier": "val",
              "name": "isControlDown",
              "link": "tools.aqua.bgw.event/WheelEvent/isControlDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether control key was pressed."
            },
            {
              "signature": "val isShiftDown: Boolean",
              "modifier": "val",
              "name": "isShiftDown",
              "link": "tools.aqua.bgw.event/WheelEvent/isShiftDown",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Whether shift key was pressed."
            }
          ]
        }
      },
      "isAltDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelEvent",
          "isAltDown"
        ],
        "package": "tools.aqua.bgw.event.WheelEvent.isAltDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-event\\is-alt-down.html",
        "details": [
          {
            "info": {
              "name": "isAltDown",
              "signature": "val isAltDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "isControlDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelEvent",
          "isControlDown"
        ],
        "package": "tools.aqua.bgw.event.WheelEvent.isControlDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-event\\is-control-down.html",
        "details": [
          {
            "info": {
              "name": "isControlDown",
              "signature": "val isControlDown: Boolean",
              "doc": ""
            }
          }
        ]
      },
      "isShiftDown": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.event",
          "WheelEvent",
          "isShiftDown"
        ],
        "package": "tools.aqua.bgw.event.WheelEvent.isShiftDown",
        "path": "example\\htmlPartial\\tools.aqua.bgw.event\\-wheel-event\\is-shift-down.html",
        "details": [
          {
            "info": {
              "name": "isShiftDown",
              "signature": "val isShiftDown: Boolean",
              "doc": ""
            }
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.event"
      ],
      "package": "tools.aqua.bgw.event",
      "path": "example\\htmlPartial\\tools.aqua.bgw.event\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "class AnimationFinishedEvent : Event",
          "doc": "",
          "tags": {
            "modifiers": [],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "AnimationFinishedEvent",
            "doc": "Gets raised when an Animation finished.",
            "link": "tools.aqua.bgw.event/AnimationFinishedEvent"
          },
          {
            "name": "DragEvent",
            "doc": "[Event](tools.aqua.bgw.event/Event) that gets raised for drag gestures.",
            "link": "tools.aqua.bgw.event/DragEvent"
          },
          {
            "name": "DropEvent",
            "doc": "[Event](tools.aqua.bgw.event/Event) that gets raised for drop gestures.",
            "link": "tools.aqua.bgw.event/DropEvent"
          },
          {
            "name": "Event",
            "doc": "[Event](tools.aqua.bgw.event/Event) baseclass.",
            "link": "tools.aqua.bgw.event/Event"
          },
          {
            "name": "InputEvent",
            "doc": "[InputEvent](tools.aqua.bgw.event/InputEvent) baseclass.",
            "link": "tools.aqua.bgw.event/InputEvent"
          },
          {
            "name": "KeyCode",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for available key codes.",
            "link": "tools.aqua.bgw.event/KeyCode"
          },
          {
            "name": "KeyEvent",
            "doc": "Event that gets raised for key inputs.",
            "link": "tools.aqua.bgw.event/KeyEvent"
          },
          {
            "name": "MouseButtonType",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) for all available mouse button clicks.",
            "link": "tools.aqua.bgw.event/MouseButtonType"
          },
          {
            "name": "MouseEvent",
            "doc": "Event that gets raised for mouse inputs.",
            "link": "tools.aqua.bgw.event/MouseEvent"
          },
          {
            "name": "WheelDirection",
            "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) indicating direction of a WheelEvent.",
            "link": "tools.aqua.bgw.event/WheelDirection"
          },
          {
            "name": "WheelEvent",
            "doc": "Event that gets raised for mouse wheel inputs.",
            "link": "tools.aqua.bgw.event/WheelEvent"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.io": {
    "BufferedImage": {
      "getSubimage": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.io",
          "BufferedImage",
          "getSubimage"
        ],
        "package": "tools.aqua.bgw.io.BufferedImage.getSubimage",
        "path": "example\\htmlPartial\\tools.aqua.bgw.io\\-buffered-image\\get-subimage.html",
        "details": [
          {
            "info": {
              "name": "getSubimage",
              "signature": "abstract fun getSubimage(offsetX: Int, offsetY: Int, subWidth: Int, subHeight: Int): BufferedImage",
              "doc": ""
            }
          }
        ]
      },
      "height": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.io",
          "BufferedImage",
          "height"
        ],
        "package": "tools.aqua.bgw.io.BufferedImage.height",
        "path": "example\\htmlPartial\\tools.aqua.bgw.io\\-buffered-image\\height.html",
        "details": [
          {
            "info": {
              "name": "height",
              "signature": "abstract val height: Int",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.io",
          "BufferedImage"
        ],
        "package": "tools.aqua.bgw.io.BufferedImage",
        "path": "example\\htmlPartial\\tools.aqua.bgw.io\\-buffered-image\\index.html",
        "details": {
          "info": {
            "name": "BufferedImage",
            "signature": "interface BufferedImage",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "abstract val height: Int",
              "modifier": "val",
              "name": "height",
              "link": "tools.aqua.bgw.io/BufferedImage/height",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "abstract val width: Int",
              "modifier": "val",
              "name": "width",
              "link": "tools.aqua.bgw.io/BufferedImage/width",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "abstract fun getSubimage(offsetX: Int, offsetY: Int, subWidth: Int, subHeight: Int): BufferedImage",
              "name": "getSubimage",
              "parameters": [
                {
                  "modifier": "",
                  "name": "offsetX",
                  "link": "tools.aqua.bgw.io/BufferedImage/getSubimage",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "link": "tools.aqua.bgw.io/BufferedImage/getSubimage",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "subWidth",
                  "link": "tools.aqua.bgw.io/BufferedImage/getSubimage",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "subHeight",
                  "link": "tools.aqua.bgw.io/BufferedImage/getSubimage",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.io/BufferedImage/getSubimage",
              "returnType": "[BufferedImage](tools.aqua.bgw.io/BufferedImage)",
              "doc": "",
              "isSuspend": false
            }
          ]
        }
      },
      "width": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.io",
          "BufferedImage",
          "width"
        ],
        "package": "tools.aqua.bgw.io.BufferedImage.width",
        "path": "example\\htmlPartial\\tools.aqua.bgw.io\\-buffered-image\\width.html",
        "details": [
          {
            "info": {
              "name": "width",
              "signature": "abstract val width: Int",
              "doc": ""
            }
          }
        ]
      }
    },
    "File": {
      "absolutePath": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.io",
          "File",
          "absolutePath"
        ],
        "package": "tools.aqua.bgw.io.File.absolutePath",
        "path": "example\\htmlPartial\\tools.aqua.bgw.io\\-file\\absolute-path.html",
        "details": [
          {
            "info": {
              "name": "absolutePath",
              "signature": "abstract val absolutePath: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.io",
          "File"
        ],
        "package": "tools.aqua.bgw.io.File",
        "path": "example\\htmlPartial\\tools.aqua.bgw.io\\-file\\index.html",
        "details": {
          "info": {
            "name": "File",
            "signature": "interface File",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "abstract val absolutePath: String",
              "modifier": "val",
              "name": "absolutePath",
              "link": "tools.aqua.bgw.io/File/absolutePath",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.io"
      ],
      "package": "tools.aqua.bgw.io",
      "path": "example\\htmlPartial\\tools.aqua.bgw.io\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "interface BufferedImage",
          "doc": "",
          "tags": {
            "modifiers": [],
            "type": "interface"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "BufferedImage",
            "doc": "",
            "link": "tools.aqua.bgw.io/BufferedImage"
          },
          {
            "name": "File",
            "doc": "",
            "link": "tools.aqua.bgw.io/File"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.observable": {
    "Observable": {
      "Observable": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable",
          "Observable"
        ],
        "package": "tools.aqua.bgw.observable.Observable.Observable",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\-observable.html",
        "details": [
          {
            "info": {
              "name": "Observable",
              "signature": "constructor()",
              "doc": "Empty constructor."
            }
          }
        ]
      },
      "addListenerAndInvoke": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable",
          "addListenerAndInvoke"
        ],
        "package": "tools.aqua.bgw.observable.Observable.addListenerAndInvoke",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\add-listener-and-invoke.html",
        "details": [
          {
            "info": {
              "name": "addListenerAndInvoke",
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke) and calls [Observer.update](tools.aqua.bgw.observable/Observer/update) on this new [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke)."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "Listener to add and notify."
              }
            ]
          }
        ]
      },
      "addListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable",
          "addListener"
        ],
        "package": "tools.aqua.bgw.observable.Observable.addListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\add-listener.html",
        "details": [
          {
            "info": {
              "name": "addListener",
              "signature": "fun addListener(listener: Observer)",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListener) silently."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "Listener to add"
              }
            ]
          }
        ]
      },
      "clearListeners": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable",
          "clearListeners"
        ],
        "package": "tools.aqua.bgw.observable.Observable.clearListeners",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\clear-listeners.html",
        "details": [
          {
            "info": {
              "name": "clearListeners",
              "signature": "fun clearListeners()",
              "doc": "Removes all listeners."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable"
        ],
        "package": "tools.aqua.bgw.observable.Observable",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\index.html",
        "details": {
          "info": {
            "name": "Observable",
            "signature": "abstract class Observable",
            "doc": "Basic observable.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "Filter",
              "link": "tools.aqua.bgw.style/Filter"
            },
            {
              "name": "Style",
              "link": "tools.aqua.bgw.style/Style"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Empty constructor.",
              "isSecondaryConstructor": true
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/addListener",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/addListener",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListener) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/addListenerAndInvoke",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/addListenerAndInvoke",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke) and calls [Observer.update](tools.aqua.bgw.observable/Observer/update) on this new [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke).",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/Observable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "link": "tools.aqua.bgw.observable/Observable/notifyChange",
              "returnType": "Unit",
              "doc": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable/Observer/update)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/removeListener",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/removeListener",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/Observable/removeListener).",
              "isSuspend": false
            }
          ]
        }
      },
      "notifyChange": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable",
          "notifyChange"
        ],
        "package": "tools.aqua.bgw.observable.Observable.notifyChange",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\notify-change.html",
        "details": [
          {
            "info": {
              "name": "notifyChange",
              "signature": "fun notifyChange()",
              "doc": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable/Observer/update)."
            }
          }
        ]
      },
      "removeListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observable",
          "removeListener"
        ],
        "package": "tools.aqua.bgw.observable.Observable.removeListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observable\\remove-listener.html",
        "details": [
          {
            "info": {
              "name": "removeListener",
              "signature": "fun removeListener(listener: Observer): Boolean",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/Observable/removeListener)."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "Listener to remove."
              }
            ]
          }
        ]
      }
    },
    "Observer": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observer"
        ],
        "package": "tools.aqua.bgw.observable.Observer",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observer\\index.html",
        "details": {
          "info": {
            "name": "Observer",
            "signature": "fun interface Observer",
            "doc": "Observer interface for observable Properties.",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          }
        },
        "members": {
          "functions": [
            {
              "signature": "abstract fun update()",
              "name": "update",
              "link": "tools.aqua.bgw.observable/Observer/update",
              "returnType": "Unit",
              "doc": "Can be implemented to react on changes in the observed property."
            }
          ]
        }
      },
      "update": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "Observer",
          "update"
        ],
        "package": "tools.aqua.bgw.observable.Observer.update",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-observer\\update.html",
        "details": [
          {
            "info": {
              "name": "update",
              "signature": "abstract fun update()",
              "doc": "Can be implemented to react on changes in the observed property."
            }
          }
        ]
      }
    },
    "ValueObservable": {
      "ValueObservable": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable",
          "ValueObservable"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable.ValueObservable",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\-value-observable.html",
        "details": [
          {
            "info": {
              "name": "ValueObservable",
              "signature": "constructor()",
              "doc": "Empty constructor."
            }
          }
        ]
      },
      "addListenerAndInvoke": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable",
          "addListenerAndInvoke"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable.addListenerAndInvoke",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\add-listener-and-invoke.html",
        "details": [
          {
            "info": {
              "name": "addListenerAndInvoke",
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial value to notify."
              },
              {
                "name": "listener",
                "doc": "Listener to add and notify."
              }
            ]
          }
        ]
      },
      "addListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable",
          "addListener"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable.addListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\add-listener.html",
        "details": [
          {
            "info": {
              "name": "addListener",
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListener) silently."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "listener to add."
              }
            ]
          }
        ]
      },
      "clearListeners": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable",
          "clearListeners"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable.clearListeners",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\clear-listeners.html",
        "details": [
          {
            "info": {
              "name": "clearListeners",
              "signature": "fun clearListeners()",
              "doc": "Removes all listeners."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\index.html",
        "details": {
          "info": {
            "name": "ValueObservable",
            "signature": "abstract class ValueObservable<T>",
            "doc": "Basic observable with value.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ReadonlyObservableList",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList"
            },
            {
              "name": "ReadonlyProperty",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Empty constructor.",
              "isSecondaryConstructor": true
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[T](tools.aqua.bgw.observable/ValueObservable)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/addListener",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListener) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
                  "type": "[T](tools.aqua.bgw.observable/ValueObservable)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
                  "type": "([T](tools.aqua.bgw.observable/ValueObservable), [T](tools.aqua.bgw.observable/ValueObservable)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "[T](tools.aqua.bgw.observable/ValueObservable)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "[T](tools.aqua.bgw.observable/ValueObservable)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "([T](tools.aqua.bgw.observable/ValueObservable), [T](tools.aqua.bgw.observable/ValueObservable)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/once",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/once) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/once) with given initial value. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable/ValueObservable/once).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/removeListener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[T](tools.aqua.bgw.observable/ValueObservable)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/removeListener",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/ValueObservable/removeListener).",
              "isSuspend": false
            }
          ]
        }
      },
      "once": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable",
          "once"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable.once",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\once.html",
        "details": [
          {
            "info": {
              "name": "once",
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/once) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/once) with given initial value. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable/ValueObservable/once)."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial value to notify."
              },
              {
                "name": "expectedValue",
                "doc": "Expected value to notify."
              }
            ]
          }
        ]
      },
      "removeListener": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObservable",
          "removeListener"
        ],
        "package": "tools.aqua.bgw.observable.ValueObservable.removeListener",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observable\\remove-listener.html",
        "details": [
          {
            "info": {
              "name": "removeListener",
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/ValueObservable/removeListener)."
            },
            "parameters": [
              {
                "name": "listener",
                "doc": "listener to remove."
              }
            ]
          }
        ]
      }
    },
    "ValueObserver": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObserver"
        ],
        "package": "tools.aqua.bgw.observable.ValueObserver",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observer\\index.html",
        "details": {
          "info": {
            "name": "ValueObserver",
            "signature": "fun interface ValueObserver<T>",
            "doc": "Observer interface for observable properties with values.",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          }
        },
        "members": {
          "functions": [
            {
              "signature": "abstract fun update(oldValue: T, newValue: T)",
              "name": "update",
              "parameters": [
                {
                  "modifier": "",
                  "name": "oldValue",
                  "link": "tools.aqua.bgw.observable/ValueObserver/update",
                  "type": "[T](tools.aqua.bgw.observable/ValueObserver)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "newValue",
                  "link": "tools.aqua.bgw.observable/ValueObserver/update",
                  "type": "[T](tools.aqua.bgw.observable/ValueObserver)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObserver/update",
              "returnType": "Unit",
              "doc": "Can be implemented to react on changes to the observed property.",
              "isSuspend": false
            }
          ]
        }
      },
      "update": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable",
          "ValueObserver",
          "update"
        ],
        "package": "tools.aqua.bgw.observable.ValueObserver.update",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\-value-observer\\update.html",
        "details": [
          {
            "info": {
              "name": "update",
              "signature": "abstract fun update(oldValue: T, newValue: T)",
              "doc": "Can be implemented to react on changes to the observed property."
            },
            "parameters": [
              {
                "name": "oldValue",
                "doc": "Old value of property."
              },
              {
                "name": "newValue",
                "doc": "New value of property."
              }
            ]
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.observable"
      ],
      "package": "tools.aqua.bgw.observable",
      "path": "example\\htmlPartial\\tools.aqua.bgw.observable\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "abstract class Observable",
          "doc": "",
          "tags": {
            "modifiers": [
              "abstract"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "Observable",
            "doc": "Basic observable.",
            "link": "tools.aqua.bgw.observable/Observable"
          },
          {
            "name": "Observer",
            "doc": "[Observer](tools.aqua.bgw.observable/Observer) interface for observable Properties.",
            "link": "tools.aqua.bgw.observable/Observer"
          },
          {
            "name": "ValueObservable",
            "doc": "Basic observable with value.",
            "link": "tools.aqua.bgw.observable/ValueObservable"
          },
          {
            "name": "ValueObserver",
            "doc": "Observer interface for observable properties with values.",
            "link": "tools.aqua.bgw.observable/ValueObserver"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.observable.lists": {
    "ObservableArrayList": {
      "ObservableArrayList": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableArrayList",
          "ObservableArrayList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableArrayList.ObservableArrayList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-array-list\\-observable-array-list.html",
        "details": [
          {
            "info": {
              "name": "ObservableArrayList",
              "signature": "constructor(elements: Collection<T> = emptyList())",
              "doc": "Creates an [ObservableArrayList](tools.aqua.bgw.observable.lists/ObservableArrayList) with given initial elements."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Type of [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) elements."
              },
              {
                "name": "elements",
                "doc": "Initial elements in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableArrayList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableArrayList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-array-list\\index.html",
        "details": {
          "info": {
            "name": "ObservableArrayList",
            "signature": "open class ObservableArrayList<T>(elements: Collection<T> = emptyList()) : ObservableList<T>",
            "doc": "An observable [ArrayList](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-array-list/index.html).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Type of [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) elements."
            },
            {
              "name": "elements",
              "doc": "Initial elements in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(elements: Collection<T> = emptyList())",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "emptyList()",
                  "doc": "Initial elements in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
                }
              ],
              "doc": "Creates an [ObservableArrayList](tools.aqua.bgw.observable.lists/ObservableArrayList) with given initial elements.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "doc": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: T): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Appends the specified element to the end of this list.",
              "isSuspend": false
            },
            {
              "signature": "fun add(index: Int, element: T)",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
              "returnType": "Unit",
              "doc": "Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/clear",
              "returnType": "Unit",
              "doc": "Removes all elements from this list. The list will be empty after this call returns."
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
              "doc": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)?",
              "doc": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun remove(o: T): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/remove",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/remove",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes the first occurrence of the specified element from this list, if it is present.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "name": "removeAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes from this list all of its elements that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAt(index: Int): T",
              "name": "removeAt",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAt",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAt",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
              "doc": "Removes an element at the specified [index](tools.aqua.bgw.observable.lists/ObservableList/removeAt) from the list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFirst(): T",
              "name": "removeFirst",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeFirst",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
              "doc": "Removes the first element from this list and returns that removed element."
            },
            {
              "signature": "fun removeFirstOrNull(): T?",
              "name": "removeFirstOrNull",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeFirstOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)?",
              "doc": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "name": "removeIf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeIf",
                  "type": "([T](tools.aqua.bgw.observable.lists/ObservableArrayList)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeIf",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes all elements of this collection that satisfy the given predicate.",
              "isSuspend": false
            },
            {
              "signature": "fun removeLast(): T",
              "name": "removeLast",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeLast",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
              "doc": "Removes the last element from this list and returns that removed element."
            },
            {
              "signature": "fun removeLastOrNull(): T?",
              "name": "removeLastOrNull",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeLastOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)?",
              "doc": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeSilent(o: T): Boolean",
              "name": "removeSilent",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeSilent",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeSilent",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "removes [o](tools.aqua.bgw.observable.lists/ObservableList/removeSilent) from the [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "name": "retainAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/retainAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/retainAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Retains only the elements in this list that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(index: Int, element: T): T",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableArrayList)",
              "doc": "Replaces the element at the specified position in this list with the specified element.",
              "isSuspend": false
            },
            {
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "name": "setAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/setAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/setAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/sort",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-comparator/index.html)<in [T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/sort",
              "returnType": "Unit",
              "doc": "Sorts this list by given comparator.",
              "isSuspend": false
            },
            {
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "name": "subList",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fromIndex",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "toIndex",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableArrayList)>",
              "doc": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "ObservableLinkedList": {
      "ObservableLinkedList": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableLinkedList",
          "ObservableLinkedList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableLinkedList.ObservableLinkedList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-linked-list\\-observable-linked-list.html",
        "details": [
          {
            "info": {
              "name": "ObservableLinkedList",
              "signature": "constructor(elements: Collection<T> = emptyList())",
              "doc": "Creates an [ObservableLinkedList](tools.aqua.bgw.observable.lists/ObservableLinkedList) with given initial elements."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Type of [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) elements."
              },
              {
                "name": "elements",
                "doc": "Initial elements in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableLinkedList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableLinkedList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-linked-list\\index.html",
        "details": {
          "info": {
            "name": "ObservableLinkedList",
            "signature": "open class ObservableLinkedList<T>(elements: Collection<T> = emptyList()) : ObservableList<T>",
            "doc": "An observable LinkedList.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Type of [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) elements."
            },
            {
              "name": "elements",
              "doc": "Initial elements in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(elements: Collection<T> = emptyList())",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "emptyList()",
                  "doc": "Initial elements in this [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
                }
              ],
              "doc": "Creates an [ObservableLinkedList](tools.aqua.bgw.observable.lists/ObservableLinkedList) with given initial elements.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "doc": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: T): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Appends the specified element to the end of this list.",
              "isSuspend": false
            },
            {
              "signature": "fun add(index: Int, element: T)",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
              "returnType": "Unit",
              "doc": "Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/clear",
              "returnType": "Unit",
              "doc": "Removes all elements from this list. The list will be empty after this call returns."
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
              "doc": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)?",
              "doc": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun remove(o: T): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/remove",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/remove",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes the first occurrence of the specified element from this list, if it is present.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "name": "removeAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes from this list all of its elements that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAt(index: Int): T",
              "name": "removeAt",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAt",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAt",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
              "doc": "Removes an element at the specified [index](tools.aqua.bgw.observable.lists/ObservableList/removeAt) from the list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFirst(): T",
              "name": "removeFirst",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeFirst",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
              "doc": "Removes the first element from this list and returns that removed element."
            },
            {
              "signature": "fun removeFirstOrNull(): T?",
              "name": "removeFirstOrNull",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeFirstOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)?",
              "doc": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "name": "removeIf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeIf",
                  "type": "([T](tools.aqua.bgw.observable.lists/ObservableLinkedList)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeIf",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes all elements of this collection that satisfy the given predicate.",
              "isSuspend": false
            },
            {
              "signature": "fun removeLast(): T",
              "name": "removeLast",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeLast",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
              "doc": "Removes the last element from this list and returns that removed element."
            },
            {
              "signature": "fun removeLastOrNull(): T?",
              "name": "removeLastOrNull",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeLastOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)?",
              "doc": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeSilent(o: T): Boolean",
              "name": "removeSilent",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeSilent",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeSilent",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "removes [o](tools.aqua.bgw.observable.lists/ObservableList/removeSilent) from the [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "name": "retainAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/retainAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/retainAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Retains only the elements in this list that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(index: Int, element: T): T",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)",
              "doc": "Replaces the element at the specified position in this list with the specified element.",
              "isSuspend": false
            },
            {
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "name": "setAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/setAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/setAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/sort",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-comparator/index.html)<in [T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/sort",
              "returnType": "Unit",
              "doc": "Sorts this list by given comparator.",
              "isSuspend": false
            },
            {
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "name": "subList",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fromIndex",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "toIndex",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableLinkedList)>",
              "doc": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "ObservableList": {
      "ObservableList": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "ObservableList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.ObservableList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\-observable-list.html",
        "details": [
          {
            "info": {
              "name": "ObservableList",
              "signature": "constructor()",
              "doc": "Creates an [ObservableList](tools.aqua.bgw.observable.lists/ObservableList)."
            }
          }
        ]
      },
      "addAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "addAll"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.addAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\add-all.html",
        "details": [
          {
            "info": {
              "name": "addAll",
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "doc": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.\n\nThe behavior of this operation is undefined if the specified collection is modified while the operation is in progress (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty)."
            },
            "parameters": [
              {
                "name": "elements",
                "doc": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html) containing elements to be added to this list."
              }
            ],
            "throws": [
              {
                "name": "NullPointerException",
                "doc": "If the specified collection is null."
              }
            ]
          },
          {
            "info": {
              "name": "addAll",
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "doc": "Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator."
            },
            "parameters": [
              {
                "name": "index",
                "doc": "Index at which to insert the first element from the specified collection."
              },
              {
                "name": "elements",
                "doc": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html) containing elements to be added to this list."
              }
            ],
            "throws": [
              {
                "name": "IndexOutOfBoundsException",
                "doc": "If the index exceeds the list's bounds."
              }
            ]
          }
        ]
      },
      "add": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "add"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.add",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\add.html",
        "details": [
          {
            "info": {
              "name": "add",
              "signature": "fun add(element: T): Boolean",
              "doc": "Appends the specified element to the end of this list."
            },
            "parameters": [
              {
                "name": "element",
                "doc": "Element to be appended to this list."
              }
            ]
          },
          {
            "info": {
              "name": "add",
              "signature": "fun add(index: Int, element: T)",
              "doc": "Inserts the specified element at the specified position in this list.\n\nShifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices)."
            },
            "parameters": [
              {
                "name": "index",
                "doc": "Index at which the specified element is to be inserted."
              },
              {
                "name": "element",
                "doc": "Element to be inserted."
              }
            ],
            "throws": [
              {
                "name": "IndexOutOfBoundsException",
                "doc": "If the index exceeds the list's bounds."
              }
            ]
          }
        ]
      },
      "clear": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "clear"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.clear",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\clear.html",
        "details": [
          {
            "info": {
              "name": "clear",
              "signature": "fun clear()",
              "doc": "Removes all elements from this list. The list will be empty after this call returns."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\index.html",
        "details": {
          "info": {
            "name": "ObservableList",
            "signature": "abstract class ObservableList<T> : ReadonlyObservableList<T>",
            "doc": "An observable [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) implementation.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ObservableArrayList",
              "link": "tools.aqua.bgw.observable.lists/ObservableArrayList"
            },
            {
              "name": "ObservableLinkedList",
              "link": "tools.aqua.bgw.observable.lists/ObservableLinkedList"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Creates an [ObservableList](tools.aqua.bgw.observable.lists/ObservableList).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "doc": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: T): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Appends the specified element to the end of this list.",
              "isSuspend": false
            },
            {
              "signature": "fun add(index: Int, element: T)",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/add",
              "returnType": "Unit",
              "doc": "Inserts the specified element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Appends all elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(index: Int, elements: Collection<T>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Inserts all elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
              "isSuspend": false
            },
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/clear",
              "returnType": "Unit",
              "doc": "Removes all elements from this list. The list will be empty after this call returns."
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
              "doc": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)?",
              "doc": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun remove(o: T): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/remove",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/remove",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes the first occurrence of the specified element from this list, if it is present.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "name": "removeAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes from this list all of its elements that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "fun removeAt(index: Int): T",
              "name": "removeAt",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAt",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeAt",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
              "doc": "Removes an element at the specified [index](tools.aqua.bgw.observable.lists/ObservableList/removeAt) from the list.",
              "isSuspend": false
            },
            {
              "signature": "fun removeFirst(): T",
              "name": "removeFirst",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeFirst",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
              "doc": "Removes the first element from this list and returns that removed element."
            },
            {
              "signature": "fun removeFirstOrNull(): T?",
              "name": "removeFirstOrNull",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeFirstOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)?",
              "doc": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "name": "removeIf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeIf",
                  "type": "([T](tools.aqua.bgw.observable.lists/ObservableList)) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeIf",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes all elements of this collection that satisfy the given predicate.",
              "isSuspend": false
            },
            {
              "signature": "fun removeLast(): T",
              "name": "removeLast",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeLast",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
              "doc": "Removes the last element from this list and returns that removed element."
            },
            {
              "signature": "fun removeLastOrNull(): T?",
              "name": "removeLastOrNull",
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeLastOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)?",
              "doc": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeSilent(o: T): Boolean",
              "name": "removeSilent",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/removeSilent",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/removeSilent",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "removes [o](tools.aqua.bgw.observable.lists/ObservableList/removeSilent) from the [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "name": "retainAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/retainAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<*>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/retainAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Retains only the elements in this list that are contained in the specified collection.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(index: Int, element: T): T",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
                  "type": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/set",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ObservableList)",
              "doc": "Replaces the element at the specified position in this list with the specified element.",
              "isSuspend": false
            },
            {
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "name": "setAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/setAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/setAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/sort",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-comparator/index.html)<in [T](tools.aqua.bgw.observable.lists/ObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/sort",
              "returnType": "Unit",
              "doc": "Sorts this list by given comparator.",
              "isSuspend": false
            },
            {
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "name": "subList",
              "parameters": [
                {
                  "modifier": "",
                  "name": "fromIndex",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "toIndex",
                  "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ObservableList/subList",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ObservableList)>",
              "doc": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)",
              "isSuspend": false
            }
          ]
        }
      },
      "removeAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeAll"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-all.html",
        "details": [
          {
            "info": {
              "name": "removeAll",
              "signature": "fun removeAll(elements: Collection<*>): Boolean",
              "doc": "Removes from this list all of its elements that are contained in the specified collection."
            },
            "seeAlso": [
              {
                "name": "Collection.contains",
                "link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/contains.html"
              }
            ],
            "parameters": [
              {
                "name": "elements",
                "doc": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html) containing elements to be removed from this list."
              }
            ],
            "throws": [
              {
                "name": "ClassCastException",
                "doc": "If the class of an element of this list is incompatible with the specified collection."
              },
              {
                "name": "NullPointerException",
                "doc": "If this list contains a null element and the specified collection does not permit null elements."
              }
            ]
          }
        ]
      },
      "removeAt": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeAt"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeAt",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-at.html",
        "details": [
          {
            "info": {
              "name": "removeAt",
              "signature": "fun removeAt(index: Int): T",
              "doc": "Removes an element at the specified [index](tools.aqua.bgw.observable.lists/ObservableList/removeAt) from the list."
            },
            "throws": [
              {
                "name": "IndexOutOfBoundsException",
                "doc": "If the index exceeds the list's bounds."
              }
            ]
          }
        ]
      },
      "removeFirstOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeFirstOrNull"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeFirstOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-first-or-null.html",
        "details": [
          {
            "info": {
              "name": "removeFirstOrNull",
              "signature": "fun removeFirstOrNull(): T?",
              "doc": "Removes the first element from this list and returns that removed element, or returns null if this list is empty."
            }
          }
        ]
      },
      "removeFirst": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeFirst"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeFirst",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-first.html",
        "details": [
          {
            "info": {
              "name": "removeFirst",
              "signature": "fun removeFirst(): T",
              "doc": "Removes the first element from this list and returns that removed element."
            },
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "If the list was empty."
              }
            ]
          }
        ]
      },
      "removeIf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeIf"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeIf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-if.html",
        "details": [
          {
            "info": {
              "name": "removeIf",
              "signature": "fun removeIf(filter: (T) -> Boolean): Boolean",
              "doc": "Removes all elements of this collection that satisfy the given predicate.\n\nErrors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller."
            },
            "parameters": [
              {
                "name": "filter",
                "doc": "A predicate which returns true for elements to be removed."
              }
            ],
            "throws": [
              {
                "name": "NullPointerException",
                "doc": "If the specified filter is null"
              }
            ]
          }
        ]
      },
      "removeLastOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeLastOrNull"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeLastOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-last-or-null.html",
        "details": [
          {
            "info": {
              "name": "removeLastOrNull",
              "signature": "fun removeLastOrNull(): T?",
              "doc": "Removes the last element from this list and returns that removed element, or returns null if this list is empty."
            }
          }
        ]
      },
      "removeLast": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeLast"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeLast",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-last.html",
        "details": [
          {
            "info": {
              "name": "removeLast",
              "signature": "fun removeLast(): T",
              "doc": "Removes the last element from this list and returns that removed element."
            },
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "If the list was empty."
              }
            ]
          }
        ]
      },
      "removeSilent": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "removeSilent"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.removeSilent",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove-silent.html",
        "details": [
          {
            "info": {
              "name": "removeSilent",
              "signature": "fun removeSilent(o: T): Boolean",
              "doc": "removes [o](tools.aqua.bgw.observable.lists/ObservableList/removeSilent) from the [ObservableList](tools.aqua.bgw.observable.lists/ObservableList) silently."
            },
            "parameters": [
              {
                "name": "o",
                "doc": "Element to be removed from this list, if present."
              }
            ]
          }
        ]
      },
      "remove": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "remove"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.remove",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\remove.html",
        "details": [
          {
            "info": {
              "name": "remove",
              "signature": "fun remove(o: T): Boolean",
              "doc": "Removes the first occurrence of the specified element from this list, if it is present.\n\nIf the list does not contain the element, it is unchanged.\n\nMore formally, removes the element with the lowest index i such that Objects.equals(o, get(i)) (if such an element exists).\n\nReturns true if this list contained the specified element (or equivalently, if this list changed as a result of the call)."
            },
            "parameters": [
              {
                "name": "o",
                "doc": "Element to be removed from this list, if present."
              }
            ]
          }
        ]
      },
      "retainAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "retainAll"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.retainAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\retain-all.html",
        "details": [
          {
            "info": {
              "name": "retainAll",
              "signature": "fun retainAll(elements: Collection<*>): Boolean",
              "doc": "Retains only the elements in this list that are contained in the specified collection.\n\nIn other words, removes from this list all of its elements that are not contained in the specified collection."
            },
            "seeAlso": [
              {
                "name": "Collection.contains",
                "link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/contains.html"
              }
            ],
            "parameters": [
              {
                "name": "elements",
                "doc": "Collection containing elements to be retained in this list."
              }
            ],
            "throws": [
              {
                "name": "ClassCastException",
                "doc": "If the class of an element of this list is incompatible with the specified collection."
              },
              {
                "name": "NullPointerException",
                "doc": "If this list contains a null element and the specified collection does not permit null elements."
              }
            ]
          }
        ]
      },
      "setAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "setAll"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.setAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\set-all.html",
        "details": [
          {
            "info": {
              "name": "setAll",
              "signature": "fun setAll(elements: Collection<T>): Boolean",
              "doc": "Sets all elements in the specified collection as the new contents of this list, in the order that they are returned by the specified collection's Iterator. Clears all items currently in this list.\n\nThe behavior of this operation is undefined if the specified collection is modified while the operation is in progress (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty)."
            },
            "parameters": [
              {
                "name": "elements",
                "doc": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html) containing elements to be set as new contents of this list."
              }
            ],
            "throws": [
              {
                "name": "NullPointerException",
                "doc": "If the specified collection is null."
              }
            ]
          }
        ]
      },
      "set": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "set"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.set",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\set.html",
        "details": [
          {
            "info": {
              "name": "set",
              "signature": "operator fun set(index: Int, element: T): T",
              "doc": "Replaces the element at the specified position in this list with the specified element."
            },
            "parameters": [
              {
                "name": "index",
                "doc": "Index of the element to replace."
              },
              {
                "name": "element",
                "doc": "Element to be stored at the specified position."
              }
            ],
            "throws": [
              {
                "name": "IndexOutOfBoundsException",
                "doc": "If the index exceeds the list's bounds."
              }
            ]
          }
        ]
      },
      "sort": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "sort"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.sort",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\sort.html",
        "details": [
          {
            "info": {
              "name": "sort",
              "signature": "fun sort(comparator: Comparator<in T>)",
              "doc": "Sorts this list by given comparator."
            },
            "parameters": [
              {
                "name": "comparator",
                "doc": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-comparator/index.html) to be applied. If the elements contained in this list implement the comparable interface, pass null."
              }
            ]
          }
        ]
      },
      "subList": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ObservableList",
          "subList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ObservableList.subList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-observable-list\\sub-list.html",
        "details": [
          {
            "info": {
              "name": "subList",
              "signature": "fun subList(fromIndex: Int, toIndex: Int): List<T>",
              "doc": "Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)\n\nThe returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n\nThe returned list supports all optional list operations.\n\nThis method eliminates the need for explicit range operations (of the sort that commonly exist for arrays).\n\nAny operation that expects a list can be used as a range operation by passing a subList view instead of a whole list.\n\nFor example, the following idiom removes a range of elements from a list:"
            },
            "throws": [
              {
                "name": "IndexOutOfBoundsException",
                "doc": "If any index exceeds the list's bounds."
              },
              {
                "name": "IllegalArgumentException",
                "doc": "If the endpoint indices are out of order (fromIndex toIndex)."
              }
            ]
          }
        ]
      }
    },
    "ReadonlyObservableList": {
      "ReadonlyObservableList": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "ReadonlyObservableList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.ReadonlyObservableList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\-readonly-observable-list.html",
        "details": [
          {
            "info": {
              "name": "ReadonlyObservableList",
              "signature": "constructor()",
              "doc": "Creates an [ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)."
            }
          }
        ]
      },
      "contains": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "contains"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.contains",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\contains.html",
        "details": [
          {
            "info": {
              "name": "contains",
              "signature": "operator fun contains(o: Any?): Boolean",
              "doc": "Returns true if this list contains the specified element.\n\nMore formally, returns true if and only if this list contains at least one element e such that Objects.equals(o, e)."
            },
            "parameters": [
              {
                "name": "o",
                "doc": "Element whose presence in this list is to be tested."
              }
            ]
          }
        ]
      },
      "getOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "getOrNull"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.getOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\get-or-null.html",
        "details": [
          {
            "info": {
              "name": "getOrNull",
              "signature": "fun getOrNull(index: Int): T?",
              "doc": "May return the element at the specified position in this list or null."
            },
            "parameters": [
              {
                "name": "index",
                "doc": "Index of the element to return."
              }
            ]
          }
        ]
      },
      "get": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "get"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.get",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\get.html",
        "details": [
          {
            "info": {
              "name": "get",
              "signature": "operator fun get(index: Int): T",
              "doc": "Returns the element at the specified position in this list."
            },
            "parameters": [
              {
                "name": "index",
                "doc": "Index of the element to return."
              }
            ],
            "throws": [
              {
                "name": "IndexOutOfBoundsException",
                "doc": "If the index exceeds the list's bounds."
              }
            ]
          }
        ]
      },
      "indexOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "indexOf"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.indexOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\index-of.html",
        "details": [
          {
            "info": {
              "name": "indexOf",
              "signature": "fun indexOf(o: Any?): Int",
              "doc": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.\n\nMore formally, returns the lowest index i such that Objects.equals(o, get(i)), or -1 if there is no such index."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\index.html",
        "details": {
          "info": {
            "name": "ReadonlyObservableList",
            "signature": "abstract class ReadonlyObservableList<T> : ValueObservable<List<T>> , Iterable<T>",
            "doc": "An observable [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) implementation.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ObservableList",
              "link": "tools.aqua.bgw.observable.lists/ObservableList"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Creates an [ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val indices: IntRange",
              "modifier": "val",
              "name": "indices",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/indices",
              "type": "[IntRange](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.ranges/-int-range/index.html)",
              "defaultValue": "",
              "doc": "All available indices of this list as IntRange i.e. 0..size()-1."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Returns the number of elements in this list."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<List<T>>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "operator fun contains(o: Any?): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/contains",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains the specified element.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(index: Int): T",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/get",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)",
              "doc": "Returns the element at the specified position in this list.",
              "isSuspend": false
            },
            {
              "signature": "fun getOrNull(index: Int): T?",
              "name": "getOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "index",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/getOrNull",
              "returnType": "[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)?",
              "doc": "May return the element at the specified position in this list or null.",
              "isSuspend": false
            },
            {
              "signature": "fun indexOf(o: Any?): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableListOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns true if this list contains elements."
            },
            {
              "signature": "fun lastIndexOf(o: Any?): Int",
              "name": "lastIndexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "o",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
                  "type": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)?",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList/lastIndexOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.",
              "isSuspend": false
            },
            {
              "signature": "fun once(initialValue: List<T>, expectedValue: List<T>, listener: (List<T>, List<T>) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "([List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>, [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) with given initial value. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<List<T>>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.observable.lists/ReadonlyObservableList)>>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.lists/ReadonlyObservableList).",
              "isSuspend": false
            }
          ]
        }
      },
      "indices": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "indices"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.indices",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\indices.html",
        "details": [
          {
            "info": {
              "name": "indices",
              "signature": "val indices: IntRange",
              "doc": "All available indices of this list as IntRange i.e. 0..size()-1."
            }
          }
        ]
      },
      "isEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "isEmpty"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.isEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\is-empty.html",
        "details": [
          {
            "info": {
              "name": "isEmpty",
              "signature": "fun isEmpty(): Boolean",
              "doc": "Returns true if this list contains no elements."
            }
          }
        ]
      },
      "isNotEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "isNotEmpty"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.isNotEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\is-not-empty.html",
        "details": [
          {
            "info": {
              "name": "isNotEmpty",
              "signature": "fun isNotEmpty(): Boolean",
              "doc": "Returns true if this list contains elements."
            }
          }
        ]
      },
      "iterator": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "iterator"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.iterator",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\iterator.html",
        "details": [
          {
            "info": {
              "name": "iterator",
              "signature": "open operator override fun iterator(): Iterator<T>",
              "doc": "Returns an [Iterator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-iterator/index.html) over the elements in this [ReadonlyObservableList](tools.aqua.bgw.observable.lists/ReadonlyObservableList)."
            }
          }
        ]
      },
      "lastIndexOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "lastIndexOf"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.lastIndexOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\last-index-of.html",
        "details": [
          {
            "info": {
              "name": "lastIndexOf",
              "signature": "fun lastIndexOf(o: Any?): Int",
              "doc": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.\n\nMore formally, returns the highest index i such that Objects.equals(o, get(i)), or -1 if there is no such index."
            }
          }
        ]
      },
      "size": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.lists",
          "ReadonlyObservableList",
          "size"
        ],
        "package": "tools.aqua.bgw.observable.lists.ReadonlyObservableList.size",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\-readonly-observable-list\\size.html",
        "details": [
          {
            "info": {
              "name": "size",
              "signature": "val size: Int",
              "doc": "Returns the number of elements in this list."
            }
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.observable.lists"
      ],
      "package": "tools.aqua.bgw.observable.lists",
      "path": "example\\htmlPartial\\tools.aqua.bgw.observable.lists\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class ObservableArrayList<T>(elements: Collection<T> = emptyList()) : ObservableList<T>",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "ObservableArrayList",
            "doc": "An observable ArrayList.",
            "link": "tools.aqua.bgw.observable.lists/ObservableArrayList"
          },
          {
            "name": "ObservableLinkedList",
            "doc": "An observable LinkedList.",
            "link": "tools.aqua.bgw.observable.lists/ObservableLinkedList"
          },
          {
            "name": "ObservableList",
            "doc": "An observable List implementation.",
            "link": "tools.aqua.bgw.observable.lists/ObservableList"
          },
          {
            "name": "ReadonlyObservableList",
            "doc": "An observable [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html) implementation.",
            "link": "tools.aqua.bgw.observable.lists/ReadonlyObservableList"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.observable.properties": {
    "BooleanProperty": {
      "BooleanProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "BooleanProperty",
          "BooleanProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.BooleanProperty.BooleanProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-boolean-property\\-boolean-property.html",
        "details": [
          {
            "info": {
              "name": "BooleanProperty",
              "signature": "constructor(initialValue: Boolean = false)",
              "doc": "Creates a [BooleanProperty](tools.aqua.bgw.observable.properties/BooleanProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: false."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "BooleanProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.BooleanProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-boolean-property\\index.html",
        "details": {
          "info": {
            "name": "BooleanProperty",
            "signature": "open class BooleanProperty(initialValue: Boolean = false) : Property<Boolean>",
            "doc": "A BooleanProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: false."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Boolean = false)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "Initial Value. Default: false."
                }
              ],
              "doc": "Creates a [BooleanProperty](tools.aqua.bgw.observable.properties/BooleanProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open override var value: Boolean",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/Property/value",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Boolean>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Boolean, expectedValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Boolean>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "DoubleProperty": {
      "DoubleProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "DoubleProperty",
          "DoubleProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.DoubleProperty.DoubleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-double-property\\-double-property.html",
        "details": [
          {
            "info": {
              "name": "DoubleProperty",
              "signature": "constructor(initialValue: Number = 0.0)",
              "doc": "Creates a [DoubleProperty](tools.aqua.bgw.observable.properties/DoubleProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: 0.0."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "DoubleProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.DoubleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-double-property\\index.html",
        "details": {
          "info": {
            "name": "DoubleProperty",
            "signature": "open class DoubleProperty(initialValue: Number = 0.0) : Property<Double>",
            "doc": "A DoubleProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: 0.0."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Number = 0.0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0.0",
                  "doc": "Initial Value. Default: 0.0."
                }
              ],
              "doc": "Creates a [DoubleProperty](tools.aqua.bgw.observable.properties/DoubleProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open override var value: Double",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/Property/value",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Double>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Double, listener: (Double, Double) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html), [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Double, expectedValue: Double, listener: (Double, Double) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html), [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Double>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "IntegerProperty": {
      "IntegerProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "IntegerProperty",
          "IntegerProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.IntegerProperty.IntegerProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-integer-property\\-integer-property.html",
        "details": [
          {
            "info": {
              "name": "IntegerProperty",
              "signature": "constructor(initialValue: Int = 0)",
              "doc": "Creates a [IntegerProperty](tools.aqua.bgw.observable.properties/IntegerProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: 0."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "IntegerProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.IntegerProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-integer-property\\index.html",
        "details": {
          "info": {
            "name": "IntegerProperty",
            "signature": "open class IntegerProperty(initialValue: Int = 0) : Property<Int>",
            "doc": "An IntegerProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: 0."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Int = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "doc": "Initial Value. Default: 0."
                }
              ],
              "doc": "Creates a [IntegerProperty](tools.aqua.bgw.observable.properties/IntegerProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open override var value: Int",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/Property/value",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Int>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Int, listener: (Int, Int) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html), [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Int, expectedValue: Int, listener: (Int, Int) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html), [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Int>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "LimitedDoubleProperty": {
      "LimitedDoubleProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "LimitedDoubleProperty",
          "LimitedDoubleProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.LimitedDoubleProperty.LimitedDoubleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-limited-double-property\\-limited-double-property.html",
        "details": [
          {
            "info": {
              "name": "LimitedDoubleProperty",
              "signature": "constructor(lowerBoundInclusive: Number = Double.NEGATIVE_INFINITY, upperBoundInclusive: Number = Double.POSITIVE_INFINITY, initialValue: Number = lowerBoundInclusive)",
              "doc": "Creates a [LimitedDoubleProperty](tools.aqua.bgw.observable.properties/LimitedDoubleProperty) with given bounds and initial value."
            },
            "parameters": [
              {
                "name": "lowerBoundInclusive",
                "doc": "Lower bound inclusive. Default: -inf."
              },
              {
                "name": "upperBoundInclusive",
                "doc": "Upper bound inclusive. Default: +inf."
              },
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: lowerBoundInclusive."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "LimitedDoubleProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.LimitedDoubleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-limited-double-property\\index.html",
        "details": {
          "info": {
            "name": "LimitedDoubleProperty",
            "signature": "open class LimitedDoubleProperty(lowerBoundInclusive: Number = Double.NEGATIVE_INFINITY, upperBoundInclusive: Number = Double.POSITIVE_INFINITY, initialValue: Number = lowerBoundInclusive) : Property<Double>",
            "doc": "A limited DoubleProperty to a value range. Value will be checked to be in range lowerBoundInclusive to upperBoundInclusive.\n\nTherefore upperBoundInclusive must be greater or equal to lowerBoundInclusive. The Range is constant and cannot be altered after object creation.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "lowerBoundInclusive",
              "doc": "Lower bound inclusive. Default: -inf."
            },
            {
              "name": "upperBoundInclusive",
              "doc": "Upper bound inclusive. Default: +inf."
            },
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: lowerBoundInclusive."
            }
          ],
          "throws": [
            {
              "name": "IllegalArgumentException",
              "doc": "If a value out of range is set as initialValue."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(lowerBoundInclusive: Number = Double.NEGATIVE_INFINITY, upperBoundInclusive: Number = Double.POSITIVE_INFINITY, initialValue: Number = lowerBoundInclusive)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "lowerBoundInclusive",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "Double.NEGATIVE_INFINITY",
                  "doc": "Lower bound inclusive. Default: -inf."
                },
                {
                  "modifier": "",
                  "name": "upperBoundInclusive",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "Double.POSITIVE_INFINITY",
                  "doc": "Upper bound inclusive. Default: +inf."
                },
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "lowerBoundInclusive",
                  "doc": "Initial Value. Default: lowerBoundInclusive."
                }
              ],
              "doc": "Creates a [LimitedDoubleProperty](tools.aqua.bgw.observable.properties/LimitedDoubleProperty) with given bounds and initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open override var value: Double",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/LimitedDoubleProperty/value",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Double>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Double, listener: (Double, Double) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html), [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Double, expectedValue: Double, listener: (Double, Double) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html), [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Double>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
              "isSuspend": false
            }
          ]
        }
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "LimitedDoubleProperty",
          "value"
        ],
        "package": "tools.aqua.bgw.observable.properties.LimitedDoubleProperty.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-limited-double-property\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "open override var value: Double",
              "doc": "Value of this property."
            }
          }
        ]
      }
    },
    "Property": {
      "Property": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "Property",
          "Property"
        ],
        "package": "tools.aqua.bgw.observable.properties.Property.Property",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-property\\-property.html",
        "details": [
          {
            "info": {
              "name": "Property",
              "signature": "constructor(initialValue: T)",
              "doc": "Creates a [Property](tools.aqua.bgw.observable.properties/Property) with given initial value."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Type of boxed data."
              },
              {
                "name": "initialValue",
                "doc": "Initial value of this property."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "Property"
        ],
        "package": "tools.aqua.bgw.observable.properties.Property",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-property\\index.html",
        "details": {
          "info": {
            "name": "Property",
            "signature": "open class Property<T>(initialValue: T) : ReadonlyProperty<T>",
            "doc": "Property baseclass providing observable fields.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "BooleanProperty",
              "link": "tools.aqua.bgw.observable.properties/BooleanProperty"
            },
            {
              "name": "DoubleProperty",
              "link": "tools.aqua.bgw.observable.properties/DoubleProperty"
            },
            {
              "name": "IntegerProperty",
              "link": "tools.aqua.bgw.observable.properties/IntegerProperty"
            },
            {
              "name": "LimitedDoubleProperty",
              "link": "tools.aqua.bgw.observable.properties/LimitedDoubleProperty"
            },
            {
              "name": "StringProperty",
              "link": "tools.aqua.bgw.observable.properties/StringProperty"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "Type of boxed data."
            },
            {
              "name": "initialValue",
              "doc": "Initial value of this property."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: T)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T](tools.aqua.bgw.observable.properties/Property)",
                  "defaultValue": "",
                  "doc": "Initial value of this property."
                }
              ],
              "doc": "Creates a [Property](tools.aqua.bgw.observable.properties/Property) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open override var value: T",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/Property/value",
              "type": "[T](tools.aqua.bgw.observable.properties/Property)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[T](tools.aqua.bgw.observable.properties/Property)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/addListener",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListener) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
                  "type": "[T](tools.aqua.bgw.observable.properties/Property)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
                  "type": "([T](tools.aqua.bgw.observable.properties/Property), [T](tools.aqua.bgw.observable.properties/Property)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "[T](tools.aqua.bgw.observable.properties/Property)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "[T](tools.aqua.bgw.observable.properties/Property)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "([T](tools.aqua.bgw.observable.properties/Property), [T](tools.aqua.bgw.observable.properties/Property)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/once",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/once) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/once) with given initial value. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable/ValueObservable/once).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/removeListener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[T](tools.aqua.bgw.observable.properties/Property)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/removeListener",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/ValueObservable/removeListener).",
              "isSuspend": false
            }
          ]
        }
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "Property",
          "value"
        ],
        "package": "tools.aqua.bgw.observable.properties.Property.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-property\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "open override var value: T",
              "doc": "Value of this property."
            }
          }
        ]
      }
    },
    "ReadonlyBooleanProperty": {
      "ReadonlyBooleanProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyBooleanProperty",
          "ReadonlyBooleanProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty.ReadonlyBooleanProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-boolean-property\\-readonly-boolean-property.html",
        "details": [
          {
            "info": {
              "name": "ReadonlyBooleanProperty",
              "signature": "constructor(initialValue: Boolean = false)",
              "doc": "Creates a [ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: false."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyBooleanProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyBooleanProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-boolean-property\\index.html",
        "details": {
          "info": {
            "name": "ReadonlyBooleanProperty",
            "signature": "open class ReadonlyBooleanProperty(initialValue: Boolean = false) : ReadonlyProperty<Boolean>",
            "doc": "A ReadonlyBooleanProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: false."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Boolean = false)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "false",
                  "doc": "Initial Value. Default: false."
                }
              ],
              "doc": "Creates a [ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open var value: Boolean",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/value",
              "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Boolean>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Boolean, expectedValue: Boolean, listener: (Boolean, Boolean) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "([Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html), [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Boolean>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "ReadonlyDoubleProperty": {
      "ReadonlyDoubleProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyDoubleProperty",
          "ReadonlyDoubleProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyDoubleProperty.ReadonlyDoubleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-double-property\\-readonly-double-property.html",
        "details": [
          {
            "info": {
              "name": "ReadonlyDoubleProperty",
              "signature": "constructor(initialValue: Number = 0.0)",
              "doc": "Creates a [ReadonlyDoubleProperty](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: 0.0."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyDoubleProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyDoubleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-double-property\\index.html",
        "details": {
          "info": {
            "name": "ReadonlyDoubleProperty",
            "signature": "open class ReadonlyDoubleProperty(initialValue: Number = 0.0) : ReadonlyProperty<Double>",
            "doc": "A ReadonlyDoubleProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: 0.0."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Number = 0.0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0.0",
                  "doc": "Initial Value. Default: 0.0."
                }
              ],
              "doc": "Creates a [ReadonlyDoubleProperty](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open var value: Double",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/value",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Double>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Double, listener: (Double, Double) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html), [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Double, expectedValue: Double, listener: (Double, Double) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "([Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html), [Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Double>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "ReadonlyIntegerProperty": {
      "ReadonlyIntegerProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyIntegerProperty",
          "ReadonlyIntegerProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyIntegerProperty.ReadonlyIntegerProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-integer-property\\-readonly-integer-property.html",
        "details": [
          {
            "info": {
              "name": "ReadonlyIntegerProperty",
              "signature": "constructor(initialValue: Int = 0)",
              "doc": "Creates a [ReadonlyIntegerProperty](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: 0."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyIntegerProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyIntegerProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-integer-property\\index.html",
        "details": {
          "info": {
            "name": "ReadonlyIntegerProperty",
            "signature": "open class ReadonlyIntegerProperty(initialValue: Int = 0) : ReadonlyProperty<Int>",
            "doc": "An ReadonlyIntegerProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: 0."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: Int = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "0",
                  "doc": "Initial Value. Default: 0."
                }
              ],
              "doc": "Creates a [ReadonlyIntegerProperty](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open var value: Int",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/value",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<Int>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: Int, listener: (Int, Int) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html), [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: Int, expectedValue: Int, listener: (Int, Int) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "([Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html), [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<Int>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "ReadonlyProperty": {
      "ReadonlyProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyProperty",
          "ReadonlyProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyProperty.ReadonlyProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-property\\-readonly-property.html",
        "details": [
          {
            "info": {
              "name": "ReadonlyProperty",
              "signature": "constructor(initialValue: T)",
              "doc": "Creates a [ReadonlyProperty](tools.aqua.bgw.observable.properties/ReadonlyProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Type of boxed data."
              },
              {
                "name": "initialValue",
                "doc": "Initial value of this property."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-property\\index.html",
        "details": {
          "info": {
            "name": "ReadonlyProperty",
            "signature": "open class ReadonlyProperty<T>(initialValue: T) : ValueObservable<T>",
            "doc": "Property baseclass providing observable fields.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "Property",
              "link": "tools.aqua.bgw.observable.properties/Property"
            },
            {
              "name": "ReadonlyBooleanProperty",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty"
            },
            {
              "name": "ReadonlyDoubleProperty",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty"
            },
            {
              "name": "ReadonlyIntegerProperty",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty"
            },
            {
              "name": "ReadonlyStringProperty",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyStringProperty"
            }
          ],
          "parameters": [
            {
              "name": "T",
              "doc": "Type of boxed data."
            },
            {
              "name": "initialValue",
              "doc": "Initial value of this property."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: T)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)",
                  "defaultValue": "",
                  "doc": "Initial value of this property."
                }
              ],
              "doc": "Creates a [ReadonlyProperty](tools.aqua.bgw.observable.properties/ReadonlyProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open var value: T",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/value",
              "type": "[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<T>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/addListener",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListener) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: T, listener: (T, T) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
                  "type": "[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
                  "type": "([T](tools.aqua.bgw.observable.properties/ReadonlyProperty), [T](tools.aqua.bgw.observable.properties/ReadonlyProperty)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/addListenerAndInvoke) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: T, expectedValue: T, listener: (T, T) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/once",
                  "type": "([T](tools.aqua.bgw.observable.properties/ReadonlyProperty), [T](tools.aqua.bgw.observable.properties/ReadonlyProperty)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/once",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/ValueObservable/once) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable/ValueObservable/once) with given initial value. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable/ValueObservable/once) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable/ValueObservable/once).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<T>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/ValueObservable/removeListener",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[T](tools.aqua.bgw.observable.properties/ReadonlyProperty)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/ValueObservable/removeListener",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/ValueObservable/removeListener).",
              "isSuspend": false
            }
          ]
        }
      },
      "notifyUnchanged": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyProperty",
          "notifyUnchanged"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyProperty.notifyUnchanged",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-property\\notify-unchanged.html",
        "details": [
          {
            "info": {
              "name": "notifyUnchanged",
              "signature": "fun notifyUnchanged()",
              "doc": "Notifies all listeners with current value."
            }
          }
        ]
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyProperty",
          "value"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyProperty.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-property\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "open var value: T",
              "doc": "Value of this property."
            }
          }
        ]
      }
    },
    "ReadonlyStringProperty": {
      "ReadonlyStringProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyStringProperty",
          "ReadonlyStringProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyStringProperty.ReadonlyStringProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-string-property\\-readonly-string-property.html",
        "details": [
          {
            "info": {
              "name": "ReadonlyStringProperty",
              "signature": "constructor(initialValue: String = \"\")",
              "doc": "Creates a [ReadonlyStringProperty](tools.aqua.bgw.observable.properties/ReadonlyStringProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: Empty string."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "ReadonlyStringProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.ReadonlyStringProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-readonly-string-property\\index.html",
        "details": {
          "info": {
            "name": "ReadonlyStringProperty",
            "signature": "open class ReadonlyStringProperty(initialValue: String = \"\") : ReadonlyProperty<String>",
            "doc": "A ReadonlyStringProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: Empty string."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: String = \"\")",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Initial Value. Default: Empty string."
                }
              ],
              "doc": "Creates a [ReadonlyStringProperty](tools.aqua.bgw.observable.properties/ReadonlyStringProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open var value: String",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<String>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/StringProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: String, listener: (String, String) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html), [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/StringProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/StringProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: String, expectedValue: String, listener: (String, String) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html), [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/StringProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/StringProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/StringProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/StringProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/StringProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<String>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/StringProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "StringProperty": {
      "StringProperty": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "StringProperty",
          "StringProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.StringProperty.StringProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-string-property\\-string-property.html",
        "details": [
          {
            "info": {
              "name": "StringProperty",
              "signature": "constructor(initialValue: String = \"\")",
              "doc": "Creates a [StringProperty](tools.aqua.bgw.observable.properties/StringProperty) with given initial value."
            },
            "parameters": [
              {
                "name": "initialValue",
                "doc": "Initial Value. Default: Empty string."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.observable.properties",
          "StringProperty"
        ],
        "package": "tools.aqua.bgw.observable.properties.StringProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\-string-property\\index.html",
        "details": {
          "info": {
            "name": "StringProperty",
            "signature": "open class StringProperty(initialValue: String = \"\") : Property<String>",
            "doc": "A StringProperty.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "initialValue",
              "doc": "Initial Value. Default: Empty string."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(initialValue: String = \"\")",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "\"\"",
                  "doc": "Initial Value. Default: Empty string."
                }
              ],
              "doc": "Creates a [StringProperty](tools.aqua.bgw.observable.properties/StringProperty) with given initial value.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "open override var value: String",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.observable.properties/Property/value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Value of this property."
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: ValueObserver<String>)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/StringProperty) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(initialValue: String, listener: (String, String) -> Unit)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html), [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/StringProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/StringProperty) with given initial value.",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/ValueObservable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun notifyUnchanged()",
              "name": "notifyUnchanged",
              "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty/notifyUnchanged",
              "returnType": "Unit",
              "doc": "Notifies all listeners with current value."
            },
            {
              "signature": "fun once(initialValue: String, expectedValue: String, listener: (String, String) -> Unit)",
              "name": "once",
              "parameters": [
                {
                  "modifier": "",
                  "name": "initialValue",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "expectedValue",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "([String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html), [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-unit/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable.properties/StringProperty) and calls [ValueObserver.update](tools.aqua.bgw.observable/ValueObserver/update) on this new [listener](tools.aqua.bgw.observable.properties/StringProperty) with given initial value. The [listener](tools.aqua.bgw.observable.properties/StringProperty) will be removed after the first notification. This is useful for one-time listeners. The [listener](tools.aqua.bgw.observable.properties/StringProperty) will only be called if the new value equals [expectedValue](tools.aqua.bgw.observable.properties/StringProperty).",
              "isSuspend": false
            },
            {
              "signature": "fun removeListener(listener: ValueObserver<String>): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable.properties/StringProperty",
                  "type": "[ValueObserver](tools.aqua.bgw.observable/ValueObserver)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable.properties/StringProperty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable.properties/StringProperty).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.observable.properties"
      ],
      "package": "tools.aqua.bgw.observable.properties",
      "path": "example\\htmlPartial\\tools.aqua.bgw.observable.properties\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class BooleanProperty(initialValue: Boolean = false) : Property<Boolean>",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "BooleanProperty",
            "doc": "A [BooleanProperty](tools.aqua.bgw.observable.properties/BooleanProperty).",
            "link": "tools.aqua.bgw.observable.properties/BooleanProperty"
          },
          {
            "name": "DoubleProperty",
            "doc": "A [DoubleProperty](tools.aqua.bgw.observable.properties/DoubleProperty).",
            "link": "tools.aqua.bgw.observable.properties/DoubleProperty"
          },
          {
            "name": "IntegerProperty",
            "doc": "An [IntegerProperty](tools.aqua.bgw.observable.properties/IntegerProperty).",
            "link": "tools.aqua.bgw.observable.properties/IntegerProperty"
          },
          {
            "name": "LimitedDoubleProperty",
            "doc": "A limited DoubleProperty to a value range. Value will be checked to be in range lowerBoundInclusive to upperBoundInclusive.",
            "link": "tools.aqua.bgw.observable.properties/LimitedDoubleProperty"
          },
          {
            "name": "Property",
            "doc": "[Property](tools.aqua.bgw.observable.properties/Property) baseclass providing observable fields.",
            "link": "tools.aqua.bgw.observable.properties/Property"
          },
          {
            "name": "ReadonlyBooleanProperty",
            "doc": "A [ReadonlyBooleanProperty](tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty).",
            "link": "tools.aqua.bgw.observable.properties/ReadonlyBooleanProperty"
          },
          {
            "name": "ReadonlyDoubleProperty",
            "doc": "A [ReadonlyDoubleProperty](tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty).",
            "link": "tools.aqua.bgw.observable.properties/ReadonlyDoubleProperty"
          },
          {
            "name": "ReadonlyIntegerProperty",
            "doc": "An [ReadonlyIntegerProperty](tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty).",
            "link": "tools.aqua.bgw.observable.properties/ReadonlyIntegerProperty"
          },
          {
            "name": "ReadonlyProperty",
            "doc": "Property baseclass providing observable fields.",
            "link": "tools.aqua.bgw.observable.properties/ReadonlyProperty"
          },
          {
            "name": "ReadonlyStringProperty",
            "doc": "A [ReadonlyStringProperty](tools.aqua.bgw.observable.properties/ReadonlyStringProperty).",
            "link": "tools.aqua.bgw.observable.properties/ReadonlyStringProperty"
          },
          {
            "name": "StringProperty",
            "doc": "A [StringProperty](tools.aqua.bgw.observable.properties/StringProperty).",
            "link": "tools.aqua.bgw.observable.properties/StringProperty"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.style": {
    "BackgroundRadius": {
      "BackgroundRadius": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BackgroundRadius",
          "BackgroundRadius"
        ],
        "package": "tools.aqua.bgw.style.BackgroundRadius.BackgroundRadius",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-background-radius\\-background-radius.html",
        "details": [
          {
            "info": {
              "name": "BackgroundRadius",
              "signature": "constructor()",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BackgroundRadius"
        ],
        "package": "tools.aqua.bgw.style.BackgroundRadius",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-background-radius\\index.html",
        "details": {
          "info": {
            "name": "BackgroundRadius",
            "signature": "class BackgroundRadius : StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          },
          "deprecated": {
            "description": "Use BorderRadius instead",
            "replaceWith": "BorderRadius"
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "functions": []
        }
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BackgroundRadius",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.BackgroundRadius.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-background-radius\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "open override fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "BlurFilter": {
      "BlurFilter": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BlurFilter",
          "BlurFilter"
        ],
        "package": "tools.aqua.bgw.style.BlurFilter.BlurFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\-blur-filter.html",
        "details": [
          {
            "info": {
              "name": "BlurFilter",
              "signature": "constructor(radius: Double)",
              "doc": ""
            }
          }
        ]
      },
      "Companion": {
        "LARGE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BlurFilter",
            "Companion",
            "LARGE"
          ],
          "package": "tools.aqua.bgw.style.BlurFilter.Companion.LARGE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\-companion\\-l-a-r-g-e.html",
          "details": [
            {
              "info": {
                "name": "LARGE",
                "signature": "val LARGE: BlurFilter",
                "doc": ""
              }
            }
          ]
        },
        "MEDIUM": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BlurFilter",
            "Companion",
            "MEDIUM"
          ],
          "package": "tools.aqua.bgw.style.BlurFilter.Companion.MEDIUM",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\-companion\\-m-e-d-i-u-m.html",
          "details": [
            {
              "info": {
                "name": "MEDIUM",
                "signature": "val MEDIUM: BlurFilter",
                "doc": ""
              }
            }
          ]
        },
        "NONE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BlurFilter",
            "Companion",
            "NONE"
          ],
          "package": "tools.aqua.bgw.style.BlurFilter.Companion.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\-companion\\-n-o-n-e.html",
          "details": [
            {
              "info": {
                "name": "NONE",
                "signature": "val NONE: BlurFilter",
                "doc": ""
              }
            }
          ]
        },
        "SMALL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BlurFilter",
            "Companion",
            "SMALL"
          ],
          "package": "tools.aqua.bgw.style.BlurFilter.Companion.SMALL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\-companion\\-s-m-a-l-l.html",
          "details": [
            {
              "info": {
                "name": "SMALL",
                "signature": "val SMALL: BlurFilter",
                "doc": ""
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BlurFilter",
            "Companion"
          ],
          "package": "tools.aqua.bgw.style.BlurFilter.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val LARGE: BlurFilter",
                "modifier": "val",
                "name": "LARGE",
                "link": "tools.aqua.bgw.style/BlurFilter/Companion/LARGE",
                "type": "[BlurFilter](tools.aqua.bgw.style/BlurFilter)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val MEDIUM: BlurFilter",
                "modifier": "val",
                "name": "MEDIUM",
                "link": "tools.aqua.bgw.style/BlurFilter/Companion/MEDIUM",
                "type": "[BlurFilter](tools.aqua.bgw.style/BlurFilter)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NONE: BlurFilter",
                "modifier": "val",
                "name": "NONE",
                "link": "tools.aqua.bgw.style/BlurFilter/Companion/NONE",
                "type": "[BlurFilter](tools.aqua.bgw.style/BlurFilter)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val SMALL: BlurFilter",
                "modifier": "val",
                "name": "SMALL",
                "link": "tools.aqua.bgw.style/BlurFilter/Companion/SMALL",
                "type": "[BlurFilter](tools.aqua.bgw.style/BlurFilter)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BlurFilter"
        ],
        "package": "tools.aqua.bgw.style.BlurFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\index.html",
        "details": {
          "info": {
            "name": "BlurFilter",
            "signature": "class BlurFilter(radius: Double) : FilterDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.style/BlurFilter/Companion"
            }
          ],
          "properties": [
            {
              "signature": "open override var value: String?",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.style/BlurFilter/value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": []
        }
      },
      "toFilter": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BlurFilter",
          "toFilter"
        ],
        "package": "tools.aqua.bgw.style.BlurFilter.toFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\to-filter.html",
        "details": [
          {
            "info": {
              "name": "toFilter",
              "signature": "open override fun toFilter(): String?",
              "doc": ""
            }
          }
        ]
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BlurFilter",
          "value"
        ],
        "package": "tools.aqua.bgw.style.BlurFilter.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-blur-filter\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "open override var value: String?",
              "doc": ""
            }
          }
        ]
      }
    },
    "BorderColor": {
      "BorderColor": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderColor",
          "BorderColor"
        ],
        "package": "tools.aqua.bgw.style.BorderColor.BorderColor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-color\\-border-color.html",
        "details": [
          {
            "info": {
              "name": "BorderColor",
              "signature": "constructor()",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderColor"
        ],
        "package": "tools.aqua.bgw.style.BorderColor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-color\\index.html",
        "details": {
          "info": {
            "name": "BorderColor",
            "signature": "class BorderColor : StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "functions": []
        }
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderColor",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.BorderColor.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-color\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "open override fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "BorderRadius": {
      "BorderRadius": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius",
          "BorderRadius"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius.BorderRadius",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-border-radius.html",
        "details": [
          {
            "info": {
              "name": "BorderRadius",
              "signature": "constructor(radius: Number)",
              "doc": ""
            }
          }
        ]
      },
      "Companion": {
        "FULL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "FULL"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.FULL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-f-u-l-l.html",
          "details": [
            {
              "info": {
                "name": "FULL",
                "signature": "val FULL: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "LARGE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "LARGE"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.LARGE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-l-a-r-g-e.html",
          "details": [
            {
              "info": {
                "name": "LARGE",
                "signature": "val LARGE: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "MEDIUM": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "MEDIUM"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.MEDIUM",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-m-e-d-i-u-m.html",
          "details": [
            {
              "info": {
                "name": "MEDIUM",
                "signature": "val MEDIUM: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "NONE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "NONE"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-n-o-n-e.html",
          "details": [
            {
              "info": {
                "name": "NONE",
                "signature": "val NONE: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "SMALL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "SMALL"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.SMALL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-s-m-a-l-l.html",
          "details": [
            {
              "info": {
                "name": "SMALL",
                "signature": "val SMALL: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "XL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "XL"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.XL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-x-l.html",
          "details": [
            {
              "info": {
                "name": "XL",
                "signature": "val XL: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "XS": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "XS"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.XS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-x-s.html",
          "details": [
            {
              "info": {
                "name": "XS",
                "signature": "val XS: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "XXL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "XXL"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.XXL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-x-x-l.html",
          "details": [
            {
              "info": {
                "name": "XXL",
                "signature": "val XXL: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "XXXL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion",
            "XXXL"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion.XXXL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\-x-x-x-l.html",
          "details": [
            {
              "info": {
                "name": "XXXL",
                "signature": "val XXXL: BorderRadius",
                "doc": ""
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "BorderRadius",
            "Companion"
          ],
          "package": "tools.aqua.bgw.style.BorderRadius.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val FULL: BorderRadius",
                "modifier": "val",
                "name": "FULL",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/FULL",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val LARGE: BorderRadius",
                "modifier": "val",
                "name": "LARGE",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/LARGE",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val MEDIUM: BorderRadius",
                "modifier": "val",
                "name": "MEDIUM",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/MEDIUM",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NONE: BorderRadius",
                "modifier": "val",
                "name": "NONE",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/NONE",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val SMALL: BorderRadius",
                "modifier": "val",
                "name": "SMALL",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/SMALL",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val XL: BorderRadius",
                "modifier": "val",
                "name": "XL",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/XL",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val XS: BorderRadius",
                "modifier": "val",
                "name": "XS",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/XS",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val XXL: BorderRadius",
                "modifier": "val",
                "name": "XXL",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/XXL",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val XXXL: BorderRadius",
                "modifier": "val",
                "name": "XXXL",
                "link": "tools.aqua.bgw.style/BorderRadius/Companion/XXXL",
                "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "bottomLeft": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius",
          "bottomLeft"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius.bottomLeft",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\bottom-left.html",
        "details": [
          {
            "info": {
              "name": "bottomLeft",
              "signature": "var bottomLeft: String",
              "doc": ""
            }
          }
        ]
      },
      "bottomRight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius",
          "bottomRight"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius.bottomRight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\bottom-right.html",
        "details": [
          {
            "info": {
              "name": "bottomRight",
              "signature": "var bottomRight: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\index.html",
        "details": {
          "info": {
            "name": "BorderRadius",
            "signature": "class BorderRadius : StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.style/BorderRadius/Companion"
            }
          ],
          "properties": [
            {
              "signature": "var bottomLeft: String",
              "modifier": "var",
              "name": "bottomLeft",
              "link": "tools.aqua.bgw.style/BorderRadius/bottomLeft",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "var bottomRight: String",
              "modifier": "var",
              "name": "bottomRight",
              "link": "tools.aqua.bgw.style/BorderRadius/bottomRight",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "var topLeft: String",
              "modifier": "var",
              "name": "topLeft",
              "link": "tools.aqua.bgw.style/BorderRadius/topLeft",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "var topRight: String",
              "modifier": "var",
              "name": "topRight",
              "link": "tools.aqua.bgw.style/BorderRadius/topRight",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": []
        }
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "open override fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      },
      "topLeft": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius",
          "topLeft"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius.topLeft",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\top-left.html",
        "details": [
          {
            "info": {
              "name": "topLeft",
              "signature": "var topLeft: String",
              "doc": ""
            }
          }
        ]
      },
      "topRight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderRadius",
          "topRight"
        ],
        "package": "tools.aqua.bgw.style.BorderRadius.topRight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-radius\\top-right.html",
        "details": [
          {
            "info": {
              "name": "topRight",
              "signature": "var topRight: String",
              "doc": ""
            }
          }
        ]
      }
    },
    "BorderStyle": {
      "BorderStyle": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderStyle",
          "BorderStyle"
        ],
        "package": "tools.aqua.bgw.style.BorderStyle.BorderStyle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-style\\-border-style.html",
        "details": [
          {
            "info": {
              "name": "BorderStyle",
              "signature": "constructor()",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderStyle"
        ],
        "package": "tools.aqua.bgw.style.BorderStyle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-style\\index.html",
        "details": {
          "info": {
            "name": "BorderStyle",
            "signature": "class BorderStyle : StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "functions": []
        }
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderStyle",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.BorderStyle.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-style\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "open override fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "BorderWidth": {
      "BorderWidth": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderWidth",
          "BorderWidth"
        ],
        "package": "tools.aqua.bgw.style.BorderWidth.BorderWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-width\\-border-width.html",
        "details": [
          {
            "info": {
              "name": "BorderWidth",
              "signature": "constructor()",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderWidth"
        ],
        "package": "tools.aqua.bgw.style.BorderWidth",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-width\\index.html",
        "details": {
          "info": {
            "name": "BorderWidth",
            "signature": "class BorderWidth : StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "functions": []
        }
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "BorderWidth",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.BorderWidth.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-border-width\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "open override fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "Cursor": {
      "Companion": {
        "ALIAS": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "ALIAS"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.ALIAS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-a-l-i-a-s.html",
          "details": [
            {
              "info": {
                "name": "ALIAS",
                "signature": "val ALIAS: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "ALL_SCROLL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "ALL_SCROLL"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.ALL_SCROLL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-a-l-l_-s-c-r-o-l-l.html",
          "details": [
            {
              "info": {
                "name": "ALL_SCROLL",
                "signature": "val ALL_SCROLL: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "CELL": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "CELL"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.CELL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-c-e-l-l.html",
          "details": [
            {
              "info": {
                "name": "CELL",
                "signature": "val CELL: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "COL_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "COL_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.COL_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-c-o-l_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "COL_RESIZE",
                "signature": "val COL_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "CONEXT_MENU": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "CONEXT_MENU"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.CONEXT_MENU",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-c-o-n-e-x-t_-m-e-n-u.html",
          "details": [
            {
              "info": {
                "name": "CONEXT_MENU",
                "signature": "val CONEXT_MENU: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "COPY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "COPY"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.COPY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-c-o-p-y.html",
          "details": [
            {
              "info": {
                "name": "COPY",
                "signature": "val COPY: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "CROSSHAIR": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "CROSSHAIR"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.CROSSHAIR",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-c-r-o-s-s-h-a-i-r.html",
          "details": [
            {
              "info": {
                "name": "CROSSHAIR",
                "signature": "val CROSSHAIR: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "DEFAULT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "DEFAULT"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.DEFAULT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-d-e-f-a-u-l-t.html",
          "details": [
            {
              "info": {
                "name": "DEFAULT",
                "signature": "val DEFAULT: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "EW_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "EW_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.EW_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-e-w_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "EW_RESIZE",
                "signature": "val EW_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "E_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "E_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.E_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-e_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "E_RESIZE",
                "signature": "val E_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "GRABBING": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "GRABBING"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.GRABBING",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-g-r-a-b-b-i-n-g.html",
          "details": [
            {
              "info": {
                "name": "GRABBING",
                "signature": "val GRABBING: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "GRAB": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "GRAB"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.GRAB",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-g-r-a-b.html",
          "details": [
            {
              "info": {
                "name": "GRAB",
                "signature": "val GRAB: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "HELP": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "HELP"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.HELP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-h-e-l-p.html",
          "details": [
            {
              "info": {
                "name": "HELP",
                "signature": "val HELP: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "MOVE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "MOVE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.MOVE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-m-o-v-e.html",
          "details": [
            {
              "info": {
                "name": "MOVE",
                "signature": "val MOVE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NESW_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NESW_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NESW_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-e-s-w_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "NESW_RESIZE",
                "signature": "val NESW_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NE_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NE_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NE_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-e_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "NE_RESIZE",
                "signature": "val NE_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NONE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NONE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-o-n-e.html",
          "details": [
            {
              "info": {
                "name": "NONE",
                "signature": "val NONE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NOT_ALLOWED": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NOT_ALLOWED"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NOT_ALLOWED",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-o-t_-a-l-l-o-w-e-d.html",
          "details": [
            {
              "info": {
                "name": "NOT_ALLOWED",
                "signature": "val NOT_ALLOWED: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NO_DROP": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NO_DROP"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NO_DROP",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-o_-d-r-o-p.html",
          "details": [
            {
              "info": {
                "name": "NO_DROP",
                "signature": "val NO_DROP: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NS_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NS_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NS_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-s_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "NS_RESIZE",
                "signature": "val NS_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NWSE_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NWSE_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NWSE_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-w-s-e_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "NWSE_RESIZE",
                "signature": "val NWSE_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "NW_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "NW_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.NW_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n-w_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "NW_RESIZE",
                "signature": "val NW_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "N_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "N_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.N_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-n_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "N_RESIZE",
                "signature": "val N_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "POINTER": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "POINTER"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.POINTER",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-p-o-i-n-t-e-r.html",
          "details": [
            {
              "info": {
                "name": "POINTER",
                "signature": "val POINTER: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "PROGRESS": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "PROGRESS"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.PROGRESS",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-p-r-o-g-r-e-s-s.html",
          "details": [
            {
              "info": {
                "name": "PROGRESS",
                "signature": "val PROGRESS: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "ROW_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "ROW_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.ROW_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-r-o-w_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "ROW_RESIZE",
                "signature": "val ROW_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "SE_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "SE_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.SE_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-s-e_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "SE_RESIZE",
                "signature": "val SE_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "SW_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "SW_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.SW_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-s-w_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "SW_RESIZE",
                "signature": "val SW_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "S_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "S_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.S_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-s_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "S_RESIZE",
                "signature": "val S_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "TEXT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "TEXT"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.TEXT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-t-e-x-t.html",
          "details": [
            {
              "info": {
                "name": "TEXT",
                "signature": "val TEXT: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "VERTICAL_TEXT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "VERTICAL_TEXT"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.VERTICAL_TEXT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-v-e-r-t-i-c-a-l_-t-e-x-t.html",
          "details": [
            {
              "info": {
                "name": "VERTICAL_TEXT",
                "signature": "val VERTICAL_TEXT: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "WAIT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "WAIT"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.WAIT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-w-a-i-t.html",
          "details": [
            {
              "info": {
                "name": "WAIT",
                "signature": "val WAIT: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "W_RESIZE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "W_RESIZE"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.W_RESIZE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-w_-r-e-s-i-z-e.html",
          "details": [
            {
              "info": {
                "name": "W_RESIZE",
                "signature": "val W_RESIZE: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "ZOOM_IN": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "ZOOM_IN"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.ZOOM_IN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-z-o-o-m_-i-n.html",
          "details": [
            {
              "info": {
                "name": "ZOOM_IN",
                "signature": "val ZOOM_IN: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "ZOOM_OUT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion",
            "ZOOM_OUT"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion.ZOOM_OUT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\-z-o-o-m_-o-u-t.html",
          "details": [
            {
              "info": {
                "name": "ZOOM_OUT",
                "signature": "val ZOOM_OUT: Cursor",
                "doc": ""
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Cursor",
            "Companion"
          ],
          "package": "tools.aqua.bgw.style.Cursor.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val ALIAS: Cursor",
                "modifier": "val",
                "name": "ALIAS",
                "link": "tools.aqua.bgw.style/Cursor/Companion/ALIAS",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ALL_SCROLL: Cursor",
                "modifier": "val",
                "name": "ALL_SCROLL",
                "link": "tools.aqua.bgw.style/Cursor/Companion/ALL_SCROLL",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val CELL: Cursor",
                "modifier": "val",
                "name": "CELL",
                "link": "tools.aqua.bgw.style/Cursor/Companion/CELL",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val COL_RESIZE: Cursor",
                "modifier": "val",
                "name": "COL_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/COL_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val CONEXT_MENU: Cursor",
                "modifier": "val",
                "name": "CONEXT_MENU",
                "link": "tools.aqua.bgw.style/Cursor/Companion/CONEXT_MENU",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val COPY: Cursor",
                "modifier": "val",
                "name": "COPY",
                "link": "tools.aqua.bgw.style/Cursor/Companion/COPY",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val CROSSHAIR: Cursor",
                "modifier": "val",
                "name": "CROSSHAIR",
                "link": "tools.aqua.bgw.style/Cursor/Companion/CROSSHAIR",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val DEFAULT: Cursor",
                "modifier": "val",
                "name": "DEFAULT",
                "link": "tools.aqua.bgw.style/Cursor/Companion/DEFAULT",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val E_RESIZE: Cursor",
                "modifier": "val",
                "name": "E_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/E_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val EW_RESIZE: Cursor",
                "modifier": "val",
                "name": "EW_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/EW_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val GRAB: Cursor",
                "modifier": "val",
                "name": "GRAB",
                "link": "tools.aqua.bgw.style/Cursor/Companion/GRAB",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val GRABBING: Cursor",
                "modifier": "val",
                "name": "GRABBING",
                "link": "tools.aqua.bgw.style/Cursor/Companion/GRABBING",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val HELP: Cursor",
                "modifier": "val",
                "name": "HELP",
                "link": "tools.aqua.bgw.style/Cursor/Companion/HELP",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val MOVE: Cursor",
                "modifier": "val",
                "name": "MOVE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/MOVE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val N_RESIZE: Cursor",
                "modifier": "val",
                "name": "N_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/N_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NE_RESIZE: Cursor",
                "modifier": "val",
                "name": "NE_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NE_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NESW_RESIZE: Cursor",
                "modifier": "val",
                "name": "NESW_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NESW_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NO_DROP: Cursor",
                "modifier": "val",
                "name": "NO_DROP",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NO_DROP",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NONE: Cursor",
                "modifier": "val",
                "name": "NONE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NONE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NOT_ALLOWED: Cursor",
                "modifier": "val",
                "name": "NOT_ALLOWED",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NOT_ALLOWED",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NS_RESIZE: Cursor",
                "modifier": "val",
                "name": "NS_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NS_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NW_RESIZE: Cursor",
                "modifier": "val",
                "name": "NW_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NW_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NWSE_RESIZE: Cursor",
                "modifier": "val",
                "name": "NWSE_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/NWSE_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val POINTER: Cursor",
                "modifier": "val",
                "name": "POINTER",
                "link": "tools.aqua.bgw.style/Cursor/Companion/POINTER",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val PROGRESS: Cursor",
                "modifier": "val",
                "name": "PROGRESS",
                "link": "tools.aqua.bgw.style/Cursor/Companion/PROGRESS",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ROW_RESIZE: Cursor",
                "modifier": "val",
                "name": "ROW_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/ROW_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val S_RESIZE: Cursor",
                "modifier": "val",
                "name": "S_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/S_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val SE_RESIZE: Cursor",
                "modifier": "val",
                "name": "SE_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/SE_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val SW_RESIZE: Cursor",
                "modifier": "val",
                "name": "SW_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/SW_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val TEXT: Cursor",
                "modifier": "val",
                "name": "TEXT",
                "link": "tools.aqua.bgw.style/Cursor/Companion/TEXT",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val VERTICAL_TEXT: Cursor",
                "modifier": "val",
                "name": "VERTICAL_TEXT",
                "link": "tools.aqua.bgw.style/Cursor/Companion/VERTICAL_TEXT",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val W_RESIZE: Cursor",
                "modifier": "val",
                "name": "W_RESIZE",
                "link": "tools.aqua.bgw.style/Cursor/Companion/W_RESIZE",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val WAIT: Cursor",
                "modifier": "val",
                "name": "WAIT",
                "link": "tools.aqua.bgw.style/Cursor/Companion/WAIT",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ZOOM_IN: Cursor",
                "modifier": "val",
                "name": "ZOOM_IN",
                "link": "tools.aqua.bgw.style/Cursor/Companion/ZOOM_IN",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ZOOM_OUT: Cursor",
                "modifier": "val",
                "name": "ZOOM_OUT",
                "link": "tools.aqua.bgw.style/Cursor/Companion/ZOOM_OUT",
                "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Cursor"
        ],
        "package": "tools.aqua.bgw.style.Cursor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\index.html",
        "details": {
          "info": {
            "name": "Cursor",
            "signature": "class Cursor : StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.style/Cursor/Companion"
            }
          ],
          "properties": [
            {
              "signature": "var name: String",
              "modifier": "var",
              "name": "name",
              "link": "tools.aqua.bgw.style/Cursor/name",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": []
        }
      },
      "name": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Cursor",
          "name"
        ],
        "package": "tools.aqua.bgw.style.Cursor.name",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\name.html",
        "details": [
          {
            "info": {
              "name": "name",
              "signature": "var name: String",
              "doc": ""
            }
          }
        ]
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Cursor",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.Cursor.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-cursor\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "open override fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "Filter": {
      "Filter": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter",
          "Filter"
        ],
        "package": "tools.aqua.bgw.style.Filter.Filter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\-filter.html",
        "details": [
          {
            "info": {
              "name": "Filter",
              "signature": "constructor()",
              "doc": ""
            }
          }
        ]
      },
      "applyDeclarations": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter",
          "applyDeclarations"
        ],
        "package": "tools.aqua.bgw.style.Filter.applyDeclarations",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\apply-declarations.html",
        "details": [
          {
            "info": {
              "name": "applyDeclarations",
              "signature": "fun applyDeclarations(filter: Filter)",
              "doc": ""
            }
          }
        ]
      },
      "blur": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter",
          "blur"
        ],
        "package": "tools.aqua.bgw.style.Filter.blur",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\blur.html",
        "details": [
          {
            "info": {
              "name": "blur",
              "signature": "var blur: BlurFilter",
              "doc": ""
            }
          }
        ]
      },
      "getDeclarations": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter",
          "getDeclarations"
        ],
        "package": "tools.aqua.bgw.style.Filter.getDeclarations",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\get-declarations.html",
        "details": [
          {
            "info": {
              "name": "getDeclarations",
              "signature": "fun getDeclarations(): Map<String, String?>",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter"
        ],
        "package": "tools.aqua.bgw.style.Filter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\index.html",
        "details": {
          "info": {
            "name": "Filter",
            "signature": "class Filter : Observable",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var blur: BlurFilter",
              "modifier": "var",
              "name": "blur",
              "link": "tools.aqua.bgw.style/Filter/blur",
              "type": "[BlurFilter](tools.aqua.bgw.style/BlurFilter)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "var saturation: SaturationFilter",
              "modifier": "var",
              "name": "saturation",
              "link": "tools.aqua.bgw.style/Filter/saturation",
              "type": "[SaturationFilter](tools.aqua.bgw.style/SaturationFilter)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "var sepia: SepiaFilter",
              "modifier": "var",
              "name": "sepia",
              "link": "tools.aqua.bgw.style/Filter/sepia",
              "type": "[SepiaFilter](tools.aqua.bgw.style/SepiaFilter)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/addListener",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/addListener",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListener) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/addListenerAndInvoke",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/addListenerAndInvoke",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke) and calls [Observer.update](tools.aqua.bgw.observable/Observer/update) on this new [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke).",
              "isSuspend": false
            },
            {
              "signature": "fun applyDeclarations(filter: Filter)",
              "name": "applyDeclarations",
              "parameters": [
                {
                  "modifier": "",
                  "name": "filter",
                  "link": "tools.aqua.bgw.style/Filter/applyDeclarations",
                  "type": "[Filter](tools.aqua.bgw.style/Filter)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.style/Filter/applyDeclarations",
              "returnType": "Unit",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/Observable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun getDeclarations(): Map<String, String?>",
              "name": "getDeclarations",
              "link": "tools.aqua.bgw.style/Filter/getDeclarations",
              "returnType": "[Map](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-map/index.html)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html), [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?>",
              "doc": ""
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "link": "tools.aqua.bgw.observable/Observable/notifyChange",
              "returnType": "Unit",
              "doc": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable/Observer/update)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/removeListener",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/removeListener",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/Observable/removeListener).",
              "isSuspend": false
            }
          ]
        }
      },
      "saturation": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter",
          "saturation"
        ],
        "package": "tools.aqua.bgw.style.Filter.saturation",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\saturation.html",
        "details": [
          {
            "info": {
              "name": "saturation",
              "signature": "var saturation: SaturationFilter",
              "doc": ""
            }
          }
        ]
      },
      "sepia": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Filter",
          "sepia"
        ],
        "package": "tools.aqua.bgw.style.Filter.sepia",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter\\sepia.html",
        "details": [
          {
            "info": {
              "name": "sepia",
              "signature": "var sepia: SepiaFilter",
              "doc": ""
            }
          }
        ]
      }
    },
    "FilterDeclaration": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "FilterDeclaration"
        ],
        "package": "tools.aqua.bgw.style.FilterDeclaration",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter-declaration\\index.html",
        "details": {
          "info": {
            "name": "FilterDeclaration",
            "signature": "interface FilterDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          },
          "inheritors": [
            {
              "name": "BlurFilter",
              "link": "tools.aqua.bgw.style/BlurFilter"
            },
            {
              "name": "SaturationFilter",
              "link": "tools.aqua.bgw.style/SaturationFilter"
            },
            {
              "name": "SepiaFilter",
              "link": "tools.aqua.bgw.style/SepiaFilter"
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "abstract var value: String?",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.style/FilterDeclaration/value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "abstract fun toFilter(): String?",
              "name": "toFilter",
              "link": "tools.aqua.bgw.style/FilterDeclaration/toFilter",
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "doc": ""
            }
          ]
        }
      },
      "toFilter": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "FilterDeclaration",
          "toFilter"
        ],
        "package": "tools.aqua.bgw.style.FilterDeclaration.toFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter-declaration\\to-filter.html",
        "details": [
          {
            "info": {
              "name": "toFilter",
              "signature": "abstract fun toFilter(): String?",
              "doc": ""
            }
          }
        ]
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "FilterDeclaration",
          "value"
        ],
        "package": "tools.aqua.bgw.style.FilterDeclaration.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-filter-declaration\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "abstract var value: String?",
              "doc": ""
            }
          }
        ]
      }
    },
    "Flip": {
      "BOTH": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Flip",
            "BOTH"
          ],
          "package": "tools.aqua.bgw.style.Flip.BOTH",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\-b-o-t-h\\index.html",
          "details": {
            "info": {
              "name": "BOTH",
              "signature": "BOTH",
              "doc": "",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "HORIZONTAL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Flip",
            "HORIZONTAL"
          ],
          "package": "tools.aqua.bgw.style.Flip.HORIZONTAL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\-h-o-r-i-z-o-n-t-a-l\\index.html",
          "details": {
            "info": {
              "name": "HORIZONTAL",
              "signature": "HORIZONTAL",
              "doc": "",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "NONE": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Flip",
            "NONE"
          ],
          "package": "tools.aqua.bgw.style.Flip.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\-n-o-n-e\\index.html",
          "details": {
            "info": {
              "name": "NONE",
              "signature": "NONE",
              "doc": "",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "VERTICAL": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "Flip",
            "VERTICAL"
          ],
          "package": "tools.aqua.bgw.style.Flip.VERTICAL",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\-v-e-r-t-i-c-a-l\\index.html",
          "details": {
            "info": {
              "name": "VERTICAL",
              "signature": "VERTICAL",
              "doc": "",
              "tags": {
                "modifiers": []
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Flip",
          "entries"
        ],
        "package": "tools.aqua.bgw.style.Flip.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: EnumEntries<Flip>",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Flip"
        ],
        "package": "tools.aqua.bgw.style.Flip",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\index.html",
        "details": {
          "info": {
            "name": "Flip",
            "signature": "enum Flip : Enum<Flip>",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "enum"
            }
          }
        },
        "members": {
          "properties": [
            {
              "signature": "val entries: EnumEntries<Flip>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.style/Flip/entries",
              "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[Flip](tools.aqua.bgw.style/Flip)>",
              "defaultValue": "",
              "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
            },
            {
              "signature": "val name: String",
              "modifier": "val",
              "name": "name",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val ordinal: Int",
              "modifier": "val",
              "name": "ordinal",
              "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun valueOf(value: String): Flip",
              "name": "valueOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.style/Flip/valueOf",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.style/Flip/valueOf",
              "returnType": "[Flip](tools.aqua.bgw.style/Flip)",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
              "isSuspend": false
            },
            {
              "signature": "fun values(): Array<Flip>",
              "name": "values",
              "link": "tools.aqua.bgw.style/Flip/values",
              "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[Flip](tools.aqua.bgw.style/Flip)>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
            }
          ]
        }
      },
      "valueOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Flip",
          "valueOf"
        ],
        "package": "tools.aqua.bgw.style.Flip.valueOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\value-of.html",
        "details": [
          {
            "info": {
              "name": "valueOf",
              "signature": "fun valueOf(value: String): Flip",
              "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "if this enum type has no constant with the specified name"
              }
            ]
          }
        ]
      },
      "values": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Flip",
          "values"
        ],
        "package": "tools.aqua.bgw.style.Flip.values",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-flip\\values.html",
        "details": [
          {
            "info": {
              "name": "values",
              "signature": "fun values(): Array<Flip>",
              "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
            }
          }
        ]
      }
    },
    "SaturationFilter": {
      "Companion": {
        "GREYSCALE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "SaturationFilter",
            "Companion",
            "GREYSCALE"
          ],
          "package": "tools.aqua.bgw.style.SaturationFilter.Companion.GREYSCALE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\-companion\\-g-r-e-y-s-c-a-l-e.html",
          "details": [
            {
              "info": {
                "name": "GREYSCALE",
                "signature": "val GREYSCALE: SaturationFilter",
                "doc": ""
              }
            }
          ]
        },
        "NONE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "SaturationFilter",
            "Companion",
            "NONE"
          ],
          "package": "tools.aqua.bgw.style.SaturationFilter.Companion.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\-companion\\-n-o-n-e.html",
          "details": [
            {
              "info": {
                "name": "NONE",
                "signature": "val NONE: SaturationFilter",
                "doc": ""
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "SaturationFilter",
            "Companion"
          ],
          "package": "tools.aqua.bgw.style.SaturationFilter.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val GREYSCALE: SaturationFilter",
                "modifier": "val",
                "name": "GREYSCALE",
                "link": "tools.aqua.bgw.style/SaturationFilter/Companion/GREYSCALE",
                "type": "[SaturationFilter](tools.aqua.bgw.style/SaturationFilter)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val NONE: SaturationFilter",
                "modifier": "val",
                "name": "NONE",
                "link": "tools.aqua.bgw.style/SaturationFilter/Companion/NONE",
                "type": "[SaturationFilter](tools.aqua.bgw.style/SaturationFilter)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "SaturationFilter": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SaturationFilter",
          "SaturationFilter"
        ],
        "package": "tools.aqua.bgw.style.SaturationFilter.SaturationFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\-saturation-filter.html",
        "details": [
          {
            "info": {
              "name": "SaturationFilter",
              "signature": "constructor(saturation: Double)",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SaturationFilter"
        ],
        "package": "tools.aqua.bgw.style.SaturationFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\index.html",
        "details": {
          "info": {
            "name": "SaturationFilter",
            "signature": "class SaturationFilter(saturation: Double) : FilterDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.style/SaturationFilter/Companion"
            }
          ],
          "properties": [
            {
              "signature": "open override var value: String?",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.style/SaturationFilter/value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": []
        }
      },
      "toFilter": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SaturationFilter",
          "toFilter"
        ],
        "package": "tools.aqua.bgw.style.SaturationFilter.toFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\to-filter.html",
        "details": [
          {
            "info": {
              "name": "toFilter",
              "signature": "open override fun toFilter(): String?",
              "doc": ""
            }
          }
        ]
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SaturationFilter",
          "value"
        ],
        "package": "tools.aqua.bgw.style.SaturationFilter.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-saturation-filter\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "open override var value: String?",
              "doc": ""
            }
          }
        ]
      }
    },
    "SepiaFilter": {
      "Companion": {
        "NONE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "SepiaFilter",
            "Companion",
            "NONE"
          ],
          "package": "tools.aqua.bgw.style.SepiaFilter.Companion.NONE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\-companion\\-n-o-n-e.html",
          "details": [
            {
              "info": {
                "name": "NONE",
                "signature": "val NONE: SepiaFilter",
                "doc": ""
              }
            }
          ]
        },
        "SEPIA": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "SepiaFilter",
            "Companion",
            "SEPIA"
          ],
          "package": "tools.aqua.bgw.style.SepiaFilter.Companion.SEPIA",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\-companion\\-s-e-p-i-a.html",
          "details": [
            {
              "info": {
                "name": "SEPIA",
                "signature": "val SEPIA: SepiaFilter",
                "doc": ""
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.style",
            "SepiaFilter",
            "Companion"
          ],
          "package": "tools.aqua.bgw.style.SepiaFilter.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val NONE: SepiaFilter",
                "modifier": "val",
                "name": "NONE",
                "link": "tools.aqua.bgw.style/SepiaFilter/Companion/NONE",
                "type": "[SepiaFilter](tools.aqua.bgw.style/SepiaFilter)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val SEPIA: SepiaFilter",
                "modifier": "val",
                "name": "SEPIA",
                "link": "tools.aqua.bgw.style/SepiaFilter/Companion/SEPIA",
                "type": "[SepiaFilter](tools.aqua.bgw.style/SepiaFilter)",
                "defaultValue": "",
                "doc": ""
              }
            ]
          }
        }
      },
      "SepiaFilter": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SepiaFilter",
          "SepiaFilter"
        ],
        "package": "tools.aqua.bgw.style.SepiaFilter.SepiaFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\-sepia-filter.html",
        "details": [
          {
            "info": {
              "name": "SepiaFilter",
              "signature": "constructor(sepia: Double)",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SepiaFilter"
        ],
        "package": "tools.aqua.bgw.style.SepiaFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\index.html",
        "details": {
          "info": {
            "name": "SepiaFilter",
            "signature": "class SepiaFilter(sepia: Double) : FilterDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.style/SepiaFilter/Companion"
            }
          ],
          "properties": [
            {
              "signature": "open override var value: String?",
              "modifier": "var",
              "name": "value",
              "link": "tools.aqua.bgw.style/SepiaFilter/value",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)?",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": []
        }
      },
      "toFilter": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SepiaFilter",
          "toFilter"
        ],
        "package": "tools.aqua.bgw.style.SepiaFilter.toFilter",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\to-filter.html",
        "details": [
          {
            "info": {
              "name": "toFilter",
              "signature": "open override fun toFilter(): String?",
              "doc": ""
            }
          }
        ]
      },
      "value": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "SepiaFilter",
          "value"
        ],
        "package": "tools.aqua.bgw.style.SepiaFilter.value",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-sepia-filter\\value.html",
        "details": [
          {
            "info": {
              "name": "value",
              "signature": "open override var value: String?",
              "doc": ""
            }
          }
        ]
      }
    },
    "Style": {
      "Style": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Style",
          "Style"
        ],
        "package": "tools.aqua.bgw.style.Style.Style",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style\\-style.html",
        "details": [
          {
            "info": {
              "name": "Style",
              "signature": "constructor()",
              "doc": ""
            }
          }
        ]
      },
      "applyDeclarations": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Style",
          "applyDeclarations"
        ],
        "package": "tools.aqua.bgw.style.Style.applyDeclarations",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style\\apply-declarations.html",
        "details": [
          {
            "info": {
              "name": "applyDeclarations",
              "signature": "fun applyDeclarations(style: Style)",
              "doc": ""
            }
          }
        ]
      },
      "borderRadius": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Style",
          "borderRadius"
        ],
        "package": "tools.aqua.bgw.style.Style.borderRadius",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style\\border-radius.html",
        "details": [
          {
            "info": {
              "name": "borderRadius",
              "signature": "var borderRadius: BorderRadius",
              "doc": ""
            }
          }
        ]
      },
      "cursor": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Style",
          "cursor"
        ],
        "package": "tools.aqua.bgw.style.Style.cursor",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style\\cursor.html",
        "details": [
          {
            "info": {
              "name": "cursor",
              "signature": "var cursor: Cursor",
              "doc": ""
            }
          }
        ]
      },
      "getDeclarations": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Style",
          "getDeclarations"
        ],
        "package": "tools.aqua.bgw.style.Style.getDeclarations",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style\\get-declarations.html",
        "details": [
          {
            "info": {
              "name": "getDeclarations",
              "signature": "fun getDeclarations(): Map<String, String>",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "Style"
        ],
        "package": "tools.aqua.bgw.style.Style",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style\\index.html",
        "details": {
          "info": {
            "name": "Style",
            "signature": "class Style : Observable",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var borderRadius: BorderRadius",
              "modifier": "var",
              "name": "borderRadius",
              "link": "tools.aqua.bgw.style/Style/borderRadius",
              "type": "[BorderRadius](tools.aqua.bgw.style/BorderRadius)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "var cursor: Cursor",
              "modifier": "var",
              "name": "cursor",
              "link": "tools.aqua.bgw.style/Style/cursor",
              "type": "[Cursor](tools.aqua.bgw.style/Cursor)",
              "defaultValue": "",
              "doc": ""
            }
          ],
          "functions": [
            {
              "signature": "fun addListener(listener: Observer)",
              "name": "addListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/addListener",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/addListener",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListener) silently.",
              "isSuspend": false
            },
            {
              "signature": "fun addListenerAndInvoke(listener: Observer)",
              "name": "addListenerAndInvoke",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/addListenerAndInvoke",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/addListenerAndInvoke",
              "returnType": "Unit",
              "doc": "Adds a [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke) and calls [Observer.update](tools.aqua.bgw.observable/Observer/update) on this new [listener](tools.aqua.bgw.observable/Observable/addListenerAndInvoke).",
              "isSuspend": false
            },
            {
              "signature": "fun applyDeclarations(style: Style)",
              "name": "applyDeclarations",
              "parameters": [
                {
                  "modifier": "",
                  "name": "style",
                  "link": "tools.aqua.bgw.style/Style/applyDeclarations",
                  "type": "[Style](tools.aqua.bgw.style/Style)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.style/Style/applyDeclarations",
              "returnType": "Unit",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun clearListeners()",
              "name": "clearListeners",
              "link": "tools.aqua.bgw.observable/Observable/clearListeners",
              "returnType": "Unit",
              "doc": "Removes all listeners."
            },
            {
              "signature": "fun getDeclarations(): Map<String, String>",
              "name": "getDeclarations",
              "link": "tools.aqua.bgw.style/Style/getDeclarations",
              "returnType": "[Map](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-map/index.html)<[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html), [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)>",
              "doc": ""
            },
            {
              "signature": "fun notifyChange()",
              "name": "notifyChange",
              "link": "tools.aqua.bgw.observable/Observable/notifyChange",
              "returnType": "Unit",
              "doc": "Notifies all listeners by calling [Observer.update](tools.aqua.bgw.observable/Observer/update)."
            },
            {
              "signature": "fun removeListener(listener: Observer): Boolean",
              "name": "removeListener",
              "parameters": [
                {
                  "modifier": "",
                  "name": "listener",
                  "link": "tools.aqua.bgw.observable/Observable/removeListener",
                  "type": "[Observer](tools.aqua.bgw.observable/Observer)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.observable/Observable/removeListener",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes a [listener](tools.aqua.bgw.observable/Observable/removeListener).",
              "isSuspend": false
            }
          ]
        }
      }
    },
    "StyleDeclaration": {
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "StyleDeclaration"
        ],
        "package": "tools.aqua.bgw.style.StyleDeclaration",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style-declaration\\index.html",
        "details": {
          "info": {
            "name": "StyleDeclaration",
            "signature": "interface StyleDeclaration",
            "doc": "",
            "tags": {
              "modifiers": [],
              "type": "interface"
            }
          },
          "inheritors": [
            {
              "name": "BorderRadius",
              "link": "tools.aqua.bgw.style/BorderRadius"
            },
            {
              "name": "BackgroundRadius",
              "link": "tools.aqua.bgw.style/BackgroundRadius"
            },
            {
              "name": "BorderWidth",
              "link": "tools.aqua.bgw.style/BorderWidth"
            },
            {
              "name": "BorderColor",
              "link": "tools.aqua.bgw.style/BorderColor"
            },
            {
              "name": "Cursor",
              "link": "tools.aqua.bgw.style/Cursor"
            },
            {
              "name": "BorderStyle",
              "link": "tools.aqua.bgw.style/BorderStyle"
            }
          ]
        },
        "members": {
          "functions": [
            {
              "signature": "abstract fun toCSS(): String",
              "name": "toCSS",
              "link": "tools.aqua.bgw.style/StyleDeclaration/toCSS",
              "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "doc": ""
            }
          ]
        }
      },
      "toCSS": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.style",
          "StyleDeclaration",
          "toCSS"
        ],
        "package": "tools.aqua.bgw.style.StyleDeclaration.toCSS",
        "path": "example\\htmlPartial\\tools.aqua.bgw.style\\-style-declaration\\to-c-s-s.html",
        "details": [
          {
            "info": {
              "name": "toCSS",
              "signature": "abstract fun toCSS(): String",
              "doc": ""
            }
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.style"
      ],
      "package": "tools.aqua.bgw.style",
      "path": "example\\htmlPartial\\tools.aqua.bgw.style\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "class BackgroundRadius : StyleDeclaration",
          "doc": "",
          "tags": {
            "modifiers": [],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "BackgroundRadius",
            "doc": "",
            "link": "tools.aqua.bgw.style/BackgroundRadius"
          },
          {
            "name": "BlurFilter",
            "doc": "",
            "link": "tools.aqua.bgw.style/BlurFilter"
          },
          {
            "name": "BorderColor",
            "doc": "",
            "link": "tools.aqua.bgw.style/BorderColor"
          },
          {
            "name": "BorderRadius",
            "doc": "",
            "link": "tools.aqua.bgw.style/BorderRadius"
          },
          {
            "name": "BorderStyle",
            "doc": "",
            "link": "tools.aqua.bgw.style/BorderStyle"
          },
          {
            "name": "BorderWidth",
            "doc": "",
            "link": "tools.aqua.bgw.style/BorderWidth"
          },
          {
            "name": "Cursor",
            "doc": "",
            "link": "tools.aqua.bgw.style/Cursor"
          },
          {
            "name": "Filter",
            "doc": "",
            "link": "tools.aqua.bgw.style/Filter"
          },
          {
            "name": "FilterDeclaration",
            "doc": "",
            "link": "tools.aqua.bgw.style/FilterDeclaration"
          },
          {
            "name": "Flip",
            "doc": "",
            "link": "tools.aqua.bgw.style/Flip"
          },
          {
            "name": "SaturationFilter",
            "doc": "",
            "link": "tools.aqua.bgw.style/SaturationFilter"
          },
          {
            "name": "SepiaFilter",
            "doc": "",
            "link": "tools.aqua.bgw.style/SepiaFilter"
          },
          {
            "name": "Style",
            "doc": "",
            "link": "tools.aqua.bgw.style/Style"
          },
          {
            "name": "StyleDeclaration",
            "doc": "",
            "link": "tools.aqua.bgw.style/StyleDeclaration"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.util": {
    "BidirectionalMap": {
      "BidirectionalMap": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "BidirectionalMap"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.BidirectionalMap",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\-bidirectional-map.html",
        "details": [
          {
            "info": {
              "name": "BidirectionalMap",
              "signature": "constructor(vararg elements: Pair<T, R>)",
              "doc": "Creates a map with the given set of elements mapping pair.first -> pair.second."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Type of domain elements."
              },
              {
                "name": "R",
                "doc": "Type of co-domain elements."
              },
              {
                "name": "elements",
                "doc": "Elements to be initialized in the map."
              }
            ]
          }
        ]
      },
      "addAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "addAll"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.addAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\add-all.html",
        "details": [
          {
            "info": {
              "name": "addAll",
              "signature": "fun addAll(vararg items: Pair<T, R>): Boolean",
              "doc": "Adds all relations A -> B. If any of the given items already exist, it gets ignored. If any item contains a key or value that already exists, the map remains unchanged.\n\nExample: Map: (A->B), (C->D)\n\naddAll(E->F),(G->H) results in (A->B), (C->D), (E->F),(G->H) : true\n\naddAll(A->B),(E->F) results in (A->B), (C->D), (E->F), : true\n\naddAll(A->C),(E->F) results in (A->B), (C->D) : false"
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.add",
                "link": "tools.aqua.bgw.util/BidirectionalMap/add"
              }
            ]
          }
        ]
      },
      "add": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "add"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.add",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\add.html",
        "details": [
          {
            "info": {
              "name": "add",
              "signature": "fun add(entity: T, value: R): Boolean",
              "doc": "Adds a relation A -> B if domain does not contain A and coDomain does not contain B. Returns false if the relation could not be added."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.addAll",
                "link": "tools.aqua.bgw.util/BidirectionalMap/addAll"
              }
            ]
          },
          {
            "info": {
              "name": "add",
              "signature": "fun add(element: Pair<T, R>): Boolean",
              "doc": "Adds a relation A -> B if domain does not contain A and coDomain does not contain B. Returns false if the relation could not be added."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.addAll",
                "link": "tools.aqua.bgw.util/BidirectionalMap/addAll"
              }
            ]
          }
        ]
      },
      "backwardOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "backwardOrNull"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.backwardOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\backward-or-null.html",
        "details": [
          {
            "info": {
              "name": "backwardOrNull",
              "signature": "fun backwardOrNull(value: R): T?",
              "doc": "Backward lookup for entry."
            },
            "parameters": [
              {
                "name": "value",
                "doc": "Relation value."
              }
            ]
          }
        ]
      },
      "backward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "backward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.backward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\backward.html",
        "details": [
          {
            "info": {
              "name": "backward",
              "signature": "fun backward(value: R): T",
              "doc": "Backward lookup for entry."
            },
            "parameters": [
              {
                "name": "value",
                "doc": "Relation value."
              }
            ],
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "Ff no such element is found."
              }
            ]
          }
        ]
      },
      "clear": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "clear"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.clear",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\clear.html",
        "details": [
          {
            "info": {
              "name": "clear",
              "signature": "fun clear()",
              "doc": "Clears the map."
            }
          }
        ]
      },
      "containsBackward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "containsBackward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.containsBackward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\contains-backward.html",
        "details": [
          {
            "info": {
              "name": "containsBackward",
              "signature": "fun containsBackward(value: R): Boolean",
              "doc": "Returns whether a relation * -> B exists."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.contains",
                "link": "tools.aqua.bgw.util/BidirectionalMap/contains"
              },
              {
                "name": "BidirectionalMap.containsForward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/containsForward"
              }
            ],
            "parameters": [
              {
                "name": "value",
                "doc": "Relation value B."
              }
            ]
          }
        ]
      },
      "containsForward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "containsForward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.containsForward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\contains-forward.html",
        "details": [
          {
            "info": {
              "name": "containsForward",
              "signature": "fun containsForward(entity: T): Boolean",
              "doc": "Returns whether a relation A -> * exists."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.contains",
                "link": "tools.aqua.bgw.util/BidirectionalMap/contains"
              },
              {
                "name": "BidirectionalMap.containsBackward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/containsBackward"
              }
            ],
            "parameters": [
              {
                "name": "entity",
                "doc": "Relation key A."
              }
            ]
          }
        ]
      },
      "contains": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "contains"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.contains",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\contains.html",
        "details": [
          {
            "info": {
              "name": "contains",
              "signature": "fun contains(entity: T, value: R): Boolean",
              "doc": "Returns whether relation A -> B exists in this map."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.containsForward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/containsForward"
              },
              {
                "name": "BidirectionalMap.containsBackward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/containsBackward"
              }
            ],
            "parameters": [
              {
                "name": "entity",
                "doc": "Relation key A."
              },
              {
                "name": "value",
                "doc": "Relation value B."
              }
            ]
          },
          {
            "info": {
              "name": "contains",
              "signature": "fun contains(pair: Pair<T, R>): Boolean",
              "doc": "Returns whether relation A -> B exists in this map."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.containsForward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/containsForward"
              },
              {
                "name": "BidirectionalMap.containsBackward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/containsBackward"
              }
            ],
            "parameters": [
              {
                "name": "pair",
                "doc": "Relation pair A -> B."
              }
            ]
          }
        ]
      },
      "entries": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "entries"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.entries",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\entries.html",
        "details": [
          {
            "info": {
              "name": "entries",
              "signature": "val entries: Set<Pair<T, R>>",
              "doc": "Represents the entries of this map as a set."
            }
          }
        ]
      },
      "forwardOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "forwardOrNull"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.forwardOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\forward-or-null.html",
        "details": [
          {
            "info": {
              "name": "forwardOrNull",
              "signature": "fun forwardOrNull(entity: T): R?",
              "doc": "Forward lookup for entry."
            },
            "parameters": [
              {
                "name": "entity",
                "doc": "Relation key."
              }
            ]
          }
        ]
      },
      "forward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "forward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.forward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\forward.html",
        "details": [
          {
            "info": {
              "name": "forward",
              "signature": "fun forward(entity: T): R",
              "doc": "Forward lookup for entry."
            },
            "parameters": [
              {
                "name": "entity",
                "doc": "Relation key."
              }
            ],
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "If no such element is found."
              }
            ]
          }
        ]
      },
      "getCoDomain": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "getCoDomain"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.getCoDomain",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\get-co-domain.html",
        "details": [
          {
            "info": {
              "name": "getCoDomain",
              "signature": "fun getCoDomain(): Set<R>",
              "doc": "Returns the coDomain of this map as a set."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.getDomain",
                "link": "tools.aqua.bgw.util/BidirectionalMap/getDomain"
              }
            ],
            "deprecated": {
              "description": "Use keysBackward instead",
              "replaceWith": "keysBackward"
            }
          }
        ]
      },
      "getDomain": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "getDomain"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.getDomain",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\get-domain.html",
        "details": [
          {
            "info": {
              "name": "getDomain",
              "signature": "fun getDomain(): Set<T>",
              "doc": "Returns the domain of this map as a set."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.getCoDomain",
                "link": "tools.aqua.bgw.util/BidirectionalMap/getCoDomain"
              }
            ],
            "deprecated": {
              "description": "Use keysForward instead",
              "replaceWith": "keysForward"
            }
          }
        ]
      },
      "get": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "get"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.get",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\get.html",
        "details": [
          {
            "info": {
              "name": "get",
              "signature": "operator fun get(it: T): Any",
              "doc": "Get the value for a given domain key."
            },
            "parameters": [
              {
                "name": "it",
                "doc": "Domain key."
              }
            ],
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "If no such element in the domain is found."
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\index.html",
        "details": {
          "info": {
            "name": "BidirectionalMap",
            "signature": "open class BidirectionalMap<T : Any, R : Any>(elements: Pair<T, R>)",
            "doc": "A bidirectional map. Each key-value-pair gets mapped in both directions. Keys and values must be unique in the sense that there must not be a duplicate key in the domain, nor a duplicate value in the coDomain, but the same element may appear once as key and once as value.\n\nExample:\n\nA -> B\n\nA -> C\n\nis invalid because A is contained twice in the Domain.\n\nA -> B\n\nC -> B\n\nis invalid because B is contained twice in the coDomain.\n\nA -> B\n\nC -> A\n\nis valid because A is only contained once in the domain and in the coDomain.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Type of domain elements."
            },
            {
              "name": "R",
              "doc": "Type of co-domain elements."
            },
            {
              "name": "elements",
              "doc": "Elements to be initialized in the map."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val entries: Set<Pair<T, R>>",
              "modifier": "val",
              "name": "entries",
              "link": "tools.aqua.bgw.util/BidirectionalMap/entries",
              "type": "[Set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-set/index.html)<[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>>",
              "defaultValue": "",
              "doc": "Represents the entries of this map as a set."
            },
            {
              "signature": "val keysBackward: Set<R>",
              "modifier": "val",
              "name": "keysBackward",
              "link": "tools.aqua.bgw.util/BidirectionalMap/keysBackward",
              "type": "[Set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-set/index.html)<[R](tools.aqua.bgw.util/BidirectionalMap)>",
              "defaultValue": "",
              "doc": "Represents the co-domain keys of this map as a set."
            },
            {
              "signature": "val keysForward: Set<T>",
              "modifier": "val",
              "name": "keysForward",
              "link": "tools.aqua.bgw.util/BidirectionalMap/keysForward",
              "type": "[Set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-set/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap)>",
              "defaultValue": "",
              "doc": "Represents the domain keys of this map as a set."
            },
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.util/BidirectionalMap/size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "The size of this map."
            }
          ],
          "functions": [
            {
              "signature": "fun add(element: Pair<T, R>): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/add",
                  "type": "[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/add",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun add(entity: T, value: R): Boolean",
              "name": "add",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/add",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/add",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/add",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Adds a relation A -> B if domain does not contain A and coDomain does not contain B. Returns false if the relation could not be added.",
              "isSuspend": false
            },
            {
              "signature": "fun addAll(vararg items: Pair<T, R>): Boolean",
              "name": "addAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "items",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/addAll",
                  "type": "[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/addAll",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Adds all relations A -> B. If any of the given items already exist, it gets ignored. If any item contains a key or value that already exists, the map remains unchanged.",
              "isSuspend": false
            },
            {
              "signature": "fun backward(value: R): T",
              "name": "backward",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/backward",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/backward",
              "returnType": "[T](tools.aqua.bgw.util/BidirectionalMap)",
              "doc": "Backward lookup for entry.",
              "isSuspend": false
            },
            {
              "signature": "fun backwardOrNull(value: R): T?",
              "name": "backwardOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/backwardOrNull",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/backwardOrNull",
              "returnType": "[T](tools.aqua.bgw.util/BidirectionalMap)?",
              "doc": "Backward lookup for entry.",
              "isSuspend": false
            },
            {
              "signature": "fun clear()",
              "name": "clear",
              "link": "tools.aqua.bgw.util/BidirectionalMap/clear",
              "returnType": "Unit",
              "doc": "Clears the map."
            },
            {
              "signature": "fun contains(pair: Pair<T, R>): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "pair",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/contains",
                  "type": "[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/contains",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun contains(entity: T, value: R): Boolean",
              "name": "contains",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/contains",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/contains",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/contains",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether relation A -> B exists in this map.",
              "isSuspend": false
            },
            {
              "signature": "fun containsBackward(value: R): Boolean",
              "name": "containsBackward",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/containsBackward",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/containsBackward",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether a relation * -> B exists.",
              "isSuspend": false
            },
            {
              "signature": "fun containsForward(entity: T): Boolean",
              "name": "containsForward",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/containsForward",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/containsForward",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether a relation A -> * exists.",
              "isSuspend": false
            },
            {
              "signature": "fun forward(entity: T): R",
              "name": "forward",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/forward",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/forward",
              "returnType": "[R](tools.aqua.bgw.util/BidirectionalMap)",
              "doc": "Forward lookup for entry.",
              "isSuspend": false
            },
            {
              "signature": "fun forwardOrNull(entity: T): R?",
              "name": "forwardOrNull",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/forwardOrNull",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/forwardOrNull",
              "returnType": "[R](tools.aqua.bgw.util/BidirectionalMap)?",
              "doc": "Forward lookup for entry.",
              "isSuspend": false
            },
            {
              "signature": "operator fun get(it: T): Any",
              "name": "get",
              "parameters": [
                {
                  "modifier": "",
                  "name": "it",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/get",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/get",
              "returnType": "[Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-any/index.html)",
              "doc": "Get the value for a given domain key.",
              "isSuspend": false
            },
            {
              "signature": "fun getCoDomain(): Set<R>",
              "name": "getCoDomain",
              "link": "tools.aqua.bgw.util/BidirectionalMap/getCoDomain",
              "returnType": "[Set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-set/index.html)<[R](tools.aqua.bgw.util/BidirectionalMap)>",
              "doc": "Returns the coDomain of this map as a set."
            },
            {
              "signature": "fun getDomain(): Set<T>",
              "name": "getDomain",
              "link": "tools.aqua.bgw.util/BidirectionalMap/getDomain",
              "returnType": "[Set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-set/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap)>",
              "doc": "Returns the domain of this map as a set."
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.util/BidirectionalMap/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether this map contains no elements."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.util/BidirectionalMap/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether this map contains elements."
            },
            {
              "signature": "fun put(key: T, value: R): Pair<Pair<T, R>?, Pair<T, R>?>",
              "name": "put",
              "parameters": [
                {
                  "modifier": "",
                  "name": "key",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/put",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/put",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/put",
              "returnType": "[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>?, [Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>?>",
              "doc": "Set the given co-domain value for a given domain key. Overwrites existing values in domain and co-domain.",
              "isSuspend": false
            },
            {
              "signature": "fun putAll(vararg items: Pair<T, R>)",
              "name": "putAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "items",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/putAll",
                  "type": "[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/putAll",
              "returnType": "Unit",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun putAll(bidirectionalMap: BidirectionalMap<T, R>)",
              "name": "putAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "bidirectionalMap",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/putAll",
                  "type": "[BidirectionalMap](tools.aqua.bgw.util/BidirectionalMap)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/putAll",
              "returnType": "Unit",
              "doc": "Set the given entries. Overwrites existing values in domain and co-domain.",
              "isSuspend": false
            },
            {
              "signature": "fun remove(element: Pair<T, R>): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/remove",
                  "type": "[Pair](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-pair/index.html)<[T](tools.aqua.bgw.util/BidirectionalMap), [R](tools.aqua.bgw.util/BidirectionalMap)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/remove",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "",
              "isSuspend": false
            },
            {
              "signature": "fun remove(entity: T, value: R): Boolean",
              "name": "remove",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/remove",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/remove",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/remove",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes relation A -> B if it exists.",
              "isSuspend": false
            },
            {
              "signature": "fun removeBackward(value: R): Boolean",
              "name": "removeBackward",
              "parameters": [
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/removeBackward",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/removeBackward",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes by backward lookup. Removes relation * -> B.",
              "isSuspend": false
            },
            {
              "signature": "fun removeForward(entity: T): Boolean",
              "name": "removeForward",
              "parameters": [
                {
                  "modifier": "",
                  "name": "entity",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/removeForward",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/removeForward",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Removes by forward lookup. Removes relation A -> * if it exists.",
              "isSuspend": false
            },
            {
              "signature": "operator fun set(it: T, value: R)",
              "name": "set",
              "parameters": [
                {
                  "modifier": "",
                  "name": "it",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/set",
                  "type": "[T](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "value",
                  "link": "tools.aqua.bgw.util/BidirectionalMap/set",
                  "type": "[R](tools.aqua.bgw.util/BidirectionalMap)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/BidirectionalMap/set",
              "returnType": "Unit",
              "doc": "Set the given co-domain value for a given domain key. Overwrites existing values in domain and co-domain.",
              "isSuspend": false
            }
          ]
        }
      },
      "isEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "isEmpty"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.isEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\is-empty.html",
        "details": [
          {
            "info": {
              "name": "isEmpty",
              "signature": "fun isEmpty(): Boolean",
              "doc": "Returns whether this map contains no elements."
            }
          }
        ]
      },
      "isNotEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "isNotEmpty"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.isNotEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\is-not-empty.html",
        "details": [
          {
            "info": {
              "name": "isNotEmpty",
              "signature": "fun isNotEmpty(): Boolean",
              "doc": "Returns whether this map contains elements."
            }
          }
        ]
      },
      "keysBackward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "keysBackward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.keysBackward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\keys-backward.html",
        "details": [
          {
            "info": {
              "name": "keysBackward",
              "signature": "val keysBackward: Set<R>",
              "doc": "Represents the co-domain keys of this map as a set."
            }
          }
        ]
      },
      "keysForward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "keysForward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.keysForward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\keys-forward.html",
        "details": [
          {
            "info": {
              "name": "keysForward",
              "signature": "val keysForward: Set<T>",
              "doc": "Represents the domain keys of this map as a set."
            }
          }
        ]
      },
      "putAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "putAll"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.putAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\put-all.html",
        "details": [
          {
            "info": {
              "name": "putAll",
              "signature": "fun putAll(vararg items: Pair<T, R>)",
              "doc": "Set the given entries. Overwrites existing values in domain and co-domain."
            },
            "parameters": [
              {
                "name": "items",
                "doc": "Entries to set."
              }
            ]
          },
          {
            "info": {
              "name": "putAll",
              "signature": "fun putAll(bidirectionalMap: BidirectionalMap<T, R>)",
              "doc": "Set the given entries. Overwrites existing values in domain and co-domain."
            },
            "parameters": [
              {
                "name": "bidirectionalMap",
                "doc": "Entries to set from another [BidirectionalMap](tools.aqua.bgw.util/BidirectionalMap)."
              }
            ]
          }
        ]
      },
      "put": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "put"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.put",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\put.html",
        "details": [
          {
            "info": {
              "name": "put",
              "signature": "fun put(key: T, value: R): Pair<Pair<T, R>?, Pair<T, R>?>",
              "doc": "Set the given co-domain value for a given domain key. Overwrites existing values in domain and co-domain."
            },
            "parameters": [
              {
                "name": "key",
                "doc": "Key (from the domain) to set the value for."
              },
              {
                "name": "value",
                "doc": "Value (from the co-domain) to set for given domain key."
              }
            ]
          }
        ]
      },
      "removeBackward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "removeBackward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.removeBackward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\remove-backward.html",
        "details": [
          {
            "info": {
              "name": "removeBackward",
              "signature": "fun removeBackward(value: R): Boolean",
              "doc": "Removes by backward lookup. Removes relation * -> B."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.remove",
                "link": "tools.aqua.bgw.util/BidirectionalMap/remove"
              },
              {
                "name": "BidirectionalMap.removeForward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/removeForward"
              }
            ],
            "parameters": [
              {
                "name": "value",
                "doc": "Relation value B."
              }
            ]
          }
        ]
      },
      "removeForward": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "removeForward"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.removeForward",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\remove-forward.html",
        "details": [
          {
            "info": {
              "name": "removeForward",
              "signature": "fun removeForward(entity: T): Boolean",
              "doc": "Removes by forward lookup. Removes relation A -> * if it exists."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.remove",
                "link": "tools.aqua.bgw.util/BidirectionalMap/remove"
              },
              {
                "name": "BidirectionalMap.removeBackward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/removeBackward"
              }
            ],
            "parameters": [
              {
                "name": "entity",
                "doc": "Relation key A."
              }
            ]
          }
        ]
      },
      "remove": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "remove"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.remove",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\remove.html",
        "details": [
          {
            "info": {
              "name": "remove",
              "signature": "fun remove(entity: T, value: R): Boolean",
              "doc": "Removes relation A -> B if it exists."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.removeForward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/removeForward"
              },
              {
                "name": "BidirectionalMap.removeBackward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/removeBackward"
              }
            ],
            "parameters": [
              {
                "name": "entity",
                "doc": "Relation key A."
              },
              {
                "name": "value",
                "doc": "Relation value B."
              }
            ]
          },
          {
            "info": {
              "name": "remove",
              "signature": "fun remove(element: Pair<T, R>): Boolean",
              "doc": "Removes relation A -> B if it exists."
            },
            "seeAlso": [
              {
                "name": "BidirectionalMap.removeForward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/removeForward"
              },
              {
                "name": "BidirectionalMap.removeBackward",
                "link": "tools.aqua.bgw.util/BidirectionalMap/removeBackward"
              }
            ],
            "parameters": [
              {
                "name": "element",
                "doc": "Pair (Relation key A, Relation value B)"
              }
            ]
          }
        ]
      },
      "set": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "set"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.set",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\set.html",
        "details": [
          {
            "info": {
              "name": "set",
              "signature": "operator fun set(it: T, value: R)",
              "doc": "Set the given co-domain value for a given domain key. Overwrites existing values in domain and co-domain."
            },
            "parameters": [
              {
                "name": "it",
                "doc": "Key (from the domain) to set the value for."
              },
              {
                "name": "value",
                "doc": "Value (from the co-domain) to set for given domain key."
              }
            ]
          }
        ]
      },
      "size": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "BidirectionalMap",
          "size"
        ],
        "package": "tools.aqua.bgw.util.BidirectionalMap.size",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-bidirectional-map\\size.html",
        "details": [
          {
            "info": {
              "name": "size",
              "signature": "val size: Int",
              "doc": "The size of this map."
            }
          }
        ]
      }
    },
    "Coordinate": {
      "Coordinate": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "Coordinate"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.Coordinate",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\-coordinate.html",
        "details": [
          {
            "info": {
              "name": "Coordinate",
              "signature": "constructor(xCoord: Number = 0, yCoord: Number = 0)",
              "doc": "Creates a [Coordinate](tools.aqua.bgw.util/Coordinate) with given xCoord and yCoord."
            },
            "parameters": [
              {
                "name": "xCoord",
                "doc": "The x coordinate."
              },
              {
                "name": "yCoord",
                "doc": "The y coordinate."
              }
            ]
          }
        ]
      },
      "div": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "div"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.div",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\div.html",
        "details": [
          {
            "info": {
              "name": "div",
              "signature": "operator fun div(denominator: Number): Coordinate",
              "doc": "Returns a new coordinate object containing divided [Coordinate](tools.aqua.bgw.util/Coordinate) by [denominator](tools.aqua.bgw.util/Coordinate/div)."
            },
            "parameters": [
              {
                "name": "denominator",
                "doc": "denominator to divide by."
              }
            ]
          }
        ]
      },
      "equals": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "equals"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.equals",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\equals.html",
        "details": [
          {
            "info": {
              "name": "equals",
              "signature": "open operator override fun equals(other: Any?): Boolean",
              "doc": "Compares coordinate to another Object."
            }
          }
        ]
      },
      "hashCode": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "hashCode"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.hashCode",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\hash-code.html",
        "details": [
          {
            "info": {
              "name": "hashCode",
              "signature": "open override fun hashCode(): Int",
              "doc": "HashCode for this object."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate"
        ],
        "package": "tools.aqua.bgw.util.Coordinate",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\index.html",
        "details": {
          "info": {
            "name": "Coordinate",
            "signature": "open class Coordinate(xCoord: Number = 0, yCoord: Number = 0)",
            "doc": "A Coordinate containing [xCoord](tools.aqua.bgw.util/Coordinate/xCoord) and [yCoord](tools.aqua.bgw.util/Coordinate/yCoord).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "xCoord",
              "doc": "The x coordinate."
            },
            {
              "name": "yCoord",
              "doc": "The y coordinate."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(xCoord: Number = 0, yCoord: Number = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "xCoord",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The x coordinate."
                },
                {
                  "modifier": "",
                  "name": "yCoord",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The y coordinate."
                }
              ],
              "doc": "Creates a [Coordinate](tools.aqua.bgw.util/Coordinate) with given xCoord and yCoord.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "val xCoord: Double",
              "modifier": "val",
              "name": "xCoord",
              "link": "tools.aqua.bgw.util/Coordinate/xCoord",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "X coordinate."
            },
            {
              "signature": "val yCoord: Double",
              "modifier": "val",
              "name": "yCoord",
              "link": "tools.aqua.bgw.util/Coordinate/yCoord",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "Y coordinate."
            }
          ],
          "functions": [
            {
              "signature": "operator fun div(denominator: Number): Coordinate",
              "name": "div",
              "parameters": [
                {
                  "modifier": "",
                  "name": "denominator",
                  "link": "tools.aqua.bgw.util/Coordinate/div",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Coordinate/div",
              "returnType": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "doc": "Returns a new coordinate object containing divided [Coordinate](tools.aqua.bgw.util/Coordinate) by [denominator](tools.aqua.bgw.util/Coordinate/div).",
              "isSuspend": false
            },
            {
              "signature": "operator fun minus(other: Coordinate): Coordinate",
              "name": "minus",
              "parameters": [
                {
                  "modifier": "",
                  "name": "other",
                  "link": "tools.aqua.bgw.util/Coordinate/minus",
                  "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Coordinate/minus",
              "returnType": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "doc": "Returns a new coordinate object containing subtracted [xCoord](tools.aqua.bgw.util/Coordinate/xCoord) and [yCoord](tools.aqua.bgw.util/Coordinate/yCoord).",
              "isSuspend": false
            },
            {
              "signature": "operator fun plus(other: Coordinate): Coordinate",
              "name": "plus",
              "parameters": [
                {
                  "modifier": "",
                  "name": "other",
                  "link": "tools.aqua.bgw.util/Coordinate/plus",
                  "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Coordinate/plus",
              "returnType": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "doc": "Returns a new coordinate object containing added [xCoord](tools.aqua.bgw.util/Coordinate/xCoord) and [yCoord](tools.aqua.bgw.util/Coordinate/yCoord).",
              "isSuspend": false
            },
            {
              "signature": "fun rotated(angle: Double): Coordinate",
              "name": "rotated",
              "parameters": [
                {
                  "modifier": "",
                  "name": "angle",
                  "link": "tools.aqua.bgw.util/Coordinate/rotated",
                  "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Coordinate/rotated",
              "returnType": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "doc": "Rotates coordinate by angle degrees around point (0,0).",
              "isSuspend": false
            },
            {
              "signature": "fun rotated(angle: Number, center: Coordinate): Coordinate",
              "name": "rotated",
              "parameters": [
                {
                  "modifier": "",
                  "name": "angle",
                  "link": "tools.aqua.bgw.util/Coordinate/rotated",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "center",
                  "link": "tools.aqua.bgw.util/Coordinate/rotated",
                  "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Coordinate/rotated",
              "returnType": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "doc": "Rotates [Coordinate](tools.aqua.bgw.util/Coordinate) by [angle](tools.aqua.bgw.util/Coordinate/rotated) degrees around center point.",
              "isSuspend": false
            },
            {
              "signature": "operator fun times(factor: Number): Coordinate",
              "name": "times",
              "parameters": [
                {
                  "modifier": "",
                  "name": "factor",
                  "link": "tools.aqua.bgw.util/Coordinate/times",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Coordinate/times",
              "returnType": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "doc": "Returns a new coordinate object containing multiplied [Coordinate](tools.aqua.bgw.util/Coordinate) with [factor](tools.aqua.bgw.util/Coordinate/times).",
              "isSuspend": false
            }
          ]
        }
      },
      "minus": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "minus"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.minus",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\minus.html",
        "details": [
          {
            "info": {
              "name": "minus",
              "signature": "operator fun minus(other: Coordinate): Coordinate",
              "doc": "Returns a new coordinate object containing subtracted [xCoord](tools.aqua.bgw.util/Coordinate/xCoord) and [yCoord](tools.aqua.bgw.util/Coordinate/yCoord)."
            },
            "parameters": [
              {
                "name": "other",
                "doc": "[Coordinate](tools.aqua.bgw.util/Coordinate) to subtract."
              }
            ]
          }
        ]
      },
      "plus": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "plus"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.plus",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\plus.html",
        "details": [
          {
            "info": {
              "name": "plus",
              "signature": "operator fun plus(other: Coordinate): Coordinate",
              "doc": "Returns a new coordinate object containing added [xCoord](tools.aqua.bgw.util/Coordinate/xCoord) and [yCoord](tools.aqua.bgw.util/Coordinate/yCoord)."
            },
            "parameters": [
              {
                "name": "other",
                "doc": "[Coordinate](tools.aqua.bgw.util/Coordinate) to add."
              }
            ]
          }
        ]
      },
      "rotated": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "rotated"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.rotated",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\rotated.html",
        "details": [
          {
            "info": {
              "name": "rotated",
              "signature": "fun rotated(angle: Number, center: Coordinate): Coordinate",
              "doc": "Rotates [Coordinate](tools.aqua.bgw.util/Coordinate) by [angle](tools.aqua.bgw.util/Coordinate/rotated) degrees around center point.\n\nWith"
            }
          },
          {
            "info": {
              "name": "rotated",
              "signature": "fun rotated(angle: Double): Coordinate",
              "doc": "Rotates coordinate by angle degrees around point (0,0).\n\nWith"
            }
          }
        ]
      },
      "times": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "times"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.times",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\times.html",
        "details": [
          {
            "info": {
              "name": "times",
              "signature": "operator fun times(factor: Number): Coordinate",
              "doc": "Returns a new coordinate object containing multiplied [Coordinate](tools.aqua.bgw.util/Coordinate) with [factor](tools.aqua.bgw.util/Coordinate/times)."
            },
            "parameters": [
              {
                "name": "factor",
                "doc": "factor to multiply with."
              }
            ]
          }
        ]
      },
      "toString": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "toString"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.toString",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\to-string.html",
        "details": [
          {
            "info": {
              "name": "toString",
              "signature": "open override fun toString(): String",
              "doc": "Prints [xCoord](tools.aqua.bgw.util/Coordinate/xCoord) and [yCoord](tools.aqua.bgw.util/Coordinate/yCoord) as String."
            }
          }
        ]
      },
      "xCoord": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "xCoord"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.xCoord",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\x-coord.html",
        "details": [
          {
            "info": {
              "name": "xCoord",
              "signature": "val xCoord: Double",
              "doc": "X coordinate."
            }
          }
        ]
      },
      "yCoord": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Coordinate",
          "yCoord"
        ],
        "package": "tools.aqua.bgw.util.Coordinate.yCoord",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate\\y-coord.html",
        "details": [
          {
            "info": {
              "name": "yCoord",
              "signature": "val yCoord: Double",
              "doc": "Y coordinate."
            }
          }
        ]
      }
    },
    "CoordinatePlain": {
      "CoordinatePlain": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "CoordinatePlain"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.CoordinatePlain",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\-coordinate-plain.html",
        "details": [
          {
            "info": {
              "name": "CoordinatePlain",
              "signature": "constructor(topLeftX: Number, topLeftY: Number, bottomRightX: Number, bottomRightY: Number)",
              "doc": "A CoordinatePlain with two corners as Coordinates. Creates a coordinate plain out of the two corners TOP_LEFT and BOTTOM_RIGHT as Coordinates. TOP_LEFT corner coordinates must be smaller or equal in x and y direction than BOTTOM_RIGHT corner coordinate."
            },
            "parameters": [
              {
                "name": "topLeftX",
                "doc": "The xCoord of the top left corner"
              },
              {
                "name": "topLeftY",
                "doc": "The yCoord of the top left corner"
              },
              {
                "name": "bottomRightX",
                "doc": "The xCoord of the bottom right corner"
              },
              {
                "name": "bottomRightY",
                "doc": "The yCoord of the bottom right corner"
              }
            ]
          },
          {
            "info": {
              "name": "CoordinatePlain",
              "signature": "constructor(topLeft: Coordinate, bottomRight: Coordinate)",
              "doc": "A CoordinatePlain with two corners as Coordinates. Creates a coordinate plain out of the two corners TOP_LEFT and BOTTOM_RIGHT as Coordinates. TOP_LEFT corner coordinates must be smaller or equal in x and y direction than BOTTOM_RIGHT corner coordinate."
            },
            "parameters": [
              {
                "name": "topLeft",
                "doc": "[Coordinate](tools.aqua.bgw.util/Coordinate) of top left corner"
              },
              {
                "name": "bottomRight",
                "doc": "[Coordinate](tools.aqua.bgw.util/Coordinate) of bottom right corner"
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If TOP_LEFT corner coordinates are larger in x or y direction than BOTTOM_RIGHT corner coordinate."
              }
            ]
          }
        ]
      },
      "bottomLeftBound": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "bottomLeftBound"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.bottomLeftBound",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\bottom-left-bound.html",
        "details": [
          {
            "info": {
              "name": "bottomLeftBound",
              "signature": "val bottomLeftBound: Coordinate",
              "doc": "Bottom left bound coordinate."
            }
          }
        ]
      },
      "bottomLeft": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "bottomLeft"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.bottomLeft",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\bottom-left.html",
        "details": [
          {
            "info": {
              "name": "bottomLeft",
              "signature": "val bottomLeft: Coordinate",
              "doc": ""
            }
          }
        ]
      },
      "bottomRightBound": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "bottomRightBound"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.bottomRightBound",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\bottom-right-bound.html",
        "details": [
          {
            "info": {
              "name": "bottomRightBound",
              "signature": "val bottomRightBound: Coordinate",
              "doc": "Bottom right bound coordinate."
            }
          }
        ]
      },
      "bottomRight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "bottomRight"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.bottomRight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\bottom-right.html",
        "details": [
          {
            "info": {
              "name": "bottomRight",
              "signature": "val bottomRight: Coordinate",
              "doc": ""
            }
          }
        ]
      },
      "height": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "height"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.height",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\height.html",
        "details": [
          {
            "info": {
              "name": "height",
              "signature": "val height: Double",
              "doc": "The height of this plain."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\index.html",
        "details": {
          "info": {
            "name": "CoordinatePlain",
            "signature": "open class CoordinatePlain",
            "doc": "A CoordinatePlain with its four corners as Coordinates.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "throws": [
            {
              "name": "IllegalArgumentException",
              "doc": "If TOP_LEFT corner coordinates are larger in x or y direction than BOTTOM_RIGHT corner coordinate."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val bottomLeft: Coordinate",
              "modifier": "val",
              "name": "bottomLeft",
              "link": "tools.aqua.bgw.util/CoordinatePlain/bottomLeft",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Bottom left corner coordinate."
            },
            {
              "signature": "val bottomLeftBound: Coordinate",
              "modifier": "val",
              "name": "bottomLeftBound",
              "link": "tools.aqua.bgw.util/CoordinatePlain/bottomLeftBound",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Bottom left bound coordinate."
            },
            {
              "signature": "val bottomRight: Coordinate",
              "modifier": "val",
              "name": "bottomRight",
              "link": "tools.aqua.bgw.util/CoordinatePlain/bottomRight",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Bottom right corner coordinate."
            },
            {
              "signature": "val bottomRightBound: Coordinate",
              "modifier": "val",
              "name": "bottomRightBound",
              "link": "tools.aqua.bgw.util/CoordinatePlain/bottomRightBound",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Bottom right bound coordinate."
            },
            {
              "signature": "val height: Double",
              "modifier": "val",
              "name": "height",
              "link": "tools.aqua.bgw.util/CoordinatePlain/height",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The height of this plain."
            },
            {
              "signature": "val topLeft: Coordinate",
              "modifier": "val",
              "name": "topLeft",
              "link": "tools.aqua.bgw.util/CoordinatePlain/topLeft",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Top left corner coordinate."
            },
            {
              "signature": "val topLeftBound: Coordinate",
              "modifier": "val",
              "name": "topLeftBound",
              "link": "tools.aqua.bgw.util/CoordinatePlain/topLeftBound",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Top left bound coordinate."
            },
            {
              "signature": "val topRight: Coordinate",
              "modifier": "val",
              "name": "topRight",
              "link": "tools.aqua.bgw.util/CoordinatePlain/topRight",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Top right corner coordinate."
            },
            {
              "signature": "val topRightBound: Coordinate",
              "modifier": "val",
              "name": "topRightBound",
              "link": "tools.aqua.bgw.util/CoordinatePlain/topRightBound",
              "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
              "defaultValue": "",
              "doc": "Top right bound coordinate."
            },
            {
              "signature": "val width: Double",
              "modifier": "val",
              "name": "width",
              "link": "tools.aqua.bgw.util/CoordinatePlain/width",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The width of this plain."
            }
          ],
          "functions": [
            {
              "signature": "fun rotated(angle: Number, center: Coordinate): CoordinatePlain",
              "name": "rotated",
              "parameters": [
                {
                  "modifier": "",
                  "name": "angle",
                  "link": "tools.aqua.bgw.util/CoordinatePlain/rotated",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                },
                {
                  "modifier": "",
                  "name": "center",
                  "link": "tools.aqua.bgw.util/CoordinatePlain/rotated",
                  "type": "[Coordinate](tools.aqua.bgw.util/Coordinate)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/CoordinatePlain/rotated",
              "returnType": "[CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain)",
              "doc": "Rotates [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) by angle degrees around center point.",
              "isSuspend": false
            }
          ]
        }
      },
      "rotated": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "rotated"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.rotated",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\rotated.html",
        "details": [
          {
            "info": {
              "name": "rotated",
              "signature": "fun rotated(angle: Number, center: Coordinate): CoordinatePlain",
              "doc": "Rotates [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) by angle degrees around center point.\n\nWith"
            }
          }
        ]
      },
      "toString": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "toString"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.toString",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\to-string.html",
        "details": [
          {
            "info": {
              "name": "toString",
              "signature": "open override fun toString(): String",
              "doc": ""
            }
          }
        ]
      },
      "topLeftBound": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "topLeftBound"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.topLeftBound",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\top-left-bound.html",
        "details": [
          {
            "info": {
              "name": "topLeftBound",
              "signature": "val topLeftBound: Coordinate",
              "doc": "Top left bound coordinate."
            }
          }
        ]
      },
      "topLeft": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "topLeft"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.topLeft",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\top-left.html",
        "details": [
          {
            "info": {
              "name": "topLeft",
              "signature": "val topLeft: Coordinate",
              "doc": ""
            }
          }
        ]
      },
      "topRightBound": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "topRightBound"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.topRightBound",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\top-right-bound.html",
        "details": [
          {
            "info": {
              "name": "topRightBound",
              "signature": "val topRightBound: Coordinate",
              "doc": "Top right bound coordinate."
            }
          }
        ]
      },
      "topRight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "topRight"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.topRight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\top-right.html",
        "details": [
          {
            "info": {
              "name": "topRight",
              "signature": "val topRight: Coordinate",
              "doc": ""
            }
          }
        ]
      },
      "width": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "CoordinatePlain",
          "width"
        ],
        "package": "tools.aqua.bgw.util.CoordinatePlain.width",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-coordinate-plain\\width.html",
        "details": [
          {
            "info": {
              "name": "width",
              "signature": "val width: Double",
              "doc": "The width of this plain."
            }
          }
        ]
      }
    },
    "Font": {
      "FontStyle": {
        "ITALIC": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontStyle",
              "ITALIC"
            ],
            "package": "tools.aqua.bgw.util.Font.FontStyle.ITALIC",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\-i-t-a-l-i-c\\index.html",
            "details": {
              "info": {
                "name": "ITALIC",
                "signature": "ITALIC",
                "doc": "Italic font style.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "NORMAL": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontStyle",
              "NORMAL"
            ],
            "package": "tools.aqua.bgw.util.Font.FontStyle.NORMAL",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\-n-o-r-m-a-l\\index.html",
            "details": {
              "info": {
                "name": "NORMAL",
                "signature": "NORMAL",
                "doc": "Normal font style.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "OBLIQUE": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontStyle",
              "OBLIQUE"
            ],
            "package": "tools.aqua.bgw.util.Font.FontStyle.OBLIQUE",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\-o-b-l-i-q-u-e\\index.html",
            "details": {
              "info": {
                "name": "OBLIQUE",
                "signature": "OBLIQUE",
                "doc": "Oblique font style.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "entries": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontStyle",
            "entries"
          ],
          "package": "tools.aqua.bgw.util.Font.FontStyle.entries",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\entries.html",
          "details": [
            {
              "info": {
                "name": "entries",
                "signature": "val entries: EnumEntries<Font.FontStyle>",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontStyle"
          ],
          "package": "tools.aqua.bgw.util.Font.FontStyle",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\index.html",
          "details": {
            "info": {
              "name": "FontStyle",
              "signature": "enum FontStyle : Enum<Font.FontStyle>",
              "doc": "Enum class for representing all available font styles for the Font class.",
              "tags": {
                "modifiers": [],
                "type": "enum"
              }
            },
            "seeAlso": [
              {
                "name": "Font",
                "link": "tools.aqua.bgw.util/Font"
              }
            ]
          },
          "members": {
            "properties": [
              {
                "signature": "val entries: EnumEntries<Font.FontStyle>",
                "modifier": "val",
                "name": "entries",
                "link": "tools.aqua.bgw.util/Font/FontStyle/entries",
                "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[Font.FontStyle](tools.aqua.bgw.util/Font/FontStyle)>",
                "defaultValue": "",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "fun valueOf(value: String): Font.FontStyle",
                "name": "valueOf",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "value",
                    "link": "tools.aqua.bgw.util/Font/FontStyle/valueOf",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.util/Font/FontStyle/valueOf",
                "returnType": "[Font.FontStyle](tools.aqua.bgw.util/Font/FontStyle)",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                "isSuspend": false
              },
              {
                "signature": "fun values(): Array<Font.FontStyle>",
                "name": "values",
                "link": "tools.aqua.bgw.util/Font/FontStyle/values",
                "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[Font.FontStyle](tools.aqua.bgw.util/Font/FontStyle)>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
              }
            ]
          }
        },
        "valueOf": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontStyle",
            "valueOf"
          ],
          "package": "tools.aqua.bgw.util.Font.FontStyle.valueOf",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\value-of.html",
          "details": [
            {
              "info": {
                "name": "valueOf",
                "signature": "fun valueOf(value: String): Font.FontStyle",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
              },
              "throws": [
                {
                  "name": "IllegalArgumentException",
                  "doc": "if this enum type has no constant with the specified name"
                }
              ]
            }
          ]
        },
        "values": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontStyle",
            "values"
          ],
          "package": "tools.aqua.bgw.util.Font.FontStyle.values",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-style\\values.html",
          "details": [
            {
              "info": {
                "name": "values",
                "signature": "fun values(): Array<Font.FontStyle>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
              }
            }
          ]
        }
      },
      "FontWeight": {
        "BLACK": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "BLACK"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.BLACK",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-b-l-a-c-k\\index.html",
            "details": {
              "info": {
                "name": "BLACK",
                "signature": "BLACK",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "BOLD": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "BOLD"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.BOLD",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-b-o-l-d\\index.html",
            "details": {
              "info": {
                "name": "BOLD",
                "signature": "BOLD",
                "doc": "Bold font weight.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "EXTRA_BOLD": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "EXTRA_BOLD"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.EXTRA_BOLD",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-e-x-t-r-a_-b-o-l-d\\index.html",
            "details": {
              "info": {
                "name": "EXTRA_BOLD",
                "signature": "EXTRA_BOLD",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "EXTRA_LIGHT": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "EXTRA_LIGHT"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.EXTRA_LIGHT",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-e-x-t-r-a_-l-i-g-h-t\\index.html",
            "details": {
              "info": {
                "name": "EXTRA_LIGHT",
                "signature": "EXTRA_LIGHT",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "LIGHT": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "LIGHT"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.LIGHT",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-l-i-g-h-t\\index.html",
            "details": {
              "info": {
                "name": "LIGHT",
                "signature": "LIGHT",
                "doc": "Light font weight.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "MEDIUM": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "MEDIUM"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.MEDIUM",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-m-e-d-i-u-m\\index.html",
            "details": {
              "info": {
                "name": "MEDIUM",
                "signature": "MEDIUM",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "NORMAL": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "NORMAL"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.NORMAL",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-n-o-r-m-a-l\\index.html",
            "details": {
              "info": {
                "name": "NORMAL",
                "signature": "NORMAL",
                "doc": "Normal font weight.",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "SEMI_BOLD": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "SEMI_BOLD"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.SEMI_BOLD",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-s-e-m-i_-b-o-l-d\\index.html",
            "details": {
              "info": {
                "name": "SEMI_BOLD",
                "signature": "SEMI_BOLD",
                "doc": "Font style weight is bolder than [NORMAL](tools.aqua.bgw.util/Font/FontWeight/NORMAL) but not as bold as [BOLD](tools.aqua.bgw.util/Font/FontWeight/BOLD).",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "THIN": {
          "_index": {
            "type": "global",
            "breadcrumbs": [
              "tools.aqua.bgw.util",
              "Font",
              "FontWeight",
              "THIN"
            ],
            "package": "tools.aqua.bgw.util.Font.FontWeight.THIN",
            "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\-t-h-i-n\\index.html",
            "details": {
              "info": {
                "name": "THIN",
                "signature": "THIN",
                "doc": "",
                "tags": {
                  "modifiers": []
                }
              }
            },
            "members": {
              "properties": [
                {
                  "signature": "val name: String",
                  "modifier": "val",
                  "name": "name",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": ""
                },
                {
                  "signature": "val ordinal: Int",
                  "modifier": "val",
                  "name": "ordinal",
                  "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "",
                  "doc": ""
                }
              ]
            }
          }
        },
        "entries": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontWeight",
            "entries"
          ],
          "package": "tools.aqua.bgw.util.Font.FontWeight.entries",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\entries.html",
          "details": [
            {
              "info": {
                "name": "entries",
                "signature": "val entries: EnumEntries<Font.FontWeight>",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared.\n\nThis method may be used to iterate over the enum entries."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontWeight"
          ],
          "package": "tools.aqua.bgw.util.Font.FontWeight",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\index.html",
          "details": {
            "info": {
              "name": "FontWeight",
              "signature": "enum FontWeight : Enum<Font.FontWeight>",
              "doc": "Enum class for representing all available font weights for the Font class.",
              "tags": {
                "modifiers": [],
                "type": "enum"
              }
            },
            "seeAlso": [
              {
                "name": "Font",
                "link": "tools.aqua.bgw.util/Font"
              }
            ]
          },
          "members": {
            "properties": [
              {
                "signature": "val entries: EnumEntries<Font.FontWeight>",
                "modifier": "val",
                "name": "entries",
                "link": "tools.aqua.bgw.util/Font/FontWeight/entries",
                "type": "[EnumEntries](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.enums/-enum-entries/index.html)<[Font.FontWeight](tools.aqua.bgw.util/Font/FontWeight)>",
                "defaultValue": "",
                "doc": "Returns a representation of an immutable list of all enum entries, in the order they're declared."
              },
              {
                "signature": "val name: String",
                "modifier": "val",
                "name": "name",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                "defaultValue": "",
                "doc": ""
              },
              {
                "signature": "val ordinal: Int",
                "modifier": "val",
                "name": "ordinal",
                "link": "tools.aqua.bgw.util/Font/FontStyle/OBLIQUE",
                "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                "defaultValue": "",
                "doc": ""
              }
            ],
            "functions": [
              {
                "signature": "fun valueOf(value: String): Font.FontWeight",
                "name": "valueOf",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "value",
                    "link": "tools.aqua.bgw.util/Font/FontWeight/valueOf",
                    "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.util/Font/FontWeight/valueOf",
                "returnType": "[Font.FontWeight](tools.aqua.bgw.util/Font/FontWeight)",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)",
                "isSuspend": false
              },
              {
                "signature": "fun values(): Array<Font.FontWeight>",
                "name": "values",
                "link": "tools.aqua.bgw.util/Font/FontWeight/values",
                "returnType": "[Array](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-array/index.html)<[Font.FontWeight](tools.aqua.bgw.util/Font/FontWeight)>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared."
              }
            ]
          }
        },
        "valueOf": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontWeight",
            "valueOf"
          ],
          "package": "tools.aqua.bgw.util.Font.FontWeight.valueOf",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\value-of.html",
          "details": [
            {
              "info": {
                "name": "valueOf",
                "signature": "fun valueOf(value: String): Font.FontWeight",
                "doc": "Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)"
              },
              "throws": [
                {
                  "name": "IllegalArgumentException",
                  "doc": "if this enum type has no constant with the specified name"
                }
              ]
            }
          ]
        },
        "values": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.util",
            "Font",
            "FontWeight",
            "values"
          ],
          "package": "tools.aqua.bgw.util.Font.FontWeight.values",
          "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font-weight\\values.html",
          "details": [
            {
              "info": {
                "name": "values",
                "signature": "fun values(): Array<Font.FontWeight>",
                "doc": "Returns an array containing the constants of this enum type, in the order they're declared.\n\nThis method may be used to iterate over the constants."
              }
            }
          ]
        }
      },
      "Font": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font",
          "Font"
        ],
        "package": "tools.aqua.bgw.util.Font.Font",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\-font.html",
        "details": [
          {
            "info": {
              "name": "Font",
              "signature": "constructor(size: Number = DEFAULT_FONT_SIZE, awtColor: Color, family: String = \"Arial\", fontWeight: Font.FontWeight = FontWeight.NORMAL, fontStyle: Font.FontStyle = FontStyle.NORMAL)",
              "doc": ""
            }
          },
          {
            "info": {
              "name": "Font",
              "signature": "constructor(size: Number = DEFAULT_FONT_SIZE, color: Color = Color.BLACK, family: String = \"Arial\", fontWeight: Font.FontWeight = FontWeight.NORMAL, fontStyle: Font.FontStyle = FontStyle.NORMAL)",
              "doc": "Creates a [Font](tools.aqua.bgw.util/Font)."
            }
          }
        ]
      },
      "color": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font",
          "color"
        ],
        "package": "tools.aqua.bgw.util.Font.color",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\color.html",
        "details": [
          {
            "info": {
              "name": "color",
              "signature": "val color: Color",
              "doc": ""
            }
          }
        ]
      },
      "family": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font",
          "family"
        ],
        "package": "tools.aqua.bgw.util.Font.family",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\family.html",
        "details": [
          {
            "info": {
              "name": "family",
              "signature": "val family: String",
              "doc": ""
            }
          }
        ]
      },
      "fontStyle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font",
          "fontStyle"
        ],
        "package": "tools.aqua.bgw.util.Font.fontStyle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\font-style.html",
        "details": [
          {
            "info": {
              "name": "fontStyle",
              "signature": "val fontStyle: Font.FontStyle",
              "doc": ""
            }
          }
        ]
      },
      "fontWeight": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font",
          "fontWeight"
        ],
        "package": "tools.aqua.bgw.util.Font.fontWeight",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\font-weight.html",
        "details": [
          {
            "info": {
              "name": "fontWeight",
              "signature": "val fontWeight: Font.FontWeight",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font"
        ],
        "package": "tools.aqua.bgw.util.Font",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\index.html",
        "details": {
          "info": {
            "name": "Font",
            "signature": "data class Font(val size: Number = DEFAULT_FONT_SIZE, val color: Color = Color.BLACK, val family: String = \"Arial\", val fontWeight: Font.FontWeight = FontWeight.NORMAL, val fontStyle: Font.FontStyle = FontStyle.NORMAL)",
            "doc": "This class is used to represent a font. For more customization of fonts, the CSS feature can be used.",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          },
          "seeAlso": [
            {
              "name": "Font.FontStyle",
              "link": "tools.aqua.bgw.util/Font/FontStyle"
            }
          ]
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "FontStyle",
              "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) class for representing all available font styles for the Font class.",
              "link": "tools.aqua.bgw.util/Font/FontStyle"
            },
            {
              "name": "FontWeight",
              "doc": "[Enum](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-enum/index.html) class for representing all available font weights for the Font class.",
              "link": "tools.aqua.bgw.util/Font/FontWeight"
            }
          ],
          "properties": [
            {
              "signature": "val color: Color",
              "modifier": "val",
              "name": "color",
              "link": "tools.aqua.bgw.util/Font/color",
              "type": "[Color](tools.aqua.bgw.core/Color)",
              "defaultValue": "",
              "doc": "Color of this font. Default: [Color.BLACK](tools.aqua.bgw.core/Color/Companion/BLACK)."
            },
            {
              "signature": "val family: String",
              "modifier": "val",
              "name": "family",
              "link": "tools.aqua.bgw.util/Font/family",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "Font family as a String for this Font. Default: \"Arial\"."
            },
            {
              "signature": "val fontStyle: Font.FontStyle",
              "modifier": "val",
              "name": "fontStyle",
              "link": "tools.aqua.bgw.util/Font/fontStyle",
              "type": "[Font.FontStyle](tools.aqua.bgw.util/Font/FontStyle)",
              "defaultValue": "",
              "doc": "Font style for this Font. Default: [FontStyle.NORMAL](tools.aqua.bgw.util/Font/FontStyle/NORMAL)."
            },
            {
              "signature": "val fontWeight: Font.FontWeight",
              "modifier": "val",
              "name": "fontWeight",
              "link": "tools.aqua.bgw.util/Font/fontWeight",
              "type": "[Font.FontWeight](tools.aqua.bgw.util/Font/FontWeight)",
              "defaultValue": "",
              "doc": "Font weight for this Font. Default: [FontWeight.NORMAL](tools.aqua.bgw.util/Font/FontWeight/NORMAL)."
            },
            {
              "signature": "val size: Number",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.util/Font/size",
              "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
              "defaultValue": "",
              "doc": "Size of this Font in px. Maybe a floating-point value. Default: 14."
            }
          ]
        }
      },
      "size": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Font",
          "size"
        ],
        "package": "tools.aqua.bgw.util.Font.size",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-font\\size.html",
        "details": [
          {
            "info": {
              "name": "size",
              "signature": "val size: Number",
              "doc": ""
            }
          }
        ]
      }
    },
    "GridIteratorElement": {
      "GridIteratorElement": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "GridIteratorElement",
          "GridIteratorElement"
        ],
        "package": "tools.aqua.bgw.util.GridIteratorElement.GridIteratorElement",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-grid-iterator-element\\-grid-iterator-element.html",
        "details": [
          {
            "info": {
              "name": "GridIteratorElement",
              "signature": "constructor(columnIndex: Int, rowIndex: Int, component: T?)",
              "doc": "Creates a [GridIteratorElement](tools.aqua.bgw.util/GridIteratorElement)."
            },
            "parameters": [
              {
                "name": "T",
                "doc": "Type of boxed component."
              }
            ]
          }
        ]
      },
      "columnIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "GridIteratorElement",
          "columnIndex"
        ],
        "package": "tools.aqua.bgw.util.GridIteratorElement.columnIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-grid-iterator-element\\column-index.html",
        "details": [
          {
            "info": {
              "name": "columnIndex",
              "signature": "val columnIndex: Int",
              "doc": ""
            }
          }
        ]
      },
      "component": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "GridIteratorElement",
          "component"
        ],
        "package": "tools.aqua.bgw.util.GridIteratorElement.component",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-grid-iterator-element\\component.html",
        "details": [
          {
            "info": {
              "name": "component",
              "signature": "val component: T?",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "GridIteratorElement"
        ],
        "package": "tools.aqua.bgw.util.GridIteratorElement",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-grid-iterator-element\\index.html",
        "details": {
          "info": {
            "name": "GridIteratorElement",
            "signature": "data class GridIteratorElement<T>(val columnIndex: Int, val rowIndex: Int, val component: T?)",
            "doc": "Data class containing meta info about current grid element returned by its GridIterator.",
            "tags": {
              "modifiers": [
                "data"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "T",
              "doc": "Type of boxed [component](tools.aqua.bgw.util/GridIteratorElement/component)."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val columnIndex: Int",
              "modifier": "val",
              "name": "columnIndex",
              "link": "tools.aqua.bgw.util/GridIteratorElement/columnIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Current column index."
            },
            {
              "signature": "val component: T?",
              "modifier": "val",
              "name": "component",
              "link": "tools.aqua.bgw.util/GridIteratorElement/component",
              "type": "[T](tools.aqua.bgw.util/GridIteratorElement)?",
              "defaultValue": "",
              "doc": "Current component or null if there is no component present in this cell."
            },
            {
              "signature": "val rowIndex: Int",
              "modifier": "val",
              "name": "rowIndex",
              "link": "tools.aqua.bgw.util/GridIteratorElement/rowIndex",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Current row index."
            }
          ]
        }
      },
      "rowIndex": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "GridIteratorElement",
          "rowIndex"
        ],
        "package": "tools.aqua.bgw.util.GridIteratorElement.rowIndex",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-grid-iterator-element\\row-index.html",
        "details": [
          {
            "info": {
              "name": "rowIndex",
              "signature": "val rowIndex: Int",
              "doc": ""
            }
          }
        ]
      }
    },
    "Stack": {
      "Stack": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "Stack"
        ],
        "package": "tools.aqua.bgw.util.Stack.Stack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\-stack.html",
        "details": [
          {
            "info": {
              "name": "Stack",
              "signature": "constructor(vararg element: T)",
              "doc": "Creates a [Stack](tools.aqua.bgw.util/Stack) with vararg initial elements."
            }
          },
          {
            "info": {
              "name": "Stack",
              "signature": "constructor()",
              "doc": "Creates an empty [Stack](tools.aqua.bgw.util/Stack)."
            }
          },
          {
            "info": {
              "name": "Stack",
              "signature": "constructor(elements: Collection<T>)",
              "doc": "Creates a [Stack](tools.aqua.bgw.util/Stack) with, given initial elements."
            }
          }
        ]
      },
      "clear": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "clear"
        ],
        "package": "tools.aqua.bgw.util.Stack.clear",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\clear.html",
        "details": [
          {
            "info": {
              "name": "clear",
              "signature": "fun clear(): List<T>",
              "doc": "Pops all elements in this [Stack](tools.aqua.bgw.util/Stack) and returns them in a [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html), with the topmost element as the list's head i.e. index 0."
            }
          }
        ]
      },
      "indexOf": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "indexOf"
        ],
        "package": "tools.aqua.bgw.util.Stack.indexOf",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\index-of.html",
        "details": [
          {
            "info": {
              "name": "indexOf",
              "signature": "fun indexOf(element: T): Int",
              "doc": "Returns the index of the first occurrence of the specified element in the [Stack](tools.aqua.bgw.util/Stack), or -1 if the specified element is not contained in the [Stack](tools.aqua.bgw.util/Stack)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack"
        ],
        "package": "tools.aqua.bgw.util.Stack",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\index.html",
        "details": {
          "info": {
            "name": "Stack",
            "signature": "open class Stack<T>(elements: Collection<T>)",
            "doc": "[Stack](tools.aqua.bgw.util/Stack) represents a Last In First Out (LIFO) data structure. It provides useful functions to manipulate the [Stack](tools.aqua.bgw.util/Stack).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          }
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val size: Int",
              "modifier": "val",
              "name": "size",
              "link": "tools.aqua.bgw.util/Stack/size",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Size of this [Stack](tools.aqua.bgw.util/Stack)."
            }
          ],
          "functions": [
            {
              "signature": "fun clear(): List<T>",
              "name": "clear",
              "link": "tools.aqua.bgw.util/Stack/clear",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.util/Stack)>",
              "doc": "Pops all elements in this [Stack](tools.aqua.bgw.util/Stack) and returns them in a [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html), with the topmost element as the list's head i.e. index 0."
            },
            {
              "signature": "fun indexOf(element: T): Int",
              "name": "indexOf",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.util/StackOf",
                  "type": "[T](tools.aqua.bgw.util/Stack)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/StackOf",
              "returnType": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "doc": "Returns the index of the first occurrence of the specified element in the [Stack](tools.aqua.bgw.util/Stack), or -1 if the specified element is not contained in the [Stack](tools.aqua.bgw.util/Stack).",
              "isSuspend": false
            },
            {
              "signature": "fun isEmpty(): Boolean",
              "name": "isEmpty",
              "link": "tools.aqua.bgw.util/Stack/isEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether this [Stack](tools.aqua.bgw.util/Stack) is empty or not."
            },
            {
              "signature": "fun isNotEmpty(): Boolean",
              "name": "isNotEmpty",
              "link": "tools.aqua.bgw.util/Stack/isNotEmpty",
              "returnType": "[Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-boolean/index.html)",
              "doc": "Returns whether this [Stack](tools.aqua.bgw.util/Stack) is not empty."
            },
            {
              "signature": "fun peek(): T",
              "name": "peek",
              "link": "tools.aqua.bgw.util/Stack/peek",
              "returnType": "[T](tools.aqua.bgw.util/Stack)",
              "doc": "Returns the topmost element in this [Stack](tools.aqua.bgw.util/Stack) but does not pop it."
            },
            {
              "signature": "fun peekAll(numToPeek: Int = data.size): List<T>",
              "name": "peekAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "numToPeek",
                  "link": "tools.aqua.bgw.util/Stack/peekAll",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "data.size",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Stack/peekAll",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.util/Stack)>",
              "doc": "Returns all elements in this [Stack](tools.aqua.bgw.util/Stack), with the last pushed Element at the highest index.",
              "isSuspend": false
            },
            {
              "signature": "fun peekOrNull(): T?",
              "name": "peekOrNull",
              "link": "tools.aqua.bgw.util/Stack/peekOrNull",
              "returnType": "[T](tools.aqua.bgw.util/Stack)?",
              "doc": "Returns the topmost element in this [Stack](tools.aqua.bgw.util/Stack) but does not pop it."
            },
            {
              "signature": "fun pop(): T",
              "name": "pop",
              "link": "tools.aqua.bgw.util/Stack/pop",
              "returnType": "[T](tools.aqua.bgw.util/Stack)",
              "doc": "Pops the topmost element in this [Stack](tools.aqua.bgw.util/Stack)."
            },
            {
              "signature": "fun popAll(numToPop: Int = data.size): List<T>",
              "name": "popAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "numToPop",
                  "link": "tools.aqua.bgw.util/Stack/popAll",
                  "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
                  "defaultValue": "data.size",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Stack/popAll",
              "returnType": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[T](tools.aqua.bgw.util/Stack)>",
              "doc": "Pops the n topmost elements in this [Stack](tools.aqua.bgw.util/Stack), where n is specified by the parameter. The topmost element in the stack gets the list's head i.e. index 0.",
              "isSuspend": false
            },
            {
              "signature": "fun popOrNull(): T?",
              "name": "popOrNull",
              "link": "tools.aqua.bgw.util/Stack/popOrNull",
              "returnType": "[T](tools.aqua.bgw.util/Stack)?",
              "doc": "Pops the topmost element in this [Stack](tools.aqua.bgw.util/Stack)."
            },
            {
              "signature": "fun push(element: T)",
              "name": "push",
              "parameters": [
                {
                  "modifier": "",
                  "name": "element",
                  "link": "tools.aqua.bgw.util/Stack/push",
                  "type": "[T](tools.aqua.bgw.util/Stack)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Stack/push",
              "returnType": "Unit",
              "doc": "Pushes the supplied element onto the [Stack](tools.aqua.bgw.util/Stack).",
              "isSuspend": false
            },
            {
              "signature": "fun pushAll(vararg elements: T)",
              "name": "pushAll",
              "parameters": [
                {
                  "modifier": "vararg",
                  "name": "elements",
                  "link": "tools.aqua.bgw.util/Stack/pushAll",
                  "type": "[T](tools.aqua.bgw.util/Stack)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Stack/pushAll",
              "returnType": "Unit",
              "doc": "Pushes all the supplied elements onto the [Stack](tools.aqua.bgw.util/Stack). The first parameter is pushed first.",
              "isSuspend": false
            },
            {
              "signature": "fun pushAll(elements: Collection<T>)",
              "name": "pushAll",
              "parameters": [
                {
                  "modifier": "",
                  "name": "elements",
                  "link": "tools.aqua.bgw.util/Stack/pushAll",
                  "type": "[Collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-collection/index.html)<[T](tools.aqua.bgw.util/Stack)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Stack/pushAll",
              "returnType": "Unit",
              "doc": "Pushes all the supplied elements onto the [Stack](tools.aqua.bgw.util/Stack). The element at index 0 of the List is pushed first.",
              "isSuspend": false
            },
            {
              "signature": "fun shuffle()",
              "name": "shuffle",
              "link": "tools.aqua.bgw.util/Stack/shuffle",
              "returnType": "Unit",
              "doc": "Shuffles this [Stack](tools.aqua.bgw.util/Stack)."
            },
            {
              "signature": "fun sort(comparator: Comparator<in T>)",
              "name": "sort",
              "parameters": [
                {
                  "modifier": "",
                  "name": "comparator",
                  "link": "tools.aqua.bgw.util/Stack/sort",
                  "type": "[Comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-comparator/index.html)<in [T](tools.aqua.bgw.util/Stack)>",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Stack/sort",
              "returnType": "Unit",
              "doc": "Sorts this [Stack](tools.aqua.bgw.util/Stack).",
              "isSuspend": false
            }
          ]
        }
      },
      "isEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "isEmpty"
        ],
        "package": "tools.aqua.bgw.util.Stack.isEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\is-empty.html",
        "details": [
          {
            "info": {
              "name": "isEmpty",
              "signature": "fun isEmpty(): Boolean",
              "doc": "Returns whether this [Stack](tools.aqua.bgw.util/Stack) is empty or not."
            }
          }
        ]
      },
      "isNotEmpty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "isNotEmpty"
        ],
        "package": "tools.aqua.bgw.util.Stack.isNotEmpty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\is-not-empty.html",
        "details": [
          {
            "info": {
              "name": "isNotEmpty",
              "signature": "fun isNotEmpty(): Boolean",
              "doc": "Returns whether this [Stack](tools.aqua.bgw.util/Stack) is not empty."
            }
          }
        ]
      },
      "peekAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "peekAll"
        ],
        "package": "tools.aqua.bgw.util.Stack.peekAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\peek-all.html",
        "details": [
          {
            "info": {
              "name": "peekAll",
              "signature": "fun peekAll(numToPeek: Int = data.size): List<T>",
              "doc": "Returns all elements in this [Stack](tools.aqua.bgw.util/Stack), with the last pushed Element at the highest index."
            },
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If numToPeek is negative or greater than the [Stack](tools.aqua.bgw.util/Stack)'s size."
              }
            ]
          }
        ]
      },
      "peekOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "peekOrNull"
        ],
        "package": "tools.aqua.bgw.util.Stack.peekOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\peek-or-null.html",
        "details": [
          {
            "info": {
              "name": "peekOrNull",
              "signature": "fun peekOrNull(): T?",
              "doc": "Returns the topmost element in this [Stack](tools.aqua.bgw.util/Stack) but does not pop it."
            }
          }
        ]
      },
      "peek": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "peek"
        ],
        "package": "tools.aqua.bgw.util.Stack.peek",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\peek.html",
        "details": [
          {
            "info": {
              "name": "peek",
              "signature": "fun peek(): T",
              "doc": "Returns the topmost element in this [Stack](tools.aqua.bgw.util/Stack) but does not pop it."
            },
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "If the stack is empty."
              }
            ]
          }
        ]
      },
      "popAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "popAll"
        ],
        "package": "tools.aqua.bgw.util.Stack.popAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\pop-all.html",
        "details": [
          {
            "info": {
              "name": "popAll",
              "signature": "fun popAll(numToPop: Int = data.size): List<T>",
              "doc": "Pops the n topmost elements in this [Stack](tools.aqua.bgw.util/Stack), where n is specified by the parameter. The topmost element in the stack gets the list's head i.e. index 0."
            },
            "parameters": [
              {
                "name": "numToPop",
                "doc": "Specifies how many elements to pop."
              }
            ],
            "throws": [
              {
                "name": "IllegalArgumentException",
                "doc": "If numToPop is negative or greater than the [Stack](tools.aqua.bgw.util/Stack)'s size."
              }
            ]
          }
        ]
      },
      "popOrNull": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "popOrNull"
        ],
        "package": "tools.aqua.bgw.util.Stack.popOrNull",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\pop-or-null.html",
        "details": [
          {
            "info": {
              "name": "popOrNull",
              "signature": "fun popOrNull(): T?",
              "doc": "Pops the topmost element in this [Stack](tools.aqua.bgw.util/Stack)."
            }
          }
        ]
      },
      "pop": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "pop"
        ],
        "package": "tools.aqua.bgw.util.Stack.pop",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\pop.html",
        "details": [
          {
            "info": {
              "name": "pop",
              "signature": "fun pop(): T",
              "doc": "Pops the topmost element in this [Stack](tools.aqua.bgw.util/Stack)."
            },
            "throws": [
              {
                "name": "NoSuchElementException",
                "doc": "If the stack is empty."
              }
            ]
          }
        ]
      },
      "pushAll": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "pushAll"
        ],
        "package": "tools.aqua.bgw.util.Stack.pushAll",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\push-all.html",
        "details": [
          {
            "info": {
              "name": "pushAll",
              "signature": "fun pushAll(elements: Collection<T>)",
              "doc": "Pushes all the supplied elements onto the [Stack](tools.aqua.bgw.util/Stack). The element at index 0 of the List is pushed first."
            },
            "parameters": [
              {
                "name": "elements",
                "doc": "The elements to push onto this [Stack](tools.aqua.bgw.util/Stack)."
              }
            ]
          },
          {
            "info": {
              "name": "pushAll",
              "signature": "fun pushAll(vararg elements: T)",
              "doc": "Pushes all the supplied elements onto the [Stack](tools.aqua.bgw.util/Stack). The first parameter is pushed first."
            },
            "parameters": [
              {
                "name": "elements",
                "doc": "The elements to push onto this [Stack](tools.aqua.bgw.util/Stack)."
              }
            ]
          }
        ]
      },
      "push": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "push"
        ],
        "package": "tools.aqua.bgw.util.Stack.push",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\push.html",
        "details": [
          {
            "info": {
              "name": "push",
              "signature": "fun push(element: T)",
              "doc": "Pushes the supplied element onto the [Stack](tools.aqua.bgw.util/Stack)."
            },
            "parameters": [
              {
                "name": "element",
                "doc": "The element to push onto this [Stack](tools.aqua.bgw.util/Stack)."
              }
            ]
          }
        ]
      },
      "shuffle": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "shuffle"
        ],
        "package": "tools.aqua.bgw.util.Stack.shuffle",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\shuffle.html",
        "details": [
          {
            "info": {
              "name": "shuffle",
              "signature": "fun shuffle()",
              "doc": "Shuffles this [Stack](tools.aqua.bgw.util/Stack)."
            }
          }
        ]
      },
      "size": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "size"
        ],
        "package": "tools.aqua.bgw.util.Stack.size",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\size.html",
        "details": [
          {
            "info": {
              "name": "size",
              "signature": "val size: Int",
              "doc": "Size of this [Stack](tools.aqua.bgw.util/Stack)."
            }
          }
        ]
      },
      "sort": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Stack",
          "sort"
        ],
        "package": "tools.aqua.bgw.util.Stack.sort",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-stack\\sort.html",
        "details": [
          {
            "info": {
              "name": "sort",
              "signature": "fun sort(comparator: Comparator<in T>)",
              "doc": "Sorts this [Stack](tools.aqua.bgw.util/Stack)."
            },
            "parameters": [
              {
                "name": "comparator",
                "doc": "Comparator for sorting."
              }
            ]
          }
        ]
      }
    },
    "Trig": {
      "cosD": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Trig",
          "cosD"
        ],
        "package": "tools.aqua.bgw.util.Trig.cosD",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-trig\\cos-d.html",
        "details": [
          {
            "info": {
              "name": "cosD",
              "signature": "fun cosD(degrees: Number): Double",
              "doc": "Cos function for angles in degrees."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Trig"
        ],
        "package": "tools.aqua.bgw.util.Trig",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-trig\\index.html",
        "details": {
          "info": {
            "name": "Trig",
            "signature": "object Trig",
            "doc": "Utility class for trigonometry functions.",
            "tags": {
              "modifiers": [],
              "type": "object"
            }
          }
        },
        "members": {
          "functions": [
            {
              "signature": "fun cosD(degrees: Number): Double",
              "name": "cosD",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.util/Trig/cosD",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Trig/cosD",
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "doc": "Cos function for angles in degrees.",
              "isSuspend": false
            },
            {
              "signature": "fun sinD(degrees: Number): Double",
              "name": "sinD",
              "parameters": [
                {
                  "modifier": "",
                  "name": "degrees",
                  "link": "tools.aqua.bgw.util/Trig/sinD",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "",
                  "isLambda": false
                }
              ],
              "link": "tools.aqua.bgw.util/Trig/sinD",
              "returnType": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "doc": "Sin function for angles in degrees.",
              "isSuspend": false
            }
          ]
        }
      },
      "sinD": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.util",
          "Trig",
          "sinD"
        ],
        "package": "tools.aqua.bgw.util.Trig.sinD",
        "path": "example\\htmlPartial\\tools.aqua.bgw.util\\-trig\\sin-d.html",
        "details": [
          {
            "info": {
              "name": "sinD",
              "signature": "fun sinD(degrees: Number): Double",
              "doc": "Sin function for angles in degrees."
            }
          }
        ]
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.util"
      ],
      "package": "tools.aqua.bgw.util",
      "path": "example\\htmlPartial\\tools.aqua.bgw.util\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class BidirectionalMap<T : Any, R : Any>(elements: Pair<T, R>)",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "BidirectionalMap",
            "doc": "A bidirectional map. Each key-value-pair gets mapped in both directions. Keys and values must be unique in the sense that there must not be a duplicate key in the domain, nor a duplicate value in the coDomain, but the same element may appear once as key and once as value.",
            "link": "tools.aqua.bgw.util/BidirectionalMap"
          },
          {
            "name": "Coordinate",
            "doc": "A [Coordinate](tools.aqua.bgw.util/Coordinate) containing xCoord and yCoord.",
            "link": "tools.aqua.bgw.util/Coordinate"
          },
          {
            "name": "CoordinatePlain",
            "doc": "A [CoordinatePlain](tools.aqua.bgw.util/CoordinatePlain) with its four corners as Coordinates.",
            "link": "tools.aqua.bgw.util/CoordinatePlain"
          },
          {
            "name": "Font",
            "doc": "This class is used to represent a font. For more customization of fonts, the CSS feature can be used.",
            "link": "tools.aqua.bgw.util/Font"
          },
          {
            "name": "GridIteratorElement",
            "doc": "Data class containing meta info about current grid element returned by its GridIterator.",
            "link": "tools.aqua.bgw.util/GridIteratorElement"
          },
          {
            "name": "Stack",
            "doc": "[Stack](tools.aqua.bgw.util/Stack) represents a Last In First Out (LIFO) data structure. It provides useful functions to manipulate the [Stack](tools.aqua.bgw.util/Stack).",
            "link": "tools.aqua.bgw.util/Stack"
          },
          {
            "name": "Trig",
            "doc": "Utility class for trigonometry functions.",
            "link": "tools.aqua.bgw.util/Trig"
          }
        ]
      }
    }
  },
  "tools.aqua.bgw.visual": {
    "ColorVisual": {
      "ColorVisual": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ColorVisual",
          "ColorVisual"
        ],
        "package": "tools.aqua.bgw.visual.ColorVisual.ColorVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-color-visual.html",
        "details": [
          {
            "info": {
              "name": "ColorVisual",
              "signature": "constructor(r: Int, g: Int, b: Int, alpha: Number = 1.0)",
              "doc": "Creates a solid [ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled with given RGBA values.\n\nThe alpha channel gets multiplied with the transparencyProperty i.e. alpha = 0.5 (50%) and transparency = 0.5 (50%) leads to 25% visibility / 75% transparency."
            },
            "parameters": [
              {
                "name": "r",
                "doc": "Red channel between 0 and 255."
              },
              {
                "name": "g",
                "doc": "Green channel between 0 and 255."
              },
              {
                "name": "b",
                "doc": "Blue channel between 0 and 255."
              },
              {
                "name": "alpha",
                "doc": "Alpha channel (0 - 255 for Int, 0.0 - 1.0 for Double). Value is 1.0 by default and if parameter is out of a valid range."
              }
            ]
          },
          {
            "info": {
              "name": "ColorVisual",
              "signature": "constructor(color: Color)",
              "doc": ""
            },
            "parameters": [
              {
                "name": "color",
                "doc": "Color to use as filling."
              }
            ]
          },
          {
            "info": {
              "name": "ColorVisual",
              "signature": "constructor(color: Color)",
              "doc": "Creates a solid [ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled with given [Color](tools.aqua.bgw.core/Color)."
            },
            "parameters": [
              {
                "name": "color",
                "doc": "Color to use as filling."
              }
            ]
          }
        ]
      },
      "Companion": {
        "BLACK": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "BLACK"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.BLACK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-b-l-a-c-k.html",
          "details": [
            {
              "info": {
                "name": "BLACK",
                "signature": "val BLACK: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [BLACK](tools.aqua.bgw.visual/ColorVisual/Companion/BLACK)."
              }
            }
          ]
        },
        "BLUE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "BLUE"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.BLUE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-b-l-u-e.html",
          "details": [
            {
              "info": {
                "name": "BLUE",
                "signature": "val BLUE: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
              }
            }
          ]
        },
        "CYAN": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "CYAN"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.CYAN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-c-y-a-n.html",
          "details": [
            {
              "info": {
                "name": "CYAN",
                "signature": "val CYAN: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [CYAN](tools.aqua.bgw.visual/ColorVisual/Companion/CYAN)."
              }
            }
          ]
        },
        "DARK_GRAY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "DARK_GRAY"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.DARK_GRAY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-d-a-r-k_-g-r-a-y.html",
          "details": [
            {
              "info": {
                "name": "DARK_GRAY",
                "signature": "val DARK_GRAY: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [DARK_GRAY](tools.aqua.bgw.visual/ColorVisual/Companion/DARK_GRAY)."
              }
            }
          ]
        },
        "GRAY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "GRAY"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.GRAY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-g-r-a-y.html",
          "details": [
            {
              "info": {
                "name": "GRAY",
                "signature": "val GRAY: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [GRAY](tools.aqua.bgw.visual/ColorVisual/Companion/GRAY)."
              }
            }
          ]
        },
        "GREEN": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "GREEN"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.GREEN",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-g-r-e-e-n.html",
          "details": [
            {
              "info": {
                "name": "GREEN",
                "signature": "val GREEN: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [GREEN](tools.aqua.bgw.visual/ColorVisual/Companion/GREEN)."
              }
            }
          ]
        },
        "LIGHT_GRAY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "LIGHT_GRAY"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.LIGHT_GRAY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-l-i-g-h-t_-g-r-a-y.html",
          "details": [
            {
              "info": {
                "name": "LIGHT_GRAY",
                "signature": "val LIGHT_GRAY: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [LIGHT_GRAY](tools.aqua.bgw.visual/ColorVisual/Companion/LIGHT_GRAY)."
              }
            }
          ]
        },
        "MAGENTA": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "MAGENTA"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.MAGENTA",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-m-a-g-e-n-t-a.html",
          "details": [
            {
              "info": {
                "name": "MAGENTA",
                "signature": "val MAGENTA: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [MAGENTA](tools.aqua.bgw.visual/ColorVisual/Companion/MAGENTA)."
              }
            }
          ]
        },
        "ORANGE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "ORANGE"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.ORANGE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-o-r-a-n-g-e.html",
          "details": [
            {
              "info": {
                "name": "ORANGE",
                "signature": "val ORANGE: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [ORANGE](tools.aqua.bgw.visual/ColorVisual/Companion/ORANGE)."
              }
            }
          ]
        },
        "PINK": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "PINK"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.PINK",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-p-i-n-k.html",
          "details": [
            {
              "info": {
                "name": "PINK",
                "signature": "val PINK: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [PINK](tools.aqua.bgw.visual/ColorVisual/Companion/PINK)."
              }
            }
          ]
        },
        "RED": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "RED"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.RED",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-r-e-d.html",
          "details": [
            {
              "info": {
                "name": "RED",
                "signature": "val RED: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [RED](tools.aqua.bgw.visual/ColorVisual/Companion/RED)."
              }
            }
          ]
        },
        "TRANSPARENT": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "TRANSPARENT"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.TRANSPARENT",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-t-r-a-n-s-p-a-r-e-n-t.html",
          "details": [
            {
              "info": {
                "name": "TRANSPARENT",
                "signature": "val TRANSPARENT: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE) but completely opaque."
              }
            }
          ]
        },
        "WHITE": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "WHITE"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.WHITE",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-w-h-i-t-e.html",
          "details": [
            {
              "info": {
                "name": "WHITE",
                "signature": "val WHITE: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
              }
            }
          ]
        },
        "YELLOW": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion",
            "YELLOW"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion.YELLOW",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\-y-e-l-l-o-w.html",
          "details": [
            {
              "info": {
                "name": "YELLOW",
                "signature": "val YELLOW: ColorVisual",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [YELLOW](tools.aqua.bgw.visual/ColorVisual/Companion/YELLOW)."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ColorVisual",
            "Companion"
          ],
          "package": "tools.aqua.bgw.visual.ColorVisual.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val BLACK: ColorVisual",
                "modifier": "val",
                "name": "BLACK",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/BLACK",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [BLACK](tools.aqua.bgw.visual/ColorVisual/Companion/BLACK)."
              },
              {
                "signature": "val BLUE: ColorVisual",
                "modifier": "val",
                "name": "BLUE",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/BLUE",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [BLUE](tools.aqua.bgw.visual/ColorVisual/Companion/BLUE)."
              },
              {
                "signature": "val CYAN: ColorVisual",
                "modifier": "val",
                "name": "CYAN",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/CYAN",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [CYAN](tools.aqua.bgw.visual/ColorVisual/Companion/CYAN)."
              },
              {
                "signature": "val DARK_GRAY: ColorVisual",
                "modifier": "val",
                "name": "DARK_GRAY",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/DARK_GRAY",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [DARK_GRAY](tools.aqua.bgw.visual/ColorVisual/Companion/DARK_GRAY)."
              },
              {
                "signature": "val GRAY: ColorVisual",
                "modifier": "val",
                "name": "GRAY",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/GRAY",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [GRAY](tools.aqua.bgw.visual/ColorVisual/Companion/GRAY)."
              },
              {
                "signature": "val GREEN: ColorVisual",
                "modifier": "val",
                "name": "GREEN",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/GREEN",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [GREEN](tools.aqua.bgw.visual/ColorVisual/Companion/GREEN)."
              },
              {
                "signature": "val LIGHT_GRAY: ColorVisual",
                "modifier": "val",
                "name": "LIGHT_GRAY",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/LIGHT_GRAY",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [LIGHT_GRAY](tools.aqua.bgw.visual/ColorVisual/Companion/LIGHT_GRAY)."
              },
              {
                "signature": "val MAGENTA: ColorVisual",
                "modifier": "val",
                "name": "MAGENTA",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/MAGENTA",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [MAGENTA](tools.aqua.bgw.visual/ColorVisual/Companion/MAGENTA)."
              },
              {
                "signature": "val ORANGE: ColorVisual",
                "modifier": "val",
                "name": "ORANGE",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/ORANGE",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [ORANGE](tools.aqua.bgw.visual/ColorVisual/Companion/ORANGE)."
              },
              {
                "signature": "val PINK: ColorVisual",
                "modifier": "val",
                "name": "PINK",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/PINK",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [PINK](tools.aqua.bgw.visual/ColorVisual/Companion/PINK)."
              },
              {
                "signature": "val RED: ColorVisual",
                "modifier": "val",
                "name": "RED",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/RED",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [RED](tools.aqua.bgw.visual/ColorVisual/Companion/RED)."
              },
              {
                "signature": "val TRANSPARENT: ColorVisual",
                "modifier": "val",
                "name": "TRANSPARENT",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/TRANSPARENT",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE) but completely opaque."
              },
              {
                "signature": "val WHITE: ColorVisual",
                "modifier": "val",
                "name": "WHITE",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/WHITE",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [WHITE](tools.aqua.bgw.visual/ColorVisual/Companion/WHITE)."
              },
              {
                "signature": "val YELLOW: ColorVisual",
                "modifier": "val",
                "name": "YELLOW",
                "link": "tools.aqua.bgw.visual/ColorVisual/Companion/YELLOW",
                "type": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual)",
                "defaultValue": "",
                "doc": "[ColorVisual](tools.aqua.bgw.visual/ColorVisual) filled [YELLOW](tools.aqua.bgw.visual/ColorVisual/Companion/YELLOW)."
              }
            ]
          }
        }
      },
      "colorProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ColorVisual",
          "colorProperty"
        ],
        "package": "tools.aqua.bgw.visual.ColorVisual.colorProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\color-property.html",
        "details": [
          {
            "info": {
              "name": "colorProperty",
              "signature": "val colorProperty: Property<Color>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the displayed [Color](tools.aqua.bgw.core/Color) of this [Visual](tools.aqua.bgw.visual/Visual).\n\nThe alpha channel gets multiplied with the transparencyProperty i.e. alpha = 128 (50%) and transparency = 0.5 (50%) leads to 25% visibility / 75% transparency."
            },
            "seeAlso": [
              {
                "name": "ColorVisual.color",
                "link": "tools.aqua.bgw.visual/ColorVisual/color"
              }
            ]
          }
        ]
      },
      "color": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ColorVisual",
          "color"
        ],
        "package": "tools.aqua.bgw.visual.ColorVisual.color",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\color.html",
        "details": [
          {
            "info": {
              "name": "color",
              "signature": "var color: Color",
              "doc": "The displayed [Color](tools.aqua.bgw.core/Color) of this [Visual](tools.aqua.bgw.visual/Visual).\n\nThe alpha channel gets multiplied with the transparencyProperty i.e. alpha = 128 (50%) and transparency = 0.5 (50%) leads to 25% visibility / 75% transparency."
            }
          }
        ]
      },
      "copy": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ColorVisual",
          "copy"
        ],
        "package": "tools.aqua.bgw.visual.ColorVisual.copy",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\copy.html",
        "details": [
          {
            "info": {
              "name": "copy",
              "signature": "open override fun copy(): ColorVisual",
              "doc": "Copies this [ColorVisual](tools.aqua.bgw.visual/ColorVisual) to a new object."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ColorVisual"
        ],
        "package": "tools.aqua.bgw.visual.ColorVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-color-visual\\index.html",
        "details": {
          "info": {
            "name": "ColorVisual",
            "signature": "open class ColorVisual(color: Color) : SingleLayerVisual",
            "doc": "A solid [color](tools.aqua.bgw.visual/ColorVisual/color) visual. Displays a rectangle filled with the given [color](tools.aqua.bgw.visual/ColorVisual/color).",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "color",
              "doc": "Color to use as filling."
            }
          ]
        },
        "members": {
          "constructors": [],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.visual/ColorVisual/Companion"
            }
          ],
          "properties": [
            {
              "signature": "var color: Color",
              "modifier": "var",
              "name": "color",
              "link": "tools.aqua.bgw.visual/ColorVisual/color",
              "type": "[Color](tools.aqua.bgw.core/Color)",
              "defaultValue": "",
              "doc": "The displayed [Color](tools.aqua.bgw.core/Color) of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "val filters: Filter",
              "modifier": "val",
              "name": "filters",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/filters",
              "type": "[Filter](tools.aqua.bgw.style/Filter)",
              "defaultValue": "",
              "doc": "Additional filters that get applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var flipped: Flip",
              "modifier": "var",
              "name": "flipped",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/flipped",
              "type": "[Flip](tools.aqua.bgw.style/Flip)",
              "defaultValue": "",
              "doc": "The [flipped](tools.aqua.bgw.visual/SingleLayerVisual/flipped) state of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "val style: Style",
              "modifier": "val",
              "name": "style",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/style",
              "type": "[Style](tools.aqua.bgw.style/Style)",
              "defaultValue": "",
              "doc": "Additional styling that gets applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var transparency: Double",
              "modifier": "var",
              "name": "transparency",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/transparency",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [transparency](tools.aqua.bgw.visual/SingleLayerVisual/transparency) / alpha channel for this [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ],
          "functions": []
        }
      }
    },
    "CompoundVisual": {
      "CompoundVisual": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "CompoundVisual",
          "CompoundVisual"
        ],
        "package": "tools.aqua.bgw.visual.CompoundVisual.CompoundVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-compound-visual\\-compound-visual.html",
        "details": [
          {
            "info": {
              "name": "CompoundVisual",
              "signature": "constructor(vararg children: SingleLayerVisual)",
              "doc": "[CompoundVisual](tools.aqua.bgw.visual/CompoundVisual) constructor with vararg parameter for initial children."
            },
            "parameters": [
              {
                "name": "children",
                "doc": "Children SingleLayerVisuals in the order they should be displayed, where the first [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) gets displayed at the bottom of the stack."
              }
            ]
          },
          {
            "info": {
              "name": "CompoundVisual",
              "signature": "constructor(children: List<SingleLayerVisual>)",
              "doc": "Creates a [CompoundVisual](tools.aqua.bgw.visual/CompoundVisual) with given children as [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)."
            },
            "parameters": [
              {
                "name": "children",
                "doc": "Children SingleLayerVisuals in the order they should be displayed, where the first [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) gets displayed at the bottom of the stack."
              }
            ]
          }
        ]
      },
      "childrenProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "CompoundVisual",
          "childrenProperty"
        ],
        "package": "tools.aqua.bgw.visual.CompoundVisual.childrenProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-compound-visual\\children-property.html",
        "details": [
          {
            "info": {
              "name": "childrenProperty",
              "signature": "val childrenProperty: ObservableArrayList<SingleLayerVisual>",
              "doc": "[ObservableList](tools.aqua.bgw.observable.lists/ObservableList) for the [children](tools.aqua.bgw.visual/CompoundVisual/children) of this stack. The first [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) gets displayed at the bottom of the stack."
            },
            "seeAlso": [
              {
                "name": "CompoundVisual.children",
                "link": "tools.aqua.bgw.visual/CompoundVisual/children"
              }
            ]
          }
        ]
      },
      "children": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "CompoundVisual",
          "children"
        ],
        "package": "tools.aqua.bgw.visual.CompoundVisual.children",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-compound-visual\\children.html",
        "details": [
          {
            "info": {
              "name": "children",
              "signature": "var children: List<SingleLayerVisual>",
              "doc": "The [children](tools.aqua.bgw.visual/CompoundVisual/children) of this stack. The first [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) gets displayed at the bottom of the stack."
            }
          }
        ]
      },
      "copy": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "CompoundVisual",
          "copy"
        ],
        "package": "tools.aqua.bgw.visual.CompoundVisual.copy",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-compound-visual\\copy.html",
        "details": [
          {
            "info": {
              "name": "copy",
              "signature": "open override fun copy(): CompoundVisual",
              "doc": "Copies this [CompoundVisual](tools.aqua.bgw.visual/CompoundVisual) to a new object recursively including children."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "CompoundVisual"
        ],
        "package": "tools.aqua.bgw.visual.CompoundVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-compound-visual\\index.html",
        "details": {
          "info": {
            "name": "CompoundVisual",
            "signature": "open class CompoundVisual(children: List<SingleLayerVisual>) : Visual",
            "doc": "A compound visual containing stacked SingleLayerVisuals.\n\nHint: Each [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) besides the bottom should have opacity in order to display all layers properly.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "children",
              "doc": "Children SingleLayerVisuals in the order they should be displayed, where the first [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) gets displayed at the bottom of the stack."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "var children: List<SingleLayerVisual>",
              "modifier": "var",
              "name": "children",
              "link": "tools.aqua.bgw.visual/CompoundVisual/children",
              "type": "[List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin.collections/-list/index.html)<[SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual)>",
              "defaultValue": "",
              "doc": "The [children](tools.aqua.bgw.visual/CompoundVisual/children) of this stack. The first [SingleLayerVisual](tools.aqua.bgw.visual/SingleLayerVisual) gets displayed at the bottom of the stack."
            }
          ],
          "functions": []
        }
      }
    },
    "ImageVisual": {
      "Companion": {
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ImageVisual",
            "Companion"
          ],
          "package": "tools.aqua.bgw.visual.ImageVisual.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "functions": [
              {
                "signature": "fun toDataURI(image: BufferedImage): String",
                "name": "toDataURI",
                "parameters": [
                  {
                    "modifier": "",
                    "name": "image",
                    "link": "tools.aqua.bgw.visual/ImageVisual/Companion/toDataURI",
                    "type": "[BufferedImage](https://docs.oracle.com/javase/8/docs/api/java/awt/image/BufferedImage.html)",
                    "defaultValue": "",
                    "isLambda": false
                  }
                ],
                "link": "tools.aqua.bgw.visual/ImageVisual/Companion/toDataURI",
                "returnType": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)",
                "doc": "",
                "isSuspend": false
              }
            ]
          }
        },
        "toDataURI": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "ImageVisual",
            "Companion",
            "toDataURI"
          ],
          "package": "tools.aqua.bgw.visual.ImageVisual.Companion.toDataURI",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\-companion\\to-data-u-r-i.html",
          "details": [
            {
              "info": {
                "name": "toDataURI",
                "signature": "fun toDataURI(image: BufferedImage): String",
                "doc": ""
              }
            }
          ]
        }
      },
      "ImageVisual": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "ImageVisual"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.ImageVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\-image-visual.html",
        "details": [
          {
            "info": {
              "name": "ImageVisual",
              "signature": "constructor(image: BufferedImage, width: Int = -1, height: Int = -1, offsetX: Int = 0, offsetY: Int = 0)",
              "doc": "Load image from [BufferedImage](https://docs.oracle.com/javase/8/docs/api/java/awt/image/BufferedImage.html)."
            }
          },
          {
            "info": {
              "name": "ImageVisual",
              "signature": "constructor(path: String, width: Int = -1, height: Int = -1, offsetX: Int = 0, offsetY: Int = 0)",
              "doc": "Loads an [ImageVisual](tools.aqua.bgw.visual/ImageVisual) from a path in resources."
            },
            "parameters": [
              {
                "name": "path",
                "doc": "Location of image file relative to /resources."
              }
            ]
          }
        ]
      },
      "copy": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "copy"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.copy",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\copy.html",
        "details": [
          {
            "info": {
              "name": "copy",
              "signature": "open override fun copy(): ImageVisual",
              "doc": "Copies this [Visual](tools.aqua.bgw.visual/Visual) to a new object."
            }
          }
        ]
      },
      "height": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "height"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.height",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\height.html",
        "details": [
          {
            "info": {
              "name": "height",
              "signature": "val height: Int",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\index.html",
        "details": {
          "info": {
            "name": "ImageVisual",
            "signature": "open class ImageVisual(path: String, val width: Int = -1, val height: Int = -1, val offsetX: Int = 0, val offsetY: Int = 0) : SingleLayerVisual",
            "doc": "Visual showing an Image.\n\nThe image gets stretched to the size of the component that this visual is embedded in.\n\nA sub-image can be loaded by passing offsetX/offsetY for the TOP_LEFT corner and width/height for the sub-image size. If width or height is passed as -1, the remaining image from offsetX/offsetY will be loaded.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "since": "1.0",
          "parameters": [
            {
              "name": "path",
              "doc": "Location of image file relative to /resources."
            }
          ],
          "throws": [
            {
              "name": "IllegalArgumentException",
              "doc": "If [path](tools.aqua.bgw.visual/ImageVisual/path) is not a valid [path](tools.aqua.bgw.visual/ImageVisual/path) or empty or if [path](tools.aqua.bgw.visual/ImageVisual/path) was not found in resources."
            }
          ]
        },
        "members": {
          "constructors": [],
          "properties": [
            {
              "signature": "val filters: Filter",
              "modifier": "val",
              "name": "filters",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/filters",
              "type": "[Filter](tools.aqua.bgw.style/Filter)",
              "defaultValue": "",
              "doc": "Additional filters that get applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var flipped: Flip",
              "modifier": "var",
              "name": "flipped",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/flipped",
              "type": "[Flip](tools.aqua.bgw.style/Flip)",
              "defaultValue": "",
              "doc": "The [flipped](tools.aqua.bgw.visual/SingleLayerVisual/flipped) state of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "val height: Int",
              "modifier": "val",
              "name": "height",
              "link": "tools.aqua.bgw.visual/ImageVisual/height",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Height of sub-image. Pass -1 to use full height. Default: -1."
            },
            {
              "signature": "val offsetX: Int = 0",
              "modifier": "val",
              "name": "offsetX",
              "link": "tools.aqua.bgw.visual/ImageVisual/offsetX",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "0",
              "doc": "Left bound of sub-image. Default: 0."
            },
            {
              "signature": "val offsetY: Int = 0",
              "modifier": "val",
              "name": "offsetY",
              "link": "tools.aqua.bgw.visual/ImageVisual/offsetY",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "0",
              "doc": "Top bound of sub-image. Default: 0."
            },
            {
              "signature": "var path: String",
              "modifier": "var",
              "name": "path",
              "link": "tools.aqua.bgw.visual/ImageVisual/path",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": ""
            },
            {
              "signature": "val style: Style",
              "modifier": "val",
              "name": "style",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/style",
              "type": "[Style](tools.aqua.bgw.style/Style)",
              "defaultValue": "",
              "doc": "Additional styling that gets applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var transparency: Double",
              "modifier": "var",
              "name": "transparency",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/transparency",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [transparency](tools.aqua.bgw.visual/SingleLayerVisual/transparency) / alpha channel for this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "val width: Int",
              "modifier": "val",
              "name": "width",
              "link": "tools.aqua.bgw.visual/ImageVisual/width",
              "type": "[Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-int/index.html)",
              "defaultValue": "",
              "doc": "Width of sub-image. Pass -1 to use full width. Default: -1."
            }
          ],
          "functions": []
        }
      },
      "offsetX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "offsetX"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.offsetX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\offset-x.html",
        "details": [
          {
            "info": {
              "name": "offsetX",
              "signature": "val offsetX: Int = 0",
              "doc": ""
            }
          }
        ]
      },
      "offsetY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "offsetY"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.offsetY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\offset-y.html",
        "details": [
          {
            "info": {
              "name": "offsetY",
              "signature": "val offsetY: Int = 0",
              "doc": ""
            }
          }
        ]
      },
      "pathProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "pathProperty"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.pathProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\path-property.html",
        "details": [
          {
            "info": {
              "name": "pathProperty",
              "signature": "val pathProperty: StringProperty",
              "doc": ""
            }
          }
        ]
      },
      "path": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "path"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.path",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\path.html",
        "details": [
          {
            "info": {
              "name": "path",
              "signature": "var path: String",
              "doc": ""
            }
          }
        ]
      },
      "width": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "ImageVisual",
          "width"
        ],
        "package": "tools.aqua.bgw.visual.ImageVisual.width",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-image-visual\\width.html",
        "details": [
          {
            "info": {
              "name": "width",
              "signature": "val width: Int",
              "doc": ""
            }
          }
        ]
      }
    },
    "SingleLayerVisual": {
      "filtersProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "filtersProperty"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.filtersProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\filters-property.html",
        "details": [
          {
            "info": {
              "name": "filtersProperty",
              "signature": "val filtersProperty: Filter",
              "doc": "Property for the [filters](tools.aqua.bgw.visual/SingleLayerVisual/filters) applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            "seeAlso": [
              {
                "name": "SingleLayerVisual.filters",
                "link": "tools.aqua.bgw.visual/SingleLayerVisual/filters"
              }
            ]
          }
        ]
      },
      "filters": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "filters"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.filters",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\filters.html",
        "details": [
          {
            "info": {
              "name": "filters",
              "signature": "val filters: Filter",
              "doc": "Additional filters that get applied to this [Visual](tools.aqua.bgw.visual/Visual).\n\nCritical failures, bugs or other undefined behaviour could occur when using this feature."
            }
          }
        ]
      },
      "flippedProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "flippedProperty"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.flippedProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\flipped-property.html",
        "details": [
          {
            "info": {
              "name": "flippedProperty",
              "signature": "val flippedProperty: Property<Flip>",
              "doc": "Property for the [flipped](tools.aqua.bgw.visual/SingleLayerVisual/flipped) state of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            "seeAlso": [
              {
                "name": "SingleLayerVisual.flipped",
                "link": "tools.aqua.bgw.visual/SingleLayerVisual/flipped"
              }
            ]
          }
        ]
      },
      "flipped": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "flipped"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.flipped",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\flipped.html",
        "details": [
          {
            "info": {
              "name": "flipped",
              "signature": "var flipped: Flip",
              "doc": "The [flipped](tools.aqua.bgw.visual/SingleLayerVisual/flipped) state of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            "seeAlso": [
              {
                "name": "Flip",
                "link": "tools.aqua.bgw.style/Flip"
              }
            ]
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\index.html",
        "details": {
          "info": {
            "name": "SingleLayerVisual",
            "signature": "sealed class SingleLayerVisual : Visual",
            "doc": "Baseclass for single layer visuals.",
            "tags": {
              "modifiers": [
                "sealed"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "ColorVisual",
              "link": "tools.aqua.bgw.visual/ColorVisual"
            },
            {
              "name": "ImageVisual",
              "link": "tools.aqua.bgw.visual/ImageVisual"
            },
            {
              "name": "TextVisual",
              "link": "tools.aqua.bgw.visual/TextVisual"
            }
          ]
        },
        "members": {
          "properties": [
            {
              "signature": "val filters: Filter",
              "modifier": "val",
              "name": "filters",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/filters",
              "type": "[Filter](tools.aqua.bgw.style/Filter)",
              "defaultValue": "",
              "doc": "Additional filters that get applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var flipped: Flip",
              "modifier": "var",
              "name": "flipped",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/flipped",
              "type": "[Flip](tools.aqua.bgw.style/Flip)",
              "defaultValue": "",
              "doc": "The [flipped](tools.aqua.bgw.visual/SingleLayerVisual/flipped) state of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "val style: Style",
              "modifier": "val",
              "name": "style",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/style",
              "type": "[Style](tools.aqua.bgw.style/Style)",
              "defaultValue": "",
              "doc": "Additional styling that gets applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var transparency: Double",
              "modifier": "var",
              "name": "transparency",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/transparency",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [transparency](tools.aqua.bgw.visual/SingleLayerVisual/transparency) / alpha channel for this [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ],
          "functions": [
            {
              "signature": "abstract fun copy(): Visual",
              "name": "copy",
              "link": "tools.aqua.bgw.visual/Visual/copy",
              "returnType": "[Visual](tools.aqua.bgw.visual/Visual)",
              "doc": "Copies this [Visual](tools.aqua.bgw.visual/Visual) to a new object."
            }
          ]
        }
      },
      "styleProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "styleProperty"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.styleProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\style-property.html",
        "details": [
          {
            "info": {
              "name": "styleProperty",
              "signature": "val styleProperty: Style",
              "doc": "Property for the [style](tools.aqua.bgw.visual/SingleLayerVisual/style) applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            "seeAlso": [
              {
                "name": "SingleLayerVisual.style",
                "link": "tools.aqua.bgw.visual/SingleLayerVisual/style"
              }
            ]
          }
        ]
      },
      "style": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "style"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.style",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\style.html",
        "details": [
          {
            "info": {
              "name": "style",
              "signature": "val style: Style",
              "doc": "Additional styling that gets applied to this [Visual](tools.aqua.bgw.visual/Visual).\n\nCritical failures, bugs or other undefined behaviour could occur when using this feature."
            }
          }
        ]
      },
      "transparencyProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "transparencyProperty"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.transparencyProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\transparency-property.html",
        "details": [
          {
            "info": {
              "name": "transparencyProperty",
              "signature": "val transparencyProperty: LimitedDoubleProperty",
              "doc": "Property for the [transparency](tools.aqua.bgw.visual/SingleLayerVisual/transparency) / alpha channel for this [Visual](tools.aqua.bgw.visual/Visual).\n\nMust be set between 0 (full transparent) and 1 (non-transparent / solid). Default: 1."
            },
            "seeAlso": [
              {
                "name": "SingleLayerVisual.transparency",
                "link": "tools.aqua.bgw.visual/SingleLayerVisual/transparency"
              }
            ]
          }
        ]
      },
      "transparency": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "SingleLayerVisual",
          "transparency"
        ],
        "package": "tools.aqua.bgw.visual.SingleLayerVisual.transparency",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-single-layer-visual\\transparency.html",
        "details": [
          {
            "info": {
              "name": "transparency",
              "signature": "var transparency: Double",
              "doc": "The [transparency](tools.aqua.bgw.visual/SingleLayerVisual/transparency) / alpha channel for this [Visual](tools.aqua.bgw.visual/Visual).\n\nMust be set between 0 (full transparent) and 1 (non-transparent / solid). Default: 1."
            }
          }
        ]
      }
    },
    "TextVisual": {
      "TextVisual": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "TextVisual"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.TextVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\-text-visual.html",
        "details": [
          {
            "info": {
              "name": "TextVisual",
              "signature": "constructor(text: String, font: Font = Font(), alignment: Alignment = Alignment.CENTER, offsetX: Number = 0, offsetY: Number = 0)",
              "doc": "Creates a [TextVisual](tools.aqua.bgw.visual/TextVisual) with given text."
            },
            "parameters": [
              {
                "name": "text",
                "doc": "Text to display."
              },
              {
                "name": "font",
                "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the text. Default: default [Font](tools.aqua.bgw.util/Font) constructor."
              },
              {
                "name": "alignment",
                "doc": "[Alignment](tools.aqua.bgw.core/Alignment) for the text. Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)s.aqua.bgw.core/Alignment).CENTER."
              },
              {
                "name": "offsetX",
                "doc": "The horizontal offset of the text from its anchorpoint. Default: 0."
              },
              {
                "name": "offsetY",
                "doc": "The vertical offset of the text from its anchorpoint. Default: 0."
              }
            ]
          }
        ]
      },
      "alignmentProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "alignmentProperty"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.alignmentProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\alignment-property.html",
        "details": [
          {
            "info": {
              "name": "alignmentProperty",
              "signature": "val alignmentProperty: Property<Alignment>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the [text](tools.aqua.bgw.core/Alignment)."
            },
            "seeAlso": [
              {
                "name": "TextVisual.alignment",
                "link": "tools.aqua.bgw.visual/TextVisual/alignment"
              }
            ]
          }
        ]
      },
      "alignment": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "alignment"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.alignment",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\alignment.html",
        "details": [
          {
            "info": {
              "name": "alignment",
              "signature": "var alignment: Alignment",
              "doc": "The [text](tools.aqua.bgw.core/Alignment)."
            }
          }
        ]
      },
      "copy": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "copy"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.copy",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\copy.html",
        "details": [
          {
            "info": {
              "name": "copy",
              "signature": "open override fun copy(): TextVisual",
              "doc": "Copies this [TextVisual](tools.aqua.bgw.visual/TextVisual) to a new object."
            }
          }
        ]
      },
      "fontProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "fontProperty"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.fontProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\font-property.html",
        "details": [
          {
            "info": {
              "name": "fontProperty",
              "signature": "val fontProperty: Property<Font>",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the displayed [text](tools.aqua.bgw.util/Font)."
            },
            "seeAlso": [
              {
                "name": "TextVisual.font",
                "link": "tools.aqua.bgw.visual/TextVisual/font"
              }
            ]
          }
        ]
      },
      "font": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "font"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.font",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\font.html",
        "details": [
          {
            "info": {
              "name": "font",
              "signature": "var font: Font",
              "doc": "The displayed [text](tools.aqua.bgw.util/Font)."
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\index.html",
        "details": {
          "info": {
            "name": "TextVisual",
            "signature": "open class TextVisual(text: String, font: Font = Font(), alignment: Alignment = Alignment.CENTER, offsetX: Number = 0, offsetY: Number = 0) : SingleLayerVisual",
            "doc": "A visual displaying text.",
            "tags": {
              "modifiers": [
                "open"
              ],
              "type": "class"
            }
          },
          "parameters": [
            {
              "name": "text",
              "doc": "Text to display."
            },
            {
              "name": "font",
              "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the [text](tools.aqua.bgw.visual/TextVisual/text). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
            },
            {
              "name": "alignment",
              "doc": "[Alignment](tools.aqua.bgw.core/Alignment) for the [text](tools.aqua.bgw.visual/TextVisual/text). Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)s.aqua.bgw.core/Alignment).CENTER."
            },
            {
              "name": "offsetX",
              "doc": "The horizontal offset of the [text](tools.aqua.bgw.visual/TextVisual/text) from its anchorpoint. Default: 0."
            },
            {
              "name": "offsetY",
              "doc": "The vertical offset of the [text](tools.aqua.bgw.visual/TextVisual/text) from its anchorpoint. Default: 0."
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor(text: String, font: Font = Font(), alignment: Alignment = Alignment.CENTER, offsetX: Number = 0, offsetY: Number = 0)",
              "parameters": [
                {
                  "modifier": "",
                  "name": "text",
                  "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
                  "defaultValue": "",
                  "doc": "Text to display."
                },
                {
                  "modifier": "",
                  "name": "font",
                  "type": "[Font](tools.aqua.bgw.util/Font)",
                  "defaultValue": "[Font](tools.aqua.bgw.util/Font)()",
                  "doc": "[Font](tools.aqua.bgw.util/Font) to be used for the [text](tools.aqua.bgw.visual/TextVisual/text). Default: default [Font](tools.aqua.bgw.util/Font) constructor."
                },
                {
                  "modifier": "",
                  "name": "alignment",
                  "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
                  "defaultValue": "[Alignment](tools.aqua.bgw.core/Alignment).CENTER",
                  "doc": "[Alignment](tools.aqua.bgw.core/Alignment) for the [text](tools.aqua.bgw.visual/TextVisual/text). Default: [Alignment.CENTER](tools.aqua.bgw.core/Alignment/CENTER)s.aqua.bgw.core/Alignment).CENTER."
                },
                {
                  "modifier": "",
                  "name": "offsetX",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The horizontal offset of the [text](tools.aqua.bgw.visual/TextVisual/text) from its anchorpoint. Default: 0."
                },
                {
                  "modifier": "",
                  "name": "offsetY",
                  "type": "[Number](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-number/index.html)",
                  "defaultValue": "0",
                  "doc": "The vertical offset of the [text](tools.aqua.bgw.visual/TextVisual/text) from its anchorpoint. Default: 0."
                }
              ],
              "doc": "Creates a [TextVisual](tools.aqua.bgw.visual/TextVisual) with given text.",
              "isSecondaryConstructor": true
            }
          ],
          "properties": [
            {
              "signature": "var alignment: Alignment",
              "modifier": "var",
              "name": "alignment",
              "link": "tools.aqua.bgw.visual/TextVisual/alignment",
              "type": "[Alignment](tools.aqua.bgw.core/Alignment)",
              "defaultValue": "",
              "doc": "The [text](tools.aqua.bgw.core/Alignment)."
            },
            {
              "signature": "val filters: Filter",
              "modifier": "val",
              "name": "filters",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/filters",
              "type": "[Filter](tools.aqua.bgw.style/Filter)",
              "defaultValue": "",
              "doc": "Additional filters that get applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var flipped: Flip",
              "modifier": "var",
              "name": "flipped",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/flipped",
              "type": "[Flip](tools.aqua.bgw.style/Flip)",
              "defaultValue": "",
              "doc": "The [flipped](tools.aqua.bgw.visual/SingleLayerVisual/flipped) state of this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var font: Font",
              "modifier": "var",
              "name": "font",
              "link": "tools.aqua.bgw.visual/TextVisual/font",
              "type": "[Font](tools.aqua.bgw.util/Font)",
              "defaultValue": "",
              "doc": "The displayed [text](tools.aqua.bgw.util/Font)."
            },
            {
              "signature": "var offsetX: Double",
              "modifier": "var",
              "name": "offsetX",
              "link": "tools.aqua.bgw.visual/TextVisual/offsetX",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The x-axis [text](tools.aqua.bgw.visual/TextVisual/text) offset."
            },
            {
              "signature": "var offsetY: Double",
              "modifier": "var",
              "name": "offsetY",
              "link": "tools.aqua.bgw.visual/TextVisual/offsetY",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The y-axis [text](tools.aqua.bgw.visual/TextVisual/text) offset."
            },
            {
              "signature": "val style: Style",
              "modifier": "val",
              "name": "style",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/style",
              "type": "[Style](tools.aqua.bgw.style/Style)",
              "defaultValue": "",
              "doc": "Additional styling that gets applied to this [Visual](tools.aqua.bgw.visual/Visual)."
            },
            {
              "signature": "var text: String",
              "modifier": "var",
              "name": "text",
              "link": "tools.aqua.bgw.visual/TextVisual/text",
              "type": "[String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-string/index.html)",
              "defaultValue": "",
              "doc": "The displayed [text](tools.aqua.bgw.visual/TextVisual/text)."
            },
            {
              "signature": "var transparency: Double",
              "modifier": "var",
              "name": "transparency",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual/transparency",
              "type": "[Double](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin-stdlib/kotlin/-double/index.html)",
              "defaultValue": "",
              "doc": "The [transparency](tools.aqua.bgw.visual/SingleLayerVisual/transparency) / alpha channel for this [Visual](tools.aqua.bgw.visual/Visual)."
            }
          ],
          "functions": []
        }
      },
      "offsetXProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "offsetXProperty"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.offsetXProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\offset-x-property.html",
        "details": [
          {
            "info": {
              "name": "offsetXProperty",
              "signature": "val offsetXProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the x-axis [text](tools.aqua.bgw.visual/TextVisual/text) offset."
            },
            "seeAlso": [
              {
                "name": "TextVisual.offsetX",
                "link": "tools.aqua.bgw.visual/TextVisual/offsetX"
              }
            ]
          }
        ]
      },
      "offsetX": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "offsetX"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.offsetX",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\offset-x.html",
        "details": [
          {
            "info": {
              "name": "offsetX",
              "signature": "var offsetX: Double",
              "doc": "The x-axis [text](tools.aqua.bgw.visual/TextVisual/text) offset."
            }
          }
        ]
      },
      "offsetYProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "offsetYProperty"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.offsetYProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\offset-y-property.html",
        "details": [
          {
            "info": {
              "name": "offsetYProperty",
              "signature": "val offsetYProperty: DoubleProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the y-axis [text](tools.aqua.bgw.visual/TextVisual/text) offset."
            },
            "seeAlso": [
              {
                "name": "TextVisual.offsetY",
                "link": "tools.aqua.bgw.visual/TextVisual/offsetY"
              }
            ]
          }
        ]
      },
      "offsetY": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "offsetY"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.offsetY",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\offset-y.html",
        "details": [
          {
            "info": {
              "name": "offsetY",
              "signature": "var offsetY: Double",
              "doc": "The y-axis [text](tools.aqua.bgw.visual/TextVisual/text) offset."
            }
          }
        ]
      },
      "textProperty": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "textProperty"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.textProperty",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\text-property.html",
        "details": [
          {
            "info": {
              "name": "textProperty",
              "signature": "val textProperty: StringProperty",
              "doc": "[Property](tools.aqua.bgw.observable.properties/Property) for the displayed [text](tools.aqua.bgw.visual/TextVisual/text)."
            },
            "seeAlso": [
              {
                "name": "TextVisual.text",
                "link": "tools.aqua.bgw.visual/TextVisual/text"
              }
            ]
          }
        ]
      },
      "text": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "TextVisual",
          "text"
        ],
        "package": "tools.aqua.bgw.visual.TextVisual.text",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-text-visual\\text.html",
        "details": [
          {
            "info": {
              "name": "text",
              "signature": "var text: String",
              "doc": "The displayed [text](tools.aqua.bgw.visual/TextVisual/text)."
            }
          }
        ]
      }
    },
    "Visual": {
      "Companion": {
        "EMPTY": {
          "type": "none",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "Visual",
            "Companion",
            "EMPTY"
          ],
          "package": "tools.aqua.bgw.visual.Visual.Companion.EMPTY",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-visual\\-companion\\-e-m-p-t-y.html",
          "details": [
            {
              "info": {
                "name": "EMPTY",
                "signature": "val EMPTY: Visual",
                "doc": "An empty [Visual](tools.aqua.bgw.visual/Visual)."
              }
            }
          ]
        },
        "_index": {
          "type": "global",
          "breadcrumbs": [
            "tools.aqua.bgw.visual",
            "Visual",
            "Companion"
          ],
          "package": "tools.aqua.bgw.visual.Visual.Companion",
          "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-visual\\-companion\\index.html",
          "details": {
            "info": {
              "name": "Companion",
              "signature": "object Companion",
              "doc": "",
              "tags": {
                "modifiers": [],
                "type": "object"
              }
            }
          },
          "members": {
            "properties": [
              {
                "signature": "val EMPTY: Visual",
                "modifier": "val",
                "name": "EMPTY",
                "link": "tools.aqua.bgw.visual/Visual/Companion/EMPTY",
                "type": "[Visual](tools.aqua.bgw.visual/Visual)",
                "defaultValue": "",
                "doc": "An empty [Visual](tools.aqua.bgw.visual/Visual)."
              }
            ]
          }
        }
      },
      "Visual": {
        "type": "extra",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "Visual",
          "Visual"
        ],
        "package": "tools.aqua.bgw.visual.Visual.Visual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-visual\\-visual.html",
        "details": [
          {
            "info": {
              "name": "Visual",
              "signature": "constructor()",
              "doc": "Creates a [Visual](tools.aqua.bgw.visual/Visual)."
            }
          }
        ]
      },
      "copy": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "Visual",
          "copy"
        ],
        "package": "tools.aqua.bgw.visual.Visual.copy",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-visual\\copy.html",
        "details": [
          {
            "info": {
              "name": "copy",
              "signature": "abstract fun copy(): Visual",
              "doc": "Copies this [Visual](tools.aqua.bgw.visual/Visual) to a new object."
            }
          }
        ]
      },
      "id": {
        "type": "none",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "Visual",
          "id"
        ],
        "package": "tools.aqua.bgw.visual.Visual.id",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-visual\\id.html",
        "details": [
          {
            "info": {
              "name": "id",
              "signature": "val id: String",
              "doc": ""
            }
          }
        ]
      },
      "_index": {
        "type": "global",
        "breadcrumbs": [
          "tools.aqua.bgw.visual",
          "Visual"
        ],
        "package": "tools.aqua.bgw.visual.Visual",
        "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\-visual\\index.html",
        "details": {
          "info": {
            "name": "Visual",
            "signature": "abstract class Visual",
            "doc": "Visual baseclass.",
            "tags": {
              "modifiers": [
                "abstract"
              ],
              "type": "class"
            }
          },
          "inheritors": [
            {
              "name": "CompoundVisual",
              "link": "tools.aqua.bgw.visual/CompoundVisual"
            },
            {
              "name": "SingleLayerVisual",
              "link": "tools.aqua.bgw.visual/SingleLayerVisual"
            }
          ]
        },
        "members": {
          "constructors": [
            {
              "signature": "constructor()",
              "doc": "Creates a [Visual](tools.aqua.bgw.visual/Visual).",
              "isSecondaryConstructor": true
            }
          ],
          "types": [
            {
              "name": "Companion",
              "doc": "",
              "link": "tools.aqua.bgw.visual/Visual/Companion"
            }
          ],
          "functions": [
            {
              "signature": "abstract fun copy(): Visual",
              "name": "copy",
              "link": "tools.aqua.bgw.visual/Visual/copy",
              "returnType": "[Visual](tools.aqua.bgw.visual/Visual)",
              "doc": "Copies this [Visual](tools.aqua.bgw.visual/Visual) to a new object."
            }
          ]
        }
      }
    },
    "_index": {
      "type": "global",
      "breadcrumbs": [
        "tools.aqua.bgw.visual"
      ],
      "package": "tools.aqua.bgw.visual",
      "path": "example\\htmlPartial\\tools.aqua.bgw.visual\\index.html",
      "details": {
        "info": {
          "name": "Package-level declarations",
          "signature": "open class ColorVisual(color: Color) : SingleLayerVisual",
          "doc": "",
          "tags": {
            "modifiers": [
              "open"
            ],
            "type": "class"
          }
        }
      },
      "members": {
        "types": [
          {
            "name": "ColorVisual",
            "doc": "A solid color visual. Displays a rectangle filled with the given color.",
            "link": "tools.aqua.bgw.visual/ColorVisual"
          },
          {
            "name": "CompoundVisual",
            "doc": "A compound visual containing stacked SingleLayerVisuals.",
            "link": "tools.aqua.bgw.visual/CompoundVisual"
          },
          {
            "name": "ImageVisual",
            "doc": "Visual showing an Image.",
            "link": "tools.aqua.bgw.visual/ImageVisual"
          },
          {
            "name": "SingleLayerVisual",
            "doc": "Baseclass for single layer visuals.",
            "link": "tools.aqua.bgw.visual/SingleLayerVisual"
          },
          {
            "name": "TextVisual",
            "doc": "A visual displaying text.",
            "link": "tools.aqua.bgw.visual/TextVisual"
          },
          {
            "name": "Visual",
            "doc": "[Visual](tools.aqua.bgw.visual/Visual) baseclass.",
            "link": "tools.aqua.bgw.visual/Visual"
          }
        ]
      }
    }
  }
}