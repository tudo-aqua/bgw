(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bgw-gui"] = factory();
	else
		root["bgw-gui"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HiddenText: () => (/* binding */ HiddenText),
/* harmony export */   LiveRegion: () => (/* binding */ LiveRegion),
/* harmony export */   useAnnouncement: () => (/* binding */ useAnnouncement)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);


const hiddenStyles = {
  display: 'none'
};
function HiddenText(_ref) {
  let {
    id,
    value
  } = _ref;
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    id: id,
    style: hiddenStyles
  }, value);
}

function LiveRegion(_ref) {
  let {
    id,
    announcement,
    ariaLiveType = "assertive"
  } = _ref;
  // Hide element visually but keep it readable by screen readers
  const visuallyHidden = {
    position: 'fixed',
    top: 0,
    left: 0,
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: 'hidden',
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(100%)',
    whiteSpace: 'nowrap'
  };
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    id: id,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true
  }, announcement);
}

function useAnnouncement() {
  const [announcement, setAnnouncement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const announce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(value => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}




/***/ }),

/***/ "../../node_modules/@dnd-kit/core/dist/core.esm.js":
/*!*********************************************************!*\
  !*** ../../node_modules/@dnd-kit/core/dist/core.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AutoScrollActivator: () => (/* binding */ AutoScrollActivator),
/* harmony export */   DndContext: () => (/* binding */ DndContext),
/* harmony export */   DragOverlay: () => (/* binding */ DragOverlay),
/* harmony export */   KeyboardCode: () => (/* binding */ KeyboardCode),
/* harmony export */   KeyboardSensor: () => (/* binding */ KeyboardSensor),
/* harmony export */   MeasuringFrequency: () => (/* binding */ MeasuringFrequency),
/* harmony export */   MeasuringStrategy: () => (/* binding */ MeasuringStrategy),
/* harmony export */   MouseSensor: () => (/* binding */ MouseSensor),
/* harmony export */   PointerSensor: () => (/* binding */ PointerSensor),
/* harmony export */   TouchSensor: () => (/* binding */ TouchSensor),
/* harmony export */   TraversalOrder: () => (/* binding */ TraversalOrder),
/* harmony export */   applyModifiers: () => (/* binding */ applyModifiers),
/* harmony export */   closestCenter: () => (/* binding */ closestCenter),
/* harmony export */   closestCorners: () => (/* binding */ closestCorners),
/* harmony export */   defaultAnnouncements: () => (/* binding */ defaultAnnouncements),
/* harmony export */   defaultCoordinates: () => (/* binding */ defaultCoordinates),
/* harmony export */   defaultDropAnimation: () => (/* binding */ defaultDropAnimationConfiguration),
/* harmony export */   defaultDropAnimationSideEffects: () => (/* binding */ defaultDropAnimationSideEffects),
/* harmony export */   defaultKeyboardCoordinateGetter: () => (/* binding */ defaultKeyboardCoordinateGetter),
/* harmony export */   defaultScreenReaderInstructions: () => (/* binding */ defaultScreenReaderInstructions),
/* harmony export */   getClientRect: () => (/* binding */ getClientRect),
/* harmony export */   getFirstCollision: () => (/* binding */ getFirstCollision),
/* harmony export */   getScrollableAncestors: () => (/* binding */ getScrollableAncestors),
/* harmony export */   pointerWithin: () => (/* binding */ pointerWithin),
/* harmony export */   rectIntersection: () => (/* binding */ rectIntersection),
/* harmony export */   useDndContext: () => (/* binding */ useDndContext),
/* harmony export */   useDndMonitor: () => (/* binding */ useDndMonitor),
/* harmony export */   useDraggable: () => (/* binding */ useDraggable),
/* harmony export */   useDroppable: () => (/* binding */ useDroppable),
/* harmony export */   useSensor: () => (/* binding */ useSensor),
/* harmony export */   useSensors: () => (/* binding */ useSensors)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
/* harmony import */ var _dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @dnd-kit/utilities */ "../../node_modules/@dnd-kit/utilities/dist/utilities.esm.js");
/* harmony import */ var _dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dnd-kit/accessibility */ "../../node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js");





const DndMonitorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);

function useDndMonitor(listener) {
  const registerListener = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DndMonitorContext);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!registerListener) {
      throw new Error('useDndMonitor must be used within a children of <DndContext>');
    }

    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}

function useDndMonitorProvider() {
  const [listeners] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => new Set());
  const registerListener = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(listener => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(_ref => {
    let {
      type,
      event
    } = _ref;
    listeners.forEach(listener => {
      var _listener$type;

      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}

const defaultScreenReaderInstructions = {
  draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
};
const defaultAnnouncements = {
  onDragStart(_ref) {
    let {
      active
    } = _ref;
    return "Picked up draggable item " + active.id + ".";
  },

  onDragOver(_ref2) {
    let {
      active,
      over
    } = _ref2;

    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }

    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },

  onDragEnd(_ref3) {
    let {
      active,
      over
    } = _ref3;

    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }

    return "Draggable item " + active.id + " was dropped.";
  },

  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }

};

function Accessibility(_ref) {
  let {
    announcements = defaultAnnouncements,
    container,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref;
  const {
    announce,
    announcement
  } = (0,_dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__.useAnnouncement)();
  const liveRegionId = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)("DndLiveRegion");
  const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setMounted(true);
  }, []);
  useDndMonitor((0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    onDragStart(_ref2) {
      let {
        active
      } = _ref2;
      announce(announcements.onDragStart({
        active
      }));
    },

    onDragMove(_ref3) {
      let {
        active,
        over
      } = _ref3;

      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },

    onDragOver(_ref4) {
      let {
        active,
        over
      } = _ref4;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },

    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },

    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }

  }), [announce, announcements]));

  if (!mounted) {
    return null;
  }

  const markup = react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__.HiddenText, {
    id: hiddenTextDescribedById,
    value: screenReaderInstructions.draggable
  }), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__.LiveRegion, {
    id: liveRegionId,
    announcement: announcement
  }));
  return container ? (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(markup, container) : markup;
}

var Action;

(function (Action) {
  Action["DragStart"] = "dragStart";
  Action["DragMove"] = "dragMove";
  Action["DragEnd"] = "dragEnd";
  Action["DragCancel"] = "dragCancel";
  Action["DragOver"] = "dragOver";
  Action["RegisterDroppable"] = "registerDroppable";
  Action["SetDroppableDisabled"] = "setDroppableDisabled";
  Action["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));

function noop() {}

function useSensor(sensor, options) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    sensor,
    options: options != null ? options : {}
  }), // eslint-disable-next-line react-hooks/exhaustive-deps
  [sensor, options]);
}

function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }

  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...sensors].filter(sensor => sensor != null), // eslint-disable-next-line react-hooks/exhaustive-deps
  [...sensors]);
}

const defaultCoordinates = /*#__PURE__*/Object.freeze({
  x: 0,
  y: 0
});

/**
 * Returns the distance between two points
 */
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

function getRelativeTransformOrigin(event, rect) {
  const eventCoordinates = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(event);

  if (!eventCoordinates) {
    return '0 0';
  }

  const transformOrigin = {
    x: (eventCoordinates.x - rect.left) / rect.width * 100,
    y: (eventCoordinates.y - rect.top) / rect.height * 100
  };
  return transformOrigin.x + "% " + transformOrigin.y + "%";
}

/**
 * Sort collisions from smallest to greatest value
 */
function sortCollisionsAsc(_ref, _ref2) {
  let {
    data: {
      value: a
    }
  } = _ref;
  let {
    data: {
      value: b
    }
  } = _ref2;
  return a - b;
}
/**
 * Sort collisions from greatest to smallest value
 */

function sortCollisionsDesc(_ref3, _ref4) {
  let {
    data: {
      value: a
    }
  } = _ref3;
  let {
    data: {
      value: b
    }
  } = _ref4;
  return b - a;
}
/**
 * Returns the coordinates of the corners of a given rectangle:
 * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]
 */

function cornersOfRectangle(_ref5) {
  let {
    left,
    top,
    height,
    width
  } = _ref5;
  return [{
    x: left,
    y: top
  }, {
    x: left + width,
    y: top
  }, {
    x: left,
    y: top + height
  }, {
    x: left + width,
    y: top + height
  }];
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }

  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}

/**
 * Returns the coordinates of the center of a given ClientRect
 */

function centerOfRectangle(rect, left, top) {
  if (left === void 0) {
    left = rect.left;
  }

  if (top === void 0) {
    top = rect.top;
  }

  return {
    x: left + rect.width * 0.5,
    y: top + rect.height * 0.5
  };
}
/**
 * Returns the closest rectangles from an array of rectangles to the center of a given
 * rectangle.
 */


const closestCenter = _ref => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];

  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);

    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }

  return collisions.sort(sortCollisionsAsc);
};

/**
 * Returns the closest rectangles from an array of rectangles to the corners of
 * another rectangle.
 */

const closestCorners = _ref => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const corners = cornersOfRectangle(collisionRect);
  const collisions = [];

  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);

    if (rect) {
      const rectCorners = cornersOfRectangle(rect);
      const distances = corners.reduce((accumulator, corner, index) => {
        return accumulator + distanceBetween(rectCorners[index], corner);
      }, 0);
      const effectiveDistance = Number((distances / 4).toFixed(4));
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: effectiveDistance
        }
      });
    }
  }

  return collisions.sort(sortCollisionsAsc);
};

/**
 * Returns the intersecting rectangle area between two rectangles
 */

function getIntersectionRatio(entry, target) {
  const top = Math.max(target.top, entry.top);
  const left = Math.max(target.left, entry.left);
  const right = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right - left;
  const height = bottom - top;

  if (left < right && top < bottom) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)


  return 0;
}
/**
 * Returns the rectangles that has the greatest intersection area with a given
 * rectangle in an array of rectangles.
 */

const rectIntersection = _ref => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const collisions = [];

  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);

    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);

      if (intersectionRatio > 0) {
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }

  return collisions.sort(sortCollisionsDesc);
};

/**
 * Check if a given point is contained within a bounding rectangle
 */

function isPointWithinRect(point, rect) {
  const {
    top,
    left,
    bottom,
    right
  } = rect;
  return top <= point.y && point.y <= bottom && left <= point.x && point.x <= right;
}
/**
 * Returns the rectangles that the pointer is hovering over
 */


const pointerWithin = _ref => {
  let {
    droppableContainers,
    droppableRects,
    pointerCoordinates
  } = _ref;

  if (!pointerCoordinates) {
    return [];
  }

  const collisions = [];

  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);

    if (rect && isPointWithinRect(pointerCoordinates, rect)) {
      /* There may be more than a single rectangle intersecting
       * with the pointer coordinates. In order to sort the
       * colliding rectangles, we measure the distance between
       * the pointer and the corners of the intersecting rectangle
       */
      const corners = cornersOfRectangle(rect);
      const distances = corners.reduce((accumulator, corner) => {
        return accumulator + distanceBetween(pointerCoordinates, corner);
      }, 0);
      const effectiveDistance = Number((distances / 4).toFixed(4));
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: effectiveDistance
        }
      });
    }
  }

  return collisions.sort(sortCollisionsAsc);
};

function adjustScale(transform, rect1, rect2) {
  return { ...transform,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}

function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}

function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }

    return adjustments.reduce((acc, adjustment) => ({ ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), { ...rect
    });
  };
}
const getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);

function parseTransform(transform) {
  if (transform.startsWith('matrix3d(')) {
    const transformArray = transform.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform.startsWith('matrix(')) {
    const transformArray = transform.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }

  return null;
}

function inverseTransform(rect, transform, transformOrigin) {
  const parsedTransform = parseTransform(transform);

  if (!parsedTransform) {
    return rect;
  }

  const {
    scaleX,
    scaleY,
    x: translateX,
    y: translateY
  } = parsedTransform;
  const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
  const y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));
  const w = scaleX ? rect.width / scaleX : rect.width;
  const h = scaleY ? rect.height / scaleY : rect.height;
  return {
    width: w,
    height: h,
    top: y,
    right: x + w,
    bottom: y + h,
    left: x
  };
}

const defaultOptions = {
  ignoreTransform: false
};
/**
 * Returns the bounding client rect of an element relative to the viewport.
 */

function getClientRect(element, options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  let rect = element.getBoundingClientRect();

  if (options.ignoreTransform) {
    const {
      transform,
      transformOrigin
    } = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(element).getComputedStyle(element);

    if (transform) {
      rect = inverseTransform(rect, transform, transformOrigin);
    }
  }

  const {
    top,
    left,
    width,
    height,
    bottom,
    right
  } = rect;
  return {
    top,
    left,
    width,
    height,
    bottom,
    right
  };
}
/**
 * Returns the bounding client rect of an element relative to the viewport.
 *
 * @remarks
 * The ClientRect returned by this method does not take into account transforms
 * applied to the element it measures.
 *
 */

function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}

function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}

function isFixed(node, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(node).getComputedStyle(node);
  }

  return computedStyle.position === 'fixed';
}

function isScrollable(element, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(element).getComputedStyle(element);
  }

  const overflowRegex = /(auto|scroll|overlay)/;
  const properties = ['overflow', 'overflowX', 'overflowY'];
  return properties.some(property => {
    const value = computedStyle[property];
    return typeof value === 'string' ? overflowRegex.test(value) : false;
  });
}

function getScrollableAncestors(element, limit) {
  const scrollParents = [];

  function findScrollableAncestors(node) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }

    if (!node) {
      return scrollParents;
    }

    if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isDocument)(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
      scrollParents.push(node.scrollingElement);
      return scrollParents;
    }

    if (!(0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(node) || (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isSVGElement)(node)) {
      return scrollParents;
    }

    if (scrollParents.includes(node)) {
      return scrollParents;
    }

    const computedStyle = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(element).getComputedStyle(node);

    if (node !== element) {
      if (isScrollable(node, computedStyle)) {
        scrollParents.push(node);
      }
    }

    if (isFixed(node, computedStyle)) {
      return scrollParents;
    }

    return findScrollableAncestors(node.parentNode);
  }

  if (!element) {
    return scrollParents;
  }

  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node) {
  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}

function getScrollableElement(element) {
  if (!_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.canUseDOM || !element) {
    return null;
  }

  if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isWindow)(element)) {
    return element;
  }

  if (!(0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isNode)(element)) {
    return null;
  }

  if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isDocument)(element) || element === (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(element).scrollingElement) {
    return window;
  }

  if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(element)) {
    return element;
  }

  return null;
}

function getScrollXCoordinate(element) {
  if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isWindow)(element)) {
    return element.scrollX;
  }

  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isWindow)(element)) {
    return element.scrollY;
  }

  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}

var Direction;

(function (Direction) {
  Direction[Direction["Forward"] = 1] = "Forward";
  Direction[Direction["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));

function isDocumentScrollingElement(element) {
  if (!_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.canUseDOM || !element) {
    return false;
  }

  return element === document.scrollingElement;
}

function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}

const defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
  let {
    top,
    left,
    right,
    bottom
  } = _ref;

  if (acceleration === void 0) {
    acceleration = 10;
  }

  if (thresholdPercentage === void 0) {
    thresholdPercentage = defaultThreshold;
  }

  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };

  if (!isTop && top <= scrollContainerRect.top + threshold.height) {
    // Scroll Up
    direction.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
    // Scroll Down
    direction.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
  }

  if (!isRight && right >= scrollContainerRect.right - threshold.width) {
    // Scroll Right
    direction.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
    // Scroll Left
    direction.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
  }

  return {
    direction,
    speed
  };
}

function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }

  const {
    top,
    left,
    right,
    bottom
  } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}

function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(acc, getScrollCoordinates(node));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollXCoordinate(node);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollYCoordinate(node);
  }, 0);
}

function scrollIntoViewIfNeeded(element, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }

  if (!element) {
    return;
  }

  const {
    top,
    left,
    bottom,
    right
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);

  if (!firstScrollableAncestor) {
    return;
  }

  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
    element.scrollIntoView({
      block: 'center',
      inline: 'center'
    });
  }
}

const properties = [['x', ['left', 'right'], getScrollXOffset], ['y', ['top', 'bottom'], getScrollYOffset]];
class Rect {
  constructor(rect, element) {
    this.rect = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.right = void 0;
    this.left = void 0;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = { ...rect
    };
    this.width = rect.width;
    this.height = rect.height;

    for (const [axis, keys, getScrollOffset] of properties) {
      for (const key of keys) {
        Object.defineProperty(this, key, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }

    Object.defineProperty(this, 'rect', {
      enumerable: false
    });
  }

}

class Listeners {
  constructor(target) {
    this.target = void 0;
    this.listeners = [];

    this.removeAll = () => {
      this.listeners.forEach(listener => {
        var _this$target;

        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
      });
    };

    this.target = target;
  }

  add(eventName, handler, options) {
    var _this$target2;

    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }

}

function getEventListenerTarget(target) {
  // If the `event.target` element is removed from the document events will still be targeted
  // at it, and hence won't always bubble up to the window or document anymore.
  // If there is any risk of an element being removed while it is being dragged,
  // the best practice is to attach the event listeners directly to the target.
  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget
  const {
    EventTarget
  } = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(target);
  return target instanceof EventTarget ? target : (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(target);
}

function hasExceededDistance(delta, measurement) {
  const dx = Math.abs(delta.x);
  const dy = Math.abs(delta.y);

  if (typeof measurement === 'number') {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }

  if ('x' in measurement && 'y' in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }

  if ('x' in measurement) {
    return dx > measurement.x;
  }

  if ('y' in measurement) {
    return dy > measurement.y;
  }

  return false;
}

var EventName;

(function (EventName) {
  EventName["Click"] = "click";
  EventName["DragStart"] = "dragstart";
  EventName["Keydown"] = "keydown";
  EventName["ContextMenu"] = "contextmenu";
  EventName["Resize"] = "resize";
  EventName["SelectionChange"] = "selectionchange";
  EventName["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));

function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation(event) {
  event.stopPropagation();
}

var KeyboardCode;

(function (KeyboardCode) {
  KeyboardCode["Space"] = "Space";
  KeyboardCode["Down"] = "ArrowDown";
  KeyboardCode["Right"] = "ArrowRight";
  KeyboardCode["Left"] = "ArrowLeft";
  KeyboardCode["Up"] = "ArrowUp";
  KeyboardCode["Esc"] = "Escape";
  KeyboardCode["Enter"] = "Enter";
})(KeyboardCode || (KeyboardCode = {}));

const defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};
const defaultKeyboardCoordinateGetter = (event, _ref) => {
  let {
    currentCoordinates
  } = _ref;

  switch (event.code) {
    case KeyboardCode.Right:
      return { ...currentCoordinates,
        x: currentCoordinates.x + 25
      };

    case KeyboardCode.Left:
      return { ...currentCoordinates,
        x: currentCoordinates.x - 25
      };

    case KeyboardCode.Down:
      return { ...currentCoordinates,
        y: currentCoordinates.y + 25
      };

    case KeyboardCode.Up:
      return { ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }

  return undefined;
};

class KeyboardSensor {
  constructor(props) {
    this.props = void 0;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = void 0;
    this.listeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    const {
      event: {
        target
      }
    } = props;
    this.props = props;
    this.listeners = new Listeners((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(target));
    this.windowListeners = new Listeners((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }

  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }

  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node = activeNode.node.current;

    if (node) {
      scrollIntoViewIfNeeded(node);
    }

    onStart(defaultCoordinates);
  }

  handleKeyDown(event) {
    if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(event)) {
      const {
        active,
        context,
        options
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = 'smooth'
      } = options;
      const {
        code
      } = event;

      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }

      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }

      const {
        collisionRect
      } = context.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;

      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }

      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });

      if (newCoordinates) {
        const coordinatesDelta = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context.current;

        for (const scrollContainer of scrollableAncestors) {
          const direction = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;

          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;

            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              // We don't need to update coordinates, the scroll adjustment alone will trigger
              // logic to auto-detect the new container we are over
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }

            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }

            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }

            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;

            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              // We don't need to update coordinates, the scroll adjustment alone will trigger
              // logic to auto-detect the new container we are over
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }

            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }

            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }

            break;
          }
        }

        this.handleMove(event, (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }

  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }

  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }

  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }

  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }

}
KeyboardSensor.activators = [{
  eventName: 'onKeyDown',
  handler: (event, _ref, _ref2) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref;
    let {
      active
    } = _ref2;
    const {
      code
    } = event.nativeEvent;

    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;

      if (activator && event.target !== activator) {
        return false;
      }

      event.preventDefault();
      onActivation == null ? void 0 : onActivation({
        event: event.nativeEvent
      });
      return true;
    }

    return false;
  }
}];

function isDistanceConstraint(constraint) {
  return Boolean(constraint && 'distance' in constraint);
}

function isDelayConstraint(constraint) {
  return Boolean(constraint && 'delay' in constraint);
}

class AbstractPointerSensor {
  constructor(props, events, listenerTarget) {
    var _getEventCoordinates;

    if (listenerTarget === void 0) {
      listenerTarget = getEventListenerTarget(props.event.target);
    }

    this.props = void 0;
    this.events = void 0;
    this.autoScrollEnabled = true;
    this.document = void 0;
    this.activated = false;
    this.initialCoordinates = void 0;
    this.timeoutId = null;
    this.listeners = void 0;
    this.documentListeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    this.events = events;
    const {
      event
    } = props;
    const {
      target
    } = event;
    this.props = props;
    this.events = events;
    this.document = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(target));
    this.initialCoordinates = (_getEventCoordinates = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }

  attach() {
    const {
      events,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events.end.name, this.handleEnd);

    if (events.cancel) {
      this.listeners.add(events.cancel.name, this.handleCancel);
    }

    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);

    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }

      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        return;
      }

      if (isDistanceConstraint(activationConstraint)) {
        return;
      }
    }

    this.handleStart();
  }

  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll(); // Wait until the next event loop before removing document listeners
    // This is necessary because we listen for `click` and `selection` events on the document

    setTimeout(this.documentListeners.removeAll, 50);

    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }

  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;

    if (initialCoordinates) {
      this.activated = true; // Stop propagation of click events once activation constraints are met

      this.documentListeners.add(EventName.Click, stopPropagation, {
        capture: true
      }); // Remove any text selection from the document

      this.removeTextSelection(); // Prevent further text selection while dragging

      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }

  handleMove(event) {
    var _getEventCoordinates2;

    const {
      activated,
      initialCoordinates,
      props
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props;

    if (!initialCoordinates) {
      return;
    }

    const coordinates = (_getEventCoordinates2 = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(initialCoordinates, coordinates); // Constraint validation

    if (!activated && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }

        if (hasExceededDistance(delta, activationConstraint.distance)) {
          return this.handleStart();
        }
      }

      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }

      return;
    }

    if (event.cancelable) {
      event.preventDefault();
    }

    onMove(coordinates);
  }

  handleEnd() {
    const {
      onEnd
    } = this.props;
    this.detach();
    onEnd();
  }

  handleCancel() {
    const {
      onCancel
    } = this.props;
    this.detach();
    onCancel();
  }

  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }

  removeTextSelection() {
    var _this$document$getSel;

    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
  }

}

const events = {
  cancel: {
    name: 'pointercancel'
  },
  move: {
    name: 'pointermove'
  },
  end: {
    name: 'pointerup'
  }
};
class PointerSensor extends AbstractPointerSensor {
  constructor(props) {
    const {
      event
    } = props; // Pointer events stop firing if the target is unmounted while dragging
    // Therefore we attach listeners to the owner document instead

    const listenerTarget = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(event.target);
    super(props, events, listenerTarget);
  }

}
PointerSensor.activators = [{
  eventName: 'onPointerDown',
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;

    if (!event.isPrimary || event.button !== 0) {
      return false;
    }

    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];

const events$1 = {
  move: {
    name: 'mousemove'
  },
  end: {
    name: 'mouseup'
  }
};
var MouseButton;

(function (MouseButton) {
  MouseButton[MouseButton["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));

class MouseSensor extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$1, (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(props.event.target));
  }

}
MouseSensor.activators = [{
  eventName: 'onMouseDown',
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;

    if (event.button === MouseButton.RightClick) {
      return false;
    }

    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];

const events$2 = {
  cancel: {
    name: 'touchcancel'
  },
  move: {
    name: 'touchmove'
  },
  end: {
    name: 'touchend'
  }
};
class TouchSensor extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$2);
  }

  static setup() {
    // Adding a non-capture and non-passive `touchmove` listener in order
    // to force `event.preventDefault()` calls to work in dynamically added
    // touchmove event handlers. This is required for iOS Safari.
    window.addEventListener(events$2.move.name, noop, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop);
    }; // We create a new handler because the teardown function of another sensor
    // could remove our event listener if we use a referentially equal listener.

    function noop() {}
  }

}
TouchSensor.activators = [{
  eventName: 'onTouchStart',
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    const {
      touches
    } = event;

    if (touches.length > 1) {
      return false;
    }

    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];

var AutoScrollActivator;

(function (AutoScrollActivator) {
  AutoScrollActivator[AutoScrollActivator["Pointer"] = 0] = "Pointer";
  AutoScrollActivator[AutoScrollActivator["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));

var TraversalOrder;

(function (TraversalOrder) {
  TraversalOrder[TraversalOrder["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder[TraversalOrder["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));

function useAutoScroller(_ref) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta,
    threshold
  } = _ref;
  const scrollIntent = useScrollIntent({
    delta,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useInterval)();
  const scrollSpeed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
    x: 0,
    y: 0
  });
  const scrollDirection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
    x: 0,
    y: 0
  });
  const rect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;

      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const autoScroll = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    const scrollContainer = scrollContainerRef.current;

    if (!scrollContainer) {
      return;
    }

    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!enabled || !scrollableAncestors.length || !rect) {
      clearAutoScrollInterval();
      return;
    }

    for (const scrollContainer of sortedScrollableAncestors) {
      if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
        continue;
      }

      const index = scrollableAncestors.indexOf(scrollContainer);
      const scrollContainerRect = scrollableAncestorRects[index];

      if (!scrollContainerRect) {
        continue;
      }

      const {
        direction,
        speed
      } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);

      for (const axis of ['x', 'y']) {
        if (!scrollIntent[axis][direction[axis]]) {
          speed[axis] = 0;
          direction[axis] = 0;
        }
      }

      if (speed.x > 0 || speed.y > 0) {
        clearAutoScrollInterval();
        scrollContainerRef.current = scrollContainer;
        setAutoScrollInterval(autoScroll, interval);
        scrollSpeed.current = speed;
        scrollDirection.current = direction;
        return;
      }
    }

    scrollSpeed.current = {
      x: 0,
      y: 0
    };
    scrollDirection.current = {
      x: 0,
      y: 0
    };
    clearAutoScrollInterval();
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval, // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(rect), // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(scrollIntent), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects, // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(threshold)]);
}
const defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};

function useScrollIntent(_ref2) {
  let {
    delta,
    disabled
  } = _ref2;
  const previousDelta = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(delta);
  return (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)(previousIntent => {
    if (disabled || !previousDelta || !previousIntent) {
      // Reset scroll intent tracking when auto-scrolling is disabled
      return defaultScrollIntent;
    }

    const direction = {
      x: Math.sign(delta.x - previousDelta.x),
      y: Math.sign(delta.y - previousDelta.y)
    }; // Keep track of the user intent to scroll in each direction for both axis

    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
      }
    };
  }, [disabled, delta, previousDelta]);
}

function useCachedNode(draggableNodes, id) {
  const draggableNode = id != null ? draggableNodes.get(id) : undefined;
  const node = draggableNode ? draggableNode.node.current : null;
  return (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)(cachedNode => {
    var _ref;

    if (id == null) {
      return null;
    } // In some cases, the draggable node can unmount while dragging
    // This is the case for virtualized lists. In those situations,
    // we fall back to the last known value for that node.


    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
  }, [node, id]);
}

function useCombineActivators(sensors, getSyntheticHandler) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map(activator => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}

var MeasuringStrategy;

(function (MeasuringStrategy) {
  MeasuringStrategy[MeasuringStrategy["Always"] = 0] = "Always";
  MeasuringStrategy[MeasuringStrategy["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy[MeasuringStrategy["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));

var MeasuringFrequency;

(function (MeasuringFrequency) {
  MeasuringFrequency["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));

const defaultValue = /*#__PURE__*/new Map();
function useDroppableMeasuring(containers, _ref) {
  let {
    dragging,
    dependencies,
    config
  } = _ref;
  const [queue, setQueue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const {
    frequency,
    measure,
    strategy
  } = config;
  const containersRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(containers);
  const disabled = isDisabled();
  const disabledRef = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(disabled);
  const measureDroppableContainers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (ids) {
    if (ids === void 0) {
      ids = [];
    }

    if (disabledRef.current) {
      return;
    }

    setQueue(value => {
      if (value === null) {
        return ids;
      }

      return value.concat(ids.filter(id => !value.includes(id)));
    });
  }, [disabledRef]);
  const timeoutId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const droppableRects = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)(previousValue => {
    if (disabled && !dragging) {
      return defaultValue;
    }

    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
      const map = new Map();

      for (let container of containers) {
        if (!container) {
          continue;
        }

        if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
          // This container does not need to be re-measured
          map.set(container.id, container.rect.current);
          continue;
        }

        const node = container.node.current;
        const rect = node ? new Rect(measure(node), node) : null;
        container.rect.current = rect;

        if (rect) {
          map.set(container.id, rect);
        }
      }

      return map;
    }

    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    containersRef.current = containers;
  }, [containers]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (disabled) {
      return;
    }

    measureDroppableContainers();
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [dragging, disabled]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (queue && queue.length > 0) {
      setQueue(null);
    }
  }, //eslint-disable-next-line react-hooks/exhaustive-deps
  [JSON.stringify(queue)]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (disabled || typeof frequency !== 'number' || timeoutId.current !== null) {
      return;
    }

    timeoutId.current = setTimeout(() => {
      measureDroppableContainers();
      timeoutId.current = null;
    }, frequency);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [frequency, disabled, measureDroppableContainers, ...dependencies]);
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };

  function isDisabled() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;

      case MeasuringStrategy.BeforeDragging:
        return dragging;

      default:
        return !dragging;
    }
  }
}

function useInitialValue(value, computeFn) {
  return (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)(previousValue => {
    if (!value) {
      return null;
    }

    if (previousValue) {
      return previousValue;
    }

    return typeof computeFn === 'function' ? computeFn(value) : value;
  }, [computeFn, value]);
}

function useInitialRect(node, measure) {
  return useInitialValue(node, measure);
}

/**
 * Returns a new MutationObserver instance.
 * If `MutationObserver` is undefined in the execution environment, returns `undefined`.
 */

function useMutationObserver(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleMutations = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useEvent)(callback);
  const mutationObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (disabled || typeof window === 'undefined' || typeof window.MutationObserver === 'undefined') {
      return undefined;
    }

    const {
      MutationObserver
    } = window;
    return new MutationObserver(handleMutations);
  }, [handleMutations, disabled]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}

/**
 * Returns a new ResizeObserver instance bound to the `onResize` callback.
 * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.
 */

function useResizeObserver(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleResize = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useEvent)(callback);
  const resizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (disabled || typeof window === 'undefined' || typeof window.ResizeObserver === 'undefined') {
      return undefined;
    }

    const {
      ResizeObserver
    } = window;
    return new ResizeObserver(handleResize);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [disabled]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}

function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}

function useRect(element, measure, fallbackRect) {
  if (measure === void 0) {
    measure = defaultMeasure;
  }

  const [rect, setRect] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);

  function measureRect() {
    setRect(currentRect => {
      if (!element) {
        return null;
      }

      if (element.isConnected === false) {
        var _ref;

        // Fall back to last rect we measured if the element is
        // no longer connected to the DOM.
        return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
      }

      const newRect = measure(element);

      if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
        return currentRect;
      }

      return newRect;
    });
  }

  const mutationObserver = useMutationObserver({
    callback(records) {
      if (!element) {
        return;
      }

      for (const record of records) {
        const {
          type,
          target
        } = record;

        if (type === 'childList' && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }

  });
  const resizeObserver = useResizeObserver({
    callback: measureRect
  });
  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    measureRect();

    if (element) {
      resizeObserver == null ? void 0 : resizeObserver.observe(element);
      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
}

function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}

const defaultValue$1 = [];
function useScrollableAncestors(node) {
  const previousNode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(node);
  const ancestors = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)(previousValue => {
    if (!node) {
      return defaultValue$1;
    }

    if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }

    return getScrollableAncestors(node);
  }, [node]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    previousNode.current = node;
  }, [node]);
  return ancestors;
}

function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const prevElements = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(elements); // To-do: Throttle the handleScroll callback

  const handleScroll = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(event => {
    const scrollingElement = getScrollableElement(event.target);

    if (!scrollingElement) {
      return;
    }

    setScrollCoordinates(scrollCoordinates => {
      if (!scrollCoordinates) {
        return null;
      }

      scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates);
    });
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const previousElements = prevElements.current;

    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map(element => {
        const scrollableElement = getScrollableElement(element);

        if (scrollableElement) {
          scrollableElement.addEventListener('scroll', handleScroll, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }

        return null;
      }).filter(entry => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }

    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };

    function cleanup(elements) {
      elements.forEach(element => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);
      });
    }
  }, [handleScroll, elements]);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }

    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}

function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }

  const initialScrollOffsets = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    initialScrollOffsets.current = null;
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  dependencies);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;

    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }

    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}

function useSensorSetup(sensors) {
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.canUseDOM) {
      return;
    }

    const teardownFns = sensors.map(_ref => {
      let {
        sensor
      } = _ref;
      return sensor.setup == null ? void 0 : sensor.setup();
    });
    return () => {
      for (const teardown of teardownFns) {
        teardown == null ? void 0 : teardown();
      }
    };
  }, // TO-DO: Sensors length could theoretically change which would not be a valid dependency
  // eslint-disable-next-line react-hooks/exhaustive-deps
  sensors.map(_ref2 => {
    let {
      sensor
    } = _ref2;
    return sensor;
  }));
}

function useSyntheticListeners(listeners, id) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return listeners.reduce((acc, _ref) => {
      let {
        eventName,
        handler
      } = _ref;

      acc[eventName] = event => {
        handler(event, id);
      };

      return acc;
    }, {});
  }, [listeners, id]);
}

function useWindowRect(element) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => element ? getWindowClientRect(element) : null, [element]);
}

const defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }

  const [firstElement] = elements;
  const windowRect = useWindowRect(firstElement ? (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(firstElement) : null);
  const [rects, setRects] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue$2);

  function measureRects() {
    setRects(() => {
      if (!elements.length) {
        return defaultValue$2;
      }

      return elements.map(element => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
    });
  }

  const resizeObserver = useResizeObserver({
    callback: measureRects
  });
  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    measureRects();
    elements.forEach(element => resizeObserver == null ? void 0 : resizeObserver.observe(element));
  }, [elements]);
  return rects;
}

function getMeasurableNode(node) {
  if (!node) {
    return null;
  }

  if (node.children.length > 1) {
    return node;
  }

  const firstChild = node.children[0];
  return (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(firstChild) ? firstChild : node;
}

function useDragOverlayMeasuring(_ref) {
  let {
    measure
  } = _ref;
  const [rect, setRect] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const handleResize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(entries => {
    for (const {
      target
    } of entries) {
      if ((0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(target)) {
        setRect(rect => {
          const newRect = measure(target);
          return rect ? { ...rect,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver({
    callback: handleResize
  });
  const handleNodeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(element => {
    const node = getMeasurableNode(element);
    resizeObserver == null ? void 0 : resizeObserver.disconnect();

    if (node) {
      resizeObserver == null ? void 0 : resizeObserver.observe(node);
    }

    setRect(node ? measure(node) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef] = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)(handleNodeChange);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    nodeRef,
    rect,
    setRef
  }), [rect, nodeRef, setRef]);
}

const defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
const defaultData = {
  current: {}
};
const defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};

class DroppableContainersMap extends Map {
  get(id) {
    var _super$get;

    return id != null ? (_super$get = super.get(id)) != null ? _super$get : undefined : undefined;
  }

  toArray() {
    return Array.from(this.values());
  }

  getEnabled() {
    return this.toArray().filter(_ref => {
      let {
        disabled
      } = _ref;
      return !disabled;
    });
  }

  getNodeFor(id) {
    var _this$get$node$curren, _this$get;

    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : undefined;
  }

}

const defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /*#__PURE__*/new Map(),
  droppableRects: /*#__PURE__*/new Map(),
  droppableContainers: /*#__PURE__*/new DroppableContainersMap(),
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop,
  windowRect: null,
  measuringScheduled: false
};
const defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ''
  },
  dispatch: noop,
  draggableNodes: /*#__PURE__*/new Map(),
  over: null,
  measureDroppableContainers: noop
};
const InternalContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultInternalContext);
const PublicContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultPublicContext);

function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: new Map(),
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap()
    }
  };
}
function reducer(state, action) {
  switch (action.type) {
    case Action.DragStart:
      return { ...state,
        draggable: { ...state.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };

    case Action.DragMove:
      if (state.draggable.active == null) {
        return state;
      }

      return { ...state,
        draggable: { ...state.draggable,
          translate: {
            x: action.coordinates.x - state.draggable.initialCoordinates.x,
            y: action.coordinates.y - state.draggable.initialCoordinates.y
          }
        }
      };

    case Action.DragEnd:
    case Action.DragCancel:
      return { ...state,
        draggable: { ...state.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };

    case Action.RegisterDroppable:
      {
        const {
          element
        } = action;
        const {
          id
        } = element;
        const containers = new DroppableContainersMap(state.droppable.containers);
        containers.set(id, element);
        return { ...state,
          droppable: { ...state.droppable,
            containers
          }
        };
      }

    case Action.SetDroppableDisabled:
      {
        const {
          id,
          key,
          disabled
        } = action;
        const element = state.droppable.containers.get(id);

        if (!element || key !== element.key) {
          return state;
        }

        const containers = new DroppableContainersMap(state.droppable.containers);
        containers.set(id, { ...element,
          disabled
        });
        return { ...state,
          droppable: { ...state.droppable,
            containers
          }
        };
      }

    case Action.UnregisterDroppable:
      {
        const {
          id,
          key
        } = action;
        const element = state.droppable.containers.get(id);

        if (!element || key !== element.key) {
          return state;
        }

        const containers = new DroppableContainersMap(state.droppable.containers);
        containers.delete(id);
        return { ...state,
          droppable: { ...state.droppable,
            containers
          }
        };
      }

    default:
      {
        return state;
      }
  }
}

function RestoreFocus(_ref) {
  let {
    disabled
  } = _ref;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InternalContext);
  const previousActivatorEvent = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(activatorEvent);
  const previousActiveId = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(active == null ? void 0 : active.id); // Restore keyboard focus on the activator node

  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (disabled) {
      return;
    }

    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!(0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(previousActivatorEvent)) {
        return;
      }

      if (document.activeElement === previousActivatorEvent.target) {
        // No need to restore focus
        return;
      }

      const draggableNode = draggableNodes.get(previousActiveId);

      if (!draggableNode) {
        return;
      }

      const {
        activatorNode,
        node
      } = draggableNode;

      if (!activatorNode.current && !node.current) {
        return;
      }

      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node.current]) {
          if (!element) {
            continue;
          }

          const focusableNode = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.findFirstFocusableNode)(element);

          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}

function applyModifiers(modifiers, _ref) {
  let {
    transform,
    ...args
  } = _ref;
  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform) : transform;
}

function useMeasuringConfiguration(config) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    draggable: { ...defaultMeasuringConfiguration.draggable,
      ...(config == null ? void 0 : config.draggable)
    },
    droppable: { ...defaultMeasuringConfiguration.droppable,
      ...(config == null ? void 0 : config.droppable)
    },
    dragOverlay: { ...defaultMeasuringConfiguration.dragOverlay,
      ...(config == null ? void 0 : config.dragOverlay)
    }
  }), // eslint-disable-next-line react-hooks/exhaustive-deps
  [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]);
}

function useLayoutShiftScrollCompensation(_ref) {
  let {
    activeNode,
    measure,
    initialRect,
    config = true
  } = _ref;
  const initialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const {
    x,
    y
  } = typeof config === 'boolean' ? {
    x: config,
    y: config
  } : config;
  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    const disabled = !x && !y;

    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }

    if (initialized.current || !initialRect) {
      // Return early if layout shift scroll compensation was already attempted
      // or if there is no initialRect to compare to.
      return;
    } // Get the most up to date node ref for the active draggable


    const node = activeNode == null ? void 0 : activeNode.node.current;

    if (!node || node.isConnected === false) {
      // Return early if there is no attached node ref or if the node is
      // disconnected from the document.
      return;
    }

    const rect = measure(node);
    const rectDelta = getRectDelta(rect, initialRect);

    if (!x) {
      rectDelta.x = 0;
    }

    if (!y) {
      rectDelta.y = 0;
    } // Only perform layout shift scroll compensation once


    initialized.current = true;

    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node);

      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x, y, initialRect, measure]);
}

const ActiveDraggableContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({ ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;

(function (Status) {
  Status[Status["Uninitialized"] = 0] = "Uninitialized";
  Status[Status["Initializing"] = 1] = "Initializing";
  Status[Status["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));

const DndContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function DndContext(_ref) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;

  let {
    id,
    accessibility,
    autoScroll = true,
    children,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers,
    ...props
  } = _ref;
  const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, undefined, getInitialState);
  const [state, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state;
  const node = activeId != null ? draggableNodes.get(activeId) : null;
  const activeRects = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
    initial: null,
    translated: null
  });
  const active = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    var _node$data;

    return activeId != null ? {
      id: activeId,
      // It's possible for the active node to unmount while dragging
      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node]);
  const activeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [activeSensor, setActiveSensor] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const [activatorEvent, setActivatorEvent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const latestProps = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(props, Object.values(props));
  const draggableDescribedById = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)("DndDescribedBy", id);
  const enabledDroppableContainers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => activatorEvent ? (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId != null ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
  const sensorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  }); // Use the rect of the drag overlay if it is mounted

  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect); // The delta between the previous and new position of the draggable node
  // is only relevant when there is no drag overlay

  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect); // Get the window rect of the dragging node

  const windowRect = useWindowRect(draggingNode ? (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(draggingNode) : null); // Get scrollable ancestors of the dragging node

  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors); // Apply modifiers

  const modifiedTranslate = applyModifiers(modifiers, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  });
  const pointerCoordinates = activationCoordinates ? (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors); // Represents the scroll delta since dragging was initiated

  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets); // Represents the scroll delta since the last time the active node rect was measured

  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, 'id');
  const [over, setOver] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null); // When there is no drag overlay used, we need to account for the
  // window scroll delta

  const appliedTranslate = usesDragOverlay ? modifiedTranslate : (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(modifiedTranslate, activeNodeScrollDelta);
  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
  const activeSensorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const instantiateSensor = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event, _ref2) => {
    let {
      sensor: Sensor,
      options
    } = _ref2;

    if (activeRef.current == null) {
      return;
    }

    const activeNode = draggableNodes.get(activeRef.current);

    if (!activeNode) {
      return;
    }

    const activatorEvent = event.nativeEvent;
    const sensorInstance = new Sensor({
      active: activeRef.current,
      activeNode,
      event: activatorEvent,
      options,
      // Sensors need to be instantiated with refs for arguments that change over time
      // otherwise they are frozen in time with the stale arguments
      context: sensorContext,

      onStart(initialCoordinates) {
        const id = activeRef.current;

        if (id == null) {
          return;
        }

        const draggableNode = draggableNodes.get(id);

        if (!draggableNode) {
          return;
        }

        const {
          onDragStart
        } = latestProps.current;
        const event = {
          activatorEvent,
          active: {
            id,
            data: draggableNode.data,
            rect: activeRects
          }
        };
        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)(() => {
          onDragStart == null ? void 0 : onDragStart(event);
          setStatus(Status.Initializing);
          dispatch({
            type: Action.DragStart,
            initialCoordinates,
            active: id
          });
          dispatchMonitorEvent({
            type: 'onDragStart',
            event
          });
          setActiveSensor(activeSensorRef.current);
          setActivatorEvent(activatorEvent);
        });
      },

      onMove(coordinates) {
        dispatch({
          type: Action.DragMove,
          coordinates
        });
      },

      onEnd: createHandler(Action.DragEnd),
      onCancel: createHandler(Action.DragCancel)
    });
    activeSensorRef.current = sensorInstance;

    function createHandler(type) {
      return async function handler() {
        const {
          active,
          collisions,
          over,
          scrollAdjustedTranslate
        } = sensorContext.current;
        let event = null;

        if (active && scrollAdjustedTranslate) {
          const {
            cancelDrop
          } = latestProps.current;
          event = {
            activatorEvent,
            active: active,
            collisions,
            delta: scrollAdjustedTranslate,
            over
          };

          if (type === Action.DragEnd && typeof cancelDrop === 'function') {
            const shouldCancel = await Promise.resolve(cancelDrop(event));

            if (shouldCancel) {
              type = Action.DragCancel;
            }
          }
        }

        activeRef.current = null;
        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)(() => {
          dispatch({
            type
          });
          setStatus(Status.Uninitialized);
          setOver(null);
          setActiveSensor(null);
          setActivatorEvent(null);
          activeSensorRef.current = null;
          const eventName = type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';

          if (event) {
            const handler = latestProps.current[eventName];
            handler == null ? void 0 : handler(event);
            dispatchMonitorEvent({
              type: eventName,
              event
            });
          }
        });
      };
    }
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [draggableNodes]);
  const bindActivatorToSensorInstantiator = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((handler, sensor) => {
    return (event, active) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active);

      if ( // Another sensor is already instantiating
      activeRef.current !== null || // No active draggable
      !activeDraggableNode || // Event has already been captured
      nativeEvent.dndKit || nativeEvent.defaultPrevented) {
        return;
      }

      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);

      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const {
      onDragMove
    } = latestProps.current;
    const {
      active,
      activatorEvent,
      collisions,
      over
    } = sensorContext.current;

    if (!active || !activatorEvent) {
      return;
    }

    const event = {
      active,
      activatorEvent,
      collisions,
      delta: {
        x: scrollAdjustedTranslate.x,
        y: scrollAdjustedTranslate.y
      },
      over
    };
    (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)(() => {
      onDragMove == null ? void 0 : onDragMove(event);
      dispatchMonitorEvent({
        type: 'onDragMove',
        event
      });
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const {
      active,
      activatorEvent,
      collisions,
      droppableContainers,
      scrollAdjustedTranslate
    } = sensorContext.current;

    if (!active || activeRef.current == null || !activatorEvent || !scrollAdjustedTranslate) {
      return;
    }

    const {
      onDragOver
    } = latestProps.current;
    const overContainer = droppableContainers.get(overId);
    const over = overContainer && overContainer.rect.current ? {
      id: overContainer.id,
      rect: overContainer.rect.current,
      data: overContainer.data,
      disabled: overContainer.disabled
    } : null;
    const event = {
      active,
      activatorEvent,
      collisions,
      delta: {
        x: scrollAdjustedTranslate.x,
        y: scrollAdjustedTranslate.y
      },
      over
    };
    (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)(() => {
      setOver(over);
      onDragOver == null ? void 0 : onDragOver(event);
      dispatchMonitorEvent({
        type: 'onDragOver',
        event
      });
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [overId]);
  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({ ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const context = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect
    };
    return context;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
  const internalContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const context = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DndMonitorContext.Provider, {
    value: registerMonitorListener
  }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InternalContext.Provider, {
    value: internalContext
  }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PublicContext.Provider, {
    value: publicContext
  }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ActiveDraggableContext.Provider, {
    value: transform
  }, children)), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RestoreFocus, {
    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
  })), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Accessibility, { ...accessibility,
    hiddenTextDescribedById: draggableDescribedById
  }));

  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;

    if (typeof autoScroll === 'object') {
      return { ...autoScroll,
        enabled
      };
    }

    return {
      enabled
    };
  }
});

const NullContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);
const defaultRole = 'button';
const ID_PREFIX = 'Draggable';
function useDraggable(_ref) {
  let {
    id,
    data,
    disabled = false,
    attributes
  } = _ref;
  const key = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(ID_PREFIX);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InternalContext);
  const {
    role = defaultRole,
    roleDescription = 'draggable',
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? void 0 : active.id) === id;
  const transform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(isDragging ? ActiveDraggableContext : NullContext);
  const [node, setNodeRef] = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)();
  const [activatorNode, setActivatorNodeRef] = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)();
  const listeners = useSyntheticListeners(activators, id);
  const dataRef = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(data);
  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    draggableNodes.set(id, {
      id,
      key,
      node,
      activatorNode,
      data: dataRef
    });
    return () => {
      const node = draggableNodes.get(id);

      if (node && node.key === key) {
        draggableNodes.delete(id);
      }
    };
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [draggableNodes, id]);
  const memoizedAttributes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    role,
    tabIndex,
    'aria-disabled': disabled,
    'aria-pressed': isDragging && role === defaultRole ? true : undefined,
    'aria-roledescription': roleDescription,
    'aria-describedby': ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? undefined : listeners,
    node,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform
  };
}

function useDndContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PublicContext);
}

const ID_PREFIX$1 = 'Droppable';
const defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref) {
  let {
    data,
    disabled = false,
    id,
    resizeObserverConfig
  } = _ref;
  const key = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(ID_PREFIX$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InternalContext);
  const previous = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
    disabled
  });
  const resizeObserverConnected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const rect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const callbackId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = { ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(updateMeasurementsFor != null ? updateMeasurementsFor : id);
  const handleResize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (!resizeObserverConnected.current) {
      // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,
      // assuming the element is rendered and displayed.
      resizeObserverConnected.current = true;
      return;
    }

    if (callbackId.current != null) {
      clearTimeout(callbackId.current);
    }

    callbackId.current = setTimeout(() => {
      measureDroppableContainers(Array.isArray(ids.current) ? ids.current : [ids.current]);
      callbackId.current = null;
    }, resizeObserverTimeout);
  }, //eslint-disable-next-line react-hooks/exhaustive-deps
  [resizeObserverTimeout]);
  const resizeObserver = useResizeObserver({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }

    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }

    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)(handleNodeChange);
  const dataRef = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(data);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }

    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    dispatch({
      type: Action.RegisterDroppable,
      element: {
        id,
        key,
        disabled,
        node: nodeRef,
        rect,
        data: dataRef
      }
    });
    return () => dispatch({
      type: Action.UnregisterDroppable,
      key,
      id
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [id]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id,
        key,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id, key, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? void 0 : over.id) === id,
    node: nodeRef,
    over,
    setNodeRef
  };
}

function AnimationManager(_ref) {
  let {
    animation,
    children
  } = _ref;
  const [clonedChildren, setClonedChildren] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const previousChildren = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(children);

  if (!children && !clonedChildren && previousChildren) {
    setClonedChildren(previousChildren);
  }

  (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(() => {
    if (!element) {
      return;
    }

    const key = clonedChildren == null ? void 0 : clonedChildren.key;
    const id = clonedChildren == null ? void 0 : clonedChildren.props.id;

    if (key == null || id == null) {
      setClonedChildren(null);
      return;
    }

    Promise.resolve(animation(id, element)).then(() => {
      setClonedChildren(null);
    });
  }, [animation, clonedChildren, element]);
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children, clonedChildren ? (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(clonedChildren, {
    ref: setElement
  }) : null);
}

const defaultTransform = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1
};
function NullifiedContextProvider(_ref) {
  let {
    children
  } = _ref;
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InternalContext.Provider, {
    value: defaultInternalContext
  }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ActiveDraggableContext.Provider, {
    value: defaultTransform
  }, children));
}

const baseStyles = {
  position: 'fixed',
  touchAction: 'none'
};

const defaultTransition = activatorEvent => {
  const isKeyboardActivator = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(activatorEvent);
  return isKeyboardActivator ? 'transform 250ms ease' : undefined;
};

const PositionedOverlay = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((_ref, ref) => {
  let {
    as,
    activatorEvent,
    adjustScale,
    children,
    className,
    rect,
    style,
    transform,
    transition = defaultTransition
  } = _ref;

  if (!rect) {
    return null;
  }

  const scaleAdjustedTransform = adjustScale ? transform : { ...transform,
    scaleX: 1,
    scaleY: 1
  };
  const styles = { ...baseStyles,
    width: rect.width,
    height: rect.height,
    top: rect.top,
    left: rect.left,
    transform: _dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transform.toString(scaleAdjustedTransform),
    transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : undefined,
    transition: typeof transition === 'function' ? transition(activatorEvent) : transition,
    ...style
  };
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(as, {
    className,
    style: styles,
    ref
  }, children);
});

const defaultDropAnimationSideEffects = options => _ref => {
  let {
    active,
    dragOverlay
  } = _ref;
  const originalStyles = {};
  const {
    styles,
    className
  } = options;

  if (styles != null && styles.active) {
    for (const [key, value] of Object.entries(styles.active)) {
      if (value === undefined) {
        continue;
      }

      originalStyles[key] = active.node.style.getPropertyValue(key);
      active.node.style.setProperty(key, value);
    }
  }

  if (styles != null && styles.dragOverlay) {
    for (const [key, value] of Object.entries(styles.dragOverlay)) {
      if (value === undefined) {
        continue;
      }

      dragOverlay.node.style.setProperty(key, value);
    }
  }

  if (className != null && className.active) {
    active.node.classList.add(className.active);
  }

  if (className != null && className.dragOverlay) {
    dragOverlay.node.classList.add(className.dragOverlay);
  }

  return function cleanup() {
    for (const [key, value] of Object.entries(originalStyles)) {
      active.node.style.setProperty(key, value);
    }

    if (className != null && className.active) {
      active.node.classList.remove(className.active);
    }
  };
};

const defaultKeyframeResolver = _ref2 => {
  let {
    transform: {
      initial,
      final
    }
  } = _ref2;
  return [{
    transform: _dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transform.toString(initial)
  }, {
    transform: _dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transform.toString(final)
  }];
};

const defaultDropAnimationConfiguration = {
  duration: 250,
  easing: 'ease',
  keyframes: defaultKeyframeResolver,
  sideEffects: /*#__PURE__*/defaultDropAnimationSideEffects({
    styles: {
      active: {
        opacity: '0'
      }
    }
  })
};
function useDropAnimation(_ref3) {
  let {
    config,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  } = _ref3;
  return (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useEvent)((id, node) => {
    if (config === null) {
      return;
    }

    const activeDraggable = draggableNodes.get(id);

    if (!activeDraggable) {
      return;
    }

    const activeNode = activeDraggable.node.current;

    if (!activeNode) {
      return;
    }

    const measurableNode = getMeasurableNode(node);

    if (!measurableNode) {
      return;
    }

    const {
      transform
    } = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(node).getComputedStyle(node);
    const parsedTransform = parseTransform(transform);

    if (!parsedTransform) {
      return;
    }

    const animation = typeof config === 'function' ? config : createDefaultDropAnimation(config);
    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);
    return animation({
      active: {
        id,
        data: activeDraggable.data,
        node: activeNode,
        rect: measuringConfiguration.draggable.measure(activeNode)
      },
      draggableNodes,
      dragOverlay: {
        node,
        rect: measuringConfiguration.dragOverlay.measure(measurableNode)
      },
      droppableContainers,
      measuringConfiguration,
      transform: parsedTransform
    });
  });
}

function createDefaultDropAnimation(options) {
  const {
    duration,
    easing,
    sideEffects,
    keyframes
  } = { ...defaultDropAnimationConfiguration,
    ...options
  };
  return _ref4 => {
    let {
      active,
      dragOverlay,
      transform,
      ...rest
    } = _ref4;

    if (!duration) {
      // Do not animate if animation duration is zero.
      return;
    }

    const delta = {
      x: dragOverlay.rect.left - active.rect.left,
      y: dragOverlay.rect.top - active.rect.top
    };
    const scale = {
      scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,
      scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1
    };
    const finalTransform = {
      x: transform.x - delta.x,
      y: transform.y - delta.y,
      ...scale
    };
    const animationKeyframes = keyframes({ ...rest,
      active,
      dragOverlay,
      transform: {
        initial: transform,
        final: finalTransform
      }
    });
    const [firstKeyframe] = animationKeyframes;
    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];

    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {
      // The start and end keyframes are the same, infer that there is no animation needed.
      return;
    }

    const cleanup = sideEffects == null ? void 0 : sideEffects({
      active,
      dragOverlay,
      ...rest
    });
    const animation = dragOverlay.node.animate(animationKeyframes, {
      duration,
      easing,
      fill: 'forwards'
    });
    return new Promise(resolve => {
      animation.onfinish = () => {
        cleanup == null ? void 0 : cleanup();
        resolve();
      };
    });
  };
}

let key = 0;
function useKey(id) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (id == null) {
      return;
    }

    key++;
    return key;
  }, [id]);
}

const DragOverlay = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(_ref => {
  let {
    adjustScale = false,
    children,
    dropAnimation: dropAnimationConfig,
    style,
    transition,
    modifiers,
    wrapperElement = 'div',
    className,
    zIndex = 999
  } = _ref;
  const {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggableNodes,
    droppableContainers,
    dragOverlay,
    over,
    measuringConfiguration,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  } = useDndContext();
  const transform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ActiveDraggableContext);
  const key = useKey(active == null ? void 0 : active.id);
  const modifiedTransform = applyModifiers(modifiers, {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect: dragOverlay.rect,
    over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    transform,
    windowRect
  });
  const initialRect = useInitialValue(activeNodeRect);
  const dropAnimation = useDropAnimation({
    config: dropAnimationConfig,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  }); // We need to wait for the active node to be measured before connecting the drag overlay ref
  // otherwise collisions can be computed against a mispositioned drag overlay

  const ref = initialRect ? dragOverlay.setRef : undefined;
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(NullifiedContextProvider, null, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AnimationManager, {
    animation: dropAnimation
  }, active && key ? react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PositionedOverlay, {
    key: key,
    id: active.id,
    ref: ref,
    as: wrapperElement,
    activatorEvent: activatorEvent,
    adjustScale: adjustScale,
    className: className,
    transition: transition,
    rect: initialRect,
    style: {
      zIndex,
      ...style
    },
    transform: modifiedTransform
  }, children) : null));
});




/***/ }),

/***/ "../../node_modules/@dnd-kit/utilities/dist/utilities.esm.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@dnd-kit/utilities/dist/utilities.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSS: () => (/* binding */ CSS),
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),
/* harmony export */   findFirstFocusableNode: () => (/* binding */ findFirstFocusableNode),
/* harmony export */   getEventCoordinates: () => (/* binding */ getEventCoordinates),
/* harmony export */   getOwnerDocument: () => (/* binding */ getOwnerDocument),
/* harmony export */   getWindow: () => (/* binding */ getWindow),
/* harmony export */   hasViewportRelativeCoordinates: () => (/* binding */ hasViewportRelativeCoordinates),
/* harmony export */   isDocument: () => (/* binding */ isDocument),
/* harmony export */   isHTMLElement: () => (/* binding */ isHTMLElement),
/* harmony export */   isKeyboardEvent: () => (/* binding */ isKeyboardEvent),
/* harmony export */   isNode: () => (/* binding */ isNode),
/* harmony export */   isSVGElement: () => (/* binding */ isSVGElement),
/* harmony export */   isTouchEvent: () => (/* binding */ isTouchEvent),
/* harmony export */   isWindow: () => (/* binding */ isWindow),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   useCombinedRefs: () => (/* binding */ useCombinedRefs),
/* harmony export */   useEvent: () => (/* binding */ useEvent),
/* harmony export */   useInterval: () => (/* binding */ useInterval),
/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect),
/* harmony export */   useLatestValue: () => (/* binding */ useLatestValue),
/* harmony export */   useLazyMemo: () => (/* binding */ useLazyMemo),
/* harmony export */   useNodeRef: () => (/* binding */ useNodeRef),
/* harmony export */   usePrevious: () => (/* binding */ usePrevious),
/* harmony export */   useUniqueId: () => (/* binding */ useUniqueId)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);


function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }

  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => node => {
    refs.forEach(ref => ref(node));
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  refs);
}

// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js
const canUseDOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';

function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === '[object Window]' || // In Electron context the Window object serializes to [object global]
  elementString === '[object global]';
}

function isNode(node) {
  return 'nodeType' in node;
}

function getWindow(target) {
  var _target$ownerDocument, _target$ownerDocument2;

  if (!target) {
    return window;
  }

  if (isWindow(target)) {
    return target;
  }

  if (!isNode(target)) {
    return window;
  }

  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}

function isDocument(node) {
  const {
    Document
  } = getWindow(node);
  return node instanceof Document;
}

function isHTMLElement(node) {
  if (isWindow(node)) {
    return false;
  }

  return node instanceof getWindow(node).HTMLElement;
}

function isSVGElement(node) {
  return node instanceof getWindow(node).SVGElement;
}

function getOwnerDocument(target) {
  if (!target) {
    return document;
  }

  if (isWindow(target)) {
    return target.document;
  }

  if (!isNode(target)) {
    return document;
  }

  if (isDocument(target)) {
    return target;
  }

  if (isHTMLElement(target) || isSVGElement(target)) {
    return target.ownerDocument;
  }

  return document;
}

/**
 * A hook that resolves to useEffect on the server and useLayoutEffect on the client
 * @param callback {function} Callback function that is invoked when the dependencies of the hook change
 */

const useIsomorphicLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;

function useEvent(handler) {
  const handlerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(handler);
  useIsomorphicLayoutEffect(() => {
    handlerRef.current = handler;
  });
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return handlerRef.current == null ? void 0 : handlerRef.current(...args);
  }, []);
}

function useInterval() {
  const intervalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const set = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set, clear];
}

function useLatestValue(value, dependencies) {
  if (dependencies === void 0) {
    dependencies = [value];
  }

  const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);
  useIsomorphicLayoutEffect(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}

function useLazyMemo(callback, dependencies) {
  const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const newValue = callback(valueRef.current);
    valueRef.current = newValue;
    return newValue;
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [...dependencies]);
}

function useNodeRef(onChange) {
  const onChangeHandler = useEvent(onChange);
  const node = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const setNodeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(element => {
    if (element !== node.current) {
      onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
    }

    node.current = element;
  }, //eslint-disable-next-line
  []);
  return [node, setNodeRef];
}

function usePrevious(value) {
  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

let ids = {};
function useUniqueId(prefix, value) {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (value) {
      return value;
    }

    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;
    ids[prefix] = id;
    return prefix + "-" + id;
  }, [prefix, value]);
}

function createAdjustmentFn(modifier) {
  return function (object) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }

    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);

      for (const [key, valueAdjustment] of entries) {
        const value = accumulator[key];

        if (value != null) {
          accumulator[key] = value + modifier * valueAdjustment;
        }
      }

      return accumulator;
    }, { ...object
    });
  };
}

const add = /*#__PURE__*/createAdjustmentFn(1);
const subtract = /*#__PURE__*/createAdjustmentFn(-1);

function hasViewportRelativeCoordinates(event) {
  return 'clientX' in event && 'clientY' in event;
}

function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }

  const {
    KeyboardEvent
  } = getWindow(event.target);
  return KeyboardEvent && event instanceof KeyboardEvent;
}

function isTouchEvent(event) {
  if (!event) {
    return false;
  }

  const {
    TouchEvent
  } = getWindow(event.target);
  return TouchEvent && event instanceof TouchEvent;
}

/**
 * Returns the normalized x and y coordinates for mouse and touch events.
 */

function getEventCoordinates(event) {
  if (isTouchEvent(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x,
        clientY: y
      } = event.touches[0];
      return {
        x,
        y
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x,
        clientY: y
      } = event.changedTouches[0];
      return {
        x,
        y
      };
    }
  }

  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }

  return null;
}

const CSS = /*#__PURE__*/Object.freeze({
  Translate: {
    toString(transform) {
      if (!transform) {
        return;
      }

      const {
        x,
        y
      } = transform;
      return "translate3d(" + (x ? Math.round(x) : 0) + "px, " + (y ? Math.round(y) : 0) + "px, 0)";
    }

  },
  Scale: {
    toString(transform) {
      if (!transform) {
        return;
      }

      const {
        scaleX,
        scaleY
      } = transform;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }

  },
  Transform: {
    toString(transform) {
      if (!transform) {
        return;
      }

      return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');
    }

  },
  Transition: {
    toString(_ref) {
      let {
        property,
        duration,
        easing
      } = _ref;
      return property + " " + duration + "ms " + easing;
    }

  }
});

const SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }

  return element.querySelector(SELECTOR);
}




/***/ }),

/***/ "../../node_modules/@emotion/cache/dist/emotion-cache.browser.development.esm.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/@emotion/cache/dist/emotion-cache.browser.development.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createCache)
/* harmony export */ });
/* harmony import */ var _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/sheet */ "../../node_modules/@emotion/sheet/dist/emotion-sheet.development.esm.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stylis */ "../../node_modules/stylis/src/Tokenizer.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stylis */ "../../node_modules/stylis/src/Utility.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! stylis */ "../../node_modules/stylis/src/Enum.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stylis */ "../../node_modules/stylis/src/Serializer.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! stylis */ "../../node_modules/stylis/src/Middleware.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! stylis */ "../../node_modules/stylis/src/Parser.js");
/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/weak-memoize */ "../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js");
/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/memoize */ "../../node_modules/@emotion/memoize/dist/emotion-memoize.esm.js");





var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
  var previous = 0;
  var character = 0;

  while (true) {
    previous = character;
    character = (0,stylis__WEBPACK_IMPORTED_MODULE_3__.peek)(); // &\f

    if (previous === 38 && character === 12) {
      points[index] = 1;
    }

    if ((0,stylis__WEBPACK_IMPORTED_MODULE_3__.token)(character)) {
      break;
    }

    (0,stylis__WEBPACK_IMPORTED_MODULE_3__.next)();
  }

  return (0,stylis__WEBPACK_IMPORTED_MODULE_3__.slice)(begin, stylis__WEBPACK_IMPORTED_MODULE_3__.position);
};

var toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;

  do {
    switch ((0,stylis__WEBPACK_IMPORTED_MODULE_3__.token)(character)) {
      case 0:
        // &\f
        if (character === 38 && (0,stylis__WEBPACK_IMPORTED_MODULE_3__.peek)() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }

        parsed[index] += identifierWithPointTracking(stylis__WEBPACK_IMPORTED_MODULE_3__.position - 1, points, index);
        break;

      case 2:
        parsed[index] += (0,stylis__WEBPACK_IMPORTED_MODULE_3__.delimit)(character);
        break;

      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = (0,stylis__WEBPACK_IMPORTED_MODULE_3__.peek)() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += (0,stylis__WEBPACK_IMPORTED_MODULE_4__.from)(character);
    }
  } while (character = (0,stylis__WEBPACK_IMPORTED_MODULE_3__.next)());

  return parsed;
};

var getRules = function getRules(value, points) {
  return (0,stylis__WEBPACK_IMPORTED_MODULE_3__.dealloc)(toRules((0,stylis__WEBPACK_IMPORTED_MODULE_3__.alloc)(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }

  var value = element.value;
  var parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;

  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case


  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */
  && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


  if (isImplicitRule) {
    return;
  }

  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;

  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;

    if ( // charcode for l
    value.charCodeAt(0) === 108 && // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

var isIgnoringComment = function isIgnoringComment(element) {
  return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};

var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
  return function (element, index, children) {
    if (element.type !== 'rule' || cache.compat) return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

    if (unsafePseudoClasses) {
      var isNested = !!element.parent; // in nested rules comments become children of the "auto-inserted" rule and that's always the `element.parent`
      //
      // considering this input:
      // .a {
      //   .b /* comm */ {}
      //   color: hotpink;
      // }
      // we get output corresponding to this:
      // .a {
      //   & {
      //     /* comm */
      //     color: hotpink;
      //   }
      //   .b {}
      // }

      var commentContainer = isNested ? element.parent.children : // global rule at the root level
      children;

      for (var i = commentContainer.length - 1; i >= 0; i--) {
        var node = commentContainer[i];

        if (node.line < element.line) {
          break;
        } // it is quite weird but comments are *usually* put at `column: element.column - 1`
        // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
        // this will also match inputs like this:
        // .a {
        //   /* comm */
        //   .b {}
        // }
        //
        // but that is fine
        //
        // it would be the easiest to change the placement of the comment to be the first child of the rule:
        // .a {
        //   .b { /* comm */ }
        // }
        // with such inputs we wouldn't have to search for the comment at all
        // TODO: consider changing this comment placement in the next major version


        if (node.column < element.column) {
          if (isIgnoringComment(node)) {
            return;
          }

          break;
        }
      }

      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
      });
    }
  };
};

var isImportRule = function isImportRule(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};

var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
  for (var i = index - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }

  return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user


var nullifyElement = function nullifyElement(element) {
  element.type = '';
  element.value = '';
  element["return"] = '';
  element.children = '';
  element.props = '';
};

var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
  if (!isImportRule(element)) {
    return;
  }

  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};

/* eslint-disable no-fallthrough */

function prefix(value, length) {
  switch ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.hash)(value, length)) {
    // color-adjust
    case 5103:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust

    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + value + value;
    // flex, flex-direction

    case 6828:
    case 4268:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + value + value;
    // order

    case 6165:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + 'flex-' + value + value;
    // align-items

    case 5187:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(\w+).+(:[^]+)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + 'box-$1$2' + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + 'flex-$1$2') + value;
    // align-self

    case 5443:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + 'flex-item-' + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /flex-|-self/, '') + value;
    // align-content

    case 4675:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + 'flex-line-pack' + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /align-content|flex-|-self/, '') + value;
    // flex-shrink

    case 5548:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, 'shrink', 'negative') + value;
    // flex-basis

    case 5292:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, 'basis', 'preferred-size') + value;
    // flex-grow

    case 6060:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + 'box-' + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, '-grow', '') + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, 'grow', 'positive') + value;
    // transition

    case 4554:
      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /([^-])(transform)/g, '$1' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$2') + value;
    // cursor

    case 6187:
      return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(zoom-|grab)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$1'), /(image-set)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$1'), value, '') + value;
    // background, background-image

    case 5495:
    case 3959:
      return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(image-set\([^]*)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$1' + '$`$1');
    // justify-content

    case 4968:
      return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+:)(flex-)?(.*)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + 'box-pack:$3' + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)

    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+)-inline(.+)/, stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)

    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.strlen)(value) - 1 - length > 6) switch ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content

        case 102:
          return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+:)(.+)-([^]+)/, '$1' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$2-$3' + '$1' + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch

        case 115:
          return ~(0,stylis__WEBPACK_IMPORTED_MODULE_4__.indexof)(value, 'stretch') ? prefix((0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, 'stretch', 'fill-available'), length) + value : value;
      }
      break;
    // position: sticky

    case 4949:
      // (s)ticky?
      if ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 1) !== 115) break;
    // display: (flex|inline-flex)

    case 6444:
      switch ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, (0,stylis__WEBPACK_IMPORTED_MODULE_4__.strlen)(value) - 3 - (~(0,stylis__WEBPACK_IMPORTED_MODULE_4__.indexof)(value, '!important') && 10))) {
        // stic(k)y
        case 107:
          return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, ':', ':' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT) + value;
        // (inline-)?fl(e)x

        case 101:
          return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + '$2$3' + '$1' + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + '$2box$3') + value;
      }

      break;
    // writing-mode

    case 5936:
      switch ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.charat)(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)

        case 108:
          return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb

        case 45:
          return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
      }

      return stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + value + stylis__WEBPACK_IMPORTED_MODULE_5__.MS + value + value;
  }

  return value;
}

var prefixer = function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element["return"]) switch (element.type) {
    case stylis__WEBPACK_IMPORTED_MODULE_5__.DECLARATION:
      element["return"] = prefix(element.value, element.length);
      break;

    case stylis__WEBPACK_IMPORTED_MODULE_5__.KEYFRAMES:
      return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)([(0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {
        value: (0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(element.value, '@', '@' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT)
      })], callback);

    case stylis__WEBPACK_IMPORTED_MODULE_5__.RULESET:
      if (element.length) return (0,stylis__WEBPACK_IMPORTED_MODULE_4__.combine)(element.props, function (value) {
        switch ((0,stylis__WEBPACK_IMPORTED_MODULE_4__.match)(value, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)([(0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {
              props: [(0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(read-\w+)/, ':' + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + '$1')]
            })], callback);
          // :placeholder

          case '::placeholder':
            return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)([(0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {
              props: [(0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(plac\w+)/, ':' + stylis__WEBPACK_IMPORTED_MODULE_5__.WEBKIT + 'input-$1')]
            }), (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {
              props: [(0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(plac\w+)/, ':' + stylis__WEBPACK_IMPORTED_MODULE_5__.MOZ + '$1')]
            }), (0,stylis__WEBPACK_IMPORTED_MODULE_3__.copy)(element, {
              props: [(0,stylis__WEBPACK_IMPORTED_MODULE_4__.replace)(value, /:(plac\w+)/, stylis__WEBPACK_IMPORTED_MODULE_5__.MS + 'input-$1')]
            })], callback);
        }

        return '';
      });
  }
};

var defaultStylisPlugins = [prefixer];
var getSourceMap;

{
  var sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;

  getSourceMap = function getSourceMap(styles) {
    var matches = styles.match(sourceMapPattern);
    if (!matches) return;
    return matches[matches.length - 1];
  };
}

var createCache = function createCache(options) {
  var key = options.key;

  if (!key) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
  }

  if (key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');

      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }

      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }

  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

  {
    if (/[^a-z-]/.test(key)) {
      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
    }
  }

  var inserted = {};
  var container;
  var nodesToHydrate = [];

  {
    container = options.container || document.head;
    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
      var attrib = node.getAttribute("data-emotion").split(' ');

      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }

      nodesToHydrate.push(node);
    });
  }

  var _insert;

  var omnipresentPlugins = [compat, removeLabel];

  {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache.compat;
      }

    }), incorrectImportAlarm);
  }

  {
    var currentSheet;
    var finalizingPlugins = [stylis__WEBPACK_IMPORTED_MODULE_6__.stringify, function (element) {
      if (!element.root) {
        if (element["return"]) {
          currentSheet.insert(element["return"]);
        } else if (element.value && element.type !== stylis__WEBPACK_IMPORTED_MODULE_5__.COMMENT) {
          // insert empty rule in non-production environments
          // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
          currentSheet.insert(element.value + "{}");
        }
      }
    } ];
    var serializer = (0,stylis__WEBPACK_IMPORTED_MODULE_7__.middleware)(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

    var stylis = function stylis(styles) {
      return (0,stylis__WEBPACK_IMPORTED_MODULE_6__.serialize)((0,stylis__WEBPACK_IMPORTED_MODULE_8__.compile)(styles), serializer);
    };

    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;

      if (getSourceMap) {
        var sourceMap = getSourceMap(serialized.styles);

        if (sourceMap) {
          currentSheet = {
            insert: function insert(rule) {
              sheet.insert(rule + sourceMap);
            }
          };
        }
      }

      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }

  var cache = {
    key: key,
    sheet: new _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__.StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};




/***/ }),

/***/ "../../node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.development.esm.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.development.esm.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createEmotion)
/* harmony export */ });
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/cache */ "../../node_modules/@emotion/cache/dist/emotion-cache.browser.development.esm.js");
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/serialize */ "../../node_modules/@emotion/serialize/dist/emotion-serialize.development.esm.js");
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/utils */ "../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js");




function insertWithoutScoping(cache, serialized) {
  if (cache.inserted[serialized.name] === undefined) {
    return cache.insert('', serialized, cache.sheet, true);
  }
}

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__.getRegisteredStyles)(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var createEmotion = function createEmotion(options) {
  var cache = (0,_emotion_cache__WEBPACK_IMPORTED_MODULE_0__["default"])(options);

  cache.sheet.speedy = function (value) {
    if (this.ctr !== 0) {
      throw new Error('speedy must be changed before any rules are inserted');
    }

    this.isSpeedy = value;
  };

  cache.compat = true;

  var css = function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_1__.serializeStyles)(args, cache.registered, undefined);
    (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__.insertStyles)(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var keyframes = function keyframes() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_1__.serializeStyles)(args, cache.registered);
    var animation = "animation-" + serialized.name;
    insertWithoutScoping(cache, {
      name: serialized.name,
      styles: "@keyframes " + animation + "{" + serialized.styles + "}"
    });
    return animation;
  };

  var injectGlobal = function injectGlobal() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_1__.serializeStyles)(args, cache.registered);
    insertWithoutScoping(cache, serialized);
  };

  var cx = function cx() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return merge(cache.registered, css, classnames(args));
  };

  return {
    css: css,
    cx: cx,
    injectGlobal: injectGlobal,
    keyframes: keyframes,
    hydrate: function hydrate(ids) {
      ids.forEach(function (key) {
        cache.inserted[key] = true;
      });
    },
    flush: function flush() {
      cache.registered = {};
      cache.inserted = {};
      cache.sheet.flush();
    },
    sheet: cache.sheet,
    cache: cache,
    getRegisteredStyles: _emotion_utils__WEBPACK_IMPORTED_MODULE_2__.getRegisteredStyles.bind(null, cache.registered),
    merge: merge.bind(null, cache.registered, css)
  };
};

var classnames = function classnames(args) {
  var cls = '';

  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};




/***/ }),

/***/ "../../node_modules/@emotion/css/dist/emotion-css.development.esm.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@emotion/css/dist/emotion-css.development.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cache: () => (/* binding */ cache),
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   cx: () => (/* binding */ cx),
/* harmony export */   flush: () => (/* binding */ flush),
/* harmony export */   getRegisteredStyles: () => (/* binding */ getRegisteredStyles),
/* harmony export */   hydrate: () => (/* binding */ hydrate),
/* harmony export */   injectGlobal: () => (/* binding */ injectGlobal),
/* harmony export */   keyframes: () => (/* binding */ keyframes),
/* harmony export */   merge: () => (/* binding */ merge),
/* harmony export */   sheet: () => (/* binding */ sheet)
/* harmony export */ });
/* harmony import */ var _create_instance_dist_emotion_css_create_instance_development_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../create-instance/dist/emotion-css-create-instance.development.esm.js */ "../../node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.development.esm.js");
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/cache */ "../../node_modules/@emotion/cache/dist/emotion-cache.browser.development.esm.js");
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/serialize */ "../../node_modules/@emotion/serialize/dist/emotion-serialize.development.esm.js");
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/utils */ "../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js");





var _createEmotion = (0,_create_instance_dist_emotion_css_create_instance_development_esm_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
  key: 'css'
}),
    flush = _createEmotion.flush,
    hydrate = _createEmotion.hydrate,
    cx = _createEmotion.cx,
    merge = _createEmotion.merge,
    getRegisteredStyles = _createEmotion.getRegisteredStyles,
    injectGlobal = _createEmotion.injectGlobal,
    keyframes = _createEmotion.keyframes,
    css = _createEmotion.css,
    sheet = _createEmotion.sheet,
    cache = _createEmotion.cache;




/***/ }),

/***/ "../../node_modules/@emotion/hash/dist/emotion-hash.esm.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@emotion/hash/dist/emotion-hash.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ murmur2)
/* harmony export */ });
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}




/***/ }),

/***/ "../../node_modules/@emotion/memoize/dist/emotion-memoize.esm.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/@emotion/memoize/dist/emotion-memoize.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ memoize)
/* harmony export */ });
function memoize(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}




/***/ }),

/***/ "../../node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.esm.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.esm.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ hoistNonReactStatics)
/* harmony export */ });
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hoist-non-react-statics */ "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0__);


// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks

var hoistNonReactStatics = (function (targetComponent, sourceComponent) {
  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_0___default()(targetComponent, sourceComponent);
});




/***/ }),

/***/ "../../node_modules/@emotion/react/dist/emotion-element-489459f2.browser.development.esm.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/@emotion/react/dist/emotion-element-489459f2.browser.development.esm.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CacheProvider),
/* harmony export */   E: () => (/* binding */ Emotion$1),
/* harmony export */   T: () => (/* binding */ ThemeContext),
/* harmony export */   _: () => (/* binding */ __unsafe_useEmotionCache),
/* harmony export */   a: () => (/* binding */ ThemeProvider),
/* harmony export */   b: () => (/* binding */ withTheme),
/* harmony export */   c: () => (/* binding */ createEmotionProps),
/* harmony export */   h: () => (/* binding */ hasOwn),
/* harmony export */   u: () => (/* binding */ useTheme),
/* harmony export */   w: () => (/* binding */ withEmotionCache)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/cache */ "../../node_modules/@emotion/cache/dist/emotion-cache.browser.development.esm.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "../../node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/weak-memoize */ "../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js");
/* harmony import */ var _isolated_hnrs_dist_emotion_react_isolated_hnrs_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.esm.js */ "../../node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.esm.js");
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/utils */ "../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js");
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/serialize */ "../../node_modules/@emotion/serialize/dist/emotion-serialize.development.esm.js");
/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/use-insertion-effect-with-fallbacks */ "../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js");










var EmotionCacheContext = /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_0__.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */(0,_emotion_cache__WEBPACK_IMPORTED_MODULE_1__["default"])({
  key: 'css'
}) : null);

{
  EmotionCacheContext.displayName = 'EmotionCacheContext';
}

var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);
};

var withEmotionCache = function withEmotionCache(func) {
  return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (props, ref) {
    // the cache will never be null in the browser
    var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);
    return func(props, cache, ref);
  });
};

var ThemeContext = /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_0__.createContext({});

{
  ThemeContext.displayName = 'EmotionThemeContext';
}

var useTheme = function useTheme() {
  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext);
};

var getTheme = function getTheme(outerTheme, theme) {
  if (typeof theme === 'function') {
    var mergedTheme = theme(outerTheme);

    if ((mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme))) {
      throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
    }

    return mergedTheme;
  }

  if ((theme == null || typeof theme !== 'object' || Array.isArray(theme))) {
    throw new Error('[ThemeProvider] Please make your theme prop a plain object');
  }

  return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__["default"])({}, outerTheme, theme);
};

var createCacheWithTheme = /* #__PURE__ */(0,_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_3__["default"])(function (outerTheme) {
  return (0,_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_3__["default"])(function (theme) {
    return getTheme(outerTheme, theme);
  });
});
var ThemeProvider = function ThemeProvider(props) {
  var theme = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext);

  if (props.theme !== theme) {
    theme = createCacheWithTheme(theme)(props.theme);
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeContext.Provider, {
    value: theme
  }, props.children);
};
function withTheme(Component) {
  var componentName = Component.displayName || Component.name || 'Component';
  var WithTheme = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function render(props, ref) {
    var theme = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__["default"])({
      theme: theme,
      ref: ref
    }, props));
  });
  WithTheme.displayName = "WithTheme(" + componentName + ")";
  return (0,_isolated_hnrs_dist_emotion_react_isolated_hnrs_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_7__["default"])(WithTheme, Component);
}

var hasOwn = {}.hasOwnProperty;

var getLastPart = function getLastPart(functionName) {
  // The match may be something like 'Object.createEmotionProps' or
  // 'Loader.prototype.render'
  var parts = functionName.split('.');
  return parts[parts.length - 1];
};

var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
  // V8
  var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
  if (match) return getLastPart(match[1]); // Safari / Firefox

  match = /^([A-Za-z0-9$.]+)@/.exec(line);
  if (match) return getLastPart(match[1]);
  return undefined;
};

var internalReactFunctionNames = /* #__PURE__ */new Set(['renderWithHooks', 'processChild', 'finishClassComponent', 'renderToString']); // These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.

var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
  return identifier.replace(/\$/g, '-');
};

var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
  if (!stackTrace) return undefined;
  var lines = stackTrace.split('\n');

  for (var i = 0; i < lines.length; i++) {
    var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"

    if (!functionName) continue; // If we reach one of these, we have gone too far and should quit

    if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
    // uppercase letter

    if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
  }

  return undefined;
};

var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {
  if (typeof props.css === 'string' && // check if there is a css declaration
  props.css.indexOf(':') !== -1) {
    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
  }

  var newProps = {};

  for (var _key in props) {
    if (hasOwn.call(props, _key)) {
      newProps[_key] = props[_key];
    }
  }

  newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:
  // - It causes hydration warnings when using Safari and SSR
  // - It can degrade performance if there are a huge number of elements
  //
  // Even if the flag is set, we still don't compute the label if it has already
  // been determined by the Babel plugin.

  if (typeof globalThis !== 'undefined' && !!globalThis.EMOTION_RUNTIME_AUTO_LABEL && !!props.css && (typeof props.css !== 'object' || !('name' in props.css) || typeof props.css.name !== 'string' || props.css.name.indexOf('-') === -1)) {
    var label = getLabelFromStackTrace(new Error().stack);
    if (label) newProps[labelPropName] = label;
  }

  return newProps;
};

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serialized = _ref.serialized,
      isStringTag = _ref.isStringTag;
  (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__.registerStyles)(cache, serialized, isStringTag);
  (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__.useInsertionEffectAlwaysWithSyncFallback)(function () {
    return (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__.insertStyles)(cache, serialized, isStringTag);
  });

  return null;
};

var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
  // not passing the registered cache to serializeStyles because it would
  // make certain babel optimisations not possible

  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
    cssProp = cache.registered[cssProp];
  }

  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = '';

  if (typeof props.className === 'string') {
    className = (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__.getRegisteredStyles)(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }

  var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_5__.serializeStyles)(registeredStyles, undefined, react__WEBPACK_IMPORTED_MODULE_0__.useContext(ThemeContext));

  if (serialized.name.indexOf('-') === -1) {
    var labelFromStack = props[labelPropName];

    if (labelFromStack) {
      serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_5__.serializeStyles)([serialized, 'label:' + labelFromStack + ';']);
    }
  }

  className += cache.key + "-" + serialized.name;
  var newProps = {};

  for (var _key2 in props) {
    if (hasOwn.call(props, _key2) && _key2 !== 'css' && _key2 !== typePropName && (_key2 !== labelPropName)) {
      newProps[_key2] = props[_key2];
    }
  }

  newProps.className = className;

  if (ref) {
    newProps.ref = ref;
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Insertion, {
    cache: cache,
    serialized: serialized,
    isStringTag: typeof WrappedComponent === 'string'
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent, newProps));
});

{
  Emotion.displayName = 'EmotionCssPropInternal';
}

var Emotion$1 = Emotion;




/***/ }),

/***/ "../../node_modules/@emotion/react/dist/emotion-react.browser.development.esm.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/@emotion/react/dist/emotion-react.browser.development.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CacheProvider: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.C),
/* harmony export */   ClassNames: () => (/* binding */ ClassNames),
/* harmony export */   Global: () => (/* binding */ Global),
/* harmony export */   ThemeContext: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.T),
/* harmony export */   ThemeProvider: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.a),
/* harmony export */   __unsafe_useEmotionCache: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__._),
/* harmony export */   createElement: () => (/* binding */ jsx),
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   jsx: () => (/* binding */ jsx),
/* harmony export */   keyframes: () => (/* binding */ keyframes),
/* harmony export */   useTheme: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.u),
/* harmony export */   withEmotionCache: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),
/* harmony export */   withTheme: () => (/* reexport safe */ _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)
/* harmony export */ });
/* harmony import */ var _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emotion-element-489459f2.browser.development.esm.js */ "../../node_modules/@emotion/react/dist/emotion-element-489459f2.browser.development.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/utils */ "../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js");
/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/use-insertion-effect-with-fallbacks */ "../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js");
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/serialize */ "../../node_modules/@emotion/serialize/dist/emotion-serialize.development.esm.js");
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/cache */ "../../node_modules/@emotion/cache/dist/emotion-cache.browser.development.esm.js");
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "../../node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/weak-memoize */ "../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! hoist-non-react-statics */ "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__);












var isDevelopment = true;

var pkg = {
	name: "@emotion/react",
	version: "11.14.0",
	main: "dist/emotion-react.cjs.js",
	module: "dist/emotion-react.esm.js",
	types: "dist/emotion-react.cjs.d.ts",
	exports: {
		".": {
			types: {
				"import": "./dist/emotion-react.cjs.mjs",
				"default": "./dist/emotion-react.cjs.js"
			},
			development: {
				"edge-light": {
					module: "./dist/emotion-react.development.edge-light.esm.js",
					"import": "./dist/emotion-react.development.edge-light.cjs.mjs",
					"default": "./dist/emotion-react.development.edge-light.cjs.js"
				},
				worker: {
					module: "./dist/emotion-react.development.edge-light.esm.js",
					"import": "./dist/emotion-react.development.edge-light.cjs.mjs",
					"default": "./dist/emotion-react.development.edge-light.cjs.js"
				},
				workerd: {
					module: "./dist/emotion-react.development.edge-light.esm.js",
					"import": "./dist/emotion-react.development.edge-light.cjs.mjs",
					"default": "./dist/emotion-react.development.edge-light.cjs.js"
				},
				browser: {
					module: "./dist/emotion-react.browser.development.esm.js",
					"import": "./dist/emotion-react.browser.development.cjs.mjs",
					"default": "./dist/emotion-react.browser.development.cjs.js"
				},
				module: "./dist/emotion-react.development.esm.js",
				"import": "./dist/emotion-react.development.cjs.mjs",
				"default": "./dist/emotion-react.development.cjs.js"
			},
			"edge-light": {
				module: "./dist/emotion-react.edge-light.esm.js",
				"import": "./dist/emotion-react.edge-light.cjs.mjs",
				"default": "./dist/emotion-react.edge-light.cjs.js"
			},
			worker: {
				module: "./dist/emotion-react.edge-light.esm.js",
				"import": "./dist/emotion-react.edge-light.cjs.mjs",
				"default": "./dist/emotion-react.edge-light.cjs.js"
			},
			workerd: {
				module: "./dist/emotion-react.edge-light.esm.js",
				"import": "./dist/emotion-react.edge-light.cjs.mjs",
				"default": "./dist/emotion-react.edge-light.cjs.js"
			},
			browser: {
				module: "./dist/emotion-react.browser.esm.js",
				"import": "./dist/emotion-react.browser.cjs.mjs",
				"default": "./dist/emotion-react.browser.cjs.js"
			},
			module: "./dist/emotion-react.esm.js",
			"import": "./dist/emotion-react.cjs.mjs",
			"default": "./dist/emotion-react.cjs.js"
		},
		"./jsx-runtime": {
			types: {
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
			},
			development: {
				"edge-light": {
					module: "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.esm.js",
					"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.cjs.mjs",
					"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.cjs.js"
				},
				worker: {
					module: "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.esm.js",
					"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.cjs.mjs",
					"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.cjs.js"
				},
				workerd: {
					module: "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.esm.js",
					"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.cjs.mjs",
					"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.edge-light.cjs.js"
				},
				browser: {
					module: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.development.esm.js",
					"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.development.cjs.mjs",
					"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.development.cjs.js"
				},
				module: "./jsx-runtime/dist/emotion-react-jsx-runtime.development.esm.js",
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.development.cjs.js"
			},
			"edge-light": {
				module: "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.esm.js",
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.cjs.js"
			},
			worker: {
				module: "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.esm.js",
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.cjs.js"
			},
			workerd: {
				module: "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.esm.js",
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.edge-light.cjs.js"
			},
			browser: {
				module: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
				"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.cjs.mjs",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.cjs.js"
			},
			module: "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js",
			"import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
			"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
		},
		"./_isolated-hnrs": {
			types: {
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
			},
			development: {
				"edge-light": {
					module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.esm.js",
					"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.cjs.mjs",
					"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.cjs.js"
				},
				worker: {
					module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.esm.js",
					"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.cjs.mjs",
					"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.cjs.js"
				},
				workerd: {
					module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.esm.js",
					"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.cjs.mjs",
					"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.edge-light.cjs.js"
				},
				browser: {
					module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.esm.js",
					"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.cjs.mjs",
					"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.development.cjs.js"
				},
				module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.esm.js",
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.development.cjs.js"
			},
			"edge-light": {
				module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.esm.js",
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.cjs.js"
			},
			worker: {
				module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.esm.js",
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.cjs.js"
			},
			workerd: {
				module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.esm.js",
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.edge-light.cjs.js"
			},
			browser: {
				module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
				"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.cjs.mjs",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.cjs.js"
			},
			module: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js",
			"import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
			"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
		},
		"./jsx-dev-runtime": {
			types: {
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
			},
			development: {
				"edge-light": {
					module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.esm.js",
					"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.cjs.mjs",
					"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.cjs.js"
				},
				worker: {
					module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.esm.js",
					"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.cjs.mjs",
					"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.cjs.js"
				},
				workerd: {
					module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.esm.js",
					"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.cjs.mjs",
					"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.edge-light.cjs.js"
				},
				browser: {
					module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.development.esm.js",
					"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.development.cjs.mjs",
					"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.development.cjs.js"
				},
				module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.esm.js",
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.development.cjs.js"
			},
			"edge-light": {
				module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.esm.js",
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.cjs.js"
			},
			worker: {
				module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.esm.js",
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.cjs.js"
			},
			workerd: {
				module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.esm.js",
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.edge-light.cjs.js"
			},
			browser: {
				module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
				"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.cjs.mjs",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.cjs.js"
			},
			module: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js",
			"import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
			"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
		},
		"./package.json": "./package.json",
		"./types/css-prop": "./types/css-prop.d.ts",
		"./macro": {
			types: {
				"import": "./macro.d.mts",
				"default": "./macro.d.ts"
			},
			"default": "./macro.js"
		}
	},
	imports: {
		"#is-development": {
			development: "./src/conditions/true.ts",
			"default": "./src/conditions/false.ts"
		},
		"#is-browser": {
			"edge-light": "./src/conditions/false.ts",
			workerd: "./src/conditions/false.ts",
			worker: "./src/conditions/false.ts",
			browser: "./src/conditions/true.ts",
			"default": "./src/conditions/is-browser.ts"
		}
	},
	files: [
		"src",
		"dist",
		"jsx-runtime",
		"jsx-dev-runtime",
		"_isolated-hnrs",
		"types/css-prop.d.ts",
		"macro.*"
	],
	sideEffects: false,
	author: "Emotion Contributors",
	license: "MIT",
	scripts: {
		"test:typescript": "dtslint types"
	},
	dependencies: {
		"@babel/runtime": "^7.18.3",
		"@emotion/babel-plugin": "^11.13.5",
		"@emotion/cache": "^11.14.0",
		"@emotion/serialize": "^1.3.3",
		"@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
		"@emotion/utils": "^1.4.2",
		"@emotion/weak-memoize": "^0.4.0",
		"hoist-non-react-statics": "^3.3.1"
	},
	peerDependencies: {
		react: ">=16.8.0"
	},
	peerDependenciesMeta: {
		"@types/react": {
			optional: true
		}
	},
	devDependencies: {
		"@definitelytyped/dtslint": "0.0.112",
		"@emotion/css": "11.13.5",
		"@emotion/css-prettifier": "1.2.0",
		"@emotion/server": "11.11.0",
		"@emotion/styled": "11.14.0",
		"@types/hoist-non-react-statics": "^3.3.5",
		"html-tag-names": "^1.1.2",
		react: "16.14.0",
		"svg-tag-names": "^1.1.1",
		typescript: "^5.4.5"
	},
	repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
	publishConfig: {
		access: "public"
	},
	"umd:main": "dist/emotion-react.umd.min.js",
	preconstruct: {
		entrypoints: [
			"./index.ts",
			"./jsx-runtime.ts",
			"./jsx-dev-runtime.ts",
			"./_isolated-hnrs.ts"
		],
		umdName: "emotionReact",
		exports: {
			extra: {
				"./types/css-prop": "./types/css-prop.d.ts",
				"./macro": {
					types: {
						"import": "./macro.d.mts",
						"default": "./macro.d.ts"
					},
					"default": "./macro.js"
				}
			}
		}
	}
};

var jsx = function jsx(type, props) {
  // eslint-disable-next-line prefer-rest-params
  var args = arguments;

  if (props == null || !_emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.h.call(props, 'css')) {
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(undefined, args);
  }

  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = _emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.E;
  createElementArgArray[1] = (0,_emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(type, props);

  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  }

  return react__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(null, createElementArgArray);
};

(function (_jsx) {
  var JSX;

  (function (_JSX) {})(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})));
})(jsx || (jsx = {}));

var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag

var Global = /* #__PURE__ */(0,_emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(function (props, cache) {
  if (!warnedAboutCssPropForGlobal && ( // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // I don't really want to add it to the type since it shouldn't be used
  'className' in props && props.className || 'css' in props && props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }

  var styles = props.styles;
  var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__.serializeStyles)([styles], undefined, react__WEBPACK_IMPORTED_MODULE_1__.useContext(_emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.T));
  // but it is based on a constant that will never change at runtime
  // it's effectively like having two implementations and switching them out
  // so it's not actually breaking anything


  var sheetRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef();
  (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__.useInsertionEffectWithLayoutFallback)(function () {
    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

    var sheet = new cache.sheet.constructor({
      key: key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }

    if (node !== null) {
      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

      node.setAttribute('data-emotion', key);
      sheet.hydrate([node]);
    }

    sheetRef.current = [sheet, rehydrating];
    return function () {
      sheet.flush();
    };
  }, [cache]);
  (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__.useInsertionEffectWithLayoutFallback)(function () {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0],
        rehydrating = sheetRefCurrent[1];

    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }

    if (serialized.next !== undefined) {
      // insert keyframes
      (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__.insertStyles)(cache, serialized.next, true);
    }

    if (sheet.tags.length) {
      // if this doesn't exist then it will be null so the style element will be appended
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }

    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});

{
  Global.displayName = 'EmotionGlobal';
}

function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__.serializeStyles)(args);
}

function keyframes() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
}

var classnames = function classnames(args) {
  var len = args.length;
  var i = 0;
  var cls = '';

  for (; i < len; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            if (arg.styles !== undefined && arg.name !== undefined) {
              console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
            }

            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__.getRegisteredStyles)(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serializedArr = _ref.serializedArr;
  (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__.useInsertionEffectAlwaysWithSyncFallback)(function () {

    for (var i = 0; i < serializedArr.length; i++) {
      (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__.insertStyles)(cache, serializedArr[i], false);
    }
  });

  return null;
};

var ClassNames = /* #__PURE__ */(0,_emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(function (props, cache) {
  var hasRendered = false;
  var serializedArr = [];

  var css = function css() {
    if (hasRendered && isDevelopment) {
      throw new Error('css can only be used during render');
    }

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__.serializeStyles)(args, cache.registered);
    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

    (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__.registerStyles)(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var cx = function cx() {
    if (hasRendered && isDevelopment) {
      throw new Error('cx can only be used during render');
    }

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return merge(cache.registered, css, classnames(args));
  };

  var content = {
    css: css,
    cx: cx,
    theme: react__WEBPACK_IMPORTED_MODULE_1__.useContext(_emotion_element_489459f2_browser_development_esm_js__WEBPACK_IMPORTED_MODULE_0__.T)
  };
  var ele = props.children(content);
  hasRendered = true;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(Insertion, {
    cache: cache,
    serializedArr: serializedArr
  }), ele);
});

{
  ClassNames.displayName = 'EmotionClassNames';
}

{
  var isBrowser = typeof document !== 'undefined'; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked

  var isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined';

  if (isBrowser && !isTestEnv) {
    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
    var globalContext = typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
    : isBrowser ? window : __webpack_require__.g;
    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

    if (globalContext[globalKey]) {
      console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
    }

    globalContext[globalKey] = true;
  }
}




/***/ }),

/***/ "../../node_modules/@emotion/serialize/dist/emotion-serialize.development.esm.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/@emotion/serialize/dist/emotion-serialize.development.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   serializeStyles: () => (/* binding */ serializeStyles)
/* harmony export */ });
/* harmony import */ var _emotion_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/hash */ "../../node_modules/@emotion/hash/dist/emotion-hash.esm.js");
/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/unitless */ "../../node_modules/@emotion/unitless/dist/emotion-unitless.esm.js");
/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/memoize */ "../../node_modules/@emotion/memoize/dist/emotion-memoize.esm.js");




var isDevelopment = true;

var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = /* #__PURE__ */(0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_2__["default"])(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (_emotion_unitless__WEBPACK_IMPORTED_MODULE_1__["default"][key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

{
  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
  var oldProcessStyleValue = processStyleValue;
  var msPattern = /^-ms-/;
  var hyphenPattern = /-(.)/g;
  var hyphenatedCache = {};

  processStyleValue = function processStyleValue(key, value) {
    if (key === 'content') {
      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }

    var processed = oldProcessStyleValue(key, value);

    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }

    return processed;
  };
}

var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }

  var componentSelector = interpolation;

  if (componentSelector.__emotion_styles !== undefined) {
    if (String(componentSelector) === 'NO_COMPONENT_SELECTOR') {
      throw new Error(noComponentSelectorMessage);
    }

    return componentSelector;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        var keyframes = interpolation;

        if (keyframes.anim === 1) {
          cursor = {
            name: keyframes.name,
            styles: keyframes.styles,
            next: cursor
          };
          return keyframes.name;
        }

        var serializedStyles = interpolation;

        if (serializedStyles.styles !== undefined) {
          var next = serializedStyles.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = serializedStyles.styles + ";";
          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else {
          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
        }

        break;
      }

    case 'string':
      {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function (_match, _p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
          return "${" + fakeVarName + "}";
        });

        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join('\n') + "\n\nYou should wrap it with `css` like this:\n\ncss`" + replaced + "`");
        }
      }

      break;
  } // finalize string values (regular strings and functions interpolated into css calls)


  var asString = interpolation;

  if (registered == null) {
    return asString;
  }

  var cached = registered[asString];
  return cached !== undefined ? cached : asString;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];

      if (typeof value !== 'object') {
        var asString = value;

        if (registered != null && registered[asString] !== undefined) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === 'NO_COMPONENT_SELECTOR' && isDevelopment) {
          throw new Error(noComponentSelectorMessage);
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);

          switch (key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }

            default:
              {
                if (key === 'undefined') {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }

                string += key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g; // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list

var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;

    if (asTemplateStringsArr[0] === undefined) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
    }

    styles += asTemplateStringsArr[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);

    if (stringMode) {
      var templateStringsArr = strings;

      if (templateStringsArr[i] === undefined) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }

      styles += templateStringsArr[i];
    }
  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + match[1];
  }

  var name = (0,_emotion_hash__WEBPACK_IMPORTED_MODULE_0__["default"])(styles) + identifierName;

  {
    var devStyles = {
      name: name,
      styles: styles,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
    return devStyles;
  }
}




/***/ }),

/***/ "../../node_modules/@emotion/sheet/dist/emotion-sheet.development.esm.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/@emotion/sheet/dist/emotion-sheet.development.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StyleSheet: () => (/* binding */ StyleSheet)
/* harmony export */ });
var isDevelopment = true;

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  } // this function should always return with a value
  // TS can't understand it though so we make it stop complaining here


  return undefined;
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}

var StyleSheet = /*#__PURE__*/function () {
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  function StyleSheet(options) {
    var _this = this;

    this._insertTag = function (tag) {
      var before;

      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }

      _this.container.insertBefore(tag, before);

      _this.tags.push(tag);
    };

    this.isSpeedy = options.speedy === undefined ? !isDevelopment : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }

    var tag = this.tags[this.tags.length - 1];

    {
      var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
        // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
      }

      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
    }

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
          console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    this.tags.forEach(function (tag) {
      var _tag$parentNode;

      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;

    {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };

  return StyleSheet;
}();




/***/ }),

/***/ "../../node_modules/@emotion/unitless/dist/emotion-unitless.esm.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/@emotion/unitless/dist/emotion-unitless.esm.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ unitlessKeys)
/* harmony export */ });
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};




/***/ }),

/***/ "../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js":
/*!***************************************************************************************************************************************!*\
  !*** ../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useInsertionEffectAlwaysWithSyncFallback: () => (/* binding */ useInsertionEffectAlwaysWithSyncFallback),
/* harmony export */   useInsertionEffectWithLayoutFallback: () => (/* binding */ useInsertionEffectWithLayoutFallback)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);


var syncFallback = function syncFallback(create) {
  return create();
};

var useInsertionEffect = react__WEBPACK_IMPORTED_MODULE_0__['useInsertion' + 'Effect'] ? react__WEBPACK_IMPORTED_MODULE_0__['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;




/***/ }),

/***/ "../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getRegisteredStyles: () => (/* binding */ getRegisteredStyles),
/* harmony export */   insertStyles: () => (/* binding */ insertStyles),
/* harmony export */   registerStyles: () => (/* binding */ registerStyles)
/* harmony export */ });
var isBrowser = true;

function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false ) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;

  if (cache.inserted[serialized.name] === undefined) {
    var current = serialized;

    do {
      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

      current = current.next;
    } while (current !== undefined);
  }
};




/***/ }),

/***/ "../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ weakMemoize)
/* harmony export */ });
var weakMemoize = function weakMemoize(func) {
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // Use non-null assertion because we just checked that the cache `has` it
      // This allows us to remove `undefined` from the return value
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};




/***/ }),

/***/ "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var reactIs = __webpack_require__(/*! react-is */ "../../node_modules/react-is/index.js");

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),

/***/ "../../node_modules/react-dom/cjs/react-dom.development.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/react-dom/cjs/react-dom.development.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var Scheduler = __webpack_require__(/*! scheduler */ "../../node_modules/scheduler/index.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var suppressWarning = false;
function setSuppressWarning(newSuppressWarning) {
  {
    suppressWarning = newSuppressWarning;
  }
} // In DEV, calls to console.warn and console.error get replaced
// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    if (!suppressWarning) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
}
function error(format) {
  {
    if (!suppressWarning) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var ScopeComponent = 21;
var OffscreenComponent = 22;
var LegacyHiddenComponent = 23;
var CacheComponent = 24;
var TracingMarkerComponent = 25;

// -----------------------------------------------------------------------------

var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
// the react-reconciler package.

var enableNewReconciler = false; // Support legacy Primer support on internal FB www

var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
// React DOM Chopping Block
//
// Similar to main Chopping Block but only flags related to React DOM. These are
// grouped because we will likely batch all of them into a single major release.
// -----------------------------------------------------------------------------
// Disable support for comment nodes as React DOM containers. Already disabled
// in open source, but www codebase still relies on it. Need to remove.

var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
// and client rendering, mostly to allow JSX attributes to apply to the custom
// element's object properties instead of only HTML attributes.
// https://github.com/facebook/react/issues/11347

var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
var warnAboutStringRefs = true; // -----------------------------------------------------------------------------
// Debugging and DevTools
// -----------------------------------------------------------------------------
// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
// for an experimental timeline tool.

var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

var allNativeEvents = new Set();
/**
 * Mapping from registration name to event name
 */


var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + 'Capture', dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  {
    if (registrationNameDependencies[registrationName]) {
      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
    }
  }

  registrationNameDependencies[registrationName] = dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }

  for (var i = 0; i < dependencies.length; i++) {
    allNativeEvents.add(dependencies[i]);
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var hasOwnProperty = Object.prototype.hasOwnProperty;

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}

function checkAttributeStringCoercion(value, attributeName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkPropStringCoercion(value, propName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkCSSPropertyStringCoercion(value, propName) {
  {
    if (willCoercionThrow(value)) {
      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkHtmlStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}
function checkFormFieldValueStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the filter are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {

    return false;
  }

  if (propertyInfo !== null) {

    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
  this.removeEmptyString = removeEmptyString;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML attribute filter.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
  false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
  false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
false);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true, // sanitizeURL
  true);
});

// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */

var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      // This check protects multiple uses of `expected`, which is why the
      // react-internal/safe-string-coercion rule is disabled in several spots
      // below.
      {
        checkAttributeStringCoercion(expected, name);
      }

      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        // eslint-disable-next-line react-internal/safe-string-coercion
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          } // eslint-disable-next-line react-internal/safe-string-coercion


          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected, isCustomComponentTag) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    {
      checkAttributeStringCoercion(expected, name);
    }

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        {
          checkAttributeStringCoercion(value, name);
        }

        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        {
          checkAttributeStringCoercion(value, attributeName);
        }

        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_SCOPE_TYPE = Symbol.for('react.scope');
var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
var REACT_CACHE_TYPE = Symbol.for('react.cache');
var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var assign = Object.assign;

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}

function describeClassComponentFrame(ctor, source, ownerFn) {
  {
    return describeNativeComponentFrame(ctor, true);
  }
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

function describeFiber(fiber) {
  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;
  var source =  fiber._debugSource ;

  switch (fiber.tag) {
    case HostComponent:
      return describeBuiltInComponentFrame(fiber.type);

    case LazyComponent:
      return describeBuiltInComponentFrame('Lazy');

    case SuspenseComponent:
      return describeBuiltInComponentFrame('Suspense');

    case SuspenseListComponent:
      return describeBuiltInComponentFrame('SuspenseList');

    case FunctionComponent:
    case IndeterminateComponent:
    case SimpleMemoComponent:
      return describeFunctionComponentFrame(fiber.type);

    case ForwardRef:
      return describeFunctionComponentFrame(fiber.type.render);

    case ClassComponent:
      return describeClassComponentFrame(fiber.type);

    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = '';
    var node = workInProgress;

    do {
      info += describeFiber(node);
      node = node.return;
    } while (node);

    return info;
  } catch (x) {
    return '\nError generating stack: ' + x.message + '\n' + x.stack;
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

function getWrappedName$1(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
} // Keep in sync with shared/getComponentNameFromType


function getContextName$1(type) {
  return type.displayName || 'Context';
}

function getComponentNameFromFiber(fiber) {
  var tag = fiber.tag,
      type = fiber.type;

  switch (tag) {
    case CacheComponent:
      return 'Cache';

    case ContextConsumer:
      var context = type;
      return getContextName$1(context) + '.Consumer';

    case ContextProvider:
      var provider = type;
      return getContextName$1(provider._context) + '.Provider';

    case DehydratedFragment:
      return 'DehydratedFragment';

    case ForwardRef:
      return getWrappedName$1(type, type.render, 'ForwardRef');

    case Fragment:
      return 'Fragment';

    case HostComponent:
      // Host component type is the display name (e.g. "div", "View")
      return type;

    case HostPortal:
      return 'Portal';

    case HostRoot:
      return 'Root';

    case HostText:
      return 'Text';

    case LazyComponent:
      // Name comes from the type in this case; we don't have a tag.
      return getComponentNameFromType(type);

    case Mode:
      if (type === REACT_STRICT_MODE_TYPE) {
        // Don't be less specific than shared/getComponentNameFromType
        return 'StrictMode';
      }

      return 'Mode';

    case OffscreenComponent:
      return 'Offscreen';

    case Profiler:
      return 'Profiler';

    case ScopeComponent:
      return 'Scope';

    case SuspenseComponent:
      return 'Suspense';

    case SuspenseListComponent:
      return 'SuspenseList';

    case TracingMarkerComponent:
      return 'TracingMarker';
    // The display name for this tags come from the user-provided type:

    case ClassComponent:
    case FunctionComponent:
    case IncompleteClassComponent:
    case IndeterminateComponent:
    case MemoComponent:
    case SimpleMemoComponent:
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      break;

  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentNameFromFiber(owner);
    }
  }

  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function getCurrentFiber() {
  {
    return current;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  // The coercion safety check is performed in getToStringValue().
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'string':
    case 'undefined':
      return value;

    case 'object':
      {
        checkFormFieldValueStringCoercion(value);
      }

      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};
function checkControlledValueProps(tagName, props) {
  {
    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }

    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  }
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  {
    checkFormFieldValueStringCoercion(node[valueField]);
  }

  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      {
        checkFormFieldValueStringCoercion(value);
      }

      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      {
        checkFormFieldValueStringCoercion(value);
      }

      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;
  var hostProps = assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });
  return hostProps;
}
function initWrapperState(element, props) {
  {
    checkControlledValueProps('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    {
      checkAttributeStringCoercion(name, 'name');
    }

    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode(otherNode);

      if (!otherProps) {
        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;
var didWarnInvalidInnerHTML = false;
/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  {
    // If a value is not provided, then the children must be simple.
    if (props.value == null) {
      if (typeof props.children === 'object' && props.children !== null) {
        React.Children.forEach(props.children, function (child) {
          if (child == null) {
            return;
          }

          if (typeof child === 'string' || typeof child === 'number') {
            return;
          }

          if (!didWarnInvalidChild) {
            didWarnInvalidChild = true;

            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
          }
        });
      } else if (props.dangerouslySetInnerHTML != null) {
        if (!didWarnInvalidInnerHTML) {
          didWarnInvalidInnerHTML = true;

          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
        }
      }
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    checkControlledValueProps('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var propNameIsArray = isArray(props[propName]);

      if (props.multiple && !propNameIsArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && propNameIsArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$1(element, props) {
  return assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$2(element, props) {
  var node = element;

  if (props.dangerouslySetInnerHTML != null) {
    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    checkControlledValueProps('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (defaultValue != null) {
          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
        }

        if (isArray(children)) {
          if (children.length > 1) {
            throw new Error('<textarea> can only have at most one child.');
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === SVG_NAMESPACE) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  {
    checkCSSPropertyStringCoercion(value, name);
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {
    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a list for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (props.children != null || props.dangerouslySetInnerHTML != null) {
      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (props.children != null) {
      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
    }

    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (props.style != null && typeof props.style !== 'object') {
    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this list too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG allowed attribute list, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  disableremoteplayback: 'disableRemotePlayback',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  enterkeyhint: 'enterKeyHint',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  imagesizes: 'imageSizes',
  imagesrcset: 'imageSrcSet',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-description': 0,
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, eventRegistry) {
    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (eventRegistry != null) {
      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

      if (registrationNameDependencies.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, eventRegistry) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, eventRegistry) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, eventRegistry);
}

var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
var IS_NON_DELEGATED = 1 << 1;
var IS_CAPTURE_PHASE = 1 << 2;
// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
// we call willDeferLaterForLegacyFBSupport, thus not bailing out
// will result in endless cycles like an infinite loop.
// We also don't want to defer during event replaying.

var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

// This exists to avoid circular dependency between ReactDOMEventReplaying
// and DOMPluginEventSystem.
var currentReplayingEvent = null;
function setReplayingEvent(event) {
  {
    if (currentReplayingEvent !== null) {
      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
    }
  }

  currentReplayingEvent = event;
}
function resetReplayingEvent() {
  {
    if (currentReplayingEvent === null) {
      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
    }
  }

  currentReplayingEvent = null;
}
function isReplayingEvent(event) {
  return event === currentReplayingEvent;
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (typeof restoreImpl !== 'function') {
    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var flushSyncImpl = function () {};

var isInsideEventHandler = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    // TODO: Restore state in the microtask, after the discrete updates flush,
    // instead of early flushing them here.
    flushSyncImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, a, b) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, a, b);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
} // TODO: Replace with flushSync
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  flushSyncImpl = _flushSyncImpl;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;

  if (stateNode === null) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (props === null) {
    // Work in progress.
    return null;
  }

  var listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (listener && typeof listener !== 'function') {
    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
  }

  return listener;
}

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
}

var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebook/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (typeof document === 'undefined' || document === null) {
        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
      }

      var evt = document.createEvent('Event');
      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

      function restoreAfterDispatch() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }
      } // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.


      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        didCall = true;
        restoreAfterDispatch();
        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didCall && didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          // eslint-disable-next-line react-internal/prod-error-codes
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          // eslint-disable-next-line react-internal/prod-error-codes
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);

      if (!didCall) {
        // Something went really wrong, and our event was not dispatched.
        // https://github.com/facebook/react/issues/16734
        // https://github.com/facebook/react/issues/16585
        // Fall back to the production implementation.
        restoreAfterDispatch();
        return invokeGuardedCallbackProd.apply(this, arguments);
      }
    };
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
  }
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternals;
}
function has(key) {
  return key._reactInternals !== undefined;
}
function set(key, value) {
  key._reactInternals = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoFlags =
/*                      */
0;
var PerformedWork =
/*                */
1; // You can change the rest (and add more).

var Placement =
/*                    */
2;
var Update =
/*                       */
4;
var ChildDeletion =
/*                */
16;
var ContentReset =
/*                 */
32;
var Callback =
/*                     */
64;
var DidCapture =
/*                   */
128;
var ForceClientRender =
/*            */
256;
var Ref =
/*                          */
512;
var Snapshot =
/*                     */
1024;
var Passive =
/*                      */
2048;
var Hydrating =
/*                    */
4096;
var Visibility =
/*                   */
8192;
var StoreConsistency =
/*             */
16384;
var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

var HostEffectMask =
/*               */
32767; // These are not really side effects, but we still reuse this field.

var Incomplete =
/*                   */
32768;
var ShouldCapture =
/*                */
65536;
var ForceUpdateForLegacySuspense =
/* */
131072;
var Forked =
/*                       */
1048576; // Static tags describe aspects of a fiber that are not specific to a render,
// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
// This enables us to defer more work in the unmount case,
// since we can defer traversing the tree during layout to look for Passive effects,
// and instead rely on the static flag as a signal that there may be cleanup work.

var RefStatic =
/*                    */
2097152;
var LayoutStatic =
/*                 */
4194304;
var PassiveStatic =
/*                */
8388608; // These flags allow us to traverse to fibers that have effects on mount
// without traversing the entire tree after every commit for
// double invoking

var MountLayoutDev =
/*               */
16777216;
var MountPassiveDev =
/*              */
33554432; // Groups of flags that are used in the commit phase to skip over trees that
// don't contain effects, by checking subtreeFlags.

var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
// flag logic (see #20043)
Update | Snapshot | ( 0);
var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
// This allows certain concepts to persist without recalculating them,
// e.g. whether a subtree contains passive effects or portals.

var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (getNearestMountedFiber(fiber) !== fiber) {
    throw new Error('Unable to find node on an unmounted component.');
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (nearestMounted === null) {
      throw new Error('Unable to find node on an unmounted component.');
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      throw new Error('Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
        }
      }
    }

    if (a.alternate !== b) {
      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (a.tag !== HostRoot) {
    throw new Error('Unable to find node on an unmounted component.');
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
}

function findCurrentHostFiberImpl(node) {
  // Next we'll drill down this component to find the first HostComponent/Text.
  if (node.tag === HostComponent || node.tag === HostText) {
    return node;
  }

  var child = node.child;

  while (child !== null) {
    var match = findCurrentHostFiberImpl(child);

    if (match !== null) {
      return match;
    }

    child = child.sibling;
  }

  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
}

function findCurrentHostFiberWithNoPortalsImpl(node) {
  // Next we'll drill down this component to find the first HostComponent/Text.
  if (node.tag === HostComponent || node.tag === HostText) {
    return node;
  }

  var child = node.child;

  while (child !== null) {
    if (child.tag !== HostPortal) {
      var match = findCurrentHostFiberWithNoPortalsImpl(child);

      if (match !== null) {
        return match;
      }
    }

    child = child.sibling;
  }

  return null;
}

// This module only exists as an ESM wrapper around the external CommonJS
var scheduleCallback = Scheduler.unstable_scheduleCallback;
var cancelCallback = Scheduler.unstable_cancelCallback;
var shouldYield = Scheduler.unstable_shouldYield;
var requestPaint = Scheduler.unstable_requestPaint;
var now = Scheduler.unstable_now;
var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var NormalPriority = Scheduler.unstable_NormalPriority;
var LowPriority = Scheduler.unstable_LowPriority;
var IdlePriority = Scheduler.unstable_IdlePriority;
// this doesn't actually exist on the scheduler, but it *does*
// on scheduler/unstable_mock, which we'll need for internal testing
var unstable_yieldValue = Scheduler.unstable_yieldValue;
var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

var rendererID = null;
var injectedHook = null;
var injectedProfilingHooks = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    if (enableSchedulingProfiler) {
      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
      // This gives DevTools a way to feature detect that isn't tied to version number
      // (since profiling and timeline are controlled by different feature flags).
      internals = assign({}, internals, {
        getLaneLabelMap: getLaneLabelMap,
        injectProfilingHooks: injectProfilingHooks
      });
    }

    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    injectedHook = hook;
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  }

  if (hook.checkDCE) {
    // This is the real DevTools.
    return true;
  } else {
    // This is likely a hook installed by Fast Refresh runtime.
    return false;
  }
}
function onScheduleRoot(root, children) {
  {
    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
      try {
        injectedHook.onScheduleFiberRoot(rendererID, root, children);
      } catch (err) {
        if ( !hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitRoot(root, eventPriority) {
  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
    try {
      var didError = (root.current.flags & DidCapture) === DidCapture;

      if (enableProfilerTimer) {
        var schedulerPriority;

        switch (eventPriority) {
          case DiscreteEventPriority:
            schedulerPriority = ImmediatePriority;
            break;

          case ContinuousEventPriority:
            schedulerPriority = UserBlockingPriority;
            break;

          case DefaultEventPriority:
            schedulerPriority = NormalPriority;
            break;

          case IdleEventPriority:
            schedulerPriority = IdlePriority;
            break;

          default:
            schedulerPriority = NormalPriority;
            break;
        }

        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
      } else {
        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
      }
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onPostCommitRoot(root) {
  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
    try {
      injectedHook.onPostCommitFiberRoot(rendererID, root);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitUnmount(fiber) {
  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
    try {
      injectedHook.onCommitFiberUnmount(rendererID, fiber);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function setIsStrictModeForDevtools(newIsStrictMode) {
  {
    if (typeof unstable_yieldValue === 'function') {
      // We're in a test because Scheduler.unstable_yieldValue only exists
      // in SchedulerMock. To reduce the noise in strict mode tests,
      // suppress warnings and disable scheduler yielding during the double render
      unstable_setDisableYieldValue(newIsStrictMode);
      setSuppressWarning(newIsStrictMode);
    }

    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
      try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
      } catch (err) {
        {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    }
  }
} // Profiler API hooks

function injectProfilingHooks(profilingHooks) {
  injectedProfilingHooks = profilingHooks;
}

function getLaneLabelMap() {
  {
    var map = new Map();
    var lane = 1;

    for (var index = 0; index < TotalLanes; index++) {
      var label = getLabelForLane(lane);
      map.set(lane, label);
      lane *= 2;
    }

    return map;
  }
}

function markCommitStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
      injectedProfilingHooks.markCommitStarted(lanes);
    }
  }
}
function markCommitStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
      injectedProfilingHooks.markCommitStopped();
    }
  }
}
function markComponentRenderStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
      injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
  }
}
function markComponentRenderStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
      injectedProfilingHooks.markComponentRenderStopped();
    }
  }
}
function markComponentPassiveEffectMountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
  }
}
function markComponentPassiveEffectMountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
  }
}
function markComponentPassiveEffectUnmountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
  }
}
function markComponentPassiveEffectUnmountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
  }
}
function markComponentLayoutEffectMountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
  }
}
function markComponentLayoutEffectMountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
  }
}
function markComponentLayoutEffectUnmountStarted(fiber) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
  }
}
function markComponentLayoutEffectUnmountStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
  }
}
function markComponentErrored(fiber, thrownValue, lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
  }
}
function markComponentSuspended(fiber, wakeable, lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
  }
}
function markLayoutEffectsStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
  }
}
function markLayoutEffectsStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
      injectedProfilingHooks.markLayoutEffectsStopped();
    }
  }
}
function markPassiveEffectsStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
  }
}
function markPassiveEffectsStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
      injectedProfilingHooks.markPassiveEffectsStopped();
    }
  }
}
function markRenderStarted(lanes) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
      injectedProfilingHooks.markRenderStarted(lanes);
    }
  }
}
function markRenderYielded() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
      injectedProfilingHooks.markRenderYielded();
    }
  }
}
function markRenderStopped() {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
      injectedProfilingHooks.markRenderStopped();
    }
  }
}
function markRenderScheduled(lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
      injectedProfilingHooks.markRenderScheduled(lane);
    }
  }
}
function markForceUpdateScheduled(fiber, lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
  }
}
function markStateUpdateScheduled(fiber, lane) {
  {
    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
  }
}

var NoMode =
/*                         */
0; // TODO: Remove ConcurrentMode by reading from the root tag instead

var ConcurrentMode =
/*                 */
1;
var ProfileMode =
/*                    */
2;
var StrictLegacyMode =
/*               */
8;
var StrictEffectsMode =
/*              */
16;

// TODO: This is pretty well supported by browsers. Maybe we can drop it.
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
// Based on:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

var log = Math.log;
var LN2 = Math.LN2;

function clz32Fallback(x) {
  var asUint = x >>> 0;

  if (asUint === 0) {
    return 32;
  }

  return 31 - (log(asUint) / LN2 | 0) | 0;
}

// If those values are changed that package should be rebuilt and redeployed.

var TotalLanes = 31;
var NoLanes =
/*                        */
0;
var NoLane =
/*                          */
0;
var SyncLane =
/*                        */
1;
var InputContinuousHydrationLane =
/*    */
2;
var InputContinuousLane =
/*             */
4;
var DefaultHydrationLane =
/*            */
8;
var DefaultLane =
/*                     */
16;
var TransitionHydrationLane =
/*                */
32;
var TransitionLanes =
/*                       */
4194240;
var TransitionLane1 =
/*                        */
64;
var TransitionLane2 =
/*                        */
128;
var TransitionLane3 =
/*                        */
256;
var TransitionLane4 =
/*                        */
512;
var TransitionLane5 =
/*                        */
1024;
var TransitionLane6 =
/*                        */
2048;
var TransitionLane7 =
/*                        */
4096;
var TransitionLane8 =
/*                        */
8192;
var TransitionLane9 =
/*                        */
16384;
var TransitionLane10 =
/*                       */
32768;
var TransitionLane11 =
/*                       */
65536;
var TransitionLane12 =
/*                       */
131072;
var TransitionLane13 =
/*                       */
262144;
var TransitionLane14 =
/*                       */
524288;
var TransitionLane15 =
/*                       */
1048576;
var TransitionLane16 =
/*                       */
2097152;
var RetryLanes =
/*                            */
130023424;
var RetryLane1 =
/*                             */
4194304;
var RetryLane2 =
/*                             */
8388608;
var RetryLane3 =
/*                             */
16777216;
var RetryLane4 =
/*                             */
33554432;
var RetryLane5 =
/*                             */
67108864;
var SomeRetryLane = RetryLane1;
var SelectiveHydrationLane =
/*          */
134217728;
var NonIdleLanes =
/*                          */
268435455;
var IdleHydrationLane =
/*               */
268435456;
var IdleLane =
/*                        */
536870912;
var OffscreenLane =
/*                   */
1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
// It should be kept in sync with the Lanes values above.

function getLabelForLane(lane) {
  {
    if (lane & SyncLane) {
      return 'Sync';
    }

    if (lane & InputContinuousHydrationLane) {
      return 'InputContinuousHydration';
    }

    if (lane & InputContinuousLane) {
      return 'InputContinuous';
    }

    if (lane & DefaultHydrationLane) {
      return 'DefaultHydration';
    }

    if (lane & DefaultLane) {
      return 'Default';
    }

    if (lane & TransitionHydrationLane) {
      return 'TransitionHydration';
    }

    if (lane & TransitionLanes) {
      return 'Transition';
    }

    if (lane & RetryLanes) {
      return 'Retry';
    }

    if (lane & SelectiveHydrationLane) {
      return 'SelectiveHydration';
    }

    if (lane & IdleHydrationLane) {
      return 'IdleHydration';
    }

    if (lane & IdleLane) {
      return 'Idle';
    }

    if (lane & OffscreenLane) {
      return 'Offscreen';
    }
  }
}
var NoTimestamp = -1;
var nextTransitionLane = TransitionLane1;
var nextRetryLane = RetryLane1;

function getHighestPriorityLanes(lanes) {
  switch (getHighestPriorityLane(lanes)) {
    case SyncLane:
      return SyncLane;

    case InputContinuousHydrationLane:
      return InputContinuousHydrationLane;

    case InputContinuousLane:
      return InputContinuousLane;

    case DefaultHydrationLane:
      return DefaultHydrationLane;

    case DefaultLane:
      return DefaultLane;

    case TransitionHydrationLane:
      return TransitionHydrationLane;

    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
      return lanes & TransitionLanes;

    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      return lanes & RetryLanes;

    case SelectiveHydrationLane:
      return SelectiveHydrationLane;

    case IdleHydrationLane:
      return IdleHydrationLane;

    case IdleLane:
      return IdleLane;

    case OffscreenLane:
      return OffscreenLane;

    default:
      {
        error('Should have found matching lanes. This is a bug in React.');
      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


      return lanes;
  }
}

function getNextLanes(root, wipLanes) {
  // Early bailout if there's no pending work left.
  var pendingLanes = root.pendingLanes;

  if (pendingLanes === NoLanes) {
    return NoLanes;
  }

  var nextLanes = NoLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
  // even if the work is suspended.

  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

  if (nonIdlePendingLanes !== NoLanes) {
    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

    if (nonIdleUnblockedLanes !== NoLanes) {
      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
    } else {
      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

      if (nonIdlePingedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
      }
    }
  } else {
    // The only remaining work is Idle.
    var unblockedLanes = pendingLanes & ~suspendedLanes;

    if (unblockedLanes !== NoLanes) {
      nextLanes = getHighestPriorityLanes(unblockedLanes);
    } else {
      if (pingedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(pingedLanes);
      }
    }
  }

  if (nextLanes === NoLanes) {
    // This should only be reachable if we're suspended
    // TODO: Consider warning in this path if a fallback timer is not scheduled.
    return NoLanes;
  } // If we're already in the middle of a render, switching lanes will interrupt
  // it and we'll lose our progress. We should only do this if the new lanes are
  // higher priority.


  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
  // bother waiting until the root is complete.
  (wipLanes & suspendedLanes) === NoLanes) {
    var nextLane = getHighestPriorityLane(nextLanes);
    var wipLane = getHighestPriorityLane(wipLanes);

    if ( // Tests whether the next lane is equal or lower priority than the wip
    // one. This works because the bits decrease in priority as you go left.
    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
    // only difference between default updates and transition updates is that
    // default updates do not support refresh transitions.
    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
      // Keep working on the existing in-progress tree. Do not interrupt.
      return wipLanes;
    }
  }

  if ((nextLanes & InputContinuousLane) !== NoLanes) {
    // When updates are sync by default, we entangle continuous priority updates
    // and default updates, so they render in the same batch. The only reason
    // they use separate lanes is because continuous updates should interrupt
    // transitions, but default updates should not.
    nextLanes |= pendingLanes & DefaultLane;
  } // Check for entangled lanes and add them to the batch.
  //
  // A lane is said to be entangled with another when it's not allowed to render
  // in a batch that does not also include the other lane. Typically we do this
  // when multiple updates have the same source, and we only want to respond to
  // the most recent event from that source.
  //
  // Note that we apply entanglements *after* checking for partial work above.
  // This means that if a lane is entangled during an interleaved event while
  // it's already rendering, we won't interrupt it. This is intentional, since
  // entanglement is usually "best effort": we'll try our best to render the
  // lanes in the same batch, but it's not worth throwing out partially
  // completed work in order to do it.
  // TODO: Reconsider this. The counter-argument is that the partial work
  // represents an intermediate state, which we don't want to show to the user.
  // And by spending extra time finishing it, we're increasing the amount of
  // time it takes to show the final state, which is what they are actually
  // waiting for.
  //
  // For those exceptions where entanglement is semantically important, like
  // useMutableSource, we should ensure that there is no partial work at the
  // time we apply the entanglement.


  var entangledLanes = root.entangledLanes;

  if (entangledLanes !== NoLanes) {
    var entanglements = root.entanglements;
    var lanes = nextLanes & entangledLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      nextLanes |= entanglements[index];
      lanes &= ~lane;
    }
  }

  return nextLanes;
}
function getMostRecentEventTime(root, lanes) {
  var eventTimes = root.eventTimes;
  var mostRecentEventTime = NoTimestamp;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var eventTime = eventTimes[index];

    if (eventTime > mostRecentEventTime) {
      mostRecentEventTime = eventTime;
    }

    lanes &= ~lane;
  }

  return mostRecentEventTime;
}

function computeExpirationTime(lane, currentTime) {
  switch (lane) {
    case SyncLane:
    case InputContinuousHydrationLane:
    case InputContinuousLane:
      // User interactions should expire slightly more quickly.
      //
      // NOTE: This is set to the corresponding constant as in Scheduler.js.
      // When we made it larger, a product metric in www regressed, suggesting
      // there's a user interaction that's being starved by a series of
      // synchronous updates. If that theory is correct, the proper solution is
      // to fix the starvation. However, this scenario supports the idea that
      // expiration times are an important safeguard when starvation
      // does happen.
      return currentTime + 250;

    case DefaultHydrationLane:
    case DefaultLane:
    case TransitionHydrationLane:
    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
      return currentTime + 5000;

    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      // TODO: Retries should be allowed to expire if they are CPU bound for
      // too long, but when I made this change it caused a spike in browser
      // crashes. There must be some other underlying bug; not super urgent but
      // ideally should figure out why and fix it. Unfortunately we don't have
      // a repro for the crashes, only detected via production metrics.
      return NoTimestamp;

    case SelectiveHydrationLane:
    case IdleHydrationLane:
    case IdleLane:
    case OffscreenLane:
      // Anything idle priority or lower should never expire.
      return NoTimestamp;

    default:
      {
        error('Should have found matching lanes. This is a bug in React.');
      }

      return NoTimestamp;
  }
}

function markStarvedLanesAsExpired(root, currentTime) {
  // TODO: This gets called every time we yield. We can optimize by storing
  // the earliest expiration time on the root. Then use that to quickly bail out
  // of this function.
  var pendingLanes = root.pendingLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes;
  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
  // expiration time. If so, we'll assume the update is being starved and mark
  // it as expired to force it to finish.

  var lanes = pendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var expirationTime = expirationTimes[index];

    if (expirationTime === NoTimestamp) {
      // Found a pending lane with no expiration time. If it's not suspended, or
      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
      // using the current time.
      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
        // Assumes timestamps are monotonically increasing.
        expirationTimes[index] = computeExpirationTime(lane, currentTime);
      }
    } else if (expirationTime <= currentTime) {
      // This lane expired
      root.expiredLanes |= lane;
    }

    lanes &= ~lane;
  }
} // This returns the highest priority pending lanes regardless of whether they
// are suspended.

function getHighestPriorityPendingLanes(root) {
  return getHighestPriorityLanes(root.pendingLanes);
}
function getLanesToRetrySynchronouslyOnError(root) {
  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

  if (everythingButOffscreen !== NoLanes) {
    return everythingButOffscreen;
  }

  if (everythingButOffscreen & OffscreenLane) {
    return OffscreenLane;
  }

  return NoLanes;
}
function includesSyncLane(lanes) {
  return (lanes & SyncLane) !== NoLanes;
}
function includesNonIdleWork(lanes) {
  return (lanes & NonIdleLanes) !== NoLanes;
}
function includesOnlyRetries(lanes) {
  return (lanes & RetryLanes) === lanes;
}
function includesOnlyNonUrgentLanes(lanes) {
  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
  return (lanes & UrgentLanes) === NoLanes;
}
function includesOnlyTransitions(lanes) {
  return (lanes & TransitionLanes) === lanes;
}
function includesBlockingLane(root, lanes) {

  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
  return (lanes & SyncDefaultLanes) !== NoLanes;
}
function includesExpiredLane(root, lanes) {
  // This is a separate check from includesBlockingLane because a lane can
  // expire after a render has already started.
  return (lanes & root.expiredLanes) !== NoLanes;
}
function isTransitionLane(lane) {
  return (lane & TransitionLanes) !== NoLanes;
}
function claimNextTransitionLane() {
  // Cycle through the lanes, assigning each new transition to the next lane.
  // In most cases, this means every transition gets its own lane, until we
  // run out of lanes and cycle back to the beginning.
  var lane = nextTransitionLane;
  nextTransitionLane <<= 1;

  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
    nextTransitionLane = TransitionLane1;
  }

  return lane;
}
function claimNextRetryLane() {
  var lane = nextRetryLane;
  nextRetryLane <<= 1;

  if ((nextRetryLane & RetryLanes) === NoLanes) {
    nextRetryLane = RetryLane1;
  }

  return lane;
}
function getHighestPriorityLane(lanes) {
  return lanes & -lanes;
}
function pickArbitraryLane(lanes) {
  // This wrapper function gets inlined. Only exists so to communicate that it
  // doesn't matter which bit is selected; you can pick any bit without
  // affecting the algorithms where its used. Here I'm using
  // getHighestPriorityLane because it requires the fewest operations.
  return getHighestPriorityLane(lanes);
}

function pickArbitraryLaneIndex(lanes) {
  return 31 - clz32(lanes);
}

function laneToIndex(lane) {
  return pickArbitraryLaneIndex(lane);
}

function includesSomeLane(a, b) {
  return (a & b) !== NoLanes;
}
function isSubsetOfLanes(set, subset) {
  return (set & subset) === subset;
}
function mergeLanes(a, b) {
  return a | b;
}
function removeLanes(set, subset) {
  return set & ~subset;
}
function intersectLanes(a, b) {
  return a & b;
} // Seems redundant, but it changes the type from a single lane (used for
// updates) to a group of lanes (used for flushing work).

function laneToLanes(lane) {
  return lane;
}
function higherPriorityLane(a, b) {
  // This works because the bit ranges decrease in priority as you go left.
  return a !== NoLane && a < b ? a : b;
}
function createLaneMap(initial) {
  // Intentionally pushing one by one.
  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
  var laneMap = [];

  for (var i = 0; i < TotalLanes; i++) {
    laneMap.push(initial);
  }

  return laneMap;
}
function markRootUpdated(root, updateLane, eventTime) {
  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
  // could unblock them. Clear the suspended lanes so that we can try rendering
  // them again.
  //
  // TODO: We really only need to unsuspend only lanes that are in the
  // `subtreeLanes` of the updated fiber, or the update lanes of the return
  // path. This would exclude suspended updates in an unrelated sibling tree,
  // since there's no way for this update to unblock it.
  //
  // We don't do this if the incoming update is idle, because we never process
  // idle updates until after all the regular updates have finished; there's no
  // way it could unblock a transition.

  if (updateLane !== IdleLane) {
    root.suspendedLanes = NoLanes;
    root.pingedLanes = NoLanes;
  }

  var eventTimes = root.eventTimes;
  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
  // recent event, and we assume time is monotonically increasing.

  eventTimes[index] = eventTime;
}
function markRootSuspended(root, suspendedLanes) {
  root.suspendedLanes |= suspendedLanes;
  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

  var expirationTimes = root.expirationTimes;
  var lanes = suspendedLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootPinged(root, pingedLanes, eventTime) {
  root.pingedLanes |= root.suspendedLanes & pingedLanes;
}
function markRootFinished(root, remainingLanes) {
  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
  root.pendingLanes = remainingLanes; // Let's try everything again

  root.suspendedLanes = NoLanes;
  root.pingedLanes = NoLanes;
  root.expiredLanes &= remainingLanes;
  root.mutableReadLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  var entanglements = root.entanglements;
  var eventTimes = root.eventTimes;
  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

  var lanes = noLongerPendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] = NoLanes;
    eventTimes[index] = NoTimestamp;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootEntangled(root, entangledLanes) {
  // In addition to entangling each of the given lanes with each other, we also
  // have to consider _transitive_ entanglements. For each lane that is already
  // entangled with *any* of the given lanes, that lane is now transitively
  // entangled with *all* the given lanes.
  //
  // Translated: If C is entangled with A, then entangling A with B also
  // entangles C with B.
  //
  // If this is hard to grasp, it might help to intentionally break this
  // function and look at the tests that fail in ReactTransition-test.js. Try
  // commenting out one of the conditions below.
  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
  var entanglements = root.entanglements;
  var lanes = rootEntangledLanes;

  while (lanes) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;

    if ( // Is this one of the newly entangled lanes?
    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
    entanglements[index] & entangledLanes) {
      entanglements[index] |= entangledLanes;
    }

    lanes &= ~lane;
  }
}
function getBumpedLaneForHydration(root, renderLanes) {
  var renderLane = getHighestPriorityLane(renderLanes);
  var lane;

  switch (renderLane) {
    case InputContinuousLane:
      lane = InputContinuousHydrationLane;
      break;

    case DefaultLane:
      lane = DefaultHydrationLane;
      break;

    case TransitionLane1:
    case TransitionLane2:
    case TransitionLane3:
    case TransitionLane4:
    case TransitionLane5:
    case TransitionLane6:
    case TransitionLane7:
    case TransitionLane8:
    case TransitionLane9:
    case TransitionLane10:
    case TransitionLane11:
    case TransitionLane12:
    case TransitionLane13:
    case TransitionLane14:
    case TransitionLane15:
    case TransitionLane16:
    case RetryLane1:
    case RetryLane2:
    case RetryLane3:
    case RetryLane4:
    case RetryLane5:
      lane = TransitionHydrationLane;
      break;

    case IdleLane:
      lane = IdleHydrationLane;
      break;

    default:
      // Everything else is already either a hydration lane, or shouldn't
      // be retried at a hydration lane.
      lane = NoLane;
      break;
  } // Check if the lane we chose is suspended. If so, that indicates that we
  // already attempted and failed to hydrate at that level. Also check if we're
  // already rendering that lane, which is rare but could happen.


  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
    // Give up trying to hydrate and fall back to client render.
    return NoLane;
  }

  return lane;
}
function addFiberToLanesMap(root, fiber, lanes) {

  if (!isDevToolsPresent) {
    return;
  }

  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

  while (lanes > 0) {
    var index = laneToIndex(lanes);
    var lane = 1 << index;
    var updaters = pendingUpdatersLaneMap[index];
    updaters.add(fiber);
    lanes &= ~lane;
  }
}
function movePendingFibersToMemoized(root, lanes) {

  if (!isDevToolsPresent) {
    return;
  }

  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
  var memoizedUpdaters = root.memoizedUpdaters;

  while (lanes > 0) {
    var index = laneToIndex(lanes);
    var lane = 1 << index;
    var updaters = pendingUpdatersLaneMap[index];

    if (updaters.size > 0) {
      updaters.forEach(function (fiber) {
        var alternate = fiber.alternate;

        if (alternate === null || !memoizedUpdaters.has(alternate)) {
          memoizedUpdaters.add(fiber);
        }
      });
      updaters.clear();
    }

    lanes &= ~lane;
  }
}
function getTransitionsForLanes(root, lanes) {
  {
    return null;
  }
}

var DiscreteEventPriority = SyncLane;
var ContinuousEventPriority = InputContinuousLane;
var DefaultEventPriority = DefaultLane;
var IdleEventPriority = IdleLane;
var currentUpdatePriority = NoLane;
function getCurrentUpdatePriority() {
  return currentUpdatePriority;
}
function setCurrentUpdatePriority(newPriority) {
  currentUpdatePriority = newPriority;
}
function runWithPriority(priority, fn) {
  var previousPriority = currentUpdatePriority;

  try {
    currentUpdatePriority = priority;
    return fn();
  } finally {
    currentUpdatePriority = previousPriority;
  }
}
function higherEventPriority(a, b) {
  return a !== 0 && a < b ? a : b;
}
function lowerEventPriority(a, b) {
  return a === 0 || a > b ? a : b;
}
function isHigherEventPriority(a, b) {
  return a !== 0 && a < b;
}
function lanesToEventPriority(lanes) {
  var lane = getHighestPriorityLane(lanes);

  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
    return DiscreteEventPriority;
  }

  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
    return ContinuousEventPriority;
  }

  if (includesNonIdleWork(lane)) {
    return DefaultEventPriority;
  }

  return IdleEventPriority;
}

// This is imported by the event replaying implementation in React DOM. It's
// in a separate file to break a circular dependency between the renderer and
// the reconciler.
function isRootDehydrated(root) {
  var currentState = root.current.memoizedState;
  return currentState.isDehydrated;
}

var _attemptSynchronousHydration;

function setAttemptSynchronousHydration(fn) {
  _attemptSynchronousHydration = fn;
}
function attemptSynchronousHydration(fiber) {
  _attemptSynchronousHydration(fiber);
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
}
var getCurrentUpdatePriority$1;
function setGetCurrentUpdatePriority(fn) {
  getCurrentUpdatePriority$1 = fn;
}
var attemptHydrationAtPriority;
function setAttemptHydrationAtPriority(fn) {
  attemptHydrationAtPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
// has this definition built-in.

var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
function isDiscreteEventThatRequiresHydration(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  return {
    blockedOn: blockedOn,
    domEventName: domEventName,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetContainers: [targetContainer]
  };
}

function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'focusin':
    case 'focusout':
      queuedFocus = null;
      break;

    case 'dragenter':
    case 'dragleave':
      queuedDrag = null;
      break;

    case 'mouseover':
    case 'mouseout':
      queuedMouse = null;
      break;

    case 'pointerover':
    case 'pointerout':
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case 'gotpointercapture':
    case 'lostpointercapture':
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags, and the targetContainers, and
  // store a single event to be replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  var targetContainers = existingQueuedEvent.targetContainers;

  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
    targetContainers.push(targetContainer);
  }

  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (domEventName) {
    case 'focusin':
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
        return true;
      }

    case 'dragenter':
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
        return true;
      }

    case 'mouseover':
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
        return true;
      }

    case 'pointerover':
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
        return true;
      }

    case 'gotpointercapture':
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          attemptHydrationAtPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (isRootDehydrated(root)) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function queueExplicitHydrationTarget(target) {
  // TODO: This will read the priority if it's dispatched by the React
  // event system but not native events. Should read window.event.type, like
  // we do for updates (getCurrentEventPriority).
  var updatePriority = getCurrentUpdatePriority$1();
  var queuedTarget = {
    blockedOn: null,
    target: target,
    priority: updatePriority
  };
  var i = 0;

  for (; i < queuedExplicitHydrationTargets.length; i++) {
    // Stop once we hit the first target with lower priority than
    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
      break;
    }
  }

  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

  if (i === 0) {
    attemptExplicitHydrationTarget(queuedTarget);
  }
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var targetContainers = queuedEvent.targetContainers;

  while (targetContainers.length > 0) {
    var targetContainer = targetContainers[0];
    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

    if (nextBlockedOn === null) {
      {
        var nativeEvent = queuedEvent.nativeEvent;
        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        setReplayingEvent(nativeEventClone);
        nativeEvent.target.dispatchEvent(nativeEventClone);
        resetReplayingEvent();
      }
    } else {
      // We're still blocked. Try again later.
      var _fiber3 = getInstanceFromNode(nextBlockedOn);

      if (_fiber3 !== null) {
        attemptContinuousHydration(_fiber3);
      }

      queuedEvent.blockedOn = nextBlockedOn;
      return false;
    } // This target container was successfully dispatched. Try the next.


    targetContainers.shift();
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false;


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
// We'd like to remove this but it's not clear if this is safe.

function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
  var eventPriority = getEventPriority(domEventName);
  var listenerWrapper;

  switch (eventPriority) {
    case DiscreteEventPriority:
      listenerWrapper = dispatchDiscreteEvent;
      break;

    case ContinuousEventPriority:
      listenerWrapper = dispatchContinuousEvent;
      break;

    case DefaultEventPriority:
    default:
      listenerWrapper = dispatchEvent;
      break;
  }

  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
}

function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = null;

  try {
    setCurrentUpdatePriority(DiscreteEventPriority);
    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig.transition = prevTransition;
  }
}

function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = null;

  try {
    setCurrentUpdatePriority(ContinuousEventPriority);
    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig.transition = prevTransition;
  }
}

function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (!_enabled) {
    return;
  }

  {
    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
  }
}

function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

  if (blockedOn === null) {
    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
    clearIfContinuousEvent(domEventName, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
    nativeEvent.stopPropagation();
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accumulative.


  clearIfContinuousEvent(domEventName, nativeEvent);

  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
    while (blockedOn !== null) {
      var fiber = getInstanceFromNode(blockedOn);

      if (fiber !== null) {
        attemptSynchronousHydration(fiber);
      }

      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

      if (nextBlockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
      }

      if (nextBlockedOn === blockedOn) {
        break;
      }

      blockedOn = nextBlockedOn;
    }

    if (blockedOn !== null) {
      nativeEvent.stopPropagation();
    }

    return;
  } // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.


  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
}

var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
// The return_targetInst field above is conceptually part of the return value.

function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // TODO: Warn if _enabled is false.
  return_targetInst = null;
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (isRootDehydrated(root)) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  return_targetInst = targetInst; // We're not blocked on anything.

  return null;
}
function getEventPriority(domEventName) {
  switch (domEventName) {
    // Used by SimpleEventPlugin:
    case 'cancel':
    case 'click':
    case 'close':
    case 'contextmenu':
    case 'copy':
    case 'cut':
    case 'auxclick':
    case 'dblclick':
    case 'dragend':
    case 'dragstart':
    case 'drop':
    case 'focusin':
    case 'focusout':
    case 'input':
    case 'invalid':
    case 'keydown':
    case 'keypress':
    case 'keyup':
    case 'mousedown':
    case 'mouseup':
    case 'paste':
    case 'pause':
    case 'play':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointerup':
    case 'ratechange':
    case 'reset':
    case 'resize':
    case 'seeked':
    case 'submit':
    case 'touchcancel':
    case 'touchend':
    case 'touchstart':
    case 'volumechange': // Used by polyfills:
    // eslint-disable-next-line no-fallthrough

    case 'change':
    case 'selectionchange':
    case 'textInput':
    case 'compositionstart':
    case 'compositionend':
    case 'compositionupdate': // Only enableCreateEventHandleAPI:
    // eslint-disable-next-line no-fallthrough

    case 'beforeblur':
    case 'afterblur': // Not used by React but could be by user code:
    // eslint-disable-next-line no-fallthrough

    case 'beforeinput':
    case 'blur':
    case 'fullscreenchange':
    case 'focus':
    case 'hashchange':
    case 'popstate':
    case 'select':
    case 'selectstart':
      return DiscreteEventPriority;

    case 'drag':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'mousemove':
    case 'mouseout':
    case 'mouseover':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'scroll':
    case 'toggle':
    case 'touchmove':
    case 'wheel': // Not used by React but could be by user code:
    // eslint-disable-next-line no-fallthrough

    case 'mouseenter':
    case 'mouseleave':
    case 'pointerenter':
    case 'pointerleave':
      return ContinuousEventPriority;

    case 'message':
      {
        // We might be in the Scheduler callback.
        // Eventually this mechanism will be replaced by a check
        // of the current priority on the native scheduler.
        var schedulerPriority = getCurrentPriorityLevel();

        switch (schedulerPriority) {
          case ImmediatePriority:
            return DiscreteEventPriority;

          case UserBlockingPriority:
            return ContinuousEventPriority;

          case NormalPriority:
          case LowPriority:
            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
            return DefaultEventPriority;

          case IdlePriority:
            return IdleEventPriority;

          default:
            return DefaultEventPriority;
        }
      }

    default:
      return DefaultEventPriority;
  }
}

function addEventBubbleListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, false);
  return listener;
}
function addEventCaptureListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, true);
  return listener;
}
function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
  return listener;
}
function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    passive: passive
  });
  return listener;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
} // This is intentionally a factory so that we have different returned constructors.
// If we had a single constructor, it would be megamorphic and engines would deopt.


function createSyntheticEvent(Interface) {
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */
  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;

    for (var _propName in Interface) {
      if (!Interface.hasOwnProperty(_propName)) {
        continue;
      }

      var normalize = Interface[_propName];

      if (normalize) {
        this[_propName] = normalize(nativeEvent);
      } else {
        this[_propName] = nativeEvent[_propName];
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

    if (defaultPrevented) {
      this.isDefaultPrevented = functionThatReturnsTrue;
    } else {
      this.isDefaultPrevented = functionThatReturnsFalse;
    }

    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  assign(SyntheticBaseEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }

      this.isDefaultPrevented = functionThatReturnsTrue;
    },
    stopPropagation: function () {
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.stopPropagation) {
        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }

      this.isPropagationStopped = functionThatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {// Modern event system doesn't use pooling.
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: functionThatReturnsTrue
  });
  return SyntheticBaseEvent;
}
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var EventInterface = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
};
var SyntheticEvent = createSyntheticEvent(EventInterface);

var UIEventInterface = assign({}, EventInterface, {
  view: 0,
  detail: 0
});

var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
var lastMovementX;
var lastMovementY;
var lastMouseEvent;

function updateMouseMovementPolyfillState(event) {
  if (event !== lastMouseEvent) {
    if (lastMouseEvent && event.type === 'mousemove') {
      lastMovementX = event.screenX - lastMouseEvent.screenX;
      lastMovementY = event.screenY - lastMouseEvent.screenY;
    } else {
      lastMovementX = 0;
      lastMovementY = 0;
    }

    lastMouseEvent = event;
  }
}
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var MouseEventInterface = assign({}, UIEventInterface, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: getEventModifierState,
  button: 0,
  buttons: 0,
  relatedTarget: function (event) {
    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
    return event.relatedTarget;
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    updateMouseMovementPolyfillState(event);
    return lastMovementX;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    } // Don't need to call updateMouseMovementPolyfillState() here
    // because it's guaranteed to have already run when movementX
    // was copied.


    return lastMovementY;
  }
});

var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var DragEventInterface = assign({}, MouseEventInterface, {
  dataTransfer: 0
});

var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var FocusEventInterface = assign({}, UIEventInterface, {
  relatedTarget: 0
});

var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var AnimationEventInterface = assign({}, EventInterface, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var ClipboardEventInterface = assign({}, EventInterface, {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var CompositionEventInterface = assign({}, EventInterface, {
  data: 0
});

var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
// Happens to share the same list for now.

var SyntheticInputEvent = SyntheticCompositionEvent;
/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */


var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}
/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var KeyboardEventInterface = assign({}, UIEventInterface, {
  key: getEventKey,
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var PointerEventInterface = assign({}, MouseEventInterface, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
});

var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var TouchEventInterface = assign({}, UIEventInterface, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: getEventModifierState
});

var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var TransitionEventInterface = assign({}, EventInterface, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var WheelEventInterface = assign({}, MouseEventInterface, {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: 0,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: 0
});

var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

function registerEvents() {
  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
} // Track whether we've ever handled a keypress on the space key.


var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 */


function getCompositionEventType(domEventName) {
  switch (domEventName) {
    case 'compositionstart':
      return 'onCompositionStart';

    case 'compositionend':
      return 'onCompositionEnd';

    case 'compositionupdate':
      return 'onCompositionUpdate';
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */


function isFallbackCompositionStart(domEventName, nativeEvent) {
  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 */


function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'keyup':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case 'keydown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case 'keypress':
    case 'mousedown':
    case 'focusout':
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(domEventName);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
      eventType = 'onCompositionStart';
    }
  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
    eventType = 'onCompositionEnd';
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === 'onCompositionStart') {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === 'onCompositionEnd') {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

  if (listeners.length > 0) {
    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);

      if (customData !== null) {
        event.data = customData;
      }
    }
  }
}

function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'compositionend':
      return getDataFromCustomEvent(nativeEvent);

    case 'keypress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'textInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */


function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (domEventName) {
    case 'paste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case 'keypress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case 'compositionend':
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

  if (listeners.length > 0) {
    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
    event.data = chars;
  }
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function registerEvents$1() {
  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
}

function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

  if (listeners.length > 0) {
    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var dispatchQueue = [];
  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, dispatchQueue);
}

function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(domEventName, targetInst) {
  if (domEventName === 'change') {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  if (domEventName === 'focusin') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (domEventName === 'focusout') {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(domEventName, targetInst) {
  if (domEventName === 'click') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if (domEventName === 'input' || domEventName === 'change') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
  var getTargetInstFunc, handleEventFunc;

  if (shouldUseChangeEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForChangeEvent;
  } else if (isTextInputElement(targetNode)) {
    if (isInputEventSupported) {
      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
    } else {
      getTargetInstFunc = getTargetInstForInputEventPolyfill;
      handleEventFunc = handleEventsForInputEventPolyfill;
    }
  } else if (shouldUseClickEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForClickEvent;
  }

  if (getTargetInstFunc) {
    var inst = getTargetInstFunc(domEventName, targetInst);

    if (inst) {
      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
      return;
    }
  }

  if (handleEventFunc) {
    handleEventFunc(domEventName, targetNode, targetInst);
  } // When blurring, set the value attribute for number inputs


  if (domEventName === 'focusout') {
    handleControlledInputBlur(targetNode);
  }
}

function registerEvents$2() {
  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
}
/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */


function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
    // If this is an over event with a target, we might have already dispatched
    // the event in the out event of the other target. If this is replayed,
    // then it's because we couldn't dispatch against this target previously
    // so we have to do it now instead.
    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

    if (related) {
      // If the related node is managed by React, we can assume that we have
      // already dispatched the corresponding events during its mouseout.
      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
        return;
      }
    }
  }

  if (!isOutEvent && !isOverEvent) {
    // Must not be a mouse or pointer in or out - ignoring.
    return;
  }

  var win; // TODO: why is this nullable in the types but we read from it?

  if (nativeEventTarget.window === nativeEventTarget) {
    // `nativeEventTarget` is probably a window object.
    win = nativeEventTarget;
  } else {
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    var doc = nativeEventTarget.ownerDocument;

    if (doc) {
      win = doc.defaultView || doc.parentWindow;
    } else {
      win = window;
    }
  }

  var from;
  var to;

  if (isOutEvent) {
    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

    from = targetInst;
    to = _related ? getClosestInstanceFromNode(_related) : null;

    if (to !== null) {
      var nearestMounted = getNearestMountedFiber(to);

      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
        to = null;
      }
    }
  } else {
    // Moving to a node from outside the window.
    from = null;
    to = targetInst;
  }

  if (from === to) {
    // Nothing pertains to our managed components.
    return;
  }

  var SyntheticEventCtor = SyntheticMouseEvent;
  var leaveEventType = 'onMouseLeave';
  var enterEventType = 'onMouseEnter';
  var eventTypePrefix = 'mouse';

  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
    SyntheticEventCtor = SyntheticPointerEvent;
    leaveEventType = 'onPointerLeave';
    enterEventType = 'onPointerEnter';
    eventTypePrefix = 'pointer';
  }

  var fromNode = from == null ? win : getNodeFromInstance(from);
  var toNode = to == null ? win : getNodeFromInstance(to);
  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
  leave.target = fromNode;
  leave.relatedTarget = toNode;
  var enter = null; // We should only process this nativeEvent if we are processing
  // the first ancestor. Next time, we will ignore the event.

  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (nativeTargetInst === targetInst) {
    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
    enterEvent.target = toNode;
    enterEvent.relatedTarget = fromNode;
    enter = enterEvent;
  }

  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    var currentKey = keysA[i];

    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
      return false;
    }
  }

  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start;
  var end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

function registerEvents$3() {
  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
}

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

    if (listeners.length > 0) {
      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
      event.target = activeElement$1;
    }
  }
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

  switch (domEventName) {
    // Track the input node that has focus.
    case 'focusin':
      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
        activeElement$1 = targetNode;
        activeElementInst$1 = targetInst;
        lastSelection = null;
      }

      break;

    case 'focusout':
      activeElement$1 = null;
      activeElementInst$1 = null;
      lastSelection = null;
      break;
    // Don't fire the event while the user is dragging. This matches the
    // semantics of the native select event.

    case 'mousedown':
      mouseDown = true;
      break;

    case 'contextmenu':
    case 'mouseup':
    case 'dragend':
      mouseDown = false;
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      break;
    // Chrome and IE fire non-standard event when selection is changed (and
    // sometimes when it hasn't). IE's event fires out of order with respect
    // to key and input events on deletion, so we discard it.
    //
    // Firefox doesn't support selectionchange, so check selection status
    // after each key entry. The selection changes after keydown and before
    // keyup, but we check on keydown as well in the case of holding down a
    // key, when multiple keydown events are fired but only one keyup is.
    // This is also our approach for IE handling, for the reason above.

    case 'selectionchange':
      if (skipSelectionChangeEvent) {
        break;
      }

    // falls through

    case 'keydown':
    case 'keyup':
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
  }
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

var ANIMATION_END = getVendorPrefixedEventName('animationend');
var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
var ANIMATION_START = getVendorPrefixedEventName('animationstart');
var TRANSITION_END = getVendorPrefixedEventName('transitionend');

var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
//
// E.g. it needs "pointerDown", not "pointerdown".
// This is because we derive both React name ("onPointerDown")
// and DOM name ("pointerdown") from the same list.
//
// Exceptions that don't match this convention are listed separately.
//
// prettier-ignore

var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

function registerSimpleEvent(domEventName, reactName) {
  topLevelEventsToReactNames.set(domEventName, reactName);
  registerTwoPhaseEvent(reactName, [domEventName]);
}

function registerSimpleEvents() {
  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
    var eventName = simpleEventPluginEvents[i];
    var domEventName = eventName.toLowerCase();
    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
  } // Special cases where event names don't match.


  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
  registerSimpleEvent('dblclick', 'onDoubleClick');
  registerSimpleEvent('focusin', 'onFocus');
  registerSimpleEvent('focusout', 'onBlur');
  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
}

function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var reactName = topLevelEventsToReactNames.get(domEventName);

  if (reactName === undefined) {
    return;
  }

  var SyntheticEventCtor = SyntheticEvent;
  var reactEventType = domEventName;

  switch (domEventName) {
    case 'keypress':
      // Firefox creates a keypress event for function keys too. This removes
      // the unwanted keypress events. Enter is however both printable and
      // non-printable. One would expect Tab to be as well (but it isn't).
      if (getEventCharCode(nativeEvent) === 0) {
        return;
      }

    /* falls through */

    case 'keydown':
    case 'keyup':
      SyntheticEventCtor = SyntheticKeyboardEvent;
      break;

    case 'focusin':
      reactEventType = 'focus';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'focusout':
      reactEventType = 'blur';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'beforeblur':
    case 'afterblur':
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'click':
      // Firefox creates a click event on right mouse clicks. This removes the
      // unwanted click events.
      if (nativeEvent.button === 2) {
        return;
      }

    /* falls through */

    case 'auxclick':
    case 'dblclick':
    case 'mousedown':
    case 'mousemove':
    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

    /* falls through */

    case 'mouseout':
    case 'mouseover':
    case 'contextmenu':
      SyntheticEventCtor = SyntheticMouseEvent;
      break;

    case 'drag':
    case 'dragend':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'dragstart':
    case 'drop':
      SyntheticEventCtor = SyntheticDragEvent;
      break;

    case 'touchcancel':
    case 'touchend':
    case 'touchmove':
    case 'touchstart':
      SyntheticEventCtor = SyntheticTouchEvent;
      break;

    case ANIMATION_END:
    case ANIMATION_ITERATION:
    case ANIMATION_START:
      SyntheticEventCtor = SyntheticAnimationEvent;
      break;

    case TRANSITION_END:
      SyntheticEventCtor = SyntheticTransitionEvent;
      break;

    case 'scroll':
      SyntheticEventCtor = SyntheticUIEvent;
      break;

    case 'wheel':
      SyntheticEventCtor = SyntheticWheelEvent;
      break;

    case 'copy':
    case 'cut':
    case 'paste':
      SyntheticEventCtor = SyntheticClipboardEvent;
      break;

    case 'gotpointercapture':
    case 'lostpointercapture':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'pointerup':
      SyntheticEventCtor = SyntheticPointerEvent;
      break;
  }

  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  {
    // Some events don't bubble in the browser.
    // In the past, React has always bubbled them, but this can be surprising.
    // We're going to try aligning closer to the browser behavior by not bubbling
    // them in React either. We'll start by not bubbling onScroll, and then expand.
    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
    // nonDelegatedEvents list in DOMPluginEventSystem.
    // Then we can remove this special list.
    // This is a breaking change that can wait until React 18.
    domEventName === 'scroll';

    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

    if (_listeners.length > 0) {
      // Intentionally create event lazily.
      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

      dispatchQueue.push({
        event: _event,
        listeners: _listeners
      });
    }
  }
}

// TODO: remove top-level side effect.
registerSimpleEvents();
registerEvents$2();
registerEvents$1();
registerEvents$3();
registerEvents();

function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  // TODO: we should remove the concept of a "SimpleEventPlugin".
  // This is the basic functionality of the event system. All
  // the other plugins are essentially polyfills. So the plugin
  // should probably be inlined somewhere and have its logic
  // be core the to event system. This would potentially allow
  // us to ship builds of React without the polyfilled plugins below.
  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
  // event's native "bubble" phase, which means that we're
  // not in the capture phase. That's because we emulate
  // the capture phase here still. This is a trade-off,
  // because in an ideal world we would not emulate and use
  // the phases properly, like we do with the SimpleEvent
  // plugin. However, the plugins below either expect
  // emulation (EnterLeave) or use state localized to that
  // plugin (BeforeInput, Change, Select). The state in
  // these modules complicates things, as you'll essentially
  // get the case where the capture phase event might change
  // state, only for the following bubble event to come in
  // later and not trigger anything as the state now
  // invalidates the heuristics of the event plugin. We
  // could alter all these plugins to work in such ways, but
  // that might cause other unknown side-effects that we
  // can't foresee right now.

  if (shouldProcessPolyfillPlugins) {
    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  }
} // List of events that need to be individually attached to media elements.


var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
// set them on the actual target element itself. This is primarily
// because these events do not consistently bubble in the DOM.

var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

function executeDispatch(event, listener, currentTarget) {
  var type = event.type || 'unknown-event';
  event.currentTarget = currentTarget;
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
  var previousInstance;

  if (inCapturePhase) {
    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
      var _dispatchListeners$i = dispatchListeners[i],
          instance = _dispatchListeners$i.instance,
          currentTarget = _dispatchListeners$i.currentTarget,
          listener = _dispatchListeners$i.listener;

      if (instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, listener, currentTarget);
      previousInstance = instance;
    }
  } else {
    for (var _i = 0; _i < dispatchListeners.length; _i++) {
      var _dispatchListeners$_i = dispatchListeners[_i],
          _instance = _dispatchListeners$_i.instance,
          _currentTarget = _dispatchListeners$_i.currentTarget,
          _listener = _dispatchListeners$_i.listener;

      if (_instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, _listener, _currentTarget);
      previousInstance = _instance;
    }
  }
}

function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  for (var i = 0; i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i],
        event = _dispatchQueue$i.event,
        listeners = _dispatchQueue$i.listeners;
    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var nativeEventTarget = getEventTarget(nativeEvent);
  var dispatchQueue = [];
  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  processDispatchQueue(dispatchQueue, eventSystemFlags);
}

function listenToNonDelegatedEvent(domEventName, targetElement) {
  {
    if (!nonDelegatedEvents.has(domEventName)) {
      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
    }
  }

  var isCapturePhaseListener = false;
  var listenerSet = getEventListenerSet(targetElement);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

  if (!listenerSet.has(listenerSetKey)) {
    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
  {
    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
    }
  }

  var eventSystemFlags = 0;

  if (isCapturePhaseListener) {
    eventSystemFlags |= IS_CAPTURE_PHASE;
  }

  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
} // This is only used by createEventHandle when the
var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
function listenToAllSupportedEvents(rootContainerElement) {
  if (!rootContainerElement[listeningMarker]) {
    rootContainerElement[listeningMarker] = true;
    allNativeEvents.forEach(function (domEventName) {
      // We handle selectionchange separately because it
      // doesn't bubble and needs to be on the document.
      if (domEventName !== 'selectionchange') {
        if (!nonDelegatedEvents.has(domEventName)) {
          listenToNativeEvent(domEventName, false, rootContainerElement);
        }

        listenToNativeEvent(domEventName, true, rootContainerElement);
      }
    });
    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

    if (ownerDocument !== null) {
      // The selectionchange event also needs deduplication
      // but it is attached to the document.
      if (!ownerDocument[listeningMarker]) {
        ownerDocument[listeningMarker] = true;
        listenToNativeEvent('selectionchange', false, ownerDocument);
      }
    }
  }
}

function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
  // active and not passive.

  var isPassiveListener = undefined;

  if (passiveBrowserEventsSupported) {
    // Browsers introduced an intervention, making these events
    // passive by default on document. React doesn't bind them
    // to document anymore, but changing this now would undo
    // the performance wins from the change. So we emulate
    // the existing behavior manually on the roots now.
    // https://github.com/facebook/react/issues/19651
    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
      isPassiveListener = true;
    }
  }

  targetContainer =  targetContainer;
  var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we


  if (isCapturePhaseListener) {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
    }
  } else {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
  }
}

function isMatchingRootContainer(grandContainer, targetContainer) {
  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
}

function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var ancestorInst = targetInst;

  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

    if (targetInst !== null) {
      // The below logic attempts to work out if we need to change
      // the target fiber to a different ancestor. We had similar logic
      // in the legacy event system, except the big difference between
      // systems is that the modern event system now has an event listener
      // attached to each React Root and React Portal Root. Together,
      // the DOM nodes representing these roots are the "rootContainer".
      // To figure out which ancestor instance we should use, we traverse
      // up the fiber tree from the target instance and attempt to find
      // root boundaries that match that of our current "rootContainer".
      // If we find that "rootContainer", we find the parent fiber
      // sub-tree for that root and make that our ancestor instance.
      var node = targetInst;

      mainLoop: while (true) {
        if (node === null) {
          return;
        }

        var nodeTag = node.tag;

        if (nodeTag === HostRoot || nodeTag === HostPortal) {
          var container = node.stateNode.containerInfo;

          if (isMatchingRootContainer(container, targetContainerNode)) {
            break;
          }

          if (nodeTag === HostPortal) {
            // The target is a portal, but it's not the rootContainer we're looking for.
            // Normally portals handle their own events all the way down to the root.
            // So we should be able to stop now. However, we don't know if this portal
            // was part of *our* root.
            var grandNode = node.return;

            while (grandNode !== null) {
              var grandTag = grandNode.tag;

              if (grandTag === HostRoot || grandTag === HostPortal) {
                var grandContainer = grandNode.stateNode.containerInfo;

                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                  // This is the rootContainer we're looking for and we found it as
                  // a parent of the Portal. That means we can ignore it because the
                  // Portal will bubble through to us.
                  return;
                }
              }

              grandNode = grandNode.return;
            }
          } // Now we need to find it's corresponding host fiber in the other
          // tree. To do this we can use getClosestInstanceFromNode, but we
          // need to validate that the fiber is a host instance, otherwise
          // we need to traverse up through the DOM till we find the correct
          // node that is from the other tree.


          while (container !== null) {
            var parentNode = getClosestInstanceFromNode(container);

            if (parentNode === null) {
              return;
            }

            var parentTag = parentNode.tag;

            if (parentTag === HostComponent || parentTag === HostText) {
              node = ancestorInst = parentNode;
              continue mainLoop;
            }

            container = container.parentNode;
          }
        }

        node = node.return;
      }
    }
  }

  batchedUpdates(function () {
    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
  });
}

function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance: instance,
    listener: listener,
    currentTarget: currentTarget
  };
}

function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
  var captureName = reactName !== null ? reactName + 'Capture' : null;
  var reactEventName = inCapturePhase ? captureName : reactName;
  var listeners = [];
  var instance = targetFiber;
  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance2 = instance,
        stateNode = _instance2.stateNode,
        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      lastHostComponent = stateNode; // createEventHandle listeners


      if (reactEventName !== null) {
        var listener = getListener(instance, reactEventName);

        if (listener != null) {
          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
        }
      }
    } // If we are only accumulating events for the target, then we don't
    // continue to propagate through the React fiber tree to find other
    // listeners.


    if (accumulateTargetOnly) {
      break;
    } // If we are processing the onBeforeBlur event, then we need to take

    instance = instance.return;
  }

  return listeners;
} // We should only use this function for:
// - BeforeInputEventPlugin
// - ChangeEventPlugin
// - SelectEventPlugin
// This is because we only process these plugins
// in the bubble phase, so we need to accumulate two
// phase event listeners (via emulation).

function accumulateTwoPhaseListeners(targetFiber, reactName) {
  var captureName = reactName + 'Capture';
  var listeners = [];
  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance3 = instance,
        stateNode = _instance3.stateNode,
        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;
      var captureListener = getListener(instance, captureName);

      if (captureListener != null) {
        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
      }

      var bubbleListener = getListener(instance, reactName);

      if (bubbleListener != null) {
        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
      }
    }

    instance = instance.return;
  }

  return listeners;
}

function getParent(inst) {
  if (inst === null) {
    return null;
  }

  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var nodeA = instA;
  var nodeB = instB;
  var depthA = 0;

  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    nodeA = getParent(nodeA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    nodeB = getParent(nodeB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
      return nodeA;
    }

    nodeA = getParent(nodeA);
    nodeB = getParent(nodeB);
  }

  return null;
}

function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
  var registrationName = event._reactName;
  var listeners = [];
  var instance = target;

  while (instance !== null) {
    if (instance === common) {
      break;
    }

    var _instance4 = instance,
        alternate = _instance4.alternate,
        stateNode = _instance4.stateNode,
        tag = _instance4.tag;

    if (alternate !== null && alternate === common) {
      break;
    }

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;

      if (inCapturePhase) {
        var captureListener = getListener(instance, registrationName);

        if (captureListener != null) {
          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
        }
      } else if (!inCapturePhase) {
        var bubbleListener = getListener(instance, registrationName);

        if (bubbleListener != null) {
          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
      }
    }

    instance = instance.return;
  }

  if (listeners.length !== 0) {
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
} // We should only use this function for:
// - EnterLeaveEventPlugin
// This is because we only process this plugin
// in the bubble phase, so we need to accumulate two
// phase event listeners.


function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;

  if (from !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
  }

  if (to !== null && enterEvent !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
  }
}
function getListenerSetKey(domEventName, capture) {
  return domEventName + "__" + (capture ? 'capture' : 'bubble');
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var warnedUnknownTags;
var validatePropertiesInDevelopment;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeHTML;

{
  warnedUnknownTags = {
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, {
      registrationNameDependencies: registrationNameDependencies,
      possibleRegistrationNames: possibleRegistrationNames
    });
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
} // HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.


var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

function normalizeMarkupForTextOrAttribute(markup) {
  {
    checkHtmlStringCoercion(markup);
  }

  var markupString = typeof markup === 'string' ? markup : '' + markup;
  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
}

function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

  if (normalizedServerText === normalizedClientText) {
    return;
  }

  if (shouldWarnDev) {
    {
      if (!didWarnInvalidHydration) {
        didWarnInvalidHydration = true;

        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      }
    }
  }

  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
    // In concurrent roots, we throw when there's a text mismatch and revert to
    // client rendering, up to the nearest Suspense boundary.
    throw new Error('Text content does not match server-rendered HTML.');
  }
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      props = rawProps;
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = rawProps;
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the allowed property list in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the allowed property list during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

        if (nextHtml != null) {
          var expectedHTML = normalizeHTML(domElement, nextHtml);

          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    if (shouldWarnDev) {
      if ( // $FlowFixMe - Should be inferred as not undefined.
      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
      }
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text, isConcurrentMode) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  var activeInstance = null;

  setEnabled(false);
  return activeInstance;
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;
  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);

  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;

    case 'img':
      return true;

    default:
      return false;
  }
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
function getCurrentEventPriority() {
  var currentEvent = window.event;

  if (currentEvent === undefined) {
    return DefaultEventPriority;
  }

  return getEventPriority(currentEvent.type);
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1;
var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
} : scheduleTimeout; // TODO: Determine the best fallback here.

function handleErrorInNextTick(error) {
  setTimeout(function () {
    throw error;
  });
} // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      if (newProps.autoFocus) {
        domElement.focus();
      }

      return;

    case 'img':
      {
        if (newProps.src) {
          domElement.src = newProps.src;
        }

        return;
      }
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
  // with current event handlers.

  updateFiberProps(domElement, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);

    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
      var data = nextNode.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

          retryIfBlockedOn(suspenseInstance);
          return;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
        depth++;
      }
    }

    node = nextNode;
  } while (node); // TODO: Warn, we didn't find the end comment boundary.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(suspenseInstance);
}
function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
  if (container.nodeType === COMMENT_NODE) {
    clearSuspenseBoundary(container.parentNode, suspenseInstance);
  } else if (container.nodeType === ELEMENT_NODE) {
    clearSuspenseBoundary(container, suspenseInstance);
  } // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(container);
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
}
function clearContainer(container) {
  if (container.nodeType === ELEMENT_NODE) {
    container.textContent = '';
  } else if (container.nodeType === DOCUMENT_NODE) {
    if (container.documentElement) {
      container.removeChild(container.documentElement);
    }
  }
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function canHydrateSuspenseInstance(instance) {
  if (instance.nodeType !== COMMENT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a suspense node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}
function getSuspenseInstanceFallbackErrorDetails(instance) {
  var dataset = instance.nextSibling && instance.nextSibling.dataset;
  var digest, message, stack;

  if (dataset) {
    digest = dataset.dgst;

    {
      message = dataset.msg;
      stack = dataset.stck;
    }
  }

  {
    return {
      message: message,
      digest: digest,
      stack: stack
    };
  } // let value = {message: undefined, hash: undefined};
  // const nextSibling = instance.nextSibling;
  // if (nextSibling) {
  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
  //   value.message = dataset.msg;
  //   value.hash = dataset.hash;
  //   if (true) {
  //     value.stack = dataset.stack;
  //   }
  // }
  // return value;

}
function registerSuspenseInstanceRetry(instance, callback) {
  instance._reactRetry = callback;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }

    if (nodeType === COMMENT_NODE) {
      var nodeData = node.data;

      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
        break;
      }

      if (nodeData === SUSPENSE_END_DATA) {
        return null;
      }
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function getFirstHydratableChildWithinContainer(parentContainer) {
  return getNextHydratable(parentContainer.firstChild);
}
function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
  return getNextHydratable(parentInstance.nextSibling);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
  // when the legacy root API is removed.


  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
  // when the legacy root API is removed.

  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
  return diffHydratedText(textInstance, text);
}
function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, suspenseInstance);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function shouldDeleteUnhydratedTailInstances(parentType) {
  return parentType !== 'head' && parentType !== 'body';
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
  var shouldWarnDev = true;
  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    var shouldWarnDev = true;
    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
  }
}
function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;

    if (parentNode !== null) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentNode, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentNode, instance);
      }
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentInstance, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentInstance, instance);
      }
    }
  }
}
function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;
    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
  }
}
function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
  {
    // $FlowFixMe: Only Element or Document can be parent nodes.
    var parentNode = parentInstance.parentNode;
    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedElement(parentInstance, type);
    }
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
  {
    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedText(parentInstance, text);
    }
  }
}
function errorHydratingContainer(parentContainer) {
  {
    // TODO: This gets logged by onRecoverableError, too, so we should be
    // able to remove it.
    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
  }
}
function preparePortalMount(portalInstance) {
  listenToAllSupportedEvents(portalInstance);
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactFiber$' + randomKey;
var internalPropsKey = '__reactProps$' + randomKey;
var internalContainerInstanceKey = '__reactContainer$' + randomKey;
var internalEventHandlersKey = '__reactEvents$' + randomKey;
var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
function detachDeletedInstance(node) {
  // TODO: This function is only called on host components. I don't think all of
  // these fields are relevant.
  delete node[internalInstanceKey];
  delete node[internalPropsKey];
  delete node[internalEventHandlersKey];
  delete node[internalEventHandlerListenersKey];
  delete node[internalEventHandlesSetKey];
}
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  throw new Error('getNodeFromInstance: Invalid argument.');
}
function getFiberCurrentPropsFromNode(node) {
  return node[internalPropsKey] || null;
}
function updateFiberProps(node, props) {
  node[internalPropsKey] = props;
}
function getEventListenerSet(node) {
  var elementListenerSet = node[internalEventHandlersKey];

  if (elementListenerSet === undefined) {
    elementListenerSet = node[internalEventHandlersKey] = new Set();
  }

  return elementListenerSet;
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (contextStackCursor.current !== emptyContextObject) {
      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext = instance.getChildContext();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
      }
    }

    {
      var name = getComponentNameFromFiber(fiber) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name);
    }

    return assign({}, parentContext, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }
}

var LegacyRoot = 0;
var ConcurrentRoot = 1;

var syncQueue = null;
var includesLegacySyncCallbacks = false;
var isFlushingSyncQueue = false;
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback];
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }
}
function scheduleLegacySyncCallback(callback) {
  includesLegacySyncCallbacks = true;
  scheduleSyncCallback(callback);
}
function flushSyncCallbacksOnlyInLegacyMode() {
  // Only flushes the queue if there's a legacy sync callback scheduled.
  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
  // it might make more sense for the queue to be a list of roots instead of a
  // list of generic callbacks. Then we can have two: one for legacy roots, one
  // for concurrent roots. And this method would only flush the legacy ones.
  if (includesLegacySyncCallbacks) {
    flushSyncCallbacks();
  }
}
function flushSyncCallbacks() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrance.
    isFlushingSyncQueue = true;
    var i = 0;
    var previousUpdatePriority = getCurrentUpdatePriority();

    try {
      var isSync = true;
      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
      // queue is in the render or commit phases.

      setCurrentUpdatePriority(DiscreteEventPriority);

      for (; i < queue.length; i++) {
        var callback = queue[i];

        do {
          callback = callback(isSync);
        } while (callback !== null);
      }

      syncQueue = null;
      includesLegacySyncCallbacks = false;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
      throw error;
    } finally {
      setCurrentUpdatePriority(previousUpdatePriority);
      isFlushingSyncQueue = false;
    }
  }

  return null;
}

// TODO: Use the unified fiber stack module instead of this local one?
// Intentionally not using it yet to derisk the initial implementation, because
// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
// rather the ids be wrong than crash the whole reconciler.
var forkStack = [];
var forkStackIndex = 0;
var treeForkProvider = null;
var treeForkCount = 0;
var idStack = [];
var idStackIndex = 0;
var treeContextProvider = null;
var treeContextId = 1;
var treeContextOverflow = '';
function isForkedChild(workInProgress) {
  warnIfNotHydrating();
  return (workInProgress.flags & Forked) !== NoFlags;
}
function getForksAtLevel(workInProgress) {
  warnIfNotHydrating();
  return treeForkCount;
}
function getTreeId() {
  var overflow = treeContextOverflow;
  var idWithLeadingBit = treeContextId;
  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
  return id.toString(32) + overflow;
}
function pushTreeFork(workInProgress, totalChildren) {
  // This is called right after we reconcile an array (or iterator) of child
  // fibers, because that's the only place where we know how many children in
  // the whole set without doing extra work later, or storing addtional
  // information on the fiber.
  //
  // That's why this function is separate from pushTreeId — it's called during
  // the render phase of the fork parent, not the child, which is where we push
  // the other context values.
  //
  // In the Fizz implementation this is much simpler because the child is
  // rendered in the same callstack as the parent.
  //
  // It might be better to just add a `forks` field to the Fiber type. It would
  // make this module simpler.
  warnIfNotHydrating();
  forkStack[forkStackIndex++] = treeForkCount;
  forkStack[forkStackIndex++] = treeForkProvider;
  treeForkProvider = workInProgress;
  treeForkCount = totalChildren;
}
function pushTreeId(workInProgress, totalChildren, index) {
  warnIfNotHydrating();
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextProvider = workInProgress;
  var baseIdWithLeadingBit = treeContextId;
  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
  // of the id; we use it to account for leading 0s.

  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
  var slot = index + 1;
  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
  // consideration the leading 1 we use to mark the end of the sequence.

  if (length > 30) {
    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
    // This branch assumes the length of the base id is greater than 5; it won't
    // work for smaller ids, because you need 5 bits per character.
    //
    // We encode the id in multiple steps: first the base id, then the
    // remaining digits.
    //
    // Each 5 bit sequence corresponds to a single base 32 character. So for
    // example, if the current id is 23 bits long, we can convert 20 of those
    // bits into a string of 4 characters, with 3 bits left over.
    //
    // First calculate how many bits in the base id represent a complete
    // sequence of characters.
    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

    var restOfBaseId = baseId >> numberOfOverflowBits;
    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
    // we made more room, this time it won't overflow.

    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
    var restOfNewBits = slot << restOfBaseLength;
    var id = restOfNewBits | restOfBaseId;
    var overflow = newOverflow + baseOverflow;
    treeContextId = 1 << restOfLength | id;
    treeContextOverflow = overflow;
  } else {
    // Normal path
    var newBits = slot << baseLength;

    var _id = newBits | baseId;

    var _overflow = baseOverflow;
    treeContextId = 1 << length | _id;
    treeContextOverflow = _overflow;
  }
}
function pushMaterializedTreeId(workInProgress) {
  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
  // in its children.

  var returnFiber = workInProgress.return;

  if (returnFiber !== null) {
    var numberOfForks = 1;
    var slotIndex = 0;
    pushTreeFork(workInProgress, numberOfForks);
    pushTreeId(workInProgress, numberOfForks, slotIndex);
  }
}

function getBitLength(number) {
  return 32 - clz32(number);
}

function getLeadingBit(id) {
  return 1 << getBitLength(id) - 1;
}

function popTreeContext(workInProgress) {
  // Restore the previous values.
  // This is a bit more complicated than other context-like modules in Fiber
  // because the same Fiber may appear on the stack multiple times and for
  // different reasons. We have to keep popping until the work-in-progress is
  // no longer at the top of the stack.
  while (workInProgress === treeForkProvider) {
    treeForkProvider = forkStack[--forkStackIndex];
    forkStack[forkStackIndex] = null;
    treeForkCount = forkStack[--forkStackIndex];
    forkStack[forkStackIndex] = null;
  }

  while (workInProgress === treeContextProvider) {
    treeContextProvider = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
    treeContextOverflow = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
    treeContextId = idStack[--idStackIndex];
    idStack[idStackIndex] = null;
  }
}
function getSuspendedTreeContext() {
  warnIfNotHydrating();

  if (treeContextProvider !== null) {
    return {
      id: treeContextId,
      overflow: treeContextOverflow
    };
  } else {
    return null;
  }
}
function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
  warnIfNotHydrating();
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextId = suspendedContext.id;
  treeContextOverflow = suspendedContext.overflow;
  treeContextProvider = workInProgress;
}

function warnIfNotHydrating() {
  {
    if (!getIsHydrating()) {
      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
    }
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
// due to earlier mismatches or a suspended fiber.

var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

var hydrationErrors = null;

function warnIfHydrating() {
  {
    if (isHydrating) {
      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
  }
}

function markDidThrowWhileHydratingDEV() {
  {
    didSuspendOrErrorDEV = true;
  }
}
function didSuspendOrErrorWhileHydratingDEV() {
  {
    return didSuspendOrErrorDEV;
  }
}

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  hydrationErrors = null;
  didSuspendOrErrorDEV = false;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  hydrationErrors = null;
  didSuspendOrErrorDEV = false;

  if (treeContext !== null) {
    restoreSuspendedTreeContext(fiber, treeContext);
  }

  return true;
}

function warnUnhydratedInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
          break;
        }

      case HostComponent:
        {
          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
          isConcurrentMode);
          break;
        }

      case SuspenseComponent:
        {
          var suspenseState = returnFiber.memoizedState;
          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
          break;
        }
    }
  }
}

function deleteHydratableInstance(returnFiber, instance) {
  warnUnhydratedInstance(returnFiber, instance);
  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  var deletions = returnFiber.deletions;

  if (deletions === null) {
    returnFiber.deletions = [childToDelete];
    returnFiber.flags |= ChildDeletion;
  } else {
    deletions.push(childToDelete);
  }
}

function warnNonhydratedInstance(returnFiber, fiber) {
  {
    if (didSuspendOrErrorDEV) {
      // Inside a boundary that already suspended. We're currently rendering the
      // siblings of a suspended node. The mismatch may be due to the missing
      // data, so it's probably a false positive.
      return;
    }

    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode);
                break;
              }

            case HostText:
              {
                var _text = fiber.pendingProps;

                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
                _isConcurrentMode);
                break;
              }
          }

          break;
        }

      case SuspenseComponent:
        {
          var suspenseState = returnFiber.memoizedState;
          var _parentInstance = suspenseState.dehydrated;
          if (_parentInstance !== null) switch (fiber.tag) {
            case HostComponent:
              var _type2 = fiber.type;
              var _props2 = fiber.pendingProps;
              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
              break;

            case HostText:
              var _text2 = fiber.pendingProps;
              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
              break;
          }
          break;
        }

      default:
        return;
    }
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.flags = fiber.flags & ~Hydrating | Placement;
  warnNonhydratedInstance(returnFiber, fiber);
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(instance);
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

          nextHydratableInstance = null;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {
        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

        if (suspenseInstance !== null) {
          var suspenseState = {
            dehydrated: suspenseInstance,
            treeContext: getSuspendedTreeContext(),
            retryLane: OffscreenLane
          };
          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
          // This simplifies the code for getHostSibling and deleting nodes,
          // since it doesn't have to consider all Suspense boundaries and
          // check if they're dehydrated ones or not.

          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
          dehydratedFragment.return = fiber;
          fiber.child = dehydratedFragment;
          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
          // it during the first pass. Instead, we'll reenter it later.

          nextHydratableInstance = null;
          return true;
        }

        return false;
      }

    default:
      return false;
  }
}

function shouldClientRenderOnMismatch(fiber) {
  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
}

function throwOnHydrationMismatch(fiber) {
  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    if (shouldClientRenderOnMismatch(fiber)) {
      warnNonhydratedInstance(hydrationParentFiber, fiber);
      throwOnHydrationMismatch();
    } // Nothing to hydrate. Make it an insertion.


    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    if (shouldClientRenderOnMismatch(fiber)) {
      warnNonhydratedInstance(hydrationParentFiber, fiber);
      throwOnHydrationMismatch();
    } // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.


    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    var prevHydrationParentFiber = hydrationParentFiber;

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
  }
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  if (shouldUpdate) {
    // We assume that prepareToHydrateHostTextInstance is called in a context where the
    // hydration parent is the parent host component of this host text.
    var returnFiber = hydrationParentFiber;

    if (returnFiber !== null) {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
            isConcurrentMode);
            break;
          }

        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;

            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
            _isConcurrentMode2);
            break;
          }
      }
    }
  }

  return shouldUpdate;
}

function prepareToHydrateHostSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }

  hydrateSuspenseInstance(suspenseInstance, fiber);
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  } // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them. We also don't delete anything inside the root container.


  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
    var nextInstance = nextHydratableInstance;

    if (nextInstance) {
      if (shouldClientRenderOnMismatch(fiber)) {
        warnIfUnhydratedTailNodes(fiber);
        throwOnHydrationMismatch();
      } else {
        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function hasUnhydratedTailNodes() {
  return isHydrating && nextHydratableInstance !== null;
}

function warnIfUnhydratedTailNodes(fiber) {
  var nextInstance = nextHydratableInstance;

  while (nextInstance) {
    warnUnhydratedInstance(fiber, nextInstance);
    nextInstance = getNextHydratableSibling(nextInstance);
  }
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
  didSuspendOrErrorDEV = false;
}

function upgradeHydrationErrorsToRecoverable() {
  if (hydrationErrors !== null) {
    // Successfully completed a forced client render. The errors that occurred
    // during the hydration attempt are now recovered. We will log them in
    // commit phase, once the entire tree has finished.
    queueRecoverableErrors(hydrationErrors);
    hydrationErrors = null;
  }
}

function getIsHydrating() {
  return isHydrating;
}

function queueHydrationError(error) {
  if (hydrationErrors === null) {
    hydrationErrors = [error];
  } else {
    hydrationErrors.push(error);
  }
}

var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var NoTransition = null;
function requestCurrentTransition() {
  return ReactCurrentBatchConfig$1.transition;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictLegacyMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedupe strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);

      try {
        setCurrentFiber(firstFiber);

        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
      } finally {
        resetCurrentFiber();
      }
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child, returnFiber) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child, returnFiber) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (typeof child._store !== 'object') {
      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }

    child._store.validated = true;
    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

    if (ownerHasKeyUseWarning[componentName]) {
      return;
    }

    ownerHasKeyUseWarning[componentName] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
  };
}

function isReactClass(type) {
  return type.prototype && type.prototype.isReactComponent;
}

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
      !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
      !(typeof element.type === 'function' && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
      element._owner) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (ownerFiber.tag !== ClassComponent) {
          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
      } // Assigning this to a const so Flow knows it won't change in the closure


      var resolvedInst = inst;

      {
        checkPropStringCoercion(mixedRef, 'ref');
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = resolvedInst.refs;

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (typeof mixedRef !== 'string') {
        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
      }

      if (!element._owner) {
        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  var childString = Object.prototype.toString.call(newChild);
  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
}

function warnOnFunctionType(returnFiber) {
  {
    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

    if (ownerHasFunctionTypeWarning[componentName]) {
      return;
    }

    ownerHasFunctionTypeWarning[componentName] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
}

function resolveLazy(lazyType) {
  var payload = lazyType._payload;
  var init = lazyType._init;
  return init(payload);
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }

    var deletions = returnFiber.deletions;

    if (deletions === null) {
      returnFiber.deletions = [childToDelete];
      returnFiber.flags |= ChildDeletion;
    } else {
      deletions.push(childToDelete);
    }
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // During hydration, the useId algorithm needs to know which fibers are
      // part of a list of children (arrays, iterators).
      newFiber.flags |= Forked;
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.flags |= Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.flags |= Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.flags |= Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, lanes) {
    var elementType = element.type;

    if (elementType === REACT_FRAGMENT_TYPE) {
      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
    }

    if (current !== null) {
      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
      // We need to do this after the Hot Reloading check above,
      // because hot reloading has different semantics than prod because
      // it doesn't resuspend. So we can't let the call below suspend.
      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, lanes);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, lanes) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, lanes) {
    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

            _created2.return = returnFiber;
            return _created2;
          }

        case REACT_LAZY_TYPE:
          {
            var payload = newChild._payload;
            var init = newChild._init;
            return createChild(returnFiber, init(payload), lanes);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              return updateElement(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_LAZY_TYPE:
          {
            var payload = newChild._payload;
            var init = newChild._init;
            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
          }

        case REACT_LAZY_TYPE:
          var payload = newChild._payload;
          var init = newChild._init;
          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys, returnFiber) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child, returnFiber);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;

        case REACT_LAZY_TYPE:
          var payload = child._payload;
          var init = child._init;
          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);

      if (getIsHydrating()) {
        var numberOfForks = newIdx;
        pushTreeFork(returnFiber, numberOfForks);
      }

      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      if (getIsHydrating()) {
        var _numberOfForks = newIdx;
        pushTreeFork(returnFiber, _numberOfForks);
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    if (getIsHydrating()) {
      var _numberOfForks2 = newIdx;
      pushTreeFork(returnFiber, _numberOfForks2);
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (typeof iteratorFn !== 'function') {
      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (newChildren == null) {
      throw new Error('An iterable object provided no iterator.');
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);

      if (getIsHydrating()) {
        var numberOfForks = newIdx;
        pushTreeFork(returnFiber, numberOfForks);
      }

      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, lanes);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      if (getIsHydrating()) {
        var _numberOfForks3 = newIdx;
        pushTreeFork(returnFiber, _numberOfForks3);
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    if (getIsHydrating()) {
      var _numberOfForks4 = newIdx;
      pushTreeFork(returnFiber, _numberOfForks4);
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        var elementType = element.type;

        if (elementType === REACT_FRAGMENT_TYPE) {
          if (child.tag === Fragment) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, element.props.children);
            existing.return = returnFiber;

            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }

            return existing;
          }
        } else {
          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
            deleteRemainingChildren(returnFiber, child.sibling);

            var _existing = useFiber(child, element.props);

            _existing.ref = coerceRef(returnFiber, child, element);
            _existing.return = returnFiber;

            {
              _existing._debugSource = element._source;
              _existing._debugOwner = element._owner;
            }

            return _existing;
          }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_LAZY_TYPE:
          var payload = newChild._payload;
          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
      }

      if (isArray(newChild)) {
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
      }

      if (getIteratorFn(newChild)) {
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (current !== null && workInProgress.child !== current.child) {
    throw new Error('Resuming work not yet implemented.');
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, lanes) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, lanes);
    child = child.sibling;
  }
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastFullyObservedContext = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastFullyObservedContext = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, context, nextValue) {
  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(context, providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);

  {
    {
      context._currentValue = currentValue;
    }
  }
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
  // Update the child lanes of all the ancestors, including the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
      node.childLanes = mergeLanes(node.childLanes, renderLanes);

      if (alternate !== null) {
        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
      }
    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
    }

    if (node === propagationRoot) {
      break;
    }

    node = node.return;
  }

  {
    if (node !== propagationRoot) {
      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
    }
  }
}
function propagateContextChange(workInProgress, context, renderLanes) {
  {
    propagateContextChange_eager(workInProgress, context, renderLanes);
  }
}

function propagateContextChange_eager(workInProgress, context, renderLanes) {

  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var lane = pickArbitraryLane(renderLanes);
            var update = createUpdate(NoTimestamp, lane);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.
            // Inlined `enqueueUpdate` to remove interleaved update check

            var updateQueue = fiber.updateQueue;

            if (updateQueue === null) ; else {
              var sharedQueue = updateQueue.shared;
              var pending = sharedQueue.pending;

              if (pending === null) {
                // This is the first update. Create a circular list.
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }

              sharedQueue.pending = update;
            }
          }

          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
          // dependency list.

          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (fiber.tag === DehydratedFragment) {
      // If a dehydrated suspense boundary is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates.
      var parentSuspense = fiber.return;

      if (parentSuspense === null) {
        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
      }

      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
      var _alternate = parentSuspense.alternate;

      if (_alternate !== null) {
        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
      } // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childLanes on
      // this fiber to indicate that a context has changed.


      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderLanes) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastFullyObservedContext = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    {
      var firstContext = dependencies.firstContext;

      if (firstContext !== null) {
        if (includesSomeLane(dependencies.lanes, renderLanes)) {
          // Context list has a pending update. Mark that this fiber performed work.
          markWorkInProgressReceivedUpdate();
        } // Reset the work-in-progress list


        dependencies.firstContext = null;
      }
    }
  }
}
function readContext(context) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  var value =  context._currentValue ;

  if (lastFullyObservedContext === context) ; else {
    var contextItem = {
      context: context,
      memoizedValue: value,
      next: null
    };

    if (lastContextDependency === null) {
      if (currentlyRenderingFiber === null) {
        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        lanes: NoLanes,
        firstContext: contextItem
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return value;
}

// render. When this render exits, either because it finishes or because it is
// interrupted, the interleaved updates will be transferred onto the main part
// of the queue.

var concurrentQueues = null;
function pushConcurrentUpdateQueue(queue) {
  if (concurrentQueues === null) {
    concurrentQueues = [queue];
  } else {
    concurrentQueues.push(queue);
  }
}
function finishQueueingConcurrentUpdates() {
  // Transfer the interleaved updates onto the main queue. Each queue has a
  // `pending` field and an `interleaved` field. When they are not null, they
  // point to the last node in a circular linked list. We need to append the
  // interleaved list to the end of the pending list by joining them into a
  // single, circular list.
  if (concurrentQueues !== null) {
    for (var i = 0; i < concurrentQueues.length; i++) {
      var queue = concurrentQueues[i];
      var lastInterleavedUpdate = queue.interleaved;

      if (lastInterleavedUpdate !== null) {
        queue.interleaved = null;
        var firstInterleavedUpdate = lastInterleavedUpdate.next;
        var lastPendingUpdate = queue.pending;

        if (lastPendingUpdate !== null) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          lastInterleavedUpdate.next = firstPendingUpdate;
        }

        queue.pending = lastInterleavedUpdate;
      }
    }

    concurrentQueues = null;
  }
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
  return markUpdateLaneFromFiberToRoot(fiber, lane);
}
function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
}
function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
  var interleaved = queue.interleaved;

  if (interleaved === null) {
    // This is the first update. Create a circular list.
    update.next = update; // At the end of the current render, this queue's interleaved updates will
    // be transferred to the pending queue.

    pushConcurrentUpdateQueue(queue);
  } else {
    update.next = interleaved.next;
    interleaved.next = update;
  }

  queue.interleaved = update;
  return markUpdateLaneFromFiberToRoot(fiber, lane);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
  return markUpdateLaneFromFiberToRoot(fiber, lane);
} // Calling this function outside this module should only be done for backwards
// compatibility and should always be accompanied by a warning.

var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
  // Update the source fiber's lanes
  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
  var alternate = sourceFiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, lane);
  }

  {
    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
    }
  } // Walk the parent path to the root and update the child lanes.


  var node = sourceFiber;
  var parent = sourceFiber.return;

  while (parent !== null) {
    parent.childLanes = mergeLanes(parent.childLanes, lane);
    alternate = parent.alternate;

    if (alternate !== null) {
      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
    } else {
      {
        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
    }

    node = parent;
    parent = parent.return;
  }

  if (node.tag === HostRoot) {
    var root = node.stateNode;
    return root;
  } else {
    return null;
  }
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null,
      interleaved: null,
      lanes: NoLanes
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      firstBaseUpdate: currentQueue.firstBaseUpdate,
      lastBaseUpdate: currentQueue.lastBaseUpdate,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(eventTime, lane) {
  var update = {
    eventTime: eventTime,
    lane: lane,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  return update;
}
function enqueueUpdate(fiber, update, lane) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return null;
  }

  var sharedQueue = updateQueue.shared;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }

  if (isUnsafeClassRenderPhaseUpdate()) {
    // This is an unsafe render phase update. Add directly to the update
    // queue so we can process it immediately during the current render.
    var pending = sharedQueue.pending;

    if (pending === null) {
      // This is the first update. Create a circular list.
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }

    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
    // this fiber. This is for backwards compatibility in the case where you
    // update a different component during render phase than the one that is
    // currently renderings (a pattern that is accompanied by a warning).

    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
  } else {
    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
  }
}
function entangleTransitions(root, fiber, lane) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;

  if (isTransitionLane(lane)) {
    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
    // have finished. We can remove them from the shared queue, which represents
    // a superset of the actually pending lanes. In some cases we may entangle
    // more than we need to, but that's OK. In fact it's worse if we *don't*
    // entangle when we should.

    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

    var newQueueLanes = mergeLanes(queueLanes, lane);
    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
    // the lane finished since the last time we entangled it. So we need to
    // entangle it again, just to be sure.

    markRootEntangled(root, newQueueLanes);
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  // Captured updates are updates that are thrown by a child during the render
  // phase. They should be discarded if the render is aborted. Therefore,
  // we should only put them on the work-in-progress queue, not the current one.
  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

  var current = workInProgress.alternate;

  if (current !== null) {
    var currentQueue = current.updateQueue;

    if (queue === currentQueue) {
      // The work-in-progress queue is the same as current. This happens when
      // we bail out on a parent fiber that then captures an error thrown by
      // a child. Since we want to append the update only to the work-in
      // -progress queue, we need to clone the updates. We usually clone during
      // processUpdateQueue, but that didn't happen in this case because we
      // skipped over the parent when we bailed out.
      var newFirst = null;
      var newLast = null;
      var firstBaseUpdate = queue.firstBaseUpdate;

      if (firstBaseUpdate !== null) {
        // Loop through the updates and clone them.
        var update = firstBaseUpdate;

        do {
          var clone = {
            eventTime: update.eventTime,
            lane: update.lane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newLast === null) {
            newFirst = newLast = clone;
          } else {
            newLast.next = clone;
            newLast = clone;
          }

          update = update.next;
        } while (update !== null); // Append the captured update the end of the cloned list.


        if (newLast === null) {
          newFirst = newLast = capturedUpdate;
        } else {
          newLast.next = capturedUpdate;
          newLast = capturedUpdate;
        }
      } else {
        // There are no base updates.
        newFirst = newLast = capturedUpdate;
      }

      queue = {
        baseState: currentQueue.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
  } // Append the update to the end of the list.


  var lastBaseUpdate = queue.lastBaseUpdate;

  if (lastBaseUpdate === null) {
    queue.firstBaseUpdate = capturedUpdate;
  } else {
    lastBaseUpdate.next = capturedUpdate;
  }

  queue.lastBaseUpdate = capturedUpdate;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);

              try {
                payload.call(instance, prevState, nextProps);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }

            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);

              try {
                _payload.call(instance, prevState, nextProps);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }

            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderLanes) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  }

  var firstBaseUpdate = queue.firstBaseUpdate;
  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
    // and last so that it's non-circular.

    var lastPendingUpdate = pendingQueue;
    var firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null; // Append pending updates to base queue

    if (lastBaseUpdate === null) {
      firstBaseUpdate = firstPendingUpdate;
    } else {
      lastBaseUpdate.next = firstPendingUpdate;
    }

    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
    // we need to transfer the updates to that queue, too. Because the base
    // queue is a singly-linked list with no cycles, we can append to both
    // lists and take advantage of structural sharing.
    // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      // This is always non-null on a ClassComponent or HostRoot
      var currentQueue = current.updateQueue;
      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

      if (currentLastBaseUpdate !== lastBaseUpdate) {
        if (currentLastBaseUpdate === null) {
          currentQueue.firstBaseUpdate = firstPendingUpdate;
        } else {
          currentLastBaseUpdate.next = firstPendingUpdate;
        }

        currentQueue.lastBaseUpdate = lastPendingUpdate;
      }
    }
  } // These values may change as we process the queue.


  if (firstBaseUpdate !== null) {
    // Iterate through the list of updates to compute the result.
    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
    // from the original lanes.

    var newLanes = NoLanes;
    var newBaseState = null;
    var newFirstBaseUpdate = null;
    var newLastBaseUpdate = null;
    var update = firstBaseUpdate;

    do {
      var updateLane = update.lane;
      var updateEventTime = update.eventTime;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: update.tag,
          payload: update.payload,
          callback: update.callback,
          next: null
        };

        if (newLastBaseUpdate === null) {
          newFirstBaseUpdate = newLastBaseUpdate = clone;
          newBaseState = newState;
        } else {
          newLastBaseUpdate = newLastBaseUpdate.next = clone;
        } // Update the remaining priority in the queue.


        newLanes = mergeLanes(newLanes, updateLane);
      } else {
        // This update does have sufficient priority.
        if (newLastBaseUpdate !== null) {
          var _clone = {
            eventTime: updateEventTime,
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };
          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
        } // Process this update.


        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
        var callback = update.callback;

        if (callback !== null && // If the update was already committed, we should not queue its
        // callback again.
        update.lane !== NoLane) {
          workInProgress.flags |= Callback;
          var effects = queue.effects;

          if (effects === null) {
            queue.effects = [update];
          } else {
            effects.push(update);
          }
        }
      }

      update = update.next;

      if (update === null) {
        pendingQueue = queue.shared.pending;

        if (pendingQueue === null) {
          break;
        } else {
          // An update was scheduled from inside a reducer. Add the new
          // pending updates to the end of the list and keep processing.
          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
          // unravel them when transferring them to the base queue.

          var _firstPendingUpdate = _lastPendingUpdate.next;
          _lastPendingUpdate.next = null;
          update = _firstPendingUpdate;
          queue.lastBaseUpdate = _lastPendingUpdate;
          queue.shared.pending = null;
        }
      }
    } while (true);

    if (newLastBaseUpdate === null) {
      newBaseState = newState;
    }

    queue.baseState = newBaseState;
    queue.firstBaseUpdate = newFirstBaseUpdate;
    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
    // process them during this render, but we do need to track which lanes
    // are remaining.

    var lastInterleaved = queue.shared.interleaved;

    if (lastInterleaved !== null) {
      var interleaved = lastInterleaved;

      do {
        newLanes = mergeLanes(newLanes, interleaved.lane);
        interleaved = interleaved.next;
      } while (interleaved !== lastInterleaved);
    } else if (firstBaseUpdate === null) {
      // `queue.lanes` is used for entangling transitions. We can set it back to
      // zero once the queue is empty.
      queue.shared.lanes = NoLanes;
    } // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.


    markSkippedUpdateLanes(newLanes);
    workInProgress.lanes = newLanes;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (typeof callback !== 'function') {
    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (c === NO_CONTEXT) {
    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // Regular boundaries always capture.

  {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.flags & DidCapture) !== NoFlags;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var NoFlags$1 =
/*   */
0; // Represents whether effect should fire.

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Insertion =
/*  */
2;
var Layout =
/*    */
4;
var Passive$1 =
/*   */
8;

// and should be reset before starting a new render.
// This tracks which mutable sources need to be reset after a render.

var workInProgressSources = [];
function resetWorkInProgressVersions() {
  for (var i = 0; i < workInProgressSources.length; i++) {
    var mutableSource = workInProgressSources[i];

    {
      mutableSource._workInProgressVersionPrimary = null;
    }
  }

  workInProgressSources.length = 0;
}
// This ensures that the version used for server rendering matches the one
// that is eventually read during hydration.
// If they don't match there's a potential tear and a full deopt render is required.

function registerMutableSourceForHydration(root, mutableSource) {
  var getVersion = mutableSource._getVersion;
  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
  // Retaining it forever may interfere with GC.

  if (root.mutableSourceEagerHydrationData == null) {
    root.mutableSourceEagerHydrationData = [mutableSource, version];
  } else {
    root.mutableSourceEagerHydrationData.push(mutableSource, version);
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;
var didWarnUncachedGetSnapshot;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
// gets reset after each attempt.
// TODO: Maybe there's some way to consolidate this with
// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
// hydration). This counter is global, so client ids are not stable across
// render attempts.

var globalClientIdCounter = 0;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = NoLanes; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // localIdCounter = 0;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (didScheduleRenderPhaseUpdateDuringThisPass) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;

      if (numberOfReRenders >= RE_RENDER_LIMIT) {
        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrance.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
    // render. If this fires, it suggests that we incorrectly reset the static
    // flags in some other part of the codebase. This has happened before, for
    // example, in the SuspenseList implementation.

    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
    // and creates false positives. To make this work in legacy mode, we'd
    // need to mark fibers that commit in an incomplete state, somehow. For
    // now I'll disable the warning that most of the bugs that would trigger
    // it are either exclusive to concurrent mode or exist in both.
    (current.mode & ConcurrentMode) !== NoMode) {
      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
    }
  }

  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
  // localIdCounter = 0;

  if (didRenderTooFewHooks) {
    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
  }

  return children;
}
function checkDidRenderIdHook() {
  // This should be called immediately after every renderWithHooks call.
  // Conceptually, it's part of the return value of renderWithHooks; it's only a
  // separate function to avoid using an array tuple.
  var didRenderIdHook = localIdCounter !== 0;
  localIdCounter = 0;
  return didRenderIdHook;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
  // complete phase (bubbleProperties).

  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
  } else {
    workInProgress.flags &= ~(Passive | Update);
  }

  current.lanes = removeLanes(current.lanes, lanes);
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrance.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }

    didScheduleRenderPhaseUpdate = false;
  }

  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
    isUpdatingOpaqueValueInRenderPhase = false;
  }

  didScheduleRenderPhaseUpdateDuringThisPass = false;
  localIdCounter = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (nextCurrentHook === null) {
      throw new Error('Rendered more hooks than during the previous render.');
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null,
    stores: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = {
    pending: null,
    interleaved: null,
    lanes: NoLanes,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  hook.queue = queue;
  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (queue === null) {
    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    {
      if (current.baseQueue !== baseQueue) {
        // Internal invariant that should never happen, but feasibly could in
        // the future if we implement resuming, or some form of that.
        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
      }
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateLane = update.lane;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          lane: updateLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.
        // TODO: Don't need to accumulate this. Instead, we can remove
        // renderLanes from the original lanes.


        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
        markSkippedUpdateLanes(updateLane);
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Process this update.


        if (update.hasEagerState) {
          // If this update is a state update (not a reducer) and was processed eagerly,
          // we can use the eagerly computed state
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  } // Interleaved updates are stored on a separate queue. We aren't going to
  // process them during this render, but we do need to track which lanes
  // are remaining.


  var lastInterleaved = queue.interleaved;

  if (lastInterleaved !== null) {
    var interleaved = lastInterleaved;

    do {
      var interleavedLane = interleaved.lane;
      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
      markSkippedUpdateLanes(interleavedLane);
      interleaved = interleaved.next;
    } while (interleaved !== lastInterleaved);
  } else if (baseQueue === null) {
    // `queue.lanes` is used for entangling transitions. We can set it back to
    // zero once the queue is empty.
    queue.lanes = NoLanes;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (queue === null) {
    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountMutableSource(source, getSnapshot, subscribe) {
  {
    return undefined;
  }
}

function updateMutableSource(source, getSnapshot, subscribe) {
  {
    return undefined;
  }
}

function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1;
  var hook = mountWorkInProgressHook();
  var nextSnapshot;
  var isHydrating = getIsHydrating();

  if (isHydrating) {
    if (getServerSnapshot === undefined) {
      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
    }

    nextSnapshot = getServerSnapshot();

    {
      if (!didWarnUncachedGetSnapshot) {
        if (nextSnapshot !== getServerSnapshot()) {
          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

          didWarnUncachedGetSnapshot = true;
        }
      }
    }
  } else {
    nextSnapshot = getSnapshot();

    {
      if (!didWarnUncachedGetSnapshot) {
        var cachedSnapshot = getSnapshot();

        if (!objectIs(nextSnapshot, cachedSnapshot)) {
          error('The result of getSnapshot should be cached to avoid an infinite loop');

          didWarnUncachedGetSnapshot = true;
        }
      }
    } // Unless we're rendering a blocking lane, schedule a consistency check.
    // Right before committing, we will walk the tree and check if any of the
    // stores were mutated.
    //
    // We won't do this if we're hydrating server-rendered content, because if
    // the content is stale, it's already visible anyway. Instead we'll patch
    // it up in a passive effect.


    var root = getWorkInProgressRoot();

    if (root === null) {
      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
    }

    if (!includesBlockingLane(root, renderLanes)) {
      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
  } // Read the current snapshot from the store on every render. This breaks the
  // normal rules of React, and only works because store updates are
  // always synchronous.


  hook.memoizedState = nextSnapshot;
  var inst = {
    value: nextSnapshot,
    getSnapshot: getSnapshot
  };
  hook.queue = inst; // Schedule an effect to subscribe to the store.

  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
  // this whenever subscribe, getSnapshot, or value changes. Because there's no
  // clean-up function, and we track the deps correctly, we can call pushEffect
  // directly, without storing any additional state. For the same reason, we
  // don't need to set a static flag, either.
  // TODO: We can move this to the passive phase once we add a pre-commit
  // consistency check. See the next comment.

  fiber.flags |= Passive;
  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
  return nextSnapshot;
}

function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1;
  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
  // normal rules of React, and only works because store updates are
  // always synchronous.

  var nextSnapshot = getSnapshot();

  {
    if (!didWarnUncachedGetSnapshot) {
      var cachedSnapshot = getSnapshot();

      if (!objectIs(nextSnapshot, cachedSnapshot)) {
        error('The result of getSnapshot should be cached to avoid an infinite loop');

        didWarnUncachedGetSnapshot = true;
      }
    }
  }

  var prevSnapshot = hook.memoizedState;
  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

  if (snapshotChanged) {
    hook.memoizedState = nextSnapshot;
    markWorkInProgressReceivedUpdate();
  }

  var inst = hook.queue;
  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
  // commit phase if there was an interleaved mutation. In concurrent mode
  // this can happen all the time, but even in synchronous mode, an earlier
  // effect may have mutated the store.

  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
  // checking whether we scheduled a subscription effect above.
  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
    fiber.flags |= Passive;
    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
    // Right before committing, we will walk the tree and check if any of the
    // stores were mutated.

    var root = getWorkInProgressRoot();

    if (root === null) {
      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
    }

    if (!includesBlockingLane(root, renderLanes)) {
      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
  }

  return nextSnapshot;
}

function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
  fiber.flags |= StoreConsistency;
  var check = {
    getSnapshot: getSnapshot,
    value: renderedSnapshot
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.stores = [check];
  } else {
    var stores = componentUpdateQueue.stores;

    if (stores === null) {
      componentUpdateQueue.stores = [check];
    } else {
      stores.push(check);
    }
  }
}

function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
  // These are updated in the passive phase
  inst.value = nextSnapshot;
  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
  // have been in an event that fired before the passive effects, or it could
  // have been in a layout effect. In that case, we would have used the old
  // snapsho and getSnapshot values to bail out. We need to check one more time.

  if (checkIfSnapshotChanged(inst)) {
    // Force a re-render.
    forceStoreRerender(fiber);
  }
}

function subscribeToStore(fiber, inst, subscribe) {
  var handleStoreChange = function () {
    // The store changed. Check if the snapshot changed since the last time we
    // read from the store.
    if (checkIfSnapshotChanged(inst)) {
      // Force a re-render.
      forceStoreRerender(fiber);
    }
  }; // Subscribe to the store and return a clean-up function.


  return subscribe(handleStoreChange);
}

function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  var prevValue = inst.value;

  try {
    var nextValue = latestGetSnapshot();
    return !objectIs(prevValue, nextValue);
  } catch (error) {
    return true;
  }
}

function forceStoreRerender(fiber) {
  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

  if (root !== null) {
    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
  }
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = {
    pending: null,
    interleaved: null,
    lanes: NoLanes,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  hook.queue = queue;
  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();

  {
    var _ref2 = {
      current: initialValue
    };
    hook.memoizedState = _ref2;
    return _ref2;
  }
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
}

function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
  } else {
    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
  }
}

function updateEffect(create, deps) {
  return updateEffectImpl(Passive, Passive$1, create, deps);
}

function mountInsertionEffect(create, deps) {
  return mountEffectImpl(Update, Insertion, create, deps);
}

function updateInsertionEffect(create, deps) {
  return updateEffectImpl(Update, Insertion, create, deps);
}

function mountLayoutEffect(create, deps) {
  var fiberFlags = Update;

  {
    fiberFlags |= LayoutStatic;
  }

  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    fiberFlags |= MountLayoutDev;
  }

  return mountEffectImpl(fiberFlags, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  var fiberFlags = Update;

  {
    fiberFlags |= LayoutStatic;
  }

  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
    fiberFlags |= MountLayoutDev;
  }

  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value) {
  var hook = mountWorkInProgressHook();
  hook.memoizedState = value;
  return value;
}

function updateDeferredValue(value) {
  var hook = updateWorkInProgressHook();
  var resolvedCurrentHook = currentHook;
  var prevValue = resolvedCurrentHook.memoizedState;
  return updateDeferredValueImpl(hook, prevValue, value);
}

function rerenderDeferredValue(value) {
  var hook = updateWorkInProgressHook();

  if (currentHook === null) {
    // This is a rerender during a mount.
    hook.memoizedState = value;
    return value;
  } else {
    // This is a rerender during an update.
    var prevValue = currentHook.memoizedState;
    return updateDeferredValueImpl(hook, prevValue, value);
  }
}

function updateDeferredValueImpl(hook, prevValue, value) {
  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

  if (shouldDeferValue) {
    // This is an urgent update. If the value has changed, keep using the
    // previous value and spawn a deferred render to update it later.
    if (!objectIs(value, prevValue)) {
      // Schedule a deferred render
      var deferredLane = claimNextTransitionLane();
      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
      // from the latest value. The name "baseState" doesn't really match how we
      // use it because we're reusing a state hook field instead of creating a
      // new one.

      hook.baseState = true;
    } // Reuse the previous value


    return prevValue;
  } else {
    // This is not an urgent update, so we can use the latest value regardless
    // of what it is. No need to defer it.
    // However, if we're currently inside a spawned render, then we need to mark
    // this as an update to prevent the fiber from bailing out.
    //
    // `baseState` is true when the current value is different from the rendered
    // value. The name doesn't really match how we use it because we're reusing
    // a state hook field instead of creating a new one.
    if (hook.baseState) {
      // Flip this back to false.
      hook.baseState = false;
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = value;
    return value;
  }
}

function startTransition(setPending, callback, options) {
  var previousPriority = getCurrentUpdatePriority();
  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
  setPending(true);
  var prevTransition = ReactCurrentBatchConfig$2.transition;
  ReactCurrentBatchConfig$2.transition = {};
  var currentTransition = ReactCurrentBatchConfig$2.transition;

  {
    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
  }

  try {
    setPending(false);
    callback();
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$2.transition = prevTransition;

    {
      if (prevTransition === null && currentTransition._updatedFibers) {
        var updatedFibersCount = currentTransition._updatedFibers.size;

        if (updatedFibersCount > 10) {
          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
        }

        currentTransition._updatedFibers.clear();
      }
    }
  }
}

function mountTransition() {
  var _mountState = mountState(false),
      isPending = _mountState[0],
      setPending = _mountState[1]; // The `start` method never changes.


  var start = startTransition.bind(null, setPending);
  var hook = mountWorkInProgressHook();
  hook.memoizedState = start;
  return [isPending, start];
}

function updateTransition() {
  var _updateState = updateState(),
      isPending = _updateState[0];

  var hook = updateWorkInProgressHook();
  var start = hook.memoizedState;
  return [isPending, start];
}

function rerenderTransition() {
  var _rerenderState = rerenderState(),
      isPending = _rerenderState[0];

  var hook = updateWorkInProgressHook();
  var start = hook.memoizedState;
  return [isPending, start];
}

var isUpdatingOpaqueValueInRenderPhase = false;
function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
  {
    return isUpdatingOpaqueValueInRenderPhase;
  }
}

function mountId() {
  var hook = mountWorkInProgressHook();
  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
  // should do this in Fiber, too? Deferring this decision for now because
  // there's no other place to store the prefix except for an internal field on
  // the public createRoot object, which the fiber tree does not currently have
  // a reference to.

  var identifierPrefix = root.identifierPrefix;
  var id;

  if (getIsHydrating()) {
    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
    // that represents the position of this useId hook among all the useId
    // hooks for this fiber.

    var localId = localIdCounter++;

    if (localId > 0) {
      id += 'H' + localId.toString(32);
    }

    id += ':';
  } else {
    // Use a lowercase r prefix for client-generated ids.
    var globalClientId = globalClientIdCounter++;
    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
  }

  hook.memoizedState = id;
  return id;
}

function updateId() {
  var hook = updateWorkInProgressHook();
  var id = hook.memoizedState;
  return id;
}

function dispatchReducerAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };

  if (isRenderPhaseUpdate(fiber)) {
    enqueueRenderPhaseUpdate(queue, update);
  } else {
    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

    if (root !== null) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitionUpdate(root, queue, lane);
    }
  }

  markUpdateInDevTools(fiber, lane);
}

function dispatchSetState(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };

  if (isRenderPhaseUpdate(fiber)) {
    enqueueRenderPhaseUpdate(queue, update);
  } else {
    var alternate = fiber.alternate;

    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.hasEagerState = true;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            // TODO: Do we still need to entangle transitions in this case?
            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

    if (root !== null) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitionUpdate(root, queue, lane);
    }
  }

  markUpdateInDevTools(fiber, lane);
}

function isRenderPhaseUpdate(fiber) {
  var alternate = fiber.alternate;
  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
}

function enqueueRenderPhaseUpdate(queue, update) {
  // This is a render phase update. Stash it in a lazily-created map of
  // queue -> linked list of updates. After this render pass, we'll restart
  // and apply the stashed updates on top of the work-in-progress hook.
  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
} // TODO: Move to ReactFiberConcurrentUpdates?


function entangleTransitionUpdate(root, queue, lane) {
  if (isTransitionLane(lane)) {
    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
    // must have finished. We can remove them from the shared queue, which
    // represents a superset of the actually pending lanes. In some cases we
    // may entangle more than we need to, but that's OK. In fact it's worse if
    // we *don't* entangle when we should.

    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

    var newQueueLanes = mergeLanes(queueLanes, lane);
    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
    // the lane finished since the last time we entangled it. So we need to
    // entangle it again, just to be sure.

    markRootEntangled(root, newQueueLanes);
  }
}

function markUpdateInDevTools(fiber, lane, action) {

  {
    markStateUpdateScheduled(fiber, lane);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useInsertionEffect: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError,
  useMutableSource: throwInvalidHookError,
  useSyncExternalStore: throwInvalidHookError,
  useId: throwInvalidHookError,
  unstable_isNewReconciler: enableNewReconciler
};

var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      mountHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      mountHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context) {
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };

  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context) {
      warnInvalidContextAccess();
      return readContext(context);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      currentHookNameInDev = 'useInsertionEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateInsertionEffect(create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource();
    },
    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = 'useSyncExternalStore';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    },
    useId: function () {
      currentHookNameInDev = 'useId';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateId();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var layoutEffectStartTime = -1;
var profilerStartTime = -1;
var passiveEffectStartTime = -1;
/**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */

var currentUpdateIsNested = false;
var nestedUpdateScheduled = false;

function isCurrentUpdateNested() {
  return currentUpdateIsNested;
}

function markNestedUpdateScheduled() {
  {
    nestedUpdateScheduled = true;
  }
}

function resetNestedUpdateFlag() {
  {
    currentUpdateIsNested = false;
    nestedUpdateScheduled = false;
  }
}

function syncNestedUpdateFlag() {
  {
    currentUpdateIsNested = nestedUpdateScheduled;
    nestedUpdateScheduled = false;
  }
}

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

function recordLayoutEffectDuration(fiber) {

  if (layoutEffectStartTime >= 0) {
    var elapsedTime = now$1() - layoutEffectStartTime;
    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
    // Or the root (for the DevTools Profiler to read)

    var parentFiber = fiber.return;

    while (parentFiber !== null) {
      switch (parentFiber.tag) {
        case HostRoot:
          var root = parentFiber.stateNode;
          root.effectDuration += elapsedTime;
          return;

        case Profiler:
          var parentStateNode = parentFiber.stateNode;
          parentStateNode.effectDuration += elapsedTime;
          return;
      }

      parentFiber = parentFiber.return;
    }
  }
}

function recordPassiveEffectDuration(fiber) {

  if (passiveEffectStartTime >= 0) {
    var elapsedTime = now$1() - passiveEffectStartTime;
    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
    // Or the root (for the DevTools Profiler to read)

    var parentFiber = fiber.return;

    while (parentFiber !== null) {
      switch (parentFiber.tag) {
        case HostRoot:
          var root = parentFiber.stateNode;

          if (root !== null) {
            root.passiveEffectDuration += elapsedTime;
          }

          return;

        case Profiler:
          var parentStateNode = parentFiber.stateNode;

          if (parentStateNode !== null) {
            // Detached fibers have their state node cleared out.
            // In this case, the return pointer is also cleared out,
            // so we won't be able to report the time spent in this Profiler's subtree.
            parentStateNode.passiveEffectDuration += elapsedTime;
          }

          return;
      }

      parentFiber = parentFiber.return;
    }
  }
}

function startLayoutEffectTimer() {

  layoutEffectStartTime = now$1();
}

function startPassiveEffectTimer() {

  passiveEffectStartTime = now$1();
}

function transferActualDuration(fiber) {
  // Transfer time spent rendering these children so we don't lose it
  // after we rerender. This is used as a helper in special cases
  // where we should count the work of multiple passes.
  var child = fiber.child;

  while (child) {
    fiber.actualDuration += child.actualDuration;
    child = child.sibling;
  }
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = assign({}, baseProps);
    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}

var fakeInternalInstance = {};
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;
var didWarnAboutLegacyContext$1;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  didWarnAboutLegacyContext$1 = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + '_' + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentNameFromType(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;
  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        // Invoke the function an extra time to help detect side-effects.
        partialState = getDerivedStateFromProps(nextProps, prevState);
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.lanes === NoLanes) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markStateUpdateScheduled(fiber, lane);
    }
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markStateUpdateScheduled(fiber, lane);
    }
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    var root = enqueueUpdate(fiber, update, lane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
      entangleTransitions(root, fiber, lane);
    }

    {
      markForceUpdateScheduled(fiber, lane);
    }
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

    {
      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          // Invoke the function an extra time to help detect side-effects.
          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }

      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentNameFromType(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
      // this one.
      (workInProgress.mode & StrictLegacyMode) === NoMode) {
        didWarnAboutLegacyContext$1.add(ctor);

        error('%s uses the legacy childContextTypes API which is no longer ' + 'supported and will be removed in the next major release. Use ' + 'React.createContext() instead\n\n.' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
      }

      if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
      // this one.
      (workInProgress.mode & StrictLegacyMode) === NoMode) {
        didWarnAboutLegacyContext$1.add(ctor);

        error('%s uses the legacy contextTypes API which is no longer supported ' + 'and will be removed in the next major release. Use ' + 'React.createContext() with static contextType instead.\n\n' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
      }

      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  }

  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

  {
    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        instance = new ctor(props, context); // eslint-disable-line no-new
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
  }

  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentNameFromType(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentNameFromType(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  if (instance.state !== oldState) {
    {
      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = {};
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentNameFromType(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictLegacyMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    var fiberFlags = Update;

    {
      fiberFlags |= LayoutStatic;
    }

    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
      fiberFlags |= MountLayoutDev;
    }

    workInProgress.flags |= fiberFlags;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      var fiberFlags = Update;

      {
        fiberFlags |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }

      workInProgress.flags |= fiberFlags;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
    }

    if (typeof instance.componentDidMount === 'function') {
      var _fiberFlags = Update;

      {
        _fiberFlags |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        _fiberFlags |= MountLayoutDev;
      }

      workInProgress.flags |= _fiberFlags;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      var _fiberFlags2 = Update;

      {
        _fiberFlags2 |= LayoutStatic;
      }

      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
        _fiberFlags2 |= MountLayoutDev;
      }

      workInProgress.flags |= _fiberFlags2;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var unresolvedOldProps = workInProgress.memoizedProps;
  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
  instance.props = oldProps;
  var unresolvedNewProps = workInProgress.pendingProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
  // both before and after `shouldComponentUpdate` has been called. Not ideal,
  // but I'm loath to refactor this function. This only happens for memoized
  // components so it's not that common.
  enableLazyContextPropagation   ;

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.flags |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.flags |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

function createCapturedValueAtFiber(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source),
    digest: null
  };
}
function createCapturedValue(value, digest, stack) {
  return {
    value: value,
    source: null,
    stack: stack != null ? stack : null,
    digest: digest != null ? digest : null
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(boundary, errorInfo) {
  return true;
}

function logCapturedError(boundary, errorInfo) {
  try {
    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
    // This enables renderers like ReactNative to better manage redbox behavior.

    if (logError === false) {
      return;
    }

    var error = errorInfo.value;

    if (true) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;
      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
      // `preventDefault()` in window `error` handler.
      // We record this information as an expando on the error.

      if (error != null && error._suppressLogging) {
        if (boundary.tag === ClassComponent) {
          // The error is recoverable and was silenced.
          // Ignore it and don't print the stack addendum.
          // This is handy for testing error boundaries without noise.
          return;
        } // The error is fatal. Since the silencing might have
        // been accidental, we'll surface it anyway.
        // However, the browser would have silenced the original error
        // so we'll print it first, and then print the stack addendum.


        console['error'](error); // Don't transform to our wrapper
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
      }

      var componentName = source ? getComponentNameFromFiber(source) : null;
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
      var errorBoundaryMessage;

      if (boundary.tag === HostRoot) {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
      } else {
        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      }

      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
      // We don't include the original error message and JS stack because the browser
      // has already printed it. Even if the application swallows the error, it is still
      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

      console['error'](combinedMessage); // Don't transform to our wrapper
    } else {}
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logCapturedError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      return getDerivedStateFromError(error$1);
    };

    update.callback = function () {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      logCapturedError(fiber, errorInfo);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      logCapturedError(fiber, errorInfo);

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (!includesSomeLane(fiber.lanes, SyncLane)) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
          }
        }
      }
    };
  }

  return update;
}

function attachPingListener(root, wakeable, lanes) {
  // Attach a ping listener
  //
  // The data might resolve before we have a chance to commit the fallback. Or,
  // in the case of a refresh, we'll never commit a fallback. So we need to
  // attach a listener now. When it resolves ("pings"), we can decide whether to
  // try rendering the tree again.
  //
  // Only attach a listener if one does not already exist for the lanes
  // we're currently rendering (which acts like a "thread ID" here).
  //
  // We only need to do this in concurrent mode. Legacy Suspense always
  // commits fallbacks synchronously, so there are no pings.
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(wakeable, threadIDs);
  } else {
    threadIDs = pingCache.get(wakeable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    }
  }

  if (!threadIDs.has(lanes)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(lanes);
    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

    {
      if (isDevToolsPresent) {
        // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, lanes);
      }
    }

    wakeable.then(ping, ping);
  }
}

function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
  // Retry listener
  //
  // If the fallback does commit, we need to attach a different type of
  // listener. This one schedules an update on the Suspense boundary to turn
  // the fallback state off.
  //
  // Stash the wakeable on the boundary fiber so we can access it in the
  // commit phase.
  //
  // When the wakeable resolves, we'll attempt to render the boundary
  // again ("retry").
  var wakeables = suspenseBoundary.updateQueue;

  if (wakeables === null) {
    var updateQueue = new Set();
    updateQueue.add(wakeable);
    suspenseBoundary.updateQueue = updateQueue;
  } else {
    wakeables.add(wakeable);
  }
}

function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
  // A legacy mode Suspense quirk, only relevant to hook components.


  var tag = sourceFiber.tag;

  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
    var currentSource = sourceFiber.alternate;

    if (currentSource) {
      sourceFiber.updateQueue = currentSource.updateQueue;
      sourceFiber.memoizedState = currentSource.memoizedState;
      sourceFiber.lanes = currentSource.lanes;
    } else {
      sourceFiber.updateQueue = null;
      sourceFiber.memoizedState = null;
    }
  }
}

function getNearestSuspenseBoundaryToCapture(returnFiber) {
  var node = returnFiber;

  do {
    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
      return node;
    } // This boundary already captured during this render. Continue to the next
    // boundary.


    node = node.return;
  } while (node !== null);

  return null;
}

function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
  // This marks a Suspense boundary so that when we're unwinding the stack,
  // it captures the suspended "exception" and does a second (fallback) pass.
  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
    // Legacy Mode Suspense
    //
    // If the boundary is in legacy mode, we should *not*
    // suspend the commit. Pretend as if the suspended component rendered
    // null and keep rendering. When the Suspense boundary completes,
    // we'll do a second pass to render the fallback.
    if (suspenseBoundary === returnFiber) {
      // Special case where we suspended while reconciling the children of
      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
      // when a React.lazy component is a direct child of a
      // Suspense boundary.
      //
      // Suspense boundaries are implemented as multiple fibers, but they
      // are a single conceptual unit. The legacy mode behavior where we
      // pretend the suspended fiber committed as `null` won't work,
      // because in this case the "suspended" fiber is the inner
      // Offscreen wrapper.
      //
      // Because the contents of the boundary haven't started rendering
      // yet (i.e. nothing in the tree has partially rendered) we can
      // switch to the regular, concurrent mode behavior: mark the
      // boundary with ShouldCapture and enter the unwind phase.
      suspenseBoundary.flags |= ShouldCapture;
    } else {
      suspenseBoundary.flags |= DidCapture;
      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
      // But we shouldn't call any lifecycle methods or callbacks. Remove
      // all lifecycle effect tags.

      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

      if (sourceFiber.tag === ClassComponent) {
        var currentSourceFiber = sourceFiber.alternate;

        if (currentSourceFiber === null) {
          // This is a new mount. Change the tag so it's not mistaken for a
          // completed class component. For example, we should not call
          // componentWillUnmount if it is deleted.
          sourceFiber.tag = IncompleteClassComponent;
        } else {
          // When we try rendering again, we should not reuse the current fiber,
          // since it's known to be in an inconsistent state. Use a force update to
          // prevent a bail out.
          var update = createUpdate(NoTimestamp, SyncLane);
          update.tag = ForceUpdate;
          enqueueUpdate(sourceFiber, update, SyncLane);
        }
      } // The source fiber did not complete. Mark it with Sync priority to
      // indicate that it still has pending work.


      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
    }

    return suspenseBoundary;
  } // Confirmed that the boundary is in a concurrent mode tree. Continue
  // with the normal suspend path.
  //
  // After this we'll use a set of heuristics to determine whether this
  // render pass will run to completion or restart or "suspend" the commit.
  // The actual logic for this is spread out in different places.
  //
  // This first principle is that if we're going to suspend when we complete
  // a root, then we should also restart if we get an update or ping that
  // might unsuspend it, and vice versa. The only reason to suspend is
  // because you think you might want to restart before committing. However,
  // it doesn't make sense to restart only while in the period we're suspended.
  //
  // Restarting too aggressively is also not good because it starves out any
  // intermediate loading state. So we use heuristics to determine when.
  // Suspense Heuristics
  //
  // If nothing threw a Promise or all the same fallbacks are already showing,
  // then don't suspend/restart.
  //
  // If this is an initial render of a new tree of Suspense boundaries and
  // those trigger a fallback, then don't suspend/restart. We want to ensure
  // that we can show the initial loading state as quickly as possible.
  //
  // If we hit a "Delayed" case, such as when we'd switch from content back into
  // a fallback, then we should always suspend/restart. Transitions apply
  // to this case. If none is defined, JND is used instead.
  //
  // If we're already showing a fallback and it gets "retried", allowing us to show
  // another level, but there's still an inner boundary that would show a fallback,
  // then we suspend/restart for 500ms since the last time we showed a fallback
  // anywhere in the tree. This effectively throttles progressive loading into a
  // consistent train of commits. This also gives us an opportunity to restart to
  // get to the completed state slightly earlier.
  //
  // If there's ambiguity due to batching it's resolved in preference of:
  // 1) "delayed", 2) "initial render", 3) "retry".
  //
  // We want to ensure that a "busy" state doesn't get force committed. We want to
  // ensure that new initial loading states can commit as soon as possible.


  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
  // the begin phase to prevent an early bailout.

  suspenseBoundary.lanes = rootRenderLanes;
  return suspenseBoundary;
}

function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
  // The source fiber did not complete.
  sourceFiber.flags |= Incomplete;

  {
    if (isDevToolsPresent) {
      // If we have pending work still, restore the original updaters
      restorePendingUpdaters(root, rootRenderLanes);
    }
  }

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a wakeable. The component suspended.
    var wakeable = value;
    resetSuspendedComponent(sourceFiber);

    {
      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
        markDidThrowWhileHydratingDEV();
      }
    }


    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

    if (suspenseBoundary !== null) {
      suspenseBoundary.flags &= ~ForceClientRender;
      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
      // commits fallbacks synchronously, so there are no pings.

      if (suspenseBoundary.mode & ConcurrentMode) {
        attachPingListener(root, wakeable, rootRenderLanes);
      }

      attachRetryListener(suspenseBoundary, root, wakeable);
      return;
    } else {
      // No boundary was found. Unless this is a sync update, this is OK.
      // We can suspend and wait for more data to arrive.
      if (!includesSyncLane(rootRenderLanes)) {
        // This is not a sync update. Suspend. Since we're not activating a
        // Suspense boundary, this will unwind all the way to the root without
        // performing a second pass to render a fallback. (This is arguably how
        // refresh transitions should work, too, since we're not going to commit
        // the fallbacks anyway.)
        //
        // This case also applies to initial hydration.
        attachPingListener(root, wakeable, rootRenderLanes);
        renderDidSuspendDelayIfPossible();
        return;
      } // This is a sync/discrete update. We treat this case like an error
      // because discrete renders are expected to produce a complete tree
      // synchronously to maintain consistency with external state.


      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
      // The error will be caught by the nearest suspense boundary.

      value = uncaughtSuspenseError;
    }
  } else {
    // This is a regular error, not a Suspense wakeable.
    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
      markDidThrowWhileHydratingDEV();

      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
      // discarding the dehydrated content and switching to a client render.
      // Instead of surfacing the error, find the nearest Suspense boundary
      // and render it again without hydration.


      if (_suspenseBoundary !== null) {
        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
          // Set a flag to indicate that we should try rendering the normal
          // children again, not the fallback.
          _suspenseBoundary.flags |= ForceClientRender;
        }

        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
        // still log it so it can be fixed.

        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
        return;
      }
    }
  }

  value = createCapturedValueAtFiber(value, sourceFiber);
  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.

  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.flags |= ShouldCapture;
          var lane = pickArbitraryLane(rootRenderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
          enqueueCapturedUpdate(workInProgress, update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.flags |= ShouldCapture;

          var _lane = pickArbitraryLane(rootRenderLanes);

          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function getSuspendedCache() {
  {
    return null;
  } // This function is called when a Suspense boundary suspends. It returns the
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;
var didWarnAboutDefaultPropsOnFunctionComponent;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
  didWarnAboutDefaultPropsOnFunctionComponent = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  var hasId;
  prepareToReadContext(workInProgress, renderLanes);

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
    hasId = checkDidRenderIdHook();

    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  if (getIsHydrating() && hasId) {
    pushMaterializedTreeId(workInProgress);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(type));
      }

      if ( Component.defaultProps !== undefined) {
        var componentName = getComponentNameFromType(type) || 'Unknown';

        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
          error('%s: Support for defaultProps will be removed from memo components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
        }
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentNameFromType(_type));
    }
  }

  var currentChild = current.child; // This is always exactly one child

  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

  if (!hasScheduledUpdateOrContext) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        var lazyComponent = outerMemoType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;

        try {
          outerMemoType = init(payload);
        } catch (x) {
          outerMemoType = null;
        } // Inner propTypes will be validated in the function component path.


        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

        if (outerPropTypes) {
          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
          'prop', getComponentNameFromType(outerMemoType));
        }
      }
    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
      // would during a normal fiber bailout.
      //
      // We don't have strong guarantees that the props object is referentially
      // equal during updates where we can't bail out anyway — like if the props
      // are shallowly equal, but there's a local state or context update in the
      // same batch.
      //
      // However, as a principle, we should aim to make the behavior consistent
      // across different ways of memoizing a component. For example, React.memo
      // has a different internal Fiber layout if you pass a normal function
      // component (SimpleMemoComponent) versus if you pass a different type
      // like forwardRef (MemoComponent). But this is an implementation detail.
      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
      // affect whether the props object is reused during a bailout.

      workInProgress.pendingProps = nextProps = prevProps;

      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        // The pending lanes were cleared at the beginning of beginWork. We're
        // about to bail out, but there might be other lanes that weren't
        // included in the current render. Usually, the priority level of the
        // remaining updates is accumulated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.lanes = current.lanes;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}

function updateOffscreenComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  var prevState = current !== null ? current.memoizedState : null;

  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
    // Rendering a hidden tree.
    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      // In legacy sync mode, don't defer the subtree. Render it now.
      // TODO: Consider how Offscreen should work with transitions in the future
      var nextState = {
        baseLanes: NoLanes,
        cachePool: null,
        transitions: null
      };
      workInProgress.memoizedState = nextState;

      pushRenderLanes(workInProgress, renderLanes);
    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
      // and resume this tree later.

      var nextBaseLanes;

      if (prevState !== null) {
        var prevBaseLanes = prevState.baseLanes;
        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
      } else {
        nextBaseLanes = renderLanes;
      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
      var _nextState = {
        baseLanes: nextBaseLanes,
        cachePool: spawnedCachePool,
        transitions: null
      };
      workInProgress.memoizedState = _nextState;
      workInProgress.updateQueue = null;
      // to avoid a push/pop misalignment.


      pushRenderLanes(workInProgress, nextBaseLanes);

      return null;
    } else {
      // This is the second render. The surrounding visible content has already
      // committed. Now we resume rendering the hidden tree.
      // Rendering at offscreen, so we can clear the base lanes.
      var _nextState2 = {
        baseLanes: NoLanes,
        cachePool: null,
        transitions: null
      };
      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

      pushRenderLanes(workInProgress, subtreeRenderLanes);
    }
  } else {
    // Rendering a visible tree.
    var _subtreeRenderLanes;

    if (prevState !== null) {
      // We're going from hidden -> visible.
      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

      workInProgress.memoizedState = null;
    } else {
      // We weren't previously hidden, and we still aren't, so there's nothing
      // special to do. Need to push to the stack regardless, though, to avoid
      // a push/pop misalignment.
      _subtreeRenderLanes = renderLanes;
    }

    pushRenderLanes(workInProgress, _subtreeRenderLanes);
  }

  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
} // Note: These happen to have identical begin phases, for now. We shouldn't hold

function updateFragment(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderLanes) {
  {
    workInProgress.flags |= Update;

    {
      // Reset effect durations for the next eventual effect phase.
      // These are reset during render to allow the DevTools commit hook a chance to read them,
      var stateNode = workInProgress.stateNode;
      stateNode.effectDuration = 0;
      stateNode.passiveEffectDuration = 0;
    }
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.flags |= Ref;

    {
      workInProgress.flags |= RefStatic;
    }
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  var hasId;
  prepareToReadContext(workInProgress, renderLanes);

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    hasId = checkDidRenderIdHook();

    if ( workInProgress.mode & StrictLegacyMode) {
      setIsStrictModeForDevtools(true);

      try {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }

    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  if (getIsHydrating() && hasId) {
    pushMaterializedTreeId(workInProgress);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    // This is used by DevTools to force a boundary to error.
    switch (shouldError(workInProgress)) {
      case false:
        {
          var _instance = workInProgress.stateNode;
          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
          // Is there a better way to do this?

          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
          var state = tempInstance.state;

          _instance.updater.enqueueSetState(_instance, state, null);

          break;
        }

      case true:
        {
          workInProgress.flags |= DidCapture;
          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

          var error$1 = new Error('Simulated error coming from DevTools');
          var lane = pickArbitraryLane(renderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
          enqueueCapturedUpdate(workInProgress, update);
          break;
        }
    }

    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentNameFromType(Component));
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

  {
    var inst = workInProgress.stateNode;

    if (shouldUpdate && inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      markComponentRenderStarted(workInProgress);
    }

    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          instance.render();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }

      setIsRendering(false);
    }

    {
      markComponentRenderStopped();
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderLanes) {
  pushHostRootContext(workInProgress);

  if (current === null) {
    throw new Error('Should have a current fiber. This is a bug in React.');
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState.element;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
  var nextState = workInProgress.memoizedState;
  var root = workInProgress.stateNode;
  // being called "element".


  var nextChildren = nextState.element;

  if ( prevState.isDehydrated) {
    // This is a hydration root whose shell has not yet hydrated. We should
    // attempt to hydrate.
    // Flip isDehydrated to false to indicate that when this render
    // finishes, the root will no longer be dehydrated.
    var overrideState = {
      element: nextChildren,
      isDehydrated: false,
      cache: nextState.cache,
      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
      transitions: nextState.transitions
    };
    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
    // have reducer functions so it doesn't need rebasing.

    updateQueue.baseState = overrideState;
    workInProgress.memoizedState = overrideState;

    if (workInProgress.flags & ForceClientRender) {
      // Something errored during a previous attempt to hydrate the shell, so we
      // forced a client render.
      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
    } else if (nextChildren !== prevChildren) {
      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
    } else {
      // The outermost shell has not hydrated yet. Start hydrating.
      enterHydrationState(workInProgress);

      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
      workInProgress.child = child;
      var node = child;

      while (node) {
        // Mark each child as hydrating. This is a fast path to know whether this
        // tree is part of a hydrating tree. This is used to determine if a child
        // node has fully mounted yet, and for scheduling event replaying.
        // Conceptually this is similar to Placement in that a new subtree is
        // inserted into the React tree here. It just happens to not need DOM
        // mutations because it already exists.
        node.flags = node.flags & ~Placement | Hydrating;
        node = node.sibling;
      }
    }
  } else {
    // Root is not dehydrated. Either this is a client-only root, or it
    // already hydrated.
    resetHydrationState();

    if (nextChildren === prevChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
  // Revert to client rendering.
  resetHydrationState();
  queueHydrationError(recoverableError);
  workInProgress.flags |= ForceClientRender;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderLanes) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.flags |= ContentReset;
  }

  markRef(current, workInProgress);
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
  var props = workInProgress.pendingProps;
  var lazyComponent = elementType;
  var payload = lazyComponent._payload;
  var init = lazyComponent._init;
  var Component = init(payload); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentNameFromType(Component));
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        renderLanes);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderLanes);
  var value;
  var hasId;

  {
    markComponentRenderStarted(workInProgress);
  }

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictLegacyMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
    hasId = checkDidRenderIdHook();
    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  {
    // Support for module components is deprecated and is removed behind a flag.
    // Whether or not it would crash later, we want to show a good message in DEV first.
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      var _componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    }
  }

  if ( // Run these checks in production only if the flag is off.
  // Eventually we'll delete this branch altogether.
   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName2]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

        didWarnAboutModulePatternComponent[_componentName2] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderLanes);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(true);

        try {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
          hasId = checkDidRenderIdHook();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
    }

    if (getIsHydrating() && hasId) {
      pushMaterializedTreeId(workInProgress);
    }

    reconcileChildren(null, workInProgress, value, renderLanes);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if ( Component.defaultProps !== undefined) {
      var componentName = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
        error('%s: Function components do not support contextType.', _componentName4);

        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  treeContext: null,
  retryLane: NoLane
};

function mountSuspenseOffscreenState(renderLanes) {
  return {
    baseLanes: renderLanes,
    cachePool: getSuspendedCache(),
    transitions: null
  };
}

function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
  var cachePool = null;

  return {
    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
    cachePool: cachePool,
    transitions: prevOffscreenState.transitions
  };
} // TODO: Probably should inline this back


function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
  // If we're already showing a fallback, there are cases where we need to
  // remain on that fallback regardless of whether the content has resolved.
  // For example, SuspenseList coordinates when nested content appears.
  if (current !== null) {
    var suspenseState = current.memoizedState;

    if (suspenseState === null) {
      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
      // is true. More precise name might be "ForceRemainSuspenseFallback".
      // Note: This is a factoring smell. Can't remain on a fallback if there's
      // no fallback to remain on.
      return false;
    }
  } // Not currently showing content. Consult the Suspense context.


  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
}

function getRemainingWorkInPrimaryTree(current, renderLanes) {
  // TODO: Should not remove render lanes that were pinged during this render
  return removeLanes(current.childLanes, renderLanes);
}

function updateSuspenseComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.flags |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var showFallback = false;
  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    showFallback = true;
    workInProgress.flags &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
      {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
  // boundary's children. This involves some custom reconciliation logic. Two
  // main reasons this is so complicated.
  //
  // First, Legacy Mode has different semantics for backwards compatibility. The
  // primary tree will commit in an inconsistent state, so when we do the
  // second pass to render the fallback, we do some exceedingly, uh, clever
  // hacks to make that not totally break. Like transferring effects and
  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
  // because we bailout on the primary tree completely and leave it in its old
  // state, no effects. Same as what we do for Offscreen (except that
  // Offscreen doesn't have the first render pass).
  //
  // Second is hydration. During hydration, the Suspense fiber has a slightly
  // different layout, where the child points to a dehydrated fragment, which
  // contains the DOM rendered by the server.
  //
  // Third, even if you set all that aside, Suspense is like error boundaries in
  // that we first we try to render one tree, and if that fails, we render again
  // and switch to a different tree. Like a try/catch block. So we have to track
  // which branch we're currently rendering. Ideally we would model this using
  // a stack.

  if (current === null) {
    // Initial mount
    // Special path for hydration
    // If we're currently hydrating, try to hydrate this boundary.
    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

    var suspenseState = workInProgress.memoizedState;

    if (suspenseState !== null) {
      var dehydrated = suspenseState.dehydrated;

      if (dehydrated !== null) {
        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
      }
    }

    var nextPrimaryChildren = nextProps.children;
    var nextFallbackChildren = nextProps.fallback;

    if (showFallback) {
      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var primaryChildFragment = workInProgress.child;
      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;

      return fallbackFragment;
    } else {
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
  } else {
    // This is an update.
    // Special path for hydration
    var prevState = current.memoizedState;

    if (prevState !== null) {
      var _dehydrated = prevState.dehydrated;

      if (_dehydrated !== null) {
        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
      }
    }

    if (showFallback) {
      var _nextFallbackChildren = nextProps.fallback;
      var _nextPrimaryChildren = nextProps.children;
      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
      var _primaryChildFragment2 = workInProgress.child;
      var prevOffscreenState = current.child.memoizedState;
      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackChildFragment;
    } else {
      var _nextPrimaryChildren2 = nextProps.children;

      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

      workInProgress.memoizedState = null;
      return _primaryChildFragment3;
    }
  }
}

function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
  var mode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
  primaryChildFragment.return = workInProgress;
  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var progressedPrimaryFragment = workInProgress.child;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;
  var fallbackChildFragment;

  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
    // In legacy mode, we commit the primary tree as if it successfully
    // completed, even though it's in an inconsistent state.
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = 0;
      primaryChildFragment.treeBaseDuration = 0;
    }

    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  } else {
    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  }

  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
  // this wrapper function to constrain it.
  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
}

function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
  // The props argument to `createWorkInProgress` is `any` typed, so we use this
  // wrapper function to constrain it.
  return createWorkInProgress(current, offscreenProps);
}

function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
    mode: 'visible',
    children: primaryChildren
  });

  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    primaryChildFragment.lanes = renderLanes;
  }

  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = null;

  if (currentFallbackChildFragment !== null) {
    // Delete the fallback child fragment
    var deletions = workInProgress.deletions;

    if (deletions === null) {
      workInProgress.deletions = [currentFallbackChildFragment];
      workInProgress.flags |= ChildDeletion;
    } else {
      deletions.push(currentFallbackChildFragment);
    }
  }

  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;

  if ( // In legacy mode, we commit the primary tree as if it successfully
  // completed, even though it's in an inconsistent state.
  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
  // already cloned. In legacy mode, the only case where this isn't true is
  // when DevTools forces us to display a fallback; we skip the first render
  // pass entirely and go straight to rendering the fallback. (In Concurrent
  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
  // only codepath.)
  workInProgress.child !== currentPrimaryChildFragment) {
    var progressedPrimaryFragment = workInProgress.child;
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
    } // The fallback fiber was added as a deletion during the first pass.
    // However, since we're going to remain on the fallback, we no longer want
    // to delete it.


    workInProgress.deletions = null;
  } else {
    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
    // (We don't do this in legacy mode, because in legacy mode we don't re-use
    // the current tree; see previous branch.)

    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
  }

  var fallbackChildFragment;

  if (currentFallbackChildFragment !== null) {
    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
  } else {
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
    // mounted but this is a new fiber.

    fallbackChildFragment.flags |= Placement;
  }

  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
  // Falling back to client rendering. Because this has performance
  // implications, it's considered a recoverable error, even though the user
  // likely won't observe anything wrong with the UI.
  //
  // The error is passed in as an argument to enforce that every caller provide
  // a custom message, or explicitly opt out (currently the only path that opts
  // out is legacy mode; every concurrent path provides an error).
  if (recoverableError !== null) {
    queueHydrationError(recoverableError);
  } // This will add the old fiber to the deletion list


  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

  var nextProps = workInProgress.pendingProps;
  var primaryChildren = nextProps.children;
  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
  // mounted but this is a new fiber.

  primaryChildFragment.flags |= Placement;
  workInProgress.memoizedState = null;
  return primaryChildFragment;
}

function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var fiberMode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
  // boundary) already mounted but this is a new fiber.

  fallbackChildFragment.flags |= Placement;
  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;

  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
    // We will have dropped the effect list which contains the
    // deletion. We need to reconcile to delete the current child.
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
  }

  return fallbackChildFragment;
}

function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
  // During the first pass, we'll bail out and not drill into the children.
  // Instead, we'll leave the content in place and try to hydrate it later.
  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    {
      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
    }

    workInProgress.lanes = laneToLanes(SyncLane);
  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This is a client-only boundary. Since we won't get any content from the server
    // for this, we need to schedule that at a higher priority based on when it would
    // have timed out. In theory we could render it in this pass but it would have the
    // wrong priority associated with it and will prevent hydration of parent path.
    // Instead, we'll leave work left on it to render it in a separate commit.
    // TODO This time should be the time at which the server rendered response that is
    // a parent to this boundary was displayed. However, since we currently don't have
    // a protocol to transfer that time, we'll just estimate it by using the current
    // time. This will mean that Suspense timeouts are slightly shifted to later than
    // they should be.
    // Schedule a normal pri update to render this content.
    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
  } else {
    // We'll continue hydrating the rest at offscreen priority since we'll already
    // be showing the right content coming from the server, it is no rush.
    workInProgress.lanes = laneToLanes(OffscreenLane);
  }

  return null;
}

function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
  if (!didSuspend) {
    // This is the first render pass. Attempt to hydrate.
    // We should never be hydrating at this point because it is the first pass,
    // but after we've already committed once.
    warnIfHydrating();

    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
      // required — every concurrent mode path that causes hydration to
      // de-opt to client rendering should have an error message.
      null);
    }

    if (isSuspenseInstanceFallback(suspenseInstance)) {
      // This boundary is in a permanent fallback state. In this case, we'll never
      // get an update and we'll never be able to hydrate the final content. Let's just try the
      // client side render instead.
      var digest, message, stack;

      {
        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

        digest = _getSuspenseInstanceF.digest;
        message = _getSuspenseInstanceF.message;
        stack = _getSuspenseInstanceF.stack;
      }

      var error;

      if (message) {
        // eslint-disable-next-line react-internal/prod-error-codes
        error = new Error(message);
      } else {
        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
      }

      var capturedValue = createCapturedValue(error, digest, stack);
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
    }
    // any context has changed, we need to treat is as if the input might have changed.


    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

    if (didReceiveUpdate || hasContextChanged) {
      // This boundary has changed since the first render. This means that we are now unable to
      // hydrate it. We might still be able to hydrate it using a higher priority lane.
      var root = getWorkInProgressRoot();

      if (root !== null) {
        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
          // Intentionally mutating since this render will get interrupted. This
          // is one of the very rare times where we mutate the current tree
          // during the render phase.
          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

          var eventTime = NoTimestamp;
          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
        }
      } // If we have scheduled higher pri work above, this will probably just abort the render
      // since we now have higher priority work, but in case it doesn't, we need to prepare to
      // render something, if we time out. Even if that requires us to delete everything and
      // skip hydration.
      // Delay having to do this as long as the suspense timeout allows us.


      renderDidSuspendDelayIfPossible();

      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
    } else if (isSuspenseInstancePending(suspenseInstance)) {
      // This component is still pending more data from the server, so we can't hydrate its
      // content. We treat it as if this component suspended itself. It might seem as if
      // we could just try to render it client-side instead. However, this will perform a
      // lot of unnecessary work and is unlikely to complete since it often will suspend
      // on missing data anyway. Additionally, the server might be able to render more
      // than we can on the client yet. In that case we'd end up with more fallback states
      // on the client than if we just leave it alone. If the server times out or errors
      // these should update this boundary to the permanent Fallback state instead.
      // Mark it as having captured (i.e. suspended).
      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
      registerSuspenseInstanceRetry(suspenseInstance, retry);
      return null;
    } else {
      // This is the first attempt.
      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.

      primaryChildFragment.flags |= Hydrating;
      return primaryChildFragment;
    }
  } else {
    // This is the second render pass. We already attempted to hydrated, but
    // something either suspended or errored.
    if (workInProgress.flags & ForceClientRender) {
      // Something errored during hydration. Try again without hydrating.
      workInProgress.flags &= ~ForceClientRender;

      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
    } else if (workInProgress.memoizedState !== null) {
      // Something suspended and we should still be in dehydrated mode.
      // Leave the existing child in place.
      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
      // but the normal suspense pass doesn't.

      workInProgress.flags |= DidCapture;
      return null;
    } else {
      // Suspended but we should no longer be in dehydrated mode.
      // Therefore we now have to render the fallback.
      var nextPrimaryChildren = nextProps.children;
      var nextFallbackChildren = nextProps.fallback;
      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var _primaryChildFragment4 = workInProgress.child;
      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackChildFragment;
    }
  }
}

function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
  }

  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isAnArray = isArray(childSlot);
    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

    if (isAnArray || isIterable) {
      var type = isAnArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailMode = tailMode;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.flags |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    // In legacy mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderLanes) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

function updateContextProvider(current, workInProgress, renderLanes) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    if (!('value' in newProps)) {
      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
      }
    }

    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
    }
  }

  pushProvider(workInProgress, context, newValue);

  {
    if (oldProps !== null) {
      var oldValue = oldProps.value;

      if (objectIs(oldValue, newValue)) {
        // No change. Bailout early if children are the same.
        if (oldProps.children === newProps.children && !hasContextChanged()) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      } else {
        // The context value changed. Search for matching consumers and schedule
        // them to update.
        propagateContextChange(workInProgress, context, renderLanes);
      }
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderLanes) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderLanes);
  var newValue = readContext(context);

  {
    markComponentRenderStarted(workInProgress);
  }

  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  }

  {
    markComponentRenderStopped();
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
    if (current !== null) {
      // A lazy component only mounts if it suspended inside a non-
      // concurrent tree, in an inconsistent state. We want to treat it like
      // a new mount, even though an empty version of it already committed.
      // Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    }
  }
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    {
      return null;
    }
  } // This fiber doesn't have work, but its subtree does. Clone the child
  // fibers and continue.


  cloneChildFibers(current, workInProgress);
  return workInProgress.child;
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      // eslint-disable-next-line react-internal/prod-error-codes
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          // eslint-disable-next-line react-internal/prod-error-codes
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var deletions = returnFiber.deletions;

    if (deletions === null) {
      returnFiber.deletions = [current];
      returnFiber.flags |= ChildDeletion;
    } else {
      deletions.push(current);
    }

    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function checkScheduledUpdateOrContext(current, renderLanes) {
  // Before performing an early bailout, we must check if there are pending
  // updates or context.
  var updateLanes = current.lanes;

  if (includesSomeLane(updateLanes, renderLanes)) {
    return true;
  } // No pending update, but because context is propagated lazily, we need

  return false;
}

function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
  // This fiber does not have any pending work. Bailout without entering
  // the begin phase. There's still some bookkeeping we that needs to be done
  // in this optimized path, mostly pushing stuff onto the stack.
  switch (workInProgress.tag) {
    case HostRoot:
      pushHostRootContext(workInProgress);
      var root = workInProgress.stateNode;

      resetHydrationState();
      break;

    case HostComponent:
      pushHostContext(workInProgress);
      break;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          pushContextProvider(workInProgress);
        }

        break;
      }

    case HostPortal:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      break;

    case ContextProvider:
      {
        var newValue = workInProgress.memoizedProps.value;
        var context = workInProgress.type._context;
        pushProvider(workInProgress, context, newValue);
        break;
      }

    case Profiler:
      {
        // Profiler should only call onRender when one of its descendants actually rendered.
        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

        if (hasChildWork) {
          workInProgress.flags |= Update;
        }

        {
          // Reset effect durations for the next eventual effect phase.
          // These are reset during render to allow the DevTools commit hook a chance to read them,
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }

      break;

    case SuspenseComponent:
      {
        var state = workInProgress.memoizedState;

        if (state !== null) {
          if (state.dehydrated !== null) {
            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
            // been unsuspended it has committed as a resolved Suspense component.
            // If it needs to be retried, it should have work scheduled on it.

            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

            return null;
          } // If this boundary is currently timed out, we need to decide
          // whether to retry the primary children, or to skip over it and
          // go straight to the fallback. Check the priority of the primary
          // child fragment.


          var primaryChildFragment = workInProgress.child;
          var primaryChildLanes = primaryChildFragment.childLanes;

          if (includesSomeLane(renderLanes, primaryChildLanes)) {
            // The primary children have pending work. Use the normal path
            // to attempt to render the primary children again.
            return updateSuspenseComponent(current, workInProgress, renderLanes);
          } else {
            // The primary child fragment does not have pending work marked
            // on it
            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
            // priority. Bailout.

            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

            if (child !== null) {
              // The fallback children have pending work. Skip over the
              // primary children and work on the fallback.
              return child.sibling;
            } else {
              // Note: We can return `null` here because we already checked
              // whether there were nested context consumers, via the call to
              // `bailoutOnAlreadyFinishedWork` above.
              return null;
            }
          }
        } else {
          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
        }

        break;
      }

    case SuspenseListComponent:
      {
        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

        if (didSuspendBefore) {
          if (_hasChildWork) {
            // If something was in fallback state last time, and we have all the
            // same children then we're still in progressive loading state.
            // Something might get unblocked by state updates or retries in the
            // tree which will affect the tail. So we need to use the normal
            // path to compute the correct tail.
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
          } // If none of the children had any work, that means that none of
          // them got retried so they'll still be blocked in the same way
          // as before. We can fast bail out.


          workInProgress.flags |= DidCapture;
        } // If nothing suspended before and we're rendering the same children,
        // then the tail doesn't matter. Anything new that suspends will work
        // in the "together" mode, so we can continue from the state we had.


        var renderState = workInProgress.memoizedState;

        if (renderState !== null) {
          // Reset to the "together" mode in case we've started a different
          // update in the past but didn't complete it.
          renderState.rendering = null;
          renderState.tail = null;
          renderState.lastEffect = null;
        }

        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

        if (_hasChildWork) {
          break;
        } else {
          // If none of the children had any work, that means that none of
          // them got retried so they'll still be blocked in the same way
          // as before. We can fast bail out.
          return null;
        }
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        // Need to check if the tree still needs to be deferred. This is
        // almost identical to the logic used in the normal update path,
        // so we'll just enter that. The only difference is we'll bail out
        // at the next level instead of this one, because the child props
        // have not changed. Which is fine.
        // TODO: Probably should refactor `beginWork` to split the bailout
        // path from the normal path. I'm tempted to do a labeled break here
        // but I won't :)
        workInProgress.lanes = NoLanes;
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
  }

  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}

function beginWork(current, workInProgress, renderLanes) {
  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else {
      // Neither props nor legacy context changes. Check if there's a pending
      // update or context change.
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
      // may not be work scheduled on `current`, so we check for this flag.
      (workInProgress.flags & DidCapture) === NoFlags) {
        // No pending updates or context. Bail out now.
        didReceiveUpdate = false;
        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
      }

      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      } else {
        // An update was scheduled on this fiber, but there are no new props
        // nor legacy context. Set this to false. If an update queue or context
        // consumer produces a changed value, it will set this to true. Otherwise,
        // the component will assume the children have not changed and bail out.
        didReceiveUpdate = false;
      }
    }
  } else {
    didReceiveUpdate = false;

    if (getIsHydrating() && isForkedChild(workInProgress)) {
      // Check if this child belongs to a list of muliple children in
      // its parent.
      //
      // In a true multi-threaded implementation, we would render children on
      // parallel threads. This would represent the beginning of a new render
      // thread for this subtree.
      //
      // We only use this for id generation during hydration, which is why the
      // logic is located in this special branch.
      var slotIndex = workInProgress.index;
      var numberOfForks = getForksAtLevel();
      pushTreeId(workInProgress, numberOfForks, slotIndex);
    }
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.lanes = NoLanes;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
      }

    case FunctionComponent:
      {
        var Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
      }

    case ClassComponent:
      {
        var _Component = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderLanes);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderLanes);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderLanes);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderLanes);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderLanes);

    case Mode:
      return updateMode(current, workInProgress, renderLanes);

    case Profiler:
      return updateProfiler(current, workInProgress, renderLanes);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderLanes);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderLanes);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentNameFromType(_type2));
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      }

    case IncompleteClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
      {
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
  }

  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.flags |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.flags |= Ref;

  {
    workInProgress.flags |= RefStatic;
  }
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (current, workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (getIsHydrating()) {
    // If we're hydrating, we should consume as many items as we can
    // so we don't leave any behind.
    return;
  }

  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function bubbleProperties(completedWork) {
  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
  var newChildLanes = NoLanes;
  var subtreeFlags = NoFlags;

  if (!didBailout) {
    // Bubble up the earliest expiration time.
    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var actualDuration = completedWork.actualDuration;
      var treeBaseDuration = completedWork.selfBaseDuration;
      var child = completedWork.child;

      while (child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
        subtreeFlags |= child.subtreeFlags;
        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration. If
        // the fiber has not been cloned though, (meaning no work was done), then
        // this value will reflect the amount of time spent working on a previous
        // render. In that case it should not bubble. We determine whether it was
        // cloned by comparing the child pointer.

        actualDuration += child.actualDuration;
        treeBaseDuration += child.treeBaseDuration;
        child = child.sibling;
      }

      completedWork.actualDuration = actualDuration;
      completedWork.treeBaseDuration = treeBaseDuration;
    } else {
      var _child = completedWork.child;

      while (_child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
        subtreeFlags |= _child.subtreeFlags;
        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
        // smell because it assumes the commit phase is never concurrent with
        // the render phase. Will address during refactor to alternate model.

        _child.return = completedWork;
        _child = _child.sibling;
      }
    }

    completedWork.subtreeFlags |= subtreeFlags;
  } else {
    // Bubble up the earliest expiration time.
    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var _treeBaseDuration = completedWork.selfBaseDuration;
      var _child2 = completedWork.child;

      while (_child2 !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
        // so we should bubble those up even during a bailout. All the other
        // flags have a lifetime only of a single render + commit, so we should
        // ignore them.

        subtreeFlags |= _child2.subtreeFlags & StaticMask;
        subtreeFlags |= _child2.flags & StaticMask;
        _treeBaseDuration += _child2.treeBaseDuration;
        _child2 = _child2.sibling;
      }

      completedWork.treeBaseDuration = _treeBaseDuration;
    } else {
      var _child3 = completedWork.child;

      while (_child3 !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
        // so we should bubble those up even during a bailout. All the other
        // flags have a lifetime only of a single render + commit, so we should
        // ignore them.

        subtreeFlags |= _child3.subtreeFlags & StaticMask;
        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
        // smell because it assumes the commit phase is never concurrent with
        // the render phase. Will address during refactor to alternate model.

        _child3.return = completedWork;
        _child3 = _child3.sibling;
      }
    }

    completedWork.subtreeFlags |= subtreeFlags;
  }

  completedWork.childLanes = newChildLanes;
  return didBailout;
}

function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
    warnIfUnhydratedTailNodes(workInProgress);
    resetHydrationState();
    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
    return false;
  }

  var wasHydrated = popHydrationState(workInProgress);

  if (nextState !== null && nextState.dehydrated !== null) {
    // We might be inside a hydration state the first time we're picking up this
    // Suspense boundary, and also after we've reentered it for further hydration.
    if (current === null) {
      if (!wasHydrated) {
        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
      }

      prepareToHydrateHostSuspenseInstance(workInProgress);
      bubbleProperties(workInProgress);

      {
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          var isTimedOutSuspense = nextState !== null;

          if (isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var primaryChildFragment = workInProgress.child;

            if (primaryChildFragment !== null) {
              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
        }
      }

      return false;
    } else {
      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
      resetHydrationState();

      if ((workInProgress.flags & DidCapture) === NoFlags) {
        // This boundary did not suspend so it's now hydrated and unsuspended.
        workInProgress.memoizedState = null;
      } // If nothing suspended, we need to schedule an effect to mark this boundary
      // as having hydrated so events know that they're free to be invoked.
      // It's also a signal to replay events and the suspense callback.
      // If something suspended, schedule an effect to attach retry listeners.
      // So we might as well always mark this.


      workInProgress.flags |= Update;
      bubbleProperties(workInProgress);

      {
        if ((workInProgress.mode & ProfileMode) !== NoMode) {
          var _isTimedOutSuspense = nextState !== null;

          if (_isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var _primaryChildFragment = workInProgress.child;

            if (_primaryChildFragment !== null) {
              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
            }
          }
        }
      }

      return false;
    }
  } else {
    // Successfully completed this tree. If this was a forced client render,
    // there may have been recoverable errors during first hydration
    // attempt. If so, add them to a queue so we can log them in the
    // commit phase.
    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

    return true;
  }
}

function completeWork(current, workInProgress, renderLanes) {
  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.

  popTreeContext(workInProgress);

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      bubbleProperties(workInProgress);
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case HostRoot:
      {
        var fiberRoot = workInProgress.stateNode;
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          } else {
            if (current !== null) {
              var prevState = current.memoizedState;

              if ( // Check if this is a client root
              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (workInProgress.flags & ForceClientRender) !== NoFlags) {
                // Schedule an effect to clear this container at the start of the
                // next commit. This handles the case of React rendering into a
                // container with previous children. It's also safe to do for
                // updates too, because current.child would only be null if the
                // previous render was null (so the container would already
                // be empty).
                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                // recoverable errors during first hydration attempt. If so, add
                // them to a queue so we can log them in the commit phase.

                upgradeHydrationErrorsToRecoverable();
              }
            }
          }
        }

        updateHostContainer(current, workInProgress);
        bubbleProperties(workInProgress);

        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (workInProgress.stateNode === null) {
              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            } // This can happen when we abort work.


            bubbleProperties(workInProgress);
            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false);
            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.

            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (workInProgress.stateNode === null) {
              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
        // to its own fiber type so that we can add other kinds of hydration
        // boundaries that aren't associated with a Suspense tree. In anticipation
        // of such a refactor, all the hydration logic is contained in
        // this branch.

        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

          if (!fallthroughToNormalSuspensePath) {
            if (workInProgress.flags & ShouldCapture) {
              // Special case. There were remaining unhydrated nodes. We treat
              // this as a mismatch. Revert to client rendering.
              return workInProgress;
            } else {
              // Did not finish hydrating, either because this is the initial
              // render or because something suspended.
              return null;
            }
          } // Continue with the normal Suspense path.

        }

        if ((workInProgress.flags & DidCapture) !== NoFlags) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.lanes = renderLanes; // Do not reset the effect list.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          } // Don't bubble properties in this case.


          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = current !== null && current.memoizedState !== null;
        // a passive effect, which is when we process the transitions


        if (nextDidTimeout !== prevDidTimeout) {
          // an effect to toggle the subtree's visibility. When we switch from
          // fallback -> primary, the inner Offscreen fiber schedules this effect
          // as part of its normal complete phase. But when we switch from
          // primary -> fallback, the inner Offscreen fiber does not have a complete
          // phase. So we need to schedule its effect here.
          //
          // We also use this flag to connect/disconnect the effects, but the same
          // logic applies: when re-connecting, the Offscreen fiber's complete
          // phase will handle scheduling the effect. It's only when the fallback
          // is active that we have to do anything special.


          if (nextDidTimeout) {
            var _offscreenFiber2 = workInProgress.child;
            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
            // in the concurrent tree already suspended during this render.
            // This is a known bug.

            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
              // TODO: Move this back to throwException because this is too late
              // if this is a large tree which is common for initial loads. We
              // don't know if we should restart a render or not until we get
              // this marker, and this is too late.
              // If this render already had a ping or lower pri updates,
              // and this is the first time we know we're going to suspend we
              // should be able to immediately restart from within throwException.
              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                // If this was in an invisible tree or a new render, then showing
                // this boundary is ok.
                renderDidSuspend();
              } else {
                // Otherwise, we're going to have to hide content so we should
                // suspend for longer if possible.
                renderDidSuspendDelayIfPossible();
              }
            }
          }
        }

        var wakeables = workInProgress.updateQueue;

        if (wakeables !== null) {
          // Schedule an effect to attach a retry listener to the promise.
          // TODO: Move to passive phase
          workInProgress.flags |= Update;
        }

        bubbleProperties(workInProgress);

        {
          if ((workInProgress.mode & ProfileMode) !== NoMode) {
            if (nextDidTimeout) {
              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
              var primaryChildFragment = workInProgress.child;

              if (primaryChildFragment !== null) {
                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(current, workInProgress);

      if (current === null) {
        preparePortalMount(workInProgress.stateNode.containerInfo);
      }

      bubbleProperties(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      var context = workInProgress.type._context;
      popProvider(context, workInProgress);
      bubbleProperties(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          bubbleProperties(workInProgress);
          return null;
        }

        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.flags |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thenables. Instead, we'll transfer its thenables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThenables = suspended.updateQueue;

                  if (newThenables !== null) {
                    workInProgress.updateQueue = newThenables;
                    workInProgress.flags |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect flags before doing the second pass since that's now invalid.
                  // Reset the child fibers to their original state.


                  workInProgress.subtreeFlags = NoFlags;
                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }

            if (renderState.tail !== null && now() > getRenderTargetTime()) {
              // We have already passed our CPU deadline but we still have rows
              // left in the tail. We'll just give up further attempts to render
              // the main content and only render fallbacks.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThenables = _suspended.updateQueue;

              if (_newThenables !== null) {
                workInProgress.updateQueue = _newThenables;
                workInProgress.flags |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
              ) {
                  // We're done.
                  bubbleProperties(workInProgress);
                  return null;
                }
            } else if ( // The time it took to render last row is greater than the remaining
            // time we have to render. So rendering one more row would likely
            // exceed it.
            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          // Pop a row.
          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
          // Don't bubble properties in this case.

          return next;
        }

        bubbleProperties(workInProgress);
        return null;
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        popRenderLanes(workInProgress);
        var _nextState = workInProgress.memoizedState;
        var nextIsHidden = _nextState !== null;

        if (current !== null) {
          var _prevState = current.memoizedState;
          var prevIsHidden = _prevState !== null;

          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
          !enableLegacyHidden )) {
            workInProgress.flags |= Visibility;
          }
        }

        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
          bubbleProperties(workInProgress);
        } else {
          // Don't bubble properties for hidden children unless we're rendering
          // at offscreen priority.
          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
            bubbleProperties(workInProgress);

            {
              // Check if there was an insertion or update in the hidden subtree.
              // If so, we need to hide those nodes in the commit phase, so
              // schedule a visibility effect.
              if ( workInProgress.subtreeFlags & (Placement | Update)) {
                workInProgress.flags |= Visibility;
              }
            }
          }
        }
        return null;
      }

    case CacheComponent:
      {

        return null;
      }

    case TracingMarkerComponent:
      {

        return null;
      }
  }

  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
}

function unwindWork(current, workInProgress, renderLanes) {
  // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.
  popTreeContext(workInProgress);

  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var flags = workInProgress.flags;

        if (flags & ShouldCapture) {
          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        var root = workInProgress.stateNode;
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var _flags = workInProgress.flags;

        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
          // There was an error during render that wasn't captured by a suspense
          // boundary. Do a second pass on the root to unmount the children.
          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
          return workInProgress;
        } // We unwound to the root without completing it. Exit.


        return null;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var suspenseState = workInProgress.memoizedState;

        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          if (workInProgress.alternate === null) {
            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
          }

          resetHydrationState();
        }

        var _flags2 = workInProgress.flags;

        if (_flags2 & ShouldCapture) {
          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      var context = workInProgress.type._context;
      popProvider(context, workInProgress);
      return null;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(workInProgress);
      return null;

    case CacheComponent:

      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(current, interruptedWork, renderLanes) {
  // Note: This intentionally doesn't check if we're hydrating because comparing
  // to the current tree provider fiber is just as fast and less error-prone.
  // Ideally we would have a special version of the work loop only
  // for hydration.
  popTreeContext(interruptedWork);

  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        var root = interruptedWork.stateNode;
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        resetWorkInProgressVersions();
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      var context = interruptedWork.type._context;
      popProvider(context, interruptedWork);
      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(interruptedWork);
      break;
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
} // Used during the commit phase to track the state of the Offscreen component stack.
// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
// Only used when enableSuspenseLayoutEffectSemantics is enabled.


var offscreenSubtreeIsHidden = false;
var offscreenSubtreeWasHidden = false;
var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
var nextEffect = null; // Used for Profiling builds to track updaters.

var inProgressLanes = null;
var inProgressRoot = null;
function reportUncaughtErrorInDEV(error) {
  // Wrapping each small part of the commit phase into a guarded
  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
  // But we rely on it to surface errors to DEV tools like overlays
  // (https://github.com/facebook/react/issues/21712).
  // As a compromise, rethrow only caught errors in a guard.
  {
    invokeGuardedCallback(null, function () {
      throw error;
    });
    clearCaughtError();
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;

  if ( current.mode & ProfileMode) {
    try {
      startLayoutEffectTimer();
      instance.componentWillUnmount();
    } finally {
      recordLayoutEffectDuration(current);
    }
  } else {
    instance.componentWillUnmount();
  }
}; // Capture errors so they don't interrupt mounting.


function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
  try {
    commitHookEffectListMount(Layout, current);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
  try {
    callComponentWillUnmountWithTimer(current, instance);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt mounting.


function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
  try {
    instance.componentDidMount();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
} // Capture errors so they don't interrupt mounting.


function safelyAttachRef(current, nearestMountedAncestor) {
  try {
    commitAttachRef(current);
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}

function safelyDetachRef(current, nearestMountedAncestor) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      var retVal;

      try {
        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            retVal = ref(null);
          } finally {
            recordLayoutEffectDuration(current);
          }
        } else {
          retVal = ref(null);
        }
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }

      {
        if (typeof retVal === 'function') {
          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
  try {
    destroy();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}

var focusedInstanceHandle = null;
var shouldFireAfterActiveInstanceBlur = false;
function commitBeforeMutationEffects(root, firstChild) {
  focusedInstanceHandle = prepareForCommit(root.containerInfo);
  nextEffect = firstChild;
  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

  var shouldFire = shouldFireAfterActiveInstanceBlur;
  shouldFireAfterActiveInstanceBlur = false;
  focusedInstanceHandle = null;
  return shouldFire;
}

function commitBeforeMutationEffects_begin() {
  while (nextEffect !== null) {
    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

    var child = fiber.child;

    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitBeforeMutationEffects_complete();
    }
  }
}

function commitBeforeMutationEffects_complete() {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    setCurrentFiber(fiber);

    try {
      commitBeforeMutationEffectsOnFiber(fiber);
    } catch (error) {
      captureCommitPhaseError(fiber, fiber.return, error);
    }

    resetCurrentFiber();
    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitBeforeMutationEffectsOnFiber(finishedWork) {
  var current = finishedWork.alternate;
  var flags = finishedWork.flags;

  if ((flags & Snapshot) !== NoFlags) {
    setCurrentFiber(finishedWork);

    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          break;
        }

      case ClassComponent:
        {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
          }

          break;
        }

      case HostRoot:
        {
          {
            var root = finishedWork.stateNode;
            clearContainer(root.containerInfo);
          }

          break;
        }

      case HostComponent:
      case HostText:
      case HostPortal:
      case IncompleteClassComponent:
        // Nothing to do for these component types
        break;

      default:
        {
          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
        }
    }

    resetCurrentFiber();
  }
}

function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & flags) === flags) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          {
            if ((flags & Passive$1) !== NoFlags$1) {
              markComponentPassiveEffectUnmountStarted(finishedWork);
            } else if ((flags & Layout) !== NoFlags$1) {
              markComponentLayoutEffectUnmountStarted(finishedWork);
            }
          }

          {
            if ((flags & Insertion) !== NoFlags$1) {
              setIsRunningInsertionEffect(true);
            }
          }

          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

          {
            if ((flags & Insertion) !== NoFlags$1) {
              setIsRunningInsertionEffect(false);
            }
          }

          {
            if ((flags & Passive$1) !== NoFlags$1) {
              markComponentPassiveEffectUnmountStopped();
            } else if ((flags & Layout) !== NoFlags$1) {
              markComponentLayoutEffectUnmountStopped();
            }
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(flags, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & flags) === flags) {
        {
          if ((flags & Passive$1) !== NoFlags$1) {
            markComponentPassiveEffectMountStarted(finishedWork);
          } else if ((flags & Layout) !== NoFlags$1) {
            markComponentLayoutEffectMountStarted(finishedWork);
          }
        } // Mount


        var create = effect.create;

        {
          if ((flags & Insertion) !== NoFlags$1) {
            setIsRunningInsertionEffect(true);
          }
        }

        effect.destroy = create();

        {
          if ((flags & Insertion) !== NoFlags$1) {
            setIsRunningInsertionEffect(false);
          }
        }

        {
          if ((flags & Passive$1) !== NoFlags$1) {
            markComponentPassiveEffectMountStopped();
          } else if ((flags & Layout) !== NoFlags$1) {
            markComponentLayoutEffectMountStopped();
          }
        }

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var hookName = void 0;

            if ((effect.tag & Layout) !== NoFlags) {
              hookName = 'useLayoutEffect';
            } else if ((effect.tag & Insertion) !== NoFlags) {
              hookName = 'useInsertionEffect';
            } else {
              hookName = 'useEffect';
            }

            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveEffectDurations(finishedRoot, finishedWork) {
  {
    // Only Profilers with work in their subtree will have an Update effect scheduled.
    if ((finishedWork.flags & Update) !== NoFlags) {
      switch (finishedWork.tag) {
        case Profiler:
          {
            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
            var _finishedWork$memoize = finishedWork.memoizedProps,
                id = _finishedWork$memoize.id,
                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
            // It does not get reset until the start of the next commit phase.

            var commitTime = getCommitTime();
            var phase = finishedWork.alternate === null ? 'mount' : 'update';

            {
              if (isCurrentUpdateNested()) {
                phase = 'nested-update';
              }
            }

            if (typeof onPostCommit === 'function') {
              onPostCommit(id, phase, passiveEffectDuration, commitTime);
            } // Bubble times to the next nearest ancestor Profiler.
            // After we process that Profiler, we'll bubble further up.


            var parentFiber = finishedWork.return;

            outer: while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root = parentFiber.stateNode;
                  root.passiveEffectDuration += passiveEffectDuration;
                  break outer;

                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
                  break outer;
              }

              parentFiber = parentFiber.return;
            }

            break;
          }
      }
    }
  }
}

function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          if ( !offscreenSubtreeWasHidden) {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            if ( finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
            }
          }

          break;
        }

      case ClassComponent:
        {
          var instance = finishedWork.stateNode;

          if (finishedWork.flags & Update) {
            if (!offscreenSubtreeWasHidden) {
              if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                  }
                }

                if ( finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    instance.componentDidMount();
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                var prevState = current.memoizedState; // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                  }
                }

                if ( finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
          } // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.


          var updateQueue = finishedWork.updateQueue;

          if (updateQueue !== null) {
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
                }
              }
            } // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.


            commitUpdateQueue(finishedWork, updateQueue, instance);
          }

          break;
        }

      case HostRoot:
        {
          // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.
          var _updateQueue = finishedWork.updateQueue;

          if (_updateQueue !== null) {
            var _instance = null;

            if (finishedWork.child !== null) {
              switch (finishedWork.child.tag) {
                case HostComponent:
                  _instance = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case ClassComponent:
                  _instance = finishedWork.child.stateNode;
                  break;
              }
            }

            commitUpdateQueue(finishedWork, _updateQueue, _instance);
          }

          break;
        }

      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.

          if (current === null && finishedWork.flags & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props);
          }

          break;
        }

      case HostText:
        {
          // We have no life-cycles associated with text.
          break;
        }

      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          break;
        }

      case Profiler:
        {
          {
            var _finishedWork$memoize2 = finishedWork.memoizedProps,
                onCommit = _finishedWork$memoize2.onCommit,
                onRender = _finishedWork$memoize2.onRender;
            var effectDuration = finishedWork.stateNode.effectDuration;
            var commitTime = getCommitTime();
            var phase = current === null ? 'mount' : 'update';

            {
              if (isCurrentUpdateNested()) {
                phase = 'nested-update';
              }
            }

            if (typeof onRender === 'function') {
              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
            }

            {
              if (typeof onCommit === 'function') {
                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
              // because the effect is also where times bubble to parent Profilers.


              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
              // Do not reset these values until the next render so DevTools has a chance to read them first.

              var parentFiber = finishedWork.return;

              outer: while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root = parentFiber.stateNode;
                    root.effectDuration += effectDuration;
                    break outer;

                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += effectDuration;
                    break outer;
                }

                parentFiber = parentFiber.return;
              }
            }
          }

          break;
        }

      case SuspenseComponent:
        {
          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          break;
        }

      case SuspenseListComponent:
      case IncompleteClassComponent:
      case ScopeComponent:
      case OffscreenComponent:
      case LegacyHiddenComponent:
      case TracingMarkerComponent:
        {
          break;
        }

      default:
        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
    }
  }

  if ( !offscreenSubtreeWasHidden) {
    {
      if (finishedWork.flags & Ref) {
        commitAttachRef(finishedWork);
      }
    }
  }
}

function reappearLayoutEffectsOnFiber(node) {
  // Turn on layout effects in a tree that previously disappeared.
  // TODO (Offscreen) Check: flags & LayoutStatic
  switch (node.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( node.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            safelyCallCommitHookLayoutEffectListMount(node, node.return);
          } finally {
            recordLayoutEffectDuration(node);
          }
        } else {
          safelyCallCommitHookLayoutEffectListMount(node, node.return);
        }

        break;
      }

    case ClassComponent:
      {
        var instance = node.stateNode;

        if (typeof instance.componentDidMount === 'function') {
          safelyCallComponentDidMount(node, node.return, instance);
        }

        safelyAttachRef(node, node.return);
        break;
      }

    case HostComponent:
      {
        safelyAttachRef(node, node.return);
        break;
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  // Only hide or unhide the top-most host nodes.
  var hostSubtreeRoot = null;

  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        if (hostSubtreeRoot === null) {
          hostSubtreeRoot = node;

          try {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      } else if (node.tag === HostText) {
        if (hostSubtreeRoot === null) {
          try {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        if (hostSubtreeRoot === node) {
          hostSubtreeRoot = null;
        }

        node = node.return;
      }

      if (hostSubtreeRoot === node) {
        hostSubtreeRoot = null;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      var retVal;

      if ( finishedWork.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          retVal = ref(instanceToUse);
        } finally {
          recordLayoutEffectDuration(finishedWork);
        }
      } else {
        retVal = ref(instanceToUse);
      }

      {
        if (typeof retVal === 'function') {
          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
        }
      }
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function detachFiberMutation(fiber) {
  // Cut off the return pointer to disconnect it from the tree.
  // This enables us to detect and warn against state updates on an unmounted component.
  // It also prevents events from bubbling from within disconnected components.
  //
  // Ideally, we should also clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child.
  // This child itself will be GC:ed when the parent updates the next time.
  //
  // Note that we can't clear child or sibling pointers yet.
  // They're needed for passive effects and for findDOMNode.
  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
  //
  // Don't reset the alternate yet, either. We need that so we can detach the
  // alternate's fields in the passive phase. Clearing the return pointer is
  // sufficient for findDOMNode semantics.
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.return = null;
  }

  fiber.return = null;
}

function detachFiberAfterEffects(fiber) {
  var alternate = fiber.alternate;

  if (alternate !== null) {
    fiber.alternate = null;
    detachFiberAfterEffects(alternate);
  } // Note: Defensively using negation instead of < in case
  // `deletedTreeCleanUpLevel` is undefined.


  {
    // Clear cyclical Fiber fields. This level alone is designed to roughly
    // approximate the planned Fiber refactor. In that world, `setState` will be
    // bound to a special "instance" object instead of a Fiber. The Instance
    // object will not have any of these fields. It will only be connected to
    // the fiber tree via a single link at the root. So if this level alone is
    // sufficient to fix memory issues, that bodes well for our plans.
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
    // tree, which has its own pointers to children, parents, and siblings.
    // The other host nodes also point back to fibers, so we should detach that
    // one, too.

    if (fiber.tag === HostComponent) {
      var hostInstance = fiber.stateNode;

      if (hostInstance !== null) {
        detachDeletedInstance(hostInstance);
      }
    }

    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
    // already disconnect the `return` pointer at the root of the deleted
    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
    // `alternate`. But we'll clear it in the next level anyway, just in case.

    {
      fiber._debugOwner = null;
    }

    {
      // Theoretically, nothing in here should be necessary, because we already
      // disconnected the fiber from the tree. So even if something leaks this
      // particular fiber, it won't leak anything else
      //
      // The purpose of this branch is to be super aggressive so we can measure
      // if there's any difference in memory impact. If there is, that could
      // indicate a React leak we don't know about.
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

      fiber.updateQueue = null;
    }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.flags & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.flags & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  switch (parentFiber.tag) {
    case HostComponent:
      {
        var parent = parentFiber.stateNode;

        if (parentFiber.flags & ContentReset) {
          // Reset the text content of the parent before doing any insertions
          resetTextContent(parent); // Clear ContentReset from the effect tag

          parentFiber.flags &= ~ContentReset;
        }

        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.

        insertOrAppendPlacementNode(finishedWork, before, parent);
        break;
      }

    case HostRoot:
    case HostPortal:
      {
        var _parent = parentFiber.stateNode.containerInfo;

        var _before = getHostSibling(finishedWork);

        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
        break;
      }
    // eslint-disable-next-line-no-fallthrough

    default:
      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost) {
    var stateNode = node.stateNode;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost) {
    var stateNode = node.stateNode;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
} // These are tracked on the stack as we recursively traverse a
// deleted subtree.
// TODO: Update these during the whole mutation phase, not just during
// a deletion.


var hostParent = null;
var hostParentIsContainer = false;

function commitDeletionEffects(root, returnFiber, deletedFiber) {
  {
    // We only have the top Fiber that was deleted but we need to recurse down its
    // children to find all the terminal nodes.
    // Recursively delete all host nodes from the parent, detach refs, clean
    // up mounted layout effects, and call componentWillUnmount.
    // We only need to remove the topmost host child in each branch. But then we
    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
    // could split this into two separate traversals functions, where the second
    // one doesn't include any removeChild logic. This is maybe the same
    // function as "disappearLayoutEffects" (or whatever that turns into after
    // the layout phase is refactored to use recursion).
    // Before starting, find the nearest host parent on the stack so we know
    // which instance/container to remove the children from.
    // TODO: Instead of searching up the fiber return path on every deletion, we
    // can track the nearest host component on the JS stack as we traverse the
    // tree during the commit phase. This would make insertions faster, too.
    var parent = returnFiber;

    findParent: while (parent !== null) {
      switch (parent.tag) {
        case HostComponent:
          {
            hostParent = parent.stateNode;
            hostParentIsContainer = false;
            break findParent;
          }

        case HostRoot:
          {
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break findParent;
          }

        case HostPortal:
          {
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break findParent;
          }
      }

      parent = parent.return;
    }

    if (hostParent === null) {
      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
    }

    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
    hostParent = null;
    hostParentIsContainer = false;
  }

  detachFiberMutation(deletedFiber);
}

function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
  // TODO: Use a static flag to skip trees that don't have unmount effects
  var child = parent.child;

  while (child !== null) {
    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
    child = child.sibling;
  }
}

function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
  // into their subtree. There are simpler cases in the inner switch
  // that don't modify the stack.

  switch (deletedFiber.tag) {
    case HostComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
        } // Intentional fallthrough to next branch

      }
    // eslint-disable-next-line-no-fallthrough

    case HostText:
      {
        // We only need to remove the nearest host child. Set the host parent
        // to `null` on the stack to indicate that nested children don't
        // need to be removed.
        {
          var prevHostParent = hostParent;
          var prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;

          if (hostParent !== null) {
            // Now that all the child effects have unmounted, we can remove the
            // node from the tree.
            if (hostParentIsContainer) {
              removeChildFromContainer(hostParent, deletedFiber.stateNode);
            } else {
              removeChild(hostParent, deletedFiber.stateNode);
            }
          }
        }

        return;
      }

    case DehydratedFragment:
      {
        // Delete the dehydrated suspense boundary and all of its content.


        {
          if (hostParent !== null) {
            if (hostParentIsContainer) {
              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
            } else {
              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
            }
          }
        }

        return;
      }

    case HostPortal:
      {
        {
          // When we go into a portal, it becomes the parent to remove from.
          var _prevHostParent = hostParent;
          var _prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = true;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = _prevHostParent;
          hostParentIsContainer = _prevHostParentIsContainer;
        }

        return;
      }

    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          var updateQueue = deletedFiber.updateQueue;

          if (updateQueue !== null) {
            var lastEffect = updateQueue.lastEffect;

            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;

              do {
                var _effect = effect,
                    destroy = _effect.destroy,
                    tag = _effect.tag;

                if (destroy !== undefined) {
                  if ((tag & Insertion) !== NoFlags$1) {
                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                  } else if ((tag & Layout) !== NoFlags$1) {
                    {
                      markComponentLayoutEffectUnmountStarted(deletedFiber);
                    }

                    if ( deletedFiber.mode & ProfileMode) {
                      startLayoutEffectTimer();
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      recordLayoutEffectDuration(deletedFiber);
                    } else {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    }

                    {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
        }

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case ClassComponent:
      {
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var instance = deletedFiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
          }
        }

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case ScopeComponent:
      {

        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }

    case OffscreenComponent:
      {
        if ( // TODO: Remove this dead flag
         deletedFiber.mode & ConcurrentMode) {
          // If this offscreen component is hidden, we already unmounted it. Before
          // deleting the children, track that it's already unmounted so that we
          // don't attempt to unmount the effects again.
          // TODO: If the tree is hidden, in most cases we should be able to skip
          // over the nested children entirely. An exception is we haven't yet found
          // the topmost host node to delete, which we already track on the stack.
          // But the other case is portals, which need to be detached no matter how
          // deeply they are nested. We should use a subtree flag to track whether a
          // subtree includes a nested portal.
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        } else {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        }

        break;
      }

    default:
      {
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        return;
      }
  }
}

function commitSuspenseCallback(finishedWork) {
  // TODO: Move this to passive phase
  var newState = finishedWork.memoizedState;
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of wakeables.
  // For each wakeable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var wakeables = finishedWork.updateQueue;

  if (wakeables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    wakeables.forEach(function (wakeable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

      if (!retryCache.has(wakeable)) {
        retryCache.add(wakeable);

        {
          if (isDevToolsPresent) {
            if (inProgressLanes !== null && inProgressRoot !== null) {
              // If we have pending work still, associate the original updaters with it.
              restorePendingUpdaters(inProgressRoot, inProgressLanes);
            } else {
              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
            }
          }
        }

        wakeable.then(retry, retry);
      }
    });
  }
} // This function detects when a Suspense boundary goes from visible to hidden.
function commitMutationEffects(root, finishedWork, committedLanes) {
  inProgressLanes = committedLanes;
  inProgressRoot = root;
  setCurrentFiber(finishedWork);
  commitMutationEffectsOnFiber(finishedWork, root);
  setCurrentFiber(finishedWork);
  inProgressLanes = null;
  inProgressRoot = null;
}

function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
  // Deletions effects can be scheduled on any fiber type. They need to happen
  // before the children effects hae fired.
  var deletions = parentFiber.deletions;

  if (deletions !== null) {
    for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];

      try {
        commitDeletionEffects(root, parentFiber, childToDelete);
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
  }

  var prevDebugFiber = getCurrentFiber();

  if (parentFiber.subtreeFlags & MutationMask) {
    var child = parentFiber.child;

    while (child !== null) {
      setCurrentFiber(child);
      commitMutationEffectsOnFiber(child, root);
      child = child.sibling;
    }
  }

  setCurrentFiber(prevDebugFiber);
}

function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
  var current = finishedWork.alternate;
  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
  // because the fiber tag is more specific. An exception is any flag related
  // to reconcilation, because those can be set on all fiber types.

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          try {
            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          } // Layout effects are destroyed during the mutation phase so that all
          // destroy functions for all fibers are called before any create functions.
          // This prevents sibling component effects from interfering with each other,
          // e.g. a destroy function in one component should never override a ref set
          // by a create function in another component during the same commit.


          if ( finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }

            recordLayoutEffectDuration(finishedWork);
          } else {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Ref) {
          if (current !== null) {
            safelyDetachRef(current, current.return);
          }
        }

        return;
      }

    case HostComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Ref) {
          if (current !== null) {
            safelyDetachRef(current, current.return);
          }
        }

        {
          // TODO: ContentReset gets cleared by the children during the commit
          // phase. This is a refactor hazard because it means we must read
          // flags the flags after `commitReconciliationEffects` has already run;
          // the order matters. We should refactor so that ContentReset does not
          // rely on mutating the flag during commit. Like by setting a flag
          // during the render phase instead.
          if (finishedWork.flags & ContentReset) {
            var instance = finishedWork.stateNode;

            try {
              resetTextContent(instance);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }

          if (flags & Update) {
            var _instance4 = finishedWork.stateNode;

            if (_instance4 != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current !== null ? current.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                try {
                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
            }
          }
        }

        return;
      }

    case HostText:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          {
            if (finishedWork.stateNode === null) {
              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
            }

            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current !== null ? current.memoizedProps : newText;

            try {
              commitTextUpdate(textInstance, oldText, newText);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }

        return;
      }

    case HostRoot:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          {
            if (current !== null) {
              var prevRootState = current.memoizedState;

              if (prevRootState.isDehydrated) {
                try {
                  commitHydratedContainer(root.containerInfo);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
            }
          }
        }

        return;
      }

    case HostPortal:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        return;
      }

    case SuspenseComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        var offscreenFiber = finishedWork.child;

        if (offscreenFiber.flags & Visibility) {
          var offscreenInstance = offscreenFiber.stateNode;
          var newState = offscreenFiber.memoizedState;
          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
          // read it during an event

          offscreenInstance.isHidden = isHidden;

          if (isHidden) {
            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

            if (!wasHidden) {
              // TODO: Move to passive phase
              markCommitTimeOfFallback();
            }
          }
        }

        if (flags & Update) {
          try {
            commitSuspenseCallback(finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }

          attachSuspenseRetryListeners(finishedWork);
        }

        return;
      }

    case OffscreenComponent:
      {
        var _wasHidden = current !== null && current.memoizedState !== null;

        if ( // TODO: Remove this dead flag
         finishedWork.mode & ConcurrentMode) {
          // Before committing the children, track on the stack whether this
          // offscreen subtree was already hidden, so that we don't unmount the
          // effects again.
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
          recursivelyTraverseMutationEffects(root, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        } else {
          recursivelyTraverseMutationEffects(root, finishedWork);
        }

        commitReconciliationEffects(finishedWork);

        if (flags & Visibility) {
          var _offscreenInstance = finishedWork.stateNode;
          var _newState = finishedWork.memoizedState;

          var _isHidden = _newState !== null;

          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
          // read it during an event

          _offscreenInstance.isHidden = _isHidden;

          {
            if (_isHidden) {
              if (!_wasHidden) {
                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                  nextEffect = offscreenBoundary;
                  var offscreenChild = offscreenBoundary.child;

                  while (offscreenChild !== null) {
                    nextEffect = offscreenChild;
                    disappearLayoutEffects_begin(offscreenChild);
                    offscreenChild = offscreenChild.sibling;
                  }
                }
              }
            }
          }

          {
            // TODO: This needs to run whenever there's an insertion or update
            // inside a hidden Offscreen tree.
            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
          }
        }

        return;
      }

    case SuspenseListComponent:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);

        if (flags & Update) {
          attachSuspenseRetryListeners(finishedWork);
        }

        return;
      }

    case ScopeComponent:
      {

        return;
      }

    default:
      {
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        return;
      }
  }
}

function commitReconciliationEffects(finishedWork) {
  // Placement effects (insertions, reorders) can be scheduled on any fiber
  // type. They needs to happen after the children effects have fired, but
  // before the effects on this fiber have fired.
  var flags = finishedWork.flags;

  if (flags & Placement) {
    try {
      commitPlacement(finishedWork);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    } // Clear the "placement" from effect tag so that we know that this is
    // inserted, before any life-cycles like componentDidMount gets called.
    // TODO: findDOMNode doesn't rely on this any more but isMounted does
    // and isMounted is deprecated anyway so we should be able to kill this.


    finishedWork.flags &= ~Placement;
  }

  if (flags & Hydrating) {
    finishedWork.flags &= ~Hydrating;
  }
}

function commitLayoutEffects(finishedWork, root, committedLanes) {
  inProgressLanes = committedLanes;
  inProgressRoot = root;
  nextEffect = finishedWork;
  commitLayoutEffects_begin(finishedWork, root, committedLanes);
  inProgressLanes = null;
  inProgressRoot = null;
}

function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
  // Suspense layout effects semantics don't change for legacy roots.
  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if ( fiber.tag === OffscreenComponent && isModernRoot) {
      // Keep track of the current Offscreen stack's state.
      var isHidden = fiber.memoizedState !== null;
      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

      if (newOffscreenSubtreeIsHidden) {
        // The Offscreen tree is hidden. Skip over its layout effects.
        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        continue;
      } else {
        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
        var current = fiber.alternate;
        var wasHidden = current !== null && current.memoizedState !== null;
        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
          // This is the root of a reappearing boundary. Turn its layout effects
          // back on.
          nextEffect = fiber;
          reappearLayoutEffects_begin(fiber);
        }

        var child = firstChild;

        while (child !== null) {
          nextEffect = child;
          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
          root, committedLanes);
          child = child.sibling;
        } // Restore Offscreen state and resume in our-progress traversal.


        nextEffect = fiber;
        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        continue;
      }
    }

    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
    }
  }
}

function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & LayoutMask) !== NoFlags) {
      var current = fiber.alternate;
      setCurrentFiber(fiber);

      try {
        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
      } catch (error) {
        captureCommitPhaseError(fiber, fiber.return, error);
      }

      resetCurrentFiber();
    }

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function disappearLayoutEffects_begin(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ( fiber.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            } finally {
              recordLayoutEffectDuration(fiber);
            }
          } else {
            commitHookEffectListUnmount(Layout, fiber, fiber.return);
          }

          break;
        }

      case ClassComponent:
        {
          // TODO (Offscreen) Check: flags & RefStatic
          safelyDetachRef(fiber, fiber.return);
          var instance = fiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          }

          break;
        }

      case HostComponent:
        {
          safelyDetachRef(fiber, fiber.return);
          break;
        }

      case OffscreenComponent:
        {
          // Check if this is a
          var isHidden = fiber.memoizedState !== null;

          if (isHidden) {
            // Nested Offscreen tree is already hidden. Don't disappear
            // its effects.
            disappearLayoutEffects_complete(subtreeRoot);
            continue;
          }

          break;
        }
    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


    if (firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      disappearLayoutEffects_complete(subtreeRoot);
    }
  }
}

function disappearLayoutEffects_complete(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function reappearLayoutEffects_begin(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if (fiber.tag === OffscreenComponent) {
      var isHidden = fiber.memoizedState !== null;

      if (isHidden) {
        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
        reappearLayoutEffects_complete(subtreeRoot);
        continue;
      }
    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


    if (firstChild !== null) {
      // This node may have been reused from a previous render, so we can't
      // assume its return pointer is correct.
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      reappearLayoutEffects_complete(subtreeRoot);
    }
  }
}

function reappearLayoutEffects_complete(subtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

    setCurrentFiber(fiber);

    try {
      reappearLayoutEffectsOnFiber(fiber);
    } catch (error) {
      captureCommitPhaseError(fiber, fiber.return, error);
    }

    resetCurrentFiber();

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      // This node may have been reused from a previous render, so we can't
      // assume its return pointer is correct.
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
  nextEffect = finishedWork;
  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
}

function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var firstChild = fiber.child;

    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
      firstChild.return = fiber;
      nextEffect = firstChild;
    } else {
      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
    }
  }
}

function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & Passive) !== NoFlags) {
      setCurrentFiber(fiber);

      try {
        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
      } catch (error) {
        captureCommitPhaseError(fiber, fiber.return, error);
      }

      resetCurrentFiber();
    }

    if (fiber === subtreeRoot) {
      nextEffect = null;
      return;
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( finishedWork.mode & ProfileMode) {
          startPassiveEffectTimer();

          try {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          } finally {
            recordPassiveEffectDuration(finishedWork);
          }
        } else {
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
        }

        break;
      }
  }
}

function commitPassiveUnmountEffects(firstChild) {
  nextEffect = firstChild;
  commitPassiveUnmountEffects_begin();
}

function commitPassiveUnmountEffects_begin() {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var child = fiber.child;

    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
      var deletions = fiber.deletions;

      if (deletions !== null) {
        for (var i = 0; i < deletions.length; i++) {
          var fiberToDelete = deletions[i];
          nextEffect = fiberToDelete;
          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
        }

        {
          // A fiber was deleted from this parent fiber, but it's still part of
          // the previous (alternate) parent fiber's list of children. Because
          // children are a linked list, an earlier sibling that's still alive
          // will be connected to the deleted fiber via its `alternate`:
          //
          //   live fiber
          //   --alternate--> previous live fiber
          //   --sibling--> deleted fiber
          //
          // We can't disconnect `alternate` on nodes that haven't been deleted
          // yet, but we can disconnect the `sibling` and `child` pointers.
          var previousFiber = fiber.alternate;

          if (previousFiber !== null) {
            var detachedChild = previousFiber.child;

            if (detachedChild !== null) {
              previousFiber.child = null;

              do {
                var detachedSibling = detachedChild.sibling;
                detachedChild.sibling = null;
                detachedChild = detachedSibling;
              } while (detachedChild !== null);
            }
          }
        }

        nextEffect = fiber;
      }
    }

    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitPassiveUnmountEffects_complete();
    }
  }
}

function commitPassiveUnmountEffects_complete() {
  while (nextEffect !== null) {
    var fiber = nextEffect;

    if ((fiber.flags & Passive) !== NoFlags) {
      setCurrentFiber(fiber);
      commitPassiveUnmountOnFiber(fiber);
      resetCurrentFiber();
    }

    var sibling = fiber.sibling;

    if (sibling !== null) {
      sibling.return = fiber.return;
      nextEffect = sibling;
      return;
    }

    nextEffect = fiber.return;
  }
}

function commitPassiveUnmountOnFiber(finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( finishedWork.mode & ProfileMode) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          recordPassiveEffectDuration(finishedWork);
        } else {
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
        }

        break;
      }
  }
}

function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
  while (nextEffect !== null) {
    var fiber = nextEffect; // Deletion effects fire in parent -> child order
    // TODO: Check if fiber has a PassiveStatic flag

    setCurrentFiber(fiber);
    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
    resetCurrentFiber();
    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

    if (child !== null) {
      child.return = fiber;
      nextEffect = child;
    } else {
      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
    }
  }
}

function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
  while (nextEffect !== null) {
    var fiber = nextEffect;
    var sibling = fiber.sibling;
    var returnFiber = fiber.return;

    {
      // Recursively traverse the entire deleted tree and clean up fiber fields.
      // This is more aggressive than ideal, and the long term goal is to only
      // have to detach the deleted tree at the root.
      detachFiberAfterEffects(fiber);

      if (fiber === deletedSubtreeRoot) {
        nextEffect = null;
        return;
      }
    }

    if (sibling !== null) {
      sibling.return = returnFiber;
      nextEffect = sibling;
      return;
    }

    nextEffect = returnFiber;
  }
}

function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        if ( current.mode & ProfileMode) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
          recordPassiveEffectDuration(current);
        } else {
          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
        }

        break;
      }
  }
} // TODO: Reuse reappearLayoutEffects traversal here?


function invokeLayoutEffectMountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListMount(Layout | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }

      case ClassComponent:
        {
          var instance = fiber.stateNode;

          try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }
    }
  }
}

function invokePassiveEffectMountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }
    }
  }
}

function invokeLayoutEffectUnmountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }

          break;
        }

      case ClassComponent:
        {
          var instance = fiber.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          }

          break;
        }
    }
  }
}

function invokePassiveEffectUnmountInDEV(fiber) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    switch (fiber.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          try {
            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
        }
    }
  }
}

var COMPONENT_TYPE = 0;
var HAS_PSEUDO_CLASS_TYPE = 1;
var ROLE_TYPE = 2;
var TEST_NAME_TYPE = 3;
var TEXT_TYPE = 4;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  COMPONENT_TYPE = symbolFor('selector.component');
  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
  ROLE_TYPE = symbolFor('selector.role');
  TEST_NAME_TYPE = symbolFor('selector.test_id');
  TEXT_TYPE = symbolFor('selector.text');
}
var commitHooks = [];
function onCommitRoot$1() {
  {
    commitHooks.forEach(function (commitHook) {
      return commitHook();
    });
  }
}

var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
function isLegacyActEnvironment(fiber) {
  {
    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
    // act environment whenever `jest` is defined, but you can still turn off
    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
    // to false.
    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

    var jestIsDefined = typeof jest !== 'undefined';
    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
  }
}
function isConcurrentActEnvironment() {
  {
    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
      // TODO: Include link to relevant documentation page.
      error('The current testing environment is not configured to support ' + 'act(...)');
    }

    return isReactActEnvironmentGlobal;
  }
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
var NoContext =
/*             */
0;
var BatchedContext =
/*               */
1;
var RenderContext =
/*                */
2;
var CommitContext =
/*                */
4;
var RootInProgress = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
var RootDidNotComplete = 6; // Describes where we are in the React execution stack

var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The lanes we're rendering

var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
// This is a superset of the lanes we started working on at the root. The only
// case where it's different from `workInProgressRootRenderLanes` is when we
// enter a subtree that is hidden and needs to be unhidden: Suspense and
// Offscreen component.
//
// Most things in the work loop should deal with workInProgressRootRenderLanes.
// Most things in begin/complete phases should deal with subtreeRenderLanes.

var subtreeRenderLanes = NoLanes;
var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
// slightly different than `renderLanes` because `renderLanes` can change as you
// enter and exit an Offscreen tree. This value is the combination of all render
// lanes for the entire render phase.

var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
// We will log them once the tree commits.

var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
// more and prefer CPU suspense heuristics instead.

var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
// suspense heuristics and opt out of rendering more content.

var RENDER_TIMEOUT_MS = 500;
var workInProgressTransitions = null;

function resetRenderTimer() {
  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
}

function getRenderTargetTime() {
  return workInProgressRootRenderTargetTime;
}
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsLanes = NoLanes;
var pendingPassiveProfilerEffects = [];
var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var isFlushingPassiveEffects = false;
var didScheduleUpdateDuringPassiveEffects = false;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
// event times as simultaneous, even if the actual clock time has advanced
// between the first and second call.

var currentEventTime = NoTimestamp;
var currentEventTransitionLane = NoLanes;
var isRunningInsertionEffect = false;
function getWorkInProgressRoot() {
  return workInProgressRoot;
}
function requestEventTime() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return now();
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoTimestamp) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = now();
  return currentEventTime;
}
function requestUpdateLane(fiber) {
  // Special cases
  var mode = fiber.mode;

  if ((mode & ConcurrentMode) === NoMode) {
    return SyncLane;
  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
    // This is a render phase update. These are not officially supported. The
    // old behavior is to give this the same "thread" (lanes) as
    // whatever is currently rendering. So if you call `setState` on a component
    // that happens later in the same render, it will flush. Ideally, we want to
    // remove the special case and treat them as if they came from an
    // interleaved event. Regardless, this pattern is not officially supported.
    // This behavior is only a fallback. The flag only exists until we can roll
    // out the setState warning, since existing code might accidentally rely on
    // the current behavior.
    return pickArbitraryLane(workInProgressRootRenderLanes);
  }

  var isTransition = requestCurrentTransition() !== NoTransition;

  if (isTransition) {
    if ( ReactCurrentBatchConfig$3.transition !== null) {
      var transition = ReactCurrentBatchConfig$3.transition;

      if (!transition._updatedFibers) {
        transition._updatedFibers = new Set();
      }

      transition._updatedFibers.add(fiber);
    } // The algorithm for assigning an update to a lane should be stable for all
    // updates at the same priority within the same event. To do this, the
    // inputs to the algorithm must be the same.
    //
    // The trick we use is to cache the first of each of these inputs within an
    // event. Then reset the cached values once we can be sure the event is
    // over. Our heuristic for that is whenever we enter a concurrent work loop.


    if (currentEventTransitionLane === NoLane) {
      // All transitions within the same event are assigned the same lane.
      currentEventTransitionLane = claimNextTransitionLane();
    }

    return currentEventTransitionLane;
  } // Updates originating inside certain React methods, like flushSync, have
  // their priority set by tracking it with a context variable.
  //
  // The opaque type returned by the host config is internally a lane, so we can
  // use that directly.
  // TODO: Move this type conversion to the event priority module.


  var updateLane = getCurrentUpdatePriority();

  if (updateLane !== NoLane) {
    return updateLane;
  } // This update originated outside React. Ask the host environment for an
  // appropriate priority, based on the type of event.
  //
  // The opaque type returned by the host config is internally a lane, so we can
  // use that directly.
  // TODO: Move this type conversion to the event priority module.


  var eventLane = getCurrentEventPriority();
  return eventLane;
}

function requestRetryLane(fiber) {
  // This is a fork of `requestUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  // Special cases
  var mode = fiber.mode;

  if ((mode & ConcurrentMode) === NoMode) {
    return SyncLane;
  }

  return claimNextRetryLane();
}

function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
  checkForNestedUpdates();

  {
    if (isRunningInsertionEffect) {
      error('useInsertionEffect must not schedule updates.');
    }
  }

  {
    if (isFlushingPassiveEffects) {
      didScheduleUpdateDuringPassiveEffects = true;
    }
  } // Mark that the root has a pending update.


  markRootUpdated(root, lane, eventTime);

  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
    // This update was dispatched during the render phase. This is a mistake
    // if the update originates from user space (with the exception of local
    // hook updates, which are handled differently and don't reach this
    // function), but there are some internal React features that use this as
    // an implementation detail, like selective hydration.
    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
  } else {
    // This is a normal update, scheduled from outside the render phase. For
    // example, during an input event.
    {
      if (isDevToolsPresent) {
        addFiberToLanesMap(root, fiber, lane);
      }
    }

    warnIfUpdatesNotWrappedWithActDEV(fiber);

    if (root === workInProgressRoot) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that there was an interleaved update work on this root. Unless the
      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
      // phase update. In that case, we don't treat render phase updates as if
      // they were interleaved, for backwards compat reasons.
      if ( (executionContext & RenderContext) === NoContext) {
        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
      }

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: Make sure this doesn't override pings that happen while we've
        // already started rendering.
        markRootSuspended$1(root, workInProgressRootRenderLanes);
      }
    }

    ensureRootIsScheduled(root, eventTime);

    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
      // Flush the synchronous work now, unless we're already working or inside
      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
      // scheduleCallbackForFiber to preserve the ability to schedule a callback
      // without immediately flushing it. We only do this for user-initiated
      // updates, to preserve historical behavior of legacy mode.
      resetRenderTimer();
      flushSyncCallbacksOnlyInLegacyMode();
    }
  }
}
function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
  // This is a special fork of scheduleUpdateOnFiber that is only used to
  // schedule the initial hydration of a root that has just been created. Most
  // of the stuff in scheduleUpdateOnFiber can be skipped.
  //
  // The main reason for this separate path, though, is to distinguish the
  // initial children from subsequent updates. In fully client-rendered roots
  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
  // updates, but hydration roots are special because the initial render must
  // match what was rendered on the server.
  var current = root.current;
  current.lanes = lane;
  markRootUpdated(root, lane, eventTime);
  ensureRootIsScheduled(root, eventTime);
}
function isUnsafeClassRenderPhaseUpdate(fiber) {
  // Check if this is a render phase update. Only called by class components,
  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
    // decided not to enable it.
     (executionContext & RenderContext) !== NoContext
  );
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the priority
// of the existing task is the same as the priority of the next level that the
// root has work on. This function is called on every update, and right before
// exiting a task.

function ensureRootIsScheduled(root, currentTime) {
  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
  // expired so we know to work on those next.

  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (nextLanes === NoLanes) {
    // Special case: There's nothing to work on.
    if (existingCallbackNode !== null) {
      cancelCallback$1(existingCallbackNode);
    }

    root.callbackNode = null;
    root.callbackPriority = NoLane;
    return;
  } // We use the highest priority lane to represent the priority of the callback.


  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

  var existingCallbackPriority = root.callbackPriority;

  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
  // on the `act` queue.
  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
    {
      // If we're going to re-use an existing task, it needs to exist.
      // Assume that discrete update microtasks are non-cancellable and null.
      // TODO: Temporary until we confirm this warning is not fired.
      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
      }
    } // The priority hasn't changed. We can reuse the existing task. Exit.


    return;
  }

  if (existingCallbackNode != null) {
    // Cancel the existing callback. We'll schedule a new one below.
    cancelCallback$1(existingCallbackNode);
  } // Schedule a new callback.


  var newCallbackNode;

  if (newCallbackPriority === SyncLane) {
    // Special case: Sync React callbacks are scheduled on a special
    // internal queue
    if (root.tag === LegacyRoot) {
      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
      }

      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
    } else {
      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    }

    {
      // Flush the queue in a microtask.
      if ( ReactCurrentActQueue$1.current !== null) {
        // Inside `act`, use our internal `act` queue so that these get flushed
        // at the end of the current scope even when using the sync version
        // of `act`.
        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
      } else {
        scheduleMicrotask(function () {
          // In Safari, appending an iframe forces microtasks to run.
          // https://github.com/facebook/react/issues/22459
          // We don't support running callbacks in the middle of render
          // or commit so we need to check against that.
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            // Note that this would still prematurely flush the callbacks
            // if this happens outside render or commit phase (e.g. in an event).
            flushSyncCallbacks();
          }
        });
      }
    }

    newCallbackNode = null;
  } else {
    var schedulerPriorityLevel;

    switch (lanesToEventPriority(nextLanes)) {
      case DiscreteEventPriority:
        schedulerPriorityLevel = ImmediatePriority;
        break;

      case ContinuousEventPriority:
        schedulerPriorityLevel = UserBlockingPriority;
        break;

      case DefaultEventPriority:
        schedulerPriorityLevel = NormalPriority;
        break;

      case IdleEventPriority:
        schedulerPriorityLevel = IdlePriority;
        break;

      default:
        schedulerPriorityLevel = NormalPriority;
        break;
    }

    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  }

  root.callbackPriority = newCallbackPriority;
  root.callbackNode = newCallbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  {
    resetNestedUpdateFlag();
  } // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.


  currentEventTime = NoTimestamp;
  currentEventTransitionLane = NoLanes;

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  } // Flush any pending passive effects before deciding which lanes to work on,
  // in case they schedule additional work.


  var originalCallbackNode = root.callbackNode;
  var didFlushPassiveEffects = flushPassiveEffects();

  if (didFlushPassiveEffects) {
    // Something in the passive effect phase may have canceled the current task.
    // Check if the task node for this root was changed.
    if (root.callbackNode !== originalCallbackNode) {
      // The current task was canceled. Exit. We don't need to call
      // `ensureRootIsScheduled` because the check above implies either that
      // there's a new task, or that there's no remaining work on this root.
      return null;
    }
  } // Determine the next lanes to work on, using the fields stored
  // on the root.


  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (lanes === NoLanes) {
    // Defensive coding. This is never expected to happen.
    return null;
  } // We disable time-slicing in some cases: if the work has been CPU-bound
  // for too long ("expired" work, to prevent starvation), or we're in
  // sync-updates-by-default mode.
  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
  // bug we're still investigating. Once the bug in Scheduler is fixed,
  // we can remove this, since we track expiration ourselves.


  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

  if (exitStatus !== RootInProgress) {
    if (exitStatus === RootErrored) {
      // If something threw an error, try rendering one more time. We'll
      // render synchronously to block concurrent data mutations, and we'll
      // includes all pending updates are included. If it still fails after
      // the second attempt, we'll give up and commit the resulting tree.
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

      if (errorRetryLanes !== NoLanes) {
        lanes = errorRetryLanes;
        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
      }
    }

    if (exitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      prepareFreshStack(root, NoLanes);
      markRootSuspended$1(root, lanes);
      ensureRootIsScheduled(root, now());
      throw fatalError;
    }

    if (exitStatus === RootDidNotComplete) {
      // The render unwound without completing the tree. This happens in special
      // cases where need to exit the current render without producing a
      // consistent tree or committing.
      //
      // This should only happen during a concurrent render, not a discrete or
      // synchronous update. We should have already checked for this when we
      // unwound the stack.
      markRootSuspended$1(root, lanes);
    } else {
      // The render completed.
      // Check if this render may have yielded to a concurrent event, and if so,
      // confirm that any newly rendered stores are consistent.
      // TODO: It's possible that even a concurrent render may never have yielded
      // to the main thread, if it was fast enough, or if it expired. We could
      // skip the consistency check in that case, too.
      var renderWasConcurrent = !includesBlockingLane(root, lanes);
      var finishedWork = root.current.alternate;

      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
        // A store was mutated in an interleaved event. Render again,
        // synchronously, to block further mutations.
        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

        if (exitStatus === RootErrored) {
          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

          if (_errorRetryLanes !== NoLanes) {
            lanes = _errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
            // concurrent events.
          }
        }

        if (exitStatus === RootFatalErrored) {
          var _fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw _fatalError;
        }
      } // We now have a consistent tree. The next step is either to commit it,
      // or, if something suspended, wait to commit it after a timeout.


      root.finishedWork = finishedWork;
      root.finishedLanes = lanes;
      finishConcurrentRender(root, exitStatus, lanes);
    }
  }

  ensureRootIsScheduled(root, now());

  if (root.callbackNode === originalCallbackNode) {
    // The task node scheduled for this root is the same one that's
    // currently executed. Need to return a continuation.
    return performConcurrentWorkOnRoot.bind(null, root);
  }

  return null;
}

function recoverFromConcurrentError(root, errorRetryLanes) {
  // If an error occurred during hydration, discard server response and fall
  // back to client side render.
  // Before rendering again, save the errors from the previous attempt.
  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

  if (isRootDehydrated(root)) {
    // The shell failed to hydrate. Set a flag to force a client rendering
    // during the next attempt. To do this, we call prepareFreshStack now
    // to create the root work-in-progress fiber. This is a bit weird in terms
    // of factoring, because it relies on renderRootSync not calling
    // prepareFreshStack again in the call below, which happens because the
    // root and lanes haven't changed.
    //
    // TODO: I think what we should do is set ForceClientRender inside
    // throwException, like we do for nested Suspense boundaries. The reason
    // it's here instead is so we can switch to the synchronous work loop, too.
    // Something to consider for a future refactor.
    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
    rootWorkInProgress.flags |= ForceClientRender;

    {
      errorHydratingContainer(root.containerInfo);
    }
  }

  var exitStatus = renderRootSync(root, errorRetryLanes);

  if (exitStatus !== RootErrored) {
    // Successfully finished rendering on retry
    // The errors from the failed first attempt have been recovered. Add
    // them to the collection of recoverable errors. We'll log them in the
    // commit phase.
    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
    // from the first attempt, to preserve the causal sequence.

    if (errorsFromSecondAttempt !== null) {
      queueRecoverableErrors(errorsFromSecondAttempt);
    }
  }

  return exitStatus;
}

function queueRecoverableErrors(errors) {
  if (workInProgressRootRecoverableErrors === null) {
    workInProgressRootRecoverableErrors = errors;
  } else {
    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
}

function finishConcurrentRender(root, exitStatus, lanes) {
  switch (exitStatus) {
    case RootInProgress:
    case RootFatalErrored:
      {
        throw new Error('Root did not complete. This is a bug in React.');
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // We should have already attempted to retry this tree. If we reached
        // this point, it errored again. Commit it.
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootSuspended:
      {
        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.

        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
        !shouldForceFlushFallbacksInDEV()) {
          // This render only included retries, no updates. Throttle committing
          // retries so that we don't show too many loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            var nextLanes = getNextLanes(root, NoLanes);

            if (nextLanes !== NoLanes) {
              // There's additional work on this root.
              break;
            }

            var suspendedLanes = root.suspendedLanes;

            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              // FIXME: What if the suspended lanes are Idle? Should not restart.
              var eventTime = requestEventTime();
              markRootPinged(root, suspendedLanes);
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspended$1(root, lanes);

        if (includesOnlyTransitions(lanes)) {
          // This is a transition, so we should exit without committing a
          // placeholder and without scheduling a timeout. Delay indefinitely
          // until we receive more data.
          break;
        }

        if (!shouldForceFlushFallbacksInDEV()) {
          // This is not a transition, but we did trigger an avoided state.
          // Schedule a placeholder to display after a short delay, using the Just
          // Noticeable Difference.
          // TODO: Is the JND optimization worth the added complexity? If this is
          // the only reason we track the event time, then probably not.
          // Consider removing.
          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
          var eventTimeMs = mostRecentEventTime;
          var timeElapsedMs = now() - eventTimeMs;

          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // Instead of committing the fallback immediately, wait for more data
            // to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
            break;
          }
        } // Commit the placeholder.


        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        break;
      }

    default:
      {
        throw new Error('Unknown root exit status.');
      }
  }
}

function isRenderConsistentWithExternalStores(finishedWork) {
  // Search the rendered tree for external store reads, and check whether the
  // stores were mutated in a concurrent event. Intentionally using an iterative
  // loop instead of recursion so we can exit early.
  var node = finishedWork;

  while (true) {
    if (node.flags & StoreConsistency) {
      var updateQueue = node.updateQueue;

      if (updateQueue !== null) {
        var checks = updateQueue.stores;

        if (checks !== null) {
          for (var i = 0; i < checks.length; i++) {
            var check = checks[i];
            var getSnapshot = check.getSnapshot;
            var renderedValue = check.value;

            try {
              if (!objectIs(getSnapshot(), renderedValue)) {
                // Found an inconsistent store.
                return false;
              }
            } catch (error) {
              // If `getSnapshot` throws, return `false`. This will schedule
              // a re-render, and the error will be rethrown during render.
              return false;
            }
          }
        }
      }
    }

    var child = node.child;

    if (node.subtreeFlags & StoreConsistency && child !== null) {
      child.return = node;
      node = child;
      continue;
    }

    if (node === finishedWork) {
      return true;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return true;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow doesn't know this is unreachable, but eslint does
  // eslint-disable-next-line no-unreachable


  return true;
}

function markRootSuspended$1(root, suspendedLanes) {
  // When suspending, we should always exclude lanes that were pinged or (more
  // rarely, since we try to avoid it) updated during the render phase.
  // TODO: Lol maybe there's a better way to factor this besides this
  // obnoxiously named function :)
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
  markRootSuspended(root, suspendedLanes);
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  {
    syncNestedUpdateFlag();
  }

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  }

  flushPassiveEffects();
  var lanes = getNextLanes(root, NoLanes);

  if (!includesSomeLane(lanes, SyncLane)) {
    // There's no remaining sync work left.
    ensureRootIsScheduled(root, now());
    return null;
  }

  var exitStatus = renderRootSync(root, lanes);

  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
    // If something threw an error, try rendering one more time. We'll render
    // synchronously to block concurrent data mutations, and we'll includes
    // all pending updates are included. If it still fails after the second
    // attempt, we'll give up and commit the resulting tree.
    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

    if (errorRetryLanes !== NoLanes) {
      lanes = errorRetryLanes;
      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
    }
  }

  if (exitStatus === RootFatalErrored) {
    var fatalError = workInProgressRootFatalError;
    prepareFreshStack(root, NoLanes);
    markRootSuspended$1(root, lanes);
    ensureRootIsScheduled(root, now());
    throw fatalError;
  }

  if (exitStatus === RootDidNotComplete) {
    throw new Error('Root did not complete. This is a bug in React.');
  } // We now have a consistent tree. Because this is a sync render, we
  // will commit it even if something suspended.


  var finishedWork = root.current.alternate;
  root.finishedWork = finishedWork;
  root.finishedLanes = lanes;
  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
  // pending level.

  ensureRootIsScheduled(root, now());
  return null;
}

function flushRoot(root, lanes) {
  if (lanes !== NoLanes) {
    markRootEntangled(root, mergeLanes(lanes, SyncLane));
    ensureRootIsScheduled(root, now());

    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
      resetRenderTimer();
      flushSyncCallbacks();
    }
  }
}
function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
    // most batchedUpdates-like method.

    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
      resetRenderTimer();
      flushSyncCallbacksOnlyInLegacyMode();
    }
  }
}
function discreteUpdates(fn, a, b, c, d) {
  var previousPriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig$3.transition;

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);
    return fn(a, b, c, d);
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;

    if (executionContext === NoContext) {
      resetRenderTimer();
    }
  }
} // Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.

// eslint-disable-next-line no-redeclare
function flushSync(fn) {
  // In legacy mode, we flush pending passive effects at the beginning of the
  // next event, not at the end of the previous one.
  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushPassiveEffects();
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;
  var prevTransition = ReactCurrentBatchConfig$3.transition;
  var previousPriority = getCurrentUpdatePriority();

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);

    if (fn) {
      return fn();
    } else {
      return undefined;
    }
  } finally {
    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
      flushSyncCallbacks();
    }
  }
}
function isAlreadyRendering() {
  // Used by the renderer to print a warning if certain APIs are called from
  // the wrong context.
  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
}
function pushRenderLanes(fiber, lanes) {
  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
}
function popRenderLanes(fiber) {
  subtreeRenderLanes = subtreeRenderLanesCursor.current;
  pop(subtreeRenderLanesCursor, fiber);
}

function prepareFreshStack(root, lanes) {
  root.finishedWork = null;
  root.finishedLanes = NoLanes;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      var current = interruptedWork.alternate;
      unwindInterruptedWork(current, interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  var rootWorkInProgress = createWorkInProgress(root.current, null);
  workInProgress = rootWorkInProgress;
  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
  workInProgressRootExitStatus = RootInProgress;
  workInProgressRootFatalError = null;
  workInProgressRootSkippedLanes = NoLanes;
  workInProgressRootInterleavedUpdatedLanes = NoLanes;
  workInProgressRootPingedLanes = NoLanes;
  workInProgressRootConcurrentErrors = null;
  workInProgressRootRecoverableErrors = null;
  finishQueueingConcurrentUpdates();

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }

  return rootWorkInProgress;
}

function handleError(root, thrownValue) {
  do {
    var erroredWork = workInProgress;

    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
      // separate issue. Write a regression test using string refs.

      ReactCurrentOwner$2.current = null;

      if (erroredWork === null || erroredWork.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // intentionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return;
      }

      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
      }

      if (enableSchedulingProfiler) {
        markComponentRenderStopped();

        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          var wakeable = thrownValue;
          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
        } else {
          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
        }
      }

      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
      completeUnitOfWork(erroredWork);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;

      if (workInProgress === erroredWork && erroredWork !== null) {
        // If this boundary has already errored, then we had trouble processing
        // the error. Bubble it to the next boundary.
        erroredWork = erroredWork.return;
        workInProgress = erroredWork;
      } else {
        erroredWork = workInProgress;
      }

      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher() {
  var prevDispatcher = ReactCurrentDispatcher$2.current;
  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$2.current = prevDispatcher;
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markSkippedUpdateLanes(lane) {
  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootInProgress) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there are updates that we skipped tree that might have unblocked
  // this render.


  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
    // Mark the current render as suspended so that we switch to working on
    // the updates that were skipped. Usually we only suspend at the end of
    // the render phase.
    // TODO: We should probably always mark the root as suspended immediately
    // (inside this function), since by suspending at the end of the render
    // phase introduces a potential mistake where we suspend lanes that were
    // pinged or updated while we were rendering.
    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
}
function renderDidError(error) {
  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
    workInProgressRootExitStatus = RootErrored;
  }

  if (workInProgressRootConcurrentErrors === null) {
    workInProgressRootConcurrentErrors = [error];
  } else {
    workInProgressRootConcurrentErrors.push(error);
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootInProgress;
}

function renderRootSync(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root.memoizedUpdaters;

        if (memoizedUpdaters.size > 0) {
          restorePendingUpdaters(root, workInProgressRootRenderLanes);
          memoizedUpdaters.clear();
        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
        // If we bailout on this work, we'll move them back (like above).
        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
        // That way we can keep the current update and future updates separate.


        movePendingFibersToMemoized(root, lanes);
      }
    }

    workInProgressTransitions = getTransitionsForLanes();
    prepareFreshStack(root, lanes);
  }

  {
    markRenderStarted(lanes);
  }

  do {
    try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();
  executionContext = prevExecutionContext;
  popDispatcher(prevDispatcher);

  if (workInProgress !== null) {
    // This is a sync render, so we should have finished the whole tree.
    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
  }

  {
    markRenderStopped();
  } // Set this to null to indicate there's no in-progress render.


  workInProgressRoot = null;
  workInProgressRootRenderLanes = NoLanes;
  return workInProgressRootExitStatus;
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    performUnitOfWork(workInProgress);
  }
}

function renderRootConcurrent(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root.memoizedUpdaters;

        if (memoizedUpdaters.size > 0) {
          restorePendingUpdaters(root, workInProgressRootRenderLanes);
          memoizedUpdaters.clear();
        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
        // If we bailout on this work, we'll move them back (like above).
        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
        // That way we can keep the current update and future updates separate.


        movePendingFibersToMemoized(root, lanes);
      }
    }

    workInProgressTransitions = getTransitionsForLanes();
    resetRenderTimer();
    prepareFreshStack(root, lanes);
  }

  {
    markRenderStarted(lanes);
  }

  do {
    try {
      workLoopConcurrent();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();
  popDispatcher(prevDispatcher);
  executionContext = prevExecutionContext;


  if (workInProgress !== null) {
    // Still work remaining.
    {
      markRenderYielded();
    }

    return RootInProgress;
  } else {
    // Completed the tree.
    {
      markRenderStopped();
    } // Set this to null to indicate there's no in-progress render.


    workInProgressRoot = null;
    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

    return workInProgressRootExitStatus;
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    completeUnitOfWork(unitOfWork);
  } else {
    workInProgress = next;
  }

  ReactCurrentOwner$2.current = null;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  var completedWork = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = completedWork.alternate;
    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

    if ((completedWork.flags & Incomplete) === NoFlags) {
      setCurrentFiber(completedWork);
      var next = void 0;

      if ( (completedWork.mode & ProfileMode) === NoMode) {
        next = completeWork(current, completedWork, subtreeRenderLanes);
      } else {
        startProfilerTimer(completedWork);
        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
      }

      resetCurrentFiber();

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        workInProgress = next;
        return;
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.flags &= HostEffectMask;
        workInProgress = _next;
        return;
      }

      if ( (completedWork.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

        var actualDuration = completedWork.actualDuration;
        var child = completedWork.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        completedWork.actualDuration = actualDuration;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its subtree flags.
        returnFiber.flags |= Incomplete;
        returnFiber.subtreeFlags = NoFlags;
        returnFiber.deletions = null;
      } else {
        // We've unwound all the way to the root.
        workInProgressRootExitStatus = RootDidNotComplete;
        workInProgress = null;
        return;
      }
    }

    var siblingFiber = completedWork.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      workInProgress = siblingFiber;
      return;
    } // Otherwise, return to the parent


    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

    workInProgress = completedWork;
  } while (completedWork !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootInProgress) {
    workInProgressRootExitStatus = RootCompleted;
  }
}

function commitRoot(root, recoverableErrors, transitions) {
  // TODO: This no longer makes any sense. We already wrap the mutation and
  // layout phases. Should be able to remove.
  var previousUpdateLanePriority = getCurrentUpdatePriority();
  var prevTransition = ReactCurrentBatchConfig$3.transition;

  try {
    ReactCurrentBatchConfig$3.transition = null;
    setCurrentUpdatePriority(DiscreteEventPriority);
    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
  } finally {
    ReactCurrentBatchConfig$3.transition = prevTransition;
    setCurrentUpdatePriority(previousUpdateLanePriority);
  }

  return null;
}

function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Should not already be working.');
  }

  var finishedWork = root.finishedWork;
  var lanes = root.finishedLanes;

  {
    markCommitStarted(lanes);
  }

  if (finishedWork === null) {

    {
      markCommitStopped();
    }

    return null;
  } else {
    {
      if (lanes === NoLanes) {
        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
      }
    }
  }

  root.finishedWork = null;
  root.finishedLanes = NoLanes;

  if (finishedWork === root.current) {
    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
  markRootFinished(root, remainingLanes);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    workInProgressRootRenderLanes = NoLanes;
  } // If there are pending passive effects, schedule a callback to process them.
  // Do this as early as possible, so it is queued before anything else that
  // might get scheduled in the commit phase. (See #16714.)
  // TODO: Delete all other places that schedule the passive effect callback
  // They're redundant.


  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      // to store it in pendingPassiveTransitions until they get processed
      // We need to pass this through as an argument to commitRoot
      // because workInProgressTransitions might have changed between
      // the previous render and commit if we throttle the commit
      // with setTimeout

      pendingPassiveTransitions = transitions;
      scheduleCallback$1(NormalPriority, function () {
        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
        // *after* passive effects fire to avoid freeing a cache pool that may
        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

        return null;
      });
    }
  } // Check if there are any effects in the whole tree.
  // TODO: This is left over from the effect list implementation, where we had
  // to check for the existence of `firstEffect` to satisfy Flow. I think the
  // only other reason this optimization exists is because it affects profiling.
  // Reconsider whether this is necessary.


  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

  if (subtreeHasEffects || rootHasEffect) {
    var prevTransition = ReactCurrentBatchConfig$3.transition;
    ReactCurrentBatchConfig$3.transition = null;
    var previousPriority = getCurrentUpdatePriority();
    setCurrentUpdatePriority(DiscreteEventPriority);
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext; // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    }


    commitMutationEffects(root, finishedWork, lanes);

    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

    {
      markLayoutEffectsStarted(lanes);
    }

    commitLayoutEffects(finishedWork, root, lanes);

    {
      markLayoutEffectsStopped();
    }
    // opportunity to paint.


    requestPaint();
    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

    setCurrentUpdatePriority(previousPriority);
    ReactCurrentBatchConfig$3.transition = prevTransition;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    {
      recordCommitTime();
    }
  }

  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsLanes = lanes;
  } else {

    {
      nestedPassiveUpdateCount = 0;
      rootWithPassiveNestedUpdates = null;
    }
  } // Read this again, since an effect might have updated it


  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
  // is to detect whether something might have called setState inside
  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
  // inside `componentDidCatch` is itself flawed — that's why we recommend
  // `getDerivedStateFromError` instead. However, it could be improved by
  // checking if remainingLanes includes Sync work, instead of whether there's
  // any work remaining at all (which would also include stuff like Suspense
  // retries or transitions). It's been like this for a while, though, so fixing
  // it probably isn't that urgent.

  if (remainingLanes === NoLanes) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      commitDoubleInvokeEffectsInDEV(root.current, false);
    }
  }

  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

  {
    if (isDevToolsPresent) {
      root.memoizedUpdaters.clear();
    }
  }

  {
    onCommitRoot$1();
  } // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.


  ensureRootIsScheduled(root, now());

  if (recoverableErrors !== null) {
    // There were errors during this render, but recovered from them without
    // needing to surface it to the UI. We log them here.
    var onRecoverableError = root.onRecoverableError;

    for (var i = 0; i < recoverableErrors.length; i++) {
      var recoverableError = recoverableErrors[i];
      var componentStack = recoverableError.stack;
      var digest = recoverableError.digest;
      onRecoverableError(recoverableError.value, {
        componentStack: componentStack,
        digest: digest
      });
    }
  }

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var error$1 = firstUncaughtError;
    firstUncaughtError = null;
    throw error$1;
  } // If the passive effects are the result of a discrete render, flush them
  // synchronously at the end of the current task so that the result is
  // immediately observable. Otherwise, we assume that they are not
  // order-dependent and do not need to be observed by external systems, so we
  // can wait until after paint.
  // TODO: We can optimize this by not scheduling the callback earlier. Since we
  // currently schedule the callback in multiple places, will wait until those
  // are consolidated.


  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
    flushPassiveEffects();
  } // Read this again, since a passive effect might have updated it


  remainingLanes = root.pendingLanes;

  if (includesSomeLane(remainingLanes, SyncLane)) {
    {
      markNestedUpdateScheduled();
    } // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.


    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbacks();

  {
    markCommitStopped();
  }

  return null;
}

function flushPassiveEffects() {
  // Returns whether passive effects were flushed.
  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
  // probably just combine the two functions. I believe they were only separate
  // in the first place because we used to wrap it with
  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
  // priority within React itself, so we can mutate the variable directly.
  if (rootWithPendingPassiveEffects !== null) {
    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
    var prevTransition = ReactCurrentBatchConfig$3.transition;
    var previousPriority = getCurrentUpdatePriority();

    try {
      ReactCurrentBatchConfig$3.transition = null;
      setCurrentUpdatePriority(priority);
      return flushPassiveEffectsImpl();
    } finally {
      setCurrentUpdatePriority(previousPriority);
      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
    }
  }

  return false;
}
function enqueuePendingPassiveProfilerEffect(fiber) {
  {
    pendingPassiveProfilerEffects.push(fiber);

    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      scheduleCallback$1(NormalPriority, function () {
        flushPassiveEffects();
        return null;
      });
    }
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  } // Cache and clear the transitions flag


  var transitions = pendingPassiveTransitions;
  pendingPassiveTransitions = null;
  var root = rootWithPendingPassiveEffects;
  var lanes = pendingPassiveEffectsLanes;
  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
  // Figure out why and fix it. It's not causing any known issues (probably
  // because it's only used for profiling), but it's a refactor hazard.

  pendingPassiveEffectsLanes = NoLanes;

  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    throw new Error('Cannot flush passive effects while already rendering.');
  }

  {
    isFlushingPassiveEffects = true;
    didScheduleUpdateDuringPassiveEffects = false;
  }

  {
    markPassiveEffectsStarted(lanes);
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  commitPassiveUnmountEffects(root.current);
  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

  {
    var profilerEffects = pendingPassiveProfilerEffects;
    pendingPassiveProfilerEffects = [];

    for (var i = 0; i < profilerEffects.length; i++) {
      var _fiber = profilerEffects[i];
      commitPassiveEffectDurations(root, _fiber);
    }
  }

  {
    markPassiveEffectsStopped();
  }

  {
    commitDoubleInvokeEffectsInDEV(root.current, true);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbacks();

  {
    // If additional passive effects were scheduled, increment a counter. If this
    // exceeds the limit, we'll fire a warning.
    if (didScheduleUpdateDuringPassiveEffects) {
      if (root === rootWithPassiveNestedUpdates) {
        nestedPassiveUpdateCount++;
      } else {
        nestedPassiveUpdateCount = 0;
        rootWithPassiveNestedUpdates = root;
      }
    } else {
      nestedPassiveUpdateCount = 0;
    }

    isFlushingPassiveEffects = false;
    didScheduleUpdateDuringPassiveEffects = false;
  } // TODO: Move to commitPassiveMountEffects


  onPostCommitRoot(root);

  {
    var stateNode = root.current.stateNode;
    stateNode.effectDuration = 0;
    stateNode.passiveEffectDuration = 0;
  }

  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
  var root = enqueueUpdate(rootFiber, update, SyncLane);
  var eventTime = requestEventTime();

  if (root !== null) {
    markRootUpdated(root, SyncLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
  }
}

function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
  {
    reportUncaughtErrorInDEV(error$1);
    setIsRunningInsertionEffect(false);
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
    return;
  }

  var fiber = null;

  {
    fiber = nearestMountedAncestor;
  }

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
        var root = enqueueUpdate(fiber, update, SyncLane);
        var eventTime = requestEventTime();

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
        }

        return;
      }
    }

    fiber = fiber.return;
  }

  {
    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
    // will fire for errors that are thrown by destroy functions inside deleted
    // trees. What it should instead do is propagate the error to the parent of
    // the deleted tree. In the meantime, do not add this warning to the
    // allowlist; this is only for our internal use.
    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
  }
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(wakeable);
  }

  var eventTime = requestEventTime();
  markRootPinged(root, pingedLanes);
  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, or if it's a retry, we'll always suspend
    // so we can always restart.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root.
      prepareFreshStack(root, NoLanes);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
    }
  }

  ensureRootIsScheduled(root, eventTime);
}

function retryTimedOutBoundary(boundaryFiber, retryLane) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new lanes.
  if (retryLane === NoLane) {
    // TODO: Assign this to `suspenseState.retryLane`? to avoid
    // unnecessary entanglement?
    retryLane = requestRetryLane(boundaryFiber);
  } // TODO: Special case idle priority?


  var eventTime = requestEventTime();
  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

  if (root !== null) {
    markRootUpdated(root, retryLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
  }
}

function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState;
  var retryLane = NoLane;

  if (suspenseState !== null) {
    retryLane = suspenseState.retryLane;
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = NoLane; // Default

  var retryCache;

  switch (boundaryFiber.tag) {
    case SuspenseComponent:
      retryCache = boundaryFiber.stateNode;
      var suspenseState = boundaryFiber.memoizedState;

      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }

      break;

    case SuspenseListComponent:
      retryCache = boundaryFiber.stateNode;
      break;

    default:
      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
  }

  if (retryCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(wakeable);
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;
    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;
      rootWithPassiveNestedUpdates = null;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
  {
    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
    // Maybe not a big deal since this is DEV only behavior.
    setCurrentFiber(fiber);
    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

    if (hasPassiveEffects) {
      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
    }

    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

    if (hasPassiveEffects) {
      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
    }

    resetCurrentFiber();
  }
}

function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
  {
    // We don't need to re-check StrictEffectsMode here.
    // This function is only called if that check has already passed.
    var current = firstChild;
    var subtreeRoot = null;

    while (current !== null) {
      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
        current = current.child;
      } else {
        if ((current.flags & fiberFlags) !== NoFlags) {
          invokeEffectFn(current);
        }

        if (current.sibling !== null) {
          current = current.sibling;
        } else {
          current = subtreeRoot = current.return;
        }
      }
    }
  }
}

var didWarnStateUpdateForNotYetMountedComponent = null;
function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
  {
    if ((executionContext & RenderContext) !== NoContext) {
      // We let the other warning about render phase updates deal with this one.
      return;
    }

    if (!(fiber.mode & ConcurrentMode)) {
      return;
    }

    var tag = fiber.tag;

    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
    }

    var previousFiber = current;

    try {
      setCurrentFiber(fiber);

      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
    } finally {
      if (previousFiber) {
        setCurrentFiber(fiber);
      } else {
        resetCurrentFiber();
      }
    }
  }
}
var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, lanes) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, lanes);
    } catch (originalError) {
      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises.
        // Don't replay errors if we are hydrating and have already suspended or handled an error
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

      if (hasCaughtError()) {
        var replayError = clearCaughtError();

        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
          originalError._suppressLogging = true;
        }
      } // We always throw the original error in case the second render pass is not idempotent.
      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


      throw originalError;
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
}

function restorePendingUpdaters(root, lanes) {
  {
    if (isDevToolsPresent) {
      var memoizedUpdaters = root.memoizedUpdaters;
      memoizedUpdaters.forEach(function (schedulingFiber) {
        addFiberToLanesMap(root, schedulingFiber, lanes);
      }); // This function intentionally does not clear memoized updaters.
      // Those may still be relevant to the current commit
      // and a future one (e.g. Suspense).
    }
  }
}
var fakeActCallbackNode = {};

function scheduleCallback$1(priorityLevel, callback) {
  {
    // If we're currently inside an `act` scope, bypass Scheduler and push to
    // the `act` queue instead.
    var actQueue = ReactCurrentActQueue$1.current;

    if (actQueue !== null) {
      actQueue.push(callback);
      return fakeActCallbackNode;
    } else {
      return scheduleCallback(priorityLevel, callback);
    }
  }
}

function cancelCallback$1(callbackNode) {
  if ( callbackNode === fakeActCallbackNode) {
    return;
  } // In production, always call Scheduler. This function will be stripped out.


  return cancelCallback(callbackNode);
}

function shouldForceFlushFallbacksInDEV() {
  // Never force flush in production. This function should get stripped out.
  return  ReactCurrentActQueue$1.current !== null;
}

function warnIfUpdatesNotWrappedWithActDEV(fiber) {
  {
    if (fiber.mode & ConcurrentMode) {
      if (!isConcurrentActEnvironment()) {
        // Not in an act environment. No need to warn.
        return;
      }
    } else {
      // Legacy mode has additional cases where we suppress a warning.
      if (!isLegacyActEnvironment()) {
        // Not in an act environment. No need to warn.
        return;
      }

      if (executionContext !== NoContext) {
        // Legacy mode doesn't warn if the update is batched, i.e.
        // batchedUpdates or flushSync.
        return;
      }

      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
        // For backwards compatibility with pre-hooks code, legacy mode only
        // warns for updates that originate from a hook.
        return;
      }
    }

    if (ReactCurrentActQueue$1.current === null) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
  {
    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
    }
  }
}

function setIsRunningInsertionEffect(isRunning) {
  {
    isRunningInsertionEffect = isRunning;
  }
}

/* eslint-disable react-internal/prod-error-codes */
var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    flushSync(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (_root !== null) {
        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
      }
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */

    new Map([[nonExtensibleObject, null]]);
    new Set([nonExtensibleObject]);
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.flags = NoFlags;
  this.subtreeFlags = NoFlags;
  this.deletions = null;
  this.lanes = NoLanes;
  this.childLanes = NoLanes;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    // This isn't directly used but is handy for debugging internals:
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct$1(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.flags = NoFlags; // The effects are no longer valid.

    workInProgress.subtreeFlags = NoFlags;
    workInProgress.deletions = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  } // Reset all effects except static ones.
  // Static effects are not specific to a render.


  workInProgress.flags = current.flags & StaticMask;
  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    lanes: currentDependencies.lanes,
    firstContext: currentDependencies.firstContext
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderLanes) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect flags but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childLanes = NoLanes;
    workInProgress.lanes = renderLanes;
    workInProgress.child = null;
    workInProgress.subtreeFlags = NoFlags;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;
    workInProgress.stateNode = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.subtreeFlags = NoFlags;
    workInProgress.deletions = null;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      lanes: currentDependencies.lanes,
      firstContext: currentDependencies.firstContext
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode;

    if (isStrictMode === true) {
      mode |= StrictLegacyMode;

      {
        mode |= StrictEffectsMode;
      }
    }
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, lanes) {
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct$1(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictLegacyMode;

        if ( (mode & ConcurrentMode) !== NoMode) {
          // Strict effects should never run on legacy roots
          mode |= StrictEffectsMode;
        }

        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

      case REACT_LEGACY_HIDDEN_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_SCOPE_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_CACHE_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_TRACING_MARKER_TYPE:

      // eslint-disable-next-line no-fallthrough

      case REACT_DEBUG_TRACING_MODE_TYPE:

      // eslint-disable-next-line no-fallthrough

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;
            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
    }
  }

  var fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.lanes = lanes;

  {
    fiber._debugOwner = owner;
  }

  return fiber;
}
function createFiberFromElement(element, mode, lanes) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.lanes = lanes;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, lanes, key) {
  {
    if (typeof pendingProps.id !== 'string') {
      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.lanes = lanes;

  {
    fiber.stateNode = {
      effectDuration: 0,
      passiveEffectDuration: 0
    };
  }

  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
  fiber.elementType = REACT_OFFSCREEN_TYPE;
  fiber.lanes = lanes;
  var primaryChildInstance = {
    isHidden: false
  };
  fiber.stateNode = primaryChildInstance;
  return fiber;
}
function createFiberFromText(content, mode, lanes) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode);
  fiber.elementType = 'DELETED';
  return fiber;
}
function createFiberFromDehydratedFragment(dehydratedNode) {
  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
  fiber.stateNode = dehydratedNode;
  return fiber;
}
function createFiberFromPortal(portal, mode, lanes) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.lanes = lanes;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.flags = source.flags;
  target.subtreeFlags = source.subtreeFlags;
  target.deletions = source.deletions;
  target.lanes = source.lanes;
  target.childLanes = source.childLanes;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
  this.tag = tag;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.current = null;
  this.pingCache = null;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.callbackNode = null;
  this.callbackPriority = NoLane;
  this.eventTimes = createLaneMap(NoLanes);
  this.expirationTimes = createLaneMap(NoTimestamp);
  this.pendingLanes = NoLanes;
  this.suspendedLanes = NoLanes;
  this.pingedLanes = NoLanes;
  this.expiredLanes = NoLanes;
  this.mutableReadLanes = NoLanes;
  this.finishedLanes = NoLanes;
  this.entangledLanes = NoLanes;
  this.entanglements = createLaneMap(NoLanes);
  this.identifierPrefix = identifierPrefix;
  this.onRecoverableError = onRecoverableError;

  {
    this.mutableSourceEagerHydrationData = null;
  }

  {
    this.effectDuration = 0;
    this.passiveEffectDuration = 0;
  }

  {
    this.memoizedUpdaters = new Set();
    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

    for (var _i = 0; _i < TotalLanes; _i++) {
      pendingUpdatersLaneMap.push(new Set());
    }
  }

  {
    switch (tag) {
      case ConcurrentRoot:
        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
        break;

      case LegacyRoot:
        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
        break;
    }
  }
}

function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
// host config, but because they are passed in at runtime, we have to thread
// them through the root constructor. Perhaps we should put them all into a
// single type, like a DynamicHostConfig that is defined by the renderer.
identifierPrefix, onRecoverableError, transitionCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;

  {
    var _initialState = {
      element: initialChildren,
      isDehydrated: hydrate,
      cache: null,
      // not enabled yet
      transitions: null,
      pendingSuspenseBoundaries: null
    };
    uninitializedFiber.memoizedState = _initialState;
  }

  initializeUpdateQueue(uninitializedFiber);
  return root;
}

var ReactVersion = '18.3.1';

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  {
    checkKeyStringCoercion(key);
  }

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        throw new Error('Unable to find node on an unmounted component.');
      } else {
        var keys = Object.keys(component).join(',');
        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictLegacyMode) {
      var componentName = getComponentNameFromFiber(fiber) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;
        var previousFiber = current;

        try {
          setCurrentFiber(hostFiber);

          if (fiber.mode & StrictLegacyMode) {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          } else {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          }
        } finally {
          // Ideally this should reset to previous but this shouldn't be called in
          // render and there's another warning for that anyway.
          if (previousFiber) {
            setCurrentFiber(previousFiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
  var hydrate = false;
  var initialChildren = null;
  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
}
function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
  var hydrate = true;
  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
  // a regular update because the initial render must match was was rendered
  // on the server.
  // NOTE: This update intentionally doesn't have a payload. We're only using
  // the update to schedule work on the root fiber (and, for legacy roots, to
  // enqueue the callback if one is provided).

  var current = root.current;
  var eventTime = requestEventTime();
  var lane = requestUpdateLane(current);
  var update = createUpdate(eventTime, lane);
  update.callback = callback !== undefined && callback !== null ? callback : null;
  enqueueUpdate(current, update, lane);
  scheduleInitialHydrationOnRoot(root, lane, eventTime);
  return root;
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var eventTime = requestEventTime();
  var lane = requestUpdateLane(current$1);

  {
    markRenderScheduled(lane);
  }

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
    }
  }

  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  var root = enqueueUpdate(current$1, update, lane);

  if (root !== null) {
    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
    entangleTransitions(root, current$1, lane);
  }

  return lane;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration$1(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      {
        var root = fiber.stateNode;

        if (isRootDehydrated(root)) {
          // Flush the first scheduled "update".
          var lanes = getHighestPriorityPendingLanes(root);
          flushRoot(root, lanes);
        }

        break;
      }

    case SuspenseComponent:
      {
        flushSync(function () {
          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

          if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
          }
        }); // If we're still blocked after this, we need to increase
        // the priority of any promises resolving within this
        // boundary so that they next attempt also has higher pri.

        var retryLane = SyncLane;
        markRetryLaneIfNotHydrated(fiber, retryLane);
        break;
      }
  }
}

function markRetryLaneImpl(fiber, retryLane) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
  }
} // Increases the priority of thenables when they resolve within this boundary.


function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryLaneImpl(alternate, retryLane);
  }
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var lane = SelectiveHydrationLane;
  var root = enqueueConcurrentRenderForLane(fiber, lane);

  if (root !== null) {
    var eventTime = requestEventTime();
    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
  }

  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var lane = requestUpdateLane(fiber);
  var root = enqueueConcurrentRenderForLane(fiber, lane);

  if (root !== null) {
    var eventTime = requestEventTime();
    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
  }

  markRetryLaneIfNotHydrated(fiber, lane);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

var shouldErrorImpl = function (fiber) {
  return null;
};

function shouldError(fiber) {
  return shouldErrorImpl(fiber);
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideHookStateDeletePath = null;
var overrideHookStateRenamePath = null;
var overrideProps = null;
var overridePropsDeletePath = null;
var overridePropsRenamePath = null;
var scheduleUpdate = null;
var setErrorHandler = null;
var setSuspenseHandler = null;

{
  var copyWithDeleteImpl = function (obj, path, index) {
    var key = path[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

    if (index + 1 === path.length) {
      if (isArray(updated)) {
        updated.splice(key, 1);
      } else {
        delete updated[key];
      }

      return updated;
    } // $FlowFixMe number or string is fine here


    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
    return updated;
  };

  var copyWithDelete = function (obj, path) {
    return copyWithDeleteImpl(obj, path, 0);
  };

  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
    var oldKey = oldPath[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

    if (index + 1 === oldPath.length) {
      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

      updated[newKey] = updated[oldKey];

      if (isArray(updated)) {
        updated.splice(oldKey, 1);
      } else {
        delete updated[oldKey];
      }
    } else {
      // $FlowFixMe number or string is fine here
      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
      obj[oldKey], oldPath, newPath, index + 1);
    }

    return updated;
  };

  var copyWithRename = function (obj, oldPath, newPath) {
    if (oldPath.length !== newPath.length) {
      warn('copyWithRename() expects paths of the same length');

      return;
    } else {
      for (var i = 0; i < newPath.length - 1; i++) {
        if (oldPath[i] !== newPath[i]) {
          warn('copyWithRename() expects paths to be the same except for the deepest key');

          return;
        }
      }
    }

    return copyWithRenameImpl(obj, oldPath, newPath, 0);
  };

  var copyWithSetImpl = function (obj, path, index, value) {
    if (index >= path.length) {
      return value;
    }

    var key = path[index];
    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  };

  var findHook = function (fiber, id) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    return currentHook;
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithSet(hook.memoizedState, path, value);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  };

  overrideHookStateDeletePath = function (fiber, id, path) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithDelete(hook.memoizedState, path);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  };

  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = assign({}, fiber.memoizedProps);
      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

      if (root !== null) {
        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
      }
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  overridePropsDeletePath = function (fiber, path) {
    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  overridePropsRenamePath = function (fiber, oldPath, newPath) {
    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  scheduleUpdate = function (fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

    if (root !== null) {
      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
  };

  setErrorHandler = function (newShouldErrorImpl) {
    shouldErrorImpl = newShouldErrorImpl;
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function findHostInstanceByFiber(fiber) {
  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function emptyFindFiberByHostInstance(instance) {
  return null;
}

function getCurrentFiberForDevTools() {
  return current;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals({
    bundleType: devToolsConfig.bundleType,
    version: devToolsConfig.version,
    rendererPackageName: devToolsConfig.rendererPackageName,
    rendererConfig: devToolsConfig.rendererConfig,
    overrideHookState: overrideHookState,
    overrideHookStateDeletePath: overrideHookStateDeletePath,
    overrideHookStateRenamePath: overrideHookStateRenamePath,
    overrideProps: overrideProps,
    overridePropsDeletePath: overridePropsDeletePath,
    overridePropsRenamePath: overridePropsRenamePath,
    setErrorHandler: setErrorHandler,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: findHostInstanceByFiber,
    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  getCurrentFiberForDevTools ,
    // Enables DevTools to detect reconciler version rather than renderer version
    // which may not match for third party renderers.
    reconcilerVersion: ReactVersion
  });
}

/* global reportError */

var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
// emulating an uncaught JavaScript error.
reportError : function (error) {
  // In older browsers and test environments, fallback to console.error.
  // eslint-disable-next-line react-internal/no-production-logging
  console['error'](error);
};

function ReactDOMRoot(internalRoot) {
  this._internalRoot = internalRoot;
}

ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  if (root === null) {
    throw new Error('Cannot update an unmounted root.');
  }

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    } else if (isValidContainer(arguments[1])) {
      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
    } else if (typeof arguments[1] !== 'undefined') {
      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;

  if (root !== null) {
    this._internalRoot = null;
    var container = root.containerInfo;

    {
      if (isAlreadyRendering()) {
        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
      }
    }

    flushSync(function () {
      updateContainer(null, root, null, null);
    });
    unmarkContainerAsRoot(container);
  }
};

function createRoot(container, options) {
  if (!isValidContainer(container)) {
    throw new Error('createRoot(...): Target container is not a DOM element.');
  }

  warnIfReactDOMContainerInDEV(container);
  var isStrictMode = false;
  var concurrentUpdatesByDefaultOverride = false;
  var identifierPrefix = '';
  var onRecoverableError = defaultOnRecoverableError;
  var transitionCallbacks = null;

  if (options !== null && options !== undefined) {
    {
      if (options.hydrate) {
        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
      } else {
        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
        }
      }
    }

    if (options.unstable_strictMode === true) {
      isStrictMode = true;
    }

    if (options.identifierPrefix !== undefined) {
      identifierPrefix = options.identifierPrefix;
    }

    if (options.onRecoverableError !== undefined) {
      onRecoverableError = options.onRecoverableError;
    }

    if (options.transitionCallbacks !== undefined) {
      transitionCallbacks = options.transitionCallbacks;
    }
  }

  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
  markContainerAsRoot(root.current, container);
  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
  listenToAllSupportedEvents(rootContainerElement);
  return new ReactDOMRoot(root);
}

function ReactDOMHydrationRoot(internalRoot) {
  this._internalRoot = internalRoot;
}

function scheduleHydration(target) {
  if (target) {
    queueExplicitHydrationTarget(target);
  }
}

ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
function hydrateRoot(container, initialChildren, options) {
  if (!isValidContainer(container)) {
    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
  }

  warnIfReactDOMContainerInDEV(container);

  {
    if (initialChildren === undefined) {
      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
    }
  } // For now we reuse the whole bag of options since they contain
  // the hydration callbacks.


  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

  var mutableSources = options != null && options.hydratedSources || null;
  var isStrictMode = false;
  var concurrentUpdatesByDefaultOverride = false;
  var identifierPrefix = '';
  var onRecoverableError = defaultOnRecoverableError;

  if (options !== null && options !== undefined) {
    if (options.unstable_strictMode === true) {
      isStrictMode = true;
    }

    if (options.identifierPrefix !== undefined) {
      identifierPrefix = options.identifierPrefix;
    }

    if (options.onRecoverableError !== undefined) {
      onRecoverableError = options.onRecoverableError;
    }
  }

  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

  listenToAllSupportedEvents(container);

  if (mutableSources) {
    for (var i = 0; i < mutableSources.length; i++) {
      var mutableSource = mutableSources[i];
      registerMutableSourceForHydration(root, mutableSource);
    }
  }

  return new ReactDOMHydrationRoot(root);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
} // TODO: Remove this function which also includes comment nodes.
// We only use it in places that are currently more relaxed.

function isValidContainerLegacy(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function warnIfReactDOMContainerInDEV(container) {
  {
    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
    }

    if (isContainerMarkedAsRoot(container)) {
      if (container._reactRootContainer) {
        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
      } else {
        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
      }
    }
  }
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
  // legacy API.
}

function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
  if (isHydrationContainer) {
    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(root);
        originalCallback.call(instance);
      };
    }

    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
    false, // isStrictMode
    false, // concurrentUpdatesByDefaultOverride,
    '', // identifierPrefix
    noopOnRecoverableError);
    container._reactRootContainer = root;
    markContainerAsRoot(root.current, container);
    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
    listenToAllSupportedEvents(rootContainerElement);
    flushSync();
    return root;
  } else {
    // First clear any existing content.
    var rootSibling;

    while (rootSibling = container.lastChild) {
      container.removeChild(rootSibling);
    }

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(_root);

        _originalCallback.call(instance);
      };
    }

    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
    false, // isStrictMode
    false, // concurrentUpdatesByDefaultOverride,
    '', // identifierPrefix
    noopOnRecoverableError);

    container._reactRootContainer = _root;
    markContainerAsRoot(_root.current, container);

    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

    flushSync(function () {
      updateContainer(initialChildren, _root, parentComponent, callback);
    });
    return _root;
  }
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  }

  var maybeRoot = container._reactRootContainer;
  var root;

  if (!maybeRoot) {
    // Initial mount
    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
  } else {
    root = maybeRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(root);
        originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, root, parentComponent, callback);
  }

  return getPublicRootInstance(root);
}

var didWarnAboutFindDOMNode = false;
function findDOMNode(componentOrElement) {
  {
    if (!didWarnAboutFindDOMNode) {
      didWarnAboutFindDOMNode = true;

      error('findDOMNode is deprecated and will be removed in the next major ' + 'release. Instead, add a ref directly to the element you want ' + 'to reference. Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node');
    }

    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  {
    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  {
    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  {
    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
  }

  if (!isValidContainerLegacy(containerNode)) {
    throw new Error('Target container is not a DOM element.');
  }

  if (parentComponent == null || !has(parentComponent)) {
    throw new Error('parentComponent must be a valid React Component');
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
var didWarnAboutUnmountComponentAtNode = false;
function unmountComponentAtNode(container) {
  {
    if (!didWarnAboutUnmountComponentAtNode) {
      didWarnAboutUnmountComponentAtNode = true;

      error('unmountComponentAtNode is deprecated and will be removed in the ' + 'next major release. Switch to the createRoot API. Learn ' + 'more: https://reactjs.org/link/switch-to-createroot');
    }
  }

  if (!isValidContainerLegacy(container)) {
    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    flushSync(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

setAttemptSynchronousHydration(attemptSynchronousHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
setGetCurrentUpdatePriority(getCurrentUpdatePriority);
setAttemptHydrationAtPriority(runWithPriority);

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    throw new Error('Target container is not a DOM element.');
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

var Internals = {
  usingClientEntryPoint: false,
  // Keep in sync with ReactTestUtils.js.
  // This is an array for better minification.
  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
};

function createRoot$1(container, options) {
  {
    if (!Internals.usingClientEntryPoint && !false) {
      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
    }
  }

  return createRoot(container, options);
}

function hydrateRoot$1(container, initialChildren, options) {
  {
    if (!Internals.usingClientEntryPoint && !false) {
      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
    }
  }

  return hydrateRoot(container, initialChildren, options);
} // Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.


// eslint-disable-next-line no-redeclare
function flushSync$1(fn) {
  {
    if (isAlreadyRendering()) {
      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
    }
  }

  return flushSync(fn);
}
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.createRoot = createRoot$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync$1;
exports.hydrate = hydrate;
exports.hydrateRoot = hydrateRoot$1;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "../../node_modules/react-dom/client.js":
/*!**********************************************!*\
  !*** ../../node_modules/react-dom/client.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var m = __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js");
if (false) {} else {
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
  exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.hydrateRoot(c, h, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}


/***/ }),

/***/ "../../node_modules/react-dom/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/react-dom/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "../../node_modules/react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "../../node_modules/react-is/cjs/react-is.development.js":
/*!***************************************************************!*\
  !*** ../../node_modules/react-is/cjs/react-is.development.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),

/***/ "../../node_modules/react-is/index.js":
/*!********************************************!*\
  !*** ../../node_modules/react-is/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "../../node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "../../node_modules/react-zoom-pan-pinch/dist/index.esm.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/react-zoom-pan-pinch/dist/index.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Context: () => (/* binding */ Context),
/* harmony export */   KeepScale: () => (/* binding */ KeepScale),
/* harmony export */   MiniMap: () => (/* binding */ MiniMap),
/* harmony export */   TransformComponent: () => (/* binding */ TransformComponent),
/* harmony export */   TransformWrapper: () => (/* binding */ TransformWrapper),
/* harmony export */   getCenterPosition: () => (/* binding */ getCenterPosition),
/* harmony export */   getMatrixTransformStyles: () => (/* binding */ getMatrixTransformStyles),
/* harmony export */   getTransformStyles: () => (/* binding */ getTransformStyles),
/* harmony export */   useControls: () => (/* binding */ useControls),
/* harmony export */   useTransformComponent: () => (/* binding */ useTransformComponent),
/* harmony export */   useTransformContext: () => (/* binding */ useTransformContext),
/* harmony export */   useTransformEffect: () => (/* binding */ useTransformEffect),
/* harmony export */   useTransformInit: () => (/* binding */ useTransformInit)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Rounds number to given decimal
 * eg. roundNumber(2.34343, 1) => 2.3
 */
var roundNumber = function (num, decimal) {
    return Number(num.toFixed(decimal));
};
/**
 * Checks if value is number, if not it returns default value
 * 1# eg. checkIsNumber(2, 30) => 2
 * 2# eg. checkIsNumber(null, 30) => 30
 */
var checkIsNumber = function (num, defaultValue) {
    return typeof num === "number" ? num : defaultValue;
};

var handleCallback = function (context, event, callback) {
    if (callback && typeof callback === "function") {
        callback(context, event);
    }
};

/* eslint-disable no-plusplus */
/* eslint-disable no-param-reassign */
/**
 * Functions should return denominator of the target value, which is the next animation step.
 * t is a value from 0 to 1, reflecting the percentage of animation status.
 */
var easeOut = function (t) {
    return -Math.cos(t * Math.PI) / 2 + 0.5;
};
// linear
var linear = function (t) {
    return t;
};
// accelerating from zero velocity
var easeInQuad = function (t) {
    return t * t;
};
// decelerating to zero velocity
var easeOutQuad = function (t) {
    return t * (2 - t);
};
// acceleration until halfway, then deceleration
var easeInOutQuad = function (t) {
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
};
// accelerating from zero velocity
var easeInCubic = function (t) {
    return t * t * t;
};
// decelerating to zero velocity
var easeOutCubic = function (t) {
    return --t * t * t + 1;
};
// acceleration until halfway, then deceleration
var easeInOutCubic = function (t) {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
};
// accelerating from zero velocity
var easeInQuart = function (t) {
    return t * t * t * t;
};
// decelerating to zero velocity
var easeOutQuart = function (t) {
    return 1 - --t * t * t * t;
};
// acceleration until halfway, then deceleration
var easeInOutQuart = function (t) {
    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
};
// accelerating from zero velocity
var easeInQuint = function (t) {
    return t * t * t * t * t;
};
// decelerating to zero velocity
var easeOutQuint = function (t) {
    return 1 + --t * t * t * t * t;
};
// acceleration until halfway, then deceleration
var easeInOutQuint = function (t) {
    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
};
var animations = {
    easeOut: easeOut,
    linear: linear,
    easeInQuad: easeInQuad,
    easeOutQuad: easeOutQuad,
    easeInOutQuad: easeInOutQuad,
    easeInCubic: easeInCubic,
    easeOutCubic: easeOutCubic,
    easeInOutCubic: easeInOutCubic,
    easeInQuart: easeInQuart,
    easeOutQuart: easeOutQuart,
    easeInOutQuart: easeInOutQuart,
    easeInQuint: easeInQuint,
    easeOutQuint: easeOutQuint,
    easeInOutQuint: easeInOutQuint,
};

/* eslint-disable no-param-reassign */
var handleCancelAnimationFrame = function (animation) {
    if (typeof animation === "number") {
        cancelAnimationFrame(animation);
    }
};
var handleCancelAnimation = function (contextInstance) {
    if (!contextInstance.mounted)
        return;
    handleCancelAnimationFrame(contextInstance.animation);
    // Clear animation state
    contextInstance.animate = false;
    contextInstance.animation = null;
    contextInstance.velocity = null;
};
function handleSetupAnimation(contextInstance, animationName, animationTime, callback) {
    if (!contextInstance.mounted)
        return;
    var startTime = new Date().getTime();
    var lastStep = 1;
    // if another animation is active
    handleCancelAnimation(contextInstance);
    // new animation
    contextInstance.animation = function () {
        if (!contextInstance.mounted) {
            return handleCancelAnimationFrame(contextInstance.animation);
        }
        var frameTime = new Date().getTime() - startTime;
        var animationProgress = frameTime / animationTime;
        var animationType = animations[animationName];
        var step = animationType(animationProgress);
        if (frameTime >= animationTime) {
            callback(lastStep);
            contextInstance.animation = null;
        }
        else if (contextInstance.animation) {
            callback(step);
            requestAnimationFrame(contextInstance.animation);
        }
    };
    requestAnimationFrame(contextInstance.animation);
}
function isValidTargetState(targetState) {
    var scale = targetState.scale, positionX = targetState.positionX, positionY = targetState.positionY;
    if (Number.isNaN(scale) ||
        Number.isNaN(positionX) ||
        Number.isNaN(positionY)) {
        return false;
    }
    return true;
}
function animate(contextInstance, targetState, animationTime, animationName) {
    var isValid = isValidTargetState(targetState);
    if (!contextInstance.mounted || !isValid)
        return;
    var setTransformState = contextInstance.setTransformState;
    var _a = contextInstance.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
    var scaleDiff = targetState.scale - scale;
    var positionXDiff = targetState.positionX - positionX;
    var positionYDiff = targetState.positionY - positionY;
    if (animationTime === 0) {
        setTransformState(targetState.scale, targetState.positionX, targetState.positionY);
    }
    else {
        // animation start timestamp
        handleSetupAnimation(contextInstance, animationName, animationTime, function (step) {
            var newScale = scale + scaleDiff * step;
            var newPositionX = positionX + positionXDiff * step;
            var newPositionY = positionY + positionYDiff * step;
            setTransformState(newScale, newPositionX, newPositionY);
        });
    }
}

/* eslint-disable no-param-reassign */
function getComponentsSizes(wrapperComponent, contentComponent, newScale) {
    var wrapperWidth = wrapperComponent.offsetWidth;
    var wrapperHeight = wrapperComponent.offsetHeight;
    var contentWidth = contentComponent.offsetWidth;
    var contentHeight = contentComponent.offsetHeight;
    var newContentWidth = contentWidth * newScale;
    var newContentHeight = contentHeight * newScale;
    var newDiffWidth = wrapperWidth - newContentWidth;
    var newDiffHeight = wrapperHeight - newContentHeight;
    return {
        wrapperWidth: wrapperWidth,
        wrapperHeight: wrapperHeight,
        newContentWidth: newContentWidth,
        newDiffWidth: newDiffWidth,
        newContentHeight: newContentHeight,
        newDiffHeight: newDiffHeight,
    };
}
var getBounds = function (wrapperWidth, newContentWidth, diffWidth, wrapperHeight, newContentHeight, diffHeight, centerZoomedOut) {
    var scaleWidthFactor = wrapperWidth > newContentWidth
        ? diffWidth * (centerZoomedOut ? 1 : 0.5)
        : 0;
    var scaleHeightFactor = wrapperHeight > newContentHeight
        ? diffHeight * (centerZoomedOut ? 1 : 0.5)
        : 0;
    var minPositionX = wrapperWidth - newContentWidth - scaleWidthFactor;
    var maxPositionX = scaleWidthFactor;
    var minPositionY = wrapperHeight - newContentHeight - scaleHeightFactor;
    var maxPositionY = scaleHeightFactor;
    return { minPositionX: minPositionX, maxPositionX: maxPositionX, minPositionY: minPositionY, maxPositionY: maxPositionY };
};
var calculateBounds = function (contextInstance, newScale) {
    var wrapperComponent = contextInstance.wrapperComponent, contentComponent = contextInstance.contentComponent;
    var centerZoomedOut = contextInstance.setup.centerZoomedOut;
    if (!wrapperComponent || !contentComponent) {
        throw new Error("Components are not mounted");
    }
    var _a = getComponentsSizes(wrapperComponent, contentComponent, newScale), wrapperWidth = _a.wrapperWidth, wrapperHeight = _a.wrapperHeight, newContentWidth = _a.newContentWidth, newDiffWidth = _a.newDiffWidth, newContentHeight = _a.newContentHeight, newDiffHeight = _a.newDiffHeight;
    var bounds = getBounds(wrapperWidth, newContentWidth, newDiffWidth, wrapperHeight, newContentHeight, newDiffHeight, Boolean(centerZoomedOut));
    return bounds;
};
/**
 * Keeps value between given bounds, used for limiting view to given boundaries
 * 1# eg. boundLimiter(2, 0, 3, true) => 2
 * 2# eg. boundLimiter(4, 0, 3, true) => 3
 * 3# eg. boundLimiter(-2, 0, 3, true) => 0
 * 4# eg. boundLimiter(10, 0, 3, false) => 10
 */
var boundLimiter = function (value, minBound, maxBound, isActive) {
    if (!isActive)
        return roundNumber(value, 2);
    if (value < minBound)
        return roundNumber(minBound, 2);
    if (value > maxBound)
        return roundNumber(maxBound, 2);
    return roundNumber(value, 2);
};
var handleCalculateBounds = function (contextInstance, newScale) {
    var bounds = calculateBounds(contextInstance, newScale);
    // Save bounds
    contextInstance.bounds = bounds;
    return bounds;
};
function getMouseBoundedPosition(positionX, positionY, bounds, limitToBounds, paddingValueX, paddingValueY, wrapperComponent) {
    var minPositionX = bounds.minPositionX, minPositionY = bounds.minPositionY, maxPositionX = bounds.maxPositionX, maxPositionY = bounds.maxPositionY;
    var paddingX = 0;
    var paddingY = 0;
    if (wrapperComponent) {
        paddingX = paddingValueX;
        paddingY = paddingValueY;
    }
    var x = boundLimiter(positionX, minPositionX - paddingX, maxPositionX + paddingX, limitToBounds);
    var y = boundLimiter(positionY, minPositionY - paddingY, maxPositionY + paddingY, limitToBounds);
    return { x: x, y: y };
}

function handleCalculateZoomPositions(contextInstance, mouseX, mouseY, newScale, bounds, limitToBounds) {
    var _a = contextInstance.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
    var scaleDifference = newScale - scale;
    if (typeof mouseX !== "number" || typeof mouseY !== "number") {
        console.error("Mouse X and Y position were not provided!");
        return { x: positionX, y: positionY };
    }
    var calculatedPositionX = positionX - mouseX * scaleDifference;
    var calculatedPositionY = positionY - mouseY * scaleDifference;
    // do not limit to bounds when there is padding animation,
    // it causes animation strange behaviour
    var newPositions = getMouseBoundedPosition(calculatedPositionX, calculatedPositionY, bounds, limitToBounds, 0, 0, null);
    return newPositions;
}
function checkZoomBounds(zoom, minScale, maxScale, zoomPadding, enablePadding) {
    var scalePadding = enablePadding ? zoomPadding : 0;
    var minScaleWithPadding = minScale - scalePadding;
    if (!Number.isNaN(maxScale) && zoom >= maxScale)
        return maxScale;
    if (!Number.isNaN(minScale) && zoom <= minScaleWithPadding)
        return minScaleWithPadding;
    return zoom;
}

var isPanningStartAllowed = function (contextInstance, event) {
    var excluded = contextInstance.setup.panning.excluded;
    var isInitialized = contextInstance.isInitialized, wrapperComponent = contextInstance.wrapperComponent;
    var target = event.target;
    var targetIsShadowDom = "shadowRoot" in target && "composedPath" in event;
    var isWrapperChild = targetIsShadowDom
        ? event.composedPath().some(function (el) {
            if (!(el instanceof Element)) {
                return false;
            }
            return wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.contains(el);
        })
        : wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.contains(target);
    var isAllowed = isInitialized && target && isWrapperChild;
    if (!isAllowed)
        return false;
    var isExcluded = isExcludedNode(target, excluded);
    if (isExcluded)
        return false;
    return true;
};
var isPanningAllowed = function (contextInstance) {
    var isInitialized = contextInstance.isInitialized, isPanning = contextInstance.isPanning, setup = contextInstance.setup;
    var disabled = setup.panning.disabled;
    var isAllowed = isInitialized && isPanning && !disabled;
    if (!isAllowed)
        return false;
    return true;
};
var handlePanningSetup = function (contextInstance, event) {
    var _a = contextInstance.transformState, positionX = _a.positionX, positionY = _a.positionY;
    contextInstance.isPanning = true;
    // Panning with mouse
    var x = event.clientX;
    var y = event.clientY;
    contextInstance.startCoords = { x: x - positionX, y: y - positionY };
};
var handleTouchPanningSetup = function (contextInstance, event) {
    var touches = event.touches;
    var _a = contextInstance.transformState, positionX = _a.positionX, positionY = _a.positionY;
    contextInstance.isPanning = true;
    // Panning with touch
    var oneFingerTouch = touches.length === 1;
    if (oneFingerTouch) {
        var x = touches[0].clientX;
        var y = touches[0].clientY;
        contextInstance.startCoords = { x: x - positionX, y: y - positionY };
    }
};
function handlePanToBounds(contextInstance) {
    var _a = contextInstance.transformState, positionX = _a.positionX, positionY = _a.positionY, scale = _a.scale;
    var _b = contextInstance.setup, disabled = _b.disabled, limitToBounds = _b.limitToBounds, centerZoomedOut = _b.centerZoomedOut;
    var wrapperComponent = contextInstance.wrapperComponent;
    if (disabled || !wrapperComponent || !contextInstance.bounds)
        return;
    var _c = contextInstance.bounds, maxPositionX = _c.maxPositionX, minPositionX = _c.minPositionX, maxPositionY = _c.maxPositionY, minPositionY = _c.minPositionY;
    var xChanged = positionX > maxPositionX || positionX < minPositionX;
    var yChanged = positionY > maxPositionY || positionY < minPositionY;
    var mousePosX = positionX > maxPositionX
        ? wrapperComponent.offsetWidth
        : contextInstance.setup.minPositionX || 0;
    var mousePosY = positionY > maxPositionY
        ? wrapperComponent.offsetHeight
        : contextInstance.setup.minPositionY || 0;
    var _d = handleCalculateZoomPositions(contextInstance, mousePosX, mousePosY, scale, contextInstance.bounds, limitToBounds || centerZoomedOut), x = _d.x, y = _d.y;
    return {
        scale: scale,
        positionX: xChanged ? x : positionX,
        positionY: yChanged ? y : positionY,
    };
}
function handleNewPosition(contextInstance, newPositionX, newPositionY, paddingValueX, paddingValueY) {
    var limitToBounds = contextInstance.setup.limitToBounds;
    var wrapperComponent = contextInstance.wrapperComponent, bounds = contextInstance.bounds;
    var _a = contextInstance.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
    if (wrapperComponent === null ||
        bounds === null ||
        (newPositionX === positionX && newPositionY === positionY)) {
        return;
    }
    var _b = getMouseBoundedPosition(newPositionX, newPositionY, bounds, limitToBounds, paddingValueX, paddingValueY, wrapperComponent), x = _b.x, y = _b.y;
    contextInstance.setTransformState(scale, x, y);
}
var getPanningClientPosition = function (contextInstance, clientX, clientY) {
    var startCoords = contextInstance.startCoords, transformState = contextInstance.transformState;
    var panning = contextInstance.setup.panning;
    var lockAxisX = panning.lockAxisX, lockAxisY = panning.lockAxisY;
    var positionX = transformState.positionX, positionY = transformState.positionY;
    if (!startCoords) {
        return { x: positionX, y: positionY };
    }
    var mouseX = clientX - startCoords.x;
    var mouseY = clientY - startCoords.y;
    var newPositionX = lockAxisX ? positionX : mouseX;
    var newPositionY = lockAxisY ? positionY : mouseY;
    return { x: newPositionX, y: newPositionY };
};
var getPaddingValue = function (contextInstance, size) {
    var setup = contextInstance.setup, transformState = contextInstance.transformState;
    var scale = transformState.scale;
    var minScale = setup.minScale, disablePadding = setup.disablePadding;
    if (size > 0 && scale >= minScale && !disablePadding) {
        return size;
    }
    return 0;
};

var isVelocityCalculationAllowed = function (contextInstance) {
    var mounted = contextInstance.mounted;
    var _a = contextInstance.setup, disabled = _a.disabled, velocityAnimation = _a.velocityAnimation;
    var scale = contextInstance.transformState.scale;
    var disabledVelocity = velocityAnimation.disabled;
    var isAllowed = !disabledVelocity || scale > 1 || !disabled || mounted;
    if (!isAllowed)
        return false;
    return true;
};
var isVelocityAllowed = function (contextInstance) {
    var mounted = contextInstance.mounted, velocity = contextInstance.velocity, bounds = contextInstance.bounds;
    var _a = contextInstance.setup, disabled = _a.disabled, velocityAnimation = _a.velocityAnimation;
    var scale = contextInstance.transformState.scale;
    var disabledVelocity = velocityAnimation.disabled;
    var isAllowed = !disabledVelocity || scale > 1 || !disabled || mounted;
    if (!isAllowed)
        return false;
    if (!velocity || !bounds)
        return false;
    return true;
};
function getVelocityMoveTime(contextInstance, velocity) {
    var velocityAnimation = contextInstance.setup.velocityAnimation;
    var equalToMove = velocityAnimation.equalToMove, animationTime = velocityAnimation.animationTime, sensitivity = velocityAnimation.sensitivity;
    if (equalToMove) {
        return animationTime * velocity * sensitivity;
    }
    return animationTime;
}
function getVelocityPosition(newPosition, startPosition, currentPosition, isLocked, limitToBounds, minPosition, maxPosition, minTarget, maxTarget, step) {
    if (limitToBounds) {
        if (startPosition > maxPosition && currentPosition > maxPosition) {
            var calculatedPosition = maxPosition + (newPosition - maxPosition) * step;
            if (calculatedPosition > maxTarget)
                return maxTarget;
            if (calculatedPosition < maxPosition)
                return maxPosition;
            return calculatedPosition;
        }
        if (startPosition < minPosition && currentPosition < minPosition) {
            var calculatedPosition = minPosition + (newPosition - minPosition) * step;
            if (calculatedPosition < minTarget)
                return minTarget;
            if (calculatedPosition > minPosition)
                return minPosition;
            return calculatedPosition;
        }
    }
    if (isLocked)
        return startPosition;
    return boundLimiter(newPosition, minPosition, maxPosition, limitToBounds);
}

function getSizeMultiplier(wrapperComponent, equalToMove) {
    var defaultMultiplier = 1;
    if (equalToMove) {
        return Math.min(defaultMultiplier, wrapperComponent.offsetWidth / window.innerWidth);
    }
    return defaultMultiplier;
}
function handleCalculateVelocity(contextInstance, position) {
    var isAllowed = isVelocityCalculationAllowed(contextInstance);
    if (!isAllowed) {
        return;
    }
    var lastMousePosition = contextInstance.lastMousePosition, velocityTime = contextInstance.velocityTime, setup = contextInstance.setup;
    var wrapperComponent = contextInstance.wrapperComponent;
    var equalToMove = setup.velocityAnimation.equalToMove;
    var now = Date.now();
    if (lastMousePosition && velocityTime && wrapperComponent) {
        var sizeMultiplier = getSizeMultiplier(wrapperComponent, equalToMove);
        var distanceX = position.x - lastMousePosition.x;
        var distanceY = position.y - lastMousePosition.y;
        var velocityX = distanceX / sizeMultiplier;
        var velocityY = distanceY / sizeMultiplier;
        var interval = now - velocityTime;
        var speed = distanceX * distanceX + distanceY * distanceY;
        var velocity = Math.sqrt(speed) / interval;
        contextInstance.velocity = { velocityX: velocityX, velocityY: velocityY, total: velocity };
    }
    contextInstance.lastMousePosition = position;
    contextInstance.velocityTime = now;
}
function handleVelocityPanning(contextInstance) {
    var velocity = contextInstance.velocity, bounds = contextInstance.bounds, setup = contextInstance.setup, wrapperComponent = contextInstance.wrapperComponent;
    var isAllowed = isVelocityAllowed(contextInstance);
    if (!isAllowed || !velocity || !bounds || !wrapperComponent) {
        return;
    }
    var velocityX = velocity.velocityX, velocityY = velocity.velocityY, total = velocity.total;
    var maxPositionX = bounds.maxPositionX, minPositionX = bounds.minPositionX, maxPositionY = bounds.maxPositionY, minPositionY = bounds.minPositionY;
    var limitToBounds = setup.limitToBounds, alignmentAnimation = setup.alignmentAnimation;
    var zoomAnimation = setup.zoomAnimation, panning = setup.panning;
    var lockAxisY = panning.lockAxisY, lockAxisX = panning.lockAxisX;
    var animationType = zoomAnimation.animationType;
    var sizeX = alignmentAnimation.sizeX, sizeY = alignmentAnimation.sizeY, velocityAlignmentTime = alignmentAnimation.velocityAlignmentTime;
    var alignAnimationTime = velocityAlignmentTime;
    var moveAnimationTime = getVelocityMoveTime(contextInstance, total);
    var finalAnimationTime = Math.max(moveAnimationTime, alignAnimationTime);
    var paddingValueX = getPaddingValue(contextInstance, sizeX);
    var paddingValueY = getPaddingValue(contextInstance, sizeY);
    var paddingX = (paddingValueX * wrapperComponent.offsetWidth) / 100;
    var paddingY = (paddingValueY * wrapperComponent.offsetHeight) / 100;
    var maxTargetX = maxPositionX + paddingX;
    var minTargetX = minPositionX - paddingX;
    var maxTargetY = maxPositionY + paddingY;
    var minTargetY = minPositionY - paddingY;
    var startState = contextInstance.transformState;
    var startTime = new Date().getTime();
    handleSetupAnimation(contextInstance, animationType, finalAnimationTime, function (step) {
        var _a = contextInstance.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
        var frameTime = new Date().getTime() - startTime;
        var animationProgress = frameTime / alignAnimationTime;
        var alignAnimation = animations[alignmentAnimation.animationType];
        var alignStep = 1 - alignAnimation(Math.min(1, animationProgress));
        var customStep = 1 - step;
        var newPositionX = positionX + velocityX * customStep;
        var newPositionY = positionY + velocityY * customStep;
        var currentPositionX = getVelocityPosition(newPositionX, startState.positionX, positionX, lockAxisX, limitToBounds, minPositionX, maxPositionX, minTargetX, maxTargetX, alignStep);
        var currentPositionY = getVelocityPosition(newPositionY, startState.positionY, positionY, lockAxisY, limitToBounds, minPositionY, maxPositionY, minTargetY, maxTargetY, alignStep);
        if (positionX !== newPositionX || positionY !== newPositionY) {
            contextInstance.setTransformState(scale, currentPositionX, currentPositionY);
        }
    });
}

function handlePanningStart(contextInstance, event) {
    var scale = contextInstance.transformState.scale;
    handleCancelAnimation(contextInstance);
    handleCalculateBounds(contextInstance, scale);
    if (window.TouchEvent !== undefined && event instanceof TouchEvent) {
        handleTouchPanningSetup(contextInstance, event);
    }
    else {
        handlePanningSetup(contextInstance, event);
    }
}
function handleAlignToBounds(contextInstance) {
    var scale = contextInstance.transformState.scale;
    var _a = contextInstance.setup, minScale = _a.minScale, alignmentAnimation = _a.alignmentAnimation;
    var disabled = alignmentAnimation.disabled, sizeX = alignmentAnimation.sizeX, sizeY = alignmentAnimation.sizeY, animationTime = alignmentAnimation.animationTime, animationType = alignmentAnimation.animationType;
    var isDisabled = disabled || scale < minScale || (!sizeX && !sizeY);
    if (isDisabled)
        return;
    var targetState = handlePanToBounds(contextInstance);
    if (targetState) {
        animate(contextInstance, targetState, animationTime, animationType);
    }
}
function handlePanning(contextInstance, clientX, clientY) {
    var startCoords = contextInstance.startCoords, setup = contextInstance.setup;
    var _a = setup.alignmentAnimation, sizeX = _a.sizeX, sizeY = _a.sizeY;
    if (!startCoords)
        return;
    var _b = getPanningClientPosition(contextInstance, clientX, clientY), x = _b.x, y = _b.y;
    var paddingValueX = getPaddingValue(contextInstance, sizeX);
    var paddingValueY = getPaddingValue(contextInstance, sizeY);
    handleCalculateVelocity(contextInstance, { x: x, y: y });
    handleNewPosition(contextInstance, x, y, paddingValueX, paddingValueY);
}
function handlePanningEnd(contextInstance) {
    if (contextInstance.isPanning) {
        var velocityDisabled = contextInstance.setup.panning.velocityDisabled;
        var velocity = contextInstance.velocity, wrapperComponent = contextInstance.wrapperComponent, contentComponent = contextInstance.contentComponent;
        contextInstance.isPanning = false;
        contextInstance.animate = false;
        contextInstance.animation = null;
        var wrapperRect = wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.getBoundingClientRect();
        var contentRect = contentComponent === null || contentComponent === void 0 ? void 0 : contentComponent.getBoundingClientRect();
        var wrapperWidth = (wrapperRect === null || wrapperRect === void 0 ? void 0 : wrapperRect.width) || 0;
        var wrapperHeight = (wrapperRect === null || wrapperRect === void 0 ? void 0 : wrapperRect.height) || 0;
        var contentWidth = (contentRect === null || contentRect === void 0 ? void 0 : contentRect.width) || 0;
        var contentHeight = (contentRect === null || contentRect === void 0 ? void 0 : contentRect.height) || 0;
        var isZoomed = wrapperWidth < contentWidth || wrapperHeight < contentHeight;
        var shouldAnimate = !velocityDisabled && velocity && (velocity === null || velocity === void 0 ? void 0 : velocity.total) > 0.1 && isZoomed;
        if (shouldAnimate) {
            handleVelocityPanning(contextInstance);
        }
        else {
            handleAlignToBounds(contextInstance);
        }
    }
}

function handleZoomToPoint(contextInstance, scale, mouseX, mouseY) {
    var _a = contextInstance.setup, minScale = _a.minScale, maxScale = _a.maxScale, limitToBounds = _a.limitToBounds;
    var newScale = checkZoomBounds(roundNumber(scale, 2), minScale, maxScale, 0, false);
    var bounds = handleCalculateBounds(contextInstance, newScale);
    var _b = handleCalculateZoomPositions(contextInstance, mouseX, mouseY, newScale, bounds, limitToBounds), x = _b.x, y = _b.y;
    return { scale: newScale, positionX: x, positionY: y };
}
function handleAlignToScaleBounds(contextInstance, mousePositionX, mousePositionY) {
    var scale = contextInstance.transformState.scale;
    var wrapperComponent = contextInstance.wrapperComponent;
    var _a = contextInstance.setup, minScale = _a.minScale, limitToBounds = _a.limitToBounds, zoomAnimation = _a.zoomAnimation;
    var disabled = zoomAnimation.disabled, animationTime = zoomAnimation.animationTime, animationType = zoomAnimation.animationType;
    var isDisabled = disabled || scale >= minScale;
    if (scale >= 1 || limitToBounds) {
        // fire fit to bounds animation
        handleAlignToBounds(contextInstance);
    }
    if (isDisabled || !wrapperComponent || !contextInstance.mounted)
        return;
    var mouseX = mousePositionX || wrapperComponent.offsetWidth / 2;
    var mouseY = mousePositionY || wrapperComponent.offsetHeight / 2;
    var targetState = handleZoomToPoint(contextInstance, minScale, mouseX, mouseY);
    if (targetState) {
        animate(contextInstance, targetState, animationTime, animationType);
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var initialState = {
    previousScale: 1,
    scale: 1,
    positionX: 0,
    positionY: 0,
};
var initialSetup = {
    disabled: false,
    minPositionX: null,
    maxPositionX: null,
    minPositionY: null,
    maxPositionY: null,
    minScale: 1,
    maxScale: 8,
    limitToBounds: true,
    centerZoomedOut: false,
    centerOnInit: false,
    disablePadding: false,
    smooth: true,
    wheel: {
        step: 0.2,
        disabled: false,
        smoothStep: 0.001,
        wheelDisabled: false,
        touchPadDisabled: false,
        activationKeys: [],
        excluded: [],
    },
    panning: {
        disabled: false,
        velocityDisabled: false,
        lockAxisX: false,
        lockAxisY: false,
        allowLeftClickPan: true,
        allowMiddleClickPan: true,
        allowRightClickPan: true,
        wheelPanning: false,
        activationKeys: [],
        excluded: [],
    },
    pinch: {
        step: 5,
        disabled: false,
        excluded: [],
    },
    doubleClick: {
        disabled: false,
        step: 0.7,
        mode: "zoomIn",
        animationType: "easeOut",
        animationTime: 200,
        excluded: [],
    },
    zoomAnimation: {
        disabled: false,
        size: 0.4,
        animationTime: 200,
        animationType: "easeOut",
    },
    alignmentAnimation: {
        disabled: false,
        sizeX: 100,
        sizeY: 100,
        animationTime: 200,
        velocityAlignmentTime: 400,
        animationType: "easeOut",
    },
    velocityAnimation: {
        disabled: false,
        sensitivity: 1,
        animationTime: 400,
        animationType: "easeOut",
        equalToMove: true,
    },
};
var baseClasses = {
    wrapperClass: "react-transform-wrapper",
    contentClass: "react-transform-component",
};

var createState = function (props) {
    var _a, _b, _c, _d;
    return {
        previousScale: (_a = props.initialScale) !== null && _a !== void 0 ? _a : initialState.scale,
        scale: (_b = props.initialScale) !== null && _b !== void 0 ? _b : initialState.scale,
        positionX: (_c = props.initialPositionX) !== null && _c !== void 0 ? _c : initialState.positionX,
        positionY: (_d = props.initialPositionY) !== null && _d !== void 0 ? _d : initialState.positionY,
    };
};
var createSetup = function (props) {
    var newSetup = __assign({}, initialSetup);
    Object.keys(props).forEach(function (key) {
        var validValue = typeof props[key] !== "undefined";
        var validParameter = typeof initialSetup[key] !== "undefined";
        if (validParameter && validValue) {
            var dataType = Object.prototype.toString.call(initialSetup[key]);
            var isObject = dataType === "[object Object]";
            var isArray = dataType === "[object Array]";
            if (isObject) {
                newSetup[key] = __assign(__assign({}, initialSetup[key]), props[key]);
            }
            else if (isArray) {
                newSetup[key] = __spreadArray(__spreadArray([], initialSetup[key], true), props[key], true);
            }
            else {
                newSetup[key] = props[key];
            }
        }
    });
    return newSetup;
};

var handleCalculateButtonZoom = function (contextInstance, delta, step) {
    var scale = contextInstance.transformState.scale;
    var wrapperComponent = contextInstance.wrapperComponent, setup = contextInstance.setup;
    var maxScale = setup.maxScale, minScale = setup.minScale, zoomAnimation = setup.zoomAnimation, smooth = setup.smooth;
    var size = zoomAnimation.size;
    if (!wrapperComponent) {
        throw new Error("Wrapper is not mounted");
    }
    var targetScale = smooth
        ? scale * Math.exp(delta * step)
        : scale + delta * step;
    var newScale = checkZoomBounds(roundNumber(targetScale, 3), minScale, maxScale, size, false);
    return newScale;
};
function handleZoomToViewCenter(contextInstance, delta, step, animationTime, animationType) {
    var wrapperComponent = contextInstance.wrapperComponent;
    var _a = contextInstance.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
    if (!wrapperComponent)
        return console.error("No WrapperComponent found");
    var wrapperWidth = wrapperComponent.offsetWidth;
    var wrapperHeight = wrapperComponent.offsetHeight;
    var mouseX = (wrapperWidth / 2 - positionX) / scale;
    var mouseY = (wrapperHeight / 2 - positionY) / scale;
    var newScale = handleCalculateButtonZoom(contextInstance, delta, step);
    var targetState = handleZoomToPoint(contextInstance, newScale, mouseX, mouseY);
    if (!targetState) {
        return console.error("Error during zoom event. New transformation state was not calculated.");
    }
    animate(contextInstance, targetState, animationTime, animationType);
}
function resetTransformations(contextInstance, animationTime, animationType, onResetTransformation) {
    var setup = contextInstance.setup, wrapperComponent = contextInstance.wrapperComponent;
    var limitToBounds = setup.limitToBounds;
    var initialTransformation = createState(contextInstance.props);
    var _a = contextInstance.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
    if (!wrapperComponent)
        return;
    var newBounds = calculateBounds(contextInstance, initialTransformation.scale);
    var boundedPositions = getMouseBoundedPosition(initialTransformation.positionX, initialTransformation.positionY, newBounds, limitToBounds, 0, 0, wrapperComponent);
    var newState = {
        scale: initialTransformation.scale,
        positionX: boundedPositions.x,
        positionY: boundedPositions.y,
    };
    if (scale === initialTransformation.scale &&
        positionX === initialTransformation.positionX &&
        positionY === initialTransformation.positionY) {
        return;
    }
    onResetTransformation === null || onResetTransformation === void 0 ? void 0 : onResetTransformation();
    animate(contextInstance, newState, animationTime, animationType);
}
function getOffset(element, wrapper, content, state) {
    var offset = element.getBoundingClientRect();
    var wrapperOffset = wrapper.getBoundingClientRect();
    var contentOffset = content.getBoundingClientRect();
    var xOff = wrapperOffset.x * state.scale;
    var yOff = wrapperOffset.y * state.scale;
    return {
        x: (offset.x - contentOffset.x + xOff) / state.scale,
        y: (offset.y - contentOffset.y + yOff) / state.scale,
    };
}
function calculateZoomToNode(contextInstance, node, customZoom) {
    var wrapperComponent = contextInstance.wrapperComponent, contentComponent = contextInstance.contentComponent, transformState = contextInstance.transformState;
    var _a = contextInstance.setup, limitToBounds = _a.limitToBounds, minScale = _a.minScale, maxScale = _a.maxScale;
    if (!wrapperComponent || !contentComponent)
        return transformState;
    var wrapperRect = wrapperComponent.getBoundingClientRect();
    var nodeRect = node.getBoundingClientRect();
    var nodeOffset = getOffset(node, wrapperComponent, contentComponent, transformState);
    var nodeLeft = nodeOffset.x;
    var nodeTop = nodeOffset.y;
    var nodeWidth = nodeRect.width / transformState.scale;
    var nodeHeight = nodeRect.height / transformState.scale;
    var scaleX = wrapperComponent.offsetWidth / nodeWidth;
    var scaleY = wrapperComponent.offsetHeight / nodeHeight;
    var newScale = checkZoomBounds(customZoom || Math.min(scaleX, scaleY), minScale, maxScale, 0, false);
    var offsetX = (wrapperRect.width - nodeWidth * newScale) / 2;
    var offsetY = (wrapperRect.height - nodeHeight * newScale) / 2;
    var newPositionX = (wrapperRect.left - nodeLeft) * newScale + offsetX;
    var newPositionY = (wrapperRect.top - nodeTop) * newScale + offsetY;
    var bounds = calculateBounds(contextInstance, newScale);
    var _b = getMouseBoundedPosition(newPositionX, newPositionY, bounds, limitToBounds, 0, 0, wrapperComponent), x = _b.x, y = _b.y;
    return { positionX: x, positionY: y, scale: newScale };
}

var zoomIn = function (contextInstance) {
    return function (step, animationTime, animationType) {
        if (step === void 0) { step = 0.5; }
        if (animationTime === void 0) { animationTime = 300; }
        if (animationType === void 0) { animationType = "easeOut"; }
        handleZoomToViewCenter(contextInstance, 1, step, animationTime, animationType);
    };
};
var zoomOut = function (contextInstance) {
    return function (step, animationTime, animationType) {
        if (step === void 0) { step = 0.5; }
        if (animationTime === void 0) { animationTime = 300; }
        if (animationType === void 0) { animationType = "easeOut"; }
        handleZoomToViewCenter(contextInstance, -1, step, animationTime, animationType);
    };
};
var setTransform = function (contextInstance) {
    return function (newPositionX, newPositionY, newScale, animationTime, animationType) {
        if (animationTime === void 0) { animationTime = 300; }
        if (animationType === void 0) { animationType = "easeOut"; }
        var _a = contextInstance.transformState, positionX = _a.positionX, positionY = _a.positionY, scale = _a.scale;
        var wrapperComponent = contextInstance.wrapperComponent, contentComponent = contextInstance.contentComponent;
        var disabled = contextInstance.setup.disabled;
        if (disabled || !wrapperComponent || !contentComponent)
            return;
        var targetState = {
            positionX: Number.isNaN(newPositionX) ? positionX : newPositionX,
            positionY: Number.isNaN(newPositionY) ? positionY : newPositionY,
            scale: Number.isNaN(newScale) ? scale : newScale,
        };
        animate(contextInstance, targetState, animationTime, animationType);
    };
};
var resetTransform = function (contextInstance) {
    return function (animationTime, animationType) {
        if (animationTime === void 0) { animationTime = 200; }
        if (animationType === void 0) { animationType = "easeOut"; }
        resetTransformations(contextInstance, animationTime, animationType);
    };
};
var centerView = function (contextInstance) {
    return function (scale, animationTime, animationType) {
        if (animationTime === void 0) { animationTime = 200; }
        if (animationType === void 0) { animationType = "easeOut"; }
        var transformState = contextInstance.transformState, wrapperComponent = contextInstance.wrapperComponent, contentComponent = contextInstance.contentComponent;
        if (wrapperComponent && contentComponent) {
            var targetState = getCenterPosition(scale || transformState.scale, wrapperComponent, contentComponent);
            animate(contextInstance, targetState, animationTime, animationType);
        }
    };
};
var zoomToElement = function (contextInstance) {
    return function (node, scale, animationTime, animationType) {
        if (animationTime === void 0) { animationTime = 600; }
        if (animationType === void 0) { animationType = "easeOut"; }
        handleCancelAnimation(contextInstance);
        var wrapperComponent = contextInstance.wrapperComponent;
        var target = typeof node === "string" ? document.getElementById(node) : node;
        if (wrapperComponent && target && wrapperComponent.contains(target)) {
            var targetState = calculateZoomToNode(contextInstance, target, scale);
            animate(contextInstance, targetState, animationTime, animationType);
        }
    };
};

var getControls = function (contextInstance) {
    return {
        instance: contextInstance,
        zoomIn: zoomIn(contextInstance),
        zoomOut: zoomOut(contextInstance),
        setTransform: setTransform(contextInstance),
        resetTransform: resetTransform(contextInstance),
        centerView: centerView(contextInstance),
        zoomToElement: zoomToElement(contextInstance),
    };
};
var getState = function (contextInstance) {
    return {
        instance: contextInstance,
        state: contextInstance.transformState,
    };
};
var getContext = function (contextInstance) {
    var ref = {};
    Object.assign(ref, getState(contextInstance));
    Object.assign(ref, getControls(contextInstance));
    return ref;
};

// We want to make event listeners non-passive, and to do so have to check
// that browsers support EventListenerOptions in the first place.
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
var passiveSupported = false;
function makePassiveEventOption() {
    try {
        var options = {
            get passive() {
                // This function will be called when the browser
                //   attempts to access the passive property.
                passiveSupported = true;
                return false;
            },
        };
        return options;
    }
    catch (err) {
        passiveSupported = false;
        return passiveSupported;
    }
}

var matchPrefix = ".".concat(baseClasses.wrapperClass);
var isExcludedNode = function (node, excluded) {
    return excluded.some(function (exclude) {
        return node.matches("".concat(matchPrefix, " ").concat(exclude, ", ").concat(matchPrefix, " .").concat(exclude, ", ").concat(matchPrefix, " ").concat(exclude, " *, ").concat(matchPrefix, " .").concat(exclude, " *"));
    });
};
var cancelTimeout = function (timeout) {
    if (timeout) {
        clearTimeout(timeout);
    }
};

var getTransformStyles = function (x, y, scale) {
    // Standard translate prevents blurry svg on the safari
    return "translate(".concat(x, "px, ").concat(y, "px) scale(").concat(scale, ")");
};
var getMatrixTransformStyles = function (x, y, scale) {
    // The shorthand for matrix does not work for Safari hence the need to explicitly use matrix3d
    // Refer to https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
    var a = scale;
    var b = 0;
    var c = 0;
    var d = scale;
    var tx = x;
    var ty = y;
    return "matrix3d(".concat(a, ", ").concat(b, ", 0, 0, ").concat(c, ", ").concat(d, ", 0, 0, 0, 0, 1, 0, ").concat(tx, ", ").concat(ty, ", 0, 1)");
};
var getCenterPosition = function (scale, wrapperComponent, contentComponent) {
    var contentWidth = contentComponent.offsetWidth * scale;
    var contentHeight = contentComponent.offsetHeight * scale;
    var centerPositionX = (wrapperComponent.offsetWidth - contentWidth) / 2;
    var centerPositionY = (wrapperComponent.offsetHeight - contentHeight) / 2;
    return {
        scale: scale,
        positionX: centerPositionX,
        positionY: centerPositionY,
    };
};

function mergeRefs(refs) {
    return function (value) {
        refs.forEach(function (ref) {
            if (typeof ref === "function") {
                ref(value);
            }
            else if (ref != null) {
                ref.current = value;
            }
        });
    };
}

var isWheelAllowed = function (contextInstance, event) {
    var _a = contextInstance.setup.wheel, disabled = _a.disabled, wheelDisabled = _a.wheelDisabled, touchPadDisabled = _a.touchPadDisabled, excluded = _a.excluded;
    var isInitialized = contextInstance.isInitialized, isPanning = contextInstance.isPanning;
    var target = event.target;
    var isAllowed = isInitialized && !isPanning && !disabled && target;
    if (!isAllowed)
        return false;
    // Event ctrlKey detects if touchpad action is executing wheel or pinch gesture
    if (wheelDisabled && !event.ctrlKey)
        return false;
    if (touchPadDisabled && event.ctrlKey)
        return false;
    var isExcluded = isExcludedNode(target, excluded);
    if (isExcluded)
        return false;
    return true;
};
var getDeltaY = function (event) {
    if (event) {
        return event.deltaY < 0 ? 1 : -1;
    }
    return 0;
};
function getDelta(event, customDelta) {
    var deltaY = getDeltaY(event);
    var delta = checkIsNumber(customDelta, deltaY);
    return delta;
}
function getMousePosition(event, contentComponent, scale) {
    var contentRect = contentComponent.getBoundingClientRect();
    var mouseX = 0;
    var mouseY = 0;
    if ("clientX" in event) {
        // mouse position x, y over wrapper component
        mouseX = (event.clientX - contentRect.left) / scale;
        mouseY = (event.clientY - contentRect.top) / scale;
    }
    else {
        var touch = event.touches[0];
        mouseX = (touch.clientX - contentRect.left) / scale;
        mouseY = (touch.clientY - contentRect.top) / scale;
    }
    if (Number.isNaN(mouseX) || Number.isNaN(mouseY))
        console.error("No mouse or touch offset found");
    return {
        x: mouseX,
        y: mouseY,
    };
}
var handleCalculateWheelZoom = function (contextInstance, delta, step, disable, getTarget) {
    var scale = contextInstance.transformState.scale;
    var wrapperComponent = contextInstance.wrapperComponent, setup = contextInstance.setup;
    var maxScale = setup.maxScale, minScale = setup.minScale, zoomAnimation = setup.zoomAnimation, disablePadding = setup.disablePadding;
    var size = zoomAnimation.size, disabled = zoomAnimation.disabled;
    if (!wrapperComponent) {
        throw new Error("Wrapper is not mounted");
    }
    var targetScale = scale + delta * step;
    if (getTarget)
        return targetScale;
    var paddingEnabled = disable ? false : !disabled;
    var newScale = checkZoomBounds(roundNumber(targetScale, 3), minScale, maxScale, size, paddingEnabled && !disablePadding);
    return newScale;
};
var handleWheelZoomStop = function (contextInstance, event) {
    var previousWheelEvent = contextInstance.previousWheelEvent;
    var scale = contextInstance.transformState.scale;
    var _a = contextInstance.setup, maxScale = _a.maxScale, minScale = _a.minScale;
    if (!previousWheelEvent)
        return false;
    if (scale < maxScale || scale > minScale)
        return true;
    if (Math.sign(previousWheelEvent.deltaY) !== Math.sign(event.deltaY))
        return true;
    if (previousWheelEvent.deltaY > 0 && previousWheelEvent.deltaY < event.deltaY)
        return true;
    if (previousWheelEvent.deltaY < 0 && previousWheelEvent.deltaY > event.deltaY)
        return true;
    if (Math.sign(previousWheelEvent.deltaY) !== Math.sign(event.deltaY))
        return true;
    return false;
};

var isPinchStartAllowed = function (contextInstance, event) {
    var _a = contextInstance.setup.pinch, disabled = _a.disabled, excluded = _a.excluded;
    var isInitialized = contextInstance.isInitialized;
    var target = event.target;
    var isAllowed = isInitialized && !disabled && target;
    if (!isAllowed)
        return false;
    var isExcluded = isExcludedNode(target, excluded);
    if (isExcluded)
        return false;
    return true;
};
var isPinchAllowed = function (contextInstance) {
    var disabled = contextInstance.setup.pinch.disabled;
    var isInitialized = contextInstance.isInitialized, pinchStartDistance = contextInstance.pinchStartDistance;
    var isAllowed = isInitialized && !disabled && pinchStartDistance;
    if (!isAllowed)
        return false;
    return true;
};
var calculateTouchMidPoint = function (event, scale, contentComponent) {
    var contentRect = contentComponent.getBoundingClientRect();
    var touches = event.touches;
    var firstPointX = roundNumber(touches[0].clientX - contentRect.left, 5);
    var firstPointY = roundNumber(touches[0].clientY - contentRect.top, 5);
    var secondPointX = roundNumber(touches[1].clientX - contentRect.left, 5);
    var secondPointY = roundNumber(touches[1].clientY - contentRect.top, 5);
    return {
        x: (firstPointX + secondPointX) / 2 / scale,
        y: (firstPointY + secondPointY) / 2 / scale,
    };
};
var getTouchDistance = function (event) {
    return Math.sqrt(Math.pow((event.touches[0].pageX - event.touches[1].pageX), 2) +
        Math.pow((event.touches[0].pageY - event.touches[1].pageY), 2));
};
var calculatePinchZoom = function (contextInstance, currentDistance) {
    var pinchStartScale = contextInstance.pinchStartScale, pinchStartDistance = contextInstance.pinchStartDistance, setup = contextInstance.setup;
    var maxScale = setup.maxScale, minScale = setup.minScale, zoomAnimation = setup.zoomAnimation, disablePadding = setup.disablePadding;
    var size = zoomAnimation.size, disabled = zoomAnimation.disabled;
    if (!pinchStartScale || pinchStartDistance === null || !currentDistance) {
        throw new Error("Pinch touches distance was not provided");
    }
    if (currentDistance < 0) {
        return contextInstance.transformState.scale;
    }
    var touchProportion = currentDistance / pinchStartDistance;
    var scaleDifference = touchProportion * pinchStartScale;
    return checkZoomBounds(roundNumber(scaleDifference, 2), minScale, maxScale, size, !disabled && !disablePadding);
};

var wheelStopEventTime = 160;
var wheelAnimationTime = 100;
var handleWheelStart = function (contextInstance, event) {
    var _a = contextInstance.props, onWheelStart = _a.onWheelStart, onZoomStart = _a.onZoomStart;
    if (!contextInstance.wheelStopEventTimer) {
        handleCancelAnimation(contextInstance);
        handleCallback(getContext(contextInstance), event, onWheelStart);
        handleCallback(getContext(contextInstance), event, onZoomStart);
    }
};
var handleWheelZoom = function (contextInstance, event) {
    var _a = contextInstance.props, onWheel = _a.onWheel, onZoom = _a.onZoom;
    var contentComponent = contextInstance.contentComponent, setup = contextInstance.setup, transformState = contextInstance.transformState;
    var scale = transformState.scale;
    var limitToBounds = setup.limitToBounds, centerZoomedOut = setup.centerZoomedOut, zoomAnimation = setup.zoomAnimation, wheel = setup.wheel, disablePadding = setup.disablePadding, smooth = setup.smooth;
    var size = zoomAnimation.size, disabled = zoomAnimation.disabled;
    var step = wheel.step, smoothStep = wheel.smoothStep;
    if (!contentComponent) {
        throw new Error("Component not mounted");
    }
    event.preventDefault();
    event.stopPropagation();
    var delta = getDelta(event, null);
    var zoomStep = smooth ? smoothStep * Math.abs(event.deltaY) : step;
    var newScale = handleCalculateWheelZoom(contextInstance, delta, zoomStep, !event.ctrlKey);
    // if scale not change
    if (scale === newScale)
        return;
    var bounds = handleCalculateBounds(contextInstance, newScale);
    var mousePosition = getMousePosition(event, contentComponent, scale);
    var isPaddingDisabled = disabled || size === 0 || centerZoomedOut || disablePadding;
    var isLimitedToBounds = limitToBounds && isPaddingDisabled;
    var _b = handleCalculateZoomPositions(contextInstance, mousePosition.x, mousePosition.y, newScale, bounds, isLimitedToBounds), x = _b.x, y = _b.y;
    contextInstance.previousWheelEvent = event;
    contextInstance.setTransformState(newScale, x, y);
    handleCallback(getContext(contextInstance), event, onWheel);
    handleCallback(getContext(contextInstance), event, onZoom);
};
var handleWheelStop = function (contextInstance, event) {
    var _a = contextInstance.props, onWheelStop = _a.onWheelStop, onZoomStop = _a.onZoomStop;
    // fire animation
    cancelTimeout(contextInstance.wheelAnimationTimer);
    contextInstance.wheelAnimationTimer = setTimeout(function () {
        if (!contextInstance.mounted)
            return;
        handleAlignToScaleBounds(contextInstance, event.x, event.y);
        contextInstance.wheelAnimationTimer = null;
    }, wheelAnimationTime);
    // Wheel stop event
    var hasStoppedZooming = handleWheelZoomStop(contextInstance, event);
    if (hasStoppedZooming) {
        cancelTimeout(contextInstance.wheelStopEventTimer);
        contextInstance.wheelStopEventTimer = setTimeout(function () {
            if (!contextInstance.mounted)
                return;
            contextInstance.wheelStopEventTimer = null;
            handleCallback(getContext(contextInstance), event, onWheelStop);
            handleCallback(getContext(contextInstance), event, onZoomStop);
        }, wheelStopEventTime);
    }
};

var getTouchCenter = function (event) {
    var totalX = 0;
    var totalY = 0;
    // Sum up the positions of all touches
    for (var i = 0; i < 2; i += 1) {
        totalX += event.touches[i].clientX;
        totalY += event.touches[i].clientY;
    }
    // Calculate the average position
    var x = totalX / 2;
    var y = totalY / 2;
    return { x: x, y: y };
};
var handlePinchStart = function (contextInstance, event) {
    var distance = getTouchDistance(event);
    contextInstance.pinchStartDistance = distance;
    contextInstance.lastDistance = distance;
    contextInstance.pinchStartScale = contextInstance.transformState.scale;
    contextInstance.isPanning = false;
    var center = getTouchCenter(event);
    contextInstance.pinchLastCenterX = center.x;
    contextInstance.pinchLastCenterY = center.y;
    handleCancelAnimation(contextInstance);
};
var handlePinchZoom = function (contextInstance, event) {
    var contentComponent = contextInstance.contentComponent, pinchStartDistance = contextInstance.pinchStartDistance, wrapperComponent = contextInstance.wrapperComponent;
    var scale = contextInstance.transformState.scale;
    var _a = contextInstance.setup, limitToBounds = _a.limitToBounds, centerZoomedOut = _a.centerZoomedOut, zoomAnimation = _a.zoomAnimation, alignmentAnimation = _a.alignmentAnimation;
    var disabled = zoomAnimation.disabled, size = zoomAnimation.size;
    // if one finger starts from outside of wrapper
    if (pinchStartDistance === null || !contentComponent)
        return;
    var midPoint = calculateTouchMidPoint(event, scale, contentComponent);
    // if touches goes off of the wrapper element
    if (!Number.isFinite(midPoint.x) || !Number.isFinite(midPoint.y))
        return;
    var currentDistance = getTouchDistance(event);
    var newScale = calculatePinchZoom(contextInstance, currentDistance);
    var center = getTouchCenter(event);
    // pan should be scale invariant.
    var panX = center.x - (contextInstance.pinchLastCenterX || 0);
    var panY = center.y - (contextInstance.pinchLastCenterY || 0);
    if (newScale === scale && panX === 0 && panY === 0)
        return;
    contextInstance.pinchLastCenterX = center.x;
    contextInstance.pinchLastCenterY = center.y;
    var bounds = handleCalculateBounds(contextInstance, newScale);
    var isPaddingDisabled = disabled || size === 0 || centerZoomedOut;
    var isLimitedToBounds = limitToBounds && isPaddingDisabled;
    var _b = handleCalculateZoomPositions(contextInstance, midPoint.x, midPoint.y, newScale, bounds, isLimitedToBounds), x = _b.x, y = _b.y;
    contextInstance.pinchMidpoint = midPoint;
    contextInstance.lastDistance = currentDistance;
    var sizeX = alignmentAnimation.sizeX, sizeY = alignmentAnimation.sizeY;
    var paddingValueX = getPaddingValue(contextInstance, sizeX);
    var paddingValueY = getPaddingValue(contextInstance, sizeY);
    var newPositionX = x + panX;
    var newPositionY = y + panY;
    var _c = getMouseBoundedPosition(newPositionX, newPositionY, bounds, limitToBounds, paddingValueX, paddingValueY, wrapperComponent), finalX = _c.x, finalY = _c.y;
    contextInstance.setTransformState(newScale, finalX, finalY);
};
var handlePinchStop = function (contextInstance) {
    var pinchMidpoint = contextInstance.pinchMidpoint;
    contextInstance.velocity = null;
    contextInstance.lastDistance = null;
    contextInstance.pinchMidpoint = null;
    contextInstance.pinchStartScale = null;
    contextInstance.pinchStartDistance = null;
    handleAlignToScaleBounds(contextInstance, pinchMidpoint === null || pinchMidpoint === void 0 ? void 0 : pinchMidpoint.x, pinchMidpoint === null || pinchMidpoint === void 0 ? void 0 : pinchMidpoint.y);
};

var handleDoubleClickStop = function (contextInstance, event) {
    var onZoomStop = contextInstance.props.onZoomStop;
    var animationTime = contextInstance.setup.doubleClick.animationTime;
    cancelTimeout(contextInstance.doubleClickStopEventTimer);
    contextInstance.doubleClickStopEventTimer = setTimeout(function () {
        contextInstance.doubleClickStopEventTimer = null;
        handleCallback(getContext(contextInstance), event, onZoomStop);
    }, animationTime);
};
var handleDoubleClickResetMode = function (contextInstance, event) {
    var _a = contextInstance.props, onZoomStart = _a.onZoomStart, onZoom = _a.onZoom;
    var _b = contextInstance.setup.doubleClick, animationTime = _b.animationTime, animationType = _b.animationType;
    handleCallback(getContext(contextInstance), event, onZoomStart);
    resetTransformations(contextInstance, animationTime, animationType, function () {
        return handleCallback(getContext(contextInstance), event, onZoom);
    });
    handleDoubleClickStop(contextInstance, event);
};
function getDoubleClickScale(mode, scale) {
    if (mode === "toggle") {
        return scale === 1 ? 1 : -1;
    }
    return mode === "zoomOut" ? -1 : 1;
}
function handleDoubleClick(contextInstance, event) {
    var setup = contextInstance.setup, doubleClickStopEventTimer = contextInstance.doubleClickStopEventTimer, transformState = contextInstance.transformState, contentComponent = contextInstance.contentComponent;
    var scale = transformState.scale;
    var _a = contextInstance.props, onZoomStart = _a.onZoomStart, onZoom = _a.onZoom;
    var _b = setup.doubleClick, disabled = _b.disabled, mode = _b.mode, step = _b.step, animationTime = _b.animationTime, animationType = _b.animationType;
    if (disabled)
        return;
    if (doubleClickStopEventTimer)
        return;
    if (mode === "reset") {
        return handleDoubleClickResetMode(contextInstance, event);
    }
    if (!contentComponent)
        return console.error("No ContentComponent found");
    var delta = getDoubleClickScale(mode, contextInstance.transformState.scale);
    var newScale = handleCalculateButtonZoom(contextInstance, delta, step);
    // stop execution when scale didn't change
    if (scale === newScale)
        return;
    handleCallback(getContext(contextInstance), event, onZoomStart);
    var mousePosition = getMousePosition(event, contentComponent, scale);
    var targetState = handleZoomToPoint(contextInstance, newScale, mousePosition.x, mousePosition.y);
    if (!targetState) {
        return console.error("Error during zoom event. New transformation state was not calculated.");
    }
    handleCallback(getContext(contextInstance), event, onZoom);
    animate(contextInstance, targetState, animationTime, animationType);
    handleDoubleClickStop(contextInstance, event);
}
var isDoubleClickAllowed = function (contextInstance, event) {
    var isInitialized = contextInstance.isInitialized, setup = contextInstance.setup, wrapperComponent = contextInstance.wrapperComponent;
    var _a = setup.doubleClick, disabled = _a.disabled, excluded = _a.excluded;
    var target = event.target;
    var isWrapperChild = wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.contains(target);
    var isAllowed = isInitialized && target && isWrapperChild && !disabled;
    if (!isAllowed)
        return false;
    var isExcluded = isExcludedNode(target, excluded);
    if (isExcluded)
        return false;
    return true;
};

var ZoomPanPinch = /** @class */ (function () {
    function ZoomPanPinch(props) {
        var _this = this;
        this.mounted = true;
        this.pinchLastCenterX = null;
        this.pinchLastCenterY = null;
        this.onChangeCallbacks = new Set();
        this.onInitCallbacks = new Set();
        // Components
        this.wrapperComponent = null;
        this.contentComponent = null;
        // Initialization
        this.isInitialized = false;
        this.bounds = null;
        // wheel helpers
        this.previousWheelEvent = null;
        this.wheelStopEventTimer = null;
        this.wheelAnimationTimer = null;
        // panning helpers
        this.isPanning = false;
        this.isWheelPanning = false;
        this.startCoords = null;
        this.lastTouch = null;
        // pinch helpers
        this.distance = null;
        this.lastDistance = null;
        this.pinchStartDistance = null;
        this.pinchStartScale = null;
        this.pinchMidpoint = null;
        // double click helpers
        this.doubleClickStopEventTimer = null;
        // velocity helpers
        this.velocity = null;
        this.velocityTime = null;
        this.lastMousePosition = null;
        // animations helpers
        this.animate = false;
        this.animation = null;
        this.maxBounds = null;
        // key press
        this.pressedKeys = {};
        this.mount = function () {
            _this.initializeWindowEvents();
        };
        this.unmount = function () {
            _this.cleanupWindowEvents();
        };
        this.update = function (newProps) {
            _this.props = newProps;
            handleCalculateBounds(_this, _this.transformState.scale);
            _this.setup = createSetup(newProps);
        };
        this.initializeWindowEvents = function () {
            var _a, _b;
            var passive = makePassiveEventOption();
            var currentDocument = (_a = _this.wrapperComponent) === null || _a === void 0 ? void 0 : _a.ownerDocument;
            var currentWindow = currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.defaultView;
            (_b = _this.wrapperComponent) === null || _b === void 0 ? void 0 : _b.addEventListener("wheel", _this.onWheelPanning, passive);
            // Panning on window to allow panning when mouse is out of component wrapper
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.addEventListener("mousedown", _this.onPanningStart, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.addEventListener("mousemove", _this.onPanning, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.addEventListener("mouseup", _this.onPanningStop, passive);
            currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.addEventListener("mouseleave", _this.clearPanning, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.addEventListener("keyup", _this.setKeyUnPressed, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.addEventListener("keydown", _this.setKeyPressed, passive);
        };
        this.cleanupWindowEvents = function () {
            var _a, _b;
            var passive = makePassiveEventOption();
            var currentDocument = (_a = _this.wrapperComponent) === null || _a === void 0 ? void 0 : _a.ownerDocument;
            var currentWindow = currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.defaultView;
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.removeEventListener("mousedown", _this.onPanningStart, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.removeEventListener("mousemove", _this.onPanning, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.removeEventListener("mouseup", _this.onPanningStop, passive);
            currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.removeEventListener("mouseleave", _this.clearPanning, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.removeEventListener("keyup", _this.setKeyUnPressed, passive);
            currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.removeEventListener("keydown", _this.setKeyPressed, passive);
            document.removeEventListener("mouseleave", _this.clearPanning, passive);
            handleCancelAnimation(_this);
            (_b = _this.observer) === null || _b === void 0 ? void 0 : _b.disconnect();
        };
        this.handleInitializeWrapperEvents = function (wrapper) {
            // Zooming events on wrapper
            var passive = makePassiveEventOption();
            wrapper.addEventListener("wheel", _this.onWheelZoom, passive);
            wrapper.addEventListener("dblclick", _this.onDoubleClick, passive);
            wrapper.addEventListener("touchstart", _this.onTouchPanningStart, passive);
            wrapper.addEventListener("touchmove", _this.onTouchPanning, passive);
            wrapper.addEventListener("touchend", _this.onTouchPanningStop, passive);
        };
        this.handleInitialize = function (contentComponent) {
            var centerOnInit = _this.setup.centerOnInit;
            _this.applyTransformation();
            _this.onInitCallbacks.forEach(function (callback) { return callback(getContext(_this)); });
            if (centerOnInit) {
                _this.setCenter();
                _this.observer = new ResizeObserver(function () {
                    var _a;
                    var currentWidth = contentComponent.offsetWidth;
                    var currentHeight = contentComponent.offsetHeight;
                    if (currentWidth > 0 || currentHeight > 0) {
                        _this.onInitCallbacks.forEach(function (callback) {
                            return callback(getContext(_this));
                        });
                        _this.setCenter();
                        (_a = _this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
                    }
                });
                // if nothing about the contentComponent has changed after 5 seconds, disconnect the observer
                setTimeout(function () {
                    var _a;
                    (_a = _this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
                }, 5000);
                // Start observing the target node for configured mutations
                _this.observer.observe(contentComponent);
            }
        };
        /// ///////
        // Zoom
        /// ///////
        this.onWheelZoom = function (event) {
            var disabled = _this.setup.disabled;
            if (disabled)
                return;
            var isAllowed = isWheelAllowed(_this, event);
            if (!isAllowed)
                return;
            var keysPressed = _this.isPressingKeys(_this.setup.wheel.activationKeys);
            if (!keysPressed)
                return;
            handleWheelStart(_this, event);
            handleWheelZoom(_this, event);
            handleWheelStop(_this, event);
        };
        /// ///////
        // Pan
        /// ///////
        this.onWheelPanning = function (event) {
            var _a = _this.setup, disabled = _a.disabled, wheel = _a.wheel, panning = _a.panning;
            if (!_this.wrapperComponent ||
                !_this.contentComponent ||
                disabled ||
                !wheel.wheelDisabled ||
                panning.disabled ||
                !panning.wheelPanning ||
                event.ctrlKey) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            var _b = _this.transformState, positionX = _b.positionX, positionY = _b.positionY;
            var mouseX = positionX - event.deltaX;
            var mouseY = positionY - event.deltaY;
            var newPositionX = panning.lockAxisX ? positionX : mouseX;
            var newPositionY = panning.lockAxisY ? positionY : mouseY;
            var _c = _this.setup.alignmentAnimation, sizeX = _c.sizeX, sizeY = _c.sizeY;
            var paddingValueX = getPaddingValue(_this, sizeX);
            var paddingValueY = getPaddingValue(_this, sizeY);
            if (newPositionX === positionX && newPositionY === positionY)
                return;
            handleNewPosition(_this, newPositionX, newPositionY, paddingValueX, paddingValueY);
        };
        this.onPanningStart = function (event) {
            var disabled = _this.setup.disabled;
            var onPanningStart = _this.props.onPanningStart;
            if (disabled)
                return;
            var isAllowed = isPanningStartAllowed(_this, event);
            if (!isAllowed)
                return;
            var keysPressed = _this.isPressingKeys(_this.setup.panning.activationKeys);
            if (!keysPressed)
                return;
            if (event.button === 0 && !_this.setup.panning.allowLeftClickPan)
                return;
            if (event.button === 1 && !_this.setup.panning.allowMiddleClickPan)
                return;
            if (event.button === 2 && !_this.setup.panning.allowRightClickPan)
                return;
            event.preventDefault();
            event.stopPropagation();
            handleCancelAnimation(_this);
            handlePanningStart(_this, event);
            handleCallback(getContext(_this), event, onPanningStart);
        };
        this.onPanning = function (event) {
            var disabled = _this.setup.disabled;
            var onPanning = _this.props.onPanning;
            if (disabled)
                return;
            var isAllowed = isPanningAllowed(_this);
            if (!isAllowed)
                return;
            var keysPressed = _this.isPressingKeys(_this.setup.panning.activationKeys);
            if (!keysPressed)
                return;
            event.preventDefault();
            event.stopPropagation();
            handlePanning(_this, event.clientX, event.clientY);
            handleCallback(getContext(_this), event, onPanning);
        };
        this.onPanningStop = function (event) {
            var onPanningStop = _this.props.onPanningStop;
            if (_this.isPanning) {
                handlePanningEnd(_this);
                handleCallback(getContext(_this), event, onPanningStop);
            }
        };
        /// ///////
        // Pinch
        /// ///////
        this.onPinchStart = function (event) {
            var disabled = _this.setup.disabled;
            var _a = _this.props, onPinchingStart = _a.onPinchingStart, onZoomStart = _a.onZoomStart;
            if (disabled)
                return;
            var isAllowed = isPinchStartAllowed(_this, event);
            if (!isAllowed)
                return;
            handlePinchStart(_this, event);
            handleCancelAnimation(_this);
            handleCallback(getContext(_this), event, onPinchingStart);
            handleCallback(getContext(_this), event, onZoomStart);
        };
        this.onPinch = function (event) {
            var disabled = _this.setup.disabled;
            var _a = _this.props, onPinching = _a.onPinching, onZoom = _a.onZoom;
            if (disabled)
                return;
            var isAllowed = isPinchAllowed(_this);
            if (!isAllowed)
                return;
            event.preventDefault();
            event.stopPropagation();
            handlePinchZoom(_this, event);
            handleCallback(getContext(_this), event, onPinching);
            handleCallback(getContext(_this), event, onZoom);
        };
        this.onPinchStop = function (event) {
            var _a = _this.props, onPinchingStop = _a.onPinchingStop, onZoomStop = _a.onZoomStop;
            if (_this.pinchStartScale) {
                handlePinchStop(_this);
                handleCallback(getContext(_this), event, onPinchingStop);
                handleCallback(getContext(_this), event, onZoomStop);
            }
        };
        /// ///////
        // Touch
        /// ///////
        this.onTouchPanningStart = function (event) {
            var disabled = _this.setup.disabled;
            var onPanningStart = _this.props.onPanningStart;
            if (disabled)
                return;
            var isAllowed = isPanningStartAllowed(_this, event);
            if (!isAllowed)
                return;
            var isDoubleTap = _this.lastTouch && +new Date() - _this.lastTouch < 200;
            if (!isDoubleTap) {
                _this.lastTouch = +new Date();
                handleCancelAnimation(_this);
                var touches = event.touches;
                var isPanningAction = touches.length === 1;
                var isPinchAction = touches.length === 2;
                if (isPanningAction) {
                    handleCancelAnimation(_this);
                    handlePanningStart(_this, event);
                    handleCallback(getContext(_this), event, onPanningStart);
                }
                if (isPinchAction) {
                    _this.onPinchStart(event);
                }
            }
        };
        this.onTouchPanning = function (event) {
            var disabled = _this.setup.disabled;
            var onPanning = _this.props.onPanning;
            if (_this.isPanning && event.touches.length === 1) {
                if (disabled)
                    return;
                var isAllowed = isPanningAllowed(_this);
                if (!isAllowed)
                    return;
                event.preventDefault();
                event.stopPropagation();
                var touch = event.touches[0];
                handlePanning(_this, touch.clientX, touch.clientY);
                handleCallback(getContext(_this), event, onPanning);
            }
            else if (event.touches.length > 1) {
                _this.onPinch(event);
            }
        };
        this.onTouchPanningStop = function (event) {
            _this.onPanningStop(event);
            _this.onPinchStop(event);
        };
        /// ///////
        // Double Click
        /// ///////
        this.onDoubleClick = function (event) {
            var disabled = _this.setup.disabled;
            if (disabled)
                return;
            var isAllowed = isDoubleClickAllowed(_this, event);
            if (!isAllowed)
                return;
            handleDoubleClick(_this, event);
        };
        /// ///////
        // Helpers
        /// ///////
        this.clearPanning = function (event) {
            if (_this.isPanning) {
                _this.onPanningStop(event);
            }
        };
        this.setKeyPressed = function (e) {
            _this.pressedKeys[e.key] = true;
        };
        this.setKeyUnPressed = function (e) {
            _this.pressedKeys[e.key] = false;
        };
        this.isPressingKeys = function (keys) {
            if (!keys.length) {
                return true;
            }
            return Boolean(keys.find(function (key) { return _this.pressedKeys[key]; }));
        };
        this.setTransformState = function (scale, positionX, positionY) {
            var onTransformed = _this.props.onTransformed;
            if (!Number.isNaN(scale) &&
                !Number.isNaN(positionX) &&
                !Number.isNaN(positionY)) {
                if (scale !== _this.transformState.scale) {
                    _this.transformState.previousScale = _this.transformState.scale;
                    _this.transformState.scale = scale;
                }
                _this.transformState.positionX = positionX;
                _this.transformState.positionY = positionY;
                _this.applyTransformation();
                var ctx_1 = getContext(_this);
                _this.onChangeCallbacks.forEach(function (callback) { return callback(ctx_1); });
                handleCallback(ctx_1, { scale: scale, positionX: positionX, positionY: positionY }, onTransformed);
            }
            else {
                console.error("Detected NaN set state values");
            }
        };
        this.setCenter = function () {
            if (_this.wrapperComponent && _this.contentComponent) {
                var targetState = getCenterPosition(_this.transformState.scale, _this.wrapperComponent, _this.contentComponent);
                _this.setTransformState(targetState.scale, targetState.positionX, targetState.positionY);
            }
        };
        this.handleTransformStyles = function (x, y, scale) {
            if (_this.props.customTransform) {
                return _this.props.customTransform(x, y, scale);
            }
            return getTransformStyles(x, y, scale);
        };
        this.applyTransformation = function () {
            if (!_this.mounted || !_this.contentComponent)
                return;
            var _a = _this.transformState, scale = _a.scale, positionX = _a.positionX, positionY = _a.positionY;
            var transform = _this.handleTransformStyles(positionX, positionY, scale);
            _this.contentComponent.style.transform = transform;
        };
        this.getContext = function () {
            return getContext(_this);
        };
        /**
         * Hooks
         */
        this.onChange = function (callback) {
            if (!_this.onChangeCallbacks.has(callback)) {
                _this.onChangeCallbacks.add(callback);
            }
            return function () {
                _this.onChangeCallbacks.delete(callback);
            };
        };
        this.onInit = function (callback) {
            if (!_this.onInitCallbacks.has(callback)) {
                _this.onInitCallbacks.add(callback);
            }
            return function () {
                _this.onInitCallbacks.delete(callback);
            };
        };
        /**
         * Initialization
         */
        this.init = function (wrapperComponent, contentComponent) {
            _this.cleanupWindowEvents();
            _this.wrapperComponent = wrapperComponent;
            _this.contentComponent = contentComponent;
            handleCalculateBounds(_this, _this.transformState.scale);
            _this.handleInitializeWrapperEvents(wrapperComponent);
            _this.handleInitialize(contentComponent);
            _this.initializeWindowEvents();
            _this.isInitialized = true;
            var ctx = getContext(_this);
            handleCallback(ctx, undefined, _this.props.onInit);
        };
        this.props = props;
        this.setup = createSetup(this.props);
        this.transformState = createState(this.props);
    }
    return ZoomPanPinch;
}());

var Context = react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);
var getContent = function (children, ctx) {
    if (typeof children === "function") {
        return children(ctx);
    }
    return children;
};
var TransformWrapper = react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function (props, ref) {
    var instance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new ZoomPanPinch(props)).current;
    var content = getContent(props.children, getControls(instance));
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, function () { return getControls(instance); }, [instance]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        instance.update(props);
    }, [instance, props]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, { value: instance }, content);
});

var KeepScale = react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function (props, ref) {
    var localRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var instance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        return instance.onChange(function (ctx) {
            if (localRef.current) {
                var positionX = 0;
                var positionY = 0;
                localRef.current.style.transform = instance.handleTransformStyles(positionX, positionY, 1 / ctx.instance.transformState.scale);
            }
        });
    }, [instance]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", __assign({}, props, { ref: mergeRefs([localRef, ref]) }));
});

var initialElementRect = {
    width: 0,
    height: 0,
    y: 0,
    x: 0,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
};
var useResize = function (ref, onResize, dependencies) {
    var resizeObserverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
    var rectRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialElementRect);
    var didUnmount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(function () {
        var _a;
        didUnmount.current = false;
        if (!("ResizeObserver" in window)) {
            return;
        }
        if (ref) {
            resizeObserverRef.current = new ResizeObserver(function (entries) {
                var newSize = ref.getBoundingClientRect();
                if (!Array.isArray(entries) ||
                    !entries.length ||
                    didUnmount.current ||
                    (newSize.width === rectRef.current.width &&
                        newSize.height === rectRef.current.height))
                    return;
                onResize(newSize, ref);
                rectRef.current = newSize;
            });
            (_a = resizeObserverRef.current) === null || _a === void 0 ? void 0 : _a.observe(ref);
        }
        return function () {
            var _a;
            didUnmount.current = true;
            if (ref) {
                (_a = resizeObserverRef.current) === null || _a === void 0 ? void 0 : _a.unobserve(ref);
            }
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, __spreadArray([onResize, ref], dependencies, true));
};

var previewStyles = {
    position: "absolute",
    zIndex: 2,
    top: "0px",
    left: "0px",
    boxSizing: "border-box",
    border: "3px solid red",
    transformOrigin: "0% 0%",
    boxShadow: "rgba(0,0,0,0.2) 0 0 0 10000000px",
};
var MiniMap = function (_a) {
    var _b = _a.width, width = _b === void 0 ? 200 : _b, _c = _a.height, height = _c === void 0 ? 200 : _c, _d = _a.borderColor, borderColor = _d === void 0 ? "red" : _d, children = _a.children, rest = __rest(_a, ["width", "height", "borderColor", "children"]);
    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), initialized = _e[0], setInitialized = _e[1];
    var instance = useTransformContext();
    var miniMapInstance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var mainRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var previewRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var getViewportSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
        if (instance.wrapperComponent) {
            var rect = instance.wrapperComponent.getBoundingClientRect();
            return {
                width: rect.width,
                height: rect.height
            };
        }
        return {
            width: 0,
            height: 0
        };
    }, [instance.wrapperComponent]);
    var getContentSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
        if (instance.contentComponent) {
            var rect = instance.contentComponent.getBoundingClientRect();
            return {
                width: rect.width / instance.transformState.scale,
                height: rect.height / instance.transformState.scale,
            };
        }
        return {
            width: 0,
            height: 0,
        };
    }, [instance.contentComponent, instance.transformState.scale]);
    var computeMiniMapScale = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
        var contentSize = getContentSize();
        var scaleX = width / contentSize.width;
        var scaleY = height / contentSize.height;
        var scale = scaleY > scaleX ? scaleX : scaleY;
        return scale;
    }, [getContentSize, height, width]);
    var computeMiniMapSize = function () {
        var contentSize = getContentSize();
        var scaleX = width / contentSize.width;
        var scaleY = height / contentSize.height;
        if (scaleY > scaleX) {
            return { width: width, height: contentSize.height * scaleX };
        }
        return { width: contentSize.width * scaleY, height: height };
    };
    var computeMiniMapStyle = function () {
        var scale = computeMiniMapScale();
        var style = {
            transform: "scale(".concat(scale || 1, ")"),
            transformOrigin: "0% 0%",
            position: "absolute",
            boxSizing: "border-box",
            zIndex: 1,
            overflow: "hidden",
        };
        Object.keys(style).forEach(function (key) {
            if (wrapperRef.current) {
                wrapperRef.current.style[key] = style[key];
            }
        });
    };
    var transformMiniMap = function () {
        computeMiniMapStyle();
        var miniSize = computeMiniMapSize();
        var wrapSize = getContentSize();
        if (wrapperRef.current) {
            wrapperRef.current.style.width = "".concat(wrapSize.width, "px");
            wrapperRef.current.style.height = "".concat(wrapSize.height, "px");
        }
        if (mainRef.current) {
            mainRef.current.style.width = "".concat(miniSize.width, "px");
            mainRef.current.style.height = "".concat(miniSize.height, "px");
        }
        if (previewRef.current) {
            var size = getViewportSize();
            var scale = computeMiniMapScale();
            var previewScale = scale * (1 / instance.transformState.scale);
            var transform = instance.handleTransformStyles(-instance.transformState.positionX * previewScale, -instance.transformState.positionY * previewScale, 1);
            previewRef.current.style.transform = transform;
            previewRef.current.style.width = "".concat(size.width * previewScale, "px");
            previewRef.current.style.height = "".concat(size.height * previewScale, "px");
        }
    };
    var initialize = function () {
        transformMiniMap();
    };
    useTransformEffect(function () {
        transformMiniMap();
    });
    useTransformInit(function () {
        initialize();
        setInitialized(true);
    });
    useResize(instance.contentComponent, initialize, [initialized]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        return instance.onChange(function (zpp) {
            var scale = computeMiniMapScale();
            if (miniMapInstance.current) {
                miniMapInstance.current.instance.transformState.scale =
                    zpp.instance.transformState.scale;
                miniMapInstance.current.instance.transformState.positionX =
                    zpp.instance.transformState.positionX * scale;
                miniMapInstance.current.instance.transformState.positionY =
                    zpp.instance.transformState.positionY * scale;
            }
        });
    }, [computeMiniMapScale, instance, miniMapInstance]);
    var wrapperStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
        return {
            position: "relative",
            zIndex: 2,
            overflow: "hidden",
        };
    }, []);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", __assign({}, rest, { ref: mainRef, style: wrapperStyle, className: "rzpp-mini-map ".concat(rest.className || "") }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", __assign({}, rest, { ref: wrapperRef, className: "rzpp-wrapper" }), children),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", { className: "rzpp-preview", ref: previewRef, style: __assign(__assign({}, previewStyles), { borderColor: borderColor }) })));
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".transform-component-module_wrapper__SPB86 {\n  position: relative;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  overflow: hidden;\n  -webkit-touch-callout: none; /* iOS Safari */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n  user-select: none;\n  margin: 0;\n  padding: 0;\n}\n.transform-component-module_content__FBWxo {\n  display: flex;\n  flex-wrap: wrap;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  margin: 0;\n  padding: 0;\n  transform-origin: 0% 0%;\n}\n.transform-component-module_content__FBWxo img {\n  pointer-events: none;\n}\n";
var styles = {"wrapper":"transform-component-module_wrapper__SPB86","content":"transform-component-module_content__FBWxo"};
styleInject(css_248z);

var TransformComponent = function (_a) {
    var children = _a.children, _b = _a.wrapperClass, wrapperClass = _b === void 0 ? "" : _b, _c = _a.contentClass, contentClass = _c === void 0 ? "" : _c, wrapperStyle = _a.wrapperStyle, contentStyle = _a.contentStyle, _d = _a.wrapperProps, wrapperProps = _d === void 0 ? {} : _d, _e = _a.contentProps, contentProps = _e === void 0 ? {} : _e;
    var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context), init = _f.init, cleanupWindowEvents = _f.cleanupWindowEvents;
    var wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var contentRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        var wrapper = wrapperRef.current;
        var content = contentRef.current;
        if (wrapper !== null && content !== null && init) {
            init === null || init === void 0 ? void 0 : init(wrapper, content);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
        return function () {
            cleanupWindowEvents === null || cleanupWindowEvents === void 0 ? void 0 : cleanupWindowEvents();
        };
    }, []);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", __assign({}, wrapperProps, { ref: wrapperRef, className: "".concat(baseClasses.wrapperClass, " ").concat(styles.wrapper, " ").concat(wrapperClass), style: wrapperStyle }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", __assign({}, contentProps, { ref: contentRef, className: "".concat(baseClasses.contentClass, " ").concat(styles.content, " ").concat(contentClass), style: contentStyle }), children)));
};

var useTransformContext = function () {
    var libraryContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);
    if (!libraryContext) {
        throw new Error("Transform context must be placed inside TransformWrapper");
    }
    return libraryContext;
};

var useControls = function () {
    var libraryContext = useTransformContext();
    return getControls(libraryContext);
};

var useTransformInit = function (callback) {
    var libraryContext = useTransformContext();
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        var unmountCallback;
        var unmount;
        if (libraryContext.contentComponent && libraryContext.wrapperComponent) {
            unmountCallback = callback(getState(libraryContext));
        }
        else {
            unmount = libraryContext.onInit(function (ref) {
                unmountCallback = callback(getState(ref.instance));
            });
        }
        return function () {
            unmount === null || unmount === void 0 ? void 0 : unmount();
            unmountCallback === null || unmountCallback === void 0 ? void 0 : unmountCallback();
        };
    }, []);
};

var useTransformEffect = function (callback) {
    var libraryContext = useTransformContext();
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        var unmountCallback;
        var unmount = libraryContext.onChange(function (ref) {
            unmountCallback = callback(getState(ref.instance));
        });
        return function () {
            unmount();
            unmountCallback === null || unmountCallback === void 0 ? void 0 : unmountCallback();
        };
    }, [callback, libraryContext]);
};

function useTransformComponent(callback) {
    var libraryContext = useTransformContext();
    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(callback(getState(libraryContext))), transformRender = _a[0], setTransformRender = _a[1];
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        var mounted = true;
        var unmount = libraryContext.onChange(function (ref) {
            if (mounted) {
                setTransformRender(callback(getState(ref.instance)));
            }
        });
        return function () {
            unmount();
            mounted = false;
        };
    }, [callback, libraryContext]);
    return transformRender;
}




/***/ }),

/***/ "../../node_modules/react/cjs/react.development.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react/cjs/react.development.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var ReactVersion = '18.3.1';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE = Symbol.for('react.element');
var REACT_PORTAL_TYPE = Symbol.for('react.portal');
var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
var REACT_CONTEXT_TYPE = Symbol.for('react.context');
var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
var REACT_MEMO_TYPE = Symbol.for('react.memo');
var REACT_LAZY_TYPE = Symbol.for('react.lazy');
var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: null
};

var ReactCurrentActQueue = {
  current: null,
  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
  isBatchingLegacy: false,
  didScheduleLegacyUpdate: false
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

// -----------------------------------------------------------------------------

var enableScopeAPI = false; // Experimental Create Event Handle API.
var enableCacheElement = false;
var enableTransitionTracing = false; // No known bugs, but needs performance testing

var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
// stuff. Intended to enable React core members to more easily debug scheduling
// issues in DEV builds.

var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
}
function error(format) {
  {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var assign = Object.assign;

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

function isArray(a) {
  return isArrayImpl(a);
}

/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */
// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value) {
  {
    // toStringTag is needed for namespaced types like Temporal.Instant
    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
    return type;
  }
} // $FlowFixMe only called in DEV, so void return is not possible.


function willCoercionThrow(value) {
  {
    try {
      testStringCoercion(value);
      return false;
    } catch (e) {
      return true;
    }
  }
}

function testStringCoercion(value) {
  // If you ended up here by following an exception call stack, here's what's
  // happened: you supplied an object or symbol value to React (as a prop, key,
  // DOM attribute, CSS property, string ref, etc.) and when React tried to
  // coerce it to a string using `'' + value`, an exception was thrown.
  //
  // The most common types that will cause this exception are `Symbol` instances
  // and Temporal objects like `Temporal.Instant`. But any object that has a
  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
  // exception. (Library authors do this to prevent users from using built-in
  // numeric operators like `+` or comparison operators like `>=` because custom
  // methods are needed to perform accurate arithmetic or comparison.)
  //
  // To fix the problem, coerce this object or symbol value to a string before
  // passing it to React. The most reliable way is usually `String(value)`.
  //
  // To find which value is throwing, check the browser or debugger console.
  // Before this exception was thrown, there should be `console.error` output
  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
  // problem and how that type was used: key, atrribute, input value prop, etc.
  // In most cases, this console output also shows the component and its
  // ancestor components where the exception happened.
  //
  // eslint-disable-next-line react-internal/safe-string-coercion
  return '' + value;
}
function checkKeyStringCoercion(value) {
  {
    if (willCoercionThrow(value)) {
      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
    }
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var displayName = outerType.displayName;

  if (displayName) {
    return displayName;
  }

  var functionName = innerType.displayName || innerType.name || '';
  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
} // Keep in sync with react-reconciler/getComponentNameFromFiber


function getContextName(type) {
  return type.displayName || 'Context';
} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


function getComponentNameFromType(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';

  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        var outerName = type.displayName || null;

        if (outerName !== null) {
          return outerName;
        }

        return getComponentNameFromType(type.type) || 'Memo';

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentNameFromType(init(payload));
          } catch (x) {
            return null;
          }
        }

      // eslint-disable-next-line no-fallthrough
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (element === null || element === undefined) {
    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
  }

  var propName; // Original props are copied

  var props = assign({}, element.props); // Reserved names are extracted

  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      {
        checkKeyStringCoercion(config.key);
      }

      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    {
      checkKeyStringCoercion(element.key);
    }

    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        {
          // The `if` statement here prevents auto-disabling of the safe
          // coercion ESLint rule, so we must manually disable it below.
          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
            checkKeyStringCoercion(mappedChild.key);
          }
        }

        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        // eslint-disable-next-line react-internal/safe-string-coercion
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      // eslint-disable-next-line react-internal/safe-string-coercion
      var childrenString = String(children);
      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    throw new Error('React.Children.only expected to receive a single React element child.');
  }

  return children;
}

function createContext(defaultValue) {
  // TODO: Second argument used to be an optional `calculateChangedBits`
  // function. Warn to reserve for future use?
  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null,
    // Add these to use same hidden class in VM as ServerContext
    _defaultValue: null,
    _globalName: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.
    // This might throw either because it's missing or throws. If so, we treat it
    // as still uninitialized and try again next time. Which is the same as what
    // happens if the ctor or any wrappers processing the ctor throws. This might
    // end up fixing it if the resolution was a concurrency bug.

    thenable.then(function (moduleObject) {
      if (payload._status === Pending || payload._status === Uninitialized) {
        // Transition to the next state.
        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = moduleObject;
      }
    }, function (error) {
      if (payload._status === Pending || payload._status === Uninitialized) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });

    if (payload._status === Uninitialized) {
      // In case, we're still uninitialized, then we're waiting for the thenable
      // to resolve. Set it as pending in the meantime.
      var pending = payload;
      pending._status = Pending;
      pending._result = thenable;
    }
  }

  if (payload._status === Resolved) {
    var moduleObject = payload._result;

    {
      if (moduleObject === undefined) {
        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
      }
    }

    {
      if (!('default' in moduleObject)) {
        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
      }
    }

    return moduleObject.default;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: Uninitialized,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name; // The inner component shouldn't inherit this display name in most cases,
        // because the component may be used elsewhere.
        // But it's nice for anonymous functions to inherit the name,
        // so that our component-stack generation logic will display their frames.
        // An anonymous function generally suggests a pattern like:
        //   React.forwardRef((props, ref) => {...});
        // This kind of inner function is not used elsewhere so the side effect is okay.

        if (!render.name && !render.displayName) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

var REACT_MODULE_REFERENCE;

{
  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
}

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
    // types supported by any Flight configuration anywhere since
    // we don't know which Flight build this will end up being used
    // with.
    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name; // The inner component shouldn't inherit this display name in most cases,
        // because the component may be used elsewhere.
        // But it's nice for anonymous functions to inherit the name,
        // so that our component-stack generation logic will display their frames.
        // An anonymous function generally suggests a pattern like:
        //   React.memo((props) => {...});
        // This kind of inner function is not used elsewhere so the side effect is okay.

        if (!type.name && !type.displayName) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  {
    if (dispatcher === null) {
      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
    }
  } // Will result in a null access error if accessed outside render phase. We
  // intentionally don't throw our own error because this is in a hot path.
  // Also helps ensure this is inlined.


  return dispatcher;
}
function useContext(Context) {
  var dispatcher = resolveDispatcher();

  {
    // TODO: add a more generic warning for invalid values.
    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useInsertionEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useInsertionEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}
function useTransition() {
  var dispatcher = resolveDispatcher();
  return dispatcher.useTransition();
}
function useDeferredValue(value) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useDeferredValue(value);
}
function useId() {
  var dispatcher = resolveDispatcher();
  return dispatcher.useId();
}
function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: assign({}, props, {
          value: prevLog
        }),
        info: assign({}, props, {
          value: prevInfo
        }),
        warn: assign({}, props, {
          value: prevWarn
        }),
        error: assign({}, props, {
          value: prevError
        }),
        group: assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if ( !fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                // but we have a user-provided "displayName"
                // splice it in to make the stack more readable.


                if (fn.displayName && _frame.includes('<anonymous>')) {
                  _frame = _frame.replace('<anonymous>', fn.displayName);
                }

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            // eslint-disable-next-line react-internal/prod-error-codes
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentNameFromType(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentNameFromType(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

function startTransition(scope, options) {
  var prevTransition = ReactCurrentBatchConfig.transition;
  ReactCurrentBatchConfig.transition = {};
  var currentTransition = ReactCurrentBatchConfig.transition;

  {
    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
  }

  try {
    scope();
  } finally {
    ReactCurrentBatchConfig.transition = prevTransition;

    {
      if (prevTransition === null && currentTransition._updatedFibers) {
        var updatedFibersCount = currentTransition._updatedFibers.size;

        if (updatedFibersCount > 10) {
          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
        }

        currentTransition._updatedFibers.clear();
      }
    }
  }
}

var didWarnAboutMessageChannel = false;
var enqueueTaskImpl = null;
function enqueueTask(task) {
  if (enqueueTaskImpl === null) {
    try {
      // read require off the module object to get around the bundlers.
      // we don't want them to detect a require and bundle a Node polyfill.
      var requireString = ('require' + Math.random()).slice(0, 7);
      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
      // version of setImmediate, bypassing fake timers if any.

      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
    } catch (_err) {
      // we're in a browser
      // we can't use regular timers because they may still be faked
      // so we try MessageChannel+postMessage instead
      enqueueTaskImpl = function (callback) {
        {
          if (didWarnAboutMessageChannel === false) {
            didWarnAboutMessageChannel = true;

            if (typeof MessageChannel === 'undefined') {
              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
            }
          }
        }

        var channel = new MessageChannel();
        channel.port1.onmessage = callback;
        channel.port2.postMessage(undefined);
      };
    }
  }

  return enqueueTaskImpl(task);
}

var actScopeDepth = 0;
var didWarnNoAwaitAct = false;
function act(callback) {
  {
    // `act` calls can be nested, so we track the depth. This represents the
    // number of `act` scopes on the stack.
    var prevActScopeDepth = actScopeDepth;
    actScopeDepth++;

    if (ReactCurrentActQueue.current === null) {
      // This is the outermost `act` scope. Initialize the queue. The reconciler
      // will detect the queue and use it instead of Scheduler.
      ReactCurrentActQueue.current = [];
    }

    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
    var result;

    try {
      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
      // set to `true` while the given callback is executed, not for updates
      // triggered during an async event, because this is how the legacy
      // implementation of `act` behaved.
      ReactCurrentActQueue.isBatchingLegacy = true;
      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
      // which flushed updates immediately after the scope function exits, even
      // if it's an async function.

      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
        var queue = ReactCurrentActQueue.current;

        if (queue !== null) {
          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
          flushActQueue(queue);
        }
      }
    } catch (error) {
      popActScope(prevActScopeDepth);
      throw error;
    } finally {
      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
    }

    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
      // for it to resolve before exiting the current scope.

      var wasAwaited = false;
      var thenable = {
        then: function (resolve, reject) {
          wasAwaited = true;
          thenableResult.then(function (returnValue) {
            popActScope(prevActScopeDepth);

            if (actScopeDepth === 0) {
              // We've exited the outermost act scope. Recursively flush the
              // queue until there's no remaining work.
              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            } else {
              resolve(returnValue);
            }
          }, function (error) {
            // The callback threw an error.
            popActScope(prevActScopeDepth);
            reject(error);
          });
        }
      };

      {
        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
          // eslint-disable-next-line no-undef
          Promise.resolve().then(function () {}).then(function () {
            if (!wasAwaited) {
              didWarnNoAwaitAct = true;

              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
            }
          });
        }
      }

      return thenable;
    } else {
      var returnValue = result; // The callback is not an async function. Exit the current scope
      // immediately, without awaiting.

      popActScope(prevActScopeDepth);

      if (actScopeDepth === 0) {
        // Exiting the outermost act scope. Flush the queue.
        var _queue = ReactCurrentActQueue.current;

        if (_queue !== null) {
          flushActQueue(_queue);
          ReactCurrentActQueue.current = null;
        } // Return a thenable. If the user awaits it, we'll flush again in
        // case additional work was scheduled by a microtask.


        var _thenable = {
          then: function (resolve, reject) {
            // Confirm we haven't re-entered another `act` scope, in case
            // the user does something weird like await the thenable
            // multiple times.
            if (ReactCurrentActQueue.current === null) {
              // Recursively flush the queue until there's no remaining work.
              ReactCurrentActQueue.current = [];
              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            } else {
              resolve(returnValue);
            }
          }
        };
        return _thenable;
      } else {
        // Since we're inside a nested `act` scope, the returned thenable
        // immediately resolves. The outer scope will flush the queue.
        var _thenable2 = {
          then: function (resolve, reject) {
            resolve(returnValue);
          }
        };
        return _thenable2;
      }
    }
  }
}

function popActScope(prevActScopeDepth) {
  {
    if (prevActScopeDepth !== actScopeDepth - 1) {
      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
    }

    actScopeDepth = prevActScopeDepth;
  }
}

function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
  {
    var queue = ReactCurrentActQueue.current;

    if (queue !== null) {
      try {
        flushActQueue(queue);
        enqueueTask(function () {
          if (queue.length === 0) {
            // No additional work was scheduled. Finish.
            ReactCurrentActQueue.current = null;
            resolve(returnValue);
          } else {
            // Keep flushing work until there's none left.
            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
          }
        });
      } catch (error) {
        reject(error);
      }
    } else {
      resolve(returnValue);
    }
  }
}

var isFlushing = false;

function flushActQueue(queue) {
  {
    if (!isFlushing) {
      // Prevent re-entrance.
      isFlushing = true;
      var i = 0;

      try {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(true);
          } while (callback !== null);
        }

        queue.length = 0;
      } catch (error) {
        // If something throws, leave the remaining callbacks on the queue.
        queue = queue.slice(i + 1);
        throw error;
      } finally {
        isFlushing = false;
      }
    }
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.act = act;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.startTransition = startTransition;
exports.unstable_act = act;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useDeferredValue = useDeferredValue;
exports.useEffect = useEffect;
exports.useId = useId;
exports.useImperativeHandle = useImperativeHandle;
exports.useInsertionEffect = useInsertionEffect;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.useSyncExternalStore = useSyncExternalStore;
exports.useTransition = useTransition;
exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "../../node_modules/react/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/react/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "../../node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "../../node_modules/scheduler/cjs/scheduler.development.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/scheduler/cjs/scheduler.development.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {

          'use strict';

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
}
          var enableSchedulerDebugging = false;
var enableProfiling = false;
var frameYieldMs = 5;

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  return heap.length === 0 ? null : heap[0];
}
function pop(heap) {
  if (heap.length === 0) {
    return null;
  }

  var first = heap[0];
  var last = heap.pop();

  if (last !== first) {
    heap[0] = last;
    siftDown(heap, last, 0);
  }

  return first;
}

function siftUp(heap, node, i) {
  var index = i;

  while (index > 0) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;
  var halfLength = length >>> 1;

  while (index < halfLength) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (compare(left, node) < 0) {
      if (rightIndex < length && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (rightIndex < length && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

function markTaskErrored(task, ms) {
}

/* eslint-disable no-var */

var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

if (hasPerformanceNow) {
  var localPerformance = performance;

  exports.unstable_now = function () {
    return localPerformance.now();
  };
} else {
  var localDate = Date;
  var initialTime = localDate.now();

  exports.unstable_now = function () {
    return localDate.now() - initialTime;
  };
} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111


var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod code path.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (typeof callback === 'function') {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
      } else {

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }
  } else {
    startTime = currentTime;
  }

  var timeout;

  switch (priorityLevel) {
    case ImmediatePriority:
      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
      break;

    case UserBlockingPriority:
      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
      break;

    case IdlePriority:
      timeout = IDLE_PRIORITY_TIMEOUT;
      break;

    case LowPriority:
      timeout = LOW_PRIORITY_TIMEOUT;
      break;

    case NormalPriority:
    default:
      timeout = NORMAL_PRIORITY_TIMEOUT;
      break;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

var isMessageLoopRunning = false;
var scheduledHostCallback = null;
var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
// thread, like user events. By default, it yields multiple times per frame.
// It does not attempt to align with frame boundaries, since most tasks don't
// need to be frame aligned; for those that do, use requestAnimationFrame.

var frameInterval = frameYieldMs;
var startTime = -1;

function shouldYieldToHost() {
  var timeElapsed = exports.unstable_now() - startTime;

  if (timeElapsed < frameInterval) {
    // The main thread has only been blocked for a really short amount of time;
    // smaller than a single frame. Don't yield yet.
    return false;
  } // The main thread has been blocked for a non-negligible amount of time. We


  return true;
}

function requestPaint() {

}

function forceFrameRate(fps) {
  if (fps < 0 || fps > 125) {
    // Using console['error'] to evade Babel and ESLint
    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
    return;
  }

  if (fps > 0) {
    frameInterval = Math.floor(1000 / fps);
  } else {
    // reset the framerate
    frameInterval = frameYieldMs;
  }
}

var performWorkUntilDeadline = function () {
  if (scheduledHostCallback !== null) {
    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
    // has been blocked.

    startTime = currentTime;
    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
    // error can be observed.
    //
    // Intentionally not using a try-catch, since that makes some debugging
    // techniques harder. Instead, if `scheduledHostCallback` errors, then
    // `hasMoreWork` will remain true, and we'll continue the work loop.

    var hasMoreWork = true;

    try {
      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
    } finally {
      if (hasMoreWork) {
        // If there's more work, schedule the next message event at the end
        // of the preceding one.
        schedulePerformWorkUntilDeadline();
      } else {
        isMessageLoopRunning = false;
        scheduledHostCallback = null;
      }
    }
  } else {
    isMessageLoopRunning = false;
  } // Yielding to the browser will give it a chance to paint, so we can
};

var schedulePerformWorkUntilDeadline;

if (typeof localSetImmediate === 'function') {
  // Node.js and old IE.
  // There's a few reasons for why we prefer setImmediate.
  //
  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
  // (Even though this is a DOM fork of the Scheduler, you could get here
  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
  // https://github.com/facebook/react/issues/20756
  //
  // But also, it runs earlier which is the semantic we want.
  // If other browsers ever implement it, it's better to use it.
  // Although both of these would be inferior to native scheduling.
  schedulePerformWorkUntilDeadline = function () {
    localSetImmediate(performWorkUntilDeadline);
  };
} else if (typeof MessageChannel !== 'undefined') {
  // DOM and Worker environments.
  // We prefer MessageChannel because of the 4ms setTimeout clamping.
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  schedulePerformWorkUntilDeadline = function () {
    port.postMessage(null);
  };
} else {
  // We should only fallback here in non-browser environments.
  schedulePerformWorkUntilDeadline = function () {
    localSetTimeout(performWorkUntilDeadline, 0);
  };
}

function requestHostCallback(callback) {
  scheduledHostCallback = callback;

  if (!isMessageLoopRunning) {
    isMessageLoopRunning = true;
    schedulePerformWorkUntilDeadline();
  }
}

function requestHostTimeout(callback, ms) {
  taskTimeoutID = localSetTimeout(function () {
    callback(exports.unstable_now());
  }, ms);
}

function cancelHostTimeout() {
  localClearTimeout(taskTimeoutID);
  taskTimeoutID = -1;
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  null;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_forceFrameRate = forceFrameRate;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = shouldYieldToHost;
exports.unstable_wrapCallback = unstable_wrapCallback;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
    'function'
) {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
}
        
  })();
}


/***/ }),

/***/ "../../node_modules/scheduler/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/scheduler/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "../../node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./kotlin/bgw-bgw-gui.js":
/*!*******************************!*\
  !*** ./kotlin/bgw-bgw-gui.js ***!
  \*******************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! react-dom */ "../../node_modules/react-dom/index.js"), __webpack_require__(/*! react-dom/client */ "../../node_modules/react-dom/client.js"), __webpack_require__(/*! @emotion/css */ "../../node_modules/@emotion/css/dist/emotion-css.development.esm.js"), __webpack_require__(/*! @emotion/react */ "../../node_modules/@emotion/react/dist/emotion-react.browser.development.esm.js"), __webpack_require__(/*! react */ "../../node_modules/react/index.js"), __webpack_require__(/*! @dnd-kit/core */ "../../node_modules/@dnd-kit/core/dist/core.esm.js"), __webpack_require__(/*! react-zoom-pan-pinch */ "../../node_modules/react-zoom-pan-pinch/dist/index.esm.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlinx-serialization-kotlinx-serialization-core.js */ "./kotlin/kotlinx-serialization-kotlinx-serialization-core.js"), __webpack_require__(/*! ./kotlinx-serialization-kotlinx-serialization-json.js */ "./kotlin/kotlinx-serialization-kotlinx-serialization-json.js"), __webpack_require__(/*! ./kotlin-react.js */ "./kotlin/kotlin-react.js"), __webpack_require__(/*! ./kotlin-react-core.js */ "./kotlin/kotlin-react-core.js"), __webpack_require__(/*! ./kotlin-react-dom.js */ "./kotlin/kotlin-react-dom.js"), __webpack_require__(/*! ./kotlinx-coroutines-core.js */ "./kotlin/kotlinx-coroutines-core.js"), __webpack_require__(/*! ./kotlin-cssom-core.js */ "./kotlin/kotlin-cssom-core.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, $module$react_dom_nty7mo, $module$react_dom_client_y5z5eu, $module$_emotion_css_2enn37, $module$_emotion_react_ujmspt, $module$react, $module$_dnd_kit_core_sosbwp, $module$react_zoom_pan_pinch_tvc8i, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json, kotlin_org_jetbrains_kotlin_wrappers_kotlin_react, kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_dom, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_cssom_core) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var render = $module$react_dom_nty7mo.render;
  var createRoot = $module$react_dom_client_y5z5eu.createRoot;
  var css = $module$_emotion_css_2enn37.css;
  var Global = $module$_emotion_react_ujmspt.Global;
  var useState = $module$react.useState;
  var useRef = $module$react.useRef;
  var PointerSensor = $module$_dnd_kit_core_sosbwp.PointerSensor;
  var useSensor = $module$_dnd_kit_core_sosbwp.useSensor;
  var useSensors = $module$_dnd_kit_core_sosbwp.useSensors;
  var MeasuringStrategy = $module$_dnd_kit_core_sosbwp.MeasuringStrategy;
  var MeasuringFrequency = $module$_dnd_kit_core_sosbwp.MeasuringFrequency;
  var DndContext = $module$_dnd_kit_core_sosbwp.DndContext;
  var getClientRect = $module$_dnd_kit_core_sosbwp.getClientRect;
  var DragOverlay = $module$_dnd_kit_core_sosbwp.DragOverlay;
  var useDraggable = $module$_dnd_kit_core_sosbwp.useDraggable;
  var useDroppable = $module$_dnd_kit_core_sosbwp.useDroppable;
  var TransformWrapper = $module$react_zoom_pan_pinch_tvc8i.TransformWrapper;
  var TransformComponent = $module$react_zoom_pan_pinch_tvc8i.TransformComponent;
  var sign = Math.sign;
  var VOID = kotlin_kotlin.$_$.e;
  var joinToString = kotlin_kotlin.$_$.l5;
  var _UByte___init__impl__g9hnc4 = kotlin_kotlin.$_$.v1;
  var toString = kotlin_kotlin.$_$.fa;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.n1;
  var padStart = kotlin_kotlin.$_$.r9;
  var encodeToByteArray = kotlin_kotlin.$_$.l9;
  var protoOf = kotlin_kotlin.$_$.s8;
  var initMetadataForObject = kotlin_kotlin.$_$.b8;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var SerializersModuleBuilder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g2;
  var getKClass = kotlin_kotlin.$_$.d;
  var PolymorphicModuleBuilder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f2;
  var arrayOf = kotlin_kotlin.$_$.mb;
  var createKType = kotlin_kotlin.$_$.a;
  var serializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.r2;
  var THROW_CCE = kotlin_kotlin.$_$.za;
  var KSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k2;
  var isInterface = kotlin_kotlin.$_$.j8;
  var Json = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.$_$.a;
  var createSimpleEnumSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b2;
  var LazyThreadSafetyMode_PUBLICATION_getInstance = kotlin_kotlin.$_$.f;
  var lazy = kotlin_kotlin.$_$.tb;
  var SerializerFactory = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.z1;
  var initMetadataForCompanion = kotlin_kotlin.$_$.x7;
  var Enum = kotlin_kotlin.$_$.ra;
  var initMetadataForClass = kotlin_kotlin.$_$.w7;
  var PluginGeneratedSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.y1;
  var UnknownFieldException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e;
  var StringSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.q;
  var typeParametersSerializers = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.s1;
  var GeneratedSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.t1;
  var throwMissingFieldException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d2;
  var objectCreate = kotlin_kotlin.$_$.r8;
  var get_nullable = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.t;
  var PolymorphicSerializer_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a;
  var SealedClassSerializer_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b;
  var IntSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.p;
  var TripleSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a2;
  var ArrayListSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.q1;
  var emptyList = kotlin_kotlin.$_$.e5;
  var equals = kotlin_kotlin.$_$.p7;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.p3;
  var PairSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.x1;
  var Pair = kotlin_kotlin.$_$.wa;
  var DoubleSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o;
  var BooleanSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n;
  var LinkedHashMapSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.v1;
  var emptyMap = kotlin_kotlin.$_$.f5;
  var getStringHashCode = kotlin_kotlin.$_$.u7;
  var toString_0 = kotlin_kotlin.$_$.w8;
  var hashCode = kotlin_kotlin.$_$.v7;
  var toString_1 = kotlin_kotlin.$_$.yb;
  var getBooleanHashCode = kotlin_kotlin.$_$.r7;
  var getNumberHashCode = kotlin_kotlin.$_$.s7;
  var enumEntries = kotlin_kotlin.$_$.d7;
  var listOf = kotlin_kotlin.$_$.r5;
  var listOf_0 = kotlin_kotlin.$_$.s5;
  var ensureNotNull = kotlin_kotlin.$_$.pb;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.i;
  var startsWith = kotlin_kotlin.$_$.w9;
  var last = kotlin_kotlin.$_$.q5;
  var compareTo = kotlin_kotlin.$_$.n7;
  var joinToString_0 = kotlin_kotlin.$_$.m5;
  var trimIndent = kotlin_kotlin.$_$.la;
  var println = kotlin_kotlin.$_$.e7;
  var toMutableList = kotlin_kotlin.$_$.g6;
  var Default_getInstance = kotlin_kotlin.$_$.o3;
  var random = kotlin_kotlin.$_$.w5;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.r;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.c1;
  var throwUninitializedPropertyAccessException = kotlin_kotlin.$_$.xb;
  var create = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react.$_$.b;
  var serializer_0 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.s2;
  var toList = kotlin_kotlin.$_$.d6;
  var getKClassFromExpression = kotlin_kotlin.$_$.c;
  var addChildNode = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.a;
  var addChild = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.b;
  var FC = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react.$_$.a;
  var ReactHTML_instance = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_dom.$_$.a;
  var create_0 = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react.$_$.c;
  var useEffect = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.g;
  var CoroutineImpl = kotlin_kotlin.$_$.z6;
  var CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.d;
  var initMetadataForLambda = kotlin_kotlin.$_$.a8;
  var Content = kotlin_org_jetbrains_kotlin_wrappers_kotlin_cssom_core.$_$.a;
  var useEffectWithCleanup = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.e;
  var defineProp = kotlin_kotlin.$_$.o7;
  var toDouble = kotlin_kotlin.$_$.ba;
  var split = kotlin_kotlin.$_$.v9;
  var toInt = kotlin_kotlin.$_$.da;
  var useLayoutEffect = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.h;
  var replace = kotlin_kotlin.$_$.t9;
  var coerceIn = kotlin_kotlin.$_$.a9;
  var plus = kotlin_kotlin.$_$.wb;
  var useEffect_0 = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.f;
  var checkIndexOverflow = kotlin_kotlin.$_$.p4;
  //endregion
  //region block: pre-declaration
  initMetadataForObject(Base64, 'Base64');
  initMetadataForCompanion(Companion, VOID, [SerializerFactory]);
  initMetadataForClass(ActionProp, 'ActionProp', VOID, Enum, VOID, VOID, VOID, {0: Companion_getInstance});
  initMetadataForCompanion(Companion_0);
  initMetadataForObject($serializer, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(JsonData, 'JsonData', VOID, VOID, VOID, VOID, VOID, {0: $serializer_getInstance});
  initMetadataForCompanion(Companion_1);
  initMetadataForObject($serializer_0, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(PropData, 'PropData', PropData, VOID, VOID, VOID, VOID, {0: $serializer_getInstance_0});
  initMetadataForCompanion(Companion_2, VOID, [SerializerFactory]);
  initMetadataForClass(Data, 'Data', VOID, VOID, VOID, VOID, VOID, {0: Companion_getInstance_2});
  initMetadataForCompanion(Companion_3);
  initMetadataForObject($serializer_1, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(AppData, 'AppData', AppData, Data, VOID, VOID, VOID, {0: $serializer_getInstance_1});
  initMetadataForCompanion(Companion_4);
  initMetadataForObject($serializer_2, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(SceneData, 'SceneData', SceneData, Data, VOID, VOID, VOID, {0: $serializer_getInstance_2});
  initMetadataForCompanion(Companion_5, VOID, [SerializerFactory]);
  initMetadataForClass(AnimationData, 'AnimationData', VOID, Data, VOID, VOID, VOID, {0: Companion_getInstance_5});
  initMetadataForCompanion(Companion_6);
  initMetadataForObject($serializer_3, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DialogData, 'DialogData', DialogData, Data, VOID, VOID, VOID, {0: $serializer_getInstance_3});
  initMetadataForCompanion(Companion_7);
  initMetadataForObject($serializer_4, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(FileDialogData, 'FileDialogData', FileDialogData, Data, VOID, VOID, VOID, {0: $serializer_getInstance_4});
  initMetadataForCompanion(Companion_8, VOID, [SerializerFactory]);
  initMetadataForClass(ComponentViewData, 'ComponentViewData', VOID, Data, VOID, VOID, VOID, {0: Companion_getInstance_8});
  initMetadataForCompanion(Companion_9, VOID, [SerializerFactory]);
  initMetadataForClass(UIComponentData, 'UIComponentData', VOID, ComponentViewData, VOID, VOID, VOID, {0: Companion_getInstance_9});
  initMetadataForCompanion(Companion_10, VOID, [SerializerFactory]);
  initMetadataForClass(LabeledUIComponentData, 'LabeledUIComponentData', VOID, UIComponentData, VOID, VOID, VOID, {0: Companion_getInstance_10});
  initMetadataForCompanion(Companion_11, VOID, [SerializerFactory]);
  initMetadataForClass(TextInputUIComponentData, 'TextInputUIComponentData', VOID, UIComponentData, VOID, VOID, VOID, {0: Companion_getInstance_11});
  initMetadataForCompanion(Companion_12);
  initMetadataForObject($serializer_5, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(BinaryStateButtonData, 'BinaryStateButtonData', BinaryStateButtonData, LabeledUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_5});
  initMetadataForCompanion(Companion_13);
  initMetadataForObject($serializer_6, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ButtonData, 'ButtonData', ButtonData, LabeledUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_6});
  initMetadataForCompanion(Companion_14);
  initMetadataForObject($serializer_7, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(CheckBoxData, 'CheckBoxData', CheckBoxData, LabeledUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_7});
  initMetadataForCompanion(Companion_15);
  initMetadataForObject($serializer_8, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ComboBoxData, 'ComboBoxData', ComboBoxData, UIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_8});
  initMetadataForCompanion(Companion_16);
  initMetadataForObject($serializer_9, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(LabelData, 'LabelData', LabelData, LabeledUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_9});
  initMetadataForCompanion(Companion_17);
  initMetadataForObject($serializer_10, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(RadioButtonData, 'RadioButtonData', RadioButtonData, LabeledUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_10});
  initMetadataForCompanion(Companion_18);
  initMetadataForObject($serializer_11, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ToggleButtonData, 'ToggleButtonData', ToggleButtonData, LabeledUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_11});
  initMetadataForCompanion(Companion_19);
  initMetadataForObject($serializer_12, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ColorPickerData, 'ColorPickerData', ColorPickerData, UIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_12});
  initMetadataForCompanion(Companion_20);
  initMetadataForObject($serializer_13, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(PasswordFieldData, 'PasswordFieldData', PasswordFieldData, TextInputUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_13});
  initMetadataForCompanion(Companion_21);
  initMetadataForObject($serializer_14, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ProgressBarData, 'ProgressBarData', ProgressBarData, UIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_14});
  initMetadataForCompanion(Companion_22);
  initMetadataForObject($serializer_15, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TextAreaData, 'TextAreaData', TextAreaData, TextInputUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_15});
  initMetadataForCompanion(Companion_23);
  initMetadataForObject($serializer_16, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TextFieldData, 'TextFieldData', TextFieldData, TextInputUIComponentData, VOID, VOID, VOID, {0: $serializer_getInstance_16});
  initMetadataForCompanion(Companion_24, VOID, [SerializerFactory]);
  initMetadataForClass(StructuredDataViewData, 'StructuredDataViewData', VOID, UIComponentData, VOID, VOID, VOID, {0: Companion_getInstance_24});
  initMetadataForCompanion(Companion_25);
  initMetadataForObject($serializer_17, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TableColumnData, 'TableColumnData', TableColumnData, VOID, VOID, VOID, VOID, {0: $serializer_getInstance_17});
  initMetadataForCompanion(Companion_26);
  initMetadataForObject($serializer_18, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ListViewData, 'ListViewData', ListViewData, StructuredDataViewData, VOID, VOID, VOID, {0: $serializer_getInstance_18});
  initMetadataForCompanion(Companion_27);
  initMetadataForObject($serializer_19, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TableViewData, 'TableViewData', TableViewData, StructuredDataViewData, VOID, VOID, VOID, {0: $serializer_getInstance_19});
  initMetadataForCompanion(Companion_28, VOID, [SerializerFactory]);
  initMetadataForClass(LayoutViewData, 'LayoutViewData', VOID, ComponentViewData, VOID, VOID, VOID, {0: Companion_getInstance_28});
  initMetadataForCompanion(Companion_29);
  initMetadataForObject($serializer_20, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(PaneData, 'PaneData', PaneData, LayoutViewData, VOID, VOID, VOID, {0: $serializer_getInstance_20});
  initMetadataForCompanion(Companion_30);
  initMetadataForObject($serializer_21, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(GridPaneData, 'GridPaneData', GridPaneData, LayoutViewData, VOID, VOID, VOID, {0: $serializer_getInstance_21});
  initMetadataForCompanion(Companion_31);
  initMetadataForObject($serializer_22, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(GridElementData, 'GridElementData', VOID, VOID, VOID, VOID, VOID, {0: $serializer_getInstance_22});
  initMetadataForCompanion(Companion_32);
  initMetadataForObject($serializer_23, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(CameraPaneData, 'CameraPaneData', CameraPaneData, ComponentViewData, VOID, VOID, VOID, {0: $serializer_getInstance_23});
  initMetadataForCompanion(Companion_33, VOID, [SerializerFactory]);
  initMetadataForClass(GameComponentViewData, 'GameComponentViewData', VOID, ComponentViewData, VOID, VOID, VOID, {0: Companion_getInstance_33});
  initMetadataForCompanion(Companion_34);
  initMetadataForObject($serializer_24, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(CardViewData, 'CardViewData', CardViewData, GameComponentViewData, VOID, VOID, VOID, {0: $serializer_getInstance_24});
  initMetadataForCompanion(Companion_35);
  initMetadataForObject($serializer_25, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DiceViewData, 'DiceViewData', DiceViewData, GameComponentViewData, VOID, VOID, VOID, {0: $serializer_getInstance_25});
  initMetadataForCompanion(Companion_36);
  initMetadataForObject($serializer_26, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(HexagonViewData, 'HexagonViewData', HexagonViewData, GameComponentViewData, VOID, VOID, VOID, {0: $serializer_getInstance_26});
  initMetadataForCompanion(Companion_37);
  initMetadataForObject($serializer_27, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TokenViewData, 'TokenViewData', TokenViewData, GameComponentViewData, VOID, VOID, VOID, {0: $serializer_getInstance_27});
  initMetadataForCompanion(Companion_38, VOID, [SerializerFactory]);
  initMetadataForClass(GameComponentContainerData, 'GameComponentContainerData', VOID, ComponentViewData, VOID, VOID, VOID, {0: Companion_getInstance_38});
  initMetadataForCompanion(Companion_39);
  initMetadataForObject($serializer_28, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(AreaData, 'AreaData', AreaData, GameComponentContainerData, VOID, VOID, VOID, {0: $serializer_getInstance_28});
  initMetadataForCompanion(Companion_40);
  initMetadataForObject($serializer_29, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(CardStackData, 'CardStackData', CardStackData, GameComponentContainerData, VOID, VOID, VOID, {0: $serializer_getInstance_29});
  initMetadataForCompanion(Companion_41);
  initMetadataForObject($serializer_30, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(HexagonGridData, 'HexagonGridData', HexagonGridData, GameComponentContainerData, VOID, VOID, VOID, {0: $serializer_getInstance_30});
  initMetadataForCompanion(Companion_42);
  initMetadataForObject($serializer_31, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(LinearLayoutData, 'LinearLayoutData', LinearLayoutData, GameComponentContainerData, VOID, VOID, VOID, {0: $serializer_getInstance_31});
  initMetadataForCompanion(Companion_43);
  initMetadataForObject($serializer_32, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(SatchelData, 'SatchelData', SatchelData, GameComponentContainerData, VOID, VOID, VOID, {0: $serializer_getInstance_32});
  initMetadataForCompanion(Companion_44, VOID, [SerializerFactory]);
  initMetadataForClass(VisualData, 'VisualData', VOID, Data, VOID, VOID, VOID, {0: Companion_getInstance_44});
  initMetadataForCompanion(Companion_45, VOID, [SerializerFactory]);
  initMetadataForClass(SingleLayerVisualData, 'SingleLayerVisualData', VOID, VisualData, VOID, VOID, VOID, {0: Companion_getInstance_45});
  initMetadataForCompanion(Companion_46);
  initMetadataForObject($serializer_33, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ColorVisualData, 'ColorVisualData', ColorVisualData, SingleLayerVisualData, VOID, VOID, VOID, {0: $serializer_getInstance_33});
  initMetadataForCompanion(Companion_47);
  initMetadataForObject($serializer_34, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ImageVisualData, 'ImageVisualData', ImageVisualData, SingleLayerVisualData, VOID, VOID, VOID, {0: $serializer_getInstance_34});
  initMetadataForCompanion(Companion_48);
  initMetadataForObject($serializer_35, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TextVisualData, 'TextVisualData', TextVisualData, SingleLayerVisualData, VOID, VOID, VOID, {0: $serializer_getInstance_35});
  initMetadataForCompanion(Companion_49);
  initMetadataForObject($serializer_36, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(CompoundVisualData, 'CompoundVisualData', CompoundVisualData, VisualData, VOID, VOID, VOID, {0: $serializer_getInstance_36});
  initMetadataForCompanion(Companion_50);
  initMetadataForObject($serializer_37, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(FontData, 'FontData', FontData, VOID, VOID, VOID, VOID, {0: $serializer_getInstance_37});
  initMetadataForCompanion(Companion_51, VOID, [SerializerFactory]);
  initMetadataForClass(ComponentAnimationData, 'ComponentAnimationData', VOID, AnimationData, VOID, VOID, VOID, {0: Companion_getInstance_51});
  initMetadataForCompanion(Companion_52);
  initMetadataForObject($serializer_38, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DelayAnimationData, 'DelayAnimationData', DelayAnimationData, AnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_38});
  initMetadataForCompanion(Companion_53);
  initMetadataForObject($serializer_39, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(SteppedComponentAnimationData, 'SteppedComponentAnimationData', VOID, ComponentAnimationData, VOID, VOID, VOID, {0: Companion_getInstance_62});
  initMetadataForClass(DiceAnimationData, 'DiceAnimationData', DiceAnimationData, SteppedComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_39});
  initMetadataForCompanion(Companion_54);
  initMetadataForObject($serializer_40, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(FadeAnimationData, 'FadeAnimationData', FadeAnimationData, ComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_40});
  initMetadataForCompanion(Companion_55);
  initMetadataForObject($serializer_41, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(FlipAnimationData, 'FlipAnimationData', FlipAnimationData, ComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_41});
  initMetadataForCompanion(Companion_56);
  initMetadataForObject($serializer_42, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(MovementAnimationData, 'MovementAnimationData', MovementAnimationData, ComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_42});
  initMetadataForCompanion(Companion_57);
  initMetadataForObject($serializer_43, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ParallelAnimationData, 'ParallelAnimationData', ParallelAnimationData, AnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_43});
  initMetadataForCompanion(Companion_58);
  initMetadataForObject($serializer_44, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(RandomizeAnimationData, 'RandomizeAnimationData', RandomizeAnimationData, SteppedComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_44});
  initMetadataForCompanion(Companion_59);
  initMetadataForObject($serializer_45, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(RotationAnimationData, 'RotationAnimationData', RotationAnimationData, ComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_45});
  initMetadataForCompanion(Companion_60);
  initMetadataForObject($serializer_46, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ScaleAnimationData, 'ScaleAnimationData', ScaleAnimationData, ComponentAnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_46});
  initMetadataForCompanion(Companion_61);
  initMetadataForObject($serializer_47, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(SequentialAnimationData, 'SequentialAnimationData', SequentialAnimationData, AnimationData, VOID, VOID, VOID, {0: $serializer_getInstance_47});
  initMetadataForCompanion(Companion_62, VOID, [SerializerFactory]);
  initMetadataForCompanion(Companion_63);
  initMetadataForObject($serializer_48, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(EventData, 'EventData', VOID, VOID, VOID, VOID, VOID, {0: Companion_getInstance_72});
  initMetadataForClass(AnimationFinishedEventData, 'AnimationFinishedEventData', AnimationFinishedEventData, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_48});
  initMetadataForCompanion(Companion_64);
  initMetadataForObject($serializer_49, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(CheckBoxChangedEventData, 'CheckBoxChangedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_49});
  initMetadataForCompanion(Companion_65);
  initMetadataForObject($serializer_50, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ColorInputChangedEventData, 'ColorInputChangedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_50});
  initMetadataForCompanion(Companion_66);
  initMetadataForObject($serializer_51, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DragDroppedEventData, 'DragDroppedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_51});
  initMetadataForCompanion(Companion_67);
  initMetadataForObject($serializer_52, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DragGestureEndedEventData, 'DragGestureEndedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_52});
  initMetadataForCompanion(Companion_68);
  initMetadataForObject($serializer_53, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DragGestureEnteredEventData, 'DragGestureEnteredEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_53});
  initMetadataForCompanion(Companion_69);
  initMetadataForObject($serializer_54, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DragGestureExitedEventData, 'DragGestureExitedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_54});
  initMetadataForCompanion(Companion_70);
  initMetadataForObject($serializer_55, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DragGestureMovedEventData, 'DragGestureMovedEventData', DragGestureMovedEventData, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_55});
  initMetadataForCompanion(Companion_71);
  initMetadataForObject($serializer_56, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(DragGestureStartedEventData, 'DragGestureStartedEventData', DragGestureStartedEventData, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_56});
  initMetadataForCompanion(Companion_72, VOID, [SerializerFactory]);
  initMetadataForCompanion(Companion_73);
  initMetadataForObject($serializer_57, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(FilesPickedEventData, 'FilesPickedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_57});
  initMetadataForCompanion(Companion_74, VOID, [SerializerFactory]);
  initMetadataForClass(InputEventData, 'InputEventData', VOID, EventData, VOID, VOID, VOID, {0: Companion_getInstance_74});
  initMetadataForCompanion(Companion_75);
  initMetadataForObject($serializer_58, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(InternalCameraPanData, 'InternalCameraPanData', InternalCameraPanData, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_58});
  initMetadataForCompanion(Companion_76);
  initMetadataForObject($serializer_59, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(KeyEventData, 'KeyEventData', VOID, InputEventData, VOID, VOID, VOID, {0: $serializer_getInstance_59});
  initMetadataForCompanion(Companion_77, VOID, [SerializerFactory]);
  initMetadataForClass(KeyEventAction, 'KeyEventAction', VOID, Enum, VOID, VOID, VOID, {0: Companion_getInstance_77});
  initMetadataForCompanion(Companion_78);
  initMetadataForObject($serializer_60, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(LoadEventData, 'LoadEventData', LoadEventData, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_60});
  initMetadataForCompanion(Companion_79);
  initMetadataForObject($serializer_61, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(MouseEventData, 'MouseEventData', VOID, InputEventData, VOID, VOID, VOID, {0: $serializer_getInstance_62});
  initMetadataForClass(MouseEnteredEventData, 'MouseEnteredEventData', VOID, MouseEventData, VOID, VOID, VOID, {0: $serializer_getInstance_61});
  initMetadataForCompanion(Companion_80);
  initMetadataForObject($serializer_62, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForCompanion(Companion_81);
  initMetadataForObject($serializer_63, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(MouseExitedEventData, 'MouseExitedEventData', VOID, MouseEventData, VOID, VOID, VOID, {0: $serializer_getInstance_63});
  initMetadataForCompanion(Companion_82);
  initMetadataForObject($serializer_64, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(MousePressedEventData, 'MousePressedEventData', VOID, MouseEventData, VOID, VOID, VOID, {0: $serializer_getInstance_64});
  initMetadataForCompanion(Companion_83);
  initMetadataForObject($serializer_65, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(MouseReleasedEventData, 'MouseReleasedEventData', VOID, MouseEventData, VOID, VOID, VOID, {0: $serializer_getInstance_65});
  initMetadataForCompanion(Companion_84);
  initMetadataForObject($serializer_66, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(RadioChangedEventData, 'RadioChangedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_66});
  initMetadataForCompanion(Companion_85);
  initMetadataForObject($serializer_67, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(ScrollEventData, 'ScrollEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_67});
  initMetadataForCompanion(Companion_86);
  initMetadataForObject($serializer_68, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(SelectionChangedEventData, 'SelectionChangedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_68});
  initMetadataForCompanion(Companion_87);
  initMetadataForObject($serializer_69, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(StructuredDataSelectEventData, 'StructuredDataSelectEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_69});
  initMetadataForCompanion(Companion_88);
  initMetadataForObject($serializer_70, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TextInputChangedEventData, 'TextInputChangedEventData', VOID, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_70});
  initMetadataForCompanion(Companion_89);
  initMetadataForObject($serializer_71, '$serializer', VOID, VOID, [GeneratedSerializer]);
  initMetadataForClass(TransformChangedEventData, 'TransformChangedEventData', TransformChangedEventData, EventData, VOID, VOID, VOID, {0: $serializer_getInstance_71});
  initMetadataForClass(DialogType, 'DialogType', VOID, Enum);
  initMetadataForClass(KeyCode, 'KeyCode', VOID, Enum);
  initMetadataForCompanion(Companion_90, VOID, [SerializerFactory]);
  initMetadataForClass(MouseButtonType, 'MouseButtonType', VOID, Enum, VOID, VOID, VOID, {0: Companion_getInstance_90});
  initMetadataForCompanion(Companion_91, VOID, [SerializerFactory]);
  initMetadataForClass(WheelDirection, 'WheelDirection', VOID, Enum, VOID, VOID, VOID, {0: Companion_getInstance_91});
  initMetadataForCompanion(Companion_92);
  initMetadataForClass(Animator, 'Animator', Animator);
  initMetadataForObject(Config, 'Config');
  initMetadataForObject(ContainerBuilder, 'ContainerBuilder');
  initMetadataForObject(LayoutNodeBuilder, 'LayoutNodeBuilder');
  initMetadataForObject(NodeBuilder, 'NodeBuilder');
  initMetadataForObject(ReactConverters, 'ReactConverters');
  initMetadataForObject(SceneBuilder, 'SceneBuilder');
  initMetadataForObject(VisualBuilder, 'VisualBuilder');
  initMetadataForLambda(App$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(Area$1$draggable$1);
  initMetadataForClass(Area$1$droppable$1);
  initMetadataForLambda(Area$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(CardStack$1$draggable$1);
  initMetadataForClass(CardStack$1$droppable$1);
  initMetadataForLambda(CardStack$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(HexagonGrid$1$draggable$1);
  initMetadataForClass(HexagonGrid$1$droppable$1);
  initMetadataForLambda(HexagonGrid$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(LinearLayout$1$draggable$1);
  initMetadataForClass(LinearLayout$1$droppable$1);
  initMetadataForLambda(LinearLayout$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForLambda(LinearLayout$lambda$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(Satchel$1$draggable$1);
  initMetadataForClass(Satchel$1$droppable$1);
  initMetadataForLambda(Satchel$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(CardView$1$draggable$1);
  initMetadataForClass(CardView$1$droppable$1);
  initMetadataForLambda(CardView$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(DiceView$1$draggable$1);
  initMetadataForClass(DiceView$1$droppable$1);
  initMetadataForLambda(DiceView$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(HexagonView$1$draggable$1);
  initMetadataForClass(HexagonView$1$droppable$1);
  initMetadataForLambda(HexagonView$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(TokenView$1$draggable$1);
  initMetadataForClass(TokenView$1$droppable$1);
  initMetadataForLambda(TokenView$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForLambda(CameraPane$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(ReactGridPane$1$droppable$1);
  initMetadataForLambda(ReactGridPane$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForLambda(ReactGridPane$lambda$lambda$slambda_1, CoroutineImpl, VOID, [1]);
  initMetadataForLambda(ReactGridPane$lambda$lambda$slambda_3, CoroutineImpl, VOID, [1]);
  initMetadataForClass(Pane$1$droppable$1);
  initMetadataForLambda(Pane$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(Button$1$droppable$1);
  initMetadataForLambda(Button$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(CheckBox$1$droppable$1);
  initMetadataForLambda(CheckBox$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForLambda(CheckBox$lambda$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(ColorPicker$1$droppable$1);
  initMetadataForLambda(ColorPicker$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(ComboBox$1$droppable$1);
  initMetadataForLambda(ComboBox$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(Label$1$droppable$1);
  initMetadataForLambda(Label$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(ListView$1$droppable$1);
  initMetadataForLambda(ListView$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(PasswordField$1$droppable$1);
  initMetadataForLambda(PasswordField$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(ProgressBar$1$droppable$1);
  initMetadataForLambda(ProgressBar$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(RadioButton$1$droppable$1);
  initMetadataForLambda(RadioButton$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(TableView$1$droppable$1);
  initMetadataForLambda(TableView$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(TextArea$1$droppable$1);
  initMetadataForLambda(TextArea$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(TextField$1$droppable$1);
  initMetadataForLambda(TextField$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(ToggleButton$1$droppable$1);
  initMetadataForLambda(ToggleButton$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForLambda(ImageVisual$lambda$lambda$lambda$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForObject(JCEFEventDispatcher, 'JCEFEventDispatcher');
  //endregion
  function encode($this, bytes) {
    return joinToString(bytes, '', VOID, VOID, VOID, VOID, Base64$encode$lambda);
  }
  function Base64$encode$lambda(it) {
    // Inline function 'kotlin.toUByte' call
    var tmp$ret$0 = _UByte___init__impl__g9hnc4(it);
    return padStart(toString(tmp$ret$0, 16), 2, _Char___init__impl__6a9atx(48));
  }
  function Base64() {
  }
  protoOf(Base64).w1p = function (string) {
    return encode(this, encodeToByteArray(string));
  };
  var Base64_instance;
  function Base64_getInstance() {
    return Base64_instance;
  }
  function get_module() {
    _init_properties_Json_kt__5095e0();
    return module_0;
  }
  var module_0;
  function get_jsonMapper() {
    _init_properties_Json_kt__5095e0();
    return jsonMapper;
  }
  var jsonMapper;
  function jsonMapper$lambda($this$KJson) {
    _init_properties_Json_kt__5095e0();
    $this$KJson.r14_1 = true;
    $this$KJson.g15_1 = get_module();
    return Unit_instance;
  }
  var properties_initialized_Json_kt_iojru2;
  function _init_properties_Json_kt__5095e0() {
    if (!properties_initialized_Json_kt_iojru2) {
      properties_initialized_Json_kt_iojru2 = true;
      // Inline function 'kotlinx.serialization.modules.SerializersModule' call
      var builder = new SerializersModuleBuilder();
      // Inline function 'module.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass = getKClass(Data);
      var builder_0 = new PolymorphicModuleBuilder(baseClass, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz = getKClass(AppData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_0 = serializer(createKType(getKClass(AppData), arrayOf([]), false));
      var tmp$ret$1 = isInterface(this_0, KSerializer) ? this_0 : THROW_CCE();
      builder_0.p12(clazz, tmp$ret$1);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_0 = getKClass(SceneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_1 = serializer(createKType(getKClass(SceneData), arrayOf([]), false));
      var tmp$ret$4 = isInterface(this_1, KSerializer) ? this_1 : THROW_CCE();
      builder_0.p12(clazz_0, tmp$ret$4);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_1 = getKClass(ButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_2 = serializer(createKType(getKClass(ButtonData), arrayOf([]), false));
      var tmp$ret$7 = isInterface(this_2, KSerializer) ? this_2 : THROW_CCE();
      builder_0.p12(clazz_1, tmp$ret$7);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_2 = getKClass(LabelData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_3 = serializer(createKType(getKClass(LabelData), arrayOf([]), false));
      var tmp$ret$10 = isInterface(this_3, KSerializer) ? this_3 : THROW_CCE();
      builder_0.p12(clazz_2, tmp$ret$10);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_3 = getKClass(TextFieldData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_4 = serializer(createKType(getKClass(TextFieldData), arrayOf([]), false));
      var tmp$ret$13 = isInterface(this_4, KSerializer) ? this_4 : THROW_CCE();
      builder_0.p12(clazz_3, tmp$ret$13);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_4 = getKClass(TextAreaData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_5 = serializer(createKType(getKClass(TextAreaData), arrayOf([]), false));
      var tmp$ret$16 = isInterface(this_5, KSerializer) ? this_5 : THROW_CCE();
      builder_0.p12(clazz_4, tmp$ret$16);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_5 = getKClass(ProgressBarData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_6 = serializer(createKType(getKClass(ProgressBarData), arrayOf([]), false));
      var tmp$ret$19 = isInterface(this_6, KSerializer) ? this_6 : THROW_CCE();
      builder_0.p12(clazz_5, tmp$ret$19);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_6 = getKClass(ColorPickerData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_7 = serializer(createKType(getKClass(ColorPickerData), arrayOf([]), false));
      var tmp$ret$22 = isInterface(this_7, KSerializer) ? this_7 : THROW_CCE();
      builder_0.p12(clazz_6, tmp$ret$22);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_7 = getKClass(ToggleButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_8 = serializer(createKType(getKClass(ToggleButtonData), arrayOf([]), false));
      var tmp$ret$25 = isInterface(this_8, KSerializer) ? this_8 : THROW_CCE();
      builder_0.p12(clazz_7, tmp$ret$25);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_8 = getKClass(RadioButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_9 = serializer(createKType(getKClass(RadioButtonData), arrayOf([]), false));
      var tmp$ret$28 = isInterface(this_9, KSerializer) ? this_9 : THROW_CCE();
      builder_0.p12(clazz_8, tmp$ret$28);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_9 = getKClass(CheckBoxData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_10 = serializer(createKType(getKClass(CheckBoxData), arrayOf([]), false));
      var tmp$ret$31 = isInterface(this_10, KSerializer) ? this_10 : THROW_CCE();
      builder_0.p12(clazz_9, tmp$ret$31);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_10 = getKClass(BinaryStateButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_11 = serializer(createKType(getKClass(BinaryStateButtonData), arrayOf([]), false));
      var tmp$ret$34 = isInterface(this_11, KSerializer) ? this_11 : THROW_CCE();
      builder_0.p12(clazz_10, tmp$ret$34);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_11 = getKClass(ComboBoxData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_12 = serializer(createKType(getKClass(ComboBoxData), arrayOf([]), false));
      var tmp$ret$37 = isInterface(this_12, KSerializer) ? this_12 : THROW_CCE();
      builder_0.p12(clazz_11, tmp$ret$37);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_12 = getKClass(PasswordFieldData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_13 = serializer(createKType(getKClass(PasswordFieldData), arrayOf([]), false));
      var tmp$ret$40 = isInterface(this_13, KSerializer) ? this_13 : THROW_CCE();
      builder_0.p12(clazz_12, tmp$ret$40);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_13 = getKClass(ListViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_14 = serializer(createKType(getKClass(ListViewData), arrayOf([]), false));
      var tmp$ret$43 = isInterface(this_14, KSerializer) ? this_14 : THROW_CCE();
      builder_0.p12(clazz_13, tmp$ret$43);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_14 = getKClass(TableViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_15 = serializer(createKType(getKClass(TableViewData), arrayOf([]), false));
      var tmp$ret$46 = isInterface(this_15, KSerializer) ? this_15 : THROW_CCE();
      builder_0.p12(clazz_14, tmp$ret$46);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_15 = getKClass(PaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_16 = serializer(createKType(getKClass(PaneData), arrayOf([]), false));
      var tmp$ret$49 = isInterface(this_16, KSerializer) ? this_16 : THROW_CCE();
      builder_0.p12(clazz_15, tmp$ret$49);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_16 = getKClass(GridPaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_17 = serializer(createKType(getKClass(GridPaneData), arrayOf([]), false));
      var tmp$ret$52 = isInterface(this_17, KSerializer) ? this_17 : THROW_CCE();
      builder_0.p12(clazz_16, tmp$ret$52);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_17 = getKClass(CameraPaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_18 = serializer(createKType(getKClass(CameraPaneData), arrayOf([]), false));
      var tmp$ret$55 = isInterface(this_18, KSerializer) ? this_18 : THROW_CCE();
      builder_0.p12(clazz_17, tmp$ret$55);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_18 = getKClass(AreaData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_19 = serializer(createKType(getKClass(AreaData), arrayOf([]), false));
      var tmp$ret$58 = isInterface(this_19, KSerializer) ? this_19 : THROW_CCE();
      builder_0.p12(clazz_18, tmp$ret$58);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_19 = getKClass(CardStackData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_20 = serializer(createKType(getKClass(CardStackData), arrayOf([]), false));
      var tmp$ret$61 = isInterface(this_20, KSerializer) ? this_20 : THROW_CCE();
      builder_0.p12(clazz_19, tmp$ret$61);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_20 = getKClass(HexagonGridData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_21 = serializer(createKType(getKClass(HexagonGridData), arrayOf([]), false));
      var tmp$ret$64 = isInterface(this_21, KSerializer) ? this_21 : THROW_CCE();
      builder_0.p12(clazz_20, tmp$ret$64);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_21 = getKClass(LinearLayoutData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_22 = serializer(createKType(getKClass(LinearLayoutData), arrayOf([]), false));
      var tmp$ret$67 = isInterface(this_22, KSerializer) ? this_22 : THROW_CCE();
      builder_0.p12(clazz_21, tmp$ret$67);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_22 = getKClass(SatchelData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_23 = serializer(createKType(getKClass(SatchelData), arrayOf([]), false));
      var tmp$ret$70 = isInterface(this_23, KSerializer) ? this_23 : THROW_CCE();
      builder_0.p12(clazz_22, tmp$ret$70);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_23 = getKClass(CardViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_24 = serializer(createKType(getKClass(CardViewData), arrayOf([]), false));
      var tmp$ret$73 = isInterface(this_24, KSerializer) ? this_24 : THROW_CCE();
      builder_0.p12(clazz_23, tmp$ret$73);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_24 = getKClass(DiceViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_25 = serializer(createKType(getKClass(DiceViewData), arrayOf([]), false));
      var tmp$ret$76 = isInterface(this_25, KSerializer) ? this_25 : THROW_CCE();
      builder_0.p12(clazz_24, tmp$ret$76);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_25 = getKClass(HexagonViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_26 = serializer(createKType(getKClass(HexagonViewData), arrayOf([]), false));
      var tmp$ret$79 = isInterface(this_26, KSerializer) ? this_26 : THROW_CCE();
      builder_0.p12(clazz_25, tmp$ret$79);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_26 = getKClass(TokenViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_27 = serializer(createKType(getKClass(TokenViewData), arrayOf([]), false));
      var tmp$ret$82 = isInterface(this_27, KSerializer) ? this_27 : THROW_CCE();
      builder_0.p12(clazz_26, tmp$ret$82);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_27 = getKClass(ColorVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_28 = serializer(createKType(getKClass(ColorVisualData), arrayOf([]), false));
      var tmp$ret$85 = isInterface(this_28, KSerializer) ? this_28 : THROW_CCE();
      builder_0.p12(clazz_27, tmp$ret$85);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_28 = getKClass(ImageVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_29 = serializer(createKType(getKClass(ImageVisualData), arrayOf([]), false));
      var tmp$ret$88 = isInterface(this_29, KSerializer) ? this_29 : THROW_CCE();
      builder_0.p12(clazz_28, tmp$ret$88);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_29 = getKClass(TextVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_30 = serializer(createKType(getKClass(TextVisualData), arrayOf([]), false));
      var tmp$ret$91 = isInterface(this_30, KSerializer) ? this_30 : THROW_CCE();
      builder_0.p12(clazz_29, tmp$ret$91);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_30 = getKClass(CompoundVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_31 = serializer(createKType(getKClass(CompoundVisualData), arrayOf([]), false));
      var tmp$ret$94 = isInterface(this_31, KSerializer) ? this_31 : THROW_CCE();
      builder_0.p12(clazz_30, tmp$ret$94);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_31 = getKClass(DialogData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_32 = serializer(createKType(getKClass(DialogData), arrayOf([]), false));
      var tmp$ret$97 = isInterface(this_32, KSerializer) ? this_32 : THROW_CCE();
      builder_0.p12(clazz_31, tmp$ret$97);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_32 = getKClass(FileDialogData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_33 = serializer(createKType(getKClass(FileDialogData), arrayOf([]), false));
      var tmp$ret$100 = isInterface(this_33, KSerializer) ? this_33 : THROW_CCE();
      builder_0.p12(clazz_32, tmp$ret$100);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_33 = getKClass(FadeAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_34 = serializer(createKType(getKClass(FadeAnimationData), arrayOf([]), false));
      var tmp$ret$103 = isInterface(this_34, KSerializer) ? this_34 : THROW_CCE();
      builder_0.p12(clazz_33, tmp$ret$103);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_34 = getKClass(MovementAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_35 = serializer(createKType(getKClass(MovementAnimationData), arrayOf([]), false));
      var tmp$ret$106 = isInterface(this_35, KSerializer) ? this_35 : THROW_CCE();
      builder_0.p12(clazz_34, tmp$ret$106);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_35 = getKClass(RotationAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_36 = serializer(createKType(getKClass(RotationAnimationData), arrayOf([]), false));
      var tmp$ret$109 = isInterface(this_36, KSerializer) ? this_36 : THROW_CCE();
      builder_0.p12(clazz_35, tmp$ret$109);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_36 = getKClass(ScaleAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_37 = serializer(createKType(getKClass(ScaleAnimationData), arrayOf([]), false));
      var tmp$ret$112 = isInterface(this_37, KSerializer) ? this_37 : THROW_CCE();
      builder_0.p12(clazz_36, tmp$ret$112);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_37 = getKClass(FlipAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_38 = serializer(createKType(getKClass(FlipAnimationData), arrayOf([]), false));
      var tmp$ret$115 = isInterface(this_38, KSerializer) ? this_38 : THROW_CCE();
      builder_0.p12(clazz_37, tmp$ret$115);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_38 = getKClass(SequentialAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_39 = serializer(createKType(getKClass(SequentialAnimationData), arrayOf([]), false));
      var tmp$ret$118 = isInterface(this_39, KSerializer) ? this_39 : THROW_CCE();
      builder_0.p12(clazz_38, tmp$ret$118);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_39 = getKClass(ParallelAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_40 = serializer(createKType(getKClass(ParallelAnimationData), arrayOf([]), false));
      var tmp$ret$121 = isInterface(this_40, KSerializer) ? this_40 : THROW_CCE();
      builder_0.p12(clazz_39, tmp$ret$121);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_40 = getKClass(RandomizeAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_41 = serializer(createKType(getKClass(RandomizeAnimationData), arrayOf([]), false));
      var tmp$ret$124 = isInterface(this_41, KSerializer) ? this_41 : THROW_CCE();
      builder_0.p12(clazz_40, tmp$ret$124);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_41 = getKClass(DiceAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_42 = serializer(createKType(getKClass(DiceAnimationData), arrayOf([]), false));
      var tmp$ret$127 = isInterface(this_42, KSerializer) ? this_42 : THROW_CCE();
      builder_0.p12(clazz_41, tmp$ret$127);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_42 = getKClass(DelayAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_43 = serializer(createKType(getKClass(DelayAnimationData), arrayOf([]), false));
      var tmp$ret$130 = isInterface(this_43, KSerializer) ? this_43 : THROW_CCE();
      builder_0.p12(clazz_42, tmp$ret$130);
      builder_0.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_0 = getKClass(LayoutViewData);
      var builder_1 = new PolymorphicModuleBuilder(baseClass_0, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_43 = getKClass(PaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_44 = serializer(createKType(getKClass(PaneData), arrayOf([]), false));
      var tmp$ret$133 = isInterface(this_44, KSerializer) ? this_44 : THROW_CCE();
      builder_1.p12(clazz_43, tmp$ret$133);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_44 = getKClass(GridPaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_45 = serializer(createKType(getKClass(GridPaneData), arrayOf([]), false));
      var tmp$ret$136 = isInterface(this_45, KSerializer) ? this_45 : THROW_CCE();
      builder_1.p12(clazz_44, tmp$ret$136);
      builder_1.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_1 = getKClass(ComponentViewData);
      var builder_2 = new PolymorphicModuleBuilder(baseClass_1, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_45 = getKClass(ButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_46 = serializer(createKType(getKClass(ButtonData), arrayOf([]), false));
      var tmp$ret$139 = isInterface(this_46, KSerializer) ? this_46 : THROW_CCE();
      builder_2.p12(clazz_45, tmp$ret$139);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_46 = getKClass(LabelData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_47 = serializer(createKType(getKClass(LabelData), arrayOf([]), false));
      var tmp$ret$142 = isInterface(this_47, KSerializer) ? this_47 : THROW_CCE();
      builder_2.p12(clazz_46, tmp$ret$142);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_47 = getKClass(TextFieldData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_48 = serializer(createKType(getKClass(TextFieldData), arrayOf([]), false));
      var tmp$ret$145 = isInterface(this_48, KSerializer) ? this_48 : THROW_CCE();
      builder_2.p12(clazz_47, tmp$ret$145);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_48 = getKClass(TextAreaData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_49 = serializer(createKType(getKClass(TextAreaData), arrayOf([]), false));
      var tmp$ret$148 = isInterface(this_49, KSerializer) ? this_49 : THROW_CCE();
      builder_2.p12(clazz_48, tmp$ret$148);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_49 = getKClass(ProgressBarData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_50 = serializer(createKType(getKClass(ProgressBarData), arrayOf([]), false));
      var tmp$ret$151 = isInterface(this_50, KSerializer) ? this_50 : THROW_CCE();
      builder_2.p12(clazz_49, tmp$ret$151);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_50 = getKClass(ColorPickerData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_51 = serializer(createKType(getKClass(ColorPickerData), arrayOf([]), false));
      var tmp$ret$154 = isInterface(this_51, KSerializer) ? this_51 : THROW_CCE();
      builder_2.p12(clazz_50, tmp$ret$154);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_51 = getKClass(ToggleButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_52 = serializer(createKType(getKClass(ToggleButtonData), arrayOf([]), false));
      var tmp$ret$157 = isInterface(this_52, KSerializer) ? this_52 : THROW_CCE();
      builder_2.p12(clazz_51, tmp$ret$157);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_52 = getKClass(RadioButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_53 = serializer(createKType(getKClass(RadioButtonData), arrayOf([]), false));
      var tmp$ret$160 = isInterface(this_53, KSerializer) ? this_53 : THROW_CCE();
      builder_2.p12(clazz_52, tmp$ret$160);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_53 = getKClass(CheckBoxData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_54 = serializer(createKType(getKClass(CheckBoxData), arrayOf([]), false));
      var tmp$ret$163 = isInterface(this_54, KSerializer) ? this_54 : THROW_CCE();
      builder_2.p12(clazz_53, tmp$ret$163);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_54 = getKClass(BinaryStateButtonData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_55 = serializer(createKType(getKClass(BinaryStateButtonData), arrayOf([]), false));
      var tmp$ret$166 = isInterface(this_55, KSerializer) ? this_55 : THROW_CCE();
      builder_2.p12(clazz_54, tmp$ret$166);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_55 = getKClass(ComboBoxData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_56 = serializer(createKType(getKClass(ComboBoxData), arrayOf([]), false));
      var tmp$ret$169 = isInterface(this_56, KSerializer) ? this_56 : THROW_CCE();
      builder_2.p12(clazz_55, tmp$ret$169);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_56 = getKClass(PasswordFieldData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_57 = serializer(createKType(getKClass(PasswordFieldData), arrayOf([]), false));
      var tmp$ret$172 = isInterface(this_57, KSerializer) ? this_57 : THROW_CCE();
      builder_2.p12(clazz_56, tmp$ret$172);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_57 = getKClass(ListViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_58 = serializer(createKType(getKClass(ListViewData), arrayOf([]), false));
      var tmp$ret$175 = isInterface(this_58, KSerializer) ? this_58 : THROW_CCE();
      builder_2.p12(clazz_57, tmp$ret$175);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_58 = getKClass(TableViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_59 = serializer(createKType(getKClass(TableViewData), arrayOf([]), false));
      var tmp$ret$178 = isInterface(this_59, KSerializer) ? this_59 : THROW_CCE();
      builder_2.p12(clazz_58, tmp$ret$178);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_59 = getKClass(PaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_60 = serializer(createKType(getKClass(PaneData), arrayOf([]), false));
      var tmp$ret$181 = isInterface(this_60, KSerializer) ? this_60 : THROW_CCE();
      builder_2.p12(clazz_59, tmp$ret$181);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_60 = getKClass(GridPaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_61 = serializer(createKType(getKClass(GridPaneData), arrayOf([]), false));
      var tmp$ret$184 = isInterface(this_61, KSerializer) ? this_61 : THROW_CCE();
      builder_2.p12(clazz_60, tmp$ret$184);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_61 = getKClass(CameraPaneData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_62 = serializer(createKType(getKClass(CameraPaneData), arrayOf([]), false));
      var tmp$ret$187 = isInterface(this_62, KSerializer) ? this_62 : THROW_CCE();
      builder_2.p12(clazz_61, tmp$ret$187);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_62 = getKClass(AreaData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_63 = serializer(createKType(getKClass(AreaData), arrayOf([]), false));
      var tmp$ret$190 = isInterface(this_63, KSerializer) ? this_63 : THROW_CCE();
      builder_2.p12(clazz_62, tmp$ret$190);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_63 = getKClass(CardStackData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_64 = serializer(createKType(getKClass(CardStackData), arrayOf([]), false));
      var tmp$ret$193 = isInterface(this_64, KSerializer) ? this_64 : THROW_CCE();
      builder_2.p12(clazz_63, tmp$ret$193);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_64 = getKClass(HexagonGridData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_65 = serializer(createKType(getKClass(HexagonGridData), arrayOf([]), false));
      var tmp$ret$196 = isInterface(this_65, KSerializer) ? this_65 : THROW_CCE();
      builder_2.p12(clazz_64, tmp$ret$196);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_65 = getKClass(LinearLayoutData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_66 = serializer(createKType(getKClass(LinearLayoutData), arrayOf([]), false));
      var tmp$ret$199 = isInterface(this_66, KSerializer) ? this_66 : THROW_CCE();
      builder_2.p12(clazz_65, tmp$ret$199);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_66 = getKClass(SatchelData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_67 = serializer(createKType(getKClass(SatchelData), arrayOf([]), false));
      var tmp$ret$202 = isInterface(this_67, KSerializer) ? this_67 : THROW_CCE();
      builder_2.p12(clazz_66, tmp$ret$202);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_67 = getKClass(CardViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_68 = serializer(createKType(getKClass(CardViewData), arrayOf([]), false));
      var tmp$ret$205 = isInterface(this_68, KSerializer) ? this_68 : THROW_CCE();
      builder_2.p12(clazz_67, tmp$ret$205);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_68 = getKClass(DiceViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_69 = serializer(createKType(getKClass(DiceViewData), arrayOf([]), false));
      var tmp$ret$208 = isInterface(this_69, KSerializer) ? this_69 : THROW_CCE();
      builder_2.p12(clazz_68, tmp$ret$208);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_69 = getKClass(HexagonViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_70 = serializer(createKType(getKClass(HexagonViewData), arrayOf([]), false));
      var tmp$ret$211 = isInterface(this_70, KSerializer) ? this_70 : THROW_CCE();
      builder_2.p12(clazz_69, tmp$ret$211);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_70 = getKClass(TokenViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_71 = serializer(createKType(getKClass(TokenViewData), arrayOf([]), false));
      var tmp$ret$214 = isInterface(this_71, KSerializer) ? this_71 : THROW_CCE();
      builder_2.p12(clazz_70, tmp$ret$214);
      builder_2.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_2 = getKClass(TextInputUIComponentData);
      var builder_3 = new PolymorphicModuleBuilder(baseClass_2, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_71 = getKClass(TextFieldData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_72 = serializer(createKType(getKClass(TextFieldData), arrayOf([]), false));
      var tmp$ret$217 = isInterface(this_72, KSerializer) ? this_72 : THROW_CCE();
      builder_3.p12(clazz_71, tmp$ret$217);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_72 = getKClass(TextAreaData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_73 = serializer(createKType(getKClass(TextAreaData), arrayOf([]), false));
      var tmp$ret$220 = isInterface(this_73, KSerializer) ? this_73 : THROW_CCE();
      builder_3.p12(clazz_72, tmp$ret$220);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_73 = getKClass(PasswordFieldData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_74 = serializer(createKType(getKClass(PasswordFieldData), arrayOf([]), false));
      var tmp$ret$223 = isInterface(this_74, KSerializer) ? this_74 : THROW_CCE();
      builder_3.p12(clazz_73, tmp$ret$223);
      builder_3.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_3 = getKClass(GameComponentViewData);
      var builder_4 = new PolymorphicModuleBuilder(baseClass_3, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_74 = getKClass(CardViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_75 = serializer(createKType(getKClass(CardViewData), arrayOf([]), false));
      var tmp$ret$226 = isInterface(this_75, KSerializer) ? this_75 : THROW_CCE();
      builder_4.p12(clazz_74, tmp$ret$226);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_75 = getKClass(DiceViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_76 = serializer(createKType(getKClass(DiceViewData), arrayOf([]), false));
      var tmp$ret$229 = isInterface(this_76, KSerializer) ? this_76 : THROW_CCE();
      builder_4.p12(clazz_75, tmp$ret$229);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_76 = getKClass(HexagonViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_77 = serializer(createKType(getKClass(HexagonViewData), arrayOf([]), false));
      var tmp$ret$232 = isInterface(this_77, KSerializer) ? this_77 : THROW_CCE();
      builder_4.p12(clazz_76, tmp$ret$232);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_77 = getKClass(TokenViewData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_78 = serializer(createKType(getKClass(TokenViewData), arrayOf([]), false));
      var tmp$ret$235 = isInterface(this_78, KSerializer) ? this_78 : THROW_CCE();
      builder_4.p12(clazz_77, tmp$ret$235);
      builder_4.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_4 = getKClass(VisualData);
      var builder_5 = new PolymorphicModuleBuilder(baseClass_4, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_78 = getKClass(ColorVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_79 = serializer(createKType(getKClass(ColorVisualData), arrayOf([]), false));
      var tmp$ret$238 = isInterface(this_79, KSerializer) ? this_79 : THROW_CCE();
      builder_5.p12(clazz_78, tmp$ret$238);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_79 = getKClass(ImageVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_80 = serializer(createKType(getKClass(ImageVisualData), arrayOf([]), false));
      var tmp$ret$241 = isInterface(this_80, KSerializer) ? this_80 : THROW_CCE();
      builder_5.p12(clazz_79, tmp$ret$241);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_80 = getKClass(TextVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_81 = serializer(createKType(getKClass(TextVisualData), arrayOf([]), false));
      var tmp$ret$244 = isInterface(this_81, KSerializer) ? this_81 : THROW_CCE();
      builder_5.p12(clazz_80, tmp$ret$244);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_81 = getKClass(CompoundVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_82 = serializer(createKType(getKClass(CompoundVisualData), arrayOf([]), false));
      var tmp$ret$247 = isInterface(this_82, KSerializer) ? this_82 : THROW_CCE();
      builder_5.p12(clazz_81, tmp$ret$247);
      builder_5.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_5 = getKClass(SingleLayerVisualData);
      var builder_6 = new PolymorphicModuleBuilder(baseClass_5, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_82 = getKClass(ColorVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_83 = serializer(createKType(getKClass(ColorVisualData), arrayOf([]), false));
      var tmp$ret$250 = isInterface(this_83, KSerializer) ? this_83 : THROW_CCE();
      builder_6.p12(clazz_82, tmp$ret$250);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_83 = getKClass(ImageVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_84 = serializer(createKType(getKClass(ImageVisualData), arrayOf([]), false));
      var tmp$ret$253 = isInterface(this_84, KSerializer) ? this_84 : THROW_CCE();
      builder_6.p12(clazz_83, tmp$ret$253);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_84 = getKClass(TextVisualData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_85 = serializer(createKType(getKClass(TextVisualData), arrayOf([]), false));
      var tmp$ret$256 = isInterface(this_85, KSerializer) ? this_85 : THROW_CCE();
      builder_6.p12(clazz_84, tmp$ret$256);
      builder_6.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_6 = getKClass(EventData);
      var builder_7 = new PolymorphicModuleBuilder(baseClass_6, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_85 = getKClass(MouseEnteredEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_86 = serializer(createKType(getKClass(MouseEnteredEventData), arrayOf([]), false));
      var tmp$ret$259 = isInterface(this_86, KSerializer) ? this_86 : THROW_CCE();
      builder_7.p12(clazz_85, tmp$ret$259);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_86 = getKClass(MouseExitedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_87 = serializer(createKType(getKClass(MouseExitedEventData), arrayOf([]), false));
      var tmp$ret$262 = isInterface(this_87, KSerializer) ? this_87 : THROW_CCE();
      builder_7.p12(clazz_86, tmp$ret$262);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_87 = getKClass(MousePressedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_88 = serializer(createKType(getKClass(MousePressedEventData), arrayOf([]), false));
      var tmp$ret$265 = isInterface(this_88, KSerializer) ? this_88 : THROW_CCE();
      builder_7.p12(clazz_87, tmp$ret$265);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_88 = getKClass(MouseReleasedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_89 = serializer(createKType(getKClass(MouseReleasedEventData), arrayOf([]), false));
      var tmp$ret$268 = isInterface(this_89, KSerializer) ? this_89 : THROW_CCE();
      builder_7.p12(clazz_88, tmp$ret$268);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_89 = getKClass(MouseEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_90 = serializer(createKType(getKClass(MouseEventData), arrayOf([]), false));
      var tmp$ret$271 = isInterface(this_90, KSerializer) ? this_90 : THROW_CCE();
      builder_7.p12(clazz_89, tmp$ret$271);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_90 = getKClass(KeyEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_91 = serializer(createKType(getKClass(KeyEventData), arrayOf([]), false));
      var tmp$ret$274 = isInterface(this_91, KSerializer) ? this_91 : THROW_CCE();
      builder_7.p12(clazz_90, tmp$ret$274);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_91 = getKClass(LoadEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_92 = serializer(createKType(getKClass(LoadEventData), arrayOf([]), false));
      var tmp$ret$277 = isInterface(this_92, KSerializer) ? this_92 : THROW_CCE();
      builder_7.p12(clazz_91, tmp$ret$277);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_92 = getKClass(SelectionChangedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_93 = serializer(createKType(getKClass(SelectionChangedEventData), arrayOf([]), false));
      var tmp$ret$280 = isInterface(this_93, KSerializer) ? this_93 : THROW_CCE();
      builder_7.p12(clazz_92, tmp$ret$280);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_93 = getKClass(RadioChangedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_94 = serializer(createKType(getKClass(RadioChangedEventData), arrayOf([]), false));
      var tmp$ret$283 = isInterface(this_94, KSerializer) ? this_94 : THROW_CCE();
      builder_7.p12(clazz_93, tmp$ret$283);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_94 = getKClass(TextInputChangedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_95 = serializer(createKType(getKClass(TextInputChangedEventData), arrayOf([]), false));
      var tmp$ret$286 = isInterface(this_95, KSerializer) ? this_95 : THROW_CCE();
      builder_7.p12(clazz_94, tmp$ret$286);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_95 = getKClass(ColorInputChangedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_96 = serializer(createKType(getKClass(ColorInputChangedEventData), arrayOf([]), false));
      var tmp$ret$289 = isInterface(this_96, KSerializer) ? this_96 : THROW_CCE();
      builder_7.p12(clazz_95, tmp$ret$289);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_96 = getKClass(TransformChangedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_97 = serializer(createKType(getKClass(TransformChangedEventData), arrayOf([]), false));
      var tmp$ret$292 = isInterface(this_97, KSerializer) ? this_97 : THROW_CCE();
      builder_7.p12(clazz_96, tmp$ret$292);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_97 = getKClass(InternalCameraPanData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_98 = serializer(createKType(getKClass(InternalCameraPanData), arrayOf([]), false));
      var tmp$ret$295 = isInterface(this_98, KSerializer) ? this_98 : THROW_CCE();
      builder_7.p12(clazz_97, tmp$ret$295);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_98 = getKClass(DragGestureStartedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_99 = serializer(createKType(getKClass(DragGestureStartedEventData), arrayOf([]), false));
      var tmp$ret$298 = isInterface(this_99, KSerializer) ? this_99 : THROW_CCE();
      builder_7.p12(clazz_98, tmp$ret$298);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_99 = getKClass(DragGestureMovedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_100 = serializer(createKType(getKClass(DragGestureMovedEventData), arrayOf([]), false));
      var tmp$ret$301 = isInterface(this_100, KSerializer) ? this_100 : THROW_CCE();
      builder_7.p12(clazz_99, tmp$ret$301);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_100 = getKClass(DragGestureEndedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_101 = serializer(createKType(getKClass(DragGestureEndedEventData), arrayOf([]), false));
      var tmp$ret$304 = isInterface(this_101, KSerializer) ? this_101 : THROW_CCE();
      builder_7.p12(clazz_100, tmp$ret$304);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_101 = getKClass(DragGestureEnteredEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_102 = serializer(createKType(getKClass(DragGestureEnteredEventData), arrayOf([]), false));
      var tmp$ret$307 = isInterface(this_102, KSerializer) ? this_102 : THROW_CCE();
      builder_7.p12(clazz_101, tmp$ret$307);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_102 = getKClass(DragGestureExitedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_103 = serializer(createKType(getKClass(DragGestureExitedEventData), arrayOf([]), false));
      var tmp$ret$310 = isInterface(this_103, KSerializer) ? this_103 : THROW_CCE();
      builder_7.p12(clazz_102, tmp$ret$310);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_103 = getKClass(DragDroppedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_104 = serializer(createKType(getKClass(DragDroppedEventData), arrayOf([]), false));
      var tmp$ret$313 = isInterface(this_104, KSerializer) ? this_104 : THROW_CCE();
      builder_7.p12(clazz_103, tmp$ret$313);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_104 = getKClass(CheckBoxChangedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_105 = serializer(createKType(getKClass(CheckBoxChangedEventData), arrayOf([]), false));
      var tmp$ret$316 = isInterface(this_105, KSerializer) ? this_105 : THROW_CCE();
      builder_7.p12(clazz_104, tmp$ret$316);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_105 = getKClass(AnimationFinishedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_106 = serializer(createKType(getKClass(AnimationFinishedEventData), arrayOf([]), false));
      var tmp$ret$319 = isInterface(this_106, KSerializer) ? this_106 : THROW_CCE();
      builder_7.p12(clazz_105, tmp$ret$319);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_106 = getKClass(StructuredDataSelectEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_107 = serializer(createKType(getKClass(StructuredDataSelectEventData), arrayOf([]), false));
      var tmp$ret$322 = isInterface(this_107, KSerializer) ? this_107 : THROW_CCE();
      builder_7.p12(clazz_106, tmp$ret$322);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_107 = getKClass(ScrollEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_108 = serializer(createKType(getKClass(ScrollEventData), arrayOf([]), false));
      var tmp$ret$325 = isInterface(this_108, KSerializer) ? this_108 : THROW_CCE();
      builder_7.p12(clazz_107, tmp$ret$325);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_108 = getKClass(FilesPickedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_109 = serializer(createKType(getKClass(FilesPickedEventData), arrayOf([]), false));
      var tmp$ret$328 = isInterface(this_109, KSerializer) ? this_109 : THROW_CCE();
      builder_7.p12(clazz_108, tmp$ret$328);
      builder_7.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_7 = getKClass(InputEventData);
      var builder_8 = new PolymorphicModuleBuilder(baseClass_7, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_109 = getKClass(MouseEnteredEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_110 = serializer(createKType(getKClass(MouseEnteredEventData), arrayOf([]), false));
      var tmp$ret$331 = isInterface(this_110, KSerializer) ? this_110 : THROW_CCE();
      builder_8.p12(clazz_109, tmp$ret$331);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_110 = getKClass(MouseExitedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_111 = serializer(createKType(getKClass(MouseExitedEventData), arrayOf([]), false));
      var tmp$ret$334 = isInterface(this_111, KSerializer) ? this_111 : THROW_CCE();
      builder_8.p12(clazz_110, tmp$ret$334);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_111 = getKClass(MousePressedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_112 = serializer(createKType(getKClass(MousePressedEventData), arrayOf([]), false));
      var tmp$ret$337 = isInterface(this_112, KSerializer) ? this_112 : THROW_CCE();
      builder_8.p12(clazz_111, tmp$ret$337);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_112 = getKClass(MouseReleasedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_113 = serializer(createKType(getKClass(MouseReleasedEventData), arrayOf([]), false));
      var tmp$ret$340 = isInterface(this_113, KSerializer) ? this_113 : THROW_CCE();
      builder_8.p12(clazz_112, tmp$ret$340);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_113 = getKClass(MouseEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_114 = serializer(createKType(getKClass(MouseEventData), arrayOf([]), false));
      var tmp$ret$343 = isInterface(this_114, KSerializer) ? this_114 : THROW_CCE();
      builder_8.p12(clazz_113, tmp$ret$343);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_114 = getKClass(KeyEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_115 = serializer(createKType(getKClass(KeyEventData), arrayOf([]), false));
      var tmp$ret$346 = isInterface(this_115, KSerializer) ? this_115 : THROW_CCE();
      builder_8.p12(clazz_114, tmp$ret$346);
      builder_8.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_8 = getKClass(MouseEventData);
      var builder_9 = new PolymorphicModuleBuilder(baseClass_8, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_115 = getKClass(MouseEnteredEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_116 = serializer(createKType(getKClass(MouseEnteredEventData), arrayOf([]), false));
      var tmp$ret$349 = isInterface(this_116, KSerializer) ? this_116 : THROW_CCE();
      builder_9.p12(clazz_115, tmp$ret$349);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_116 = getKClass(MouseExitedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_117 = serializer(createKType(getKClass(MouseExitedEventData), arrayOf([]), false));
      var tmp$ret$352 = isInterface(this_117, KSerializer) ? this_117 : THROW_CCE();
      builder_9.p12(clazz_116, tmp$ret$352);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_117 = getKClass(MousePressedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_118 = serializer(createKType(getKClass(MousePressedEventData), arrayOf([]), false));
      var tmp$ret$355 = isInterface(this_118, KSerializer) ? this_118 : THROW_CCE();
      builder_9.p12(clazz_117, tmp$ret$355);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_118 = getKClass(MouseReleasedEventData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_119 = serializer(createKType(getKClass(MouseReleasedEventData), arrayOf([]), false));
      var tmp$ret$358 = isInterface(this_119, KSerializer) ? this_119 : THROW_CCE();
      builder_9.p12(clazz_118, tmp$ret$358);
      builder_9.q12(builder);
      // Inline function 'kotlinx.serialization.modules.polymorphic' call
      var baseClass_9 = getKClass(AnimationData);
      var builder_10 = new PolymorphicModuleBuilder(baseClass_9, null);
      // Inline function 'module.<anonymous>.<anonymous>' call
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_119 = getKClass(FadeAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_120 = serializer(createKType(getKClass(FadeAnimationData), arrayOf([]), false));
      var tmp$ret$361 = isInterface(this_120, KSerializer) ? this_120 : THROW_CCE();
      builder_10.p12(clazz_119, tmp$ret$361);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_120 = getKClass(MovementAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_121 = serializer(createKType(getKClass(MovementAnimationData), arrayOf([]), false));
      var tmp$ret$364 = isInterface(this_121, KSerializer) ? this_121 : THROW_CCE();
      builder_10.p12(clazz_120, tmp$ret$364);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_121 = getKClass(RotationAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_122 = serializer(createKType(getKClass(RotationAnimationData), arrayOf([]), false));
      var tmp$ret$367 = isInterface(this_122, KSerializer) ? this_122 : THROW_CCE();
      builder_10.p12(clazz_121, tmp$ret$367);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_122 = getKClass(ScaleAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_123 = serializer(createKType(getKClass(ScaleAnimationData), arrayOf([]), false));
      var tmp$ret$370 = isInterface(this_123, KSerializer) ? this_123 : THROW_CCE();
      builder_10.p12(clazz_122, tmp$ret$370);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_123 = getKClass(FlipAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_124 = serializer(createKType(getKClass(FlipAnimationData), arrayOf([]), false));
      var tmp$ret$373 = isInterface(this_124, KSerializer) ? this_124 : THROW_CCE();
      builder_10.p12(clazz_123, tmp$ret$373);
      // Inline function 'kotlinx.serialization.modules.subclass' call
      var clazz_124 = getKClass(DelayAnimationData);
      // Inline function 'kotlinx.serialization.serializer' call
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_125 = serializer(createKType(getKClass(DelayAnimationData), arrayOf([]), false));
      var tmp$ret$376 = isInterface(this_125, KSerializer) ? this_125 : THROW_CCE();
      builder_10.p12(clazz_124, tmp$ret$376);
      builder_10.q12(builder);
      module_0 = builder.sr();
      jsonMapper = Json(VOID, jsonMapper$lambda);
    }
  }
  function _get_$cachedSerializer__te6jhj($this) {
    return $this.x1p_1.u1();
  }
  function ActionProp$Companion$_anonymous__2n1c46() {
    return createSimpleEnumSerializer('ActionProp', values());
  }
  var ActionProp_DEFAULT_instance;
  var ActionProp_SHOW_MENU_SCENE_instance;
  var ActionProp_SHOW_GAME_SCENE_instance;
  var ActionProp_HIDE_MENU_SCENE_instance;
  var ActionProp_HIDE_GAME_SCENE_instance;
  var ActionProp_UPDATE_COMPONENT_instance;
  var ActionProp_UPDATE_VISUAL_instance;
  var ActionProp_DRAG_START_instance;
  var ActionProp_DRAG_END_instance;
  var ActionProp_DRAG_DROP_instance;
  function values() {
    return [ActionProp_DEFAULT_getInstance(), ActionProp_SHOW_MENU_SCENE_getInstance(), ActionProp_SHOW_GAME_SCENE_getInstance(), ActionProp_HIDE_MENU_SCENE_getInstance(), ActionProp_HIDE_GAME_SCENE_getInstance(), ActionProp_UPDATE_COMPONENT_getInstance(), ActionProp_UPDATE_VISUAL_getInstance(), ActionProp_DRAG_START_getInstance(), ActionProp_DRAG_END_getInstance(), ActionProp_DRAG_DROP_getInstance()];
  }
  function Companion() {
    Companion_instance = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.x1p_1 = lazy(tmp_0, ActionProp$Companion$_anonymous__2n1c46);
  }
  protoOf(Companion).g16 = function () {
    return _get_$cachedSerializer__te6jhj(this);
  };
  protoOf(Companion).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance;
  function Companion_getInstance() {
    ActionProp_initEntries();
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  var ActionProp_entriesInitialized;
  function ActionProp_initEntries() {
    if (ActionProp_entriesInitialized)
      return Unit_instance;
    ActionProp_entriesInitialized = true;
    ActionProp_DEFAULT_instance = new ActionProp('DEFAULT', 0);
    ActionProp_SHOW_MENU_SCENE_instance = new ActionProp('SHOW_MENU_SCENE', 1);
    ActionProp_SHOW_GAME_SCENE_instance = new ActionProp('SHOW_GAME_SCENE', 2);
    ActionProp_HIDE_MENU_SCENE_instance = new ActionProp('HIDE_MENU_SCENE', 3);
    ActionProp_HIDE_GAME_SCENE_instance = new ActionProp('HIDE_GAME_SCENE', 4);
    ActionProp_UPDATE_COMPONENT_instance = new ActionProp('UPDATE_COMPONENT', 5);
    ActionProp_UPDATE_VISUAL_instance = new ActionProp('UPDATE_VISUAL', 6);
    ActionProp_DRAG_START_instance = new ActionProp('DRAG_START', 7);
    ActionProp_DRAG_END_instance = new ActionProp('DRAG_END', 8);
    ActionProp_DRAG_DROP_instance = new ActionProp('DRAG_DROP', 9);
    Companion_getInstance();
  }
  function ActionProp(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function Companion_0() {
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    return Companion_instance_0;
  }
  function $serializer() {
    $serializer_instance = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('JsonData', this, 2);
    tmp0_serialDesc.pt('container', true);
    tmp0_serialDesc.pt('props', false);
    this.y1p_1 = tmp0_serialDesc;
  }
  protoOf($serializer).z1p = function (encoder, value) {
    var tmp0_desc = this.y1p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1q_1 === 'bgw-root')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1q_1);
    }
    tmp1_output.sn(tmp0_desc, 1, $serializer_getInstance_0(), value.b1q_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer).ti = function (encoder, value) {
    return this.z1p(encoder, value instanceof JsonData ? value : THROW_CCE());
  };
  protoOf($serializer).ui = function (decoder) {
    var tmp0_desc = this.y1p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.nm(tmp0_desc, 1, $serializer_getInstance_0(), tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.nm(tmp0_desc, 1, $serializer_getInstance_0(), tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return JsonData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer).si = function () {
    return this.y1p_1;
  };
  protoOf($serializer).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), $serializer_getInstance_0()];
  };
  var $serializer_instance;
  function $serializer_getInstance() {
    if ($serializer_instance == null)
      new $serializer();
    return $serializer_instance;
  }
  function JsonData_init_$Init$(seen0, container, props, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance().y1p_1);
    }
    if (0 === (seen0 & 1))
      $this.a1q_1 = 'bgw-root';
    else
      $this.a1q_1 = container;
    $this.b1q_1 = props;
    return $this;
  }
  function JsonData_init_$Create$(seen0, container, props, serializationConstructorMarker) {
    return JsonData_init_$Init$(seen0, container, props, serializationConstructorMarker, objectCreate(protoOf(JsonData)));
  }
  function JsonData(container, props) {
    container = container === VOID ? 'bgw-root' : container;
    this.a1q_1 = container;
    this.b1q_1 = props;
  }
  function Companion_1() {
    Companion_instance_1 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.d1q_1 = [Companion_getInstance_2().g16()];
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function $serializer_0() {
    $serializer_instance_0 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('PropData', this, 1);
    tmp0_serialDesc.pt('data', true);
    this.e1q_1 = tmp0_serialDesc;
  }
  protoOf($serializer_0).f1q = function (encoder, value) {
    var tmp0_desc = this.e1q_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_1().d1q_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.g1q_1 == null)) {
      tmp1_output.un(tmp0_desc, 0, tmp2_cached[0], value.g1q_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_0).ti = function (encoder, value) {
    return this.f1q(encoder, value instanceof PropData ? value : THROW_CCE());
  };
  protoOf($serializer_0).ui = function (decoder) {
    var tmp0_desc = this.e1q_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_input = decoder.bm(tmp0_desc);
    var tmp6_cached = Companion_getInstance_1().d1q_1;
    if (tmp5_input.rm()) {
      tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, tmp6_cached[0], tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp5_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, tmp6_cached[0], tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp5_input.cm(tmp0_desc);
    return PropData_init_$Create$(tmp3_bitMask0, tmp4_local0, null);
  };
  protoOf($serializer_0).si = function () {
    return this.e1q_1;
  };
  protoOf($serializer_0).eu = function () {
    var tmp0_cached = Companion_getInstance_1().d1q_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(tmp0_cached[0])];
  };
  var $serializer_instance_0;
  function $serializer_getInstance_0() {
    if ($serializer_instance_0 == null)
      new $serializer_0();
    return $serializer_instance_0;
  }
  function PropData_init_$Init$(seen0, data, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_0().e1q_1);
    }
    if (0 === (seen0 & 1))
      $this.g1q_1 = null;
    else
      $this.g1q_1 = data;
    return $this;
  }
  function PropData_init_$Create$(seen0, data, serializationConstructorMarker) {
    return PropData_init_$Init$(seen0, data, serializationConstructorMarker, objectCreate(protoOf(PropData)));
  }
  function PropData(data) {
    Companion_getInstance_1();
    data = data === VOID ? null : data;
    this.g1q_1 = data;
  }
  function _get_$cachedSerializer__te6jhj_0($this) {
    return $this.c1q_1.u1();
  }
  function Data$Companion$_anonymous__kei0dh() {
    var tmp = getKClass(Data);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = [getKClass(AnimationData), getKClass(AppData), getKClass(ComponentViewData), getKClass(DialogData), getKClass(FileDialogData), getKClass(SceneData), getKClass(CompoundVisualData), getKClass(ColorVisualData), getKClass(ImageVisualData), getKClass(TextVisualData)];
    // Inline function 'kotlin.arrayOf' call
    var tmp_1 = getKClass(AnimationData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$5 = [];
    var tmp_2 = PolymorphicSerializer_init_$Create$(tmp_1, tmp$ret$5);
    var tmp_3 = $serializer_getInstance_1();
    var tmp_4 = getKClass(ComponentViewData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$8 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_5 = [tmp_2, tmp_3, PolymorphicSerializer_init_$Create$(tmp_4, tmp$ret$8), $serializer_getInstance_3(), $serializer_getInstance_4(), $serializer_getInstance_2(), $serializer_getInstance_36(), $serializer_getInstance_33(), $serializer_getInstance_34(), $serializer_getInstance_35()];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$14 = [];
    return SealedClassSerializer_init_$Create$('Data', tmp, tmp_0, tmp_5, tmp$ret$14);
  }
  function Companion_2() {
    Companion_instance_2 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.c1q_1 = lazy(tmp_0, Data$Companion$_anonymous__kei0dh);
  }
  protoOf(Companion_2).g16 = function () {
    return _get_$cachedSerializer__te6jhj_0(this);
  };
  protoOf(Companion_2).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function Data_init_$Init$(seen0, serializationConstructorMarker, $this) {
    return $this;
  }
  function Data() {
    Companion_getInstance_2();
  }
  function Companion_3() {
    Companion_instance_3 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.h1q_1 = [null, null, new ArrayListSerializer(new TripleSerializer(StringSerializer_getInstance(), StringSerializer_getInstance(), IntSerializer_getInstance())), null, null, Companion_getInstance().g16()];
  }
  var Companion_instance_3;
  function Companion_getInstance_3() {
    if (Companion_instance_3 == null)
      new Companion_3();
    return Companion_instance_3;
  }
  function $serializer_1() {
    $serializer_instance_1 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('AppData', this, 6);
    tmp0_serialDesc.pt('menuScene', true);
    tmp0_serialDesc.pt('gameScene', true);
    tmp0_serialDesc.pt('fonts', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('action', true);
    this.i1q_1 = tmp0_serialDesc;
  }
  protoOf($serializer_1).j1q = function (encoder, value) {
    var tmp0_desc = this.i1q_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_3().h1q_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.k1q_1 == null)) {
      tmp1_output.un(tmp0_desc, 0, $serializer_getInstance_2(), value.k1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.l1q_1 == null)) {
      tmp1_output.un(tmp0_desc, 1, $serializer_getInstance_2(), value.l1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !equals(value.m1q_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 2, tmp2_cached[2], value.m1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.n1q_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.n1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.o1q_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.o1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !value.p1q_1.equals(ActionProp_DEFAULT_getInstance())) {
      tmp1_output.sn(tmp0_desc, 5, tmp2_cached[5], value.p1q_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_1).ti = function (encoder, value) {
    return this.j1q(encoder, value instanceof AppData ? value : THROW_CCE());
  };
  protoOf($serializer_1).ui = function (decoder) {
    var tmp0_desc = this.i1q_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = null;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_3().h1q_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, $serializer_getInstance_2(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.pm(tmp0_desc, 1, $serializer_getInstance_2(), tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.nm(tmp0_desc, 2, tmp11_cached[2], tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, $serializer_getInstance_2(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.pm(tmp0_desc, 1, $serializer_getInstance_2(), tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.nm(tmp0_desc, 2, tmp11_cached[2], tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return AppData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_1).si = function () {
    return this.i1q_1;
  };
  protoOf($serializer_1).eu = function () {
    var tmp0_cached = Companion_getInstance_3().h1q_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable($serializer_getInstance_2()), get_nullable($serializer_getInstance_2()), tmp0_cached[2], IntSerializer_getInstance(), IntSerializer_getInstance(), tmp0_cached[5]];
  };
  var $serializer_instance_1;
  function $serializer_getInstance_1() {
    if ($serializer_instance_1 == null)
      new $serializer_1();
    return $serializer_instance_1;
  }
  function AppData_init_$Init$(seen0, menuScene, gameScene, fonts, width, height, action, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_1().i1q_1);
    }
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.k1q_1 = null;
    else
      $this.k1q_1 = menuScene;
    if (0 === (seen0 & 2))
      $this.l1q_1 = null;
    else
      $this.l1q_1 = gameScene;
    if (0 === (seen0 & 4))
      $this.m1q_1 = emptyList();
    else
      $this.m1q_1 = fonts;
    if (0 === (seen0 & 8))
      $this.n1q_1 = 0;
    else
      $this.n1q_1 = width;
    if (0 === (seen0 & 16))
      $this.o1q_1 = 0;
    else
      $this.o1q_1 = height;
    if (0 === (seen0 & 32))
      $this.p1q_1 = ActionProp_DEFAULT_getInstance();
    else
      $this.p1q_1 = action;
    return $this;
  }
  function AppData_init_$Create$(seen0, menuScene, gameScene, fonts, width, height, action, serializationConstructorMarker) {
    return AppData_init_$Init$(seen0, menuScene, gameScene, fonts, width, height, action, serializationConstructorMarker, objectCreate(protoOf(AppData)));
  }
  function AppData() {
    Companion_getInstance_3();
    Data.call(this);
    this.k1q_1 = null;
    this.l1q_1 = null;
    this.m1q_1 = emptyList();
    this.n1q_1 = 0;
    this.o1q_1 = 0;
    this.p1q_1 = ActionProp_DEFAULT_getInstance();
  }
  function Companion_4() {
    Companion_instance_4 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.t1q_1 = [null, null, null, Companion_getInstance_44().g16(), new ArrayListSerializer(Companion_getInstance_8().g16())];
  }
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function $serializer_2() {
    $serializer_instance_2 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('SceneData', this, 5);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('background', true);
    tmp0_serialDesc.pt('components', true);
    this.u1q_1 = tmp0_serialDesc;
  }
  protoOf($serializer_2).v1q = function (encoder, value) {
    var tmp0_desc = this.u1q_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_4().t1q_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.w1q_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.w1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.x1q_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.x1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.y1q_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.y1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.z1q_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.z1q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !equals(value.a1r_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 4, tmp2_cached[4], value.a1r_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_2).ti = function (encoder, value) {
    return this.v1q(encoder, value instanceof SceneData ? value : THROW_CCE());
  };
  protoOf($serializer_2).ui = function (decoder) {
    var tmp0_desc = this.u1q_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_input = decoder.bm(tmp0_desc);
    var tmp10_cached = Companion_getInstance_4().t1q_1;
    if (tmp9_input.rm()) {
      tmp4_local0 = tmp9_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp9_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp9_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp9_input.pm(tmp0_desc, 3, tmp10_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp9_input.nm(tmp0_desc, 4, tmp10_cached[4], tmp8_local4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp9_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp9_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp9_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp9_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp9_input.pm(tmp0_desc, 3, tmp10_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp9_input.nm(tmp0_desc, 4, tmp10_cached[4], tmp8_local4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp9_input.cm(tmp0_desc);
    return SceneData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, null);
  };
  protoOf($serializer_2).si = function () {
    return this.u1q_1;
  };
  protoOf($serializer_2).eu = function () {
    var tmp0_cached = Companion_getInstance_4().t1q_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[3]), tmp0_cached[4]];
  };
  var $serializer_instance_2;
  function $serializer_getInstance_2() {
    if ($serializer_instance_2 == null)
      new $serializer_2();
    return $serializer_instance_2;
  }
  function SceneData_init_$Init$(seen0, id, width, height, background, components, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_2().u1q_1);
    }
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.w1q_1 = '';
    else
      $this.w1q_1 = id;
    if (0 === (seen0 & 2))
      $this.x1q_1 = 0;
    else
      $this.x1q_1 = width;
    if (0 === (seen0 & 4))
      $this.y1q_1 = 0;
    else
      $this.y1q_1 = height;
    if (0 === (seen0 & 8))
      $this.z1q_1 = null;
    else
      $this.z1q_1 = background;
    if (0 === (seen0 & 16))
      $this.a1r_1 = emptyList();
    else
      $this.a1r_1 = components;
    return $this;
  }
  function SceneData_init_$Create$(seen0, id, width, height, background, components, serializationConstructorMarker) {
    return SceneData_init_$Init$(seen0, id, width, height, background, components, serializationConstructorMarker, objectCreate(protoOf(SceneData)));
  }
  function SceneData() {
    Companion_getInstance_4();
    Data.call(this);
    this.w1q_1 = '';
    this.x1q_1 = 0;
    this.y1q_1 = 0;
    this.z1q_1 = null;
    this.a1r_1 = emptyList();
  }
  function _get_$cachedSerializer__te6jhj_1($this) {
    return $this.c1r_1.u1();
  }
  function AnimationData$Companion$_anonymous__6f5t6p() {
    var tmp = getKClass(AnimationData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_5() {
    Companion_instance_5 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.b1r_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null];
    var tmp_1 = this;
    var tmp_2 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_1.c1r_1 = lazy(tmp_2, AnimationData$Companion$_anonymous__6f5t6p);
  }
  protoOf(Companion_5).g16 = function () {
    return _get_$cachedSerializer__te6jhj_1(this);
  };
  protoOf(Companion_5).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_5;
  function Companion_getInstance_5() {
    if (Companion_instance_5 == null)
      new Companion_5();
    return Companion_instance_5;
  }
  function AnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, $this) {
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.d1r_1 = '';
    else
      $this.d1r_1 = id;
    if (0 === (seen0 & 2))
      $this.e1r_1 = 0;
    else
      $this.e1r_1 = duration;
    if (0 === (seen0 & 4))
      $this.f1r_1 = false;
    else
      $this.f1r_1 = isRunning;
    if (0 === (seen0 & 8))
      $this.g1r_1 = null;
    else
      $this.g1r_1 = onFinished;
    if (0 === (seen0 & 16))
      $this.h1r_1 = '';
    else
      $this.h1r_1 = animationType;
    return $this;
  }
  function AnimationData() {
    Companion_getInstance_5();
    Data.call(this);
    this.d1r_1 = '';
    this.e1r_1 = 0;
    this.f1r_1 = false;
    this.g1r_1 = null;
    this.h1r_1 = '';
  }
  function Companion_6() {
    Companion_instance_6 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.i1r_1 = [null, createSimpleEnumSerializer('tools.aqua.bgw.dialog.DialogType', values_1()), null, null, null, null];
  }
  var Companion_instance_6;
  function Companion_getInstance_6() {
    if (Companion_instance_6 == null)
      new Companion_6();
    return Companion_instance_6;
  }
  function $serializer_3() {
    $serializer_instance_3 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('DialogData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('dialogType', true);
    tmp0_serialDesc.pt('title', true);
    tmp0_serialDesc.pt('header', true);
    tmp0_serialDesc.pt('message', true);
    tmp0_serialDesc.pt('exception', true);
    this.j1r_1 = tmp0_serialDesc;
  }
  protoOf($serializer_3).k1r = function (encoder, value) {
    var tmp0_desc = this.j1r_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_6().i1r_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.l1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.l1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !value.m1r_1.equals(DialogType_INFORMATION_getInstance())) {
      tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.m1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.n1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 2, value.n1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.o1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 3, value.o1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.p1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.p1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.q1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 5, value.q1r_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_3).ti = function (encoder, value) {
    return this.k1r(encoder, value instanceof DialogData ? value : THROW_CCE());
  };
  protoOf($serializer_3).ui = function (decoder) {
    var tmp0_desc = this.j1r_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_6().i1r_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.nm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.lm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.lm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.lm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.nm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.lm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.lm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.lm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return DialogData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_3).si = function () {
    return this.j1r_1;
  };
  protoOf($serializer_3).eu = function () {
    var tmp0_cached = Companion_getInstance_6().i1r_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), tmp0_cached[1], StringSerializer_getInstance(), StringSerializer_getInstance(), StringSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_3;
  function $serializer_getInstance_3() {
    if ($serializer_instance_3 == null)
      new $serializer_3();
    return $serializer_instance_3;
  }
  function DialogData_init_$Init$(seen0, id, dialogType, title, header, message, exception, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_3().j1r_1);
    }
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.l1r_1 = '';
    else
      $this.l1r_1 = id;
    if (0 === (seen0 & 2))
      $this.m1r_1 = DialogType_INFORMATION_getInstance();
    else
      $this.m1r_1 = dialogType;
    if (0 === (seen0 & 4))
      $this.n1r_1 = '';
    else
      $this.n1r_1 = title;
    if (0 === (seen0 & 8))
      $this.o1r_1 = '';
    else
      $this.o1r_1 = header;
    if (0 === (seen0 & 16))
      $this.p1r_1 = '';
    else
      $this.p1r_1 = message;
    if (0 === (seen0 & 32))
      $this.q1r_1 = '';
    else
      $this.q1r_1 = exception;
    return $this;
  }
  function DialogData_init_$Create$(seen0, id, dialogType, title, header, message, exception, serializationConstructorMarker) {
    return DialogData_init_$Init$(seen0, id, dialogType, title, header, message, exception, serializationConstructorMarker, objectCreate(protoOf(DialogData)));
  }
  function DialogData() {
    Companion_getInstance_6();
    Data.call(this);
    this.l1r_1 = '';
    this.m1r_1 = DialogType_INFORMATION_getInstance();
    this.n1r_1 = '';
    this.o1r_1 = '';
    this.p1r_1 = '';
    this.q1r_1 = '';
  }
  function Companion_7() {
    Companion_instance_7 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.r1r_1 = [null, null, null, null, null, new ArrayListSerializer(new PairSerializer(StringSerializer_getInstance(), new ArrayListSerializer(StringSerializer_getInstance())))];
  }
  var Companion_instance_7;
  function Companion_getInstance_7() {
    if (Companion_instance_7 == null)
      new Companion_7();
    return Companion_instance_7;
  }
  function $serializer_4() {
    $serializer_instance_4 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('FileDialogData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('mode', true);
    tmp0_serialDesc.pt('title', true);
    tmp0_serialDesc.pt('initialFileName', true);
    tmp0_serialDesc.pt('initialDirectoryPath', true);
    tmp0_serialDesc.pt('extensionFilters', true);
    this.s1r_1 = tmp0_serialDesc;
  }
  protoOf($serializer_4).t1r = function (encoder, value) {
    var tmp0_desc = this.s1r_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_7().r1r_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.u1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.u1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.v1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 1, value.v1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.w1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 2, value.w1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.x1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 3, value.x1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.y1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 4, StringSerializer_getInstance(), value.y1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !equals(value.z1r_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 5, tmp2_cached[5], value.z1r_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_4).ti = function (encoder, value) {
    return this.t1r(encoder, value instanceof FileDialogData ? value : THROW_CCE());
  };
  protoOf($serializer_4).ui = function (decoder) {
    var tmp0_desc = this.s1r_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_7().r1r_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.lm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.lm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.pm(tmp0_desc, 4, StringSerializer_getInstance(), tmp8_local4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.lm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.lm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.pm(tmp0_desc, 4, StringSerializer_getInstance(), tmp8_local4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return FileDialogData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_4).si = function () {
    return this.s1r_1;
  };
  protoOf($serializer_4).eu = function () {
    var tmp0_cached = Companion_getInstance_7().r1r_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), StringSerializer_getInstance(), StringSerializer_getInstance(), StringSerializer_getInstance(), get_nullable(StringSerializer_getInstance()), tmp0_cached[5]];
  };
  var $serializer_instance_4;
  function $serializer_getInstance_4() {
    if ($serializer_instance_4 == null)
      new $serializer_4();
    return $serializer_instance_4;
  }
  function FileDialogData_init_$Init$(seen0, id, mode, title, initialFileName, initialDirectoryPath, extensionFilters, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_4().s1r_1);
    }
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.u1r_1 = '';
    else
      $this.u1r_1 = id;
    if (0 === (seen0 & 2))
      $this.v1r_1 = '';
    else
      $this.v1r_1 = mode;
    if (0 === (seen0 & 4))
      $this.w1r_1 = '';
    else
      $this.w1r_1 = title;
    if (0 === (seen0 & 8))
      $this.x1r_1 = '';
    else
      $this.x1r_1 = initialFileName;
    if (0 === (seen0 & 16))
      $this.y1r_1 = null;
    else
      $this.y1r_1 = initialDirectoryPath;
    if (0 === (seen0 & 32))
      $this.z1r_1 = emptyList();
    else
      $this.z1r_1 = extensionFilters;
    return $this;
  }
  function FileDialogData_init_$Create$(seen0, id, mode, title, initialFileName, initialDirectoryPath, extensionFilters, serializationConstructorMarker) {
    return FileDialogData_init_$Init$(seen0, id, mode, title, initialFileName, initialDirectoryPath, extensionFilters, serializationConstructorMarker, objectCreate(protoOf(FileDialogData)));
  }
  function FileDialogData() {
    Companion_getInstance_7();
    Data.call(this);
    this.u1r_1 = '';
    this.v1r_1 = '';
    this.w1r_1 = '';
    this.x1r_1 = '';
    this.y1r_1 = null;
    this.z1r_1 = emptyList();
  }
  function _get_$cachedSerializer__te6jhj_2($this) {
    return $this.s1q_1.u1();
  }
  function ComponentViewData$Companion$_anonymous__4v6kvx() {
    var tmp = getKClass(ComponentViewData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_8() {
    Companion_instance_8 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.r1q_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.s1q_1 = lazy(tmp_1, ComponentViewData$Companion$_anonymous__4v6kvx);
  }
  protoOf(Companion_8).g16 = function () {
    return _get_$cachedSerializer__te6jhj_2(this);
  };
  protoOf(Companion_8).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_8;
  function Companion_getInstance_8() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  function ComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this) {
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.a1s_1 = '';
    else
      $this.a1s_1 = id;
    if (0 === (seen0 & 2))
      $this.b1s_1 = 0;
    else
      $this.b1s_1 = posX;
    if (0 === (seen0 & 4))
      $this.c1s_1 = 0;
    else
      $this.c1s_1 = posY;
    if (0 === (seen0 & 8))
      $this.d1s_1 = 0;
    else
      $this.d1s_1 = width;
    if (0 === (seen0 & 16))
      $this.e1s_1 = 0;
    else
      $this.e1s_1 = height;
    if (0 === (seen0 & 32))
      $this.f1s_1 = null;
    else
      $this.f1s_1 = visual;
    if (0 === (seen0 & 64))
      $this.g1s_1 = 0;
    else
      $this.g1s_1 = zIndex;
    if (0 === (seen0 & 128))
      $this.h1s_1 = 1.0;
    else
      $this.h1s_1 = opacity;
    if (0 === (seen0 & 256))
      $this.i1s_1 = true;
    else
      $this.i1s_1 = isVisible;
    if (0 === (seen0 & 512))
      $this.j1s_1 = false;
    else
      $this.j1s_1 = isDisabled;
    if (0 === (seen0 & 1024))
      $this.k1s_1 = true;
    else
      $this.k1s_1 = isFocusable;
    if (0 === (seen0 & 2048))
      $this.l1s_1 = 1.0;
    else
      $this.l1s_1 = scaleX;
    if (0 === (seen0 & 4096))
      $this.m1s_1 = 1.0;
    else
      $this.m1s_1 = scaleY;
    if (0 === (seen0 & 8192))
      $this.n1s_1 = 0.0;
    else
      $this.n1s_1 = rotation;
    if (0 === (seen0 & 16384))
      $this.o1s_1 = false;
    else
      $this.o1s_1 = layoutFromCenter;
    if (0 === (seen0 & 32768))
      $this.p1s_1 = false;
    else
      $this.p1s_1 = isDraggable;
    if (0 === (seen0 & 65536))
      $this.q1s_1 = false;
    else
      $this.q1s_1 = isDragged;
    if (0 === (seen0 & 131072))
      $this.r1s_1 = false;
    else
      $this.r1s_1 = isDroppable;
    if (0 === (seen0 & 262144))
      $this.s1s_1 = false;
    else
      $this.s1s_1 = hasMouseEnteredEvent;
    if (0 === (seen0 & 524288))
      $this.t1s_1 = false;
    else
      $this.t1s_1 = hasMouseExitedEvent;
    return $this;
  }
  function ComponentViewData() {
    Companion_getInstance_8();
    Data.call(this);
    this.a1s_1 = '';
    this.b1s_1 = 0;
    this.c1s_1 = 0;
    this.d1s_1 = 0;
    this.e1s_1 = 0;
    this.f1s_1 = null;
    this.g1s_1 = 0;
    this.h1s_1 = 1.0;
    this.i1s_1 = true;
    this.j1s_1 = false;
    this.k1s_1 = true;
    this.l1s_1 = 1.0;
    this.m1s_1 = 1.0;
    this.n1s_1 = 0.0;
    this.o1s_1 = false;
    this.p1s_1 = false;
    this.q1s_1 = false;
    this.r1s_1 = false;
    this.s1s_1 = false;
    this.t1s_1 = false;
  }
  function _get_$cachedSerializer__te6jhj_3($this) {
    return $this.v1s_1.u1();
  }
  function UIComponentData$Companion$_anonymous__58lixw() {
    var tmp = getKClass(UIComponentData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_9() {
    Companion_instance_9 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.u1s_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.v1s_1 = lazy(tmp_1, UIComponentData$Companion$_anonymous__58lixw);
  }
  protoOf(Companion_9).g16 = function () {
    return _get_$cachedSerializer__te6jhj_3(this);
  };
  protoOf(Companion_9).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this) {
    ComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.q1t_1 = new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal');
    else
      $this.q1t_1 = font;
    return $this;
  }
  function UIComponentData() {
    Companion_getInstance_9();
    ComponentViewData.call(this);
    this.q1t_1 = new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal');
  }
  function _get_$cachedSerializer__te6jhj_4($this) {
    return $this.s1t_1.u1();
  }
  function LabeledUIComponentData$Companion$_anonymous__dm7fkh() {
    var tmp = getKClass(LabeledUIComponentData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_10() {
    Companion_instance_10 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.r1t_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.s1t_1 = lazy(tmp_1, LabeledUIComponentData$Companion$_anonymous__dm7fkh);
  }
  protoOf(Companion_10).g16 = function () {
    return _get_$cachedSerializer__te6jhj_4(this);
  };
  protoOf(Companion_10).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this) {
    UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.o1u_1 = '';
    else
      $this.o1u_1 = text;
    if (0 === (seen0 & 4194304))
      $this.p1u_1 = new Pair('', '');
    else
      $this.p1u_1 = alignment;
    if (0 === (seen0 & 8388608))
      $this.q1u_1 = false;
    else
      $this.q1u_1 = isWrapText;
    return $this;
  }
  function LabeledUIComponentData() {
    Companion_getInstance_10();
    UIComponentData.call(this);
    this.o1u_1 = '';
    this.p1u_1 = new Pair('', '');
    this.q1u_1 = false;
  }
  function _get_$cachedSerializer__te6jhj_5($this) {
    return $this.s1u_1.u1();
  }
  function TextInputUIComponentData$Companion$_anonymous__e8ug55() {
    var tmp = getKClass(TextInputUIComponentData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_11() {
    Companion_instance_11 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.r1u_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.s1u_1 = lazy(tmp_1, TextInputUIComponentData$Companion$_anonymous__e8ug55);
  }
  protoOf(Companion_11).g16 = function () {
    return _get_$cachedSerializer__te6jhj_5(this);
  };
  protoOf(Companion_11).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_11;
  function Companion_getInstance_11() {
    if (Companion_instance_11 == null)
      new Companion_11();
    return Companion_instance_11;
  }
  function TextInputUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this) {
    UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.o1v_1 = '';
    else
      $this.o1v_1 = text;
    if (0 === (seen0 & 4194304))
      $this.p1v_1 = '';
    else
      $this.p1v_1 = prompt;
    return $this;
  }
  function TextInputUIComponentData() {
    Companion_getInstance_11();
    UIComponentData.call(this);
    this.o1v_1 = '';
    this.p1v_1 = '';
  }
  function Companion_12() {
    Companion_instance_12 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.q1v_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null, null, null];
  }
  var Companion_instance_12;
  function Companion_getInstance_12() {
    if (Companion_instance_12 == null)
      new Companion_12();
    return Companion_instance_12;
  }
  function $serializer_5() {
    $serializer_instance_5 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('BinaryStateButtonData', this, 26);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('isWrapText', true);
    tmp0_serialDesc.pt('isSelected', true);
    tmp0_serialDesc.pt('group', true);
    this.r1v_1 = tmp0_serialDesc;
  }
  protoOf($serializer_5).s1v = function (encoder, value) {
    var tmp0_desc = this.r1v_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_12().q1v_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1u_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.p1u_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.p1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.q1u_1 === false)) {
      tmp1_output.in(tmp0_desc, 23, value.q1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !(value.r1w_1 === false)) {
      tmp1_output.in(tmp0_desc, 24, value.r1w_1);
    }
    if (tmp1_output.yn(tmp0_desc, 25) ? true : !(value.s1w_1 === '')) {
      tmp1_output.qn(tmp0_desc, 25, value.s1w_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_5).ti = function (encoder, value) {
    return this.s1v(encoder, value instanceof BinaryStateButtonData ? value : THROW_CCE());
  };
  protoOf($serializer_5).ui = function (decoder) {
    var tmp0_desc = this.r1v_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_local24 = false;
    var tmp29_local25 = null;
    var tmp30_input = decoder.bm(tmp0_desc);
    var tmp31_cached = Companion_getInstance_12().q1v_1;
    if (tmp30_input.rm()) {
      tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp30_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp30_input.nm(tmp0_desc, 22, tmp31_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp30_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp30_input.dm(tmp0_desc, 24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
      tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
      tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp30_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp30_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp30_input.nm(tmp0_desc, 22, tmp31_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp30_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp30_input.dm(tmp0_desc, 24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          case 25:
            tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
            tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp30_input.cm(tmp0_desc);
    return BinaryStateButtonData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, tmp29_local25, null);
  };
  protoOf($serializer_5).si = function () {
    return this.r1v_1;
  };
  protoOf($serializer_5).eu = function () {
    var tmp0_cached = Companion_getInstance_12().q1v_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_5;
  function $serializer_getInstance_5() {
    if ($serializer_instance_5 == null)
      new $serializer_5();
    return $serializer_instance_5;
  }
  function BinaryStateButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_5().r1v_1);
    }
    LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this);
    if (0 === (seen0 & 16777216))
      $this.r1w_1 = false;
    else
      $this.r1w_1 = isSelected;
    if (0 === (seen0 & 33554432))
      $this.s1w_1 = '';
    else
      $this.s1w_1 = group;
    return $this;
  }
  function BinaryStateButtonData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker) {
    return BinaryStateButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker, objectCreate(protoOf(BinaryStateButtonData)));
  }
  function BinaryStateButtonData() {
    Companion_getInstance_12();
    LabeledUIComponentData.call(this);
    this.r1w_1 = false;
    this.s1w_1 = '';
  }
  function Companion_13() {
    Companion_instance_13 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.t1w_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null];
  }
  var Companion_instance_13;
  function Companion_getInstance_13() {
    if (Companion_instance_13 == null)
      new Companion_13();
    return Companion_instance_13;
  }
  function $serializer_6() {
    $serializer_instance_6 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ButtonData', this, 24);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('isWrapText', true);
    this.u1w_1 = tmp0_serialDesc;
  }
  protoOf($serializer_6).v1w = function (encoder, value) {
    var tmp0_desc = this.u1w_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_13().t1w_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1u_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.p1u_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.p1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.q1u_1 === false)) {
      tmp1_output.in(tmp0_desc, 23, value.q1u_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_6).ti = function (encoder, value) {
    return this.v1w(encoder, value instanceof ButtonData ? value : THROW_CCE());
  };
  protoOf($serializer_6).ui = function (decoder) {
    var tmp0_desc = this.u1w_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_input = decoder.bm(tmp0_desc);
    var tmp29_cached = Companion_getInstance_13().t1w_1;
    if (tmp28_input.rm()) {
      tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp28_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp28_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp28_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp28_input.cm(tmp0_desc);
    return ButtonData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, null);
  };
  protoOf($serializer_6).si = function () {
    return this.u1w_1;
  };
  protoOf($serializer_6).eu = function () {
    var tmp0_cached = Companion_getInstance_13().t1w_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], BooleanSerializer_getInstance()];
  };
  var $serializer_instance_6;
  function $serializer_getInstance_6() {
    if ($serializer_instance_6 == null)
      new $serializer_6();
    return $serializer_instance_6;
  }
  function ButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_6().u1w_1);
    }
    LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this);
    return $this;
  }
  function ButtonData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker) {
    return ButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, objectCreate(protoOf(ButtonData)));
  }
  function ButtonData() {
    Companion_getInstance_13();
    LabeledUIComponentData.call(this);
  }
  function Companion_14() {
    Companion_instance_14 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.w1w_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null, null, null, null];
  }
  var Companion_instance_14;
  function Companion_getInstance_14() {
    if (Companion_instance_14 == null)
      new Companion_14();
    return Companion_instance_14;
  }
  function $serializer_7() {
    $serializer_instance_7 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('CheckBoxData', this, 27);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('isWrapText', true);
    tmp0_serialDesc.pt('isChecked', true);
    tmp0_serialDesc.pt('allowIndeterminate', true);
    tmp0_serialDesc.pt('isIndeterminate', true);
    this.x1w_1 = tmp0_serialDesc;
  }
  protoOf($serializer_7).y1w = function (encoder, value) {
    var tmp0_desc = this.x1w_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_14().w1w_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1u_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.p1u_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.p1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.q1u_1 === false)) {
      tmp1_output.in(tmp0_desc, 23, value.q1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !(value.x1x_1 === false)) {
      tmp1_output.in(tmp0_desc, 24, value.x1x_1);
    }
    if (tmp1_output.yn(tmp0_desc, 25) ? true : !(value.y1x_1 === false)) {
      tmp1_output.in(tmp0_desc, 25, value.y1x_1);
    }
    if (tmp1_output.yn(tmp0_desc, 26) ? true : !(value.z1x_1 === false)) {
      tmp1_output.in(tmp0_desc, 26, value.z1x_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_7).ti = function (encoder, value) {
    return this.y1w(encoder, value instanceof CheckBoxData ? value : THROW_CCE());
  };
  protoOf($serializer_7).ui = function (decoder) {
    var tmp0_desc = this.x1w_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_local24 = false;
    var tmp29_local25 = false;
    var tmp30_local26 = false;
    var tmp31_input = decoder.bm(tmp0_desc);
    var tmp32_cached = Companion_getInstance_14().w1w_1;
    if (tmp31_input.rm()) {
      tmp4_local0 = tmp31_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp31_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp31_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp31_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp31_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp31_input.pm(tmp0_desc, 5, tmp32_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp31_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp31_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp31_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp31_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp31_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp31_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp31_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp31_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp31_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp31_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp31_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp31_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp31_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp31_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp31_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp31_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp31_input.nm(tmp0_desc, 22, tmp32_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp31_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp31_input.dm(tmp0_desc, 24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
      tmp29_local25 = tmp31_input.dm(tmp0_desc, 25);
      tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
      tmp30_local26 = tmp31_input.dm(tmp0_desc, 26);
      tmp3_bitMask0 = tmp3_bitMask0 | 67108864;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp31_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp31_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp31_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp31_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp31_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp31_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp31_input.pm(tmp0_desc, 5, tmp32_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp31_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp31_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp31_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp31_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp31_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp31_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp31_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp31_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp31_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp31_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp31_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp31_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp31_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp31_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp31_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp31_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp31_input.nm(tmp0_desc, 22, tmp32_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp31_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp31_input.dm(tmp0_desc, 24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          case 25:
            tmp29_local25 = tmp31_input.dm(tmp0_desc, 25);
            tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
            break;
          case 26:
            tmp30_local26 = tmp31_input.dm(tmp0_desc, 26);
            tmp3_bitMask0 = tmp3_bitMask0 | 67108864;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp31_input.cm(tmp0_desc);
    return CheckBoxData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, tmp29_local25, tmp30_local26, null);
  };
  protoOf($serializer_7).si = function () {
    return this.x1w_1;
  };
  protoOf($serializer_7).eu = function () {
    var tmp0_cached = Companion_getInstance_14().w1w_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance()];
  };
  var $serializer_instance_7;
  function $serializer_getInstance_7() {
    if ($serializer_instance_7 == null)
      new $serializer_7();
    return $serializer_instance_7;
  }
  function CheckBoxData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isChecked, allowIndeterminate, isIndeterminate, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_7().x1w_1);
    }
    LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this);
    if (0 === (seen0 & 16777216))
      $this.x1x_1 = false;
    else
      $this.x1x_1 = isChecked;
    if (0 === (seen0 & 33554432))
      $this.y1x_1 = false;
    else
      $this.y1x_1 = allowIndeterminate;
    if (0 === (seen0 & 67108864))
      $this.z1x_1 = false;
    else
      $this.z1x_1 = isIndeterminate;
    return $this;
  }
  function CheckBoxData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isChecked, allowIndeterminate, isIndeterminate, serializationConstructorMarker) {
    return CheckBoxData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isChecked, allowIndeterminate, isIndeterminate, serializationConstructorMarker, objectCreate(protoOf(CheckBoxData)));
  }
  function CheckBoxData() {
    Companion_getInstance_14();
    LabeledUIComponentData.call(this);
    this.x1x_1 = false;
    this.y1x_1 = false;
    this.z1x_1 = false;
  }
  function Companion_15() {
    Companion_instance_15 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.a1y_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(new PairSerializer(IntSerializer_getInstance(), StringSerializer_getInstance())), new PairSerializer(IntSerializer_getInstance(), StringSerializer_getInstance())];
  }
  var Companion_instance_15;
  function Companion_getInstance_15() {
    if (Companion_instance_15 == null)
      new Companion_15();
    return Companion_instance_15;
  }
  function $serializer_8() {
    $serializer_instance_8 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ComboBoxData', this, 24);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('prompt', true);
    tmp0_serialDesc.pt('items', true);
    tmp0_serialDesc.pt('selectedItem', true);
    this.b1y_1 = tmp0_serialDesc;
  }
  protoOf($serializer_8).c1y = function (encoder, value) {
    var tmp0_desc = this.b1y_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_15().a1y_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.y1y_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.y1y_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !equals(value.z1y_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.z1y_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.a1z_1 == null)) {
      tmp1_output.un(tmp0_desc, 23, tmp2_cached[23], value.a1z_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_8).ti = function (encoder, value) {
    return this.c1y(encoder, value instanceof ComboBoxData ? value : THROW_CCE());
  };
  protoOf($serializer_8).ui = function (decoder) {
    var tmp0_desc = this.b1y_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = null;
    var tmp28_input = decoder.bm(tmp0_desc);
    var tmp29_cached = Companion_getInstance_15().a1y_1;
    if (tmp28_input.rm()) {
      tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp28_input.pm(tmp0_desc, 23, tmp29_cached[23], tmp27_local23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp28_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp28_input.pm(tmp0_desc, 23, tmp29_cached[23], tmp27_local23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp28_input.cm(tmp0_desc);
    return ComboBoxData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, null);
  };
  protoOf($serializer_8).si = function () {
    return this.b1y_1;
  };
  protoOf($serializer_8).eu = function () {
    var tmp0_cached = Companion_getInstance_15().a1y_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], get_nullable(tmp0_cached[23])];
  };
  var $serializer_instance_8;
  function $serializer_getInstance_8() {
    if ($serializer_instance_8 == null)
      new $serializer_8();
    return $serializer_instance_8;
  }
  function ComboBoxData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, prompt, items, selectedItem, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_8().b1y_1);
    }
    UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.y1y_1 = '';
    else
      $this.y1y_1 = prompt;
    if (0 === (seen0 & 4194304))
      $this.z1y_1 = emptyList();
    else
      $this.z1y_1 = items;
    if (0 === (seen0 & 8388608))
      $this.a1z_1 = null;
    else
      $this.a1z_1 = selectedItem;
    return $this;
  }
  function ComboBoxData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, prompt, items, selectedItem, serializationConstructorMarker) {
    return ComboBoxData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, prompt, items, selectedItem, serializationConstructorMarker, objectCreate(protoOf(ComboBoxData)));
  }
  function ComboBoxData() {
    Companion_getInstance_15();
    UIComponentData.call(this);
    this.y1y_1 = '';
    this.z1y_1 = emptyList();
    this.a1z_1 = null;
  }
  function Companion_16() {
    Companion_instance_16 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.b1z_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null];
  }
  var Companion_instance_16;
  function Companion_getInstance_16() {
    if (Companion_instance_16 == null)
      new Companion_16();
    return Companion_instance_16;
  }
  function $serializer_9() {
    $serializer_instance_9 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('LabelData', this, 24);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('isWrapText', true);
    this.c1z_1 = tmp0_serialDesc;
  }
  protoOf($serializer_9).d1z = function (encoder, value) {
    var tmp0_desc = this.c1z_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_16().b1z_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1u_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.p1u_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.p1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.q1u_1 === false)) {
      tmp1_output.in(tmp0_desc, 23, value.q1u_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_9).ti = function (encoder, value) {
    return this.d1z(encoder, value instanceof LabelData ? value : THROW_CCE());
  };
  protoOf($serializer_9).ui = function (decoder) {
    var tmp0_desc = this.c1z_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_input = decoder.bm(tmp0_desc);
    var tmp29_cached = Companion_getInstance_16().b1z_1;
    if (tmp28_input.rm()) {
      tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp28_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp28_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp28_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp28_input.cm(tmp0_desc);
    return LabelData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, null);
  };
  protoOf($serializer_9).si = function () {
    return this.c1z_1;
  };
  protoOf($serializer_9).eu = function () {
    var tmp0_cached = Companion_getInstance_16().b1z_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], BooleanSerializer_getInstance()];
  };
  var $serializer_instance_9;
  function $serializer_getInstance_9() {
    if ($serializer_instance_9 == null)
      new $serializer_9();
    return $serializer_instance_9;
  }
  function LabelData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_9().c1z_1);
    }
    LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this);
    return $this;
  }
  function LabelData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker) {
    return LabelData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, objectCreate(protoOf(LabelData)));
  }
  function LabelData() {
    Companion_getInstance_16();
    LabeledUIComponentData.call(this);
  }
  function Companion_17() {
    Companion_instance_17 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.e1z_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null, null, null];
  }
  var Companion_instance_17;
  function Companion_getInstance_17() {
    if (Companion_instance_17 == null)
      new Companion_17();
    return Companion_instance_17;
  }
  function $serializer_10() {
    $serializer_instance_10 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('RadioButtonData', this, 26);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('isWrapText', true);
    tmp0_serialDesc.pt('isSelected', true);
    tmp0_serialDesc.pt('group', true);
    this.f1z_1 = tmp0_serialDesc;
  }
  protoOf($serializer_10).g1z = function (encoder, value) {
    var tmp0_desc = this.f1z_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_17().e1z_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1u_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.p1u_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.p1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.q1u_1 === false)) {
      tmp1_output.in(tmp0_desc, 23, value.q1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !(value.f20_1 === false)) {
      tmp1_output.in(tmp0_desc, 24, value.f20_1);
    }
    if (tmp1_output.yn(tmp0_desc, 25) ? true : !(value.g20_1 === '')) {
      tmp1_output.qn(tmp0_desc, 25, value.g20_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_10).ti = function (encoder, value) {
    return this.g1z(encoder, value instanceof RadioButtonData ? value : THROW_CCE());
  };
  protoOf($serializer_10).ui = function (decoder) {
    var tmp0_desc = this.f1z_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_local24 = false;
    var tmp29_local25 = null;
    var tmp30_input = decoder.bm(tmp0_desc);
    var tmp31_cached = Companion_getInstance_17().e1z_1;
    if (tmp30_input.rm()) {
      tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp30_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp30_input.nm(tmp0_desc, 22, tmp31_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp30_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp30_input.dm(tmp0_desc, 24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
      tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
      tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp30_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp30_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp30_input.nm(tmp0_desc, 22, tmp31_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp30_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp30_input.dm(tmp0_desc, 24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          case 25:
            tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
            tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp30_input.cm(tmp0_desc);
    return RadioButtonData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, tmp29_local25, null);
  };
  protoOf($serializer_10).si = function () {
    return this.f1z_1;
  };
  protoOf($serializer_10).eu = function () {
    var tmp0_cached = Companion_getInstance_17().e1z_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_10;
  function $serializer_getInstance_10() {
    if ($serializer_instance_10 == null)
      new $serializer_10();
    return $serializer_instance_10;
  }
  function RadioButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_10().f1z_1);
    }
    LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this);
    if (0 === (seen0 & 16777216))
      $this.f20_1 = false;
    else
      $this.f20_1 = isSelected;
    if (0 === (seen0 & 33554432))
      $this.g20_1 = '';
    else
      $this.g20_1 = group;
    return $this;
  }
  function RadioButtonData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker) {
    return RadioButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker, objectCreate(protoOf(RadioButtonData)));
  }
  function RadioButtonData() {
    Companion_getInstance_17();
    LabeledUIComponentData.call(this);
    this.f20_1 = false;
    this.g20_1 = '';
  }
  function Companion_18() {
    Companion_instance_18 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.h20_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null, null, null];
  }
  var Companion_instance_18;
  function Companion_getInstance_18() {
    if (Companion_instance_18 == null)
      new Companion_18();
    return Companion_instance_18;
  }
  function $serializer_11() {
    $serializer_instance_11 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ToggleButtonData', this, 26);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('isWrapText', true);
    tmp0_serialDesc.pt('isSelected', true);
    tmp0_serialDesc.pt('group', true);
    this.i20_1 = tmp0_serialDesc;
  }
  protoOf($serializer_11).j20 = function (encoder, value) {
    var tmp0_desc = this.i20_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_18().h20_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1u_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.p1u_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.p1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.q1u_1 === false)) {
      tmp1_output.in(tmp0_desc, 23, value.q1u_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !(value.i21_1 === false)) {
      tmp1_output.in(tmp0_desc, 24, value.i21_1);
    }
    if (tmp1_output.yn(tmp0_desc, 25) ? true : !(value.j21_1 === '')) {
      tmp1_output.qn(tmp0_desc, 25, value.j21_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_11).ti = function (encoder, value) {
    return this.j20(encoder, value instanceof ToggleButtonData ? value : THROW_CCE());
  };
  protoOf($serializer_11).ui = function (decoder) {
    var tmp0_desc = this.i20_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_local24 = false;
    var tmp29_local25 = null;
    var tmp30_input = decoder.bm(tmp0_desc);
    var tmp31_cached = Companion_getInstance_18().h20_1;
    if (tmp30_input.rm()) {
      tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp30_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp30_input.nm(tmp0_desc, 22, tmp31_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp30_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp30_input.dm(tmp0_desc, 24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
      tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
      tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp30_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp30_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp30_input.nm(tmp0_desc, 22, tmp31_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp30_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp30_input.dm(tmp0_desc, 24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          case 25:
            tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
            tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp30_input.cm(tmp0_desc);
    return ToggleButtonData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, tmp29_local25, null);
  };
  protoOf($serializer_11).si = function () {
    return this.i20_1;
  };
  protoOf($serializer_11).eu = function () {
    var tmp0_cached = Companion_getInstance_18().h20_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), tmp0_cached[22], BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_11;
  function $serializer_getInstance_11() {
    if ($serializer_instance_11 == null)
      new $serializer_11();
    return $serializer_instance_11;
  }
  function ToggleButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_11().i20_1);
    }
    LabeledUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, serializationConstructorMarker, $this);
    if (0 === (seen0 & 16777216))
      $this.i21_1 = false;
    else
      $this.i21_1 = isSelected;
    if (0 === (seen0 & 33554432))
      $this.j21_1 = '';
    else
      $this.j21_1 = group;
    return $this;
  }
  function ToggleButtonData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker) {
    return ToggleButtonData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, alignment, isWrapText, isSelected, group, serializationConstructorMarker, objectCreate(protoOf(ToggleButtonData)));
  }
  function ToggleButtonData() {
    Companion_getInstance_18();
    LabeledUIComponentData.call(this);
    this.i21_1 = false;
    this.j21_1 = '';
  }
  function Companion_19() {
    Companion_instance_19 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.k21_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_19;
  function Companion_getInstance_19() {
    if (Companion_instance_19 == null)
      new Companion_19();
    return Companion_instance_19;
  }
  function $serializer_12() {
    $serializer_instance_12 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ColorPickerData', this, 22);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('selectedColor', true);
    this.l21_1 = tmp0_serialDesc;
  }
  protoOf($serializer_12).m21 = function (encoder, value) {
    var tmp0_desc = this.l21_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_19().k21_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.i22_1 === '#000000')) {
      tmp1_output.qn(tmp0_desc, 21, value.i22_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_12).ti = function (encoder, value) {
    return this.m21(encoder, value instanceof ColorPickerData ? value : THROW_CCE());
  };
  protoOf($serializer_12).ui = function (decoder) {
    var tmp0_desc = this.l21_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_input = decoder.bm(tmp0_desc);
    var tmp27_cached = Companion_getInstance_19().k21_1;
    if (tmp26_input.rm()) {
      tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp26_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp26_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp26_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp26_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp26_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp26_input.cm(tmp0_desc);
    return ColorPickerData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, null);
  };
  protoOf($serializer_12).si = function () {
    return this.l21_1;
  };
  protoOf($serializer_12).eu = function () {
    var tmp0_cached = Companion_getInstance_19().k21_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance()];
  };
  var $serializer_instance_12;
  function $serializer_getInstance_12() {
    if ($serializer_instance_12 == null)
      new $serializer_12();
    return $serializer_instance_12;
  }
  function ColorPickerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, selectedColor, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_12().l21_1);
    }
    UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.i22_1 = '#000000';
    else
      $this.i22_1 = selectedColor;
    return $this;
  }
  function ColorPickerData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, selectedColor, serializationConstructorMarker) {
    return ColorPickerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, selectedColor, serializationConstructorMarker, objectCreate(protoOf(ColorPickerData)));
  }
  function ColorPickerData() {
    Companion_getInstance_19();
    UIComponentData.call(this);
    this.i22_1 = '#000000';
  }
  function Companion_20() {
    Companion_instance_20 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.j22_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_20;
  function Companion_getInstance_20() {
    if (Companion_instance_20 == null)
      new Companion_20();
    return Companion_instance_20;
  }
  function $serializer_13() {
    $serializer_instance_13 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('PasswordFieldData', this, 23);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('prompt', true);
    this.k22_1 = tmp0_serialDesc;
  }
  protoOf($serializer_13).l22 = function (encoder, value) {
    var tmp0_desc = this.k22_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_20().j22_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1v_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1v_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.p1v_1 === '')) {
      tmp1_output.qn(tmp0_desc, 22, value.p1v_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_13).ti = function (encoder, value) {
    return this.l22(encoder, value instanceof PasswordFieldData ? value : THROW_CCE());
  };
  protoOf($serializer_13).ui = function (decoder) {
    var tmp0_desc = this.k22_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_input = decoder.bm(tmp0_desc);
    var tmp28_cached = Companion_getInstance_20().j22_1;
    if (tmp27_input.rm()) {
      tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp27_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp27_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp27_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp27_input.cm(tmp0_desc);
    return PasswordFieldData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, null);
  };
  protoOf($serializer_13).si = function () {
    return this.k22_1;
  };
  protoOf($serializer_13).eu = function () {
    var tmp0_cached = Companion_getInstance_20().j22_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_13;
  function $serializer_getInstance_13() {
    if ($serializer_instance_13 == null)
      new $serializer_13();
    return $serializer_instance_13;
  }
  function PasswordFieldData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_13().k22_1);
    }
    TextInputUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this);
    return $this;
  }
  function PasswordFieldData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker) {
    return PasswordFieldData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, objectCreate(protoOf(PasswordFieldData)));
  }
  function PasswordFieldData() {
    Companion_getInstance_20();
    TextInputUIComponentData.call(this);
  }
  function Companion_21() {
    Companion_instance_21 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.m22_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_21;
  function Companion_getInstance_21() {
    if (Companion_instance_21 == null)
      new Companion_21();
    return Companion_instance_21;
  }
  function $serializer_14() {
    $serializer_instance_14 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ProgressBarData', this, 23);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('progress', true);
    tmp0_serialDesc.pt('barColor', true);
    this.n22_1 = tmp0_serialDesc;
  }
  protoOf($serializer_14).o22 = function (encoder, value) {
    var tmp0_desc = this.n22_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_21().m22_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !equals(value.k23_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 21, value.k23_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.l23_1 === '#000000')) {
      tmp1_output.qn(tmp0_desc, 22, value.l23_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_14).ti = function (encoder, value) {
    return this.o22(encoder, value instanceof ProgressBarData ? value : THROW_CCE());
  };
  protoOf($serializer_14).ui = function (decoder) {
    var tmp0_desc = this.n22_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = 0.0;
    var tmp26_local22 = null;
    var tmp27_input = decoder.bm(tmp0_desc);
    var tmp28_cached = Companion_getInstance_21().m22_1;
    if (tmp27_input.rm()) {
      tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp27_input.jm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp27_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp27_input.jm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp27_input.cm(tmp0_desc);
    return ProgressBarData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, null);
  };
  protoOf($serializer_14).si = function () {
    return this.n22_1;
  };
  protoOf($serializer_14).eu = function () {
    var tmp0_cached = Companion_getInstance_21().m22_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), DoubleSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_14;
  function $serializer_getInstance_14() {
    if ($serializer_instance_14 == null)
      new $serializer_14();
    return $serializer_instance_14;
  }
  function ProgressBarData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, progress, barColor, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_14().n22_1);
    }
    UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.k23_1 = 0.0;
    else
      $this.k23_1 = progress;
    if (0 === (seen0 & 4194304))
      $this.l23_1 = '#000000';
    else
      $this.l23_1 = barColor;
    return $this;
  }
  function ProgressBarData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, progress, barColor, serializationConstructorMarker) {
    return ProgressBarData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, progress, barColor, serializationConstructorMarker, objectCreate(protoOf(ProgressBarData)));
  }
  function ProgressBarData() {
    Companion_getInstance_21();
    UIComponentData.call(this);
    this.k23_1 = 0.0;
    this.l23_1 = '#000000';
  }
  function Companion_22() {
    Companion_instance_22 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.m23_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_22;
  function Companion_getInstance_22() {
    if (Companion_instance_22 == null)
      new Companion_22();
    return Companion_instance_22;
  }
  function $serializer_15() {
    $serializer_instance_15 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('TextAreaData', this, 23);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('prompt', true);
    this.n23_1 = tmp0_serialDesc;
  }
  protoOf($serializer_15).o23 = function (encoder, value) {
    var tmp0_desc = this.n23_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_22().m23_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1v_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1v_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.p1v_1 === '')) {
      tmp1_output.qn(tmp0_desc, 22, value.p1v_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_15).ti = function (encoder, value) {
    return this.o23(encoder, value instanceof TextAreaData ? value : THROW_CCE());
  };
  protoOf($serializer_15).ui = function (decoder) {
    var tmp0_desc = this.n23_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_input = decoder.bm(tmp0_desc);
    var tmp28_cached = Companion_getInstance_22().m23_1;
    if (tmp27_input.rm()) {
      tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp27_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp27_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp27_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp27_input.cm(tmp0_desc);
    return TextAreaData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, null);
  };
  protoOf($serializer_15).si = function () {
    return this.n23_1;
  };
  protoOf($serializer_15).eu = function () {
    var tmp0_cached = Companion_getInstance_22().m23_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_15;
  function $serializer_getInstance_15() {
    if ($serializer_instance_15 == null)
      new $serializer_15();
    return $serializer_instance_15;
  }
  function TextAreaData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_15().n23_1);
    }
    TextInputUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this);
    return $this;
  }
  function TextAreaData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker) {
    return TextAreaData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, objectCreate(protoOf(TextAreaData)));
  }
  function TextAreaData() {
    Companion_getInstance_22();
    TextInputUIComponentData.call(this);
  }
  function Companion_23() {
    Companion_instance_23 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.p23_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_23;
  function Companion_getInstance_23() {
    if (Companion_instance_23 == null)
      new Companion_23();
    return Companion_instance_23;
  }
  function $serializer_16() {
    $serializer_instance_16 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('TextFieldData', this, 23);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('prompt', true);
    this.q23_1 = tmp0_serialDesc;
  }
  protoOf($serializer_16).r23 = function (encoder, value) {
    var tmp0_desc = this.q23_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_23().p23_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.o1v_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.o1v_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.p1v_1 === '')) {
      tmp1_output.qn(tmp0_desc, 22, value.p1v_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_16).ti = function (encoder, value) {
    return this.r23(encoder, value instanceof TextFieldData ? value : THROW_CCE());
  };
  protoOf($serializer_16).ui = function (decoder) {
    var tmp0_desc = this.q23_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_input = decoder.bm(tmp0_desc);
    var tmp28_cached = Companion_getInstance_23().p23_1;
    if (tmp27_input.rm()) {
      tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp27_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp27_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp27_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp27_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp27_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp27_input.cm(tmp0_desc);
    return TextFieldData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, null);
  };
  protoOf($serializer_16).si = function () {
    return this.q23_1;
  };
  protoOf($serializer_16).eu = function () {
    var tmp0_cached = Companion_getInstance_23().p23_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), StringSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_16;
  function $serializer_getInstance_16() {
    if ($serializer_instance_16 == null)
      new $serializer_16();
    return $serializer_instance_16;
  }
  function TextFieldData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_16().q23_1);
    }
    TextInputUIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, $this);
    return $this;
  }
  function TextFieldData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker) {
    return TextFieldData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, text, prompt, serializationConstructorMarker, objectCreate(protoOf(TextFieldData)));
  }
  function TextFieldData() {
    Companion_getInstance_23();
    TextInputUIComponentData.call(this);
  }
  function _get_$cachedSerializer__te6jhj_6($this) {
    return $this.t23_1.u1();
  }
  function StructuredDataViewData$Companion$_anonymous__ga2p9h() {
    var tmp = getKClass(StructuredDataViewData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_24() {
    Companion_instance_24 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.s23_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(StringSerializer_getInstance()), null, null, new ArrayListSerializer(IntSerializer_getInstance())];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.t23_1 = lazy(tmp_1, StructuredDataViewData$Companion$_anonymous__ga2p9h);
  }
  protoOf(Companion_24).g16 = function () {
    return _get_$cachedSerializer__te6jhj_6(this);
  };
  protoOf(Companion_24).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_24;
  function Companion_getInstance_24() {
    if (Companion_instance_24 == null)
      new Companion_24();
    return Companion_instance_24;
  }
  function StructuredDataViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, serializationConstructorMarker, $this) {
    UIComponentData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.p24_1 = emptyList();
    else
      $this.p24_1 = items;
    if (0 === (seen0 & 4194304))
      $this.q24_1 = '';
    else
      $this.q24_1 = selectionMode;
    if (0 === (seen0 & 8388608))
      $this.r24_1 = '#FF0000';
    else
      $this.r24_1 = selectionBackground;
    if (0 === (seen0 & 16777216))
      $this.s24_1 = emptyList();
    else
      $this.s24_1 = selectedItems;
    return $this;
  }
  function StructuredDataViewData() {
    Companion_getInstance_24();
    UIComponentData.call(this);
    this.p24_1 = emptyList();
    this.q24_1 = '';
    this.r24_1 = '#FF0000';
    this.s24_1 = emptyList();
  }
  function Companion_25() {
    Companion_instance_25 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.t24_1 = [null, null, null, new ArrayListSerializer(StringSerializer_getInstance())];
  }
  var Companion_instance_25;
  function Companion_getInstance_25() {
    if (Companion_instance_25 == null)
      new Companion_25();
    return Companion_instance_25;
  }
  function $serializer_17() {
    $serializer_instance_17 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('TableColumnData', this, 4);
    tmp0_serialDesc.pt('title', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('items', true);
    this.u24_1 = tmp0_serialDesc;
  }
  protoOf($serializer_17).v24 = function (encoder, value) {
    var tmp0_desc = this.u24_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_25().t24_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.w24_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.w24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.x24_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.x24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !value.y24_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 2, $serializer_getInstance_37(), value.y24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !equals(value.z24_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 3, tmp2_cached[3], value.z24_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_17).ti = function (encoder, value) {
    return this.v24(encoder, value instanceof TableColumnData ? value : THROW_CCE());
  };
  protoOf($serializer_17).ui = function (decoder) {
    var tmp0_desc = this.u24_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_input = decoder.bm(tmp0_desc);
    var tmp9_cached = Companion_getInstance_25().t24_1;
    if (tmp8_input.rm()) {
      tmp4_local0 = tmp8_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp8_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp8_input.nm(tmp0_desc, 2, $serializer_getInstance_37(), tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp8_input.nm(tmp0_desc, 3, tmp9_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp8_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp8_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp8_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp8_input.nm(tmp0_desc, 2, $serializer_getInstance_37(), tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp8_input.nm(tmp0_desc, 3, tmp9_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp8_input.cm(tmp0_desc);
    return TableColumnData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, null);
  };
  protoOf($serializer_17).si = function () {
    return this.u24_1;
  };
  protoOf($serializer_17).eu = function () {
    var tmp0_cached = Companion_getInstance_25().t24_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), $serializer_getInstance_37(), tmp0_cached[3]];
  };
  var $serializer_instance_17;
  function $serializer_getInstance_17() {
    if ($serializer_instance_17 == null)
      new $serializer_17();
    return $serializer_instance_17;
  }
  function TableColumnData_init_$Init$(seen0, title, width, font, items, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_17().u24_1);
    }
    if (0 === (seen0 & 1))
      $this.w24_1 = '';
    else
      $this.w24_1 = title;
    if (0 === (seen0 & 2))
      $this.x24_1 = 0;
    else
      $this.x24_1 = width;
    if (0 === (seen0 & 4))
      $this.y24_1 = new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal');
    else
      $this.y24_1 = font;
    if (0 === (seen0 & 8))
      $this.z24_1 = emptyList();
    else
      $this.z24_1 = items;
    return $this;
  }
  function TableColumnData_init_$Create$(seen0, title, width, font, items, serializationConstructorMarker) {
    return TableColumnData_init_$Init$(seen0, title, width, font, items, serializationConstructorMarker, objectCreate(protoOf(TableColumnData)));
  }
  function TableColumnData() {
    Companion_getInstance_25();
    this.w24_1 = '';
    this.x24_1 = 0;
    this.y24_1 = new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal');
    this.z24_1 = emptyList();
  }
  function Companion_26() {
    Companion_instance_26 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.a25_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(StringSerializer_getInstance()), null, null, new ArrayListSerializer(IntSerializer_getInstance()), null];
  }
  var Companion_instance_26;
  function Companion_getInstance_26() {
    if (Companion_instance_26 == null)
      new Companion_26();
    return Companion_instance_26;
  }
  function $serializer_18() {
    $serializer_instance_18 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ListViewData', this, 26);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('items', true);
    tmp0_serialDesc.pt('selectionMode', true);
    tmp0_serialDesc.pt('selectionBackground', true);
    tmp0_serialDesc.pt('selectedItems', true);
    tmp0_serialDesc.pt('orientation', true);
    this.b25_1 = tmp0_serialDesc;
  }
  protoOf($serializer_18).c25 = function (encoder, value) {
    var tmp0_desc = this.b25_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_26().a25_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !equals(value.p24_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 21, tmp2_cached[21], value.p24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.q24_1 === '')) {
      tmp1_output.qn(tmp0_desc, 22, value.q24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.r24_1 === '#FF0000')) {
      tmp1_output.qn(tmp0_desc, 23, value.r24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !equals(value.s24_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 24, tmp2_cached[24], value.s24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 25) ? true : !(value.c26_1 === '')) {
      tmp1_output.qn(tmp0_desc, 25, value.c26_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_18).ti = function (encoder, value) {
    return this.c25(encoder, value instanceof ListViewData ? value : THROW_CCE());
  };
  protoOf($serializer_18).ui = function (decoder) {
    var tmp0_desc = this.b25_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = null;
    var tmp28_local24 = null;
    var tmp29_local25 = null;
    var tmp30_input = decoder.bm(tmp0_desc);
    var tmp31_cached = Companion_getInstance_26().a25_1;
    if (tmp30_input.rm()) {
      tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp30_input.nm(tmp0_desc, 21, tmp31_cached[21], tmp25_local21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp30_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp30_input.lm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp30_input.nm(tmp0_desc, 24, tmp31_cached[24], tmp28_local24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
      tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
      tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp30_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp30_input.nm(tmp0_desc, 21, tmp31_cached[21], tmp25_local21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp30_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp30_input.lm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp30_input.nm(tmp0_desc, 24, tmp31_cached[24], tmp28_local24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          case 25:
            tmp29_local25 = tmp30_input.lm(tmp0_desc, 25);
            tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp30_input.cm(tmp0_desc);
    return ListViewData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, tmp29_local25, null);
  };
  protoOf($serializer_18).si = function () {
    return this.b25_1;
  };
  protoOf($serializer_18).eu = function () {
    var tmp0_cached = Companion_getInstance_26().a25_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), tmp0_cached[21], StringSerializer_getInstance(), StringSerializer_getInstance(), tmp0_cached[24], StringSerializer_getInstance()];
  };
  var $serializer_instance_18;
  function $serializer_getInstance_18() {
    if ($serializer_instance_18 == null)
      new $serializer_18();
    return $serializer_instance_18;
  }
  function ListViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, orientation, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_18().b25_1);
    }
    StructuredDataViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, serializationConstructorMarker, $this);
    if (0 === (seen0 & 33554432))
      $this.c26_1 = '';
    else
      $this.c26_1 = orientation;
    return $this;
  }
  function ListViewData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, orientation, serializationConstructorMarker) {
    return ListViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, orientation, serializationConstructorMarker, objectCreate(protoOf(ListViewData)));
  }
  function ListViewData() {
    Companion_getInstance_26();
    StructuredDataViewData.call(this);
    this.c26_1 = '';
  }
  function Companion_27() {
    Companion_instance_27 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.d26_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(StringSerializer_getInstance()), null, null, new ArrayListSerializer(IntSerializer_getInstance()), new ArrayListSerializer($serializer_getInstance_17())];
  }
  var Companion_instance_27;
  function Companion_getInstance_27() {
    if (Companion_instance_27 == null)
      new Companion_27();
    return Companion_instance_27;
  }
  function $serializer_19() {
    $serializer_instance_19 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('TableViewData', this, 26);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('items', true);
    tmp0_serialDesc.pt('selectionMode', true);
    tmp0_serialDesc.pt('selectionBackground', true);
    tmp0_serialDesc.pt('selectedItems', true);
    tmp0_serialDesc.pt('columns', true);
    this.e26_1 = tmp0_serialDesc;
  }
  protoOf($serializer_19).f26 = function (encoder, value) {
    var tmp0_desc = this.e26_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_27().d26_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !value.q1t_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 20, $serializer_getInstance_37(), value.q1t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !equals(value.p24_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 21, tmp2_cached[21], value.p24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.q24_1 === '')) {
      tmp1_output.qn(tmp0_desc, 22, value.q24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.r24_1 === '#FF0000')) {
      tmp1_output.qn(tmp0_desc, 23, value.r24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !equals(value.s24_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 24, tmp2_cached[24], value.s24_1);
    }
    if (tmp1_output.yn(tmp0_desc, 25) ? true : !equals(value.f27_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 25, tmp2_cached[25], value.f27_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_19).ti = function (encoder, value) {
    return this.f26(encoder, value instanceof TableViewData ? value : THROW_CCE());
  };
  protoOf($serializer_19).ui = function (decoder) {
    var tmp0_desc = this.e26_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = null;
    var tmp28_local24 = null;
    var tmp29_local25 = null;
    var tmp30_input = decoder.bm(tmp0_desc);
    var tmp31_cached = Companion_getInstance_27().d26_1;
    if (tmp30_input.rm()) {
      tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp30_input.nm(tmp0_desc, 21, tmp31_cached[21], tmp25_local21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp30_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp30_input.lm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp30_input.nm(tmp0_desc, 24, tmp31_cached[24], tmp28_local24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
      tmp29_local25 = tmp30_input.nm(tmp0_desc, 25, tmp31_cached[25], tmp29_local25);
      tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp30_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp30_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp30_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp30_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp30_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp30_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp30_input.pm(tmp0_desc, 5, tmp31_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp30_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp30_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp30_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp30_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp30_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp30_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp30_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp30_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp30_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp30_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp30_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp30_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp30_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp30_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp30_input.nm(tmp0_desc, 20, $serializer_getInstance_37(), tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp30_input.nm(tmp0_desc, 21, tmp31_cached[21], tmp25_local21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp30_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp30_input.lm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp30_input.nm(tmp0_desc, 24, tmp31_cached[24], tmp28_local24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          case 25:
            tmp29_local25 = tmp30_input.nm(tmp0_desc, 25, tmp31_cached[25], tmp29_local25);
            tmp3_bitMask0 = tmp3_bitMask0 | 33554432;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp30_input.cm(tmp0_desc);
    return TableViewData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, tmp29_local25, null);
  };
  protoOf($serializer_19).si = function () {
    return this.e26_1;
  };
  protoOf($serializer_19).eu = function () {
    var tmp0_cached = Companion_getInstance_27().d26_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_37(), tmp0_cached[21], StringSerializer_getInstance(), StringSerializer_getInstance(), tmp0_cached[24], tmp0_cached[25]];
  };
  var $serializer_instance_19;
  function $serializer_getInstance_19() {
    if ($serializer_instance_19 == null)
      new $serializer_19();
    return $serializer_instance_19;
  }
  function TableViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, columns, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_19().e26_1);
    }
    StructuredDataViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, serializationConstructorMarker, $this);
    if (0 === (seen0 & 33554432))
      $this.f27_1 = emptyList();
    else
      $this.f27_1 = columns;
    return $this;
  }
  function TableViewData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, columns, serializationConstructorMarker) {
    return TableViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, font, items, selectionMode, selectionBackground, selectedItems, columns, serializationConstructorMarker, objectCreate(protoOf(TableViewData)));
  }
  function TableViewData() {
    Companion_getInstance_27();
    StructuredDataViewData.call(this);
    this.f27_1 = emptyList();
  }
  function _get_$cachedSerializer__te6jhj_7($this) {
    return $this.h27_1.u1();
  }
  function LayoutViewData$Companion$_anonymous__df7lka() {
    var tmp = getKClass(LayoutViewData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_28() {
    Companion_instance_28 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.g27_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.h27_1 = lazy(tmp_1, LayoutViewData$Companion$_anonymous__df7lka);
  }
  protoOf(Companion_28).g16 = function () {
    return _get_$cachedSerializer__te6jhj_7(this);
  };
  protoOf(Companion_28).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_28;
  function Companion_getInstance_28() {
    if (Companion_instance_28 == null)
      new Companion_28();
    return Companion_instance_28;
  }
  function LayoutViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this) {
    ComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    return $this;
  }
  function LayoutViewData() {
    Companion_getInstance_28();
    ComponentViewData.call(this);
  }
  function Companion_29() {
    Companion_instance_29 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.i27_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_8().g16())];
  }
  var Companion_instance_29;
  function Companion_getInstance_29() {
    if (Companion_instance_29 == null)
      new Companion_29();
    return Companion_instance_29;
  }
  function $serializer_20() {
    $serializer_instance_20 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('PaneData', this, 21);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('components', true);
    this.j27_1 = tmp0_serialDesc;
  }
  protoOf($serializer_20).k27 = function (encoder, value) {
    var tmp0_desc = this.j27_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_29().i27_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !equals(value.f28_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 20, tmp2_cached[20], value.f28_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_20).ti = function (encoder, value) {
    return this.k27(encoder, value instanceof PaneData ? value : THROW_CCE());
  };
  protoOf($serializer_20).ui = function (decoder) {
    var tmp0_desc = this.j27_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_input = decoder.bm(tmp0_desc);
    var tmp26_cached = Companion_getInstance_29().i27_1;
    if (tmp25_input.rm()) {
      tmp4_local0 = tmp25_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp25_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp25_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp25_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp25_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp25_input.pm(tmp0_desc, 5, tmp26_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp25_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp25_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp25_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp25_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp25_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp25_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp25_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp25_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp25_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp25_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp25_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp25_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp25_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp25_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp25_input.nm(tmp0_desc, 20, tmp26_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp25_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp25_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp25_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp25_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp25_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp25_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp25_input.pm(tmp0_desc, 5, tmp26_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp25_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp25_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp25_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp25_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp25_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp25_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp25_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp25_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp25_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp25_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp25_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp25_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp25_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp25_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp25_input.nm(tmp0_desc, 20, tmp26_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp25_input.cm(tmp0_desc);
    return PaneData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, null);
  };
  protoOf($serializer_20).si = function () {
    return this.j27_1;
  };
  protoOf($serializer_20).eu = function () {
    var tmp0_cached = Companion_getInstance_29().i27_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[20]];
  };
  var $serializer_instance_20;
  function $serializer_getInstance_20() {
    if ($serializer_instance_20 == null)
      new $serializer_20();
    return $serializer_instance_20;
  }
  function PaneData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_20().j27_1);
    }
    LayoutViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.f28_1 = emptyList();
    else
      $this.f28_1 = components;
    return $this;
  }
  function PaneData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker) {
    return PaneData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, objectCreate(protoOf(PaneData)));
  }
  function PaneData() {
    Companion_getInstance_29();
    LayoutViewData.call(this);
    this.f28_1 = emptyList();
  }
  function Companion_30() {
    Companion_instance_30 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.g28_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer($serializer_getInstance_22())];
  }
  var Companion_instance_30;
  function Companion_getInstance_30() {
    if (Companion_instance_30 == null)
      new Companion_30();
    return Companion_instance_30;
  }
  function $serializer_21() {
    $serializer_instance_21 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('GridPaneData', this, 24);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('columns', true);
    tmp0_serialDesc.pt('rows', true);
    tmp0_serialDesc.pt('spacing', true);
    tmp0_serialDesc.pt('grid', true);
    this.h28_1 = tmp0_serialDesc;
  }
  protoOf($serializer_21).i28 = function (encoder, value) {
    var tmp0_desc = this.h28_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_30().g28_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !(value.d29_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 20, value.d29_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.e29_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 21, value.e29_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.f29_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 22, value.f29_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !equals(value.g29_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 23, tmp2_cached[23], value.g29_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_21).ti = function (encoder, value) {
    return this.i28(encoder, value instanceof GridPaneData ? value : THROW_CCE());
  };
  protoOf($serializer_21).ui = function (decoder) {
    var tmp0_desc = this.h28_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = 0;
    var tmp25_local21 = 0;
    var tmp26_local22 = 0;
    var tmp27_local23 = null;
    var tmp28_input = decoder.bm(tmp0_desc);
    var tmp29_cached = Companion_getInstance_30().g28_1;
    if (tmp28_input.rm()) {
      tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp28_input.gm(tmp0_desc, 20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp28_input.gm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp28_input.gm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp28_input.nm(tmp0_desc, 23, tmp29_cached[23], tmp27_local23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp28_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp28_input.gm(tmp0_desc, 20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp28_input.gm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp28_input.gm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp28_input.nm(tmp0_desc, 23, tmp29_cached[23], tmp27_local23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp28_input.cm(tmp0_desc);
    return GridPaneData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, null);
  };
  protoOf($serializer_21).si = function () {
    return this.h28_1;
  };
  protoOf($serializer_21).eu = function () {
    var tmp0_cached = Companion_getInstance_30().g28_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), tmp0_cached[23]];
  };
  var $serializer_instance_21;
  function $serializer_getInstance_21() {
    if ($serializer_instance_21 == null)
      new $serializer_21();
    return $serializer_instance_21;
  }
  function GridPaneData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, columns, rows, spacing, grid, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_21().h28_1);
    }
    LayoutViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.d29_1 = 0;
    else
      $this.d29_1 = columns;
    if (0 === (seen0 & 2097152))
      $this.e29_1 = 0;
    else
      $this.e29_1 = rows;
    if (0 === (seen0 & 4194304))
      $this.f29_1 = 0;
    else
      $this.f29_1 = spacing;
    if (0 === (seen0 & 8388608))
      $this.g29_1 = emptyList();
    else
      $this.g29_1 = grid;
    return $this;
  }
  function GridPaneData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, columns, rows, spacing, grid, serializationConstructorMarker) {
    return GridPaneData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, columns, rows, spacing, grid, serializationConstructorMarker, objectCreate(protoOf(GridPaneData)));
  }
  function GridPaneData() {
    Companion_getInstance_30();
    LayoutViewData.call(this);
    this.d29_1 = 0;
    this.e29_1 = 0;
    this.f29_1 = 0;
    this.g29_1 = emptyList();
  }
  function Companion_31() {
    Companion_instance_31 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.h29_1 = [null, null, Companion_getInstance_8().g16(), new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance())];
  }
  var Companion_instance_31;
  function Companion_getInstance_31() {
    if (Companion_instance_31 == null)
      new Companion_31();
    return Companion_instance_31;
  }
  function $serializer_22() {
    $serializer_instance_22 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('GridElementData', this, 4);
    tmp0_serialDesc.pt('column', false);
    tmp0_serialDesc.pt('row', false);
    tmp0_serialDesc.pt('component', false);
    tmp0_serialDesc.pt('alignment', false);
    this.i29_1 = tmp0_serialDesc;
  }
  protoOf($serializer_22).j29 = function (encoder, value) {
    var tmp0_desc = this.i29_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_31().h29_1;
    tmp1_output.ln(tmp0_desc, 0, value.k29_1);
    tmp1_output.ln(tmp0_desc, 1, value.l29_1);
    tmp1_output.un(tmp0_desc, 2, tmp2_cached[2], value.m29_1);
    tmp1_output.sn(tmp0_desc, 3, tmp2_cached[3], value.n29_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_22).ti = function (encoder, value) {
    return this.j29(encoder, value instanceof GridElementData ? value : THROW_CCE());
  };
  protoOf($serializer_22).ui = function (decoder) {
    var tmp0_desc = this.i29_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = 0;
    var tmp5_local1 = 0;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_input = decoder.bm(tmp0_desc);
    var tmp9_cached = Companion_getInstance_31().h29_1;
    if (tmp8_input.rm()) {
      tmp4_local0 = tmp8_input.gm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp8_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp8_input.pm(tmp0_desc, 2, tmp9_cached[2], tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp8_input.nm(tmp0_desc, 3, tmp9_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp8_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp8_input.gm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp8_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp8_input.pm(tmp0_desc, 2, tmp9_cached[2], tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp8_input.nm(tmp0_desc, 3, tmp9_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp8_input.cm(tmp0_desc);
    return GridElementData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, null);
  };
  protoOf($serializer_22).si = function () {
    return this.i29_1;
  };
  protoOf($serializer_22).eu = function () {
    var tmp0_cached = Companion_getInstance_31().h29_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[2]), tmp0_cached[3]];
  };
  var $serializer_instance_22;
  function $serializer_getInstance_22() {
    if ($serializer_instance_22 == null)
      new $serializer_22();
    return $serializer_instance_22;
  }
  function GridElementData_init_$Init$(seen0, column, row, component, alignment, serializationConstructorMarker, $this) {
    if (!(15 === (15 & seen0))) {
      throwMissingFieldException(seen0, 15, $serializer_getInstance_22().i29_1);
    }
    $this.k29_1 = column;
    $this.l29_1 = row;
    $this.m29_1 = component;
    $this.n29_1 = alignment;
    return $this;
  }
  function GridElementData_init_$Create$(seen0, column, row, component, alignment, serializationConstructorMarker) {
    return GridElementData_init_$Init$(seen0, column, row, component, alignment, serializationConstructorMarker, objectCreate(protoOf(GridElementData)));
  }
  function GridElementData() {
  }
  function Companion_32() {
    Companion_instance_32 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.o29_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, Companion_getInstance_28().g16(), null, null, null, null];
  }
  var Companion_instance_32;
  function Companion_getInstance_32() {
    if (Companion_instance_32 == null)
      new Companion_32();
    return Companion_instance_32;
  }
  function $serializer_23() {
    $serializer_instance_23 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('CameraPaneData', this, 25);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('target', true);
    tmp0_serialDesc.pt('interactive', true);
    tmp0_serialDesc.pt('panButton', true);
    tmp0_serialDesc.pt('limitBounds', true);
    tmp0_serialDesc.pt('internalPanData', true);
    this.p29_1 = tmp0_serialDesc;
  }
  protoOf($serializer_23).q29 = function (encoder, value) {
    var tmp0_desc = this.p29_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_32().o29_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !(value.l2a_1 == null)) {
      tmp1_output.un(tmp0_desc, 20, tmp2_cached[20], value.l2a_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.m2a_1 === false)) {
      tmp1_output.in(tmp0_desc, 21, value.m2a_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.n2a_1 === 'left_button')) {
      tmp1_output.qn(tmp0_desc, 22, value.n2a_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.o2a_1 === true)) {
      tmp1_output.in(tmp0_desc, 23, value.o2a_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !value.p2a_1.equals(new InternalCameraPanData())) {
      tmp1_output.sn(tmp0_desc, 24, $serializer_getInstance_58(), value.p2a_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_23).ti = function (encoder, value) {
    return this.q29(encoder, value instanceof CameraPaneData ? value : THROW_CCE());
  };
  protoOf($serializer_23).ui = function (decoder) {
    var tmp0_desc = this.p29_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = false;
    var tmp26_local22 = null;
    var tmp27_local23 = false;
    var tmp28_local24 = null;
    var tmp29_input = decoder.bm(tmp0_desc);
    var tmp30_cached = Companion_getInstance_32().o29_1;
    if (tmp29_input.rm()) {
      tmp4_local0 = tmp29_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp29_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp29_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp29_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp29_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp29_input.pm(tmp0_desc, 5, tmp30_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp29_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp29_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp29_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp29_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp29_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp29_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp29_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp29_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp29_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp29_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp29_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp29_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp29_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp29_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp29_input.pm(tmp0_desc, 20, tmp30_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp29_input.dm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp29_input.lm(tmp0_desc, 22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp29_input.dm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp29_input.nm(tmp0_desc, 24, $serializer_getInstance_58(), tmp28_local24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp29_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp29_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp29_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp29_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp29_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp29_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp29_input.pm(tmp0_desc, 5, tmp30_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp29_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp29_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp29_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp29_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp29_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp29_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp29_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp29_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp29_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp29_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp29_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp29_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp29_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp29_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp29_input.pm(tmp0_desc, 20, tmp30_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp29_input.dm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp29_input.lm(tmp0_desc, 22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp29_input.dm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp29_input.nm(tmp0_desc, 24, $serializer_getInstance_58(), tmp28_local24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp29_input.cm(tmp0_desc);
    return CameraPaneData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, null);
  };
  protoOf($serializer_23).si = function () {
    return this.p29_1;
  };
  protoOf($serializer_23).eu = function () {
    var tmp0_cached = Companion_getInstance_32().o29_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[20]), BooleanSerializer_getInstance(), StringSerializer_getInstance(), BooleanSerializer_getInstance(), $serializer_getInstance_58()];
  };
  var $serializer_instance_23;
  function $serializer_getInstance_23() {
    if ($serializer_instance_23 == null)
      new $serializer_23();
    return $serializer_instance_23;
  }
  function CameraPaneData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, target, interactive, panButton, limitBounds, internalPanData, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_23().p29_1);
    }
    ComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.l2a_1 = null;
    else
      $this.l2a_1 = target;
    if (0 === (seen0 & 2097152))
      $this.m2a_1 = false;
    else
      $this.m2a_1 = interactive;
    if (0 === (seen0 & 4194304))
      $this.n2a_1 = 'left_button';
    else
      $this.n2a_1 = panButton;
    if (0 === (seen0 & 8388608))
      $this.o2a_1 = true;
    else
      $this.o2a_1 = limitBounds;
    if (0 === (seen0 & 16777216))
      $this.p2a_1 = new InternalCameraPanData();
    else
      $this.p2a_1 = internalPanData;
    return $this;
  }
  function CameraPaneData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, target, interactive, panButton, limitBounds, internalPanData, serializationConstructorMarker) {
    return CameraPaneData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, target, interactive, panButton, limitBounds, internalPanData, serializationConstructorMarker, objectCreate(protoOf(CameraPaneData)));
  }
  function CameraPaneData() {
    Companion_getInstance_32();
    ComponentViewData.call(this);
    this.l2a_1 = null;
    this.m2a_1 = false;
    this.n2a_1 = 'left_button';
    this.o2a_1 = true;
    this.p2a_1 = new InternalCameraPanData();
  }
  function _get_$cachedSerializer__te6jhj_8($this) {
    return $this.r2a_1.u1();
  }
  function GameComponentViewData$Companion$_anonymous__lcpdsl() {
    var tmp = getKClass(GameComponentViewData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_33() {
    Companion_instance_33 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.q2a_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.r2a_1 = lazy(tmp_1, GameComponentViewData$Companion$_anonymous__lcpdsl);
  }
  protoOf(Companion_33).g16 = function () {
    return _get_$cachedSerializer__te6jhj_8(this);
  };
  protoOf(Companion_33).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_33;
  function Companion_getInstance_33() {
    if (Companion_instance_33 == null)
      new Companion_33();
    return Companion_instance_33;
  }
  function GameComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this) {
    ComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    return $this;
  }
  function GameComponentViewData() {
    Companion_getInstance_33();
    ComponentViewData.call(this);
  }
  function Companion_34() {
    Companion_instance_34 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.s2a_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, Companion_getInstance_44().g16(), Companion_getInstance_44().g16(), Companion_getInstance_44().g16()];
  }
  var Companion_instance_34;
  function Companion_getInstance_34() {
    if (Companion_instance_34 == null)
      new Companion_34();
    return Companion_instance_34;
  }
  function $serializer_24() {
    $serializer_instance_24 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('CardViewData', this, 23);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('front', true);
    tmp0_serialDesc.pt('back', true);
    tmp0_serialDesc.pt('currentVisual', true);
    this.t2a_1 = tmp0_serialDesc;
  }
  protoOf($serializer_24).u2a = function (encoder, value) {
    var tmp0_desc = this.t2a_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_34().s2a_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !(value.p2b_1 == null)) {
      tmp1_output.un(tmp0_desc, 20, tmp2_cached[20], value.p2b_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.q2b_1 == null)) {
      tmp1_output.un(tmp0_desc, 21, tmp2_cached[21], value.q2b_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !(value.r2b_1 == null)) {
      tmp1_output.un(tmp0_desc, 22, tmp2_cached[22], value.r2b_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_24).ti = function (encoder, value) {
    return this.u2a(encoder, value instanceof CardViewData ? value : THROW_CCE());
  };
  protoOf($serializer_24).ui = function (decoder) {
    var tmp0_desc = this.t2a_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_input = decoder.bm(tmp0_desc);
    var tmp28_cached = Companion_getInstance_34().s2a_1;
    if (tmp27_input.rm()) {
      tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp27_input.pm(tmp0_desc, 20, tmp28_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp27_input.pm(tmp0_desc, 21, tmp28_cached[21], tmp25_local21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp27_input.pm(tmp0_desc, 22, tmp28_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp27_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp27_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp27_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp27_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp27_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp27_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp27_input.pm(tmp0_desc, 5, tmp28_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp27_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp27_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp27_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp27_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp27_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp27_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp27_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp27_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp27_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp27_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp27_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp27_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp27_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp27_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp27_input.pm(tmp0_desc, 20, tmp28_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp27_input.pm(tmp0_desc, 21, tmp28_cached[21], tmp25_local21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp27_input.pm(tmp0_desc, 22, tmp28_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp27_input.cm(tmp0_desc);
    return CardViewData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, null);
  };
  protoOf($serializer_24).si = function () {
    return this.t2a_1;
  };
  protoOf($serializer_24).eu = function () {
    var tmp0_cached = Companion_getInstance_34().s2a_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[20]), get_nullable(tmp0_cached[21]), get_nullable(tmp0_cached[22])];
  };
  var $serializer_instance_24;
  function $serializer_getInstance_24() {
    if ($serializer_instance_24 == null)
      new $serializer_24();
    return $serializer_instance_24;
  }
  function CardViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, front, back, currentVisual, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_24().t2a_1);
    }
    GameComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.p2b_1 = null;
    else
      $this.p2b_1 = front;
    if (0 === (seen0 & 2097152))
      $this.q2b_1 = null;
    else
      $this.q2b_1 = back;
    if (0 === (seen0 & 4194304))
      $this.r2b_1 = null;
    else
      $this.r2b_1 = currentVisual;
    return $this;
  }
  function CardViewData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, front, back, currentVisual, serializationConstructorMarker) {
    return CardViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, front, back, currentVisual, serializationConstructorMarker, objectCreate(protoOf(CardViewData)));
  }
  function CardViewData() {
    Companion_getInstance_34();
    GameComponentViewData.call(this);
    this.p2b_1 = null;
    this.q2b_1 = null;
    this.r2b_1 = null;
  }
  function Companion_35() {
    Companion_instance_35 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.s2b_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_44().g16())];
  }
  var Companion_instance_35;
  function Companion_getInstance_35() {
    if (Companion_instance_35 == null)
      new Companion_35();
    return Companion_instance_35;
  }
  function $serializer_25() {
    $serializer_instance_25 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('DiceViewData', this, 22);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('currentSide', true);
    tmp0_serialDesc.pt('visuals', true);
    this.t2b_1 = tmp0_serialDesc;
  }
  protoOf($serializer_25).u2b = function (encoder, value) {
    var tmp0_desc = this.t2b_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_35().s2b_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !(value.p2c_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 20, value.p2c_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !equals(value.q2c_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 21, tmp2_cached[21], value.q2c_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_25).ti = function (encoder, value) {
    return this.u2b(encoder, value instanceof DiceViewData ? value : THROW_CCE());
  };
  protoOf($serializer_25).ui = function (decoder) {
    var tmp0_desc = this.t2b_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = 0;
    var tmp25_local21 = null;
    var tmp26_input = decoder.bm(tmp0_desc);
    var tmp27_cached = Companion_getInstance_35().s2b_1;
    if (tmp26_input.rm()) {
      tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp26_input.gm(tmp0_desc, 20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp26_input.nm(tmp0_desc, 21, tmp27_cached[21], tmp25_local21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp26_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp26_input.gm(tmp0_desc, 20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp26_input.nm(tmp0_desc, 21, tmp27_cached[21], tmp25_local21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp26_input.cm(tmp0_desc);
    return DiceViewData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, null);
  };
  protoOf($serializer_25).si = function () {
    return this.t2b_1;
  };
  protoOf($serializer_25).eu = function () {
    var tmp0_cached = Companion_getInstance_35().s2b_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), IntSerializer_getInstance(), tmp0_cached[21]];
  };
  var $serializer_instance_25;
  function $serializer_getInstance_25() {
    if ($serializer_instance_25 == null)
      new $serializer_25();
    return $serializer_instance_25;
  }
  function DiceViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, currentSide, visuals, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_25().t2b_1);
    }
    GameComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.p2c_1 = 0;
    else
      $this.p2c_1 = currentSide;
    if (0 === (seen0 & 2097152))
      $this.q2c_1 = emptyList();
    else
      $this.q2c_1 = visuals;
    return $this;
  }
  function DiceViewData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, currentSide, visuals, serializationConstructorMarker) {
    return DiceViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, currentSide, visuals, serializationConstructorMarker, objectCreate(protoOf(DiceViewData)));
  }
  function DiceViewData() {
    Companion_getInstance_35();
    GameComponentViewData.call(this);
    this.p2c_1 = 0;
    this.q2c_1 = emptyList();
  }
  function Companion_36() {
    Companion_instance_36 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.r2c_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_36;
  function Companion_getInstance_36() {
    if (Companion_instance_36 == null)
      new Companion_36();
    return Companion_instance_36;
  }
  function $serializer_26() {
    $serializer_instance_26 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('HexagonViewData', this, 22);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('size', true);
    tmp0_serialDesc.pt('orientation', true);
    this.s2c_1 = tmp0_serialDesc;
  }
  protoOf($serializer_26).t2c = function (encoder, value) {
    var tmp0_desc = this.s2c_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_36().r2c_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !(value.o2d_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 20, value.o2d_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.p2d_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.p2d_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_26).ti = function (encoder, value) {
    return this.t2c(encoder, value instanceof HexagonViewData ? value : THROW_CCE());
  };
  protoOf($serializer_26).ui = function (decoder) {
    var tmp0_desc = this.s2c_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = 0;
    var tmp25_local21 = null;
    var tmp26_input = decoder.bm(tmp0_desc);
    var tmp27_cached = Companion_getInstance_36().r2c_1;
    if (tmp26_input.rm()) {
      tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp26_input.gm(tmp0_desc, 20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp26_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp26_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp26_input.gm(tmp0_desc, 20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp26_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp26_input.cm(tmp0_desc);
    return HexagonViewData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, null);
  };
  protoOf($serializer_26).si = function () {
    return this.s2c_1;
  };
  protoOf($serializer_26).eu = function () {
    var tmp0_cached = Companion_getInstance_36().r2c_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), IntSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_26;
  function $serializer_getInstance_26() {
    if ($serializer_instance_26 == null)
      new $serializer_26();
    return $serializer_instance_26;
  }
  function HexagonViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, size, orientation, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_26().s2c_1);
    }
    GameComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.o2d_1 = 0;
    else
      $this.o2d_1 = size;
    if (0 === (seen0 & 2097152))
      $this.p2d_1 = '';
    else
      $this.p2d_1 = orientation;
    return $this;
  }
  function HexagonViewData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, size, orientation, serializationConstructorMarker) {
    return HexagonViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, size, orientation, serializationConstructorMarker, objectCreate(protoOf(HexagonViewData)));
  }
  function HexagonViewData() {
    Companion_getInstance_36();
    GameComponentViewData.call(this);
    this.o2d_1 = 0;
    this.p2d_1 = '';
  }
  function Companion_37() {
    Companion_instance_37 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.q2d_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  }
  var Companion_instance_37;
  function Companion_getInstance_37() {
    if (Companion_instance_37 == null)
      new Companion_37();
    return Companion_instance_37;
  }
  function $serializer_27() {
    $serializer_instance_27 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('TokenViewData', this, 20);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    this.r2d_1 = tmp0_serialDesc;
  }
  protoOf($serializer_27).s2d = function (encoder, value) {
    var tmp0_desc = this.r2d_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_37().q2d_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_27).ti = function (encoder, value) {
    return this.s2d(encoder, value instanceof TokenViewData ? value : THROW_CCE());
  };
  protoOf($serializer_27).ui = function (decoder) {
    var tmp0_desc = this.r2d_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_input = decoder.bm(tmp0_desc);
    var tmp25_cached = Companion_getInstance_37().q2d_1;
    if (tmp24_input.rm()) {
      tmp4_local0 = tmp24_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp24_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp24_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp24_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp24_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp24_input.pm(tmp0_desc, 5, tmp25_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp24_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp24_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp24_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp24_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp24_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp24_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp24_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp24_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp24_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp24_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp24_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp24_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp24_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp24_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp24_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp24_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp24_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp24_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp24_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp24_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp24_input.pm(tmp0_desc, 5, tmp25_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp24_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp24_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp24_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp24_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp24_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp24_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp24_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp24_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp24_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp24_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp24_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp24_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp24_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp24_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp24_input.cm(tmp0_desc);
    return TokenViewData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, null);
  };
  protoOf($serializer_27).si = function () {
    return this.r2d_1;
  };
  protoOf($serializer_27).eu = function () {
    var tmp0_cached = Companion_getInstance_37().q2d_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance()];
  };
  var $serializer_instance_27;
  function $serializer_getInstance_27() {
    if ($serializer_instance_27 == null)
      new $serializer_27();
    return $serializer_instance_27;
  }
  function TokenViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_27().r2d_1);
    }
    GameComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    return $this;
  }
  function TokenViewData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker) {
    return TokenViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, objectCreate(protoOf(TokenViewData)));
  }
  function TokenViewData() {
    Companion_getInstance_37();
    GameComponentViewData.call(this);
  }
  function _get_$cachedSerializer__te6jhj_9($this) {
    return $this.u2d_1.u1();
  }
  function GameComponentContainerData$Companion$_anonymous__nqttf3() {
    var tmp = getKClass(GameComponentContainerData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_38() {
    Companion_instance_38 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.t2d_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_33().g16())];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.u2d_1 = lazy(tmp_1, GameComponentContainerData$Companion$_anonymous__nqttf3);
  }
  protoOf(Companion_38).g16 = function () {
    return _get_$cachedSerializer__te6jhj_9(this);
  };
  protoOf(Companion_38).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_38;
  function Companion_getInstance_38() {
    if (Companion_instance_38 == null)
      new Companion_38();
    return Companion_instance_38;
  }
  function GameComponentContainerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this) {
    ComponentViewData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1048576))
      $this.p2e_1 = emptyList();
    else
      $this.p2e_1 = components;
    return $this;
  }
  function GameComponentContainerData() {
    Companion_getInstance_38();
    ComponentViewData.call(this);
    this.p2e_1 = emptyList();
  }
  function Companion_39() {
    Companion_instance_39 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.q2e_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_33().g16())];
  }
  var Companion_instance_39;
  function Companion_getInstance_39() {
    if (Companion_instance_39 == null)
      new Companion_39();
    return Companion_instance_39;
  }
  function $serializer_28() {
    $serializer_instance_28 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('AreaData', this, 21);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('components', true);
    this.r2e_1 = tmp0_serialDesc;
  }
  protoOf($serializer_28).s2e = function (encoder, value) {
    var tmp0_desc = this.r2e_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_39().q2e_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !equals(value.p2e_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 20, tmp2_cached[20], value.p2e_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_28).ti = function (encoder, value) {
    return this.s2e(encoder, value instanceof AreaData ? value : THROW_CCE());
  };
  protoOf($serializer_28).ui = function (decoder) {
    var tmp0_desc = this.r2e_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_input = decoder.bm(tmp0_desc);
    var tmp26_cached = Companion_getInstance_39().q2e_1;
    if (tmp25_input.rm()) {
      tmp4_local0 = tmp25_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp25_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp25_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp25_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp25_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp25_input.pm(tmp0_desc, 5, tmp26_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp25_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp25_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp25_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp25_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp25_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp25_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp25_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp25_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp25_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp25_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp25_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp25_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp25_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp25_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp25_input.nm(tmp0_desc, 20, tmp26_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp25_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp25_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp25_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp25_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp25_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp25_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp25_input.pm(tmp0_desc, 5, tmp26_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp25_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp25_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp25_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp25_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp25_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp25_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp25_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp25_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp25_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp25_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp25_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp25_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp25_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp25_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp25_input.nm(tmp0_desc, 20, tmp26_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp25_input.cm(tmp0_desc);
    return AreaData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, null);
  };
  protoOf($serializer_28).si = function () {
    return this.r2e_1;
  };
  protoOf($serializer_28).eu = function () {
    var tmp0_cached = Companion_getInstance_39().q2e_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[20]];
  };
  var $serializer_instance_28;
  function $serializer_getInstance_28() {
    if ($serializer_instance_28 == null)
      new $serializer_28();
    return $serializer_instance_28;
  }
  function AreaData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_28().r2e_1);
    }
    GameComponentContainerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this);
    return $this;
  }
  function AreaData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker) {
    return AreaData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, objectCreate(protoOf(AreaData)));
  }
  function AreaData() {
    Companion_getInstance_39();
    GameComponentContainerData.call(this);
  }
  function Companion_40() {
    Companion_instance_40 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.t2e_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_33().g16()), new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance())];
  }
  var Companion_instance_40;
  function Companion_getInstance_40() {
    if (Companion_instance_40 == null)
      new Companion_40();
    return Companion_instance_40;
  }
  function $serializer_29() {
    $serializer_instance_29 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('CardStackData', this, 22);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('components', true);
    tmp0_serialDesc.pt('alignment', true);
    this.u2e_1 = tmp0_serialDesc;
  }
  protoOf($serializer_29).v2e = function (encoder, value) {
    var tmp0_desc = this.u2e_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_40().t2e_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !equals(value.p2e_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 20, tmp2_cached[20], value.p2e_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !value.r2f_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 21, tmp2_cached[21], value.r2f_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_29).ti = function (encoder, value) {
    return this.v2e(encoder, value instanceof CardStackData ? value : THROW_CCE());
  };
  protoOf($serializer_29).ui = function (decoder) {
    var tmp0_desc = this.u2e_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_input = decoder.bm(tmp0_desc);
    var tmp27_cached = Companion_getInstance_40().t2e_1;
    if (tmp26_input.rm()) {
      tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp26_input.nm(tmp0_desc, 20, tmp27_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp26_input.nm(tmp0_desc, 21, tmp27_cached[21], tmp25_local21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp26_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp26_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp26_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp26_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp26_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp26_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp26_input.pm(tmp0_desc, 5, tmp27_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp26_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp26_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp26_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp26_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp26_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp26_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp26_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp26_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp26_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp26_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp26_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp26_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp26_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp26_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp26_input.nm(tmp0_desc, 20, tmp27_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp26_input.nm(tmp0_desc, 21, tmp27_cached[21], tmp25_local21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp26_input.cm(tmp0_desc);
    return CardStackData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, null);
  };
  protoOf($serializer_29).si = function () {
    return this.u2e_1;
  };
  protoOf($serializer_29).eu = function () {
    var tmp0_cached = Companion_getInstance_40().t2e_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[20], tmp0_cached[21]];
  };
  var $serializer_instance_29;
  function $serializer_getInstance_29() {
    if ($serializer_instance_29 == null)
      new $serializer_29();
    return $serializer_instance_29;
  }
  function CardStackData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, alignment, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_29().u2e_1);
    }
    GameComponentContainerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.r2f_1 = new Pair('', '');
    else
      $this.r2f_1 = alignment;
    return $this;
  }
  function CardStackData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, alignment, serializationConstructorMarker) {
    return CardStackData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, alignment, serializationConstructorMarker, objectCreate(protoOf(CardStackData)));
  }
  function CardStackData() {
    Companion_getInstance_40();
    GameComponentContainerData.call(this);
    this.r2f_1 = new Pair('', '');
  }
  function Companion_41() {
    Companion_instance_41 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.s2f_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_33().g16()), null, new LinkedHashMapSerializer(StringSerializer_getInstance(), $serializer_getInstance_26()), null, null];
  }
  var Companion_instance_41;
  function Companion_getInstance_41() {
    if (Companion_instance_41 == null)
      new Companion_41();
    return Companion_instance_41;
  }
  function $serializer_30() {
    $serializer_instance_30 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('HexagonGridData', this, 25);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('components', true);
    tmp0_serialDesc.pt('coordinateSystem', true);
    tmp0_serialDesc.pt('map', true);
    tmp0_serialDesc.pt('spacing', true);
    tmp0_serialDesc.pt('orientation', true);
    this.t2f_1 = tmp0_serialDesc;
  }
  protoOf($serializer_30).u2f = function (encoder, value) {
    var tmp0_desc = this.t2f_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_41().s2f_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !equals(value.p2e_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 20, tmp2_cached[20], value.p2e_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.q2g_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.q2g_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !equals(value.r2g_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.r2g_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.s2g_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 23, value.s2g_1);
    }
    if (tmp1_output.yn(tmp0_desc, 24) ? true : !(value.t2g_1 === '')) {
      tmp1_output.qn(tmp0_desc, 24, value.t2g_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_30).ti = function (encoder, value) {
    return this.u2f(encoder, value instanceof HexagonGridData ? value : THROW_CCE());
  };
  protoOf($serializer_30).ui = function (decoder) {
    var tmp0_desc = this.t2f_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = 0;
    var tmp28_local24 = null;
    var tmp29_input = decoder.bm(tmp0_desc);
    var tmp30_cached = Companion_getInstance_41().s2f_1;
    if (tmp29_input.rm()) {
      tmp4_local0 = tmp29_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp29_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp29_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp29_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp29_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp29_input.pm(tmp0_desc, 5, tmp30_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp29_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp29_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp29_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp29_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp29_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp29_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp29_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp29_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp29_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp29_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp29_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp29_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp29_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp29_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp29_input.nm(tmp0_desc, 20, tmp30_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp29_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp29_input.nm(tmp0_desc, 22, tmp30_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp29_input.gm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
      tmp28_local24 = tmp29_input.lm(tmp0_desc, 24);
      tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp29_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp29_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp29_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp29_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp29_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp29_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp29_input.pm(tmp0_desc, 5, tmp30_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp29_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp29_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp29_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp29_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp29_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp29_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp29_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp29_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp29_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp29_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp29_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp29_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp29_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp29_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp29_input.nm(tmp0_desc, 20, tmp30_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp29_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp29_input.nm(tmp0_desc, 22, tmp30_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp29_input.gm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          case 24:
            tmp28_local24 = tmp29_input.lm(tmp0_desc, 24);
            tmp3_bitMask0 = tmp3_bitMask0 | 16777216;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp29_input.cm(tmp0_desc);
    return HexagonGridData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, tmp28_local24, null);
  };
  protoOf($serializer_30).si = function () {
    return this.t2f_1;
  };
  protoOf($serializer_30).eu = function () {
    var tmp0_cached = Companion_getInstance_41().s2f_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[20], StringSerializer_getInstance(), tmp0_cached[22], IntSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_30;
  function $serializer_getInstance_30() {
    if ($serializer_instance_30 == null)
      new $serializer_30();
    return $serializer_instance_30;
  }
  function HexagonGridData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, coordinateSystem, map, spacing, orientation, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_30().t2f_1);
    }
    GameComponentContainerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.q2g_1 = '';
    else
      $this.q2g_1 = coordinateSystem;
    if (0 === (seen0 & 4194304))
      $this.r2g_1 = emptyMap();
    else
      $this.r2g_1 = map;
    if (0 === (seen0 & 8388608))
      $this.s2g_1 = 0;
    else
      $this.s2g_1 = spacing;
    if (0 === (seen0 & 16777216))
      $this.t2g_1 = '';
    else
      $this.t2g_1 = orientation;
    return $this;
  }
  function HexagonGridData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, coordinateSystem, map, spacing, orientation, serializationConstructorMarker) {
    return HexagonGridData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, coordinateSystem, map, spacing, orientation, serializationConstructorMarker, objectCreate(protoOf(HexagonGridData)));
  }
  function HexagonGridData() {
    Companion_getInstance_41();
    GameComponentContainerData.call(this);
    this.q2g_1 = '';
    this.r2g_1 = emptyMap();
    this.s2g_1 = 0;
    this.t2g_1 = '';
  }
  function Companion_42() {
    Companion_instance_42 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.u2g_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_33().g16()), null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null];
  }
  var Companion_instance_42;
  function Companion_getInstance_42() {
    if (Companion_instance_42 == null)
      new Companion_42();
    return Companion_instance_42;
  }
  function $serializer_31() {
    $serializer_instance_31 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('LinearLayoutData', this, 24);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('components', true);
    tmp0_serialDesc.pt('orientation', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('spacing', true);
    this.v2g_1 = tmp0_serialDesc;
  }
  protoOf($serializer_31).w2g = function (encoder, value) {
    var tmp0_desc = this.v2g_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_42().u2g_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !equals(value.p2e_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 20, tmp2_cached[20], value.p2e_1);
    }
    if (tmp1_output.yn(tmp0_desc, 21) ? true : !(value.s2h_1 === '')) {
      tmp1_output.qn(tmp0_desc, 21, value.s2h_1);
    }
    if (tmp1_output.yn(tmp0_desc, 22) ? true : !value.t2h_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 22, tmp2_cached[22], value.t2h_1);
    }
    if (tmp1_output.yn(tmp0_desc, 23) ? true : !(value.u2h_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 23, value.u2h_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_31).ti = function (encoder, value) {
    return this.w2g(encoder, value instanceof LinearLayoutData ? value : THROW_CCE());
  };
  protoOf($serializer_31).ui = function (decoder) {
    var tmp0_desc = this.v2g_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_local21 = null;
    var tmp26_local22 = null;
    var tmp27_local23 = 0;
    var tmp28_input = decoder.bm(tmp0_desc);
    var tmp29_cached = Companion_getInstance_42().u2g_1;
    if (tmp28_input.rm()) {
      tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, tmp29_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
      tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
      tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
      tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
      tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
      tmp27_local23 = tmp28_input.gm(tmp0_desc, 23);
      tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp28_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp28_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp28_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp28_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp28_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp28_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp28_input.pm(tmp0_desc, 5, tmp29_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp28_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp28_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp28_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp28_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp28_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp28_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp28_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp28_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp28_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp28_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp28_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp28_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp28_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp28_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp28_input.nm(tmp0_desc, 20, tmp29_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          case 21:
            tmp25_local21 = tmp28_input.lm(tmp0_desc, 21);
            tmp3_bitMask0 = tmp3_bitMask0 | 2097152;
            break;
          case 22:
            tmp26_local22 = tmp28_input.nm(tmp0_desc, 22, tmp29_cached[22], tmp26_local22);
            tmp3_bitMask0 = tmp3_bitMask0 | 4194304;
            break;
          case 23:
            tmp27_local23 = tmp28_input.gm(tmp0_desc, 23);
            tmp3_bitMask0 = tmp3_bitMask0 | 8388608;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp28_input.cm(tmp0_desc);
    return LinearLayoutData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, tmp25_local21, tmp26_local22, tmp27_local23, null);
  };
  protoOf($serializer_31).si = function () {
    return this.v2g_1;
  };
  protoOf($serializer_31).eu = function () {
    var tmp0_cached = Companion_getInstance_42().u2g_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[20], StringSerializer_getInstance(), tmp0_cached[22], IntSerializer_getInstance()];
  };
  var $serializer_instance_31;
  function $serializer_getInstance_31() {
    if ($serializer_instance_31 == null)
      new $serializer_31();
    return $serializer_instance_31;
  }
  function LinearLayoutData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, orientation, alignment, spacing, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_31().v2g_1);
    }
    GameComponentContainerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2097152))
      $this.s2h_1 = '';
    else
      $this.s2h_1 = orientation;
    if (0 === (seen0 & 4194304))
      $this.t2h_1 = new Pair('', '');
    else
      $this.t2h_1 = alignment;
    if (0 === (seen0 & 8388608))
      $this.u2h_1 = 0;
    else
      $this.u2h_1 = spacing;
    return $this;
  }
  function LinearLayoutData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, orientation, alignment, spacing, serializationConstructorMarker) {
    return LinearLayoutData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, orientation, alignment, spacing, serializationConstructorMarker, objectCreate(protoOf(LinearLayoutData)));
  }
  function LinearLayoutData() {
    Companion_getInstance_42();
    GameComponentContainerData.call(this);
    this.s2h_1 = '';
    this.t2h_1 = new Pair('', '');
    this.u2h_1 = 0;
  }
  function Companion_43() {
    Companion_instance_43 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.v2h_1 = [null, null, null, null, null, Companion_getInstance_44().g16(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, new ArrayListSerializer(Companion_getInstance_33().g16())];
  }
  var Companion_instance_43;
  function Companion_getInstance_43() {
    if (Companion_instance_43 == null)
      new Companion_43();
    return Companion_instance_43;
  }
  function $serializer_32() {
    $serializer_instance_32 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('SatchelData', this, 21);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('posX', true);
    tmp0_serialDesc.pt('posY', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('visual', true);
    tmp0_serialDesc.pt('zIndex', true);
    tmp0_serialDesc.pt('opacity', true);
    tmp0_serialDesc.pt('isVisible', true);
    tmp0_serialDesc.pt('isDisabled', true);
    tmp0_serialDesc.pt('isFocusable', true);
    tmp0_serialDesc.pt('scaleX', true);
    tmp0_serialDesc.pt('scaleY', true);
    tmp0_serialDesc.pt('rotation', true);
    tmp0_serialDesc.pt('layoutFromCenter', true);
    tmp0_serialDesc.pt('isDraggable', true);
    tmp0_serialDesc.pt('isDragged', true);
    tmp0_serialDesc.pt('isDroppable', true);
    tmp0_serialDesc.pt('hasMouseEnteredEvent', true);
    tmp0_serialDesc.pt('hasMouseExitedEvent', true);
    tmp0_serialDesc.pt('components', true);
    this.w2h_1 = tmp0_serialDesc;
  }
  protoOf($serializer_32).x2h = function (encoder, value) {
    var tmp0_desc = this.w2h_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_43().v2h_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.a1s_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.a1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.b1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.b1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.c1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 2, value.c1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.d1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 3, value.d1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.e1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 4, value.e1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.f1s_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.f1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.g1s_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.g1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.h1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 7, value.h1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.i1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 8, value.i1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.j1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 9, value.j1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 10) ? true : !(value.k1s_1 === true)) {
      tmp1_output.in(tmp0_desc, 10, value.k1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 11) ? true : !equals(value.l1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 11, value.l1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 12) ? true : !equals(value.m1s_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 12, value.m1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 13) ? true : !equals(value.n1s_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 13, value.n1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 14) ? true : !(value.o1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 14, value.o1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 15) ? true : !(value.p1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 15, value.p1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 16) ? true : !(value.q1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 16, value.q1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 17) ? true : !(value.r1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 17, value.r1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 18) ? true : !(value.s1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 18, value.s1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 19) ? true : !(value.t1s_1 === false)) {
      tmp1_output.in(tmp0_desc, 19, value.t1s_1);
    }
    if (tmp1_output.yn(tmp0_desc, 20) ? true : !equals(value.p2e_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 20, tmp2_cached[20], value.p2e_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_32).ti = function (encoder, value) {
    return this.x2h(encoder, value instanceof SatchelData ? value : THROW_CCE());
  };
  protoOf($serializer_32).ui = function (decoder) {
    var tmp0_desc = this.w2h_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = 0;
    var tmp7_local3 = 0;
    var tmp8_local4 = 0;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = false;
    var tmp13_local9 = false;
    var tmp14_local10 = false;
    var tmp15_local11 = 0.0;
    var tmp16_local12 = 0.0;
    var tmp17_local13 = 0.0;
    var tmp18_local14 = false;
    var tmp19_local15 = false;
    var tmp20_local16 = false;
    var tmp21_local17 = false;
    var tmp22_local18 = false;
    var tmp23_local19 = false;
    var tmp24_local20 = null;
    var tmp25_input = decoder.bm(tmp0_desc);
    var tmp26_cached = Companion_getInstance_43().v2h_1;
    if (tmp25_input.rm()) {
      tmp4_local0 = tmp25_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp25_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp25_input.gm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp25_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp25_input.gm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp25_input.pm(tmp0_desc, 5, tmp26_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp25_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp25_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp25_input.dm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp25_input.dm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
      tmp14_local10 = tmp25_input.dm(tmp0_desc, 10);
      tmp3_bitMask0 = tmp3_bitMask0 | 1024;
      tmp15_local11 = tmp25_input.jm(tmp0_desc, 11);
      tmp3_bitMask0 = tmp3_bitMask0 | 2048;
      tmp16_local12 = tmp25_input.jm(tmp0_desc, 12);
      tmp3_bitMask0 = tmp3_bitMask0 | 4096;
      tmp17_local13 = tmp25_input.jm(tmp0_desc, 13);
      tmp3_bitMask0 = tmp3_bitMask0 | 8192;
      tmp18_local14 = tmp25_input.dm(tmp0_desc, 14);
      tmp3_bitMask0 = tmp3_bitMask0 | 16384;
      tmp19_local15 = tmp25_input.dm(tmp0_desc, 15);
      tmp3_bitMask0 = tmp3_bitMask0 | 32768;
      tmp20_local16 = tmp25_input.dm(tmp0_desc, 16);
      tmp3_bitMask0 = tmp3_bitMask0 | 65536;
      tmp21_local17 = tmp25_input.dm(tmp0_desc, 17);
      tmp3_bitMask0 = tmp3_bitMask0 | 131072;
      tmp22_local18 = tmp25_input.dm(tmp0_desc, 18);
      tmp3_bitMask0 = tmp3_bitMask0 | 262144;
      tmp23_local19 = tmp25_input.dm(tmp0_desc, 19);
      tmp3_bitMask0 = tmp3_bitMask0 | 524288;
      tmp24_local20 = tmp25_input.nm(tmp0_desc, 20, tmp26_cached[20], tmp24_local20);
      tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp25_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp25_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp25_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp25_input.gm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp25_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp25_input.gm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp25_input.pm(tmp0_desc, 5, tmp26_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp25_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp25_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp25_input.dm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp25_input.dm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          case 10:
            tmp14_local10 = tmp25_input.dm(tmp0_desc, 10);
            tmp3_bitMask0 = tmp3_bitMask0 | 1024;
            break;
          case 11:
            tmp15_local11 = tmp25_input.jm(tmp0_desc, 11);
            tmp3_bitMask0 = tmp3_bitMask0 | 2048;
            break;
          case 12:
            tmp16_local12 = tmp25_input.jm(tmp0_desc, 12);
            tmp3_bitMask0 = tmp3_bitMask0 | 4096;
            break;
          case 13:
            tmp17_local13 = tmp25_input.jm(tmp0_desc, 13);
            tmp3_bitMask0 = tmp3_bitMask0 | 8192;
            break;
          case 14:
            tmp18_local14 = tmp25_input.dm(tmp0_desc, 14);
            tmp3_bitMask0 = tmp3_bitMask0 | 16384;
            break;
          case 15:
            tmp19_local15 = tmp25_input.dm(tmp0_desc, 15);
            tmp3_bitMask0 = tmp3_bitMask0 | 32768;
            break;
          case 16:
            tmp20_local16 = tmp25_input.dm(tmp0_desc, 16);
            tmp3_bitMask0 = tmp3_bitMask0 | 65536;
            break;
          case 17:
            tmp21_local17 = tmp25_input.dm(tmp0_desc, 17);
            tmp3_bitMask0 = tmp3_bitMask0 | 131072;
            break;
          case 18:
            tmp22_local18 = tmp25_input.dm(tmp0_desc, 18);
            tmp3_bitMask0 = tmp3_bitMask0 | 262144;
            break;
          case 19:
            tmp23_local19 = tmp25_input.dm(tmp0_desc, 19);
            tmp3_bitMask0 = tmp3_bitMask0 | 524288;
            break;
          case 20:
            tmp24_local20 = tmp25_input.nm(tmp0_desc, 20, tmp26_cached[20], tmp24_local20);
            tmp3_bitMask0 = tmp3_bitMask0 | 1048576;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp25_input.cm(tmp0_desc);
    return SatchelData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, tmp14_local10, tmp15_local11, tmp16_local12, tmp17_local13, tmp18_local14, tmp19_local15, tmp20_local16, tmp21_local17, tmp22_local18, tmp23_local19, tmp24_local20, null);
  };
  protoOf($serializer_32).si = function () {
    return this.w2h_1;
  };
  protoOf($serializer_32).eu = function () {
    var tmp0_cached = Companion_getInstance_43().v2h_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[20]];
  };
  var $serializer_instance_32;
  function $serializer_getInstance_32() {
    if ($serializer_instance_32 == null)
      new $serializer_32();
    return $serializer_instance_32;
  }
  function SatchelData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_32().w2h_1);
    }
    GameComponentContainerData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, $this);
    return $this;
  }
  function SatchelData_init_$Create$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker) {
    return SatchelData_init_$Init$(seen0, id, posX, posY, width, height, visual, zIndex, opacity, isVisible, isDisabled, isFocusable, scaleX, scaleY, rotation, layoutFromCenter, isDraggable, isDragged, isDroppable, hasMouseEnteredEvent, hasMouseExitedEvent, components, serializationConstructorMarker, objectCreate(protoOf(SatchelData)));
  }
  function SatchelData() {
    Companion_getInstance_43();
    GameComponentContainerData.call(this);
  }
  function _get_$cachedSerializer__te6jhj_10($this) {
    return $this.q1q_1.u1();
  }
  function VisualData$Companion$_anonymous__osn4zp() {
    var tmp = getKClass(VisualData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = [getKClass(CompoundVisualData), getKClass(ColorVisualData), getKClass(ImageVisualData), getKClass(TextVisualData)];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_1 = [$serializer_getInstance_36(), $serializer_getInstance_33(), $serializer_getInstance_34(), $serializer_getInstance_35()];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$8 = [];
    return SealedClassSerializer_init_$Create$('VisualData', tmp, tmp_0, tmp_1, tmp$ret$8);
  }
  function Companion_44() {
    Companion_instance_44 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.q1q_1 = lazy(tmp_0, VisualData$Companion$_anonymous__osn4zp);
  }
  protoOf(Companion_44).g16 = function () {
    return _get_$cachedSerializer__te6jhj_10(this);
  };
  protoOf(Companion_44).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_44;
  function Companion_getInstance_44() {
    if (Companion_instance_44 == null)
      new Companion_44();
    return Companion_instance_44;
  }
  function VisualData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    Data_init_$Init$(seen0, serializationConstructorMarker, $this);
    if (0 === (seen0 & 1))
      $this.y2h_1 = '';
    else
      $this.y2h_1 = id;
    return $this;
  }
  function VisualData(id) {
    Companion_getInstance_44();
    id = id === VOID ? '' : id;
    Data.call(this);
    this.y2h_1 = id;
  }
  function _get_$cachedSerializer__te6jhj_11($this) {
    return $this.a2i_1.u1();
  }
  function SingleLayerVisualData$Companion$_anonymous__nlm0g4() {
    var tmp = getKClass(SingleLayerVisualData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = [getKClass(ColorVisualData), getKClass(ImageVisualData), getKClass(TextVisualData)];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_1 = [$serializer_getInstance_33(), $serializer_getInstance_34(), $serializer_getInstance_35()];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$8 = [];
    return SealedClassSerializer_init_$Create$('SingleLayerVisualData', tmp, tmp_0, tmp_1, tmp$ret$8);
  }
  function Companion_45() {
    Companion_instance_45 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.z2h_1 = [null, null, new LinkedHashMapSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), new LinkedHashMapSerializer(StringSerializer_getInstance(), get_nullable(StringSerializer_getInstance())), null];
    var tmp_0 = this;
    var tmp_1 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_0.a2i_1 = lazy(tmp_1, SingleLayerVisualData$Companion$_anonymous__nlm0g4);
  }
  protoOf(Companion_45).g16 = function () {
    return _get_$cachedSerializer__te6jhj_11(this);
  };
  protoOf(Companion_45).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_45;
  function Companion_getInstance_45() {
    if (Companion_instance_45 == null)
      new Companion_45();
    return Companion_instance_45;
  }
  function SingleLayerVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, serializationConstructorMarker, $this) {
    VisualData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2))
      $this.c2i_1 = 0.0;
    else
      $this.c2i_1 = transparency;
    if (0 === (seen0 & 4))
      $this.d2i_1 = emptyMap();
    else
      $this.d2i_1 = style;
    if (0 === (seen0 & 8))
      $this.e2i_1 = emptyMap();
    else
      $this.e2i_1 = filters;
    if (0 === (seen0 & 16))
      $this.f2i_1 = '';
    else
      $this.f2i_1 = flipped;
    return $this;
  }
  function SingleLayerVisualData(transparency, style, filters, flipped) {
    Companion_getInstance_45();
    transparency = transparency === VOID ? 0.0 : transparency;
    style = style === VOID ? emptyMap() : style;
    filters = filters === VOID ? emptyMap() : filters;
    flipped = flipped === VOID ? '' : flipped;
    VisualData.call(this);
    this.c2i_1 = transparency;
    this.d2i_1 = style;
    this.e2i_1 = filters;
    this.f2i_1 = flipped;
  }
  function Companion_46() {
    Companion_instance_46 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.g2i_1 = [null, null, new LinkedHashMapSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), new LinkedHashMapSerializer(StringSerializer_getInstance(), get_nullable(StringSerializer_getInstance())), null, null];
  }
  var Companion_instance_46;
  function Companion_getInstance_46() {
    if (Companion_instance_46 == null)
      new Companion_46();
    return Companion_instance_46;
  }
  function $serializer_33() {
    $serializer_instance_33 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ColorVisualData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('transparency', true);
    tmp0_serialDesc.pt('style', true);
    tmp0_serialDesc.pt('filters', true);
    tmp0_serialDesc.pt('flipped', true);
    tmp0_serialDesc.pt('color', true);
    this.h2i_1 = tmp0_serialDesc;
  }
  protoOf($serializer_33).i2i = function (encoder, value) {
    var tmp0_desc = this.h2i_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_46().g2i_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.y2h_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.y2h_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !equals(value.c2i_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 1, value.c2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !equals(value.d2i_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 2, tmp2_cached[2], value.d2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !equals(value.e2i_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 3, tmp2_cached[3], value.e2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.f2i_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.f2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.o2i_1 === '')) {
      tmp1_output.qn(tmp0_desc, 5, value.o2i_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_33).ti = function (encoder, value) {
    return this.i2i(encoder, value instanceof ColorVisualData ? value : THROW_CCE());
  };
  protoOf($serializer_33).ui = function (decoder) {
    var tmp0_desc = this.h2i_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0.0;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_46().g2i_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.jm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.nm(tmp0_desc, 2, tmp11_cached[2], tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.nm(tmp0_desc, 3, tmp11_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.lm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.jm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.nm(tmp0_desc, 2, tmp11_cached[2], tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.nm(tmp0_desc, 3, tmp11_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.lm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return ColorVisualData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_33).si = function () {
    return this.h2i_1;
  };
  protoOf($serializer_33).eu = function () {
    var tmp0_cached = Companion_getInstance_46().g2i_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), DoubleSerializer_getInstance(), tmp0_cached[2], tmp0_cached[3], StringSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_33;
  function $serializer_getInstance_33() {
    if ($serializer_instance_33 == null)
      new $serializer_33();
    return $serializer_instance_33;
  }
  function ColorVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, color, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_33().h2i_1);
    }
    SingleLayerVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, serializationConstructorMarker, $this);
    if (0 === (seen0 & 32))
      $this.o2i_1 = '';
    else
      $this.o2i_1 = color;
    return $this;
  }
  function ColorVisualData_init_$Create$(seen0, id, transparency, style, filters, flipped, color, serializationConstructorMarker) {
    return ColorVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, color, serializationConstructorMarker, objectCreate(protoOf(ColorVisualData)));
  }
  function ColorVisualData(color) {
    Companion_getInstance_46();
    color = color === VOID ? '' : color;
    SingleLayerVisualData.call(this);
    this.o2i_1 = color;
  }
  protoOf(ColorVisualData).toString = function () {
    return 'ColorVisualData(color=' + this.o2i_1 + ')';
  };
  protoOf(ColorVisualData).hashCode = function () {
    return getStringHashCode(this.o2i_1);
  };
  protoOf(ColorVisualData).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ColorVisualData))
      return false;
    var tmp0_other_with_cast = other instanceof ColorVisualData ? other : THROW_CCE();
    if (!(this.o2i_1 === tmp0_other_with_cast.o2i_1))
      return false;
    return true;
  };
  function Companion_47() {
    Companion_instance_47 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.p2i_1 = [null, null, new LinkedHashMapSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), new LinkedHashMapSerializer(StringSerializer_getInstance(), get_nullable(StringSerializer_getInstance())), null, null, null, null, null, null];
  }
  var Companion_instance_47;
  function Companion_getInstance_47() {
    if (Companion_instance_47 == null)
      new Companion_47();
    return Companion_instance_47;
  }
  function $serializer_34() {
    $serializer_instance_34 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ImageVisualData', this, 10);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('transparency', true);
    tmp0_serialDesc.pt('style', true);
    tmp0_serialDesc.pt('filters', true);
    tmp0_serialDesc.pt('flipped', true);
    tmp0_serialDesc.pt('path', true);
    tmp0_serialDesc.pt('width', true);
    tmp0_serialDesc.pt('height', true);
    tmp0_serialDesc.pt('offsetX', true);
    tmp0_serialDesc.pt('offsetY', true);
    this.q2i_1 = tmp0_serialDesc;
  }
  protoOf($serializer_34).r2i = function (encoder, value) {
    var tmp0_desc = this.q2i_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_47().p2i_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.y2h_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.y2h_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !equals(value.c2i_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 1, value.c2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !equals(value.d2i_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 2, tmp2_cached[2], value.d2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !equals(value.e2i_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 3, tmp2_cached[3], value.e2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.f2i_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.f2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.x2i_1 === '')) {
      tmp1_output.qn(tmp0_desc, 5, value.x2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.y2i_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.y2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !(value.z2i_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 7, value.z2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.a2j_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 8, value.a2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.b2j_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 9, value.b2j_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_34).ti = function (encoder, value) {
    return this.r2i(encoder, value instanceof ImageVisualData ? value : THROW_CCE());
  };
  protoOf($serializer_34).ui = function (decoder) {
    var tmp0_desc = this.q2i_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0.0;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0;
    var tmp12_local8 = 0;
    var tmp13_local9 = 0;
    var tmp14_input = decoder.bm(tmp0_desc);
    var tmp15_cached = Companion_getInstance_47().p2i_1;
    if (tmp14_input.rm()) {
      tmp4_local0 = tmp14_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp14_input.jm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp14_input.nm(tmp0_desc, 2, tmp15_cached[2], tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp14_input.nm(tmp0_desc, 3, tmp15_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp14_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp14_input.lm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp14_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp14_input.gm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp14_input.gm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp14_input.gm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp14_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp14_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp14_input.jm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp14_input.nm(tmp0_desc, 2, tmp15_cached[2], tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp14_input.nm(tmp0_desc, 3, tmp15_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp14_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp14_input.lm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp14_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp14_input.gm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp14_input.gm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp14_input.gm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp14_input.cm(tmp0_desc);
    return ImageVisualData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, null);
  };
  protoOf($serializer_34).si = function () {
    return this.q2i_1;
  };
  protoOf($serializer_34).eu = function () {
    var tmp0_cached = Companion_getInstance_47().p2i_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), DoubleSerializer_getInstance(), tmp0_cached[2], tmp0_cached[3], StringSerializer_getInstance(), StringSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance(), IntSerializer_getInstance()];
  };
  var $serializer_instance_34;
  function $serializer_getInstance_34() {
    if ($serializer_instance_34 == null)
      new $serializer_34();
    return $serializer_instance_34;
  }
  function ImageVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, path, width, height, offsetX, offsetY, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_34().q2i_1);
    }
    SingleLayerVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, serializationConstructorMarker, $this);
    if (0 === (seen0 & 32))
      $this.x2i_1 = '';
    else
      $this.x2i_1 = path;
    if (0 === (seen0 & 64))
      $this.y2i_1 = 0;
    else
      $this.y2i_1 = width;
    if (0 === (seen0 & 128))
      $this.z2i_1 = 0;
    else
      $this.z2i_1 = height;
    if (0 === (seen0 & 256))
      $this.a2j_1 = 0;
    else
      $this.a2j_1 = offsetX;
    if (0 === (seen0 & 512))
      $this.b2j_1 = 0;
    else
      $this.b2j_1 = offsetY;
    return $this;
  }
  function ImageVisualData_init_$Create$(seen0, id, transparency, style, filters, flipped, path, width, height, offsetX, offsetY, serializationConstructorMarker) {
    return ImageVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, path, width, height, offsetX, offsetY, serializationConstructorMarker, objectCreate(protoOf(ImageVisualData)));
  }
  function ImageVisualData(path, width, height, offsetX, offsetY) {
    Companion_getInstance_47();
    path = path === VOID ? '' : path;
    width = width === VOID ? 0 : width;
    height = height === VOID ? 0 : height;
    offsetX = offsetX === VOID ? 0 : offsetX;
    offsetY = offsetY === VOID ? 0 : offsetY;
    SingleLayerVisualData.call(this);
    this.x2i_1 = path;
    this.y2i_1 = width;
    this.z2i_1 = height;
    this.a2j_1 = offsetX;
    this.b2j_1 = offsetY;
  }
  protoOf(ImageVisualData).toString = function () {
    return 'ImageVisualData(path=' + this.x2i_1 + ', width=' + this.y2i_1 + ', height=' + this.z2i_1 + ', offsetX=' + this.a2j_1 + ', offsetY=' + this.b2j_1 + ')';
  };
  protoOf(ImageVisualData).hashCode = function () {
    var result = getStringHashCode(this.x2i_1);
    result = imul(result, 31) + this.y2i_1 | 0;
    result = imul(result, 31) + this.z2i_1 | 0;
    result = imul(result, 31) + this.a2j_1 | 0;
    result = imul(result, 31) + this.b2j_1 | 0;
    return result;
  };
  protoOf(ImageVisualData).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ImageVisualData))
      return false;
    var tmp0_other_with_cast = other instanceof ImageVisualData ? other : THROW_CCE();
    if (!(this.x2i_1 === tmp0_other_with_cast.x2i_1))
      return false;
    if (!(this.y2i_1 === tmp0_other_with_cast.y2i_1))
      return false;
    if (!(this.z2i_1 === tmp0_other_with_cast.z2i_1))
      return false;
    if (!(this.a2j_1 === tmp0_other_with_cast.a2j_1))
      return false;
    if (!(this.b2j_1 === tmp0_other_with_cast.b2j_1))
      return false;
    return true;
  };
  function Companion_48() {
    Companion_instance_48 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.c2j_1 = [null, null, new LinkedHashMapSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), new LinkedHashMapSerializer(StringSerializer_getInstance(), get_nullable(StringSerializer_getInstance())), null, null, null, new PairSerializer(StringSerializer_getInstance(), StringSerializer_getInstance()), null, null];
  }
  var Companion_instance_48;
  function Companion_getInstance_48() {
    if (Companion_instance_48 == null)
      new Companion_48();
    return Companion_instance_48;
  }
  function $serializer_35() {
    $serializer_instance_35 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('TextVisualData', this, 10);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('transparency', true);
    tmp0_serialDesc.pt('style', true);
    tmp0_serialDesc.pt('filters', true);
    tmp0_serialDesc.pt('flipped', true);
    tmp0_serialDesc.pt('text', true);
    tmp0_serialDesc.pt('font', true);
    tmp0_serialDesc.pt('alignment', true);
    tmp0_serialDesc.pt('offsetX', true);
    tmp0_serialDesc.pt('offsetY', true);
    this.d2j_1 = tmp0_serialDesc;
  }
  protoOf($serializer_35).e2j = function (encoder, value) {
    var tmp0_desc = this.d2j_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_48().c2j_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.y2h_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.y2h_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !equals(value.c2i_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 1, value.c2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !equals(value.d2i_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 2, tmp2_cached[2], value.d2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !equals(value.e2i_1, emptyMap())) {
      tmp1_output.sn(tmp0_desc, 3, tmp2_cached[3], value.e2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.f2i_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.f2i_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.k2j_1 === '')) {
      tmp1_output.qn(tmp0_desc, 5, value.k2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !value.l2j_1.equals(new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal'))) {
      tmp1_output.sn(tmp0_desc, 6, $serializer_getInstance_37(), value.l2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !value.m2j_1.equals(new Pair('', ''))) {
      tmp1_output.sn(tmp0_desc, 7, tmp2_cached[7], value.m2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.n2j_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 8, value.n2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !(value.o2j_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 9, value.o2j_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_35).ti = function (encoder, value) {
    return this.e2j(encoder, value instanceof TextVisualData ? value : THROW_CCE());
  };
  protoOf($serializer_35).ui = function (decoder) {
    var tmp0_desc = this.d2j_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0.0;
    var tmp6_local2 = null;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = null;
    var tmp11_local7 = null;
    var tmp12_local8 = 0;
    var tmp13_local9 = 0;
    var tmp14_input = decoder.bm(tmp0_desc);
    var tmp15_cached = Companion_getInstance_48().c2j_1;
    if (tmp14_input.rm()) {
      tmp4_local0 = tmp14_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp14_input.jm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp14_input.nm(tmp0_desc, 2, tmp15_cached[2], tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp14_input.nm(tmp0_desc, 3, tmp15_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp14_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp14_input.lm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp14_input.nm(tmp0_desc, 6, $serializer_getInstance_37(), tmp10_local6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp14_input.nm(tmp0_desc, 7, tmp15_cached[7], tmp11_local7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp14_input.gm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp14_input.gm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp14_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp14_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp14_input.jm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp14_input.nm(tmp0_desc, 2, tmp15_cached[2], tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp14_input.nm(tmp0_desc, 3, tmp15_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp14_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp14_input.lm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp14_input.nm(tmp0_desc, 6, $serializer_getInstance_37(), tmp10_local6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp14_input.nm(tmp0_desc, 7, tmp15_cached[7], tmp11_local7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp14_input.gm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp14_input.gm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp14_input.cm(tmp0_desc);
    return TextVisualData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, null);
  };
  protoOf($serializer_35).si = function () {
    return this.d2j_1;
  };
  protoOf($serializer_35).eu = function () {
    var tmp0_cached = Companion_getInstance_48().c2j_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), DoubleSerializer_getInstance(), tmp0_cached[2], tmp0_cached[3], StringSerializer_getInstance(), StringSerializer_getInstance(), $serializer_getInstance_37(), tmp0_cached[7], IntSerializer_getInstance(), IntSerializer_getInstance()];
  };
  var $serializer_instance_35;
  function $serializer_getInstance_35() {
    if ($serializer_instance_35 == null)
      new $serializer_35();
    return $serializer_instance_35;
  }
  function TextVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, text, font, alignment, offsetX, offsetY, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_35().d2j_1);
    }
    SingleLayerVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, serializationConstructorMarker, $this);
    if (0 === (seen0 & 32))
      $this.k2j_1 = '';
    else
      $this.k2j_1 = text;
    if (0 === (seen0 & 64))
      $this.l2j_1 = new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal');
    else
      $this.l2j_1 = font;
    if (0 === (seen0 & 128))
      $this.m2j_1 = new Pair('', '');
    else
      $this.m2j_1 = alignment;
    if (0 === (seen0 & 256))
      $this.n2j_1 = 0;
    else
      $this.n2j_1 = offsetX;
    if (0 === (seen0 & 512))
      $this.o2j_1 = 0;
    else
      $this.o2j_1 = offsetY;
    return $this;
  }
  function TextVisualData_init_$Create$(seen0, id, transparency, style, filters, flipped, text, font, alignment, offsetX, offsetY, serializationConstructorMarker) {
    return TextVisualData_init_$Init$(seen0, id, transparency, style, filters, flipped, text, font, alignment, offsetX, offsetY, serializationConstructorMarker, objectCreate(protoOf(TextVisualData)));
  }
  function TextVisualData(text, font, alignment, offsetX, offsetY) {
    Companion_getInstance_48();
    text = text === VOID ? '' : text;
    font = font === VOID ? new FontData(16, 'rgba(0,0,0,1)', 'Arial', 400, 'normal') : font;
    alignment = alignment === VOID ? new Pair('', '') : alignment;
    offsetX = offsetX === VOID ? 0 : offsetX;
    offsetY = offsetY === VOID ? 0 : offsetY;
    SingleLayerVisualData.call(this);
    this.k2j_1 = text;
    this.l2j_1 = font;
    this.m2j_1 = alignment;
    this.n2j_1 = offsetX;
    this.o2j_1 = offsetY;
  }
  protoOf(TextVisualData).toString = function () {
    return 'TextVisualData(text=' + this.k2j_1 + ', font=' + this.l2j_1.toString() + ', alignment=' + this.m2j_1.toString() + ', offsetX=' + this.n2j_1 + ', offsetY=' + this.o2j_1 + ')';
  };
  protoOf(TextVisualData).hashCode = function () {
    var result = getStringHashCode(this.k2j_1);
    result = imul(result, 31) + this.l2j_1.hashCode() | 0;
    result = imul(result, 31) + this.m2j_1.hashCode() | 0;
    result = imul(result, 31) + this.n2j_1 | 0;
    result = imul(result, 31) + this.o2j_1 | 0;
    return result;
  };
  protoOf(TextVisualData).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof TextVisualData))
      return false;
    var tmp0_other_with_cast = other instanceof TextVisualData ? other : THROW_CCE();
    if (!(this.k2j_1 === tmp0_other_with_cast.k2j_1))
      return false;
    if (!this.l2j_1.equals(tmp0_other_with_cast.l2j_1))
      return false;
    if (!this.m2j_1.equals(tmp0_other_with_cast.m2j_1))
      return false;
    if (!(this.n2j_1 === tmp0_other_with_cast.n2j_1))
      return false;
    if (!(this.o2j_1 === tmp0_other_with_cast.o2j_1))
      return false;
    return true;
  };
  function Companion_49() {
    Companion_instance_49 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.p2j_1 = [null, new ArrayListSerializer(Companion_getInstance_45().g16())];
  }
  var Companion_instance_49;
  function Companion_getInstance_49() {
    if (Companion_instance_49 == null)
      new Companion_49();
    return Companion_instance_49;
  }
  function $serializer_36() {
    $serializer_instance_36 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('CompoundVisualData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('children', true);
    this.q2j_1 = tmp0_serialDesc;
  }
  protoOf($serializer_36).r2j = function (encoder, value) {
    var tmp0_desc = this.q2j_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_49().p2j_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.y2h_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.y2h_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !equals(value.t2j_1, emptyList())) {
      tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.t2j_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_36).ti = function (encoder, value) {
    return this.r2j(encoder, value instanceof CompoundVisualData ? value : THROW_CCE());
  };
  protoOf($serializer_36).ui = function (decoder) {
    var tmp0_desc = this.q2j_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    var tmp7_cached = Companion_getInstance_49().p2j_1;
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.nm(tmp0_desc, 1, tmp7_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.nm(tmp0_desc, 1, tmp7_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return CompoundVisualData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_36).si = function () {
    return this.q2j_1;
  };
  protoOf($serializer_36).eu = function () {
    var tmp0_cached = Companion_getInstance_49().p2j_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), tmp0_cached[1]];
  };
  var $serializer_instance_36;
  function $serializer_getInstance_36() {
    if ($serializer_instance_36 == null)
      new $serializer_36();
    return $serializer_instance_36;
  }
  function CompoundVisualData_init_$Init$(seen0, id, children, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_36().q2j_1);
    }
    VisualData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2))
      $this.t2j_1 = emptyList();
    else
      $this.t2j_1 = children;
    return $this;
  }
  function CompoundVisualData_init_$Create$(seen0, id, children, serializationConstructorMarker) {
    return CompoundVisualData_init_$Init$(seen0, id, children, serializationConstructorMarker, objectCreate(protoOf(CompoundVisualData)));
  }
  function CompoundVisualData(children) {
    Companion_getInstance_49();
    children = children === VOID ? emptyList() : children;
    VisualData.call(this);
    this.t2j_1 = children;
  }
  protoOf(CompoundVisualData).toString = function () {
    return 'CompoundVisualData(children=' + toString_0(this.t2j_1) + ')';
  };
  protoOf(CompoundVisualData).hashCode = function () {
    return hashCode(this.t2j_1);
  };
  protoOf(CompoundVisualData).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CompoundVisualData))
      return false;
    var tmp0_other_with_cast = other instanceof CompoundVisualData ? other : THROW_CCE();
    if (!equals(this.t2j_1, tmp0_other_with_cast.t2j_1))
      return false;
    return true;
  };
  function Companion_50() {
  }
  var Companion_instance_50;
  function Companion_getInstance_50() {
    return Companion_instance_50;
  }
  function $serializer_37() {
    $serializer_instance_37 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('FontData', this, 5);
    tmp0_serialDesc.pt('size', true);
    tmp0_serialDesc.pt('color', true);
    tmp0_serialDesc.pt('family', true);
    tmp0_serialDesc.pt('fontWeight', true);
    tmp0_serialDesc.pt('fontStyle', true);
    this.u2j_1 = tmp0_serialDesc;
  }
  protoOf($serializer_37).v2j = function (encoder, value) {
    var tmp0_desc = this.u2j_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.w2j_1 === 16)) {
      tmp1_output.ln(tmp0_desc, 0, value.w2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.x2j_1 === '')) {
      tmp1_output.qn(tmp0_desc, 1, value.x2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.y2j_1 === '')) {
      tmp1_output.qn(tmp0_desc, 2, value.y2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.z2j_1 === 400)) {
      tmp1_output.ln(tmp0_desc, 3, value.z2j_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.a2k_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.a2k_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_37).ti = function (encoder, value) {
    return this.v2j(encoder, value instanceof FontData ? value : THROW_CCE());
  };
  protoOf($serializer_37).ui = function (decoder) {
    var tmp0_desc = this.u2j_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = 0;
    var tmp5_local1 = null;
    var tmp6_local2 = null;
    var tmp7_local3 = 0;
    var tmp8_local4 = null;
    var tmp9_input = decoder.bm(tmp0_desc);
    if (tmp9_input.rm()) {
      tmp4_local0 = tmp9_input.gm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp9_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp9_input.lm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp9_input.gm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp9_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp9_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp9_input.gm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp9_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp9_input.lm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp9_input.gm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp9_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp9_input.cm(tmp0_desc);
    return FontData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, null);
  };
  protoOf($serializer_37).si = function () {
    return this.u2j_1;
  };
  protoOf($serializer_37).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [IntSerializer_getInstance(), StringSerializer_getInstance(), StringSerializer_getInstance(), IntSerializer_getInstance(), StringSerializer_getInstance()];
  };
  var $serializer_instance_37;
  function $serializer_getInstance_37() {
    if ($serializer_instance_37 == null)
      new $serializer_37();
    return $serializer_instance_37;
  }
  function FontData_init_$Init$(seen0, size, color, family, fontWeight, fontStyle, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_37().u2j_1);
    }
    if (0 === (seen0 & 1))
      $this.w2j_1 = 16;
    else
      $this.w2j_1 = size;
    if (0 === (seen0 & 2))
      $this.x2j_1 = '';
    else
      $this.x2j_1 = color;
    if (0 === (seen0 & 4))
      $this.y2j_1 = '';
    else
      $this.y2j_1 = family;
    if (0 === (seen0 & 8))
      $this.z2j_1 = 400;
    else
      $this.z2j_1 = fontWeight;
    if (0 === (seen0 & 16))
      $this.a2k_1 = '';
    else
      $this.a2k_1 = fontStyle;
    return $this;
  }
  function FontData_init_$Create$(seen0, size, color, family, fontWeight, fontStyle, serializationConstructorMarker) {
    return FontData_init_$Init$(seen0, size, color, family, fontWeight, fontStyle, serializationConstructorMarker, objectCreate(protoOf(FontData)));
  }
  function FontData(size, color, family, fontWeight, fontStyle) {
    size = size === VOID ? 16 : size;
    color = color === VOID ? '' : color;
    family = family === VOID ? '' : family;
    fontWeight = fontWeight === VOID ? 400 : fontWeight;
    fontStyle = fontStyle === VOID ? '' : fontStyle;
    this.w2j_1 = size;
    this.x2j_1 = color;
    this.y2j_1 = family;
    this.z2j_1 = fontWeight;
    this.a2k_1 = fontStyle;
  }
  protoOf(FontData).toString = function () {
    return 'FontData(size=' + this.w2j_1 + ', color=' + this.x2j_1 + ', family=' + this.y2j_1 + ', fontWeight=' + this.z2j_1 + ', fontStyle=' + this.a2k_1 + ')';
  };
  protoOf(FontData).hashCode = function () {
    var result = this.w2j_1;
    result = imul(result, 31) + getStringHashCode(this.x2j_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.y2j_1) | 0;
    result = imul(result, 31) + this.z2j_1 | 0;
    result = imul(result, 31) + getStringHashCode(this.a2k_1) | 0;
    return result;
  };
  protoOf(FontData).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof FontData))
      return false;
    var tmp0_other_with_cast = other instanceof FontData ? other : THROW_CCE();
    if (!(this.w2j_1 === tmp0_other_with_cast.w2j_1))
      return false;
    if (!(this.x2j_1 === tmp0_other_with_cast.x2j_1))
      return false;
    if (!(this.y2j_1 === tmp0_other_with_cast.y2j_1))
      return false;
    if (!(this.z2j_1 === tmp0_other_with_cast.z2j_1))
      return false;
    if (!(this.a2k_1 === tmp0_other_with_cast.a2k_1))
      return false;
    return true;
  };
  function ActionProp_DEFAULT_getInstance() {
    ActionProp_initEntries();
    return ActionProp_DEFAULT_instance;
  }
  function ActionProp_SHOW_MENU_SCENE_getInstance() {
    ActionProp_initEntries();
    return ActionProp_SHOW_MENU_SCENE_instance;
  }
  function ActionProp_SHOW_GAME_SCENE_getInstance() {
    ActionProp_initEntries();
    return ActionProp_SHOW_GAME_SCENE_instance;
  }
  function ActionProp_HIDE_MENU_SCENE_getInstance() {
    ActionProp_initEntries();
    return ActionProp_HIDE_MENU_SCENE_instance;
  }
  function ActionProp_HIDE_GAME_SCENE_getInstance() {
    ActionProp_initEntries();
    return ActionProp_HIDE_GAME_SCENE_instance;
  }
  function ActionProp_UPDATE_COMPONENT_getInstance() {
    ActionProp_initEntries();
    return ActionProp_UPDATE_COMPONENT_instance;
  }
  function ActionProp_UPDATE_VISUAL_getInstance() {
    ActionProp_initEntries();
    return ActionProp_UPDATE_VISUAL_instance;
  }
  function ActionProp_DRAG_START_getInstance() {
    ActionProp_initEntries();
    return ActionProp_DRAG_START_instance;
  }
  function ActionProp_DRAG_END_getInstance() {
    ActionProp_initEntries();
    return ActionProp_DRAG_END_instance;
  }
  function ActionProp_DRAG_DROP_getInstance() {
    ActionProp_initEntries();
    return ActionProp_DRAG_DROP_instance;
  }
  function _get_$cachedSerializer__te6jhj_12($this) {
    return $this.c2k_1.u1();
  }
  function ComponentAnimationData$Companion$_anonymous__o4uby6() {
    var tmp = getKClass(ComponentAnimationData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_51() {
    Companion_instance_51 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.b2k_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16()];
    var tmp_1 = this;
    var tmp_2 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_1.c2k_1 = lazy(tmp_2, ComponentAnimationData$Companion$_anonymous__o4uby6);
  }
  protoOf(Companion_51).g16 = function () {
    return _get_$cachedSerializer__te6jhj_12(this);
  };
  protoOf(Companion_51).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_51;
  function Companion_getInstance_51() {
    if (Companion_instance_51 == null)
      new Companion_51();
    return Companion_instance_51;
  }
  function ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this) {
    AnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, $this);
    if (0 === (seen0 & 32))
      $this.i2k_1 = null;
    else
      $this.i2k_1 = componentView;
    return $this;
  }
  function ComponentAnimationData() {
    Companion_getInstance_51();
    AnimationData.call(this);
    this.i2k_1 = null;
  }
  function Companion_52() {
    Companion_instance_52 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.j2k_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null];
  }
  var Companion_instance_52;
  function Companion_getInstance_52() {
    if (Companion_instance_52 == null)
      new Companion_52();
    return Companion_instance_52;
  }
  function $serializer_38() {
    $serializer_instance_38 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.DelayAnimationData', this, 5);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    this.k2k_1 = tmp0_serialDesc;
  }
  protoOf($serializer_38).l2k = function (encoder, value) {
    var tmp0_desc = this.k2k_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_52().j2k_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_38).ti = function (encoder, value) {
    return this.l2k(encoder, value instanceof DelayAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_38).ui = function (decoder) {
    var tmp0_desc = this.k2k_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_input = decoder.bm(tmp0_desc);
    var tmp10_cached = Companion_getInstance_52().j2k_1;
    if (tmp9_input.rm()) {
      tmp4_local0 = tmp9_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp9_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp9_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp9_input.pm(tmp0_desc, 3, tmp10_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp9_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp9_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp9_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp9_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp9_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp9_input.pm(tmp0_desc, 3, tmp10_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp9_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp9_input.cm(tmp0_desc);
    return DelayAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, null);
  };
  protoOf($serializer_38).si = function () {
    return this.k2k_1;
  };
  protoOf($serializer_38).eu = function () {
    var tmp0_cached = Companion_getInstance_52().j2k_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance()];
  };
  var $serializer_instance_38;
  function $serializer_getInstance_38() {
    if ($serializer_instance_38 == null)
      new $serializer_38();
    return $serializer_instance_38;
  }
  function DelayAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_38().k2k_1);
    }
    AnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, $this);
    return $this;
  }
  function DelayAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker) {
    return DelayAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, objectCreate(protoOf(DelayAnimationData)));
  }
  function DelayAnimationData() {
    Companion_getInstance_52();
    AnimationData.call(this);
  }
  function Companion_53() {
    Companion_instance_53 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.m2k_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null, null];
  }
  var Companion_instance_53;
  function Companion_getInstance_53() {
    if (Companion_instance_53 == null)
      new Companion_53();
    return Companion_instance_53;
  }
  function $serializer_39() {
    $serializer_instance_39 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.DiceAnimationData', this, 8);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('speed', true);
    tmp0_serialDesc.pt('toSide', true);
    this.n2k_1 = tmp0_serialDesc;
  }
  protoOf($serializer_39).o2k = function (encoder, value) {
    var tmp0_desc = this.n2k_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_53().m2k_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.v2k_1 === 50)) {
      tmp1_output.ln(tmp0_desc, 6, value.v2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !(value.d2l_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 7, value.d2l_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_39).ti = function (encoder, value) {
    return this.o2k(encoder, value instanceof DiceAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_39).ui = function (decoder) {
    var tmp0_desc = this.n2k_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0;
    var tmp12_input = decoder.bm(tmp0_desc);
    var tmp13_cached = Companion_getInstance_53().m2k_1;
    if (tmp12_input.rm()) {
      tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp12_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp12_input.gm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp12_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp12_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp12_input.gm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp12_input.cm(tmp0_desc);
    return DiceAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, null);
  };
  protoOf($serializer_39).si = function () {
    return this.n2k_1;
  };
  protoOf($serializer_39).eu = function () {
    var tmp0_cached = Companion_getInstance_53().m2k_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), IntSerializer_getInstance()];
  };
  var $serializer_instance_39;
  function $serializer_getInstance_39() {
    if ($serializer_instance_39 == null)
      new $serializer_39();
    return $serializer_instance_39;
  }
  function DiceAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, toSide, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_39().n2k_1);
    }
    SteppedComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, serializationConstructorMarker, $this);
    if (0 === (seen0 & 128))
      $this.d2l_1 = 0;
    else
      $this.d2l_1 = toSide;
    return $this;
  }
  function DiceAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, toSide, serializationConstructorMarker) {
    return DiceAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, toSide, serializationConstructorMarker, objectCreate(protoOf(DiceAnimationData)));
  }
  function DiceAnimationData() {
    Companion_getInstance_53();
    SteppedComponentAnimationData.call(this);
    this.d2l_1 = 0;
  }
  function Companion_54() {
    Companion_instance_54 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.e2l_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null, null];
  }
  var Companion_instance_54;
  function Companion_getInstance_54() {
    if (Companion_instance_54 == null)
      new Companion_54();
    return Companion_instance_54;
  }
  function $serializer_40() {
    $serializer_instance_40 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.FadeAnimationData', this, 8);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('fromOpacity', true);
    tmp0_serialDesc.pt('toOpacity', true);
    this.f2l_1 = tmp0_serialDesc;
  }
  protoOf($serializer_40).g2l = function (encoder, value) {
    var tmp0_desc = this.f2l_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_54().e2l_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    var tmp;
    if (tmp1_output.yn(tmp0_desc, 6)) {
      tmp = true;
    } else {
      var tmp_0 = value.n2l_1;
      var tmp0_safe_receiver = value.i2k_1;
      var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.h1s_1;
      tmp = !equals(tmp_0, tmp0_elvis_lhs == null ? 0.0 : tmp0_elvis_lhs);
    }
    if (tmp) {
      tmp1_output.on(tmp0_desc, 6, value.n2l_1);
    }
    var tmp_1;
    if (tmp1_output.yn(tmp0_desc, 7)) {
      tmp_1 = true;
    } else {
      var tmp_2 = value.o2l_1;
      var tmp1_safe_receiver = value.i2k_1;
      var tmp0_elvis_lhs_0 = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.h1s_1;
      tmp_1 = !equals(tmp_2, tmp0_elvis_lhs_0 == null ? 1.0 : tmp0_elvis_lhs_0);
    }
    if (tmp_1) {
      tmp1_output.on(tmp0_desc, 7, value.o2l_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_40).ti = function (encoder, value) {
    return this.g2l(encoder, value instanceof FadeAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_40).ui = function (decoder) {
    var tmp0_desc = this.f2l_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0.0;
    var tmp11_local7 = 0.0;
    var tmp12_input = decoder.bm(tmp0_desc);
    var tmp13_cached = Companion_getInstance_54().e2l_1;
    if (tmp12_input.rm()) {
      tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp12_input.jm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp12_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp12_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp12_input.jm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp12_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp12_input.cm(tmp0_desc);
    return FadeAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, null);
  };
  protoOf($serializer_40).si = function () {
    return this.f2l_1;
  };
  protoOf($serializer_40).eu = function () {
    var tmp0_cached = Companion_getInstance_54().e2l_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_40;
  function $serializer_getInstance_40() {
    if ($serializer_instance_40 == null)
      new $serializer_40();
    return $serializer_instance_40;
  }
  function FadeAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromOpacity, toOpacity, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_40().f2l_1);
    }
    ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this);
    if (0 === (seen0 & 64)) {
      var tmp = $this;
      var tmp0_safe_receiver = $this.i2k_1;
      var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.h1s_1;
      tmp.n2l_1 = tmp0_elvis_lhs == null ? 0.0 : tmp0_elvis_lhs;
    } else
      $this.n2l_1 = fromOpacity;
    if (0 === (seen0 & 128)) {
      var tmp_0 = $this;
      var tmp1_safe_receiver = $this.i2k_1;
      var tmp0_elvis_lhs_0 = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.h1s_1;
      tmp_0.o2l_1 = tmp0_elvis_lhs_0 == null ? 1.0 : tmp0_elvis_lhs_0;
    } else
      $this.o2l_1 = toOpacity;
    return $this;
  }
  function FadeAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromOpacity, toOpacity, serializationConstructorMarker) {
    return FadeAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromOpacity, toOpacity, serializationConstructorMarker, objectCreate(protoOf(FadeAnimationData)));
  }
  function FadeAnimationData() {
    Companion_getInstance_54();
    ComponentAnimationData.call(this);
    var tmp = this;
    var tmp0_safe_receiver = this.i2k_1;
    var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.h1s_1;
    tmp.n2l_1 = tmp0_elvis_lhs == null ? 0.0 : tmp0_elvis_lhs;
    var tmp_0 = this;
    var tmp1_safe_receiver = this.i2k_1;
    var tmp0_elvis_lhs_0 = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.h1s_1;
    tmp_0.o2l_1 = tmp0_elvis_lhs_0 == null ? 1.0 : tmp0_elvis_lhs_0;
  }
  function Companion_55() {
    Companion_instance_55 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.p2l_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), Companion_getInstance_44().g16(), Companion_getInstance_44().g16()];
  }
  var Companion_instance_55;
  function Companion_getInstance_55() {
    if (Companion_instance_55 == null)
      new Companion_55();
    return Companion_instance_55;
  }
  function $serializer_41() {
    $serializer_instance_41 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.FlipAnimationData', this, 8);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('fromVisual', true);
    tmp0_serialDesc.pt('toVisual', true);
    this.q2l_1 = tmp0_serialDesc;
  }
  protoOf($serializer_41).r2l = function (encoder, value) {
    var tmp0_desc = this.q2l_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_55().p2l_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.y2l_1 == null)) {
      tmp1_output.un(tmp0_desc, 6, tmp2_cached[6], value.y2l_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !(value.z2l_1 == null)) {
      tmp1_output.un(tmp0_desc, 7, tmp2_cached[7], value.z2l_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_41).ti = function (encoder, value) {
    return this.r2l(encoder, value instanceof FlipAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_41).ui = function (decoder) {
    var tmp0_desc = this.q2l_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = null;
    var tmp11_local7 = null;
    var tmp12_input = decoder.bm(tmp0_desc);
    var tmp13_cached = Companion_getInstance_55().p2l_1;
    if (tmp12_input.rm()) {
      tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp12_input.pm(tmp0_desc, 6, tmp13_cached[6], tmp10_local6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp12_input.pm(tmp0_desc, 7, tmp13_cached[7], tmp11_local7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp12_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp12_input.pm(tmp0_desc, 6, tmp13_cached[6], tmp10_local6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp12_input.pm(tmp0_desc, 7, tmp13_cached[7], tmp11_local7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp12_input.cm(tmp0_desc);
    return FlipAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, null);
  };
  protoOf($serializer_41).si = function () {
    return this.q2l_1;
  };
  protoOf($serializer_41).eu = function () {
    var tmp0_cached = Companion_getInstance_55().p2l_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), get_nullable(tmp0_cached[6]), get_nullable(tmp0_cached[7])];
  };
  var $serializer_instance_41;
  function $serializer_getInstance_41() {
    if ($serializer_instance_41 == null)
      new $serializer_41();
    return $serializer_instance_41;
  }
  function FlipAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromVisual, toVisual, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_41().q2l_1);
    }
    ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this);
    if (0 === (seen0 & 64))
      $this.y2l_1 = null;
    else
      $this.y2l_1 = fromVisual;
    if (0 === (seen0 & 128))
      $this.z2l_1 = null;
    else
      $this.z2l_1 = toVisual;
    return $this;
  }
  function FlipAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromVisual, toVisual, serializationConstructorMarker) {
    return FlipAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromVisual, toVisual, serializationConstructorMarker, objectCreate(protoOf(FlipAnimationData)));
  }
  function FlipAnimationData() {
    Companion_getInstance_55();
    ComponentAnimationData.call(this);
    this.y2l_1 = null;
    this.z2l_1 = null;
  }
  function Companion_56() {
    Companion_instance_56 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.a2m_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null, null];
  }
  var Companion_instance_56;
  function Companion_getInstance_56() {
    if (Companion_instance_56 == null)
      new Companion_56();
    return Companion_instance_56;
  }
  function $serializer_42() {
    $serializer_instance_42 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.MovementAnimationData', this, 8);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('byX', true);
    tmp0_serialDesc.pt('byY', true);
    this.b2m_1 = tmp0_serialDesc;
  }
  protoOf($serializer_42).c2m = function (encoder, value) {
    var tmp0_desc = this.b2m_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_56().a2m_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.j2m_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 6, value.j2m_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !(value.k2m_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 7, value.k2m_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_42).ti = function (encoder, value) {
    return this.c2m(encoder, value instanceof MovementAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_42).ui = function (decoder) {
    var tmp0_desc = this.b2m_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = 0;
    var tmp12_input = decoder.bm(tmp0_desc);
    var tmp13_cached = Companion_getInstance_56().a2m_1;
    if (tmp12_input.rm()) {
      tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp12_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp12_input.gm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp12_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp12_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp12_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp12_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp12_input.pm(tmp0_desc, 3, tmp13_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp12_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp12_input.pm(tmp0_desc, 5, tmp13_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp12_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp12_input.gm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp12_input.cm(tmp0_desc);
    return MovementAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, null);
  };
  protoOf($serializer_42).si = function () {
    return this.b2m_1;
  };
  protoOf($serializer_42).eu = function () {
    var tmp0_cached = Companion_getInstance_56().a2m_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), IntSerializer_getInstance()];
  };
  var $serializer_instance_42;
  function $serializer_getInstance_42() {
    if ($serializer_instance_42 == null)
      new $serializer_42();
    return $serializer_instance_42;
  }
  function MovementAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, byX, byY, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_42().b2m_1);
    }
    ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this);
    if (0 === (seen0 & 64))
      $this.j2m_1 = 0;
    else
      $this.j2m_1 = byX;
    if (0 === (seen0 & 128))
      $this.k2m_1 = 0;
    else
      $this.k2m_1 = byY;
    return $this;
  }
  function MovementAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, byX, byY, serializationConstructorMarker) {
    return MovementAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, byX, byY, serializationConstructorMarker, objectCreate(protoOf(MovementAnimationData)));
  }
  function MovementAnimationData() {
    Companion_getInstance_56();
    ComponentAnimationData.call(this);
    this.j2m_1 = 0;
    this.k2m_1 = 0;
  }
  function Companion_57() {
    Companion_instance_57 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.l2m_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, new ArrayListSerializer(Companion_getInstance_5().g16())];
  }
  var Companion_instance_57;
  function Companion_getInstance_57() {
    if (Companion_instance_57 == null)
      new Companion_57();
    return Companion_instance_57;
  }
  function $serializer_43() {
    $serializer_instance_43 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.ParallelAnimationData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('animations', true);
    this.m2m_1 = tmp0_serialDesc;
  }
  protoOf($serializer_43).n2m = function (encoder, value) {
    var tmp0_desc = this.m2m_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_57().l2m_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    var tmp;
    if (tmp1_output.yn(tmp0_desc, 5)) {
      tmp = true;
    } else {
      var tmp_0 = value.t2m_1;
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$0 = emptyList();
      tmp = !equals(tmp_0, tmp$ret$0);
    }
    if (tmp) {
      tmp1_output.sn(tmp0_desc, 5, tmp2_cached[5], value.t2m_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_43).ti = function (encoder, value) {
    return this.n2m(encoder, value instanceof ParallelAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_43).ui = function (decoder) {
    var tmp0_desc = this.m2m_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_57().l2m_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.pm(tmp0_desc, 3, tmp11_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.pm(tmp0_desc, 3, tmp11_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return ParallelAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_43).si = function () {
    return this.m2m_1;
  };
  protoOf($serializer_43).eu = function () {
    var tmp0_cached = Companion_getInstance_57().l2m_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), tmp0_cached[5]];
  };
  var $serializer_instance_43;
  function $serializer_getInstance_43() {
    if ($serializer_instance_43 == null)
      new $serializer_43();
    return $serializer_instance_43;
  }
  function ParallelAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, animations, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_43().m2m_1);
    }
    AnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, $this);
    if (0 === (seen0 & 32)) {
      var tmp = $this;
      // Inline function 'kotlin.collections.listOf' call
      tmp.t2m_1 = emptyList();
    } else
      $this.t2m_1 = animations;
    return $this;
  }
  function ParallelAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, animations, serializationConstructorMarker) {
    return ParallelAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, animations, serializationConstructorMarker, objectCreate(protoOf(ParallelAnimationData)));
  }
  function ParallelAnimationData() {
    Companion_getInstance_57();
    AnimationData.call(this);
    var tmp = this;
    // Inline function 'kotlin.collections.listOf' call
    tmp.t2m_1 = emptyList();
  }
  function Companion_58() {
    Companion_instance_58 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.u2m_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null, new ArrayListSerializer(Companion_getInstance_44().g16()), Companion_getInstance_44().g16()];
  }
  var Companion_instance_58;
  function Companion_getInstance_58() {
    if (Companion_instance_58 == null)
      new Companion_58();
    return Companion_instance_58;
  }
  function $serializer_44() {
    $serializer_instance_44 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.RandomizeAnimationData', this, 9);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('speed', true);
    tmp0_serialDesc.pt('visuals', true);
    tmp0_serialDesc.pt('toVisual', true);
    this.v2m_1 = tmp0_serialDesc;
  }
  protoOf($serializer_44).w2m = function (encoder, value) {
    var tmp0_desc = this.v2m_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_58().u2m_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !(value.v2k_1 === 50)) {
      tmp1_output.ln(tmp0_desc, 6, value.v2k_1);
    }
    var tmp;
    if (tmp1_output.yn(tmp0_desc, 7)) {
      tmp = true;
    } else {
      var tmp_0 = value.e2n_1;
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$0 = emptyList();
      tmp = !equals(tmp_0, tmp$ret$0);
    }
    if (tmp) {
      tmp1_output.sn(tmp0_desc, 7, tmp2_cached[7], value.e2n_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !(value.f2n_1 == null)) {
      tmp1_output.un(tmp0_desc, 8, tmp2_cached[8], value.f2n_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_44).ti = function (encoder, value) {
    return this.w2m(encoder, value instanceof RandomizeAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_44).ui = function (decoder) {
    var tmp0_desc = this.v2m_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0;
    var tmp11_local7 = null;
    var tmp12_local8 = null;
    var tmp13_input = decoder.bm(tmp0_desc);
    var tmp14_cached = Companion_getInstance_58().u2m_1;
    if (tmp13_input.rm()) {
      tmp4_local0 = tmp13_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp13_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp13_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp13_input.pm(tmp0_desc, 3, tmp14_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp13_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp13_input.pm(tmp0_desc, 5, tmp14_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp13_input.gm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp13_input.nm(tmp0_desc, 7, tmp14_cached[7], tmp11_local7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp13_input.pm(tmp0_desc, 8, tmp14_cached[8], tmp12_local8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp13_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp13_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp13_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp13_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp13_input.pm(tmp0_desc, 3, tmp14_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp13_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp13_input.pm(tmp0_desc, 5, tmp14_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp13_input.gm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp13_input.nm(tmp0_desc, 7, tmp14_cached[7], tmp11_local7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp13_input.pm(tmp0_desc, 8, tmp14_cached[8], tmp12_local8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp13_input.cm(tmp0_desc);
    return RandomizeAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, null);
  };
  protoOf($serializer_44).si = function () {
    return this.v2m_1;
  };
  protoOf($serializer_44).eu = function () {
    var tmp0_cached = Companion_getInstance_58().u2m_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), IntSerializer_getInstance(), tmp0_cached[7], get_nullable(tmp0_cached[8])];
  };
  var $serializer_instance_44;
  function $serializer_getInstance_44() {
    if ($serializer_instance_44 == null)
      new $serializer_44();
    return $serializer_instance_44;
  }
  function RandomizeAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, visuals, toVisual, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_44().v2m_1);
    }
    SteppedComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, serializationConstructorMarker, $this);
    if (0 === (seen0 & 128)) {
      var tmp = $this;
      // Inline function 'kotlin.collections.listOf' call
      tmp.e2n_1 = emptyList();
    } else
      $this.e2n_1 = visuals;
    if (0 === (seen0 & 256))
      $this.f2n_1 = null;
    else
      $this.f2n_1 = toVisual;
    return $this;
  }
  function RandomizeAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, visuals, toVisual, serializationConstructorMarker) {
    return RandomizeAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, visuals, toVisual, serializationConstructorMarker, objectCreate(protoOf(RandomizeAnimationData)));
  }
  function RandomizeAnimationData() {
    Companion_getInstance_58();
    SteppedComponentAnimationData.call(this);
    var tmp = this;
    // Inline function 'kotlin.collections.listOf' call
    tmp.e2n_1 = emptyList();
    this.f2n_1 = null;
  }
  function Companion_59() {
    Companion_instance_59 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.g2n_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null];
  }
  var Companion_instance_59;
  function Companion_getInstance_59() {
    if (Companion_instance_59 == null)
      new Companion_59();
    return Companion_instance_59;
  }
  function $serializer_45() {
    $serializer_instance_45 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.RotationAnimationData', this, 7);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('byAngle', true);
    this.h2n_1 = tmp0_serialDesc;
  }
  protoOf($serializer_45).i2n = function (encoder, value) {
    var tmp0_desc = this.h2n_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_59().g2n_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !equals(value.p2n_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 6, value.p2n_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_45).ti = function (encoder, value) {
    return this.i2n(encoder, value instanceof RotationAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_45).ui = function (decoder) {
    var tmp0_desc = this.h2n_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0.0;
    var tmp11_input = decoder.bm(tmp0_desc);
    var tmp12_cached = Companion_getInstance_59().g2n_1;
    if (tmp11_input.rm()) {
      tmp4_local0 = tmp11_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp11_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp11_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp11_input.pm(tmp0_desc, 3, tmp12_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp11_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp11_input.pm(tmp0_desc, 5, tmp12_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp11_input.jm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp11_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp11_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp11_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp11_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp11_input.pm(tmp0_desc, 3, tmp12_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp11_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp11_input.pm(tmp0_desc, 5, tmp12_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp11_input.jm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp11_input.cm(tmp0_desc);
    return RotationAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, null);
  };
  protoOf($serializer_45).si = function () {
    return this.h2n_1;
  };
  protoOf($serializer_45).eu = function () {
    var tmp0_cached = Companion_getInstance_59().g2n_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_45;
  function $serializer_getInstance_45() {
    if ($serializer_instance_45 == null)
      new $serializer_45();
    return $serializer_instance_45;
  }
  function RotationAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, byAngle, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_45().h2n_1);
    }
    ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this);
    if (0 === (seen0 & 64))
      $this.p2n_1 = 0.0;
    else
      $this.p2n_1 = byAngle;
    return $this;
  }
  function RotationAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, byAngle, serializationConstructorMarker) {
    return RotationAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, byAngle, serializationConstructorMarker, objectCreate(protoOf(RotationAnimationData)));
  }
  function RotationAnimationData() {
    Companion_getInstance_59();
    ComponentAnimationData.call(this);
    this.p2n_1 = 0.0;
  }
  function Companion_60() {
    Companion_instance_60 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.q2n_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null, null, null, null];
  }
  var Companion_instance_60;
  function Companion_getInstance_60() {
    if (Companion_instance_60 == null)
      new Companion_60();
    return Companion_instance_60;
  }
  function $serializer_46() {
    $serializer_instance_46 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.ScaleAnimationData', this, 10);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('componentView', true);
    tmp0_serialDesc.pt('fromScaleX', true);
    tmp0_serialDesc.pt('fromScaleY', true);
    tmp0_serialDesc.pt('toScaleX', true);
    tmp0_serialDesc.pt('toScaleY', true);
    this.r2n_1 = tmp0_serialDesc;
  }
  protoOf($serializer_46).s2n = function (encoder, value) {
    var tmp0_desc = this.r2n_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_60().q2n_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.i2k_1 == null)) {
      tmp1_output.un(tmp0_desc, 5, tmp2_cached[5], value.i2k_1);
    }
    if (tmp1_output.yn(tmp0_desc, 6) ? true : !equals(value.z2n_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 6, value.z2n_1);
    }
    if (tmp1_output.yn(tmp0_desc, 7) ? true : !equals(value.a2o_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 7, value.a2o_1);
    }
    if (tmp1_output.yn(tmp0_desc, 8) ? true : !equals(value.b2o_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 8, value.b2o_1);
    }
    if (tmp1_output.yn(tmp0_desc, 9) ? true : !equals(value.c2o_1, 0.0)) {
      tmp1_output.on(tmp0_desc, 9, value.c2o_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_46).ti = function (encoder, value) {
    return this.s2n(encoder, value instanceof ScaleAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_46).ui = function (decoder) {
    var tmp0_desc = this.r2n_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_local6 = 0.0;
    var tmp11_local7 = 0.0;
    var tmp12_local8 = 0.0;
    var tmp13_local9 = 0.0;
    var tmp14_input = decoder.bm(tmp0_desc);
    var tmp15_cached = Companion_getInstance_60().q2n_1;
    if (tmp14_input.rm()) {
      tmp4_local0 = tmp14_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp14_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp14_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp14_input.pm(tmp0_desc, 3, tmp15_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp14_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp14_input.pm(tmp0_desc, 5, tmp15_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp14_input.jm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
      tmp11_local7 = tmp14_input.jm(tmp0_desc, 7);
      tmp3_bitMask0 = tmp3_bitMask0 | 128;
      tmp12_local8 = tmp14_input.jm(tmp0_desc, 8);
      tmp3_bitMask0 = tmp3_bitMask0 | 256;
      tmp13_local9 = tmp14_input.jm(tmp0_desc, 9);
      tmp3_bitMask0 = tmp3_bitMask0 | 512;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp14_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp14_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp14_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp14_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp14_input.pm(tmp0_desc, 3, tmp15_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp14_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp14_input.pm(tmp0_desc, 5, tmp15_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp14_input.jm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          case 7:
            tmp11_local7 = tmp14_input.jm(tmp0_desc, 7);
            tmp3_bitMask0 = tmp3_bitMask0 | 128;
            break;
          case 8:
            tmp12_local8 = tmp14_input.jm(tmp0_desc, 8);
            tmp3_bitMask0 = tmp3_bitMask0 | 256;
            break;
          case 9:
            tmp13_local9 = tmp14_input.jm(tmp0_desc, 9);
            tmp3_bitMask0 = tmp3_bitMask0 | 512;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp14_input.cm(tmp0_desc);
    return ScaleAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, tmp11_local7, tmp12_local8, tmp13_local9, null);
  };
  protoOf($serializer_46).si = function () {
    return this.r2n_1;
  };
  protoOf($serializer_46).eu = function () {
    var tmp0_cached = Companion_getInstance_60().q2n_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), get_nullable(tmp0_cached[5]), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_46;
  function $serializer_getInstance_46() {
    if ($serializer_instance_46 == null)
      new $serializer_46();
    return $serializer_instance_46;
  }
  function ScaleAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromScaleX, fromScaleY, toScaleX, toScaleY, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_46().r2n_1);
    }
    ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this);
    if (0 === (seen0 & 64))
      $this.z2n_1 = 0.0;
    else
      $this.z2n_1 = fromScaleX;
    if (0 === (seen0 & 128))
      $this.a2o_1 = 0.0;
    else
      $this.a2o_1 = fromScaleY;
    if (0 === (seen0 & 256))
      $this.b2o_1 = 0.0;
    else
      $this.b2o_1 = toScaleX;
    if (0 === (seen0 & 512))
      $this.c2o_1 = 0.0;
    else
      $this.c2o_1 = toScaleY;
    return $this;
  }
  function ScaleAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromScaleX, fromScaleY, toScaleX, toScaleY, serializationConstructorMarker) {
    return ScaleAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, fromScaleX, fromScaleY, toScaleX, toScaleY, serializationConstructorMarker, objectCreate(protoOf(ScaleAnimationData)));
  }
  function ScaleAnimationData() {
    Companion_getInstance_60();
    ComponentAnimationData.call(this);
    this.z2n_1 = 0.0;
    this.a2o_1 = 0.0;
    this.b2o_1 = 0.0;
    this.c2o_1 = 0.0;
  }
  function Companion_61() {
    Companion_instance_61 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.d2o_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, new ArrayListSerializer(Companion_getInstance_5().g16())];
  }
  var Companion_instance_61;
  function Companion_getInstance_61() {
    if (Companion_instance_61 == null)
      new Companion_61();
    return Companion_instance_61;
  }
  function $serializer_47() {
    $serializer_instance_47 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.animation.SequentialAnimationData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('duration', true);
    tmp0_serialDesc.pt('isRunning', true);
    tmp0_serialDesc.pt('onFinished', true);
    tmp0_serialDesc.pt('animationType', true);
    tmp0_serialDesc.pt('animations', true);
    this.e2o_1 = tmp0_serialDesc;
  }
  protoOf($serializer_47).f2o = function (encoder, value) {
    var tmp0_desc = this.e2o_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_61().d2o_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.d1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 0, value.d1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.e1r_1 === 0)) {
      tmp1_output.ln(tmp0_desc, 1, value.e1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.f1r_1 === false)) {
      tmp1_output.in(tmp0_desc, 2, value.f1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.g1r_1 == null)) {
      tmp1_output.un(tmp0_desc, 3, tmp2_cached[3], value.g1r_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.h1r_1 === '')) {
      tmp1_output.qn(tmp0_desc, 4, value.h1r_1);
    }
    var tmp;
    if (tmp1_output.yn(tmp0_desc, 5)) {
      tmp = true;
    } else {
      var tmp_0 = value.l2o_1;
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$0 = emptyList();
      tmp = !equals(tmp_0, tmp$ret$0);
    }
    if (tmp) {
      tmp1_output.sn(tmp0_desc, 5, tmp2_cached[5], value.l2o_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_47).ti = function (encoder, value) {
    return this.f2o(encoder, value instanceof SequentialAnimationData ? value : THROW_CCE());
  };
  protoOf($serializer_47).ui = function (decoder) {
    var tmp0_desc = this.e2o_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_local2 = false;
    var tmp7_local3 = null;
    var tmp8_local4 = null;
    var tmp9_local5 = null;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_61().d2o_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.pm(tmp0_desc, 3, tmp11_cached[3], tmp7_local3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.lm(tmp0_desc, 0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.pm(tmp0_desc, 3, tmp11_cached[3], tmp7_local3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.lm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.nm(tmp0_desc, 5, tmp11_cached[5], tmp9_local5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return SequentialAnimationData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_47).si = function () {
    return this.e2o_1;
  };
  protoOf($serializer_47).eu = function () {
    var tmp0_cached = Companion_getInstance_61().d2o_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [StringSerializer_getInstance(), IntSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(tmp0_cached[3]), StringSerializer_getInstance(), tmp0_cached[5]];
  };
  var $serializer_instance_47;
  function $serializer_getInstance_47() {
    if ($serializer_instance_47 == null)
      new $serializer_47();
    return $serializer_instance_47;
  }
  function SequentialAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, animations, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_47().e2o_1);
    }
    AnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, serializationConstructorMarker, $this);
    if (0 === (seen0 & 32)) {
      var tmp = $this;
      // Inline function 'kotlin.collections.listOf' call
      tmp.l2o_1 = emptyList();
    } else
      $this.l2o_1 = animations;
    return $this;
  }
  function SequentialAnimationData_init_$Create$(seen0, id, duration, isRunning, onFinished, animationType, animations, serializationConstructorMarker) {
    return SequentialAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, animations, serializationConstructorMarker, objectCreate(protoOf(SequentialAnimationData)));
  }
  function SequentialAnimationData() {
    Companion_getInstance_61();
    AnimationData.call(this);
    var tmp = this;
    // Inline function 'kotlin.collections.listOf' call
    tmp.l2o_1 = emptyList();
  }
  function _get_$cachedSerializer__te6jhj_13($this) {
    return $this.n2o_1.u1();
  }
  function SteppedComponentAnimationData$Companion$_anonymous__9izuat() {
    var tmp = getKClass(SteppedComponentAnimationData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = [getKClass(DiceAnimationData), getKClass(RandomizeAnimationData)];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_1 = [$serializer_getInstance_39(), $serializer_getInstance_44()];
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$8 = [];
    return SealedClassSerializer_init_$Create$('data.animation.SteppedComponentAnimationData', tmp, tmp_0, tmp_1, tmp$ret$8);
  }
  function Companion_62() {
    Companion_instance_62 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    var tmp_0 = PrimitiveClasses_getInstance().functionClass(1);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.m2o_1 = [null, null, null, PolymorphicSerializer_init_$Create$(tmp_0, tmp$ret$2), null, Companion_getInstance_8().g16(), null];
    var tmp_1 = this;
    var tmp_2 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_1.n2o_1 = lazy(tmp_2, SteppedComponentAnimationData$Companion$_anonymous__9izuat);
  }
  protoOf(Companion_62).g16 = function () {
    return _get_$cachedSerializer__te6jhj_13(this);
  };
  protoOf(Companion_62).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_62;
  function Companion_getInstance_62() {
    if (Companion_instance_62 == null)
      new Companion_62();
    return Companion_instance_62;
  }
  function SteppedComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, speed, serializationConstructorMarker, $this) {
    ComponentAnimationData_init_$Init$(seen0, id, duration, isRunning, onFinished, animationType, componentView, serializationConstructorMarker, $this);
    if (0 === (seen0 & 64))
      $this.v2k_1 = 50;
    else
      $this.v2k_1 = speed;
    return $this;
  }
  function SteppedComponentAnimationData() {
    Companion_getInstance_62();
    ComponentAnimationData.call(this);
    this.v2k_1 = 50;
  }
  function Companion_63() {
  }
  var Companion_instance_63;
  function Companion_getInstance_63() {
    return Companion_instance_63;
  }
  function $serializer_48() {
    $serializer_instance_48 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.AnimationFinishedEventData', this, 1);
    tmp0_serialDesc.pt('id', true);
    this.o2o_1 = tmp0_serialDesc;
  }
  protoOf($serializer_48).p2o = function (encoder, value) {
    var tmp0_desc = this.o2o_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_48).ti = function (encoder, value) {
    return this.p2o(encoder, value instanceof AnimationFinishedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_48).ui = function (decoder) {
    var tmp0_desc = this.o2o_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_input = decoder.bm(tmp0_desc);
    if (tmp5_input.rm()) {
      tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp5_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp5_input.cm(tmp0_desc);
    return AnimationFinishedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, null);
  };
  protoOf($serializer_48).si = function () {
    return this.o2o_1;
  };
  protoOf($serializer_48).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance())];
  };
  var $serializer_instance_48;
  function $serializer_getInstance_48() {
    if ($serializer_instance_48 == null)
      new $serializer_48();
    return $serializer_instance_48;
  }
  function AnimationFinishedEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_48().o2o_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    return $this;
  }
  function AnimationFinishedEventData_init_$Create$(seen0, id, serializationConstructorMarker) {
    return AnimationFinishedEventData_init_$Init$(seen0, id, serializationConstructorMarker, objectCreate(protoOf(AnimationFinishedEventData)));
  }
  function AnimationFinishedEventData() {
    EventData.call(this);
  }
  function Companion_64() {
  }
  var Companion_instance_64;
  function Companion_getInstance_64() {
    return Companion_instance_64;
  }
  function $serializer_49() {
    $serializer_instance_49 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.CheckBoxChangedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('value', false);
    this.t2o_1 = tmp0_serialDesc;
  }
  protoOf($serializer_49).u2o = function (encoder, value) {
    var tmp0_desc = this.t2o_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.in(tmp0_desc, 1, value.w2o_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_49).ti = function (encoder, value) {
    return this.u2o(encoder, value instanceof CheckBoxChangedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_49).ui = function (decoder) {
    var tmp0_desc = this.t2o_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = false;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.dm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.dm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return CheckBoxChangedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_49).si = function () {
    return this.t2o_1;
  };
  protoOf($serializer_49).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), BooleanSerializer_getInstance()];
  };
  var $serializer_instance_49;
  function $serializer_getInstance_49() {
    if ($serializer_instance_49 == null)
      new $serializer_49();
    return $serializer_instance_49;
  }
  function CheckBoxChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_49().t2o_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.w2o_1 = value;
    return $this;
  }
  function CheckBoxChangedEventData_init_$Create$(seen0, id, value, serializationConstructorMarker) {
    return CheckBoxChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, objectCreate(protoOf(CheckBoxChangedEventData)));
  }
  function CheckBoxChangedEventData(value) {
    EventData.call(this);
    this.w2o_1 = value;
  }
  function Companion_65() {
  }
  var Companion_instance_65;
  function Companion_getInstance_65() {
    return Companion_instance_65;
  }
  function $serializer_50() {
    $serializer_instance_50 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.ColorInputChangedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('value', false);
    this.x2o_1 = tmp0_serialDesc;
  }
  protoOf($serializer_50).y2o = function (encoder, value) {
    var tmp0_desc = this.x2o_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.qn(tmp0_desc, 1, value.a2p_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_50).ti = function (encoder, value) {
    return this.y2o(encoder, value instanceof ColorInputChangedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_50).ui = function (decoder) {
    var tmp0_desc = this.x2o_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return ColorInputChangedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_50).si = function () {
    return this.x2o_1;
  };
  protoOf($serializer_50).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), StringSerializer_getInstance()];
  };
  var $serializer_instance_50;
  function $serializer_getInstance_50() {
    if ($serializer_instance_50 == null)
      new $serializer_50();
    return $serializer_instance_50;
  }
  function ColorInputChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_50().x2o_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.a2p_1 = value;
    return $this;
  }
  function ColorInputChangedEventData_init_$Create$(seen0, id, value, serializationConstructorMarker) {
    return ColorInputChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, objectCreate(protoOf(ColorInputChangedEventData)));
  }
  function ColorInputChangedEventData(value) {
    EventData.call(this);
    this.a2p_1 = value;
  }
  function Companion_66() {
  }
  var Companion_instance_66;
  function Companion_getInstance_66() {
    return Companion_instance_66;
  }
  function $serializer_51() {
    $serializer_instance_51 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.DragDroppedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('target', false);
    this.b2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_51).c2p = function (encoder, value) {
    var tmp0_desc = this.b2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.qn(tmp0_desc, 1, value.e2p_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_51).ti = function (encoder, value) {
    return this.c2p(encoder, value instanceof DragDroppedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_51).ui = function (decoder) {
    var tmp0_desc = this.b2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return DragDroppedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_51).si = function () {
    return this.b2p_1;
  };
  protoOf($serializer_51).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), StringSerializer_getInstance()];
  };
  var $serializer_instance_51;
  function $serializer_getInstance_51() {
    if ($serializer_instance_51 == null)
      new $serializer_51();
    return $serializer_instance_51;
  }
  function DragDroppedEventData_init_$Init$(seen0, id, target, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_51().b2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.e2p_1 = target;
    return $this;
  }
  function DragDroppedEventData_init_$Create$(seen0, id, target, serializationConstructorMarker) {
    return DragDroppedEventData_init_$Init$(seen0, id, target, serializationConstructorMarker, objectCreate(protoOf(DragDroppedEventData)));
  }
  function DragDroppedEventData(target) {
    EventData.call(this);
    this.e2p_1 = target;
  }
  function Companion_67() {
  }
  var Companion_instance_67;
  function Companion_getInstance_67() {
    return Companion_instance_67;
  }
  function $serializer_52() {
    $serializer_instance_52 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.DragGestureEndedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('droppedOn', false);
    this.f2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_52).g2p = function (encoder, value) {
    var tmp0_desc = this.f2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.un(tmp0_desc, 1, StringSerializer_getInstance(), value.i2p_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_52).ti = function (encoder, value) {
    return this.g2p(encoder, value instanceof DragGestureEndedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_52).ui = function (decoder) {
    var tmp0_desc = this.f2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.pm(tmp0_desc, 1, StringSerializer_getInstance(), tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.pm(tmp0_desc, 1, StringSerializer_getInstance(), tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return DragGestureEndedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_52).si = function () {
    return this.f2p_1;
  };
  protoOf($serializer_52).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), get_nullable(StringSerializer_getInstance())];
  };
  var $serializer_instance_52;
  function $serializer_getInstance_52() {
    if ($serializer_instance_52 == null)
      new $serializer_52();
    return $serializer_instance_52;
  }
  function DragGestureEndedEventData_init_$Init$(seen0, id, droppedOn, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_52().f2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.i2p_1 = droppedOn;
    return $this;
  }
  function DragGestureEndedEventData_init_$Create$(seen0, id, droppedOn, serializationConstructorMarker) {
    return DragGestureEndedEventData_init_$Init$(seen0, id, droppedOn, serializationConstructorMarker, objectCreate(protoOf(DragGestureEndedEventData)));
  }
  function DragGestureEndedEventData(droppedOn) {
    EventData.call(this);
    this.i2p_1 = droppedOn;
  }
  function Companion_68() {
  }
  var Companion_instance_68;
  function Companion_getInstance_68() {
    return Companion_instance_68;
  }
  function $serializer_53() {
    $serializer_instance_53 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.DragGestureEnteredEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('target', false);
    this.j2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_53).k2p = function (encoder, value) {
    var tmp0_desc = this.j2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.qn(tmp0_desc, 1, value.m2p_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_53).ti = function (encoder, value) {
    return this.k2p(encoder, value instanceof DragGestureEnteredEventData ? value : THROW_CCE());
  };
  protoOf($serializer_53).ui = function (decoder) {
    var tmp0_desc = this.j2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return DragGestureEnteredEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_53).si = function () {
    return this.j2p_1;
  };
  protoOf($serializer_53).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), StringSerializer_getInstance()];
  };
  var $serializer_instance_53;
  function $serializer_getInstance_53() {
    if ($serializer_instance_53 == null)
      new $serializer_53();
    return $serializer_instance_53;
  }
  function DragGestureEnteredEventData_init_$Init$(seen0, id, target, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_53().j2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.m2p_1 = target;
    return $this;
  }
  function DragGestureEnteredEventData_init_$Create$(seen0, id, target, serializationConstructorMarker) {
    return DragGestureEnteredEventData_init_$Init$(seen0, id, target, serializationConstructorMarker, objectCreate(protoOf(DragGestureEnteredEventData)));
  }
  function DragGestureEnteredEventData(target) {
    EventData.call(this);
    this.m2p_1 = target;
  }
  function Companion_69() {
  }
  var Companion_instance_69;
  function Companion_getInstance_69() {
    return Companion_instance_69;
  }
  function $serializer_54() {
    $serializer_instance_54 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.DragGestureExitedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('target', false);
    this.n2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_54).o2p = function (encoder, value) {
    var tmp0_desc = this.n2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.qn(tmp0_desc, 1, value.q2p_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_54).ti = function (encoder, value) {
    return this.o2p(encoder, value instanceof DragGestureExitedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_54).ui = function (decoder) {
    var tmp0_desc = this.n2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return DragGestureExitedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_54).si = function () {
    return this.n2p_1;
  };
  protoOf($serializer_54).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), StringSerializer_getInstance()];
  };
  var $serializer_instance_54;
  function $serializer_getInstance_54() {
    if ($serializer_instance_54 == null)
      new $serializer_54();
    return $serializer_instance_54;
  }
  function DragGestureExitedEventData_init_$Init$(seen0, id, target, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_54().n2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.q2p_1 = target;
    return $this;
  }
  function DragGestureExitedEventData_init_$Create$(seen0, id, target, serializationConstructorMarker) {
    return DragGestureExitedEventData_init_$Init$(seen0, id, target, serializationConstructorMarker, objectCreate(protoOf(DragGestureExitedEventData)));
  }
  function DragGestureExitedEventData(target) {
    EventData.call(this);
    this.q2p_1 = target;
  }
  function Companion_70() {
  }
  var Companion_instance_70;
  function Companion_getInstance_70() {
    return Companion_instance_70;
  }
  function $serializer_55() {
    $serializer_instance_55 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.DragGestureMovedEventData', this, 1);
    tmp0_serialDesc.pt('id', true);
    this.r2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_55).s2p = function (encoder, value) {
    var tmp0_desc = this.r2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_55).ti = function (encoder, value) {
    return this.s2p(encoder, value instanceof DragGestureMovedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_55).ui = function (decoder) {
    var tmp0_desc = this.r2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_input = decoder.bm(tmp0_desc);
    if (tmp5_input.rm()) {
      tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp5_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp5_input.cm(tmp0_desc);
    return DragGestureMovedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, null);
  };
  protoOf($serializer_55).si = function () {
    return this.r2p_1;
  };
  protoOf($serializer_55).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance())];
  };
  var $serializer_instance_55;
  function $serializer_getInstance_55() {
    if ($serializer_instance_55 == null)
      new $serializer_55();
    return $serializer_instance_55;
  }
  function DragGestureMovedEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_55().r2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    return $this;
  }
  function DragGestureMovedEventData_init_$Create$(seen0, id, serializationConstructorMarker) {
    return DragGestureMovedEventData_init_$Init$(seen0, id, serializationConstructorMarker, objectCreate(protoOf(DragGestureMovedEventData)));
  }
  function DragGestureMovedEventData() {
    EventData.call(this);
  }
  function Companion_71() {
  }
  var Companion_instance_71;
  function Companion_getInstance_71() {
    return Companion_instance_71;
  }
  function $serializer_56() {
    $serializer_instance_56 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.DragGestureStartedEventData', this, 1);
    tmp0_serialDesc.pt('id', true);
    this.t2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_56).u2p = function (encoder, value) {
    var tmp0_desc = this.t2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_56).ti = function (encoder, value) {
    return this.u2p(encoder, value instanceof DragGestureStartedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_56).ui = function (decoder) {
    var tmp0_desc = this.t2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_input = decoder.bm(tmp0_desc);
    if (tmp5_input.rm()) {
      tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp5_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp5_input.cm(tmp0_desc);
    return DragGestureStartedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, null);
  };
  protoOf($serializer_56).si = function () {
    return this.t2p_1;
  };
  protoOf($serializer_56).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance())];
  };
  var $serializer_instance_56;
  function $serializer_getInstance_56() {
    if ($serializer_instance_56 == null)
      new $serializer_56();
    return $serializer_instance_56;
  }
  function DragGestureStartedEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_56().t2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    return $this;
  }
  function DragGestureStartedEventData_init_$Create$(seen0, id, serializationConstructorMarker) {
    return DragGestureStartedEventData_init_$Init$(seen0, id, serializationConstructorMarker, objectCreate(protoOf(DragGestureStartedEventData)));
  }
  function DragGestureStartedEventData() {
    EventData.call(this);
  }
  function _get_$cachedSerializer__te6jhj_14($this) {
    return $this.v2p_1.u1();
  }
  function EventData$Companion$_anonymous__stisgl() {
    var tmp = getKClass(EventData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_72() {
    Companion_instance_72 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.v2p_1 = lazy(tmp_0, EventData$Companion$_anonymous__stisgl);
  }
  protoOf(Companion_72).g16 = function () {
    return _get_$cachedSerializer__te6jhj_14(this);
  };
  protoOf(Companion_72).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_72;
  function Companion_getInstance_72() {
    if (Companion_instance_72 == null)
      new Companion_72();
    return Companion_instance_72;
  }
  function EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    if (0 === (seen0 & 1))
      $this.q2o_1 = null;
    else
      $this.q2o_1 = id;
    return $this;
  }
  function EventData() {
    Companion_getInstance_72();
    this.q2o_1 = null;
  }
  protoOf(EventData).s2o = function (_set____db54di) {
    this.q2o_1 = _set____db54di;
  };
  protoOf(EventData).r2o = function () {
    return this.q2o_1;
  };
  function Companion_73() {
    Companion_instance_73 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.w2p_1 = [null, new ArrayListSerializer(StringSerializer_getInstance())];
  }
  var Companion_instance_73;
  function Companion_getInstance_73() {
    if (Companion_instance_73 == null)
      new Companion_73();
    return Companion_instance_73;
  }
  function $serializer_57() {
    $serializer_instance_57 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.FilesPickedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('paths', false);
    this.x2p_1 = tmp0_serialDesc;
  }
  protoOf($serializer_57).y2p = function (encoder, value) {
    var tmp0_desc = this.x2p_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_73().w2p_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.a2q_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_57).ti = function (encoder, value) {
    return this.y2p(encoder, value instanceof FilesPickedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_57).ui = function (decoder) {
    var tmp0_desc = this.x2p_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    var tmp7_cached = Companion_getInstance_73().w2p_1;
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.nm(tmp0_desc, 1, tmp7_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.nm(tmp0_desc, 1, tmp7_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return FilesPickedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_57).si = function () {
    return this.x2p_1;
  };
  protoOf($serializer_57).eu = function () {
    var tmp0_cached = Companion_getInstance_73().w2p_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1]];
  };
  var $serializer_instance_57;
  function $serializer_getInstance_57() {
    if ($serializer_instance_57 == null)
      new $serializer_57();
    return $serializer_instance_57;
  }
  function FilesPickedEventData_init_$Init$(seen0, id, paths, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_57().x2p_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.a2q_1 = paths;
    return $this;
  }
  function FilesPickedEventData_init_$Create$(seen0, id, paths, serializationConstructorMarker) {
    return FilesPickedEventData_init_$Init$(seen0, id, paths, serializationConstructorMarker, objectCreate(protoOf(FilesPickedEventData)));
  }
  function FilesPickedEventData(paths) {
    Companion_getInstance_73();
    EventData.call(this);
    this.a2q_1 = paths;
  }
  function _get_$cachedSerializer__te6jhj_15($this) {
    return $this.b2q_1.u1();
  }
  function InputEventData$Companion$_anonymous__kf9x79() {
    var tmp = getKClass(InputEventData);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [];
    return PolymorphicSerializer_init_$Create$(tmp, tmp$ret$2);
  }
  function Companion_74() {
    Companion_instance_74 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.b2q_1 = lazy(tmp_0, InputEventData$Companion$_anonymous__kf9x79);
  }
  protoOf(Companion_74).g16 = function () {
    return _get_$cachedSerializer__te6jhj_15(this);
  };
  protoOf(Companion_74).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_74;
  function Companion_getInstance_74() {
    if (Companion_instance_74 == null)
      new Companion_74();
    return Companion_instance_74;
  }
  function InputEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    return $this;
  }
  function InputEventData() {
    Companion_getInstance_74();
    EventData.call(this);
  }
  function Companion_75() {
    Companion_instance_75 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.c2q_1 = [null, new PairSerializer(DoubleSerializer_getInstance(), DoubleSerializer_getInstance()), null, null, null, null];
  }
  var Companion_instance_75;
  function Companion_getInstance_75() {
    if (Companion_instance_75 == null)
      new Companion_75();
    return Companion_instance_75;
  }
  function $serializer_58() {
    $serializer_instance_58 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.InternalCameraPanData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('panTo', true);
    tmp0_serialDesc.pt('panSmooth', true);
    tmp0_serialDesc.pt('panBy', true);
    tmp0_serialDesc.pt('zoom', true);
    tmp0_serialDesc.pt('zoomOnly', true);
    this.d2q_1 = tmp0_serialDesc;
  }
  protoOf($serializer_58).e2q = function (encoder, value) {
    var tmp0_desc = this.d2q_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_75().c2q_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !(value.g2q_1 == null)) {
      tmp1_output.un(tmp0_desc, 1, tmp2_cached[1], value.g2q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !(value.h2q_1 === true)) {
      tmp1_output.in(tmp0_desc, 2, value.h2q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 3) ? true : !(value.i2q_1 === false)) {
      tmp1_output.in(tmp0_desc, 3, value.i2q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 4) ? true : !(value.j2q_1 == null)) {
      tmp1_output.un(tmp0_desc, 4, DoubleSerializer_getInstance(), value.j2q_1);
    }
    if (tmp1_output.yn(tmp0_desc, 5) ? true : !(value.k2q_1 === false)) {
      tmp1_output.in(tmp0_desc, 5, value.k2q_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_58).ti = function (encoder, value) {
    return this.e2q(encoder, value instanceof InternalCameraPanData ? value : THROW_CCE());
  };
  protoOf($serializer_58).ui = function (decoder) {
    var tmp0_desc = this.d2q_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = false;
    var tmp7_local3 = false;
    var tmp8_local4 = null;
    var tmp9_local5 = false;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_75().c2q_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.pm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.dm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.pm(tmp0_desc, 4, DoubleSerializer_getInstance(), tmp8_local4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.dm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.pm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.dm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.pm(tmp0_desc, 4, DoubleSerializer_getInstance(), tmp8_local4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.dm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return InternalCameraPanData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_58).si = function () {
    return this.d2q_1;
  };
  protoOf($serializer_58).eu = function () {
    var tmp0_cached = Companion_getInstance_75().c2q_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), get_nullable(tmp0_cached[1]), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), get_nullable(DoubleSerializer_getInstance()), BooleanSerializer_getInstance()];
  };
  var $serializer_instance_58;
  function $serializer_getInstance_58() {
    if ($serializer_instance_58 == null)
      new $serializer_58();
    return $serializer_instance_58;
  }
  function InternalCameraPanData_init_$Init$(seen0, id, panTo, panSmooth, panBy, zoom, zoomOnly, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_58().d2q_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2))
      $this.g2q_1 = null;
    else
      $this.g2q_1 = panTo;
    if (0 === (seen0 & 4))
      $this.h2q_1 = true;
    else
      $this.h2q_1 = panSmooth;
    if (0 === (seen0 & 8))
      $this.i2q_1 = false;
    else
      $this.i2q_1 = panBy;
    if (0 === (seen0 & 16))
      $this.j2q_1 = null;
    else
      $this.j2q_1 = zoom;
    if (0 === (seen0 & 32))
      $this.k2q_1 = false;
    else
      $this.k2q_1 = zoomOnly;
    return $this;
  }
  function InternalCameraPanData_init_$Create$(seen0, id, panTo, panSmooth, panBy, zoom, zoomOnly, serializationConstructorMarker) {
    return InternalCameraPanData_init_$Init$(seen0, id, panTo, panSmooth, panBy, zoom, zoomOnly, serializationConstructorMarker, objectCreate(protoOf(InternalCameraPanData)));
  }
  function InternalCameraPanData(panTo, panSmooth, panBy, zoom, zoomOnly) {
    Companion_getInstance_75();
    panTo = panTo === VOID ? null : panTo;
    panSmooth = panSmooth === VOID ? true : panSmooth;
    panBy = panBy === VOID ? false : panBy;
    zoom = zoom === VOID ? null : zoom;
    zoomOnly = zoomOnly === VOID ? false : zoomOnly;
    EventData.call(this);
    this.g2q_1 = panTo;
    this.h2q_1 = panSmooth;
    this.i2q_1 = panBy;
    this.j2q_1 = zoom;
    this.k2q_1 = zoomOnly;
  }
  protoOf(InternalCameraPanData).toString = function () {
    return 'InternalCameraPanData(panTo=' + toString_1(this.g2q_1) + ', panSmooth=' + this.h2q_1 + ', panBy=' + this.i2q_1 + ', zoom=' + this.j2q_1 + ', zoomOnly=' + this.k2q_1 + ')';
  };
  protoOf(InternalCameraPanData).hashCode = function () {
    var result = this.g2q_1 == null ? 0 : this.g2q_1.hashCode();
    result = imul(result, 31) + getBooleanHashCode(this.h2q_1) | 0;
    result = imul(result, 31) + getBooleanHashCode(this.i2q_1) | 0;
    result = imul(result, 31) + (this.j2q_1 == null ? 0 : getNumberHashCode(this.j2q_1)) | 0;
    result = imul(result, 31) + getBooleanHashCode(this.k2q_1) | 0;
    return result;
  };
  protoOf(InternalCameraPanData).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof InternalCameraPanData))
      return false;
    var tmp0_other_with_cast = other instanceof InternalCameraPanData ? other : THROW_CCE();
    if (!equals(this.g2q_1, tmp0_other_with_cast.g2q_1))
      return false;
    if (!(this.h2q_1 === tmp0_other_with_cast.h2q_1))
      return false;
    if (!(this.i2q_1 === tmp0_other_with_cast.i2q_1))
      return false;
    if (!equals(this.j2q_1, tmp0_other_with_cast.j2q_1))
      return false;
    if (!(this.k2q_1 === tmp0_other_with_cast.k2q_1))
      return false;
    return true;
  };
  function Companion_76() {
    Companion_instance_76 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.m2q_1 = [null, createSimpleEnumSerializer('tools.aqua.bgw.event.KeyCode', values_2()), null, null, null, null, Companion_getInstance_77().g16()];
  }
  var Companion_instance_76;
  function Companion_getInstance_76() {
    if (Companion_instance_76 == null)
      new Companion_76();
    return Companion_instance_76;
  }
  function $serializer_59() {
    $serializer_instance_59 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('KeyEventData', this, 7);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('keyCode', false);
    tmp0_serialDesc.pt('character', false);
    tmp0_serialDesc.pt('isControlDown', false);
    tmp0_serialDesc.pt('isShiftDown', false);
    tmp0_serialDesc.pt('isAltDown', false);
    tmp0_serialDesc.pt('action', false);
    this.n2q_1 = tmp0_serialDesc;
  }
  protoOf($serializer_59).o2q = function (encoder, value) {
    var tmp0_desc = this.n2q_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_76().m2q_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.q2q_1);
    tmp1_output.qn(tmp0_desc, 2, value.r2q_1);
    tmp1_output.in(tmp0_desc, 3, value.s2q_1);
    tmp1_output.in(tmp0_desc, 4, value.t2q_1);
    tmp1_output.in(tmp0_desc, 5, value.u2q_1);
    tmp1_output.sn(tmp0_desc, 6, tmp2_cached[6], value.v2q_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_59).ti = function (encoder, value) {
    return this.o2q(encoder, value instanceof KeyEventData ? value : THROW_CCE());
  };
  protoOf($serializer_59).ui = function (decoder) {
    var tmp0_desc = this.n2q_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = null;
    var tmp7_local3 = false;
    var tmp8_local4 = false;
    var tmp9_local5 = false;
    var tmp10_local6 = null;
    var tmp11_input = decoder.bm(tmp0_desc);
    var tmp12_cached = Companion_getInstance_76().m2q_1;
    if (tmp11_input.rm()) {
      tmp4_local0 = tmp11_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp11_input.nm(tmp0_desc, 1, tmp12_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp11_input.lm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp11_input.dm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp11_input.dm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp11_input.dm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp11_input.nm(tmp0_desc, 6, tmp12_cached[6], tmp10_local6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp11_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp11_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp11_input.nm(tmp0_desc, 1, tmp12_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp11_input.lm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp11_input.dm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp11_input.dm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp11_input.dm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp11_input.nm(tmp0_desc, 6, tmp12_cached[6], tmp10_local6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp11_input.cm(tmp0_desc);
    return KeyEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, null);
  };
  protoOf($serializer_59).si = function () {
    return this.n2q_1;
  };
  protoOf($serializer_59).eu = function () {
    var tmp0_cached = Companion_getInstance_76().m2q_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], StringSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), tmp0_cached[6]];
  };
  var $serializer_instance_59;
  function $serializer_getInstance_59() {
    if ($serializer_instance_59 == null)
      new $serializer_59();
    return $serializer_instance_59;
  }
  function KeyEventData_init_$Init$(seen0, id, keyCode, character, isControlDown, isShiftDown, isAltDown, action, serializationConstructorMarker, $this) {
    if (!(126 === (126 & seen0))) {
      throwMissingFieldException(seen0, 126, $serializer_getInstance_59().n2q_1);
    }
    InputEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.q2q_1 = keyCode;
    $this.r2q_1 = character;
    $this.s2q_1 = isControlDown;
    $this.t2q_1 = isShiftDown;
    $this.u2q_1 = isAltDown;
    $this.v2q_1 = action;
    return $this;
  }
  function KeyEventData_init_$Create$(seen0, id, keyCode, character, isControlDown, isShiftDown, isAltDown, action, serializationConstructorMarker) {
    return KeyEventData_init_$Init$(seen0, id, keyCode, character, isControlDown, isShiftDown, isAltDown, action, serializationConstructorMarker, objectCreate(protoOf(KeyEventData)));
  }
  function KeyEventData(keyCode, character, isControlDown, isShiftDown, isAltDown, action) {
    Companion_getInstance_76();
    InputEventData.call(this);
    this.q2q_1 = keyCode;
    this.r2q_1 = character;
    this.s2q_1 = isControlDown;
    this.t2q_1 = isShiftDown;
    this.u2q_1 = isAltDown;
    this.v2q_1 = action;
  }
  function _get_$cachedSerializer__te6jhj_16($this) {
    return $this.l2q_1.u1();
  }
  function KeyEventAction$Companion$_anonymous__coe4e6() {
    return createSimpleEnumSerializer('data.event.KeyEventAction', values_0());
  }
  var KeyEventAction_PRESS_instance;
  var KeyEventAction_RELEASE_instance;
  var KeyEventAction_TYPE_instance;
  function values_0() {
    return [KeyEventAction_PRESS_getInstance(), KeyEventAction_RELEASE_getInstance(), KeyEventAction_TYPE_getInstance()];
  }
  function Companion_77() {
    Companion_instance_77 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.l2q_1 = lazy(tmp_0, KeyEventAction$Companion$_anonymous__coe4e6);
  }
  protoOf(Companion_77).g16 = function () {
    return _get_$cachedSerializer__te6jhj_16(this);
  };
  protoOf(Companion_77).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_77;
  function Companion_getInstance_77() {
    KeyEventAction_initEntries();
    if (Companion_instance_77 == null)
      new Companion_77();
    return Companion_instance_77;
  }
  var KeyEventAction_entriesInitialized;
  function KeyEventAction_initEntries() {
    if (KeyEventAction_entriesInitialized)
      return Unit_instance;
    KeyEventAction_entriesInitialized = true;
    KeyEventAction_PRESS_instance = new KeyEventAction('PRESS', 0);
    KeyEventAction_RELEASE_instance = new KeyEventAction('RELEASE', 1);
    KeyEventAction_TYPE_instance = new KeyEventAction('TYPE', 2);
    Companion_getInstance_77();
  }
  function KeyEventAction(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function KeyEventAction_PRESS_getInstance() {
    KeyEventAction_initEntries();
    return KeyEventAction_PRESS_instance;
  }
  function KeyEventAction_RELEASE_getInstance() {
    KeyEventAction_initEntries();
    return KeyEventAction_RELEASE_instance;
  }
  function KeyEventAction_TYPE_getInstance() {
    KeyEventAction_initEntries();
    return KeyEventAction_TYPE_instance;
  }
  function Companion_78() {
  }
  var Companion_instance_78;
  function Companion_getInstance_78() {
    return Companion_instance_78;
  }
  function $serializer_60() {
    $serializer_instance_60 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.LoadEventData', this, 1);
    tmp0_serialDesc.pt('id', true);
    this.w2q_1 = tmp0_serialDesc;
  }
  protoOf($serializer_60).x2q = function (encoder, value) {
    var tmp0_desc = this.w2q_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_60).ti = function (encoder, value) {
    return this.x2q(encoder, value instanceof LoadEventData ? value : THROW_CCE());
  };
  protoOf($serializer_60).ui = function (decoder) {
    var tmp0_desc = this.w2q_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_input = decoder.bm(tmp0_desc);
    if (tmp5_input.rm()) {
      tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp5_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp5_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp5_input.cm(tmp0_desc);
    return LoadEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, null);
  };
  protoOf($serializer_60).si = function () {
    return this.w2q_1;
  };
  protoOf($serializer_60).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance())];
  };
  var $serializer_instance_60;
  function $serializer_getInstance_60() {
    if ($serializer_instance_60 == null)
      new $serializer_60();
    return $serializer_instance_60;
  }
  function LoadEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_60().w2q_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    return $this;
  }
  function LoadEventData_init_$Create$(seen0, id, serializationConstructorMarker) {
    return LoadEventData_init_$Init$(seen0, id, serializationConstructorMarker, objectCreate(protoOf(LoadEventData)));
  }
  function LoadEventData() {
    EventData.call(this);
  }
  function Companion_79() {
    Companion_instance_79 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.z2q_1 = [null, Companion_getInstance_90().g16(), null, null, null, null];
  }
  var Companion_instance_79;
  function Companion_getInstance_79() {
    if (Companion_instance_79 == null)
      new Companion_79();
    return Companion_instance_79;
  }
  function $serializer_61() {
    $serializer_instance_61 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('MouseEnteredEventData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('button', false);
    tmp0_serialDesc.pt('posX', false);
    tmp0_serialDesc.pt('posY', false);
    tmp0_serialDesc.pt('pX', false);
    tmp0_serialDesc.pt('pY', false);
    this.a2r_1 = tmp0_serialDesc;
  }
  protoOf($serializer_61).b2r = function (encoder, value) {
    var tmp0_desc = this.a2r_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_79().z2q_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.d2r_1);
    tmp1_output.on(tmp0_desc, 2, value.e2r_1);
    tmp1_output.on(tmp0_desc, 3, value.f2r_1);
    tmp1_output.on(tmp0_desc, 4, value.k2r_1);
    tmp1_output.on(tmp0_desc, 5, value.l2r_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_61).ti = function (encoder, value) {
    return this.b2r(encoder, value instanceof MouseEnteredEventData ? value : THROW_CCE());
  };
  protoOf($serializer_61).ui = function (decoder) {
    var tmp0_desc = this.a2r_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = 0.0;
    var tmp7_local3 = 0.0;
    var tmp8_local4 = 0.0;
    var tmp9_local5 = 0.0;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_79().z2q_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.nm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.jm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.jm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.jm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.jm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.nm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.jm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.jm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.jm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.jm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return MouseEnteredEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_61).si = function () {
    return this.a2r_1;
  };
  protoOf($serializer_61).eu = function () {
    var tmp0_cached = Companion_getInstance_79().z2q_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_61;
  function $serializer_getInstance_61() {
    if ($serializer_instance_61 == null)
      new $serializer_61();
    return $serializer_instance_61;
  }
  function MouseEnteredEventData_init_$Init$(seen0, id, button, posX, posY, pX, pY, serializationConstructorMarker, $this) {
    if (!(62 === (62 & seen0))) {
      throwMissingFieldException(seen0, 62, $serializer_getInstance_61().a2r_1);
    }
    MouseEventData_init_$Init$(seen0, id, button, posX, posY, serializationConstructorMarker, $this);
    $this.k2r_1 = pX;
    $this.l2r_1 = pY;
    return $this;
  }
  function MouseEnteredEventData_init_$Create$(seen0, id, button, posX, posY, pX, pY, serializationConstructorMarker) {
    return MouseEnteredEventData_init_$Init$(seen0, id, button, posX, posY, pX, pY, serializationConstructorMarker, objectCreate(protoOf(MouseEnteredEventData)));
  }
  function MouseEnteredEventData(pX, pY) {
    Companion_getInstance_79();
    MouseEventData.call(this, MouseButtonType_UNSPECIFIED_getInstance(), pX, pY);
    this.k2r_1 = pX;
    this.l2r_1 = pY;
  }
  function Companion_80() {
    Companion_instance_80 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.m2r_1 = [null, Companion_getInstance_90().g16(), null, null];
  }
  var Companion_instance_80;
  function Companion_getInstance_80() {
    if (Companion_instance_80 == null)
      new Companion_80();
    return Companion_instance_80;
  }
  function $serializer_62() {
    $serializer_instance_62 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('MouseEventData', this, 4);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('button', false);
    tmp0_serialDesc.pt('posX', false);
    tmp0_serialDesc.pt('posY', false);
    this.n2r_1 = tmp0_serialDesc;
  }
  protoOf($serializer_62).o2r = function (encoder, value) {
    var tmp0_desc = this.n2r_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_80().m2r_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.d2r_1);
    tmp1_output.on(tmp0_desc, 2, value.e2r_1);
    tmp1_output.on(tmp0_desc, 3, value.f2r_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_62).ti = function (encoder, value) {
    return this.o2r(encoder, value instanceof MouseEventData ? value : THROW_CCE());
  };
  protoOf($serializer_62).ui = function (decoder) {
    var tmp0_desc = this.n2r_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = 0.0;
    var tmp7_local3 = 0.0;
    var tmp8_input = decoder.bm(tmp0_desc);
    var tmp9_cached = Companion_getInstance_80().m2r_1;
    if (tmp8_input.rm()) {
      tmp4_local0 = tmp8_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp8_input.nm(tmp0_desc, 1, tmp9_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp8_input.jm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp8_input.jm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp8_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp8_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp8_input.nm(tmp0_desc, 1, tmp9_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp8_input.jm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp8_input.jm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp8_input.cm(tmp0_desc);
    return MouseEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, null);
  };
  protoOf($serializer_62).si = function () {
    return this.n2r_1;
  };
  protoOf($serializer_62).eu = function () {
    var tmp0_cached = Companion_getInstance_80().m2r_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_62;
  function $serializer_getInstance_62() {
    if ($serializer_instance_62 == null)
      new $serializer_62();
    return $serializer_instance_62;
  }
  function MouseEventData_init_$Init$(seen0, id, button, posX, posY, serializationConstructorMarker, $this) {
    if (!(14 === (14 & seen0))) {
      throwMissingFieldException(seen0, 14, $serializer_getInstance_62().n2r_1);
    }
    InputEventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.d2r_1 = button;
    $this.e2r_1 = posX;
    $this.f2r_1 = posY;
    return $this;
  }
  function MouseEventData_init_$Create$(seen0, id, button, posX, posY, serializationConstructorMarker) {
    return MouseEventData_init_$Init$(seen0, id, button, posX, posY, serializationConstructorMarker, objectCreate(protoOf(MouseEventData)));
  }
  function MouseEventData(button, posX, posY) {
    Companion_getInstance_80();
    InputEventData.call(this);
    this.d2r_1 = button;
    this.e2r_1 = posX;
    this.f2r_1 = posY;
  }
  function Companion_81() {
    Companion_instance_81 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.p2r_1 = [null, Companion_getInstance_90().g16(), null, null, null, null];
  }
  var Companion_instance_81;
  function Companion_getInstance_81() {
    if (Companion_instance_81 == null)
      new Companion_81();
    return Companion_instance_81;
  }
  function $serializer_63() {
    $serializer_instance_63 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('MouseExitedEventData', this, 6);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('button', false);
    tmp0_serialDesc.pt('posX', false);
    tmp0_serialDesc.pt('posY', false);
    tmp0_serialDesc.pt('pX', false);
    tmp0_serialDesc.pt('pY', false);
    this.q2r_1 = tmp0_serialDesc;
  }
  protoOf($serializer_63).r2r = function (encoder, value) {
    var tmp0_desc = this.q2r_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_81().p2r_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.d2r_1);
    tmp1_output.on(tmp0_desc, 2, value.e2r_1);
    tmp1_output.on(tmp0_desc, 3, value.f2r_1);
    tmp1_output.on(tmp0_desc, 4, value.w2r_1);
    tmp1_output.on(tmp0_desc, 5, value.x2r_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_63).ti = function (encoder, value) {
    return this.r2r(encoder, value instanceof MouseExitedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_63).ui = function (decoder) {
    var tmp0_desc = this.q2r_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = 0.0;
    var tmp7_local3 = 0.0;
    var tmp8_local4 = 0.0;
    var tmp9_local5 = 0.0;
    var tmp10_input = decoder.bm(tmp0_desc);
    var tmp11_cached = Companion_getInstance_81().p2r_1;
    if (tmp10_input.rm()) {
      tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp10_input.nm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp10_input.jm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp10_input.jm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp10_input.jm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp10_input.jm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp10_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp10_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp10_input.nm(tmp0_desc, 1, tmp11_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp10_input.jm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp10_input.jm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp10_input.jm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp10_input.jm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp10_input.cm(tmp0_desc);
    return MouseExitedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, null);
  };
  protoOf($serializer_63).si = function () {
    return this.q2r_1;
  };
  protoOf($serializer_63).eu = function () {
    var tmp0_cached = Companion_getInstance_81().p2r_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_63;
  function $serializer_getInstance_63() {
    if ($serializer_instance_63 == null)
      new $serializer_63();
    return $serializer_instance_63;
  }
  function MouseExitedEventData_init_$Init$(seen0, id, button, posX, posY, pX, pY, serializationConstructorMarker, $this) {
    if (!(62 === (62 & seen0))) {
      throwMissingFieldException(seen0, 62, $serializer_getInstance_63().q2r_1);
    }
    MouseEventData_init_$Init$(seen0, id, button, posX, posY, serializationConstructorMarker, $this);
    $this.w2r_1 = pX;
    $this.x2r_1 = pY;
    return $this;
  }
  function MouseExitedEventData_init_$Create$(seen0, id, button, posX, posY, pX, pY, serializationConstructorMarker) {
    return MouseExitedEventData_init_$Init$(seen0, id, button, posX, posY, pX, pY, serializationConstructorMarker, objectCreate(protoOf(MouseExitedEventData)));
  }
  function MouseExitedEventData(pX, pY) {
    Companion_getInstance_81();
    MouseEventData.call(this, MouseButtonType_UNSPECIFIED_getInstance(), pX, pY);
    this.w2r_1 = pX;
    this.x2r_1 = pY;
  }
  function Companion_82() {
    Companion_instance_82 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.y2r_1 = [null, Companion_getInstance_90().g16(), null, null, Companion_getInstance_90().g16(), null, null];
  }
  var Companion_instance_82;
  function Companion_getInstance_82() {
    if (Companion_instance_82 == null)
      new Companion_82();
    return Companion_instance_82;
  }
  function $serializer_64() {
    $serializer_instance_64 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('MousePressedEventData', this, 7);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('button', false);
    tmp0_serialDesc.pt('posX', false);
    tmp0_serialDesc.pt('posY', false);
    tmp0_serialDesc.pt('pButton', false);
    tmp0_serialDesc.pt('pX', false);
    tmp0_serialDesc.pt('pY', false);
    this.z2r_1 = tmp0_serialDesc;
  }
  protoOf($serializer_64).a2s = function (encoder, value) {
    var tmp0_desc = this.z2r_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_82().y2r_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.d2r_1);
    tmp1_output.on(tmp0_desc, 2, value.e2r_1);
    tmp1_output.on(tmp0_desc, 3, value.f2r_1);
    tmp1_output.sn(tmp0_desc, 4, tmp2_cached[4], value.f2s_1);
    tmp1_output.on(tmp0_desc, 5, value.g2s_1);
    tmp1_output.on(tmp0_desc, 6, value.h2s_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_64).ti = function (encoder, value) {
    return this.a2s(encoder, value instanceof MousePressedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_64).ui = function (decoder) {
    var tmp0_desc = this.z2r_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = 0.0;
    var tmp7_local3 = 0.0;
    var tmp8_local4 = null;
    var tmp9_local5 = 0.0;
    var tmp10_local6 = 0.0;
    var tmp11_input = decoder.bm(tmp0_desc);
    var tmp12_cached = Companion_getInstance_82().y2r_1;
    if (tmp11_input.rm()) {
      tmp4_local0 = tmp11_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp11_input.nm(tmp0_desc, 1, tmp12_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp11_input.jm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp11_input.jm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp11_input.nm(tmp0_desc, 4, tmp12_cached[4], tmp8_local4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp11_input.jm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp11_input.jm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp11_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp11_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp11_input.nm(tmp0_desc, 1, tmp12_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp11_input.jm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp11_input.jm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp11_input.nm(tmp0_desc, 4, tmp12_cached[4], tmp8_local4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp11_input.jm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp11_input.jm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp11_input.cm(tmp0_desc);
    return MousePressedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, null);
  };
  protoOf($serializer_64).si = function () {
    return this.z2r_1;
  };
  protoOf($serializer_64).eu = function () {
    var tmp0_cached = Companion_getInstance_82().y2r_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), tmp0_cached[4], DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_64;
  function $serializer_getInstance_64() {
    if ($serializer_instance_64 == null)
      new $serializer_64();
    return $serializer_instance_64;
  }
  function MousePressedEventData_init_$Init$(seen0, id, button, posX, posY, pButton, pX, pY, serializationConstructorMarker, $this) {
    if (!(126 === (126 & seen0))) {
      throwMissingFieldException(seen0, 126, $serializer_getInstance_64().z2r_1);
    }
    MouseEventData_init_$Init$(seen0, id, button, posX, posY, serializationConstructorMarker, $this);
    $this.f2s_1 = pButton;
    $this.g2s_1 = pX;
    $this.h2s_1 = pY;
    return $this;
  }
  function MousePressedEventData_init_$Create$(seen0, id, button, posX, posY, pButton, pX, pY, serializationConstructorMarker) {
    return MousePressedEventData_init_$Init$(seen0, id, button, posX, posY, pButton, pX, pY, serializationConstructorMarker, objectCreate(protoOf(MousePressedEventData)));
  }
  function MousePressedEventData(pButton, pX, pY) {
    Companion_getInstance_82();
    MouseEventData.call(this, pButton, pX, pY);
    this.f2s_1 = pButton;
    this.g2s_1 = pX;
    this.h2s_1 = pY;
  }
  function Companion_83() {
    Companion_instance_83 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.i2s_1 = [null, Companion_getInstance_90().g16(), null, null, Companion_getInstance_90().g16(), null, null];
  }
  var Companion_instance_83;
  function Companion_getInstance_83() {
    if (Companion_instance_83 == null)
      new Companion_83();
    return Companion_instance_83;
  }
  function $serializer_65() {
    $serializer_instance_65 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('MouseReleasedEventData', this, 7);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('button', false);
    tmp0_serialDesc.pt('posX', false);
    tmp0_serialDesc.pt('posY', false);
    tmp0_serialDesc.pt('pButton', false);
    tmp0_serialDesc.pt('pX', false);
    tmp0_serialDesc.pt('pY', false);
    this.j2s_1 = tmp0_serialDesc;
  }
  protoOf($serializer_65).k2s = function (encoder, value) {
    var tmp0_desc = this.j2s_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_83().i2s_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.d2r_1);
    tmp1_output.on(tmp0_desc, 2, value.e2r_1);
    tmp1_output.on(tmp0_desc, 3, value.f2r_1);
    tmp1_output.sn(tmp0_desc, 4, tmp2_cached[4], value.p2s_1);
    tmp1_output.on(tmp0_desc, 5, value.q2s_1);
    tmp1_output.on(tmp0_desc, 6, value.r2s_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_65).ti = function (encoder, value) {
    return this.k2s(encoder, value instanceof MouseReleasedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_65).ui = function (decoder) {
    var tmp0_desc = this.j2s_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = 0.0;
    var tmp7_local3 = 0.0;
    var tmp8_local4 = null;
    var tmp9_local5 = 0.0;
    var tmp10_local6 = 0.0;
    var tmp11_input = decoder.bm(tmp0_desc);
    var tmp12_cached = Companion_getInstance_83().i2s_1;
    if (tmp11_input.rm()) {
      tmp4_local0 = tmp11_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp11_input.nm(tmp0_desc, 1, tmp12_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp11_input.jm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp11_input.jm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp11_input.nm(tmp0_desc, 4, tmp12_cached[4], tmp8_local4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
      tmp9_local5 = tmp11_input.jm(tmp0_desc, 5);
      tmp3_bitMask0 = tmp3_bitMask0 | 32;
      tmp10_local6 = tmp11_input.jm(tmp0_desc, 6);
      tmp3_bitMask0 = tmp3_bitMask0 | 64;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp11_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp11_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp11_input.nm(tmp0_desc, 1, tmp12_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp11_input.jm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp11_input.jm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp11_input.nm(tmp0_desc, 4, tmp12_cached[4], tmp8_local4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          case 5:
            tmp9_local5 = tmp11_input.jm(tmp0_desc, 5);
            tmp3_bitMask0 = tmp3_bitMask0 | 32;
            break;
          case 6:
            tmp10_local6 = tmp11_input.jm(tmp0_desc, 6);
            tmp3_bitMask0 = tmp3_bitMask0 | 64;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp11_input.cm(tmp0_desc);
    return MouseReleasedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, tmp9_local5, tmp10_local6, null);
  };
  protoOf($serializer_65).si = function () {
    return this.j2s_1;
  };
  protoOf($serializer_65).eu = function () {
    var tmp0_cached = Companion_getInstance_83().i2s_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], DoubleSerializer_getInstance(), DoubleSerializer_getInstance(), tmp0_cached[4], DoubleSerializer_getInstance(), DoubleSerializer_getInstance()];
  };
  var $serializer_instance_65;
  function $serializer_getInstance_65() {
    if ($serializer_instance_65 == null)
      new $serializer_65();
    return $serializer_instance_65;
  }
  function MouseReleasedEventData_init_$Init$(seen0, id, button, posX, posY, pButton, pX, pY, serializationConstructorMarker, $this) {
    if (!(126 === (126 & seen0))) {
      throwMissingFieldException(seen0, 126, $serializer_getInstance_65().j2s_1);
    }
    MouseEventData_init_$Init$(seen0, id, button, posX, posY, serializationConstructorMarker, $this);
    $this.p2s_1 = pButton;
    $this.q2s_1 = pX;
    $this.r2s_1 = pY;
    return $this;
  }
  function MouseReleasedEventData_init_$Create$(seen0, id, button, posX, posY, pButton, pX, pY, serializationConstructorMarker) {
    return MouseReleasedEventData_init_$Init$(seen0, id, button, posX, posY, pButton, pX, pY, serializationConstructorMarker, objectCreate(protoOf(MouseReleasedEventData)));
  }
  function MouseReleasedEventData(pButton, pX, pY) {
    Companion_getInstance_83();
    MouseEventData.call(this, pButton, pX, pY);
    this.p2s_1 = pButton;
    this.q2s_1 = pX;
    this.r2s_1 = pY;
  }
  function Companion_84() {
  }
  var Companion_instance_84;
  function Companion_getInstance_84() {
    return Companion_instance_84;
  }
  function $serializer_66() {
    $serializer_instance_66 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.RadioChangedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('value', false);
    this.s2s_1 = tmp0_serialDesc;
  }
  protoOf($serializer_66).t2s = function (encoder, value) {
    var tmp0_desc = this.s2s_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.in(tmp0_desc, 1, value.v2s_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_66).ti = function (encoder, value) {
    return this.t2s(encoder, value instanceof RadioChangedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_66).ui = function (decoder) {
    var tmp0_desc = this.s2s_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = false;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.dm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.dm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return RadioChangedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_66).si = function () {
    return this.s2s_1;
  };
  protoOf($serializer_66).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), BooleanSerializer_getInstance()];
  };
  var $serializer_instance_66;
  function $serializer_getInstance_66() {
    if ($serializer_instance_66 == null)
      new $serializer_66();
    return $serializer_instance_66;
  }
  function RadioChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_66().s2s_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.v2s_1 = value;
    return $this;
  }
  function RadioChangedEventData_init_$Create$(seen0, id, value, serializationConstructorMarker) {
    return RadioChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, objectCreate(protoOf(RadioChangedEventData)));
  }
  function RadioChangedEventData(value) {
    EventData.call(this);
    this.v2s_1 = value;
  }
  function Companion_85() {
    Companion_instance_85 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.x2s_1 = [null, Companion_getInstance_91().g16(), null, null, null];
  }
  var Companion_instance_85;
  function Companion_getInstance_85() {
    if (Companion_instance_85 == null)
      new Companion_85();
    return Companion_instance_85;
  }
  function $serializer_67() {
    $serializer_instance_67 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('ScrollEventData', this, 5);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('direction', false);
    tmp0_serialDesc.pt('shift', false);
    tmp0_serialDesc.pt('alt', false);
    tmp0_serialDesc.pt('ctrl', false);
    this.y2s_1 = tmp0_serialDesc;
  }
  protoOf($serializer_67).z2s = function (encoder, value) {
    var tmp0_desc = this.y2s_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_85().x2s_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.sn(tmp0_desc, 1, tmp2_cached[1], value.b2t_1);
    tmp1_output.in(tmp0_desc, 2, value.c2t_1);
    tmp1_output.in(tmp0_desc, 3, value.d2t_1);
    tmp1_output.in(tmp0_desc, 4, value.e2t_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_67).ti = function (encoder, value) {
    return this.z2s(encoder, value instanceof ScrollEventData ? value : THROW_CCE());
  };
  protoOf($serializer_67).ui = function (decoder) {
    var tmp0_desc = this.y2s_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_local2 = false;
    var tmp7_local3 = false;
    var tmp8_local4 = false;
    var tmp9_input = decoder.bm(tmp0_desc);
    var tmp10_cached = Companion_getInstance_85().x2s_1;
    if (tmp9_input.rm()) {
      tmp4_local0 = tmp9_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp9_input.nm(tmp0_desc, 1, tmp10_cached[1], tmp5_local1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp9_input.dm(tmp0_desc, 2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
      tmp7_local3 = tmp9_input.dm(tmp0_desc, 3);
      tmp3_bitMask0 = tmp3_bitMask0 | 8;
      tmp8_local4 = tmp9_input.dm(tmp0_desc, 4);
      tmp3_bitMask0 = tmp3_bitMask0 | 16;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp9_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp9_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp9_input.nm(tmp0_desc, 1, tmp10_cached[1], tmp5_local1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp9_input.dm(tmp0_desc, 2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          case 3:
            tmp7_local3 = tmp9_input.dm(tmp0_desc, 3);
            tmp3_bitMask0 = tmp3_bitMask0 | 8;
            break;
          case 4:
            tmp8_local4 = tmp9_input.dm(tmp0_desc, 4);
            tmp3_bitMask0 = tmp3_bitMask0 | 16;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp9_input.cm(tmp0_desc);
    return ScrollEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, tmp7_local3, tmp8_local4, null);
  };
  protoOf($serializer_67).si = function () {
    return this.y2s_1;
  };
  protoOf($serializer_67).eu = function () {
    var tmp0_cached = Companion_getInstance_85().x2s_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), tmp0_cached[1], BooleanSerializer_getInstance(), BooleanSerializer_getInstance(), BooleanSerializer_getInstance()];
  };
  var $serializer_instance_67;
  function $serializer_getInstance_67() {
    if ($serializer_instance_67 == null)
      new $serializer_67();
    return $serializer_instance_67;
  }
  function ScrollEventData_init_$Init$(seen0, id, direction, shift, alt, ctrl, serializationConstructorMarker, $this) {
    if (!(30 === (30 & seen0))) {
      throwMissingFieldException(seen0, 30, $serializer_getInstance_67().y2s_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.b2t_1 = direction;
    $this.c2t_1 = shift;
    $this.d2t_1 = alt;
    $this.e2t_1 = ctrl;
    return $this;
  }
  function ScrollEventData_init_$Create$(seen0, id, direction, shift, alt, ctrl, serializationConstructorMarker) {
    return ScrollEventData_init_$Init$(seen0, id, direction, shift, alt, ctrl, serializationConstructorMarker, objectCreate(protoOf(ScrollEventData)));
  }
  function ScrollEventData(direction, shift, alt, ctrl) {
    Companion_getInstance_85();
    EventData.call(this);
    this.b2t_1 = direction;
    this.c2t_1 = shift;
    this.d2t_1 = alt;
    this.e2t_1 = ctrl;
  }
  function Companion_86() {
  }
  var Companion_instance_86;
  function Companion_getInstance_86() {
    return Companion_instance_86;
  }
  function $serializer_68() {
    $serializer_instance_68 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.SelectionChangedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('selectedItem', false);
    this.f2t_1 = tmp0_serialDesc;
  }
  protoOf($serializer_68).g2t = function (encoder, value) {
    var tmp0_desc = this.f2t_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.ln(tmp0_desc, 1, value.i2t_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_68).ti = function (encoder, value) {
    return this.g2t(encoder, value instanceof SelectionChangedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_68).ui = function (decoder) {
    var tmp0_desc = this.f2t_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return SelectionChangedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_68).si = function () {
    return this.f2t_1;
  };
  protoOf($serializer_68).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), IntSerializer_getInstance()];
  };
  var $serializer_instance_68;
  function $serializer_getInstance_68() {
    if ($serializer_instance_68 == null)
      new $serializer_68();
    return $serializer_instance_68;
  }
  function SelectionChangedEventData_init_$Init$(seen0, id, selectedItem, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_68().f2t_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.i2t_1 = selectedItem;
    return $this;
  }
  function SelectionChangedEventData_init_$Create$(seen0, id, selectedItem, serializationConstructorMarker) {
    return SelectionChangedEventData_init_$Init$(seen0, id, selectedItem, serializationConstructorMarker, objectCreate(protoOf(SelectionChangedEventData)));
  }
  function SelectionChangedEventData(selectedItem) {
    EventData.call(this);
    this.i2t_1 = selectedItem;
  }
  function Companion_87() {
  }
  var Companion_instance_87;
  function Companion_getInstance_87() {
    return Companion_instance_87;
  }
  function $serializer_69() {
    $serializer_instance_69 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.StructuredDataSelectEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('index', false);
    this.j2t_1 = tmp0_serialDesc;
  }
  protoOf($serializer_69).k2t = function (encoder, value) {
    var tmp0_desc = this.j2t_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.ln(tmp0_desc, 1, value.m2t_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_69).ti = function (encoder, value) {
    return this.k2t(encoder, value instanceof StructuredDataSelectEventData ? value : THROW_CCE());
  };
  protoOf($serializer_69).ui = function (decoder) {
    var tmp0_desc = this.j2t_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.gm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.gm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return StructuredDataSelectEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_69).si = function () {
    return this.j2t_1;
  };
  protoOf($serializer_69).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), IntSerializer_getInstance()];
  };
  var $serializer_instance_69;
  function $serializer_getInstance_69() {
    if ($serializer_instance_69 == null)
      new $serializer_69();
    return $serializer_instance_69;
  }
  function StructuredDataSelectEventData_init_$Init$(seen0, id, index, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_69().j2t_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.m2t_1 = index;
    return $this;
  }
  function StructuredDataSelectEventData_init_$Create$(seen0, id, index, serializationConstructorMarker) {
    return StructuredDataSelectEventData_init_$Init$(seen0, id, index, serializationConstructorMarker, objectCreate(protoOf(StructuredDataSelectEventData)));
  }
  function StructuredDataSelectEventData(index) {
    EventData.call(this);
    this.m2t_1 = index;
  }
  function Companion_88() {
  }
  var Companion_instance_88;
  function Companion_getInstance_88() {
    return Companion_instance_88;
  }
  function $serializer_70() {
    $serializer_instance_70 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.TextInputChangedEventData', this, 2);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('value', false);
    this.n2t_1 = tmp0_serialDesc;
  }
  protoOf($serializer_70).o2t = function (encoder, value) {
    var tmp0_desc = this.n2t_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    tmp1_output.qn(tmp0_desc, 1, value.q2t_1);
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_70).ti = function (encoder, value) {
    return this.o2t(encoder, value instanceof TextInputChangedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_70).ui = function (decoder) {
    var tmp0_desc = this.n2t_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = null;
    var tmp6_input = decoder.bm(tmp0_desc);
    if (tmp6_input.rm()) {
      tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp6_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp6_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp6_input.lm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp6_input.cm(tmp0_desc);
    return TextInputChangedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, null);
  };
  protoOf($serializer_70).si = function () {
    return this.n2t_1;
  };
  protoOf($serializer_70).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), StringSerializer_getInstance()];
  };
  var $serializer_instance_70;
  function $serializer_getInstance_70() {
    if ($serializer_instance_70 == null)
      new $serializer_70();
    return $serializer_instance_70;
  }
  function TextInputChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, $this) {
    if (!(2 === (2 & seen0))) {
      throwMissingFieldException(seen0, 2, $serializer_getInstance_70().n2t_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    $this.q2t_1 = value;
    return $this;
  }
  function TextInputChangedEventData_init_$Create$(seen0, id, value, serializationConstructorMarker) {
    return TextInputChangedEventData_init_$Init$(seen0, id, value, serializationConstructorMarker, objectCreate(protoOf(TextInputChangedEventData)));
  }
  function TextInputChangedEventData(value) {
    EventData.call(this);
    this.q2t_1 = value;
  }
  function Companion_89() {
    Companion_instance_89 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.r2t_1 = [null, null, new PairSerializer(DoubleSerializer_getInstance(), DoubleSerializer_getInstance())];
  }
  var Companion_instance_89;
  function Companion_getInstance_89() {
    if (Companion_instance_89 == null)
      new Companion_89();
    return Companion_instance_89;
  }
  function $serializer_71() {
    $serializer_instance_71 = this;
    var tmp0_serialDesc = new PluginGeneratedSerialDescriptor('data.event.TransformChangedEventData', this, 3);
    tmp0_serialDesc.pt('id', true);
    tmp0_serialDesc.pt('zoomLevel', true);
    tmp0_serialDesc.pt('anchor', true);
    this.s2t_1 = tmp0_serialDesc;
  }
  protoOf($serializer_71).t2t = function (encoder, value) {
    var tmp0_desc = this.s2t_1;
    var tmp1_output = encoder.bm(tmp0_desc);
    var tmp2_cached = Companion_getInstance_89().r2t_1;
    if (tmp1_output.yn(tmp0_desc, 0) ? true : !(value.r2o() == null)) {
      tmp1_output.un(tmp0_desc, 0, StringSerializer_getInstance(), value.r2o());
    }
    if (tmp1_output.yn(tmp0_desc, 1) ? true : !equals(value.v2t_1, 1.0)) {
      tmp1_output.on(tmp0_desc, 1, value.v2t_1);
    }
    if (tmp1_output.yn(tmp0_desc, 2) ? true : !value.w2t_1.equals(new Pair(0.0, 0.0))) {
      tmp1_output.sn(tmp0_desc, 2, tmp2_cached[2], value.w2t_1);
    }
    tmp1_output.cm(tmp0_desc);
  };
  protoOf($serializer_71).ti = function (encoder, value) {
    return this.t2t(encoder, value instanceof TransformChangedEventData ? value : THROW_CCE());
  };
  protoOf($serializer_71).ui = function (decoder) {
    var tmp0_desc = this.s2t_1;
    var tmp1_flag = true;
    var tmp2_index = 0;
    var tmp3_bitMask0 = 0;
    var tmp4_local0 = null;
    var tmp5_local1 = 0.0;
    var tmp6_local2 = null;
    var tmp7_input = decoder.bm(tmp0_desc);
    var tmp8_cached = Companion_getInstance_89().r2t_1;
    if (tmp7_input.rm()) {
      tmp4_local0 = tmp7_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
      tmp3_bitMask0 = tmp3_bitMask0 | 1;
      tmp5_local1 = tmp7_input.jm(tmp0_desc, 1);
      tmp3_bitMask0 = tmp3_bitMask0 | 2;
      tmp6_local2 = tmp7_input.nm(tmp0_desc, 2, tmp8_cached[2], tmp6_local2);
      tmp3_bitMask0 = tmp3_bitMask0 | 4;
    } else
      while (tmp1_flag) {
        tmp2_index = tmp7_input.sm(tmp0_desc);
        switch (tmp2_index) {
          case -1:
            tmp1_flag = false;
            break;
          case 0:
            tmp4_local0 = tmp7_input.pm(tmp0_desc, 0, StringSerializer_getInstance(), tmp4_local0);
            tmp3_bitMask0 = tmp3_bitMask0 | 1;
            break;
          case 1:
            tmp5_local1 = tmp7_input.jm(tmp0_desc, 1);
            tmp3_bitMask0 = tmp3_bitMask0 | 2;
            break;
          case 2:
            tmp6_local2 = tmp7_input.nm(tmp0_desc, 2, tmp8_cached[2], tmp6_local2);
            tmp3_bitMask0 = tmp3_bitMask0 | 4;
            break;
          default:
            throw UnknownFieldException_init_$Create$(tmp2_index);
        }
      }
    tmp7_input.cm(tmp0_desc);
    return TransformChangedEventData_init_$Create$(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, null);
  };
  protoOf($serializer_71).si = function () {
    return this.s2t_1;
  };
  protoOf($serializer_71).eu = function () {
    var tmp0_cached = Companion_getInstance_89().r2t_1;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [get_nullable(StringSerializer_getInstance()), DoubleSerializer_getInstance(), tmp0_cached[2]];
  };
  var $serializer_instance_71;
  function $serializer_getInstance_71() {
    if ($serializer_instance_71 == null)
      new $serializer_71();
    return $serializer_instance_71;
  }
  function TransformChangedEventData_init_$Init$(seen0, id, zoomLevel, anchor, serializationConstructorMarker, $this) {
    if (!(0 === (0 & seen0))) {
      throwMissingFieldException(seen0, 0, $serializer_getInstance_71().s2t_1);
    }
    EventData_init_$Init$(seen0, id, serializationConstructorMarker, $this);
    if (0 === (seen0 & 2))
      $this.v2t_1 = 1.0;
    else
      $this.v2t_1 = zoomLevel;
    if (0 === (seen0 & 4))
      $this.w2t_1 = new Pair(0.0, 0.0);
    else
      $this.w2t_1 = anchor;
    return $this;
  }
  function TransformChangedEventData_init_$Create$(seen0, id, zoomLevel, anchor, serializationConstructorMarker) {
    return TransformChangedEventData_init_$Init$(seen0, id, zoomLevel, anchor, serializationConstructorMarker, objectCreate(protoOf(TransformChangedEventData)));
  }
  function TransformChangedEventData(zoomLevel, anchor) {
    Companion_getInstance_89();
    zoomLevel = zoomLevel === VOID ? 1.0 : zoomLevel;
    anchor = anchor === VOID ? new Pair(0.0, 0.0) : anchor;
    EventData.call(this);
    this.v2t_1 = zoomLevel;
    this.w2t_1 = anchor;
  }
  var DialogType_NONE_instance;
  var DialogType_INFORMATION_instance;
  var DialogType_WARNING_instance;
  var DialogType_CONFIRMATION_instance;
  var DialogType_ERROR_instance;
  var DialogType_EXCEPTION_instance;
  function values_1() {
    return [DialogType_NONE_getInstance(), DialogType_INFORMATION_getInstance(), DialogType_WARNING_getInstance(), DialogType_CONFIRMATION_getInstance(), DialogType_ERROR_getInstance(), DialogType_EXCEPTION_getInstance()];
  }
  var DialogType_entriesInitialized;
  function DialogType_initEntries() {
    if (DialogType_entriesInitialized)
      return Unit_instance;
    DialogType_entriesInitialized = true;
    DialogType_NONE_instance = new DialogType('NONE', 0);
    DialogType_INFORMATION_instance = new DialogType('INFORMATION', 1);
    DialogType_WARNING_instance = new DialogType('WARNING', 2);
    DialogType_CONFIRMATION_instance = new DialogType('CONFIRMATION', 3);
    DialogType_ERROR_instance = new DialogType('ERROR', 4);
    DialogType_EXCEPTION_instance = new DialogType('EXCEPTION', 5);
  }
  function DialogType(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function DialogType_NONE_getInstance() {
    DialogType_initEntries();
    return DialogType_NONE_instance;
  }
  function DialogType_INFORMATION_getInstance() {
    DialogType_initEntries();
    return DialogType_INFORMATION_instance;
  }
  function DialogType_WARNING_getInstance() {
    DialogType_initEntries();
    return DialogType_WARNING_instance;
  }
  function DialogType_CONFIRMATION_getInstance() {
    DialogType_initEntries();
    return DialogType_CONFIRMATION_instance;
  }
  function DialogType_ERROR_getInstance() {
    DialogType_initEntries();
    return DialogType_ERROR_instance;
  }
  function DialogType_EXCEPTION_getInstance() {
    DialogType_initEntries();
    return DialogType_EXCEPTION_instance;
  }
  var KeyCode_SHIFT_instance;
  var KeyCode_CONTROL_instance;
  var KeyCode_ALT_instance;
  var KeyCode_ALT_GRAPH_instance;
  var KeyCode_CAPS_instance;
  var KeyCode_WINDOWS_instance;
  var KeyCode_CONTEXT_MENU_instance;
  var KeyCode_SPACE_instance;
  var KeyCode_BACK_SPACE_instance;
  var KeyCode_TAB_instance;
  var KeyCode_DIGIT1_instance;
  var KeyCode_DIGIT2_instance;
  var KeyCode_DIGIT3_instance;
  var KeyCode_DIGIT4_instance;
  var KeyCode_DIGIT5_instance;
  var KeyCode_DIGIT6_instance;
  var KeyCode_DIGIT7_instance;
  var KeyCode_DIGIT8_instance;
  var KeyCode_DIGIT9_instance;
  var KeyCode_DIGIT0_instance;
  var KeyCode_CIRCUMFLEX_instance;
  var KeyCode_EXCLAMATION_MARK_instance;
  var KeyCode_DOUBLE_QUOTE_instance;
  var KeyCode_DOLLAR_instance;
  var KeyCode_AMPERSAND_instance;
  var KeyCode_SLASH_instance;
  var KeyCode_LEFT_PARENTHESIS_instance;
  var KeyCode_RIGHT_PARENTHESIS_instance;
  var KeyCode_CURLY_BRACE_LEFT_instance;
  var KeyCode_CURLY_BRACE_RIGHT_instance;
  var KeyCode_OPEN_BRACKET_instance;
  var KeyCode_CLOSE_BRACKET_instance;
  var KeyCode_EQUALS_instance;
  var KeyCode_BACK_SLASH_instance;
  var KeyCode_GRAVE_instance;
  var KeyCode_ACUTE_instance;
  var KeyCode_A_instance;
  var KeyCode_B_instance;
  var KeyCode_C_instance;
  var KeyCode_D_instance;
  var KeyCode_E_instance;
  var KeyCode_F_instance;
  var KeyCode_G_instance;
  var KeyCode_H_instance;
  var KeyCode_I_instance;
  var KeyCode_J_instance;
  var KeyCode_K_instance;
  var KeyCode_L_instance;
  var KeyCode_M_instance;
  var KeyCode_N_instance;
  var KeyCode_O_instance;
  var KeyCode_P_instance;
  var KeyCode_Q_instance;
  var KeyCode_R_instance;
  var KeyCode_S_instance;
  var KeyCode_T_instance;
  var KeyCode_U_instance;
  var KeyCode_V_instance;
  var KeyCode_W_instance;
  var KeyCode_X_instance;
  var KeyCode_Y_instance;
  var KeyCode_Z_instance;
  var KeyCode_Ä_instance;
  var KeyCode_Ö_instance;
  var KeyCode_Ü_instance;
  var KeyCode_AT_instance;
  var KeyCode_EURO_SIGN_instance;
  var KeyCode_COMMA_instance;
  var KeyCode_SEMICOLON_instance;
  var KeyCode_PERIOD_instance;
  var KeyCode_COLON_instance;
  var KeyCode_MINUS_instance;
  var KeyCode_UNDERSCORE_instance;
  var KeyCode_PLUS_instance;
  var KeyCode_ASTERISK_instance;
  var KeyCode_TILDE_instance;
  var KeyCode_NUMBER_SIGN_instance;
  var KeyCode_LESS_instance;
  var KeyCode_GREATER_instance;
  var KeyCode_NUMPAD0_instance;
  var KeyCode_NUMPAD1_instance;
  var KeyCode_NUMPAD2_instance;
  var KeyCode_NUMPAD3_instance;
  var KeyCode_NUMPAD4_instance;
  var KeyCode_NUMPAD5_instance;
  var KeyCode_NUMPAD6_instance;
  var KeyCode_NUMPAD7_instance;
  var KeyCode_NUMPAD8_instance;
  var KeyCode_NUMPAD9_instance;
  var KeyCode_NUM_LOCK_instance;
  var KeyCode_DIVIDE_instance;
  var KeyCode_MULTIPLY_instance;
  var KeyCode_SUBTRACT_instance;
  var KeyCode_ADD_instance;
  var KeyCode_DECIMAL_instance;
  var KeyCode_ENTER_instance;
  var KeyCode_ESCAPE_instance;
  var KeyCode_F1_instance;
  var KeyCode_F2_instance;
  var KeyCode_F3_instance;
  var KeyCode_F4_instance;
  var KeyCode_F5_instance;
  var KeyCode_F6_instance;
  var KeyCode_F7_instance;
  var KeyCode_F8_instance;
  var KeyCode_F9_instance;
  var KeyCode_F10_instance;
  var KeyCode_F11_instance;
  var KeyCode_F12_instance;
  var KeyCode_PRINT_SCREEN_instance;
  var KeyCode_SCROLL_LOCK_instance;
  var KeyCode_PAUSE_instance;
  var KeyCode_INSERT_instance;
  var KeyCode_DELETE_instance;
  var KeyCode_HOME_POS1_instance;
  var KeyCode_END_instance;
  var KeyCode_PAGE_UP_instance;
  var KeyCode_PAGE_DOWN_instance;
  var KeyCode_LEFT_instance;
  var KeyCode_UP_instance;
  var KeyCode_RIGHT_instance;
  var KeyCode_DOWN_instance;
  var KeyCode_UNDEFINED_instance;
  function values_2() {
    return [KeyCode_SHIFT_getInstance(), KeyCode_CONTROL_getInstance(), KeyCode_ALT_getInstance(), KeyCode_ALT_GRAPH_getInstance(), KeyCode_CAPS_getInstance(), KeyCode_WINDOWS_getInstance(), KeyCode_CONTEXT_MENU_getInstance(), KeyCode_SPACE_getInstance(), KeyCode_BACK_SPACE_getInstance(), KeyCode_TAB_getInstance(), KeyCode_DIGIT1_getInstance(), KeyCode_DIGIT2_getInstance(), KeyCode_DIGIT3_getInstance(), KeyCode_DIGIT4_getInstance(), KeyCode_DIGIT5_getInstance(), KeyCode_DIGIT6_getInstance(), KeyCode_DIGIT7_getInstance(), KeyCode_DIGIT8_getInstance(), KeyCode_DIGIT9_getInstance(), KeyCode_DIGIT0_getInstance(), KeyCode_CIRCUMFLEX_getInstance(), KeyCode_EXCLAMATION_MARK_getInstance(), KeyCode_DOUBLE_QUOTE_getInstance(), KeyCode_DOLLAR_getInstance(), KeyCode_AMPERSAND_getInstance(), KeyCode_SLASH_getInstance(), KeyCode_LEFT_PARENTHESIS_getInstance(), KeyCode_RIGHT_PARENTHESIS_getInstance(), KeyCode_CURLY_BRACE_LEFT_getInstance(), KeyCode_CURLY_BRACE_RIGHT_getInstance(), KeyCode_OPEN_BRACKET_getInstance(), KeyCode_CLOSE_BRACKET_getInstance(), KeyCode_EQUALS_getInstance(), KeyCode_BACK_SLASH_getInstance(), KeyCode_GRAVE_getInstance(), KeyCode_ACUTE_getInstance(), KeyCode_A_getInstance(), KeyCode_B_getInstance(), KeyCode_C_getInstance(), KeyCode_D_getInstance(), KeyCode_E_getInstance(), KeyCode_F_getInstance(), KeyCode_G_getInstance(), KeyCode_H_getInstance(), KeyCode_I_getInstance(), KeyCode_J_getInstance(), KeyCode_K_getInstance(), KeyCode_L_getInstance(), KeyCode_M_getInstance(), KeyCode_N_getInstance(), KeyCode_O_getInstance(), KeyCode_P_getInstance(), KeyCode_Q_getInstance(), KeyCode_R_getInstance(), KeyCode_S_getInstance(), KeyCode_T_getInstance(), KeyCode_U_getInstance(), KeyCode_V_getInstance(), KeyCode_W_getInstance(), KeyCode_X_getInstance(), KeyCode_Y_getInstance(), KeyCode_Z_getInstance(), KeyCode_Ä_getInstance(), KeyCode_Ö_getInstance(), KeyCode_Ü_getInstance(), KeyCode_AT_getInstance(), KeyCode_EURO_SIGN_getInstance(), KeyCode_COMMA_getInstance(), KeyCode_SEMICOLON_getInstance(), KeyCode_PERIOD_getInstance(), KeyCode_COLON_getInstance(), KeyCode_MINUS_getInstance(), KeyCode_UNDERSCORE_getInstance(), KeyCode_PLUS_getInstance(), KeyCode_ASTERISK_getInstance(), KeyCode_TILDE_getInstance(), KeyCode_NUMBER_SIGN_getInstance(), KeyCode_LESS_getInstance(), KeyCode_GREATER_getInstance(), KeyCode_NUMPAD0_getInstance(), KeyCode_NUMPAD1_getInstance(), KeyCode_NUMPAD2_getInstance(), KeyCode_NUMPAD3_getInstance(), KeyCode_NUMPAD4_getInstance(), KeyCode_NUMPAD5_getInstance(), KeyCode_NUMPAD6_getInstance(), KeyCode_NUMPAD7_getInstance(), KeyCode_NUMPAD8_getInstance(), KeyCode_NUMPAD9_getInstance(), KeyCode_NUM_LOCK_getInstance(), KeyCode_DIVIDE_getInstance(), KeyCode_MULTIPLY_getInstance(), KeyCode_SUBTRACT_getInstance(), KeyCode_ADD_getInstance(), KeyCode_DECIMAL_getInstance(), KeyCode_ENTER_getInstance(), KeyCode_ESCAPE_getInstance(), KeyCode_F1_getInstance(), KeyCode_F2_getInstance(), KeyCode_F3_getInstance(), KeyCode_F4_getInstance(), KeyCode_F5_getInstance(), KeyCode_F6_getInstance(), KeyCode_F7_getInstance(), KeyCode_F8_getInstance(), KeyCode_F9_getInstance(), KeyCode_F10_getInstance(), KeyCode_F11_getInstance(), KeyCode_F12_getInstance(), KeyCode_PRINT_SCREEN_getInstance(), KeyCode_SCROLL_LOCK_getInstance(), KeyCode_PAUSE_getInstance(), KeyCode_INSERT_getInstance(), KeyCode_DELETE_getInstance(), KeyCode_HOME_POS1_getInstance(), KeyCode_END_getInstance(), KeyCode_PAGE_UP_getInstance(), KeyCode_PAGE_DOWN_getInstance(), KeyCode_LEFT_getInstance(), KeyCode_UP_getInstance(), KeyCode_RIGHT_getInstance(), KeyCode_DOWN_getInstance(), KeyCode_UNDEFINED_getInstance()];
  }
  function get_entries() {
    if ($ENTRIES == null)
      $ENTRIES = enumEntries(values_2());
    return $ENTRIES;
  }
  var KeyCode_entriesInitialized;
  function KeyCode_initEntries() {
    if (KeyCode_entriesInitialized)
      return Unit_instance;
    KeyCode_entriesInitialized = true;
    KeyCode_SHIFT_instance = new KeyCode('SHIFT', 0, 'Shift', 128);
    KeyCode_CONTROL_instance = new KeyCode('CONTROL', 1, 'Ctrl', 128, listOf('Control'));
    KeyCode_ALT_instance = new KeyCode('ALT', 2, 'Alt', 128);
    KeyCode_ALT_GRAPH_instance = new KeyCode('ALT_GRAPH', 3, 'AltGr', 128, listOf('AltGraph'));
    KeyCode_CAPS_instance = new KeyCode('CAPS', 4, 'Caps', 0, listOf('CapsLock'));
    KeyCode_WINDOWS_instance = new KeyCode('WINDOWS', 5, 'Win', 128, listOf_0(['Meta', 'Win']));
    KeyCode_CONTEXT_MENU_instance = new KeyCode('CONTEXT_MENU', 6, 'Context Menu', 0, listOf('ContextMenu'));
    KeyCode_SPACE_instance = new KeyCode('SPACE', 7, 'Space', 2, listOf(' '));
    KeyCode_BACK_SPACE_instance = new KeyCode('BACK_SPACE', 8, 'Backspace', 0);
    KeyCode_TAB_instance = new KeyCode('TAB', 9, 'Tab', 2);
    KeyCode_DIGIT1_instance = new KeyCode('DIGIT1', 10, '1', 32);
    KeyCode_DIGIT2_instance = new KeyCode('DIGIT2', 11, '2', 32);
    KeyCode_DIGIT3_instance = new KeyCode('DIGIT3', 12, '3', 32);
    KeyCode_DIGIT4_instance = new KeyCode('DIGIT4', 13, '4', 32);
    KeyCode_DIGIT5_instance = new KeyCode('DIGIT5', 14, '5', 32);
    KeyCode_DIGIT6_instance = new KeyCode('DIGIT6', 15, '6', 32);
    KeyCode_DIGIT7_instance = new KeyCode('DIGIT7', 16, '7', 32);
    KeyCode_DIGIT8_instance = new KeyCode('DIGIT8', 17, '8', 32);
    KeyCode_DIGIT9_instance = new KeyCode('DIGIT9', 18, '9', 32);
    KeyCode_DIGIT0_instance = new KeyCode('DIGIT0', 19, '0', 32);
    KeyCode_CIRCUMFLEX_instance = new KeyCode('CIRCUMFLEX', 20, '^', 0);
    KeyCode_EXCLAMATION_MARK_instance = new KeyCode('EXCLAMATION_MARK', 21, '!', 0);
    KeyCode_DOUBLE_QUOTE_instance = new KeyCode('DOUBLE_QUOTE', 22, '"', 0);
    KeyCode_DOLLAR_instance = new KeyCode('DOLLAR', 23, '$', 0);
    KeyCode_AMPERSAND_instance = new KeyCode('AMPERSAND', 24, '&', 0);
    KeyCode_SLASH_instance = new KeyCode('SLASH', 25, '/', 0);
    KeyCode_LEFT_PARENTHESIS_instance = new KeyCode('LEFT_PARENTHESIS', 26, '(', 0);
    KeyCode_RIGHT_PARENTHESIS_instance = new KeyCode('RIGHT_PARENTHESIS', 27, ')', 0);
    KeyCode_CURLY_BRACE_LEFT_instance = new KeyCode('CURLY_BRACE_LEFT', 28, '{', 0);
    KeyCode_CURLY_BRACE_RIGHT_instance = new KeyCode('CURLY_BRACE_RIGHT', 29, '}', 0);
    KeyCode_OPEN_BRACKET_instance = new KeyCode('OPEN_BRACKET', 30, '[', 0);
    KeyCode_CLOSE_BRACKET_instance = new KeyCode('CLOSE_BRACKET', 31, ']', 0);
    KeyCode_EQUALS_instance = new KeyCode('EQUALS', 32, '=', 0);
    KeyCode_BACK_SLASH_instance = new KeyCode('BACK_SLASH', 33, '\\', 0);
    KeyCode_GRAVE_instance = new KeyCode('GRAVE', 34, '`', 0);
    KeyCode_ACUTE_instance = new KeyCode('ACUTE', 35, '\xB4', 0);
    KeyCode_A_instance = new KeyCode('A', 36, 'A', 64);
    KeyCode_B_instance = new KeyCode('B', 37, 'B', 64);
    KeyCode_C_instance = new KeyCode('C', 38, 'C', 64);
    KeyCode_D_instance = new KeyCode('D', 39, 'D', 64);
    KeyCode_E_instance = new KeyCode('E', 40, 'E', 64);
    KeyCode_F_instance = new KeyCode('F', 41, 'F', 64);
    KeyCode_G_instance = new KeyCode('G', 42, 'G', 64);
    KeyCode_H_instance = new KeyCode('H', 43, 'H', 64);
    KeyCode_I_instance = new KeyCode('I', 44, 'I', 64);
    KeyCode_J_instance = new KeyCode('J', 45, 'J', 64);
    KeyCode_K_instance = new KeyCode('K', 46, 'K', 64);
    KeyCode_L_instance = new KeyCode('L', 47, 'L', 64);
    KeyCode_M_instance = new KeyCode('M', 48, 'M', 64);
    KeyCode_N_instance = new KeyCode('N', 49, 'N', 64);
    KeyCode_O_instance = new KeyCode('O', 50, 'O', 64);
    KeyCode_P_instance = new KeyCode('P', 51, 'P', 64);
    KeyCode_Q_instance = new KeyCode('Q', 52, 'Q', 64);
    KeyCode_R_instance = new KeyCode('R', 53, 'R', 64);
    KeyCode_S_instance = new KeyCode('S', 54, 'S', 64);
    KeyCode_T_instance = new KeyCode('T', 55, 'T', 64);
    KeyCode_U_instance = new KeyCode('U', 56, 'U', 64);
    KeyCode_V_instance = new KeyCode('V', 57, 'V', 64);
    KeyCode_W_instance = new KeyCode('W', 58, 'W', 64);
    KeyCode_X_instance = new KeyCode('X', 59, 'X', 64);
    KeyCode_Y_instance = new KeyCode('Y', 60, 'Y', 64);
    KeyCode_Z_instance = new KeyCode('Z', 61, 'Z', 64);
    KeyCode_Ä_instance = new KeyCode('\xC4', 62, '\xC4', 64);
    KeyCode_Ö_instance = new KeyCode('\xD6', 63, '\xD6', 64);
    KeyCode_Ü_instance = new KeyCode('\xDC', 64, '\xDC', 64);
    KeyCode_AT_instance = new KeyCode('AT', 65, '@', 0);
    KeyCode_EURO_SIGN_instance = new KeyCode('EURO_SIGN', 66, '\u20AC', 0);
    KeyCode_COMMA_instance = new KeyCode('COMMA', 67, ',', 0);
    KeyCode_SEMICOLON_instance = new KeyCode('SEMICOLON', 68, ';', 0);
    KeyCode_PERIOD_instance = new KeyCode('PERIOD', 69, '.', 0);
    KeyCode_COLON_instance = new KeyCode('COLON', 70, ':', 0);
    KeyCode_MINUS_instance = new KeyCode('MINUS', 71, '-', 0);
    KeyCode_UNDERSCORE_instance = new KeyCode('UNDERSCORE', 72, '_', 0);
    KeyCode_PLUS_instance = new KeyCode('PLUS', 73, '+', 0);
    KeyCode_ASTERISK_instance = new KeyCode('ASTERISK', 74, '*', 0);
    KeyCode_TILDE_instance = new KeyCode('TILDE', 75, '~', 0);
    KeyCode_NUMBER_SIGN_instance = new KeyCode('NUMBER_SIGN', 76, '#', 0);
    KeyCode_LESS_instance = new KeyCode('LESS', 77, '<', 0);
    KeyCode_GREATER_instance = new KeyCode('GREATER', 78, '>', 0);
    KeyCode_NUMPAD0_instance = new KeyCode('NUMPAD0', 79, '0', 48);
    KeyCode_NUMPAD1_instance = new KeyCode('NUMPAD1', 80, '1', 48);
    KeyCode_NUMPAD2_instance = new KeyCode('NUMPAD2', 81, '2', 48);
    KeyCode_NUMPAD3_instance = new KeyCode('NUMPAD3', 82, '3', 48);
    KeyCode_NUMPAD4_instance = new KeyCode('NUMPAD4', 83, '4', 48);
    KeyCode_NUMPAD5_instance = new KeyCode('NUMPAD5', 84, '5', 48);
    KeyCode_NUMPAD6_instance = new KeyCode('NUMPAD6', 85, '6', 48);
    KeyCode_NUMPAD7_instance = new KeyCode('NUMPAD7', 86, '7', 48);
    KeyCode_NUMPAD8_instance = new KeyCode('NUMPAD8', 87, '8', 48);
    KeyCode_NUMPAD9_instance = new KeyCode('NUMPAD9', 88, '9', 48);
    KeyCode_NUM_LOCK_instance = new KeyCode('NUM_LOCK', 89, 'Num Lock', 16);
    KeyCode_DIVIDE_instance = new KeyCode('DIVIDE', 90, '/', 16);
    KeyCode_MULTIPLY_instance = new KeyCode('MULTIPLY', 91, '*', 16);
    KeyCode_SUBTRACT_instance = new KeyCode('SUBTRACT', 92, '-', 16);
    KeyCode_ADD_instance = new KeyCode('ADD', 93, '+', 16);
    KeyCode_DECIMAL_instance = new KeyCode('DECIMAL', 94, ',', 16);
    KeyCode_ENTER_instance = new KeyCode('ENTER', 95, 'Enter', 0);
    KeyCode_ESCAPE_instance = new KeyCode('ESCAPE', 96, 'Esc', 0, listOf('Escape'));
    KeyCode_F1_instance = new KeyCode('F1', 97, 'F1', 1);
    KeyCode_F2_instance = new KeyCode('F2', 98, 'F2', 1);
    KeyCode_F3_instance = new KeyCode('F3', 99, 'F3', 1);
    KeyCode_F4_instance = new KeyCode('F4', 100, 'F4', 1);
    KeyCode_F5_instance = new KeyCode('F5', 101, 'F5', 1);
    KeyCode_F6_instance = new KeyCode('F6', 102, 'F6', 1);
    KeyCode_F7_instance = new KeyCode('F7', 103, 'F7', 1);
    KeyCode_F8_instance = new KeyCode('F8', 104, 'F8', 1);
    KeyCode_F9_instance = new KeyCode('F9', 105, 'F9', 1);
    KeyCode_F10_instance = new KeyCode('F10', 106, 'F10', 1);
    KeyCode_F11_instance = new KeyCode('F11', 107, 'F11', 1);
    KeyCode_F12_instance = new KeyCode('F12', 108, 'F12', 1);
    KeyCode_PRINT_SCREEN_instance = new KeyCode('PRINT_SCREEN', 109, 'Print', 0, listOf('PrintScreen'));
    KeyCode_SCROLL_LOCK_instance = new KeyCode('SCROLL_LOCK', 110, 'Scroll Lock', 0, listOf('ScrollLock'));
    KeyCode_PAUSE_instance = new KeyCode('PAUSE', 111, 'Pause', 0);
    KeyCode_INSERT_instance = new KeyCode('INSERT', 112, 'Insert', 0);
    KeyCode_DELETE_instance = new KeyCode('DELETE', 113, 'Del', 0, listOf('Delete'));
    KeyCode_HOME_POS1_instance = new KeyCode('HOME_POS1', 114, 'Pos1', 0, listOf('Home'));
    KeyCode_END_instance = new KeyCode('END', 115, 'End', 0);
    KeyCode_PAGE_UP_instance = new KeyCode('PAGE_UP', 116, 'Page Up', 4, listOf('PageUp'));
    KeyCode_PAGE_DOWN_instance = new KeyCode('PAGE_DOWN', 117, 'Page Down', 4, listOf('PageDown'));
    KeyCode_LEFT_instance = new KeyCode('LEFT', 118, 'Left', 12, listOf('ArrowLeft'));
    KeyCode_UP_instance = new KeyCode('UP', 119, 'Up', 12, listOf('ArrowUp'));
    KeyCode_RIGHT_instance = new KeyCode('RIGHT', 120, 'Right', 12, listOf('ArrowRight'));
    KeyCode_DOWN_instance = new KeyCode('DOWN', 121, 'Down', 12, listOf('ArrowDown'));
    KeyCode_UNDEFINED_instance = new KeyCode('UNDEFINED', 122, 'Undefined', 0);
  }
  var $ENTRIES;
  function KeyCode(name, ordinal, string, keyTypeMask, keyCodes) {
    var tmp;
    if (keyCodes === VOID) {
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp_0 = string.toLowerCase();
      // Inline function 'kotlin.text.uppercase' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$3 = string.toUpperCase();
      tmp = listOf_0([string, tmp_0, tmp$ret$3]);
    } else {
      tmp = keyCodes;
    }
    keyCodes = tmp;
    Enum.call(this, name, ordinal);
    this.z2t_1 = string;
    this.a2u_1 = keyTypeMask;
    this.b2u_1 = keyCodes;
  }
  protoOf(KeyCode).toString = function () {
    return this.z2t_1;
  };
  function KeyCode_SHIFT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_SHIFT_instance;
  }
  function KeyCode_CONTROL_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CONTROL_instance;
  }
  function KeyCode_ALT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ALT_instance;
  }
  function KeyCode_ALT_GRAPH_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ALT_GRAPH_instance;
  }
  function KeyCode_CAPS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CAPS_instance;
  }
  function KeyCode_WINDOWS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_WINDOWS_instance;
  }
  function KeyCode_CONTEXT_MENU_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CONTEXT_MENU_instance;
  }
  function KeyCode_SPACE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_SPACE_instance;
  }
  function KeyCode_BACK_SPACE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_BACK_SPACE_instance;
  }
  function KeyCode_TAB_getInstance() {
    KeyCode_initEntries();
    return KeyCode_TAB_instance;
  }
  function KeyCode_DIGIT1_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT1_instance;
  }
  function KeyCode_DIGIT2_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT2_instance;
  }
  function KeyCode_DIGIT3_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT3_instance;
  }
  function KeyCode_DIGIT4_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT4_instance;
  }
  function KeyCode_DIGIT5_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT5_instance;
  }
  function KeyCode_DIGIT6_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT6_instance;
  }
  function KeyCode_DIGIT7_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT7_instance;
  }
  function KeyCode_DIGIT8_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT8_instance;
  }
  function KeyCode_DIGIT9_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT9_instance;
  }
  function KeyCode_DIGIT0_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIGIT0_instance;
  }
  function KeyCode_CIRCUMFLEX_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CIRCUMFLEX_instance;
  }
  function KeyCode_EXCLAMATION_MARK_getInstance() {
    KeyCode_initEntries();
    return KeyCode_EXCLAMATION_MARK_instance;
  }
  function KeyCode_DOUBLE_QUOTE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DOUBLE_QUOTE_instance;
  }
  function KeyCode_DOLLAR_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DOLLAR_instance;
  }
  function KeyCode_AMPERSAND_getInstance() {
    KeyCode_initEntries();
    return KeyCode_AMPERSAND_instance;
  }
  function KeyCode_SLASH_getInstance() {
    KeyCode_initEntries();
    return KeyCode_SLASH_instance;
  }
  function KeyCode_LEFT_PARENTHESIS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_LEFT_PARENTHESIS_instance;
  }
  function KeyCode_RIGHT_PARENTHESIS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_RIGHT_PARENTHESIS_instance;
  }
  function KeyCode_CURLY_BRACE_LEFT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CURLY_BRACE_LEFT_instance;
  }
  function KeyCode_CURLY_BRACE_RIGHT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CURLY_BRACE_RIGHT_instance;
  }
  function KeyCode_OPEN_BRACKET_getInstance() {
    KeyCode_initEntries();
    return KeyCode_OPEN_BRACKET_instance;
  }
  function KeyCode_CLOSE_BRACKET_getInstance() {
    KeyCode_initEntries();
    return KeyCode_CLOSE_BRACKET_instance;
  }
  function KeyCode_EQUALS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_EQUALS_instance;
  }
  function KeyCode_BACK_SLASH_getInstance() {
    KeyCode_initEntries();
    return KeyCode_BACK_SLASH_instance;
  }
  function KeyCode_GRAVE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_GRAVE_instance;
  }
  function KeyCode_ACUTE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ACUTE_instance;
  }
  function KeyCode_A_getInstance() {
    KeyCode_initEntries();
    return KeyCode_A_instance;
  }
  function KeyCode_B_getInstance() {
    KeyCode_initEntries();
    return KeyCode_B_instance;
  }
  function KeyCode_C_getInstance() {
    KeyCode_initEntries();
    return KeyCode_C_instance;
  }
  function KeyCode_D_getInstance() {
    KeyCode_initEntries();
    return KeyCode_D_instance;
  }
  function KeyCode_E_getInstance() {
    KeyCode_initEntries();
    return KeyCode_E_instance;
  }
  function KeyCode_F_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F_instance;
  }
  function KeyCode_G_getInstance() {
    KeyCode_initEntries();
    return KeyCode_G_instance;
  }
  function KeyCode_H_getInstance() {
    KeyCode_initEntries();
    return KeyCode_H_instance;
  }
  function KeyCode_I_getInstance() {
    KeyCode_initEntries();
    return KeyCode_I_instance;
  }
  function KeyCode_J_getInstance() {
    KeyCode_initEntries();
    return KeyCode_J_instance;
  }
  function KeyCode_K_getInstance() {
    KeyCode_initEntries();
    return KeyCode_K_instance;
  }
  function KeyCode_L_getInstance() {
    KeyCode_initEntries();
    return KeyCode_L_instance;
  }
  function KeyCode_M_getInstance() {
    KeyCode_initEntries();
    return KeyCode_M_instance;
  }
  function KeyCode_N_getInstance() {
    KeyCode_initEntries();
    return KeyCode_N_instance;
  }
  function KeyCode_O_getInstance() {
    KeyCode_initEntries();
    return KeyCode_O_instance;
  }
  function KeyCode_P_getInstance() {
    KeyCode_initEntries();
    return KeyCode_P_instance;
  }
  function KeyCode_Q_getInstance() {
    KeyCode_initEntries();
    return KeyCode_Q_instance;
  }
  function KeyCode_R_getInstance() {
    KeyCode_initEntries();
    return KeyCode_R_instance;
  }
  function KeyCode_S_getInstance() {
    KeyCode_initEntries();
    return KeyCode_S_instance;
  }
  function KeyCode_T_getInstance() {
    KeyCode_initEntries();
    return KeyCode_T_instance;
  }
  function KeyCode_U_getInstance() {
    KeyCode_initEntries();
    return KeyCode_U_instance;
  }
  function KeyCode_V_getInstance() {
    KeyCode_initEntries();
    return KeyCode_V_instance;
  }
  function KeyCode_W_getInstance() {
    KeyCode_initEntries();
    return KeyCode_W_instance;
  }
  function KeyCode_X_getInstance() {
    KeyCode_initEntries();
    return KeyCode_X_instance;
  }
  function KeyCode_Y_getInstance() {
    KeyCode_initEntries();
    return KeyCode_Y_instance;
  }
  function KeyCode_Z_getInstance() {
    KeyCode_initEntries();
    return KeyCode_Z_instance;
  }
  function KeyCode_Ä_getInstance() {
    KeyCode_initEntries();
    return KeyCode_Ä_instance;
  }
  function KeyCode_Ö_getInstance() {
    KeyCode_initEntries();
    return KeyCode_Ö_instance;
  }
  function KeyCode_Ü_getInstance() {
    KeyCode_initEntries();
    return KeyCode_Ü_instance;
  }
  function KeyCode_AT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_AT_instance;
  }
  function KeyCode_EURO_SIGN_getInstance() {
    KeyCode_initEntries();
    return KeyCode_EURO_SIGN_instance;
  }
  function KeyCode_COMMA_getInstance() {
    KeyCode_initEntries();
    return KeyCode_COMMA_instance;
  }
  function KeyCode_SEMICOLON_getInstance() {
    KeyCode_initEntries();
    return KeyCode_SEMICOLON_instance;
  }
  function KeyCode_PERIOD_getInstance() {
    KeyCode_initEntries();
    return KeyCode_PERIOD_instance;
  }
  function KeyCode_COLON_getInstance() {
    KeyCode_initEntries();
    return KeyCode_COLON_instance;
  }
  function KeyCode_MINUS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_MINUS_instance;
  }
  function KeyCode_UNDERSCORE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_UNDERSCORE_instance;
  }
  function KeyCode_PLUS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_PLUS_instance;
  }
  function KeyCode_ASTERISK_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ASTERISK_instance;
  }
  function KeyCode_TILDE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_TILDE_instance;
  }
  function KeyCode_NUMBER_SIGN_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMBER_SIGN_instance;
  }
  function KeyCode_LESS_getInstance() {
    KeyCode_initEntries();
    return KeyCode_LESS_instance;
  }
  function KeyCode_GREATER_getInstance() {
    KeyCode_initEntries();
    return KeyCode_GREATER_instance;
  }
  function KeyCode_NUMPAD0_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD0_instance;
  }
  function KeyCode_NUMPAD1_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD1_instance;
  }
  function KeyCode_NUMPAD2_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD2_instance;
  }
  function KeyCode_NUMPAD3_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD3_instance;
  }
  function KeyCode_NUMPAD4_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD4_instance;
  }
  function KeyCode_NUMPAD5_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD5_instance;
  }
  function KeyCode_NUMPAD6_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD6_instance;
  }
  function KeyCode_NUMPAD7_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD7_instance;
  }
  function KeyCode_NUMPAD8_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD8_instance;
  }
  function KeyCode_NUMPAD9_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUMPAD9_instance;
  }
  function KeyCode_NUM_LOCK_getInstance() {
    KeyCode_initEntries();
    return KeyCode_NUM_LOCK_instance;
  }
  function KeyCode_DIVIDE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DIVIDE_instance;
  }
  function KeyCode_MULTIPLY_getInstance() {
    KeyCode_initEntries();
    return KeyCode_MULTIPLY_instance;
  }
  function KeyCode_SUBTRACT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_SUBTRACT_instance;
  }
  function KeyCode_ADD_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ADD_instance;
  }
  function KeyCode_DECIMAL_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DECIMAL_instance;
  }
  function KeyCode_ENTER_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ENTER_instance;
  }
  function KeyCode_ESCAPE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_ESCAPE_instance;
  }
  function KeyCode_F1_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F1_instance;
  }
  function KeyCode_F2_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F2_instance;
  }
  function KeyCode_F3_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F3_instance;
  }
  function KeyCode_F4_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F4_instance;
  }
  function KeyCode_F5_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F5_instance;
  }
  function KeyCode_F6_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F6_instance;
  }
  function KeyCode_F7_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F7_instance;
  }
  function KeyCode_F8_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F8_instance;
  }
  function KeyCode_F9_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F9_instance;
  }
  function KeyCode_F10_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F10_instance;
  }
  function KeyCode_F11_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F11_instance;
  }
  function KeyCode_F12_getInstance() {
    KeyCode_initEntries();
    return KeyCode_F12_instance;
  }
  function KeyCode_PRINT_SCREEN_getInstance() {
    KeyCode_initEntries();
    return KeyCode_PRINT_SCREEN_instance;
  }
  function KeyCode_SCROLL_LOCK_getInstance() {
    KeyCode_initEntries();
    return KeyCode_SCROLL_LOCK_instance;
  }
  function KeyCode_PAUSE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_PAUSE_instance;
  }
  function KeyCode_INSERT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_INSERT_instance;
  }
  function KeyCode_DELETE_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DELETE_instance;
  }
  function KeyCode_HOME_POS1_getInstance() {
    KeyCode_initEntries();
    return KeyCode_HOME_POS1_instance;
  }
  function KeyCode_END_getInstance() {
    KeyCode_initEntries();
    return KeyCode_END_instance;
  }
  function KeyCode_PAGE_UP_getInstance() {
    KeyCode_initEntries();
    return KeyCode_PAGE_UP_instance;
  }
  function KeyCode_PAGE_DOWN_getInstance() {
    KeyCode_initEntries();
    return KeyCode_PAGE_DOWN_instance;
  }
  function KeyCode_LEFT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_LEFT_instance;
  }
  function KeyCode_UP_getInstance() {
    KeyCode_initEntries();
    return KeyCode_UP_instance;
  }
  function KeyCode_RIGHT_getInstance() {
    KeyCode_initEntries();
    return KeyCode_RIGHT_instance;
  }
  function KeyCode_DOWN_getInstance() {
    KeyCode_initEntries();
    return KeyCode_DOWN_instance;
  }
  function KeyCode_UNDEFINED_getInstance() {
    KeyCode_initEntries();
    return KeyCode_UNDEFINED_instance;
  }
  function _get_$cachedSerializer__te6jhj_17($this) {
    return $this.y2q_1.u1();
  }
  function MouseButtonType$Companion$_anonymous__rwulby() {
    return createSimpleEnumSerializer('tools.aqua.bgw.event.MouseButtonType', values_3());
  }
  var MouseButtonType_LEFT_BUTTON_instance;
  var MouseButtonType_RIGHT_BUTTON_instance;
  var MouseButtonType_MOUSE_WHEEL_instance;
  var MouseButtonType_OTHER_instance;
  var MouseButtonType_UNSPECIFIED_instance;
  function values_3() {
    return [MouseButtonType_LEFT_BUTTON_getInstance(), MouseButtonType_RIGHT_BUTTON_getInstance(), MouseButtonType_MOUSE_WHEEL_getInstance(), MouseButtonType_OTHER_getInstance(), MouseButtonType_UNSPECIFIED_getInstance()];
  }
  function Companion_90() {
    Companion_instance_90 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.y2q_1 = lazy(tmp_0, MouseButtonType$Companion$_anonymous__rwulby);
  }
  protoOf(Companion_90).g16 = function () {
    return _get_$cachedSerializer__te6jhj_17(this);
  };
  protoOf(Companion_90).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_90;
  function Companion_getInstance_90() {
    MouseButtonType_initEntries();
    if (Companion_instance_90 == null)
      new Companion_90();
    return Companion_instance_90;
  }
  var MouseButtonType_entriesInitialized;
  function MouseButtonType_initEntries() {
    if (MouseButtonType_entriesInitialized)
      return Unit_instance;
    MouseButtonType_entriesInitialized = true;
    MouseButtonType_LEFT_BUTTON_instance = new MouseButtonType('LEFT_BUTTON', 0);
    MouseButtonType_RIGHT_BUTTON_instance = new MouseButtonType('RIGHT_BUTTON', 1);
    MouseButtonType_MOUSE_WHEEL_instance = new MouseButtonType('MOUSE_WHEEL', 2);
    MouseButtonType_OTHER_instance = new MouseButtonType('OTHER', 3);
    MouseButtonType_UNSPECIFIED_instance = new MouseButtonType('UNSPECIFIED', 4);
    Companion_getInstance_90();
  }
  function MouseButtonType(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function MouseButtonType_LEFT_BUTTON_getInstance() {
    MouseButtonType_initEntries();
    return MouseButtonType_LEFT_BUTTON_instance;
  }
  function MouseButtonType_RIGHT_BUTTON_getInstance() {
    MouseButtonType_initEntries();
    return MouseButtonType_RIGHT_BUTTON_instance;
  }
  function MouseButtonType_MOUSE_WHEEL_getInstance() {
    MouseButtonType_initEntries();
    return MouseButtonType_MOUSE_WHEEL_instance;
  }
  function MouseButtonType_OTHER_getInstance() {
    MouseButtonType_initEntries();
    return MouseButtonType_OTHER_instance;
  }
  function MouseButtonType_UNSPECIFIED_getInstance() {
    MouseButtonType_initEntries();
    return MouseButtonType_UNSPECIFIED_instance;
  }
  function _get_$cachedSerializer__te6jhj_18($this) {
    return $this.w2s_1.u1();
  }
  function WheelDirection$Companion$_anonymous__3xssob() {
    return createSimpleEnumSerializer('tools.aqua.bgw.event.WheelDirection', values_4());
  }
  var WheelDirection_UP_instance;
  var WheelDirection_DOWN_instance;
  function Companion_91() {
    Companion_instance_91 = this;
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.w2s_1 = lazy(tmp_0, WheelDirection$Companion$_anonymous__3xssob);
  }
  protoOf(Companion_91).g16 = function () {
    return _get_$cachedSerializer__te6jhj_18(this);
  };
  protoOf(Companion_91).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var Companion_instance_91;
  function Companion_getInstance_91() {
    WheelDirection_initEntries();
    if (Companion_instance_91 == null)
      new Companion_91();
    return Companion_instance_91;
  }
  function values_4() {
    return [WheelDirection_UP_getInstance(), WheelDirection_DOWN_getInstance()];
  }
  var WheelDirection_entriesInitialized;
  function WheelDirection_initEntries() {
    if (WheelDirection_entriesInitialized)
      return Unit_instance;
    WheelDirection_entriesInitialized = true;
    WheelDirection_UP_instance = new WheelDirection('UP', 0);
    WheelDirection_DOWN_instance = new WheelDirection('DOWN', 1);
    Companion_getInstance_91();
  }
  function WheelDirection(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function WheelDirection_UP_getInstance() {
    WheelDirection_initEntries();
    return WheelDirection_UP_instance;
  }
  function WheelDirection_DOWN_getInstance() {
    WheelDirection_initEntries();
    return WheelDirection_DOWN_instance;
  }
  function Companion_92() {
    this.c2u_1 = 20;
  }
  var Companion_instance_92;
  function Companion_getInstance_92() {
    return Companion_instance_92;
  }
  function clearComponentAnimations($this, componentId, types) {
    if (types.n()) {
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var this_0 = $this.d2u_1.y1();
      var destination = ArrayList_init_$Create$();
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.Animator.clearComponentAnimations.<anonymous>' call
        if (startsWith(element, componentId)) {
          destination.e(element);
        }
      }
      var tmp0_iterator_0 = destination.j();
      while (tmp0_iterator_0.k()) {
        var element_0 = tmp0_iterator_0.l();
        // Inline function 'tools.aqua.bgw.Animator.clearComponentAnimations.<anonymous>' call
        var tmp;
        if (!(document.body == null) && !($this.d2u_1.x1(element_0) == null)) {
          var tmp4_safe_receiver = document.body;
          tmp = (tmp4_safe_receiver == null ? null : tmp4_safe_receiver.contains(ensureNotNull($this.d2u_1.x1(element_0)))) === true;
        } else {
          tmp = false;
        }
        if (tmp) {
          var tmp3_safe_receiver = document.body;
          if (tmp3_safe_receiver == null)
            null;
          else
            tmp3_safe_receiver.removeChild(ensureNotNull($this.d2u_1.x1(element_0)));
        }
        if (!($this.d2u_1.x1(element_0) == null)) {
          $this.d2u_1.c2(element_0);
        }
      }
    } else {
      // Inline function 'kotlin.collections.forEach' call
      var tmp0_iterator_1 = types.j();
      while (tmp0_iterator_1.k()) {
        var element_1 = tmp0_iterator_1.l();
        // Inline function 'tools.aqua.bgw.Animator.clearComponentAnimations.<anonymous>' call
        var tmp_0;
        if (!(document.body == null) && !($this.d2u_1.x1(componentId + '--' + element_1) == null)) {
          var tmp6_safe_receiver = document.body;
          tmp_0 = (tmp6_safe_receiver == null ? null : tmp6_safe_receiver.contains(ensureNotNull($this.d2u_1.x1(componentId + '--' + element_1)))) === true;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp5_safe_receiver = document.body;
          if (tmp5_safe_receiver == null)
            null;
          else
            tmp5_safe_receiver.removeChild(ensureNotNull($this.d2u_1.x1(componentId + '--' + element_1)));
        }
        if (!($this.d2u_1.x1(componentId + '--' + element_1) == null)) {
          $this.d2u_1.c2(componentId + '--' + element_1);
        }
      }
    }
  }
  function clearComponentAnimations$default($this, componentId, types, $super) {
    var tmp;
    if (types === VOID) {
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp = ArrayList_init_$Create$();
    } else {
      tmp = types;
    }
    types = tmp;
    return clearComponentAnimations($this, componentId, types);
  }
  function startDelayAnimation($this, animation, callback) {
    console.log('Starting delay animation');
    setTimeout(Animator$startDelayAnimation$lambda(callback, animation), animation.e1r_1);
  }
  function startSequentialAnimation($this, animation, callback) {
    var animations = animation.l2o_1;
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = animations.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'tools.aqua.bgw.Animator.startSequentialAnimation.<anonymous>' call
      var tmp0_elvis_lhs = element instanceof ComponentAnimationData ? element : null;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        return Unit_instance;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var component = tmp;
      var tmp7_safe_receiver = component.i2k_1;
      var componentId = toString_1(tmp7_safe_receiver == null ? null : tmp7_safe_receiver.a1s_1);
      clearComponentAnimations$default($this, componentId);
    }
    var currentDuration = 0;
    var _iterator__ex2g4s = animations.j();
    while (_iterator__ex2g4s.k()) {
      var anim = _iterator__ex2g4s.l();
      setTimeout(Animator$startSequentialAnimation$lambda($this, anim, animations, callback), currentDuration);
      currentDuration = currentDuration + anim.e1r_1 | 0;
      if (equals(anim, last(animations))) {
        var totalDuration = currentDuration + 20 | 0;
        setTimeout(Animator$startSequentialAnimation$lambda_0(callback, animation), totalDuration);
      }
    }
  }
  function startParallelAnimation($this, animation, callback) {
    var animations = animation.t2m_1;
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = animations.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'tools.aqua.bgw.Animator.startParallelAnimation.<anonymous>' call
      var tmp0_elvis_lhs = element instanceof ComponentAnimationData ? element : null;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        return Unit_instance;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var component = tmp;
      var tmp8_safe_receiver = component.i2k_1;
      var componentId = toString_1(tmp8_safe_receiver == null ? null : tmp8_safe_receiver.a1s_1);
      clearComponentAnimations$default($this, componentId);
    }
    var _iterator__ex2g4s = animations.j();
    while (_iterator__ex2g4s.k()) {
      var anim = _iterator__ex2g4s.l();
      $this.e2u(anim, animations, callback);
      if (equals(anim, last(animations))) {
        var tmp$ret$0;
        $l$block: {
          // Inline function 'kotlin.collections.maxOfOrNull' call
          var iterator = animations.j();
          if (!iterator.k()) {
            tmp$ret$0 = null;
            break $l$block;
          }
          // Inline function 'tools.aqua.bgw.Animator.startParallelAnimation.<anonymous>' call
          var maxValue = iterator.l().e1r_1;
          while (iterator.k()) {
            // Inline function 'tools.aqua.bgw.Animator.startParallelAnimation.<anonymous>' call
            var v = iterator.l().e1r_1;
            if (compareTo(maxValue, v) < 0) {
              maxValue = v;
            }
          }
          tmp$ret$0 = maxValue;
        }
        var tmp0_elvis_lhs_0 = tmp$ret$0;
        var maxDuration = tmp0_elvis_lhs_0 == null ? 0 : tmp0_elvis_lhs_0;
        setTimeout(Animator$startParallelAnimation$lambda(callback, animation), maxDuration + 20 | 0);
      }
    }
  }
  function startComponentAnimation($this, type, animation, parallelAnimation, callback) {
    var tmp9_safe_receiver = animation.i2k_1;
    var componentId = toString_1(tmp9_safe_receiver == null ? null : tmp9_safe_receiver.a1s_1);
    var duration = animation.e1r_1;
    var tmp0_elvis_lhs = document.getElementById(componentId);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var element = tmp;
    clearComponentAnimations($this, componentId, listOf(type));
    element.classList.toggle(componentId + '--' + type + '--props', false);
    if (animation instanceof ScaleAnimationData) {
      (!(element == null) ? element : THROW_CCE()).style.scale = '' + animation.z2n_1 + ' ' + animation.a2o_1;
    }
    setTimeout(Animator$startComponentAnimation$lambda(componentId, type, $this, animation, parallelAnimation, element, duration, callback), 50);
  }
  function startFlipAnimation($this, animation, callback) {
    var type = 'flip';
    var tmp11_safe_receiver = animation.i2k_1;
    var componentId = toString_1(tmp11_safe_receiver == null ? null : tmp11_safe_receiver.a1s_1);
    var duration = animation.e1r_1;
    var tmp0_elvis_lhs = document.getElementById(componentId);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var element = tmp;
    clearComponentAnimations($this, componentId, listOf(type));
    element.classList.toggle(componentId + '--' + type + '--props', false);
    setTimeout(Animator$startFlipAnimation$lambda(componentId, type, $this, animation, element, duration, callback), 50);
  }
  function startRandomizeAnimation($this, animation, callback) {
    var type = 'random';
    var tmp13_safe_receiver = animation.i2k_1;
    var componentId = toString_1(tmp13_safe_receiver == null ? null : tmp13_safe_receiver.a1s_1);
    var duration = animation.e1r_1;
    var interval = setInterval(Animator$startRandomizeAnimation$lambda(componentId, animation), duration / animation.v2k_1 | 0);
    setTimeout(Animator$startRandomizeAnimation$lambda_0(interval, componentId, animation, callback), duration);
  }
  function startDiceAnimation($this, animation, callback) {
    var type = 'dice';
    var tmp14_safe_receiver = animation.i2k_1;
    var componentId = toString_1(tmp14_safe_receiver == null ? null : tmp14_safe_receiver.a1s_1);
    var tmp = animation.i2k_1;
    var tmp0_elvis_lhs = tmp instanceof DiceViewData ? tmp : null;
    var tmp_0;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp_0 = tmp0_elvis_lhs;
    }
    var dice = tmp_0;
    var duration = animation.e1r_1;
    var interval = setInterval(Animator$startDiceAnimation$lambda(componentId, dice), duration / animation.v2k_1 | 0);
    setTimeout(Animator$startDiceAnimation$lambda_0(interval, componentId, dice, animation, callback), duration);
  }
  function getTransitionCSS($this, animationList) {
    var transitions = joinToString_0(animationList, ', ', VOID, VOID, VOID, VOID, Animator$getTransitionCSS$lambda);
    return trimIndent('\n            transition: ' + transitions + ';\n        ');
  }
  function getAnimationCSS($this, type, componentId, animationData, parallelAnimations) {
    println('Getting animation CSS for ' + type + ' and data ' + (animationData instanceof MovementAnimationData));
    if (parallelAnimations.n()) {
      parallelAnimations.e(animationData);
    }
    var tmp;
    if (animationData instanceof FadeAnimationData) {
      tmp = trimIndent('\n                .' + componentId + '--' + type + '--props {\n                    ' + getTransitionCSS($this, parallelAnimations) + '\n                }\n                \n                .' + componentId + '--' + type + ' {\n                    opacity: ' + animationData.o2l_1 + ';\n                }\n            ');
    } else {
      if (animationData instanceof MovementAnimationData) {
        tmp = trimIndent('\n                .' + componentId + '--' + type + '--props {\n                    ' + getTransitionCSS($this, parallelAnimations) + '\n                }\n                \n                .' + componentId + '--' + type + ' {\n                    translate: ' + animationData.j2m_1 + 'em ' + animationData.k2m_1 + 'em;\n                }\n            ');
      } else {
        if (animationData instanceof RotationAnimationData) {
          tmp = trimIndent('\n                .' + componentId + '--' + type + '--props {\n                    ' + getTransitionCSS($this, parallelAnimations) + '\n                }\n                \n                .' + componentId + '--' + type + ' {\n                    rotate: ' + animationData.p2n_1 + 'deg;\n                }\n            ');
        } else {
          if (animationData instanceof ScaleAnimationData) {
            tmp = trimIndent('\n                .' + componentId + '--' + type + '--props {\n                    ' + getTransitionCSS($this, parallelAnimations) + '\n                }\n                \n                .' + componentId + '--' + type + ' {\n                    scale: ' + animationData.b2o_1 + ' ' + animationData.c2o_1 + ' !important;\n                }\n            ');
          } else {
            if (animationData instanceof FlipAnimationData) {
              tmp = trimIndent('                \n                .' + componentId + '--' + type + '--props {\n                    animation: ' + componentId + '--' + type + '--flip ' + animationData.e1r_1 + 'ms linear;\n                }\n                \n                @keyframes ' + componentId + '--' + type + '--flip {\n                    0% {\n                        transform: rotateY(0deg);\n                    }\n                    50% {\n                        transform: rotateY(90deg);\n                    }\n                    100% {\n                        transform: rotateY(0deg);\n                    }\n                }\n            ');
            } else {
              tmp = '';
            }
          }
        }
      }
    }
    return tmp;
  }
  function getAnimationCSS$default($this, type, componentId, animationData, parallelAnimations, $super) {
    var tmp;
    if (parallelAnimations === VOID) {
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp = ArrayList_init_$Create$();
    } else {
      tmp = parallelAnimations;
    }
    parallelAnimations = tmp;
    return getAnimationCSS($this, type, componentId, animationData, parallelAnimations);
  }
  function Animator$startDelayAnimation$lambda($callback, $animation) {
    return function () {
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$startSequentialAnimation$lambda(this$0, $anim, $animations, $callback) {
    return function () {
      this$0.e2u($anim, $animations, $callback);
      return Unit_instance;
    };
  }
  function Animator$startSequentialAnimation$lambda_0($callback, $animation) {
    return function () {
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$startParallelAnimation$lambda($callback, $animation) {
    return function () {
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$startComponentAnimation$lambda$lambda($element, $componentId, $type, $callback, $animation) {
    return function () {
      $element.classList.toggle($componentId + '--' + $type + '--props', false);
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$startComponentAnimation$lambda($componentId, $type, this$0, $animation, $parallelAnimation, $element, $duration, $callback) {
    return function () {
      var newElement = document.createElement('style');
      newElement.id = $componentId + '--' + $type;
      newElement.innerHTML = getAnimationCSS(this$0, $type, $componentId, $animation, toMutableList($parallelAnimation));
      var tmp10_safe_receiver = document.body;
      if (tmp10_safe_receiver == null)
        null;
      else
        tmp10_safe_receiver.appendChild(newElement);
      $element.classList.toggle($componentId + '--' + $type + '--props', true);
      $element.classList.toggle($componentId + '--' + $type, true);
      var this_0 = this$0.d2u_1;
      var key = $componentId + '--' + $type;
      this_0.b2(key, newElement);
      setTimeout(Animator$startComponentAnimation$lambda$lambda($element, $componentId, $type, $callback, $animation), $duration);
      return Unit_instance;
    };
  }
  function Animator$startFlipAnimation$lambda$lambda($componentId, $animation) {
    return function () {
      var tmp = document.querySelector('#' + $componentId + ' > bgw_visuals');
      var oldVisuals = (tmp == null ? true : tmp instanceof Element) ? tmp : THROW_CCE();
      var tmp_0;
      if (!(oldVisuals == null)) {
        render(VisualBuilder_instance.f2u($animation.z2l_1), oldVisuals);
        tmp_0 = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function Animator$startFlipAnimation$lambda$lambda_0($element, $componentId, $type, $callback, $animation) {
    return function () {
      $element.classList.toggle($componentId + '--' + $type + '--props', false);
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$startFlipAnimation$lambda($componentId, $type, this$0, $animation, $element, $duration, $callback) {
    return function () {
      var newElement = document.createElement('style');
      newElement.id = $componentId + '--' + $type;
      newElement.innerHTML = getAnimationCSS$default(this$0, $type, $componentId, $animation);
      var tmp12_safe_receiver = document.body;
      if (tmp12_safe_receiver == null)
        null;
      else
        tmp12_safe_receiver.appendChild(newElement);
      $element.classList.toggle($componentId + '--' + $type + '--props', true);
      $element.classList.toggle($componentId + '--' + $type, true);
      var this_0 = this$0.d2u_1;
      var key = $componentId + '--' + $type;
      this_0.b2(key, newElement);
      var tmp = document.querySelector('#' + $componentId + ' > bgw_visuals');
      var oldVisuals = (tmp == null ? true : tmp instanceof Element) ? tmp : THROW_CCE();
      var tmp_0;
      if (!(oldVisuals == null)) {
        render(VisualBuilder_instance.f2u($animation.y2l_1), oldVisuals);
        tmp_0 = Unit_instance;
      }
      setTimeout(Animator$startFlipAnimation$lambda$lambda($componentId, $animation), $duration / 2 | 0);
      setTimeout(Animator$startFlipAnimation$lambda$lambda_0($element, $componentId, $type, $callback, $animation), $duration);
      return Unit_instance;
    };
  }
  function Animator$startRandomizeAnimation$lambda($componentId, $animation) {
    return function () {
      var tmp = document.querySelector('#' + $componentId + ' > bgw_visuals');
      var oldVisuals = (tmp == null ? true : tmp instanceof Element) ? tmp : THROW_CCE();
      var tmp_0;
      if (!(oldVisuals == null)) {
        var tmp_1 = VisualBuilder_instance;
        // Inline function 'kotlin.collections.random' call
        var this_0 = $animation.e2n_1;
        var tmp$ret$0 = random(this_0, Default_getInstance());
        render(tmp_1.f2u(tmp$ret$0), oldVisuals);
        tmp_0 = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function Animator$startRandomizeAnimation$lambda_0($interval, $componentId, $animation, $callback) {
    return function () {
      clearInterval($interval);
      var tmp = document.querySelector('#' + $componentId + ' > bgw_visuals');
      var oldVisuals = (tmp == null ? true : tmp instanceof Element) ? tmp : THROW_CCE();
      var tmp_0;
      if (!(oldVisuals == null)) {
        render(VisualBuilder_instance.f2u($animation.f2n_1), oldVisuals);
        tmp_0 = Unit_instance;
      }
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$startDiceAnimation$lambda($componentId, $dice) {
    return function () {
      var tmp = document.querySelector('#' + $componentId + ' > bgw_visuals');
      var oldVisuals = (tmp == null ? true : tmp instanceof Element) ? tmp : THROW_CCE();
      var tmp_0;
      if (!(oldVisuals == null)) {
        var tmp_1 = VisualBuilder_instance;
        // Inline function 'kotlin.collections.random' call
        var this_0 = $dice.q2c_1;
        var tmp$ret$0 = random(this_0, Default_getInstance());
        render(tmp_1.f2u(tmp$ret$0), oldVisuals);
        tmp_0 = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function Animator$startDiceAnimation$lambda_0($interval, $componentId, $dice, $animation, $callback) {
    return function () {
      clearInterval($interval);
      var tmp = document.querySelector('#' + $componentId + ' > bgw_visuals');
      var oldVisuals = (tmp == null ? true : tmp instanceof Element) ? tmp : THROW_CCE();
      var tmp_0;
      if (!(oldVisuals == null)) {
        render(VisualBuilder_instance.f2u($dice.q2c_1.o($animation.d2l_1)), oldVisuals);
        tmp_0 = Unit_instance;
      }
      $callback($animation.d1r_1);
      return Unit_instance;
    };
  }
  function Animator$getTransitionCSS$lambda(it) {
    var tmp;
    if (it instanceof FadeAnimationData) {
      tmp = 'opacity ' + it.e1r_1 + 'ms ease-in-out';
    } else {
      if (it instanceof MovementAnimationData) {
        tmp = 'translate ' + it.e1r_1 + 'ms ease-in-out';
      } else {
        if (it instanceof RotationAnimationData) {
          tmp = 'rotate ' + it.e1r_1 + 'ms ease-in-out';
        } else {
          if (it instanceof ScaleAnimationData) {
            tmp = 'scale ' + it.e1r_1 + 'ms ease-in-out';
          } else {
            tmp = '';
          }
        }
      }
    }
    return tmp;
  }
  function Animator() {
    var tmp = this;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp.d2u_1 = LinkedHashMap_init_$Create$();
  }
  protoOf(Animator).e2u = function (animationData, parallelAnimations, callback) {
    if (animationData instanceof ComponentAnimationData) {
      if (animationData instanceof FadeAnimationData) {
        startComponentAnimation(this, 'fade', animationData, parallelAnimations, callback);
      } else {
        if (animationData instanceof MovementAnimationData) {
          startComponentAnimation(this, 'move', animationData, parallelAnimations, callback);
        } else {
          if (animationData instanceof RotationAnimationData) {
            startComponentAnimation(this, 'rotate', animationData, parallelAnimations, callback);
          } else {
            if (animationData instanceof ScaleAnimationData) {
              startComponentAnimation(this, 'scale', animationData, parallelAnimations, callback);
            } else {
              if (animationData instanceof FlipAnimationData) {
                startFlipAnimation(this, animationData, callback);
              } else {
                if (animationData instanceof SteppedComponentAnimationData) {
                  if (animationData instanceof RandomizeAnimationData) {
                    startRandomizeAnimation(this, animationData, callback);
                  } else {
                    if (animationData instanceof DiceAnimationData) {
                      startDiceAnimation(this, animationData, callback);
                    } else {
                      throw IllegalArgumentException_init_$Create$('Unknown animation type');
                    }
                  }
                } else {
                  throw IllegalArgumentException_init_$Create$('Unknown animation type');
                }
              }
            }
          }
        }
      }
    } else {
      if (animationData instanceof DelayAnimationData) {
        startDelayAnimation(this, animationData, callback);
      } else {
        if (animationData instanceof ParallelAnimationData) {
          startParallelAnimation(this, animationData, callback);
        } else {
          if (animationData instanceof SequentialAnimationData) {
            startSequentialAnimation(this, animationData, callback);
          } else {
            throw IllegalArgumentException_init_$Create$('Unknown animation type');
          }
        }
      }
    }
  };
  protoOf(Animator).g2u = function (animationData, parallelAnimations, callback, $super) {
    var tmp;
    if (parallelAnimations === VOID) {
      // Inline function 'kotlin.collections.listOf' call
      tmp = emptyList();
    } else {
      tmp = parallelAnimations;
    }
    parallelAnimations = tmp;
    var tmp_0;
    if ($super === VOID) {
      this.e2u(animationData, parallelAnimations, callback);
      tmp_0 = Unit_instance;
    } else {
      tmp_0 = $super.e2u.call(this, animationData, parallelAnimations, callback);
    }
    return tmp_0;
  };
  var internalSocket;
  function set_webSocket(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    webSocket = _set____db54di;
  }
  function get_webSocket() {
    _init_properties_Client_kt__a2ryqz();
    return webSocket;
  }
  var webSocket;
  var handlers;
  function get_animator() {
    _init_properties_Client_kt__a2ryqz();
    return animator;
  }
  var animator;
  function get_dialogMap() {
    _init_properties_Client_kt__a2ryqz();
    return dialogMap;
  }
  var dialogMap;
  function set_container(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    container = _set____db54di;
  }
  function get_container() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = container;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('container');
    }
  }
  var container;
  function set_dialogContainer(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    dialogContainer = _set____db54di;
  }
  function get_dialogContainer() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = dialogContainer;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('dialogContainer');
    }
  }
  var dialogContainer;
  function set_root(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    root = _set____db54di;
  }
  function get_root() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = root;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('root');
    }
  }
  var root;
  function set_dialogRoot(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    dialogRoot = _set____db54di;
  }
  function get_dialogRoot() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = dialogRoot;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('dialogRoot');
    }
  }
  var dialogRoot;
  function main() {
    _init_properties_Client_kt__a2ryqz();
    if (Config_instance.h2u_1) {
      var tmp17_safe_receiver = document.location;
      set_webSocket(new WebSocket('ws://' + (tmp17_safe_receiver == null ? null : tmp17_safe_receiver.host) + '/ws'));
      var tmp18_safe_receiver = get_webSocket();
      if (tmp18_safe_receiver == null)
        null;
      else {
        tmp18_safe_receiver.onopen = main$lambda;
      }
      var tmp19_safe_receiver = get_webSocket();
      if (tmp19_safe_receiver == null)
        null;
      else {
        tmp19_safe_receiver.onmessage = main$lambda_0;
      }
    } else {
      var tmp = document;
      tmp.addEventListener('BGW_MSG', main$lambda_1);
    }
  }
  function handleReceivedData(receivedData) {
    _init_properties_Client_kt__a2ryqz();
    if (receivedData instanceof AppData) {
      if (receivedData.p1q_1.equals(ActionProp_HIDE_MENU_SCENE_getInstance())) {
        console.log('[SCENE] Hiding Menu Scene');
        var tmp = document.querySelector('#menuScene');
        var element = tmp instanceof HTMLElement ? tmp : THROW_CCE();
        element.classList.toggle('scene--visible', false);
        setTimeout(handleReceivedData$lambda(receivedData), 300);
      } else if (receivedData.p1q_1.equals(ActionProp_SHOW_MENU_SCENE_getInstance())) {
        if (!Config_instance.h2u_1) {
          renderApp(receivedData);
        } else {
          renderAppFast(receivedData);
        }
        var tmp_0 = document.querySelector('#menuScene');
        var element_0 = tmp_0 instanceof HTMLElement ? tmp_0 : THROW_CCE();
        setTimeout(handleReceivedData$lambda_0(element_0), 50);
      } else {
        if (!Config_instance.h2u_1) {
          renderApp(receivedData);
        } else {
          renderAppFast(receivedData);
        }
      }
    } else {
      if (receivedData instanceof AnimationData) {
        var tmp_1 = get_animator();
        tmp_1.g2u(receivedData, VOID, handleReceivedData$lambda_1);
      } else {
        if (receivedData instanceof DialogData) {
          // Inline function 'kotlin.collections.set' call
          var this_0 = get_dialogMap();
          var key = receivedData.l1r_1;
          this_0.b2(key, receivedData);
          renderDialogs();
        }
      }
    }
  }
  function renderApp(appData) {
    _init_properties_Client_kt__a2ryqz();
    var tmp = get_App();
    var tmp_0 = create(tmp, renderApp$lambda(appData));
    var tmp_1 = get_container();
    var tmp_2 = tmp_1 instanceof Element ? tmp_1 : THROW_CCE();
    render(tmp_0, tmp_2, renderApp$lambda_0);
  }
  function renderAppFast(appData) {
    _init_properties_Client_kt__a2ryqz();
    if (!!(root == null)) {
      var tmp = get_container();
      set_root(createRoot(tmp instanceof Element ? tmp : THROW_CCE()));
    }
    var tmp_0 = get_root();
    var tmp_1 = get_App();
    tmp_0.render(create(tmp_1, renderAppFast$lambda(appData)));
    JCEFEventDispatcher_getInstance().k2u(new LoadEventData());
  }
  function renderDialogs() {
    _init_properties_Client_kt__a2ryqz();
    println('Rendering Dialogs ' + toString_0(get_dialogMap()));
    if (!!(dialogRoot == null)) {
      var tmp = get_dialogContainer();
      set_dialogRoot(createRoot(tmp instanceof Element ? tmp : THROW_CCE()));
    }
    var tmp_0 = get_dialogRoot();
    var tmp_1 = get_Dialog();
    tmp_0.render(create(tmp_1, renderDialogs$lambda));
  }
  function main$lambda(it) {
    _init_properties_Client_kt__a2ryqz();
    return Unit_instance;
  }
  function main$lambda_0(event) {
    _init_properties_Client_kt__a2ryqz();
    var cont = document.getElementById('bgw-root');
    var dialog = document.getElementById('bgw-dialogs');
    if (!(cont == null)) {
      set_dialogContainer(dialog instanceof HTMLElement ? dialog : THROW_CCE());
    }
    if (!(cont == null)) {
      set_container(cont instanceof HTMLElement ? cont : THROW_CCE());
      // Inline function 'kotlinx.serialization.json.Json.decodeFromString' call
      var this_0 = get_jsonMapper();
      var string = toString_1(event.data);
      // Inline function 'kotlinx.serialization.serializer' call
      var this_1 = this_0.qm();
      // Inline function 'kotlinx.serialization.internal.cast' call
      var this_2 = serializer_0(this_1, createKType(getKClass(PropData), arrayOf([]), false));
      var tmp$ret$1 = isInterface(this_2, KSerializer) ? this_2 : THROW_CCE();
      var receivedData = this_0.z13(tmp$ret$1, string).g1q_1;
      handleReceivedData(ensureNotNull(receivedData));
    }
    return Unit_instance;
  }
  function main$lambda_1(it) {
    _init_properties_Client_kt__a2ryqz();
    var event = it instanceof CustomEvent ? it : THROW_CCE();
    var data = event.detail;
    // Inline function 'kotlinx.serialization.json.Json.decodeFromString' call
    var this_0 = get_jsonMapper();
    var string = toString_1(data);
    // Inline function 'kotlinx.serialization.serializer' call
    var this_1 = this_0.qm();
    // Inline function 'kotlinx.serialization.internal.cast' call
    var this_2 = serializer_0(this_1, createKType(getKClass(JsonData), arrayOf([]), false));
    var tmp$ret$1 = isInterface(this_2, KSerializer) ? this_2 : THROW_CCE();
    var jsonData = this_0.z13(tmp$ret$1, string);
    var receivedData = jsonData.b1q_1.g1q_1;
    var containerId = jsonData.a1q_1;
    var cont = document.getElementById(containerId);
    if (!(cont == null)) {
      set_container(cont instanceof HTMLElement ? cont : THROW_CCE());
      handleReceivedData(ensureNotNull(receivedData));
    }
    return Unit_instance;
  }
  function handleReceivedData$lambda($receivedData) {
    return function () {
      var tmp;
      if (!Config_instance.h2u_1) {
        renderApp($receivedData);
        tmp = Unit_instance;
      } else {
        renderAppFast($receivedData);
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function handleReceivedData$lambda_0($element) {
    return function () {
      $element.classList.toggle('scene--visible', true);
      return Unit_instance;
    };
  }
  function handleReceivedData$lambda_1(it) {
    _init_properties_Client_kt__a2ryqz();
    var tmp = JCEFEventDispatcher_getInstance();
    // Inline function 'kotlin.apply' call
    var this_0 = new AnimationFinishedEventData();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.handleReceivedData.<anonymous>.<anonymous>' call
    this_0.s2o(it);
    tmp.l2u(this_0);
    return Unit_instance;
  }
  function renderApp$lambda($appData) {
    return function ($this$create) {
      $this$create.data = $appData;
      return Unit_instance;
    };
  }
  function renderApp$lambda_0() {
    _init_properties_Client_kt__a2ryqz();
    JCEFEventDispatcher_getInstance().k2u(new LoadEventData());
    return Unit_instance;
  }
  function renderAppFast$lambda($appData) {
    return function ($this$create) {
      $this$create.data = $appData;
      return Unit_instance;
    };
  }
  function renderDialogs$lambda($this$create) {
    _init_properties_Client_kt__a2ryqz();
    $this$create.data = toList(get_dialogMap().z1());
    return Unit_instance;
  }
  var properties_initialized_Client_kt_4npn83;
  function _init_properties_Client_kt__a2ryqz() {
    if (!properties_initialized_Client_kt_4npn83) {
      properties_initialized_Client_kt_4npn83 = true;
      internalSocket = null;
      webSocket = null;
      // Inline function 'kotlin.collections.mutableMapOf' call
      handlers = LinkedHashMap_init_$Create$();
      animator = new Animator();
      // Inline function 'kotlin.collections.mutableMapOf' call
      dialogMap = LinkedHashMap_init_$Create$();
    }
  }
  function mainWrapper() {
    main();
  }
  function Config() {
    this.h2u_1 = false;
    this.i2u_1 = false;
    this.j2u_1 = '0.9-new_backend-103-de504fe-SNAPSHOT';
  }
  var Config_instance;
  function Config_getInstance() {
    return Config_instance;
  }
  function ContainerBuilder$build$lambda($containerViewData) {
    return function ($this$create) {
      $this$create.data = $containerViewData;
      return Unit_instance;
    };
  }
  function ContainerBuilder$build$lambda_0($containerViewData) {
    return function ($this$create) {
      $this$create.data = $containerViewData;
      return Unit_instance;
    };
  }
  function ContainerBuilder$build$lambda_1($containerViewData) {
    return function ($this$create) {
      $this$create.data = $containerViewData;
      return Unit_instance;
    };
  }
  function ContainerBuilder$build$lambda_2($containerViewData) {
    return function ($this$create) {
      $this$create.data = $containerViewData;
      return Unit_instance;
    };
  }
  function ContainerBuilder() {
  }
  protoOf(ContainerBuilder).m2u = function (containerViewData) {
    var tmp;
    if (containerViewData instanceof AreaData) {
      var tmp_0 = get_Area();
      tmp = create(tmp_0, ContainerBuilder$build$lambda(containerViewData));
    } else {
      if (containerViewData instanceof LinearLayoutData) {
        var tmp_1 = get_LinearLayout();
        tmp = create(tmp_1, ContainerBuilder$build$lambda_0(containerViewData));
      } else {
        if (containerViewData instanceof CardStackData) {
          var tmp_2 = get_CardStack();
          tmp = create(tmp_2, ContainerBuilder$build$lambda_1(containerViewData));
        } else {
          if (containerViewData instanceof SatchelData) {
            var tmp_3 = get_Satchel();
            tmp = create(tmp_3, ContainerBuilder$build$lambda_2(containerViewData));
          } else {
            throw IllegalArgumentException_init_$Create$('Unknown component type: ' + getKClassFromExpression(containerViewData).f9());
          }
        }
      }
    }
    return tmp;
  };
  var ContainerBuilder_instance;
  function ContainerBuilder_getInstance() {
    return ContainerBuilder_instance;
  }
  function LayoutNodeBuilder$build$lambda($layoutViewData) {
    return function ($this$create) {
      $this$create.data = $layoutViewData;
      return Unit_instance;
    };
  }
  function LayoutNodeBuilder$build$lambda_0($layoutViewData) {
    return function ($this$create) {
      $this$create.data = $layoutViewData;
      return Unit_instance;
    };
  }
  function LayoutNodeBuilder() {
  }
  protoOf(LayoutNodeBuilder).n2u = function (layoutViewData) {
    var tmp;
    if (layoutViewData instanceof PaneData) {
      var tmp_0 = get_Pane();
      tmp = create(tmp_0, LayoutNodeBuilder$build$lambda(layoutViewData));
    } else {
      if (layoutViewData instanceof GridPaneData) {
        var tmp_1 = get_ReactGridPane();
        tmp = create(tmp_1, LayoutNodeBuilder$build$lambda_0(layoutViewData));
      } else {
        throw IllegalArgumentException_init_$Create$('Unknown component type: ' + getKClass(LayoutViewData).f9());
      }
    }
    return tmp;
  };
  var LayoutNodeBuilder_instance;
  function LayoutNodeBuilder_getInstance() {
    return LayoutNodeBuilder_instance;
  }
  function NodeBuilder$build$lambda($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_0($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_1($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_2($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_3($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_4($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_5($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_6($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_7($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_8($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_9($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_10($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_11($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_12($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_13($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_14($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_15($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_16($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_17($componentViewData) {
    return function ($this$create) {
      $this$create.data = $componentViewData;
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda$lambda($gridElementData, $props) {
    return function ($this$bgwGridElement) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.builder.NodeBuilder.build.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.gridColumn = $gridElementData.k29_1 + 1 | 0;
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.gridRow = $gridElementData.l29_1 + 1 | 0;
      var tmp;
      switch ($gridElementData.n29_1.qc_1) {
        case 'left':
          // Inline function 'web.cssom.JustifySelf.Companion.flexStart' call

          tmp = 'flex-start';
          break;
        case 'center':
          // Inline function 'web.cssom.JustifySelf.Companion.center' call

          tmp = 'center';
          break;
        case 'right':
          // Inline function 'web.cssom.JustifySelf.Companion.flexEnd' call

          tmp = 'flex-end';
          break;
        default:
          // Inline function 'web.cssom.JustifySelf.Companion.center' call

          tmp = 'center';
          break;
      }
      this_0.justifySelf = tmp;
      var tmp_0;
      switch ($gridElementData.n29_1.rc_1) {
        case 'top':
          // Inline function 'web.cssom.AlignSelf.Companion.flexStart' call

          tmp_0 = 'flex-start';
          break;
        case 'center':
          // Inline function 'web.cssom.AlignSelf.Companion.center' call

          tmp_0 = 'center';
          break;
        case 'bottom':
          // Inline function 'web.cssom.AlignSelf.Companion.flexEnd' call

          tmp_0 = 'flex-end';
          break;
        default:
          // Inline function 'web.cssom.AlignSelf.Companion.center' call

          tmp_0 = 'center';
          break;
      }
      this_0.alignSelf = tmp_0;
      $this$bgwGridElement.className = css(this_0);
      var tmp26_safe_receiver = $props.data.m29_1;
      var tmp_1;
      if (tmp26_safe_receiver == null) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'tools.aqua.bgw.builder.NodeBuilder.build.<anonymous>.<anonymous>.<anonymous>' call
        tmp_1 = NodeBuilder_instance.o2u(tmp26_safe_receiver);
      }
      var this_1 = tmp_1;
      addChildNode($this$bgwGridElement, this_1);
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_18($gridElementData) {
    return function ($this$FC, props) {
      // Inline function 'tools.aqua.bgw.builder.bgwGridElement' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_0 = 'bgw_grid_element';
      var block = NodeBuilder$build$lambda$lambda($gridElementData, props);
      addChild($this$FC, this_0, block);
      return Unit_instance;
    };
  }
  function NodeBuilder$build$lambda_19($gridElementData) {
    return function ($this$create) {
      $this$create.data = $gridElementData;
      return Unit_instance;
    };
  }
  function NodeBuilder() {
  }
  protoOf(NodeBuilder).o2u = function (componentViewData) {
    var tmp;
    if (componentViewData instanceof LayoutViewData) {
      tmp = LayoutNodeBuilder_instance.n2u(componentViewData);
    } else {
      if (componentViewData instanceof LabelData) {
        var tmp_0 = get_Label();
        tmp = create(tmp_0, NodeBuilder$build$lambda(componentViewData));
      } else {
        if (componentViewData instanceof ButtonData) {
          var tmp_1 = get_Button();
          tmp = create(tmp_1, NodeBuilder$build$lambda_0(componentViewData));
        } else {
          if (componentViewData instanceof TextFieldData) {
            var tmp_2 = get_TextField();
            tmp = create(tmp_2, NodeBuilder$build$lambda_1(componentViewData));
          } else {
            if (componentViewData instanceof ComboBoxData) {
              var tmp_3 = get_ComboBox();
              tmp = create(tmp_3, NodeBuilder$build$lambda_2(componentViewData));
            } else {
              if (componentViewData instanceof HexagonGridData) {
                var tmp_4 = get_HexagonGrid();
                tmp = create(tmp_4, NodeBuilder$build$lambda_3(componentViewData));
              } else {
                if (componentViewData instanceof CameraPaneData) {
                  var tmp_5 = get_CameraPane();
                  tmp = create(tmp_5, NodeBuilder$build$lambda_4(componentViewData));
                } else {
                  if (componentViewData instanceof ProgressBarData) {
                    var tmp_6 = get_ProgressBar();
                    tmp = create(tmp_6, NodeBuilder$build$lambda_5(componentViewData));
                  } else {
                    if (componentViewData instanceof CheckBoxData) {
                      var tmp_7 = get_CheckBox();
                      tmp = create(tmp_7, NodeBuilder$build$lambda_6(componentViewData));
                    } else {
                      if (componentViewData instanceof RadioButtonData) {
                        var tmp_8 = get_RadioButton();
                        tmp = create(tmp_8, NodeBuilder$build$lambda_7(componentViewData));
                      } else {
                        if (componentViewData instanceof PasswordFieldData) {
                          var tmp_9 = get_PasswordField();
                          tmp = create(tmp_9, NodeBuilder$build$lambda_8(componentViewData));
                        } else {
                          if (componentViewData instanceof ToggleButtonData) {
                            var tmp_10 = get_ToggleButton();
                            tmp = create(tmp_10, NodeBuilder$build$lambda_9(componentViewData));
                          } else {
                            if (componentViewData instanceof ColorPickerData) {
                              var tmp_11 = get_ColorPicker();
                              tmp = create(tmp_11, NodeBuilder$build$lambda_10(componentViewData));
                            } else {
                              if (componentViewData instanceof TextAreaData) {
                                var tmp_12 = get_TextArea();
                                tmp = create(tmp_12, NodeBuilder$build$lambda_11(componentViewData));
                              } else {
                                if (componentViewData instanceof TableViewData) {
                                  var tmp_13 = get_TableView();
                                  tmp = create(tmp_13, NodeBuilder$build$lambda_12(componentViewData));
                                } else {
                                  if (componentViewData instanceof ListViewData) {
                                    var tmp_14 = get_ListView();
                                    tmp = create(tmp_14, NodeBuilder$build$lambda_13(componentViewData));
                                  } else {
                                    if (componentViewData instanceof GameComponentContainerData) {
                                      tmp = ContainerBuilder_instance.m2u(componentViewData);
                                    } else {
                                      if (componentViewData instanceof CardViewData) {
                                        var tmp_15 = get_CardView();
                                        tmp = create(tmp_15, NodeBuilder$build$lambda_14(componentViewData));
                                      } else {
                                        if (componentViewData instanceof DiceViewData) {
                                          var tmp_16 = get_DiceView();
                                          tmp = create(tmp_16, NodeBuilder$build$lambda_15(componentViewData));
                                        } else {
                                          if (componentViewData instanceof HexagonViewData) {
                                            var tmp_17 = get_HexagonView();
                                            tmp = create(tmp_17, NodeBuilder$build$lambda_16(componentViewData));
                                          } else {
                                            if (componentViewData instanceof TokenViewData) {
                                              var tmp_18 = get_TokenView();
                                              tmp = create(tmp_18, NodeBuilder$build$lambda_17(componentViewData));
                                            } else {
                                              throw IllegalArgumentException_init_$Create$('Unknown component type: ' + getKClassFromExpression(componentViewData).f9());
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(NodeBuilder).p2u = function (gridElementData) {
    var tmp = FC(NodeBuilder$build$lambda_18(gridElementData));
    return create(tmp, NodeBuilder$build$lambda_19(gridElementData));
  };
  var NodeBuilder_instance;
  function NodeBuilder_getInstance() {
    return NodeBuilder_instance;
  }
  function toKeyCode(_this__u8e3s4, $this) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = get_entries().j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'tools.aqua.bgw.builder.ReactConverters.toKeyCode.<anonymous>' call
      if (element.b2u_1.r1(_this__u8e3s4.key))
        return element;
    }
    return KeyCode_UNDEFINED_getInstance();
  }
  function ReactConverters() {
  }
  protoOf(ReactConverters).q2u = function (_this__u8e3s4, targetID) {
    // Inline function 'kotlin.apply' call
    var this_0 = new MouseEnteredEventData(_this__u8e3s4.clientX, _this__u8e3s4.clientY);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toMouseEnteredData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  protoOf(ReactConverters).r2u = function (_this__u8e3s4, targetID) {
    // Inline function 'kotlin.apply' call
    var this_0 = new MouseExitedEventData(_this__u8e3s4.clientX, _this__u8e3s4.clientY);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toMouseExitedData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  protoOf(ReactConverters).s2u = function (_this__u8e3s4, targetID) {
    // Inline function 'kotlin.apply' call
    var tmp = _this__u8e3s4.button;
    var tmp27_subject = typeof tmp === 'number' ? tmp : THROW_CCE();
    var this_0 = new MouseEventData(tmp27_subject === 0 ? MouseButtonType_LEFT_BUTTON_getInstance() : tmp27_subject === 1 ? MouseButtonType_MOUSE_WHEEL_getInstance() : tmp27_subject === 2 ? MouseButtonType_RIGHT_BUTTON_getInstance() : tmp27_subject === 3 || tmp27_subject === 4 ? MouseButtonType_OTHER_getInstance() : MouseButtonType_UNSPECIFIED_getInstance(), _this__u8e3s4.clientX, _this__u8e3s4.clientY);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toMouseEventData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  protoOf(ReactConverters).t2u = function (_this__u8e3s4, targetID) {
    // Inline function 'kotlin.apply' call
    var tmp = _this__u8e3s4.button;
    var tmp28_subject = typeof tmp === 'number' ? tmp : THROW_CCE();
    var this_0 = new MousePressedEventData(tmp28_subject === 0 ? MouseButtonType_LEFT_BUTTON_getInstance() : tmp28_subject === 1 ? MouseButtonType_MOUSE_WHEEL_getInstance() : tmp28_subject === 2 ? MouseButtonType_RIGHT_BUTTON_getInstance() : tmp28_subject === 3 || tmp28_subject === 4 ? MouseButtonType_OTHER_getInstance() : MouseButtonType_UNSPECIFIED_getInstance(), _this__u8e3s4.clientX, _this__u8e3s4.clientY);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toMousePressedEventData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  protoOf(ReactConverters).u2u = function (_this__u8e3s4, targetID) {
    // Inline function 'kotlin.apply' call
    var tmp = _this__u8e3s4.button;
    var tmp29_subject = typeof tmp === 'number' ? tmp : THROW_CCE();
    var this_0 = new MouseReleasedEventData(tmp29_subject === 0 ? MouseButtonType_LEFT_BUTTON_getInstance() : tmp29_subject === 1 ? MouseButtonType_MOUSE_WHEEL_getInstance() : tmp29_subject === 2 ? MouseButtonType_RIGHT_BUTTON_getInstance() : tmp29_subject === 3 || tmp29_subject === 4 ? MouseButtonType_OTHER_getInstance() : MouseButtonType_UNSPECIFIED_getInstance(), _this__u8e3s4.clientX, _this__u8e3s4.clientY);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toMouseReleasedEventData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  protoOf(ReactConverters).v2u = function (_this__u8e3s4, targetID, action) {
    // Inline function 'kotlin.apply' call
    var this_0 = new KeyEventData(toKeyCode(_this__u8e3s4, this), _this__u8e3s4.key, _this__u8e3s4.ctrlKey, _this__u8e3s4.shiftKey, _this__u8e3s4.altKey, action);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toKeyEventData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  protoOf(ReactConverters).w2u = function (_this__u8e3s4) {
    var tmp31_safe_receiver = _this__u8e3s4.over;
    var droppedOn = tmp31_safe_receiver == null ? null : tmp31_safe_receiver.id;
    var tmp32_safe_receiver = _this__u8e3s4.active;
    var elementDragged = tmp32_safe_receiver == null ? null : tmp32_safe_receiver.id;
    // Inline function 'kotlin.apply' call
    var this_0 = new DragDroppedEventData(droppedOn == null ? '' : droppedOn);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toDragEventData.<anonymous>' call
    this_0.s2o(elementDragged);
    return this_0;
  };
  protoOf(ReactConverters).x2u = function (_this__u8e3s4) {
    var tmp33_safe_receiver = _this__u8e3s4.active;
    var elementDragged = tmp33_safe_receiver == null ? null : tmp33_safe_receiver.id;
    // Inline function 'kotlin.apply' call
    var tmp34_safe_receiver = _this__u8e3s4.over;
    var this_0 = new DragGestureEndedEventData(tmp34_safe_receiver == null ? null : tmp34_safe_receiver.id);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toDragEndedEventData.<anonymous>' call
    this_0.s2o(elementDragged);
    return this_0;
  };
  protoOf(ReactConverters).y2u = function (_this__u8e3s4) {
    var tmp35_safe_receiver = _this__u8e3s4.active;
    var element = tmp35_safe_receiver == null ? null : tmp35_safe_receiver.id;
    // Inline function 'kotlin.apply' call
    var this_0 = new DragGestureStartedEventData();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toDragStartedEventData.<anonymous>' call
    this_0.s2o(element);
    return this_0;
  };
  protoOf(ReactConverters).z2u = function (_this__u8e3s4) {
    // Inline function 'kotlin.apply' call
    var this_0 = new DragGestureMovedEventData();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toDragMoveEventData.<anonymous>' call
    var tmp36_safe_receiver = _this__u8e3s4.active;
    this_0.s2o(tmp36_safe_receiver == null ? null : tmp36_safe_receiver.id);
    return this_0;
  };
  protoOf(ReactConverters).a2v = function (_this__u8e3s4) {
    var tmp37_safe_receiver = _this__u8e3s4.over;
    var element = tmp37_safe_receiver == null ? null : tmp37_safe_receiver.id;
    if (!(element == null)) {
      // Inline function 'kotlin.apply' call
      var this_0 = new DragGestureEnteredEventData(element);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.builder.ReactConverters.toDragEnteredEventData.<anonymous>' call
      var tmp38_safe_receiver = _this__u8e3s4.active;
      this_0.s2o(tmp38_safe_receiver == null ? null : tmp38_safe_receiver.id);
      return this_0;
    }
    // Inline function 'kotlin.apply' call
    var this_1 = new DragGestureEnteredEventData('');
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toDragEnteredEventData.<anonymous>' call
    var tmp39_safe_receiver = _this__u8e3s4.active;
    this_1.s2o(tmp39_safe_receiver == null ? null : tmp39_safe_receiver.id);
    return this_1;
  };
  protoOf(ReactConverters).b2v = function (_this__u8e3s4, targetID) {
    // Inline function 'kotlin.apply' call
    var this_0 = new ScrollEventData(_this__u8e3s4.deltaY > 0 ? WheelDirection_DOWN_getInstance() : WheelDirection_UP_getInstance(), _this__u8e3s4.shiftKey, _this__u8e3s4.altKey, _this__u8e3s4.ctrlKey);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.builder.ReactConverters.toScrollEventData.<anonymous>' call
    this_0.s2o(targetID);
    return this_0;
  };
  var ReactConverters_instance;
  function ReactConverters_getInstance() {
    return ReactConverters_instance;
  }
  function SceneBuilder$build$lambda($scene) {
    return function ($this$create) {
      $this$create.data = $scene;
      return Unit_instance;
    };
  }
  function SceneBuilder() {
  }
  protoOf(SceneBuilder).c2v = function (scene) {
    var tmp = get_Scene();
    return create(tmp, SceneBuilder$build$lambda(scene));
  };
  var SceneBuilder_instance;
  function SceneBuilder_getInstance() {
    return SceneBuilder_instance;
  }
  function VisualBuilder$build$lambda($visual) {
    return function ($this$create) {
      $this$create.data = $visual;
      return Unit_instance;
    };
  }
  function VisualBuilder$build$lambda_0($visual) {
    return function ($this$create) {
      $this$create.data = $visual;
      return Unit_instance;
    };
  }
  function VisualBuilder$build$lambda_1($visual) {
    return function ($this$create) {
      $this$create.data = $visual;
      return Unit_instance;
    };
  }
  function VisualBuilder$build$lambda_2($visual) {
    return function ($this$create) {
      $this$create.data = $visual;
      return Unit_instance;
    };
  }
  function VisualBuilder() {
  }
  protoOf(VisualBuilder).f2u = function (visual) {
    if (visual instanceof ColorVisualData) {
      var tmp = get_ColorVisual();
      return create(tmp, VisualBuilder$build$lambda(visual));
    } else {
      if (visual instanceof ImageVisualData) {
        var tmp_0 = get_ImageVisual();
        return create(tmp_0, VisualBuilder$build$lambda_0(visual));
      } else {
        if (visual instanceof TextVisualData) {
          var tmp_1 = get_TextVisual();
          return create(tmp_1, VisualBuilder$build$lambda_1(visual));
        } else {
          if (visual instanceof CompoundVisualData) {
            var tmp_2 = get_CompoundVisual();
            return create(tmp_2, VisualBuilder$build$lambda_2(visual));
          } else {
            // Inline function 'react.dom.html.ReactHTML.div' call
            // Inline function 'react.IntrinsicType' call
            // Inline function 'js.reflect.unsafeCast' call
            // Inline function 'kotlin.js.unsafeCast' call
            // Inline function 'kotlin.js.asDynamic' call
            return create_0('div');
          }
        }
      }
    }
  };
  var VisualBuilder_instance;
  function VisualBuilder_getInstance() {
    return VisualBuilder_instance;
  }
  function get_App() {
    _init_properties_App_kt__fk8usv();
    return App;
  }
  var App;
  function polygonPath(value) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return 'polygon(' + value + ')';
  }
  function zIndex(value) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return value;
  }
  function fit() {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return 'fit-content';
  }
  function minContent() {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return 'min-content';
  }
  function bgwContainer() {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return 'bgwContainer';
  }
  function menuTransition() {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return '.3s opacity, .3s backdrop-filter';
  }
  function transition(duration, property) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return '' + duration + 'ms ' + property;
  }
  function App$lambda($this$FC, props) {
    _init_properties_App_kt__fk8usv();
    useEffect(App$lambda$slambda_0(null));
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = props.data.m1q_1.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>' call
      // Inline function 'react.ChildrenBuilder.invoke' call
      var this_0 = Global;
      var block = App$lambda$lambda(element);
      addChild($this$FC, this_0, block);
    }
    // Inline function 'react.ChildrenBuilder.invoke' call
    var this_1 = Global;
    var block_0 = App$lambda$lambda_0(props);
    addChild($this$FC, this_1, block_0);
    var _destruct__k2r9zo = useState(null);
    // Inline function 'react.StateInstance.component1' call
    // Inline function 'seskar.js.internal.getIndexedValue' call
    var lastDraggedOver = _destruct__k2r9zo[0];
    // Inline function 'react.StateInstance.component2' call
    // Inline function 'seskar.js.internal.getIndexedValue' call
    var setLastDraggedOver = _destruct__k2r9zo[1];
    var draggedElementRef = useRef(null);
    var tmp = PointerSensor;
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj_0 = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj_0.distance = 10;
    // Inline function 'kotlin.js.unsafeCast' call
    obj.activationConstraint = obj_0;
    // Inline function 'kotlin.js.unsafeCast' call
    var pointerSensor = useSensor(tmp, obj);
    var allSensors = useSensors(pointerSensor);
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj_1 = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj_2 = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj_2.measure = App$lambda$lambda_1;
    // Inline function 'kotlin.js.unsafeCast' call
    obj_1.draggable = obj_2;
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj_3 = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj_3.measure = App$lambda$lambda_2;
    obj_3.strategy = MeasuringStrategy.BeforeDragging;
    obj_3.frequency = MeasuringFrequency.Optimized;
    // Inline function 'kotlin.js.unsafeCast' call
    obj_1.droppable = obj_3;
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj_4 = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj_4.measure = App$lambda$lambda_3;
    // Inline function 'kotlin.js.unsafeCast' call
    obj_1.dragOverlay = obj_4;
    // Inline function 'kotlin.js.unsafeCast' call
    var measuringConfig = obj_1;
    // Inline function 'react.ChildrenBuilder.invoke' call
    var this_2 = DndContext;
    var block_1 = App$lambda$lambda_4(allSensors, draggedElementRef, lastDraggedOver, setLastDraggedOver, props);
    addChild($this$FC, this_2, block_1);
    return Unit_instance;
  }
  function App$lambda$slambda(resultContinuation) {
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(App$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(App$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(App$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp0_safe_receiver = get_webSocket();
          if (tmp0_safe_receiver == null)
            null;
          else {
            tmp0_safe_receiver.send('Hello from Client!');
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(App$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new App$lambda$slambda(completion);
    i.l2v_1 = $this$useEffect;
    return i;
  };
  function App$lambda$slambda_0(resultContinuation) {
    var i = new App$lambda$slambda(resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function App$lambda$lambda($font) {
    return function ($this$Global) {
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'csstype.RuleBuilder.fontFace' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp = '@font-face';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_1 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_1.fontFamily = $font.pg_1;
      // Inline function 'web.cssom.FontStyle.Companion.normal' call
      this_1.fontStyle = 'normal';
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_1.fontWeight = $font.qg_1;
      this_1.src = 'url(static/' + $font.og_1 + ')';
      this_0[tmp] = this_1;
      $this$Global.styles = this_0;
      return Unit_instance;
    };
  }
  function App$lambda$lambda_0($props) {
    return function ($this$Global) {
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = '.bgw-root-container';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_2 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_2.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_2.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_2.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_2.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_2.top = toString_0(0) + 'px';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_2.display = 'flex';
      // Inline function 'web.cssom.JustifyContent.Companion.center' call
      this_2.justifyContent = 'center';
      // Inline function 'web.cssom.AlignItems.Companion.center' call
      this_2.alignItems = 'center';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_2.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_2.overflow = 'hidden';
      this_2.containerName = bgwContainer();
      // Inline function 'web.cssom.ContainerType.Companion.size' call
      this_2.containerType = 'size';
      this_0[this_1] = this_2;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_3 = '.bgw-root *';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_4 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.None.Companion.none' call
      this_4.border = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_4.outline = 'none';
      this_0[this_3] = this_4;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_5 = '@container bgwContainer (min-aspect-ratio: ' + $props.data.n1q_1 + '/' + $props.data.o1q_1 + ') and (orientation: landscape)';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_6 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_7 = '.bgw-root, .bgw-dialogs';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_8 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      var this_9 = 100.0 / $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_8.fontSize = toString_0(this_9) + 'cqh';
      // Inline function 'web.cssom.cqw' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_8.width = toString_0(100) + 'cqw';
      // Inline function 'web.cssom.cqh' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_8.height = toString_0(100) + 'cqh';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_8.margin = toString_0(0) + 'px';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_8.overflow = 'hidden';
      // Inline function 'web.cssom.None.Companion.none' call
      this_8.userSelect = 'none';
      this_6[this_7] = this_8;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_10 = 'bgw_scenes';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_11 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_11.height = toString_0(100) + 'cqh';
      // Inline function 'web.cssom.cqh' call
      var this_12 = 100.0 / $props.data.o1q_1 * $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_11.width = toString_0(this_12) + 'cqh';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_11.position = 'relative';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_11.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_11.overflow = 'hidden';
      // Inline function 'web.cssom.Display.Companion.block' call
      this_11.display = 'block';
      this_6[this_10] = this_11;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_13 = "input[type='color']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_14 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      var this_15 = 100.0 / $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_14.fontSize = toString_0(this_15) + 'cqh';
      this_6[this_13] = this_14;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_16 = "bgw_togglebutton > input[type='checkbox'], bgw_checkbox > input[type='checkbox'], bgw_radiobutton > input[type='radio']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_17 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      var this_18 = 100.0 / $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_17.fontSize = toString_0(this_18) + 'cqh';
      this_6[this_16] = this_17;
      this_0[this_5] = this_6;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_19 = '@container bgwContainer (max-aspect-ratio: ' + $props.data.n1q_1 + '/' + $props.data.o1q_1 + ') and (orientation: landscape)';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_20 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_21 = '.bgw-root, .bgw-dialogs';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_22 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      var this_23 = 100.0 / $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_22.fontSize = toString_0(this_23) + 'cqw';
      // Inline function 'web.cssom.cqw' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_22.width = toString_0(100) + 'cqw';
      // Inline function 'web.cssom.cqh' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_22.height = toString_0(100) + 'cqh';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_22.margin = toString_0(0) + 'px';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_22.overflow = 'hidden';
      // Inline function 'web.cssom.None.Companion.none' call
      this_22.userSelect = 'none';
      this_20[this_21] = this_22;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_24 = 'bgw_scenes';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_25 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_25.width = toString_0(100) + 'cqw';
      // Inline function 'web.cssom.cqw' call
      var this_26 = 100.0 / $props.data.n1q_1 * $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_25.height = toString_0(this_26) + 'cqw';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_25.position = 'relative';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_25.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_25.overflow = 'hidden';
      // Inline function 'web.cssom.Display.Companion.block' call
      this_25.display = 'block';
      this_20[this_24] = this_25;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_27 = "input[type='color']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_28 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      var this_29 = 100.0 / $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_28.fontSize = toString_0(this_29) + 'cqw';
      this_20[this_27] = this_28;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_30 = "bgw_togglebutton > input[type='checkbox'], bgw_checkbox > input[type='checkbox'], bgw_radiobutton > input[type='radio']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_31 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      var this_32 = 100.0 / $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_31.fontSize = toString_0(this_32) + 'cqw';
      this_20[this_30] = this_31;
      this_0[this_19] = this_20;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_33 = '@container bgwContainer (min-aspect-ratio: ' + $props.data.n1q_1 + '/' + $props.data.o1q_1 + ') and (orientation: portrait)';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_34 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_35 = '.bgw-root, .bgw-dialogs';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_36 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      var this_37 = 100.0 / $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_36.fontSize = toString_0(this_37) + 'cqh';
      // Inline function 'web.cssom.cqw' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_36.width = toString_0(100) + 'cqw';
      // Inline function 'web.cssom.cqh' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_36.height = toString_0(100) + 'cqh';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_36.margin = toString_0(0) + 'px';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_36.overflow = 'hidden';
      // Inline function 'web.cssom.None.Companion.none' call
      this_36.userSelect = 'none';
      this_34[this_35] = this_36;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_38 = 'bgw_scenes';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_39 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_39.height = toString_0(100) + 'cqh';
      // Inline function 'web.cssom.cqh' call
      var this_40 = 100.0 / $props.data.o1q_1 * $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_39.width = toString_0(this_40) + 'cqh';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_39.position = 'relative';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_39.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_39.overflow = 'hidden';
      // Inline function 'web.cssom.Display.Companion.block' call
      this_39.display = 'block';
      this_34[this_38] = this_39;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_41 = "input[type='color']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_42 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      var this_43 = 100.0 / $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_42.fontSize = toString_0(this_43) + 'cqh';
      this_34[this_41] = this_42;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_44 = "bgw_togglebutton > input[type='checkbox'], bgw_checkbox > input[type='checkbox'], bgw_radiobutton > input[type='radio']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_45 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqh' call
      var this_46 = 100.0 / $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_45.fontSize = toString_0(this_46) + 'cqh';
      this_34[this_44] = this_45;
      this_0[this_33] = this_34;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_47 = '@container bgwContainer (max-aspect-ratio: ' + $props.data.n1q_1 + '/' + $props.data.o1q_1 + ') and (orientation: portrait)';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_48 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_49 = '.bgw-root, .bgw-dialogs';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_50 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      var this_51 = 100.0 / $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_50.fontSize = toString_0(this_51) + 'cqw';
      // Inline function 'web.cssom.cqw' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_50.width = toString_0(100) + 'cqw';
      // Inline function 'web.cssom.cqh' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_50.height = toString_0(100) + 'cqh';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_50.margin = toString_0(0) + 'px';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_50.overflow = 'hidden';
      // Inline function 'web.cssom.None.Companion.none' call
      this_50.userSelect = 'none';
      this_48[this_49] = this_50;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_52 = 'bgw_scenes';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_53 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_53.width = toString_0(100) + 'cqw';
      // Inline function 'web.cssom.cqw' call
      var this_54 = 100.0 / $props.data.n1q_1 * $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_53.height = toString_0(this_54) + 'cqw';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_53.position = 'relative';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_53.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_53.overflow = 'hidden';
      // Inline function 'web.cssom.Display.Companion.block' call
      this_53.display = 'block';
      this_48[this_52] = this_53;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_55 = "input[type='color']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_56 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      var this_57 = 100.0 / $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_56.fontSize = toString_0(this_57) + 'cqw';
      this_48[this_55] = this_56;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_58 = "bgw_togglebutton > input[type='checkbox'], bgw_checkbox > input[type='checkbox'], bgw_radiobutton > input[type='radio']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_59 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.cqw' call
      var this_60 = 100.0 / $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_59.fontSize = toString_0(this_60) + 'cqw';
      this_48[this_58] = this_59;
      this_0[this_47] = this_48;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_61 = '.bgw-root';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_62 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_62.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 1.0 + ')';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_62.color = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ')';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_62.margin = toString_0(0) + 'px';
      this_0[this_61] = this_62;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_63 = '.visuals';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_64 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_64.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_64.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_64.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_64.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_64.top = toString_0(0) + 'px';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_64.overflow = 'hidden';
      this_0[this_63] = this_64;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_65 = 'bgw_color_visual, bgw_image_visual, bgw_text_visual';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_66 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_66.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_66.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_66.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_66.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_66.top = toString_0(0) + 'px';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_66.display = 'flex';
      this_0[this_65] = this_66;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_67 = 'bgw_scene';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_68 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_68.height = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_68.width = toString_0(100) + '%';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_68.inset = toString_0(0) + 'px';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_68.position = 'absolute';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_68.display = 'flex';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_68.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_68.overflow = 'hidden';
      this_0[this_67] = this_68;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_69 = 'bgw_menu_scene > bgw_scene > bgw_visuals';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_70 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_70.opacity = 0.75;
      this_0[this_69] = this_70;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_71 = 'bgw_menu_scene > bgw_scene';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_72 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_72.opacity = 0.0;
      // Inline function 'web.cssom.blur' call
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value = toString_0(0) + 'px';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_72.backdropFilter = 'blur(' + toString_0(value) + ')';
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_72.zIndex = 1000;
      this_0[this_71] = this_72;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_73 = "bgw_hexagon_view[aria-details='hex-pointy_top']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_74 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_74.clipPath = polygonPath('0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%');
      this_0[this_73] = this_74;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_75 = "bgw_hexagon_view[aria-details='hex-flat_top']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_76 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_76.clipPath = polygonPath('25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%');
      this_0[this_75] = this_76;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_77 = "bgw_menu_scene[aria-expanded='true'] > bgw_scene";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_78 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_78.opacity = 1.0;
      // Inline function 'web.cssom.blur' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value_0 = toString_0(40.0) + 'em';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_78.backdropFilter = 'blur(' + toString_0(value_0) + ')';
      this_0[this_77] = this_78;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_79 = 'bgw_camera_pane';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_80 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_80.overflow = 'hidden';
      this_0[this_79] = this_80;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_81 = 'bgw_camera_target';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_82 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_82.width = fit();
      this_82.height = fit();
      this_0[this_81] = this_82;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_83 = 'bgw_camera_target > *';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_84 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Position.Companion.relative' call
      var value_1 = 'relative';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_84.position = toString_0(value_1) + ' !important';
      this_0[this_83] = this_84;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_85 = 'bgw_grid_element > *';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_86 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Position.Companion.relative' call
      var value_2 = 'relative';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_86.position = toString_0(value_2) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value_3 = toString_0(0) + 'px';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_86.left = toString_0(value_3) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value_4 = toString_0(0) + 'px';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_86.top = toString_0(value_4) + ' !important';
      this_0[this_85] = this_86;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_87 = '.text, .components';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_88 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_88.position = 'absolute';
      this_0[this_87] = this_88;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_89 = "bgw_linear_layout[aria-details='horizontal'] > bgw_contents > *";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_90 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_90.top = toString_0('unset') + ' !important';
      this_0[this_89] = this_90;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_91 = 'bgw_linear_layout > bgw_contents > div > *';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_92 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Position.Companion.relative' call
      var value_5 = 'relative';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_92.position = toString_0(value_5) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_92.left = toString_0('unset') + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_92.top = toString_0('unset') + ' !important';
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_92.flexGrow = 0.0;
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_92.flexShrink = 0.0;
      this_0[this_91] = this_92;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_93 = 'bgw_card_stack > bgw_contents > *';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_94 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      var value_6 = 'absolute';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_94.position = toString_0(value_6) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_94.left = toString_0('unset') + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_94.top = toString_0('unset') + ' !important';
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_94.flexGrow = 0.0;
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_94.flexShrink = 0.0;
      this_0[this_93] = this_94;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_95 = 'bgw_hexagon_grid > bgw_contents > bgw_hexagon_content > *';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_96 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Position.Companion.relative' call
      var value_7 = 'relative';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_96.position = toString_0(value_7) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_96.left = toString_0('unset') + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.Globals.Companion.unset' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_96.top = toString_0('unset') + ' !important';
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_96.flexGrow = 0.0;
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_96.flexShrink = 0.0;
      this_0[this_95] = this_96;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_97 = 'textarea::-webkit-scrollbar';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_98 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.None.Companion.none' call
      this_98.display = 'none';
      this_0[this_97] = this_98;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_99 = "input[type='color']::-webkit-color-swatch";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_100 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_100.borderRadius = toString_0(3) + 'em';
      // Inline function 'web.cssom.None.Companion.none' call
      this_100.border = 'none';
      this_0[this_99] = this_100;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_101 = 'bgw_togglebutton';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_102 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_102.position = 'relative';
      // Inline function 'web.cssom.Display.Companion.inlineFlex' call
      this_102.display = 'inline-flex';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_102.width = toString_0(30) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_102.height = toString_0(18) + 'em';
      this_0[this_101] = this_102;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_103 = "bgw_togglebutton > input[type='checkbox']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_104 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_104.opacity = 0.0;
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_104.position = 'relative';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_104.width = toString_0(36) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_104.minWidth = toString_0(36) + 'em';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_104.height = toString_0(100) + '%';
      this_0[this_103] = this_104;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_105 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_105.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_105.left = toString_0(4) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_105.width = toString_0(30) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_105.height = toString_0(18) + 'em';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_105.backgroundColor = 'rgb(' + 145 + ' ' + 145 + ' ' + 145 + ')';
      this_105.transition = transition(300, 'background-color');
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_105.borderRadius = toString_0(3) + 'em';
      this_0['.toggle'] = this_105;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_106 = '.toggle::before';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_107 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_107.content = Content('');
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_107.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_107.width = toString_0(12) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_107.height = toString_0(12) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_107.left = toString_0(3) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_107.top = toString_0(3) + 'em';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_107.backgroundColor = 'rgb(' + 255 + ' ' + 255 + ' ' + 255 + ')';
      this_107.transition = transition(300, 'transform');
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_107.borderRadius = toString_0(3) + 'em';
      this_0[this_106] = this_107;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_108 = "bgw_togglebutton > input[type='checkbox']:checked + .toggle";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_109 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_109.backgroundColor = 'rgb(' + 0 + ' ' + 117 + ' ' + 255 + ')';
      this_0[this_108] = this_109;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_110 = "bgw_togglebutton > input[type='checkbox']:checked + .toggle::before";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_111 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.translatex' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tx = toString_0(12) + 'em';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_111.transform = 'translatex(' + toString_0(tx) + ')';
      this_0[this_110] = this_111;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_112 = '.bgw-root';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_113 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_113.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_113.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_113.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_113.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_113.top = toString_0(0) + 'px';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_113.display = 'flex';
      // Inline function 'web.cssom.JustifyContent.Companion.center' call
      this_113.justifyContent = 'center';
      // Inline function 'web.cssom.AlignItems.Companion.center' call
      this_113.alignItems = 'center';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_113.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 1.0 + ')';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_113.overflow = 'hidden';
      this_0[this_112] = this_113;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_114 = ".bgw-root *[aria-roledescription='draggable'][aria-pressed='true']";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_115 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_115.opacity = toString_0(1.0) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_115.zIndex = toString_0(1000000) + ' !important';
      this_0[this_114] = this_115;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_116 = ".bgw-root *:has(*[aria-roledescription='draggable'][aria-pressed='true'])";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_117 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_117.zIndex = toString_0(1000000) + ' !important';
      this_0[this_116] = this_117;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_118 = "bgw_satchel bgw_contents *[aria-roledescription='draggable']:not([aria-pressed='true'])";
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_119 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value_8 = toString_0(100) + '%';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_119.width = toString_0(value_8) + ' !important';
      // Inline function 'web.cssom.important' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value_9 = toString_0(100) + '%';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_119.height = toString_0(value_9) + ' !important';
      this_0[this_118] = this_119;
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_120 = 'bgw_scroll::-webkit-scrollbar';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_121 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.None.Companion.none' call
      this_121.display = 'none';
      this_0[this_120] = this_121;
      $this$Global.styles = this_0;
      return Unit_instance;
    };
  }
  function App$lambda$lambda_1(node) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj.ignoreTransform = false;
    // Inline function 'kotlin.js.unsafeCast' call
    return getClientRect(node, obj);
  }
  function App$lambda$lambda_2(node) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj.ignoreTransform = true;
    // Inline function 'kotlin.js.unsafeCast' call
    return getClientRect(node, obj);
  }
  function App$lambda$lambda_3(node) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'tools.aqua.bgw.elements.jsObject' call
    var obj = {};
    // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    obj.ignoreTransform = false;
    // Inline function 'kotlin.js.unsafeCast' call
    return getClientRect(node, obj);
  }
  function invoke$globalKeyDown(e) {
    JCEFEventDispatcher_getInstance().o2v(ReactConverters_instance.v2u(e, 'global', KeyEventAction_PRESS_getInstance()));
    JCEFEventDispatcher_getInstance().o2v(ReactConverters_instance.v2u(e, 'global', KeyEventAction_TYPE_getInstance()));
  }
  function invoke$globalKeyUp(e) {
    JCEFEventDispatcher_getInstance().o2v(ReactConverters_instance.v2u(e, 'global', KeyEventAction_RELEASE_getInstance()));
  }
  function App$lambda$lambda$lambda($draggedElementRef) {
    return function (event) {
      var tmp1_safe_receiver = event.active;
      var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.id;
      var tmp;
      if (tmp2_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        tmp = document.getElementById(tmp2_safe_receiver);
      }
      var element = tmp;
      $draggedElementRef.current = element;
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.y2u(event));
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda_0($lastDraggedOver, $setLastDraggedOver) {
    return function (event) {
      var tmp;
      if (!(event.over == null)) {
        JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.w2u(event));
        tmp = Unit_instance;
      }
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.x2u(event));
      var tmp_0;
      if (!($lastDraggedOver == null)) {
        var tmp_1 = JCEFEventDispatcher_getInstance();
        // Inline function 'kotlin.apply' call
        var this_0 = new DragGestureExitedEventData($lastDraggedOver);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp3_safe_receiver = event.active;
        this_0.s2o(tmp3_safe_receiver == null ? null : tmp3_safe_receiver.id);
        tmp_1.k2u(this_0);
        tmp_0 = Unit_instance;
      }
      $setLastDraggedOver(null);
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda_1(event) {
    _init_properties_App_kt__fk8usv();
    JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.z2u(event));
    return Unit_instance;
  }
  function App$lambda$lambda$lambda_2($lastDraggedOver, $setLastDraggedOver) {
    return function (event) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.a2v(event));
      var tmp;
      var tmp6_safe_receiver = event.over;
      if (!($lastDraggedOver == (tmp6_safe_receiver == null ? null : tmp6_safe_receiver.id))) {
        if (!($lastDraggedOver == null)) {
          var tmp_0 = JCEFEventDispatcher_getInstance();
          // Inline function 'kotlin.apply' call
          var this_0 = new DragGestureExitedEventData($lastDraggedOver);
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          var tmp4_safe_receiver = event.active;
          this_0.s2o(tmp4_safe_receiver == null ? null : tmp4_safe_receiver.id);
          tmp_0.k2u(this_0);
        }
        var tmp5_safe_receiver = event.over;
        $setLastDraggedOver(tmp5_safe_receiver == null ? null : tmp5_safe_receiver.id);
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda_3($this$useEffectWithCleanup) {
    _init_properties_App_kt__fk8usv();
    var tmp = document;
    tmp.addEventListener('keydown', App$lambda$lambda$lambda$lambda);
    var tmp_0 = document;
    tmp_0.addEventListener('keyup', App$lambda$lambda$lambda$lambda_0);
    $this$useEffectWithCleanup.push(App$lambda$lambda$lambda$lambda_1);
    return Unit_instance;
  }
  function App$lambda$lambda$lambda$lambda(it) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    invoke$globalKeyDown(it);
    return Unit_instance;
  }
  function App$lambda$lambda$lambda$lambda_0(it) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    invoke$globalKeyUp(it);
    return Unit_instance;
  }
  function App$lambda$lambda$lambda$lambda_1() {
    _init_properties_App_kt__fk8usv();
    var tmp = document;
    tmp.removeEventListener('keydown', App$lambda$lambda$lambda$lambda$lambda);
    var tmp_0 = document;
    tmp_0.removeEventListener('keyup', App$lambda$lambda$lambda$lambda$lambda_0);
    return Unit_instance;
  }
  function App$lambda$lambda$lambda$lambda$lambda(it) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    invoke$globalKeyDown(it);
    return Unit_instance;
  }
  function App$lambda$lambda$lambda$lambda$lambda_0(it) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    invoke$globalKeyUp(it);
    return Unit_instance;
  }
  function App$lambda$lambda$lambda$lambda_2($menuScene) {
    return function ($this$bgwMenuScene) {
      $this$bgwMenuScene.id = 'menuScene';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      this_0.zIndex = zIndex(1000);
      $this$bgwMenuScene.className = css(this_0);
      var tmp;
      if (!equals($menuScene, undefined)) {
        // Inline function 'react.dom.aria.ariaExpanded' call
        // Inline function 'kotlin.js.asDynamic' call
        $this$bgwMenuScene['aria-expanded'] = true;
        var this_1 = SceneBuilder_instance.c2v($menuScene);
        addChildNode($this$bgwMenuScene, this_1);
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda$lambda_3($props) {
    return function ($this$bgwBlur) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.em' call
      var this_1 = $props.data.n1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(this_1) + 'em';
      // Inline function 'web.cssom.em' call
      var this_2 = $props.data.o1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(this_2) + 'em';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      this_0.zIndex = zIndex(999);
      // Inline function 'web.cssom.blur' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value = toString_0(40.0) + 'em';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backdropFilter = 'blur(' + toString_0(value) + ')';
      $this$bgwBlur.className = css(this_0);
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda$lambda_4($gameScene) {
    return function ($this$bgwGameScene) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      $this$bgwGameScene.className = css(this_0);
      $this$bgwGameScene.id = 'boardGameScene';
      var tmp;
      if (!($gameScene == null)) {
        var this_1 = SceneBuilder_instance.c2v($gameScene);
        addChildNode($this$bgwGameScene, this_1);
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda_4($props) {
    return function ($this$bgwScenes) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.App.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.JustifyContent.Companion.center' call
      this_0.justifyContent = 'center';
      // Inline function 'web.cssom.AlignItems.Companion.center' call
      this_0.alignItems = 'center';
      $this$bgwScenes.className = css(this_0);
      var menuScene = $props.data.k1q_1;
      // Inline function 'tools.aqua.bgw.elements.bgwMenuScene' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_menu_scene';
      var block = App$lambda$lambda$lambda$lambda_2(menuScene);
      addChild($this$bgwScenes, this_1, block);
      var tmp;
      if (!equals(menuScene, undefined)) {
        // Inline function 'tools.aqua.bgw.elements.bgwBlur' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var this_2 = 'bgw_blur';
        var block_0 = App$lambda$lambda$lambda$lambda_3($props);
        addChild($this$bgwScenes, this_2, block_0);
        tmp = Unit_instance;
      }
      var gameScene = $props.data.l1q_1;
      // Inline function 'tools.aqua.bgw.elements.bgwGameScene' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_3 = 'bgw_game_scene';
      var block_1 = App$lambda$lambda$lambda$lambda_4(gameScene);
      addChild($this$bgwScenes, this_3, block_1);
      return Unit_instance;
    };
  }
  function App$lambda$lambda$lambda_5($this$DragOverlay) {
    _init_properties_App_kt__fk8usv();
    // Inline function 'web.cssom.ClassName' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    $this$DragOverlay.className = 'bgw_drag_overlay';
    return Unit_instance;
  }
  function App$lambda$lambda_4($allSensors, $draggedElementRef, $lastDraggedOver, $setLastDraggedOver, $props) {
    return function ($this$DndContext) {
      $this$DndContext.sensors = $allSensors;
      $this$DndContext.onDragStart = App$lambda$lambda$lambda($draggedElementRef);
      $this$DndContext.onDragEnd = App$lambda$lambda$lambda_0($lastDraggedOver, $setLastDraggedOver);
      $this$DndContext.onDragMove = App$lambda$lambda$lambda_1;
      $this$DndContext.onDragOver = App$lambda$lambda$lambda_2($lastDraggedOver, $setLastDraggedOver);
      useEffectWithCleanup(App$lambda$lambda$lambda_3);
      // Inline function 'tools.aqua.bgw.elements.bgwScenes' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_0 = 'bgw_scenes';
      var block = App$lambda$lambda$lambda_4($props);
      addChild($this$DndContext, this_0, block);
      var this_1 = DragOverlay;
      var block_0 = App$lambda$lambda$lambda_5;
      addChild($this$DndContext, this_1, block_0);
      return Unit_instance;
    };
  }
  var properties_initialized_App_kt_kalemn;
  function _init_properties_App_kt__fk8usv() {
    if (!properties_initialized_App_kt_kalemn) {
      properties_initialized_App_kt_kalemn = true;
      App = FC(App$lambda);
    }
  }
  function cssBuilder(_this__u8e3s4, componentViewData) {
    // Inline function 'web.cssom.Position.Companion.absolute' call
    _this__u8e3s4.position = 'absolute';
    // Inline function 'web.cssom.em' call
    var this_0 = componentViewData.b1s_1;
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.left = toString_0(this_0) + 'em';
    // Inline function 'web.cssom.em' call
    var this_1 = componentViewData.c1s_1;
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.top = toString_0(this_1) + 'em';
    // Inline function 'web.cssom.em' call
    var this_2 = componentViewData.d1s_1;
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.width = toString_0(this_2) + 'em';
    // Inline function 'web.cssom.em' call
    var this_3 = componentViewData.e1s_1;
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.height = toString_0(this_3) + 'em';
    // Inline function 'web.cssom.integer' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.zIndex = componentViewData.g1s_1;
    // Inline function 'web.cssom.number' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.opacity = componentViewData.h1s_1;
    var tmp;
    if (componentViewData.i1s_1) {
      // Inline function 'web.cssom.Display.Companion.flex' call
      tmp = 'flex';
    } else {
      // Inline function 'web.cssom.None.Companion.none' call
      tmp = 'none';
    }
    _this__u8e3s4.display = tmp;
    var tmp_0;
    if (!componentViewData.j1s_1) {
      // Inline function 'web.cssom.PointerEvents.Companion.all' call
      tmp_0 = 'all';
    } else {
      // Inline function 'web.cssom.None.Companion.none' call
      tmp_0 = 'none';
    }
    _this__u8e3s4.pointerEvents = tmp_0;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'web.cssom.deg' call
    var this_4 = componentViewData.n1s_1;
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.rotate = toString_0(this_4) + 'deg';
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.scale = '' + componentViewData.l1s_1 + ' ' + componentViewData.m1s_1 + ' 1';
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.transformOrigin = 'center';
  }
  function cssBuilder_0(_this__u8e3s4, componentViewData) {
    cssBuilder(_this__u8e3s4, componentViewData instanceof ComponentViewData ? componentViewData : THROW_CCE());
  }
  function cssBuilder_1(_this__u8e3s4, componentViewData) {
    cssBuilder(_this__u8e3s4, componentViewData instanceof ComponentViewData ? componentViewData : THROW_CCE());
    alignmentBuilder(_this__u8e3s4, componentViewData);
  }
  function cssTextBuilder(_this__u8e3s4, componentViewData) {
    var tmp;
    if (componentViewData.q1u_1) {
      // Inline function 'web.cssom.TextOverflow.Companion.clip' call
      tmp = 'clip';
    } else {
      // Inline function 'web.cssom.TextOverflow.Companion.ellipsis' call
      tmp = 'ellipsis';
    }
    _this__u8e3s4.textOverflow = tmp;
    var tmp_0;
    if (componentViewData.q1u_1) {
      // Inline function 'web.cssom.WhiteSpace.Companion.normal' call
      tmp_0 = 'normal';
    } else {
      // Inline function 'web.cssom.WhiteSpace.Companion.nowrap' call
      tmp_0 = 'nowrap';
    }
    _this__u8e3s4.whiteSpace = tmp_0;
    // Inline function 'web.cssom.pct' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.maxWidth = toString_0(100) + '%';
    // Inline function 'web.cssom.pct' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.maxHeight = toString_0(100) + '%';
    // Inline function 'web.cssom.Overflow.Companion.hidden' call
    _this__u8e3s4.overflow = 'hidden';
    // Inline function 'web.cssom.Position.Companion.absolute' call
    _this__u8e3s4.position = 'absolute';
    fontBuilder(_this__u8e3s4, componentViewData);
  }
  function alignmentBuilder(_this__u8e3s4, componentViewData) {
    var tmp;
    switch (componentViewData.p1u_1.qc_1) {
      case 'left':
        // Inline function 'web.cssom.JustifyContent.Companion.flexStart' call

        tmp = 'flex-start';
        break;
      case 'center':
        // Inline function 'web.cssom.JustifyContent.Companion.center' call

        tmp = 'center';
        break;
      case 'right':
        // Inline function 'web.cssom.JustifyContent.Companion.flexEnd' call

        tmp = 'flex-end';
        break;
      default:
        // Inline function 'web.cssom.JustifyContent.Companion.center' call

        tmp = 'center';
        break;
    }
    _this__u8e3s4.justifyContent = tmp;
    var tmp_0;
    switch (componentViewData.p1u_1.qc_1) {
      case 'left':
        // Inline function 'web.cssom.TextAlign.Companion.left' call

        tmp_0 = 'left';
        break;
      case 'center':
        // Inline function 'web.cssom.TextAlign.Companion.center' call

        tmp_0 = 'center';
        break;
      case 'right':
        // Inline function 'web.cssom.TextAlign.Companion.right' call

        tmp_0 = 'right';
        break;
      default:
        // Inline function 'web.cssom.TextAlign.Companion.center' call

        tmp_0 = 'center';
        break;
    }
    _this__u8e3s4.textAlign = tmp_0;
    var tmp_1;
    switch (componentViewData.p1u_1.rc_1) {
      case 'top':
        // Inline function 'web.cssom.AlignItems.Companion.flexStart' call

        tmp_1 = 'flex-start';
        break;
      case 'center':
        // Inline function 'web.cssom.AlignItems.Companion.center' call

        tmp_1 = 'center';
        break;
      case 'bottom':
        // Inline function 'web.cssom.AlignItems.Companion.flexEnd' call

        tmp_1 = 'flex-end';
        break;
      default:
        // Inline function 'web.cssom.AlignItems.Companion.center' call

        tmp_1 = 'center';
        break;
    }
    _this__u8e3s4.alignItems = tmp_1;
  }
  function alignmentBuilder_0(_this__u8e3s4, componentViewData) {
    var tmp;
    switch (componentViewData.r2f_1.qc_1) {
      case 'left':
        // Inline function 'web.cssom.JustifyContent.Companion.flexStart' call

        tmp = 'flex-start';
        break;
      case 'center':
        // Inline function 'web.cssom.JustifyContent.Companion.center' call

        tmp = 'center';
        break;
      case 'right':
        // Inline function 'web.cssom.JustifyContent.Companion.flexEnd' call

        tmp = 'flex-end';
        break;
      default:
        // Inline function 'web.cssom.JustifyContent.Companion.center' call

        tmp = 'center';
        break;
    }
    _this__u8e3s4.justifyContent = tmp;
    var tmp_0;
    switch (componentViewData.r2f_1.rc_1) {
      case 'top':
        // Inline function 'web.cssom.AlignItems.Companion.flexStart' call

        tmp_0 = 'flex-start';
        break;
      case 'center':
        // Inline function 'web.cssom.AlignItems.Companion.center' call

        tmp_0 = 'center';
        break;
      case 'bottom':
        // Inline function 'web.cssom.AlignItems.Companion.flexEnd' call

        tmp_0 = 'flex-end';
        break;
      default:
        // Inline function 'web.cssom.AlignItems.Companion.center' call

        tmp_0 = 'center';
        break;
    }
    _this__u8e3s4.alignItems = tmp_0;
  }
  function fontBuilder(_this__u8e3s4, componentViewData) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.elements.fontBuilder.<anonymous>' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fontStyle = ensureNotNull(componentViewData.q1t_1).a2k_1;
    // Inline function 'web.cssom.integer' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fontWeight = ensureNotNull(componentViewData.q1t_1).z2j_1;
    // Inline function 'web.cssom.em' call
    var this_0 = ensureNotNull(componentViewData.q1t_1).w2j_1;
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fontSize = toString_0(this_0) + 'em';
    _this__u8e3s4.fontFamily = cssFont(ensureNotNull(componentViewData.q1t_1).y2j_1);
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.color = ensureNotNull(componentViewData.q1t_1).x2j_1;
  }
  function placeholderFontBuilder(_this__u8e3s4, componentViewData) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.color = ensureNotNull(componentViewData.q1t_1).x2j_1;
    // Inline function 'web.cssom.number' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.opacity = 0.65;
  }
  function inputBuilder(_this__u8e3s4, componentViewData) {
    // Inline function 'web.cssom.Position.Companion.absolute' call
    _this__u8e3s4.position = 'absolute';
    // Inline function 'web.cssom.pct' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.width = toString_0(100) + '%';
    // Inline function 'web.cssom.pct' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.height = toString_0(100) + '%';
    // Inline function 'web.cssom.px' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.padding = toString_0(0) + 'px';
    // Inline function 'web.cssom.px' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.margin = toString_0(0) + 'px';
    // Inline function 'web.cssom.None.Companion.none' call
    _this__u8e3s4.border = 'none';
    // Inline function 'web.cssom.None.Companion.none' call
    _this__u8e3s4.appearance = 'none';
    // Inline function 'web.cssom.rgb' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
  }
  function comboBoxBuilder(_this__u8e3s4, componentViewData) {
    // Inline function 'web.cssom.Position.Companion.absolute' call
    _this__u8e3s4.position = 'absolute';
    // Inline function 'web.cssom.pct' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.width = toString_0(100) + '%';
    // Inline function 'web.cssom.pct' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.height = toString_0(100) + '%';
    // Inline function 'web.cssom.px' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.padding = toString_0(0) + 'px';
    // Inline function 'web.cssom.px' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.margin = toString_0(0) + 'px';
    // Inline function 'web.cssom.None.Companion.none' call
    _this__u8e3s4.border = 'none';
    // Inline function 'web.cssom.None.Companion.none' call
    _this__u8e3s4.appearance = 'none';
    // Inline function 'web.cssom.rgb' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
  }
  function styleBuilder(_this__u8e3s4, style) {
    var tmp0_elvis_lhs = style.x1('border-radius');
    _this__u8e3s4.borderRadius = cssBorderRadius(tmp0_elvis_lhs == null ? '0rem' : tmp0_elvis_lhs);
    var tmp53_safe_receiver = style.x1('cursor');
    var tmp;
    if (tmp53_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = tmp53_safe_receiver;
    }
    var tmp1_elvis_lhs = tmp;
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp_0 = 'auto';
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    _this__u8e3s4.cursor = tmp_0;
  }
  function filterBuilder(_this__u8e3s4, filters) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var filterList = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = filters.z1().j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'tools.aqua.bgw.elements.filterBuilder.<anonymous>' call
      if (!(element == null)) {
        filterList.e(element);
      }
    }
    _this__u8e3s4.filter = cssFilter(filterList);
  }
  function flipBuilder(_this__u8e3s4, flipped) {
    switch (flipped) {
      case 'horizontal':
        // Inline function 'web.cssom.scalex' call

        // Inline function 'js.reflect.unsafeCast' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        _this__u8e3s4.transform = 'scalex(' + toString_0(-1) + ')';
        break;
      case 'vertical':
        // Inline function 'web.cssom.scaley' call

        // Inline function 'js.reflect.unsafeCast' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        _this__u8e3s4.transform = 'scaley(' + toString_0(-1) + ')';
        break;
      case 'both':
        // Inline function 'web.cssom.scale' call

        // Inline function 'js.reflect.unsafeCast' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        _this__u8e3s4.transform = 'scale(' + toString_0(-1) + ',' + toString_0(-1) + ')';
        break;
    }
  }
  function cssBorderRadius(value) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return value;
  }
  function cssFont(value) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return "'" + value + "'";
  }
  function cssFilter(values) {
    if (values.n()) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      return 'none';
    }
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return joinToString_0(values, ' ');
  }
  function get_Dialog() {
    _init_properties_Dialog_kt__v27fx4();
    return Dialog;
  }
  var Dialog;
  function Dialog$lambda($this$FC, props) {
    _init_properties_Dialog_kt__v27fx4();
    var size = props.data.m();
    var _destruct__k2r9zo = useState(0);
    // Inline function 'react.StateInstance.component1' call
    // Inline function 'seskar.js.internal.getIndexedValue' call
    var num = _destruct__k2r9zo[0];
    // Inline function 'react.StateInstance.component2' call
    // Inline function 'seskar.js.internal.getIndexedValue' call
    var setNum = _destruct__k2r9zo[1];
    var _destruct__k2r9zo_0 = useState(props.data.o(0));
    // Inline function 'react.StateInstance.component1' call
    // Inline function 'seskar.js.internal.getIndexedValue' call
    var current = _destruct__k2r9zo_0[0];
    // Inline function 'react.StateInstance.component2' call
    // Inline function 'seskar.js.internal.getIndexedValue' call
    var setCurrent = _destruct__k2r9zo_0[1];
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'react.dom.html.ReactHTML.div' call
    // Inline function 'react.IntrinsicType' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var block = Dialog$lambda$lambda(current, num, setNum, setCurrent, props, size);
    addChild($this$FC, 'div', block);
    return Unit_instance;
  }
  function Dialog$lambda$lambda$lambda$lambda($current) {
    return function ($this$h1) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Dialog.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontSize = toString_0(20) + 'em';
      $this$h1.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$11 = $current.n1r_1;
      addChildNode($this$h1, tmp$ret$11);
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda_0($current) {
    return function ($this$p) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Dialog.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontSize = toString_0(16) + 'em';
      $this$p.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$11 = $current.o1r_1;
      addChildNode($this$p, tmp$ret$11);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$15 = $current.p1r_1;
      addChildNode($this$p, tmp$ret$15);
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda$lambda$lambda($num, $setNum, $setCurrent, $props) {
    return function (it) {
      var tmp;
      if ($num > 0) {
        $setNum($num - 1 | 0);
        $setCurrent($props.data.o($num - 1 | 0));
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda$lambda($num, $setNum, $setCurrent, $props) {
    return function ($this$button) {
      $this$button.onClick = Dialog$lambda$lambda$lambda$lambda$lambda$lambda($num, $setNum, $setCurrent, $props);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$3 = 'Previous';
      addChildNode($this$button, tmp$ret$3);
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda$lambda_0($num, $size) {
    return function ($this$p) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Dialog.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontSize = toString_0(16) + 'em';
      // Inline function 'web.cssom.TextAlign.Companion.center' call
      this_0.textAlign = 'center';
      $this$p.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$12 = '' + ($num + 1 | 0) + ' / ' + $size;
      addChildNode($this$p, tmp$ret$12);
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda$lambda$lambda_0($num, $size, $setNum, $setCurrent, $props) {
    return function (it) {
      var tmp;
      if ($num < ($size - 1 | 0)) {
        $setNum($num + 1 | 0);
        $setCurrent($props.data.o($num + 1 | 0));
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda$lambda_1($num, $size, $setNum, $setCurrent, $props) {
    return function ($this$button) {
      $this$button.onClick = Dialog$lambda$lambda$lambda$lambda$lambda$lambda_0($num, $size, $setNum, $setCurrent, $props);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      addChildNode($this$button, 'Next');
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda$lambda_1($num, $setNum, $setCurrent, $props, $size) {
    return function ($this$div) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Dialog.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.JustifyContent.Companion.spaceBetween' call
      this_0.justifyContent = 'space-between';
      // Inline function 'web.cssom.AlignItems.Companion.center' call
      this_0.alignItems = 'center';
      $this$div.className = css(this_0);
      // Inline function 'react.dom.html.ReactHTML.button' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block = Dialog$lambda$lambda$lambda$lambda$lambda($num, $setNum, $setCurrent, $props);
      addChild($this$div, 'button', block);
      // Inline function 'react.dom.html.ReactHTML.p' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = Dialog$lambda$lambda$lambda$lambda$lambda_0($num, $size);
      addChild($this$div, 'p', block_0);
      // Inline function 'react.dom.html.ReactHTML.button' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_1 = Dialog$lambda$lambda$lambda$lambda$lambda_1($num, $size, $setNum, $setCurrent, $props);
      addChild($this$div, 'button', block_1);
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda$lambda($current, $num, $setNum, $setCurrent, $props, $size) {
    return function ($this$div) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Dialog.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(500) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(500) + 'em';
      // Inline function 'web.cssom.Color' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundColor = '#FFFFFF';
      // Inline function 'web.cssom.Color' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.color = '#000000';
      $this$div.className = css(this_0);
      // Inline function 'react.dom.html.ReactHTML.h1' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block = Dialog$lambda$lambda$lambda$lambda($current);
      addChild($this$div, 'h1', block);
      // Inline function 'react.dom.html.ReactHTML.p' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = Dialog$lambda$lambda$lambda$lambda_0($current);
      addChild($this$div, 'p', block_0);
      // Inline function 'react.dom.html.ReactHTML.div' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_1 = Dialog$lambda$lambda$lambda$lambda_1($num, $setNum, $setCurrent, $props, $size);
      addChild($this$div, 'div', block_1);
      return Unit_instance;
    };
  }
  function Dialog$lambda$lambda($current, $num, $setNum, $setCurrent, $props, $size) {
    return function ($this$div) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Dialog.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.fixed' call
      this_0.position = 'fixed';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.inset = toString_0(0) + 'px';
      this_0.zIndex = zIndex(2147483647);
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.JustifyContent.Companion.center' call
      this_0.justifyContent = 'center';
      // Inline function 'web.cssom.AlignItems.Companion.center' call
      this_0.alignItems = 'center';
      // Inline function 'web.cssom.Color' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundColor = '#00000050';
      $this$div.className = css(this_0);
      // Inline function 'react.dom.html.ReactHTML.div' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block = Dialog$lambda$lambda$lambda($current, $num, $setNum, $setCurrent, $props, $size);
      addChild($this$div, 'div', block);
      return Unit_instance;
    };
  }
  var properties_initialized_Dialog_kt_cph22y;
  function _init_properties_Dialog_kt__v27fx4() {
    if (!properties_initialized_Dialog_kt_cph22y) {
      properties_initialized_Dialog_kt_cph22y = true;
      Dialog = FC(Dialog$lambda);
    }
  }
  function get_Scene() {
    _init_properties_Scene_kt__amsuee();
    return Scene;
  }
  var Scene;
  function Scene$lambda($this$FC, props) {
    _init_properties_Scene_kt__amsuee();
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.bgwScene' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_scene';
    var block = Scene$lambda$lambda(props);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function Scene$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.z1q_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function Scene$lambda$lambda$lambda_0($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Scene.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(0) + 'px';
      $this$bgwContents.className = css(this_0);
      var tmp0_iterator = $props.data.a1r_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.Scene.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.unaryPlus' call
        var this_1 = NodeBuilder_instance.o2u(element);
        addChildNode($this$bgwContents, this_1);
      }
      return Unit_instance;
    };
  }
  function Scene$lambda$lambda($props) {
    return function ($this$bgwScene) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.Scene.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      var this_1 = $props.data.x1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(this_1) + 'em';
      // Inline function 'web.cssom.em' call
      var this_2 = $props.data.y1q_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(this_2) + 'em';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_0.position = 'relative';
      this_0.transition = menuTransition();
      $this$bgwScene.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_3 = 'bgw_visuals';
      var block = Scene$lambda$lambda$lambda($props);
      addChild($this$bgwScene, this_3, block);
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_4 = 'bgw_contents';
      var block_0 = Scene$lambda$lambda$lambda_0($props);
      addChild($this$bgwScene, this_4, block_0);
      return Unit_instance;
    };
  }
  var properties_initialized_Scene_kt_8ymtvo;
  function _init_properties_Scene_kt__amsuee() {
    if (!properties_initialized_Scene_kt_8ymtvo) {
      properties_initialized_Scene_kt_8ymtvo = true;
      Scene = FC(Scene$lambda);
    }
  }
  function get_Area() {
    _init_properties_Area_kt__a439v1();
    return Area;
  }
  var Area;
  function cssBuilderIntern(_this__u8e3s4, componentViewData) {
    _init_properties_Area_kt__a439v1();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function Area$lambda($this$FC, props) {
    _init_properties_Area_kt__a439v1();
    var draggable = useDraggable(new Area$1$draggable$1(props));
    var droppable = useDroppable(new Area$1$droppable$1(props));
    var style = Area$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.container.bgwArea' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_area';
    var block = Area$lambda$lambda_0(props, style, elementRef, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function Area$1$draggable$1($props) {
    this.p2v_1 = $props.data.a1s_1;
    this.q2v_1 = !$props.data.p1s_1;
  }
  protoOf(Area$1$draggable$1).r2v = function (_set____db54di) {
    this.p2v_1 = _set____db54di;
  };
  protoOf(Area$1$draggable$1).r2o = function () {
    return this.p2v_1;
  };
  protoOf(Area$1$draggable$1).s2v = function (_set____db54di) {
    this.q2v_1 = _set____db54di;
  };
  protoOf(Area$1$draggable$1).t2v = function () {
    return this.q2v_1;
  };
  function Area$1$droppable$1($props) {
    this.u2v_1 = $props.data.a1s_1;
    this.v2v_1 = !$props.data.r1s_1;
  }
  protoOf(Area$1$droppable$1).r2v = function (_set____db54di) {
    this.u2v_1 = _set____db54di;
  };
  protoOf(Area$1$droppable$1).r2o = function () {
    return this.u2v_1;
  };
  protoOf(Area$1$droppable$1).s2v = function (_set____db54di) {
    this.v2v_1 = _set____db54di;
  };
  protoOf(Area$1$droppable$1).t2v = function () {
    return this.v2v_1;
  };
  function Area$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_safe_receiver = $draggable.transform;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.x;
      var tmp;
      if (tmp1_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp1_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp2_safe_receiver = $draggable.transform;
      var tmp3_safe_receiver = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.y;
      var tmp_2;
      if (tmp3_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp3_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function Area$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.e2w_1 = $elementRef;
    this.f2w_1 = $draggable;
    this.g2w_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(Area$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(Area$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(Area$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp4_safe_receiver = this.e2w_1.current;
          if (tmp4_safe_receiver == null)
            null;
          else {
            this.f2w_1.setNodeRef(tmp4_safe_receiver);
          }
          var tmp5_safe_receiver = this.e2w_1.current;
          if (tmp5_safe_receiver == null)
            null;
          else {
            this.g2w_1.setNodeRef(tmp5_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(Area$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new Area$lambda$lambda$slambda(this.e2w_1, this.f2w_1, this.g2w_1, completion);
    i.h2w_1 = $this$useEffect;
    return i;
  };
  function Area$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new Area$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function Area$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function Area$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function Area$lambda$lambda$lambda_1($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      var tmp0_iterator = $props.data.p2e_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.container.Area.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.unaryPlus' call
        var this_0 = NodeBuilder_instance.o2u(element);
        addChildNode($this$bgwContents, this_0);
      }
      return Unit_instance;
    };
  }
  function Area$lambda$lambda_0($props, $style, $elementRef, $draggable, $droppable) {
    return function ($this$bgwArea) {
      $this$bgwArea.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwArea.className = 'area';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwArea.className = css(this_0);
      $this$bgwArea.ref = $elementRef;
      useEffect(Area$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = Area$lambda$lambda$lambda($props);
      addChild($this$bgwArea, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwArea.onPointerDown = Area$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = Area$lambda$lambda$lambda_1($props);
      addChild($this$bgwArea, this_2, block_0);
      applyCommonEventHandlers($this$bgwArea, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwArea['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwArea['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwArea['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwArea['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_Area_kt_9co31r;
  function _init_properties_Area_kt__a439v1() {
    if (!properties_initialized_Area_kt_9co31r) {
      properties_initialized_Area_kt_9co31r = true;
      Area = FC(Area$lambda);
    }
  }
  function get_CardStack() {
    _init_properties_CardStack_kt__gqmc12();
    return CardStack;
  }
  var CardStack;
  function cssBuilderIntern_0(_this__u8e3s4, componentViewData) {
    _init_properties_CardStack_kt__gqmc12();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function CardStack$lambda($this$FC, props) {
    _init_properties_CardStack_kt__gqmc12();
    var draggable = useDraggable(new CardStack$1$draggable$1(props));
    var droppable = useDroppable(new CardStack$1$droppable$1(props));
    var style = CardStack$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.container.bgwCardStack' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_card_stack';
    var block = CardStack$lambda$lambda_0(props, style, elementRef, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function CardStack$1$draggable$1($props) {
    this.i2w_1 = $props.data.a1s_1;
    this.j2w_1 = !$props.data.p1s_1;
  }
  protoOf(CardStack$1$draggable$1).r2v = function (_set____db54di) {
    this.i2w_1 = _set____db54di;
  };
  protoOf(CardStack$1$draggable$1).r2o = function () {
    return this.i2w_1;
  };
  protoOf(CardStack$1$draggable$1).s2v = function (_set____db54di) {
    this.j2w_1 = _set____db54di;
  };
  protoOf(CardStack$1$draggable$1).t2v = function () {
    return this.j2w_1;
  };
  function CardStack$1$droppable$1($props) {
    this.k2w_1 = $props.data.a1s_1;
    this.l2w_1 = !$props.data.r1s_1;
  }
  protoOf(CardStack$1$droppable$1).r2v = function (_set____db54di) {
    this.k2w_1 = _set____db54di;
  };
  protoOf(CardStack$1$droppable$1).r2o = function () {
    return this.k2w_1;
  };
  protoOf(CardStack$1$droppable$1).s2v = function (_set____db54di) {
    this.l2w_1 = _set____db54di;
  };
  protoOf(CardStack$1$droppable$1).t2v = function () {
    return this.l2w_1;
  };
  function CardStack$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_0(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp6_safe_receiver = $draggable.transform;
      var tmp7_safe_receiver = tmp6_safe_receiver == null ? null : tmp6_safe_receiver.x;
      var tmp;
      if (tmp7_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp7_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp8_safe_receiver = $draggable.transform;
      var tmp9_safe_receiver = tmp8_safe_receiver == null ? null : tmp8_safe_receiver.y;
      var tmp_2;
      if (tmp9_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp9_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function CardStack$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.u2w_1 = $elementRef;
    this.v2w_1 = $draggable;
    this.w2w_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(CardStack$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(CardStack$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(CardStack$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp10_safe_receiver = this.u2w_1.current;
          if (tmp10_safe_receiver == null)
            null;
          else {
            this.v2w_1.setNodeRef(tmp10_safe_receiver);
          }
          var tmp11_safe_receiver = this.u2w_1.current;
          if (tmp11_safe_receiver == null)
            null;
          else {
            this.w2w_1.setNodeRef(tmp11_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(CardStack$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new CardStack$lambda$lambda$slambda(this.u2w_1, this.v2w_1, this.w2w_1, completion);
    i.x2w_1 = $this$useEffect;
    return i;
  };
  function CardStack$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new CardStack$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function CardStack$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function CardStack$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function CardStack$lambda$lambda$lambda_1($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.CardStack.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      alignmentBuilder_0(this_0, $props.data);
      $this$bgwContents.className = css(this_0);
      var tmp0_iterator = $props.data.p2e_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.container.CardStack.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.unaryPlus' call
        var this_1 = NodeBuilder_instance.o2u(element);
        addChildNode($this$bgwContents, this_1);
      }
      return Unit_instance;
    };
  }
  function CardStack$lambda$lambda_0($props, $style, $elementRef, $draggable, $droppable) {
    return function ($this$bgwCardStack) {
      $this$bgwCardStack.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardStack.className = 'cardStack';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwCardStack.className = css(this_0);
      $this$bgwCardStack.ref = $elementRef;
      useEffect(CardStack$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = CardStack$lambda$lambda$lambda($props);
      addChild($this$bgwCardStack, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwCardStack.onPointerDown = CardStack$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = CardStack$lambda$lambda$lambda_1($props);
      addChild($this$bgwCardStack, this_2, block_0);
      applyCommonEventHandlers($this$bgwCardStack, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardStack['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardStack['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardStack['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardStack['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_CardStack_kt_87vthk;
  function _init_properties_CardStack_kt__gqmc12() {
    if (!properties_initialized_CardStack_kt_87vthk) {
      properties_initialized_CardStack_kt_87vthk = true;
      CardStack = FC(CardStack$lambda);
    }
  }
  function get_HexagonGrid() {
    _init_properties_HexagonGrid_kt__8smg9g();
    return HexagonGrid;
  }
  var HexagonGrid;
  function cssBuilderIntern_1(_this__u8e3s4, componentViewData) {
    _init_properties_HexagonGrid_kt__8smg9g();
    cssBuilder(_this__u8e3s4, componentViewData);
    // Inline function 'web.cssom.JustifyContent.Companion.flexStart' call
    _this__u8e3s4.justifyContent = 'flex-start';
    // Inline function 'web.cssom.AlignItems.Companion.flexStart' call
    _this__u8e3s4.alignItems = 'flex-start';
  }
  function HexagonGrid$lambda($this$FC, props) {
    _init_properties_HexagonGrid_kt__8smg9g();
    var draggable = useDraggable(new HexagonGrid$1$draggable$1(props));
    var droppable = useDroppable(new HexagonGrid$1$droppable$1(props));
    var style = HexagonGrid$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.container.bgwHexagonGrid' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_hexagon_grid';
    var block = HexagonGrid$lambda$lambda_0(props, style, elementRef, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function HexagonGrid$1$draggable$1($props) {
    this.y2w_1 = $props.data.a1s_1;
    this.z2w_1 = !$props.data.p1s_1;
  }
  protoOf(HexagonGrid$1$draggable$1).r2v = function (_set____db54di) {
    this.y2w_1 = _set____db54di;
  };
  protoOf(HexagonGrid$1$draggable$1).r2o = function () {
    return this.y2w_1;
  };
  protoOf(HexagonGrid$1$draggable$1).s2v = function (_set____db54di) {
    this.z2w_1 = _set____db54di;
  };
  protoOf(HexagonGrid$1$draggable$1).t2v = function () {
    return this.z2w_1;
  };
  function HexagonGrid$1$droppable$1($props) {
    this.a2x_1 = $props.data.a1s_1;
    this.b2x_1 = !$props.data.r1s_1;
  }
  protoOf(HexagonGrid$1$droppable$1).r2v = function (_set____db54di) {
    this.a2x_1 = _set____db54di;
  };
  protoOf(HexagonGrid$1$droppable$1).r2o = function () {
    return this.a2x_1;
  };
  protoOf(HexagonGrid$1$droppable$1).s2v = function (_set____db54di) {
    this.b2x_1 = _set____db54di;
  };
  protoOf(HexagonGrid$1$droppable$1).t2v = function () {
    return this.b2x_1;
  };
  function HexagonGrid$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_1(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp12_safe_receiver = $draggable.transform;
      var tmp13_safe_receiver = tmp12_safe_receiver == null ? null : tmp12_safe_receiver.x;
      var tmp;
      if (tmp13_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp13_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp14_safe_receiver = $draggable.transform;
      var tmp15_safe_receiver = tmp14_safe_receiver == null ? null : tmp14_safe_receiver.y;
      var tmp_2;
      if (tmp15_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp15_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.k2x_1 = $elementRef;
    this.l2x_1 = $draggable;
    this.m2x_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(HexagonGrid$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(HexagonGrid$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(HexagonGrid$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp16_safe_receiver = this.k2x_1.current;
          if (tmp16_safe_receiver == null)
            null;
          else {
            this.l2x_1.setNodeRef(tmp16_safe_receiver);
          }
          var tmp17_safe_receiver = this.k2x_1.current;
          if (tmp17_safe_receiver == null)
            null;
          else {
            this.m2x_1.setNodeRef(tmp17_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(HexagonGrid$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new HexagonGrid$lambda$lambda$slambda(this.k2x_1, this.l2x_1, this.m2x_1, completion);
    i.n2x_1 = $this$useEffect;
    return i;
  };
  function HexagonGrid$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new HexagonGrid$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function HexagonGrid$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$lambda$lambda($it, $props, $minX, $maxX, $minY, $maxY) {
    return function ($this$bgwHexagonContent) {
      var size = $it.u1().o2d_1;
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.math.sqrt' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = (size * Math.sqrt(3.0)).toString().substring(0, 3);
      var w = toDouble(tmp$ret$2);
      var h = imul(2, size);
      var q = toInt(split($it.t1(), ['/']).o(0));
      var r = toInt(split($it.t1(), ['/']).o(1));
      var x = (r % 2 | 0) === 0 ? w * q + imul($props.data.s2g_1, q - 1 | 0) : w * q + imul($props.data.s2g_1, q - 1 | 0) + w / 2;
      var y = h * 0.75 * r + imul($props.data.s2g_1, r - 1 | 0);
      var tmp;
      if (x < $minX._v) {
        $minX._v = x;
        tmp = Unit_instance;
      }
      var tmp_0;
      if (x + w > $maxX._v) {
        $maxX._v = x + w;
        tmp_0 = Unit_instance;
      }
      var tmp_1;
      if (y < $minY._v) {
        $minY._v = y;
        tmp_1 = Unit_instance;
      }
      var tmp_2;
      if (y + h > $maxY._v) {
        $maxY._v = y + h;
        tmp_2 = Unit_instance;
      }
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.HexagonGrid.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(x) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(y) + 'em';
      $this$bgwHexagonContent.className = css(this_0);
      var this_1 = NodeBuilder_instance.o2u($it.u1());
      addChildNode($this$bgwHexagonContent, this_1);
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$lambda$lambda_0($it, $props, $minX, $maxX, $minY, $maxY) {
    return function ($this$bgwHexagonContent) {
      var size = $it.u1().o2d_1;
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.math.sqrt' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = (size * Math.sqrt(3.0)).toString().substring(0, 3);
      var w = toDouble(tmp$ret$2);
      var h = imul(2, size);
      var q = toInt(split($it.t1(), ['/']).o(0));
      var r = toInt(split($it.t1(), ['/']).o(1));
      q = q + ((r - (r & 1) | 0) / 2 | 0) | 0;
      var x = (r % 2 | 0) === 0 ? w * q + imul($props.data.s2g_1, q - 1 | 0) : w * q + imul($props.data.s2g_1, q - 1 | 0) + w / 2;
      var y = h * 0.75 * r + imul($props.data.s2g_1, r - 1 | 0);
      var tmp;
      if (x < $minX._v) {
        $minX._v = x;
        tmp = Unit_instance;
      }
      var tmp_0;
      if (x + w > $maxX._v) {
        $maxX._v = x + w;
        tmp_0 = Unit_instance;
      }
      var tmp_1;
      if (y < $minY._v) {
        $minY._v = y;
        tmp_1 = Unit_instance;
      }
      var tmp_2;
      if (y + h > $maxY._v) {
        $maxY._v = y + h;
        tmp_2 = Unit_instance;
      }
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.HexagonGrid.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(x) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(y) + 'em';
      $this$bgwHexagonContent.className = css(this_0);
      var this_1 = NodeBuilder_instance.o2u($it.u1());
      addChildNode($this$bgwHexagonContent, this_1);
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$lambda$lambda_1($it, $props, $minX, $maxX, $minY, $maxY) {
    return function ($this$bgwHexagonContent) {
      var size = $it.u1().o2d_1;
      var w = imul(2, size);
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.math.sqrt' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = (size * Math.sqrt(3.0)).toString().substring(0, 3);
      var h = toDouble(tmp$ret$2);
      var q = toInt(split($it.t1(), ['/']).o(0));
      var r = toInt(split($it.t1(), ['/']).o(1));
      var x = w * 0.75 * q + imul($props.data.s2g_1, q - 1 | 0);
      var y = (q % 2 | 0) === 0 ? h * r + imul($props.data.s2g_1, r - 1 | 0) : h * r + imul($props.data.s2g_1, r - 1 | 0) + h / 2;
      var tmp;
      if (x < $minX._v) {
        $minX._v = x;
        tmp = Unit_instance;
      }
      var tmp_0;
      if (x + w > $maxX._v) {
        $maxX._v = x + w;
        tmp_0 = Unit_instance;
      }
      var tmp_1;
      if (y < $minY._v) {
        $minY._v = y;
        tmp_1 = Unit_instance;
      }
      var tmp_2;
      if (y + h > $maxY._v) {
        $maxY._v = y + h;
        tmp_2 = Unit_instance;
      }
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.HexagonGrid.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(x) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(y) + 'em';
      $this$bgwHexagonContent.className = css(this_0);
      var this_1 = NodeBuilder_instance.o2u($it.u1());
      addChildNode($this$bgwHexagonContent, this_1);
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$lambda$lambda_2($it, $props, $minX, $maxX, $minY, $maxY) {
    return function ($this$bgwHexagonContent) {
      var size = $it.u1().o2d_1;
      var w = imul(2, size);
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.math.sqrt' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = (size * Math.sqrt(3.0)).toString().substring(0, 3);
      var h = toDouble(tmp$ret$2);
      var q = toInt(split($it.t1(), ['/']).o(0));
      var r = toInt(split($it.t1(), ['/']).o(1));
      r = r + ((q - (q & 1) | 0) / 2 | 0) | 0;
      var x = w * 0.75 * q + imul($props.data.s2g_1, q - 1 | 0);
      var y = (q % 2 | 0) === 0 ? h * r + imul($props.data.s2g_1, r - 1 | 0) : h * r + imul($props.data.s2g_1, r - 1 | 0) + h / 2;
      var tmp;
      if (x < $minX._v) {
        $minX._v = x;
        tmp = Unit_instance;
      }
      var tmp_0;
      if (x + w > $maxX._v) {
        $maxX._v = x + w;
        tmp_0 = Unit_instance;
      }
      var tmp_1;
      if (y < $minY._v) {
        $minY._v = y;
        tmp_1 = Unit_instance;
      }
      var tmp_2;
      if (y + h > $maxY._v) {
        $maxY._v = y + h;
        tmp_2 = Unit_instance;
      }
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.HexagonGrid.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(x) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(y) + 'em';
      $this$bgwHexagonContent.className = css(this_0);
      var this_1 = NodeBuilder_instance.o2u($it.u1());
      addChildNode($this$bgwHexagonContent, this_1);
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda$lambda_1($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      var minX = {_v: 0.0};
      var maxX = {_v: 0.0};
      var minY = {_v: 0.0};
      var maxY = {_v: 0.0};
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator = $props.data.r2g_1.r().j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.container.HexagonGrid.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        if ($props.data.t2g_1 === 'pointy_top') {
          if ($props.data.q2g_1 === 'offset') {
            // Inline function 'react.ChildrenBuilder.invoke' call
            // Inline function 'tools.aqua.bgw.elements.container.bgwHexagonContent' call
            // Inline function 'kotlin.js.unsafeCast' call
            // Inline function 'kotlin.js.asDynamic' call
            var this_0 = 'bgw_hexagon_content';
            var block = HexagonGrid$lambda$lambda$lambda$lambda(element, $props, minX, maxX, minY, maxY);
            addChild($this$bgwContents, this_0, block);
          } else {
            // Inline function 'react.ChildrenBuilder.invoke' call
            // Inline function 'tools.aqua.bgw.elements.container.bgwHexagonContent' call
            // Inline function 'kotlin.js.unsafeCast' call
            // Inline function 'kotlin.js.asDynamic' call
            var this_1 = 'bgw_hexagon_content';
            var block_0 = HexagonGrid$lambda$lambda$lambda$lambda_0(element, $props, minX, maxX, minY, maxY);
            addChild($this$bgwContents, this_1, block_0);
          }
        } else {
          if ($props.data.q2g_1 === 'offset') {
            // Inline function 'react.ChildrenBuilder.invoke' call
            // Inline function 'tools.aqua.bgw.elements.container.bgwHexagonContent' call
            // Inline function 'kotlin.js.unsafeCast' call
            // Inline function 'kotlin.js.asDynamic' call
            var this_2 = 'bgw_hexagon_content';
            var block_1 = HexagonGrid$lambda$lambda$lambda$lambda_1(element, $props, minX, maxX, minY, maxY);
            addChild($this$bgwContents, this_2, block_1);
          } else {
            // Inline function 'react.ChildrenBuilder.invoke' call
            // Inline function 'tools.aqua.bgw.elements.container.bgwHexagonContent' call
            // Inline function 'kotlin.js.unsafeCast' call
            // Inline function 'kotlin.js.asDynamic' call
            var this_3 = 'bgw_hexagon_content';
            var block_2 = HexagonGrid$lambda$lambda$lambda$lambda_2(element, $props, minX, maxX, minY, maxY);
            addChild($this$bgwContents, this_3, block_2);
          }
        }
        // Inline function 'emotion.react.css' call
        // Inline function 'emotion.css.ClassName' call
        // Inline function 'js.objects.jso' call
        // Inline function 'kotlin.apply' call
        // Inline function 'js.objects.jso' call
        var this_4 = {};
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'tools.aqua.bgw.elements.container.HexagonGrid.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'web.cssom.Position.Companion.absolute' call
        this_4.position = 'absolute';
        // Inline function 'web.cssom.em' call
        var tmp = maxX._v;
        // Inline function 'kotlin.math.abs' call
        var x = minX._v;
        var this_5 = tmp + Math.abs(x);
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_4.width = toString_0(this_5) + 'em';
        // Inline function 'web.cssom.em' call
        var tmp_0 = maxY._v;
        // Inline function 'kotlin.math.abs' call
        var x_0 = minY._v;
        var this_6 = tmp_0 + Math.abs(x_0);
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_4.height = toString_0(this_6) + 'em';
        // Inline function 'web.cssom.em' call
        var this_7 = -minX._v;
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_4.left = toString_0(this_7) + 'em';
        // Inline function 'web.cssom.em' call
        var this_8 = -minY._v;
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_4.top = toString_0(this_8) + 'em';
        $this$bgwContents.className = css(this_4);
      }
      return Unit_instance;
    };
  }
  function HexagonGrid$lambda$lambda_0($props, $style, $elementRef, $draggable, $droppable) {
    return function ($this$bgwHexagonGrid) {
      $this$bgwHexagonGrid.tabIndex = 0;
      $this$bgwHexagonGrid.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonGrid.className = 'hexagonGrid';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwHexagonGrid.className = css(this_0);
      $this$bgwHexagonGrid.ref = $elementRef;
      useEffect(HexagonGrid$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = HexagonGrid$lambda$lambda$lambda($props);
      addChild($this$bgwHexagonGrid, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwHexagonGrid.onPointerDown = HexagonGrid$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = HexagonGrid$lambda$lambda$lambda_1($props);
      addChild($this$bgwHexagonGrid, this_2, block_0);
      applyCommonEventHandlers($this$bgwHexagonGrid, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonGrid['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonGrid['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonGrid['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonGrid['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_HexagonGrid_kt_83558q;
  function _init_properties_HexagonGrid_kt__8smg9g() {
    if (!properties_initialized_HexagonGrid_kt_83558q) {
      properties_initialized_HexagonGrid_kt_83558q = true;
      HexagonGrid = FC(HexagonGrid$lambda);
    }
  }
  function get_LinearLayout() {
    _init_properties_LinearLayout_kt__43cyj3();
    return LinearLayout;
  }
  var LinearLayout;
  function cssBuilderIntern_2(_this__u8e3s4, componentViewData) {
    _init_properties_LinearLayout_kt__43cyj3();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function LinearLayout$lambda($this$FC, props) {
    _init_properties_LinearLayout_kt__43cyj3();
    var draggable = useDraggable(new LinearLayout$1$draggable$1(props));
    var droppable = useDroppable(new LinearLayout$1$droppable$1(props));
    var style = LinearLayout$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.container.bgwLinearLayout' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_linear_layout';
    var block = LinearLayout$lambda$lambda_0(props, style, elementRef, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function LinearLayout$1$draggable$1($props) {
    this.o2x_1 = $props.data.a1s_1;
    this.p2x_1 = !$props.data.p1s_1;
  }
  protoOf(LinearLayout$1$draggable$1).r2v = function (_set____db54di) {
    this.o2x_1 = _set____db54di;
  };
  protoOf(LinearLayout$1$draggable$1).r2o = function () {
    return this.o2x_1;
  };
  protoOf(LinearLayout$1$draggable$1).s2v = function (_set____db54di) {
    this.p2x_1 = _set____db54di;
  };
  protoOf(LinearLayout$1$draggable$1).t2v = function () {
    return this.p2x_1;
  };
  function LinearLayout$1$droppable$1($props) {
    this.q2x_1 = $props.data.a1s_1;
    this.r2x_1 = !$props.data.r1s_1;
  }
  protoOf(LinearLayout$1$droppable$1).r2v = function (_set____db54di) {
    this.q2x_1 = _set____db54di;
  };
  protoOf(LinearLayout$1$droppable$1).r2o = function () {
    return this.q2x_1;
  };
  protoOf(LinearLayout$1$droppable$1).s2v = function (_set____db54di) {
    this.r2x_1 = _set____db54di;
  };
  protoOf(LinearLayout$1$droppable$1).t2v = function () {
    return this.r2x_1;
  };
  function LinearLayout$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_2(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp18_safe_receiver = $draggable.transform;
      var tmp19_safe_receiver = tmp18_safe_receiver == null ? null : tmp18_safe_receiver.x;
      var tmp;
      if (tmp19_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp19_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp20_safe_receiver = $draggable.transform;
      var tmp21_safe_receiver = tmp20_safe_receiver == null ? null : tmp20_safe_receiver.y;
      var tmp_2;
      if (tmp21_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp21_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function LinearLayout$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.a2y_1 = $elementRef;
    this.b2y_1 = $draggable;
    this.c2y_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(LinearLayout$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(LinearLayout$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(LinearLayout$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp22_safe_receiver = this.a2y_1.current;
          if (tmp22_safe_receiver == null)
            null;
          else {
            this.b2y_1.setNodeRef(tmp22_safe_receiver);
          }
          var tmp23_safe_receiver = this.a2y_1.current;
          if (tmp23_safe_receiver == null)
            null;
          else {
            this.c2y_1.setNodeRef(tmp23_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(LinearLayout$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new LinearLayout$lambda$lambda$slambda(this.a2y_1, this.b2y_1, this.c2y_1, completion);
    i.d2y_1 = $this$useEffect;
    return i;
  };
  function LinearLayout$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new LinearLayout$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function LinearLayout$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function LinearLayout$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function LinearLayout$lambda$lambda$lambda$slambda($props, resultContinuation) {
    this.m2y_1 = $props;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(LinearLayout$lambda$lambda$lambda$slambda).m2v = function ($this$useLayoutEffect, $completion) {
    var tmp = this.n2v($this$useLayoutEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(LinearLayout$lambda$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(LinearLayout$lambda$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp28_safe_receiver = document.getElementById(this.m2y_1.data.a1s_1 + '--components');
          if (tmp28_safe_receiver == null)
            null;
          else {
            var inductionVariable = 0;
            var last = tmp28_safe_receiver.childElementCount;
            if (inductionVariable < last)
              do {
                var i = inductionVariable;
                inductionVariable = inductionVariable + 1 | 0;
                var tmp_0 = tmp28_safe_receiver.children[i];
                var child = tmp_0 instanceof HTMLElement ? tmp_0 : THROW_CCE();
                if (this.m2y_1.data.s2h_1 === 'vertical') {
                  child.style.marginBottom = '' + this.m2y_1.data.u2h_1 + 'em';
                  child.style.marginLeft = '0';
                } else {
                  child.style.marginRight = '' + this.m2y_1.data.u2h_1 + 'em';
                  child.style.marginTop = '0';
                }
              }
               while (inductionVariable < last);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(LinearLayout$lambda$lambda$lambda$slambda).n2v = function ($this$useLayoutEffect, completion) {
    var i = new LinearLayout$lambda$lambda$lambda$slambda(this.m2y_1, completion);
    i.n2y_1 = $this$useLayoutEffect;
    return i;
  };
  function LinearLayout$lambda$lambda$lambda$slambda_0($props, resultContinuation) {
    var i = new LinearLayout$lambda$lambda$lambda$slambda($props, resultContinuation);
    var l = function ($this$useLayoutEffect, $completion) {
      return i.m2v($this$useLayoutEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function LinearLayout$lambda$lambda$lambda_1($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      $this$bgwContents.id = $props.data.a1s_1 + '--components';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.LinearLayout.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      var tmp;
      if ($props.data.s2h_1 === 'horizontal') {
        // Inline function 'web.cssom.FlexDirection.Companion.row' call
        tmp = 'row';
      } else {
        // Inline function 'web.cssom.FlexDirection.Companion.column' call
        tmp = 'column';
      }
      this_0.flexDirection = tmp;
      if ($props.data.s2h_1 === 'horizontal') {
        var tmp_0;
        switch ($props.data.t2h_1.qc_1) {
          case 'left':
            // Inline function 'web.cssom.JustifyContent.Companion.flexStart' call

            tmp_0 = 'flex-start';
            break;
          case 'center':
            // Inline function 'web.cssom.JustifyContent.Companion.center' call

            tmp_0 = 'center';
            break;
          case 'right':
            // Inline function 'web.cssom.JustifyContent.Companion.flexEnd' call

            tmp_0 = 'flex-end';
            break;
          default:
            // Inline function 'web.cssom.JustifyContent.Companion.center' call

            tmp_0 = 'center';
            break;
        }
        this_0.justifyContent = tmp_0;
        var tmp_1;
        switch ($props.data.t2h_1.rc_1) {
          case 'top':
            // Inline function 'web.cssom.AlignItems.Companion.flexStart' call

            tmp_1 = 'flex-start';
            break;
          case 'center':
            // Inline function 'web.cssom.AlignItems.Companion.center' call

            tmp_1 = 'center';
            break;
          case 'bottom':
            // Inline function 'web.cssom.AlignItems.Companion.flexEnd' call

            tmp_1 = 'flex-end';
            break;
          default:
            // Inline function 'web.cssom.AlignItems.Companion.center' call

            tmp_1 = 'center';
            break;
        }
        this_0.alignItems = tmp_1;
      } else {
        var tmp_2;
        switch ($props.data.t2h_1.qc_1) {
          case 'left':
            // Inline function 'web.cssom.AlignItems.Companion.flexStart' call

            tmp_2 = 'flex-start';
            break;
          case 'center':
            // Inline function 'web.cssom.AlignItems.Companion.center' call

            tmp_2 = 'center';
            break;
          case 'right':
            // Inline function 'web.cssom.AlignItems.Companion.flexEnd' call

            tmp_2 = 'flex-end';
            break;
          default:
            // Inline function 'web.cssom.AlignItems.Companion.center' call

            tmp_2 = 'center';
            break;
        }
        this_0.alignItems = tmp_2;
        var tmp_3;
        switch ($props.data.t2h_1.rc_1) {
          case 'top':
            // Inline function 'web.cssom.JustifyContent.Companion.flexStart' call

            tmp_3 = 'flex-start';
            break;
          case 'center':
            // Inline function 'web.cssom.JustifyContent.Companion.center' call

            tmp_3 = 'center';
            break;
          case 'bottom':
            // Inline function 'web.cssom.JustifyContent.Companion.flexEnd' call

            tmp_3 = 'flex-end';
            break;
          default:
            // Inline function 'web.cssom.JustifyContent.Companion.center' call

            tmp_3 = 'center';
            break;
        }
        this_0.justifyContent = tmp_3;
      }
      $this$bgwContents.className = css(this_0);
      var tmp0_iterator = $props.data.p2e_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.container.LinearLayout.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.unaryPlus' call
        var this_1 = NodeBuilder_instance.o2u(element);
        addChildNode($this$bgwContents, this_1);
      }
      var tmp_4 = [listOf($props.data)];
      useLayoutEffect(tmp_4, LinearLayout$lambda$lambda$lambda$slambda_0($props, null));
      return Unit_instance;
    };
  }
  function LinearLayout$lambda$lambda_0($props, $style, $elementRef, $draggable, $droppable) {
    return function ($this$bgwLinearLayout) {
      $this$bgwLinearLayout.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLinearLayout.className = 'linearLayout';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwLinearLayout.className = css(this_0);
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLinearLayout['aria-details'] = $props.data.s2h_1;
      $this$bgwLinearLayout.ref = $elementRef;
      useEffect(LinearLayout$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = LinearLayout$lambda$lambda$lambda($props);
      addChild($this$bgwLinearLayout, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwLinearLayout.onPointerDown = LinearLayout$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = LinearLayout$lambda$lambda$lambda_1($props);
      addChild($this$bgwLinearLayout, this_2, block_0);
      applyCommonEventHandlers($this$bgwLinearLayout, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLinearLayout['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLinearLayout['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLinearLayout['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLinearLayout['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_LinearLayout_kt_u44i9;
  function _init_properties_LinearLayout_kt__43cyj3() {
    if (!properties_initialized_LinearLayout_kt_u44i9) {
      properties_initialized_LinearLayout_kt_u44i9 = true;
      LinearLayout = FC(LinearLayout$lambda);
    }
  }
  function get_Satchel() {
    _init_properties_Satchel_kt__v7ti80();
    return Satchel;
  }
  var Satchel;
  function cssBuilderIntern_3(_this__u8e3s4, componentViewData) {
    _init_properties_Satchel_kt__v7ti80();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function Satchel$lambda($this$FC, props) {
    _init_properties_Satchel_kt__v7ti80();
    var draggable = useDraggable(new Satchel$1$draggable$1(props));
    var droppable = useDroppable(new Satchel$1$droppable$1(props));
    var style = Satchel$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.container.bgwSatchel' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_satchel';
    var block = Satchel$lambda$lambda_0(props, style, elementRef, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function Satchel$1$draggable$1($props) {
    this.o2y_1 = $props.data.a1s_1;
    this.p2y_1 = !$props.data.p1s_1;
  }
  protoOf(Satchel$1$draggable$1).r2v = function (_set____db54di) {
    this.o2y_1 = _set____db54di;
  };
  protoOf(Satchel$1$draggable$1).r2o = function () {
    return this.o2y_1;
  };
  protoOf(Satchel$1$draggable$1).s2v = function (_set____db54di) {
    this.p2y_1 = _set____db54di;
  };
  protoOf(Satchel$1$draggable$1).t2v = function () {
    return this.p2y_1;
  };
  function Satchel$1$droppable$1($props) {
    this.q2y_1 = $props.data.a1s_1;
    this.r2y_1 = !$props.data.r1s_1;
  }
  protoOf(Satchel$1$droppable$1).r2v = function (_set____db54di) {
    this.q2y_1 = _set____db54di;
  };
  protoOf(Satchel$1$droppable$1).r2o = function () {
    return this.q2y_1;
  };
  protoOf(Satchel$1$droppable$1).s2v = function (_set____db54di) {
    this.r2y_1 = _set____db54di;
  };
  protoOf(Satchel$1$droppable$1).t2v = function () {
    return this.r2y_1;
  };
  function Satchel$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_3(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_safe_receiver = $draggable.transform;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.x;
      var tmp;
      if (tmp1_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp1_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp2_safe_receiver = $draggable.transform;
      var tmp3_safe_receiver = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.y;
      var tmp_2;
      if (tmp3_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp3_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function Satchel$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.a2z_1 = $elementRef;
    this.b2z_1 = $draggable;
    this.c2z_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(Satchel$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(Satchel$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(Satchel$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp4_safe_receiver = this.a2z_1.current;
          if (tmp4_safe_receiver == null)
            null;
          else {
            this.b2z_1.setNodeRef(tmp4_safe_receiver);
          }
          var tmp5_safe_receiver = this.a2z_1.current;
          if (tmp5_safe_receiver == null)
            null;
          else {
            this.c2z_1.setNodeRef(tmp5_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(Satchel$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new Satchel$lambda$lambda$slambda(this.a2z_1, this.b2z_1, this.c2z_1, completion);
    i.d2z_1 = $this$useEffect;
    return i;
  };
  function Satchel$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new Satchel$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function Satchel$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function Satchel$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function Satchel$lambda$lambda$lambda_1($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.container.Satchel.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.JustifyContent.Companion.center' call
      this_0.justifyContent = 'center';
      // Inline function 'web.cssom.AlignItems.Companion.center' call
      this_0.alignItems = 'center';
      $this$bgwContents.className = css(this_0);
      var tmp0_iterator = $props.data.p2e_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.container.Satchel.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.unaryPlus' call
        var tmp = NodeBuilder_instance;
        // Inline function 'kotlin.apply' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'tools.aqua.bgw.elements.container.Satchel.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        element.h1s_1 = 0.0;
        var this_1 = tmp.o2u(element);
        addChildNode($this$bgwContents, this_1);
      }
      return Unit_instance;
    };
  }
  function Satchel$lambda$lambda_0($props, $style, $elementRef, $draggable, $droppable) {
    return function ($this$bgwSatchel) {
      $this$bgwSatchel.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwSatchel.className = 'satchel';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwSatchel.className = css(this_0);
      $this$bgwSatchel.ref = $elementRef;
      useEffect(Satchel$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = Satchel$lambda$lambda$lambda($props);
      addChild($this$bgwSatchel, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwSatchel.onPointerDown = Satchel$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = Satchel$lambda$lambda$lambda_1($props);
      addChild($this$bgwSatchel, this_2, block_0);
      applyCommonEventHandlers($this$bgwSatchel, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwSatchel['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwSatchel['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwSatchel['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwSatchel['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_Satchel_kt_4f6fz6;
  function _init_properties_Satchel_kt__v7ti80() {
    if (!properties_initialized_Satchel_kt_4f6fz6) {
      properties_initialized_Satchel_kt_4f6fz6 = true;
      Satchel = FC(Satchel$lambda);
    }
  }
  function get_CardView() {
    _init_properties_CardView_kt__lo2ctx();
    return CardView;
  }
  var CardView;
  function cssBuilderIntern_4(_this__u8e3s4, componentViewData) {
    _init_properties_CardView_kt__lo2ctx();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function CardView$lambda($this$FC, props) {
    _init_properties_CardView_kt__lo2ctx();
    var draggable = useDraggable(new CardView$1$draggable$1(props));
    var droppable = useDroppable(new CardView$1$droppable$1(props));
    var style = CardView$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.gamecomponentviews.bgwCardView' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_card_view';
    var block = CardView$lambda$lambda_0(props, elementRef, style, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function CardView$1$draggable$1($props) {
    this.e2z_1 = $props.data.a1s_1;
    this.f2z_1 = !$props.data.p1s_1;
  }
  protoOf(CardView$1$draggable$1).r2v = function (_set____db54di) {
    this.e2z_1 = _set____db54di;
  };
  protoOf(CardView$1$draggable$1).r2o = function () {
    return this.e2z_1;
  };
  protoOf(CardView$1$draggable$1).s2v = function (_set____db54di) {
    this.f2z_1 = _set____db54di;
  };
  protoOf(CardView$1$draggable$1).t2v = function () {
    return this.f2z_1;
  };
  function CardView$1$droppable$1($props) {
    this.g2z_1 = $props.data.a1s_1;
    this.h2z_1 = !$props.data.r1s_1;
  }
  protoOf(CardView$1$droppable$1).r2v = function (_set____db54di) {
    this.g2z_1 = _set____db54di;
  };
  protoOf(CardView$1$droppable$1).r2o = function () {
    return this.g2z_1;
  };
  protoOf(CardView$1$droppable$1).s2v = function (_set____db54di) {
    this.h2z_1 = _set____db54di;
  };
  protoOf(CardView$1$droppable$1).t2v = function () {
    return this.h2z_1;
  };
  function CardView$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_4(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp64_safe_receiver = $draggable.transform;
      var tmp65_safe_receiver = tmp64_safe_receiver == null ? null : tmp64_safe_receiver.x;
      var tmp;
      if (tmp65_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp65_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp66_safe_receiver = $draggable.transform;
      var tmp67_safe_receiver = tmp66_safe_receiver == null ? null : tmp66_safe_receiver.y;
      var tmp_2;
      if (tmp67_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp67_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function CardView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.q2z_1 = $elementRef;
    this.r2z_1 = $draggable;
    this.s2z_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(CardView$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(CardView$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(CardView$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp68_safe_receiver = this.q2z_1.current;
          if (tmp68_safe_receiver == null)
            null;
          else {
            this.r2z_1.setNodeRef(tmp68_safe_receiver);
          }
          var tmp69_safe_receiver = this.q2z_1.current;
          if (tmp69_safe_receiver == null)
            null;
          else {
            this.s2z_1.setNodeRef(tmp69_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(CardView$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new CardView$lambda$lambda$slambda(this.q2z_1, this.r2z_1, this.s2z_1, completion);
    i.t2z_1 = $this$useEffect;
    return i;
  };
  function CardView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new CardView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function CardView$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.r2b_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function CardView$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function CardView$lambda$lambda_0($props, $elementRef, $style, $draggable, $droppable) {
    return function ($this$bgwCardView) {
      $this$bgwCardView.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardView.className = 'cardView';
      $this$bgwCardView.ref = $elementRef;
      useEffect(CardView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwCardView.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = CardView$lambda$lambda$lambda($props);
      addChild($this$bgwCardView, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwCardView.onPointerDown = CardView$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      applyCommonEventHandlers($this$bgwCardView, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardView['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardView['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardView['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCardView['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_CardView_kt_ml9a6h;
  function _init_properties_CardView_kt__lo2ctx() {
    if (!properties_initialized_CardView_kt_ml9a6h) {
      properties_initialized_CardView_kt_ml9a6h = true;
      CardView = FC(CardView$lambda);
    }
  }
  function get_DiceView() {
    _init_properties_DiceView_kt__i09gcs();
    return DiceView;
  }
  var DiceView;
  function cssBuilderIntern_5(_this__u8e3s4, componentViewData) {
    _init_properties_DiceView_kt__i09gcs();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function DiceView$lambda($this$FC, props) {
    _init_properties_DiceView_kt__i09gcs();
    var draggable = useDraggable(new DiceView$1$draggable$1(props));
    var droppable = useDroppable(new DiceView$1$droppable$1(props));
    var style = DiceView$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.gamecomponentviews.bgwDiceView' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_dice_view';
    var block = DiceView$lambda$lambda_0(props, elementRef, style, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function DiceView$1$draggable$1($props) {
    this.u2z_1 = $props.data.a1s_1;
    this.v2z_1 = !$props.data.p1s_1;
  }
  protoOf(DiceView$1$draggable$1).r2v = function (_set____db54di) {
    this.u2z_1 = _set____db54di;
  };
  protoOf(DiceView$1$draggable$1).r2o = function () {
    return this.u2z_1;
  };
  protoOf(DiceView$1$draggable$1).s2v = function (_set____db54di) {
    this.v2z_1 = _set____db54di;
  };
  protoOf(DiceView$1$draggable$1).t2v = function () {
    return this.v2z_1;
  };
  function DiceView$1$droppable$1($props) {
    this.w2z_1 = $props.data.a1s_1;
    this.x2z_1 = !$props.data.r1s_1;
  }
  protoOf(DiceView$1$droppable$1).r2v = function (_set____db54di) {
    this.w2z_1 = _set____db54di;
  };
  protoOf(DiceView$1$droppable$1).r2o = function () {
    return this.w2z_1;
  };
  protoOf(DiceView$1$droppable$1).s2v = function (_set____db54di) {
    this.x2z_1 = _set____db54di;
  };
  protoOf(DiceView$1$droppable$1).t2v = function () {
    return this.x2z_1;
  };
  function DiceView$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_5(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp70_safe_receiver = $draggable.transform;
      var tmp71_safe_receiver = tmp70_safe_receiver == null ? null : tmp70_safe_receiver.x;
      var tmp;
      if (tmp71_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp71_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp72_safe_receiver = $draggable.transform;
      var tmp73_safe_receiver = tmp72_safe_receiver == null ? null : tmp72_safe_receiver.y;
      var tmp_2;
      if (tmp73_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp73_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function DiceView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.g30_1 = $elementRef;
    this.h30_1 = $draggable;
    this.i30_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(DiceView$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(DiceView$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(DiceView$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp74_safe_receiver = this.g30_1.current;
          if (tmp74_safe_receiver == null)
            null;
          else {
            this.h30_1.setNodeRef(tmp74_safe_receiver);
          }
          var tmp75_safe_receiver = this.g30_1.current;
          if (tmp75_safe_receiver == null)
            null;
          else {
            this.i30_1.setNodeRef(tmp75_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(DiceView$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new DiceView$lambda$lambda$slambda(this.g30_1, this.h30_1, this.i30_1, completion);
    i.j30_1 = $this$useEffect;
    return i;
  };
  function DiceView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new DiceView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function DiceView$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function DiceView$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function DiceView$lambda$lambda_0($props, $elementRef, $style, $draggable, $droppable) {
    return function ($this$bgwDiceView) {
      $this$bgwDiceView.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwDiceView.className = 'diceView';
      $this$bgwDiceView.ref = $elementRef;
      useEffect(DiceView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwDiceView.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = DiceView$lambda$lambda$lambda($props);
      addChild($this$bgwDiceView, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwDiceView.onPointerDown = DiceView$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      applyCommonEventHandlers($this$bgwDiceView, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwDiceView['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwDiceView['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwDiceView['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwDiceView['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_DiceView_kt_hw14cy;
  function _init_properties_DiceView_kt__i09gcs() {
    if (!properties_initialized_DiceView_kt_hw14cy) {
      properties_initialized_DiceView_kt_hw14cy = true;
      DiceView = FC(DiceView$lambda);
    }
  }
  function get_HexagonView() {
    _init_properties_HexagonView_kt__nb8dyr();
    return HexagonView;
  }
  var HexagonView;
  function cssBuilderIntern_6(_this__u8e3s4, componentViewData) {
    _init_properties_HexagonView_kt__nb8dyr();
    cssBuilder(_this__u8e3s4, componentViewData);
    // Inline function 'web.cssom.JustifyContent.Companion.center' call
    _this__u8e3s4.justifyContent = 'center';
    // Inline function 'web.cssom.AlignItems.Companion.center' call
    _this__u8e3s4.alignItems = 'center';
  }
  function HexagonView$lambda($this$FC, props) {
    _init_properties_HexagonView_kt__nb8dyr();
    var draggable = useDraggable(new HexagonView$1$draggable$1(props));
    var droppable = useDroppable(new HexagonView$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.gamecomponentviews.bgwHexagonView' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_hexagon_view';
    var block = HexagonView$lambda$lambda(props, elementRef, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function HexagonView$1$draggable$1($props) {
    this.k30_1 = $props.data.a1s_1;
    this.l30_1 = !$props.data.p1s_1;
  }
  protoOf(HexagonView$1$draggable$1).r2v = function (_set____db54di) {
    this.k30_1 = _set____db54di;
  };
  protoOf(HexagonView$1$draggable$1).r2o = function () {
    return this.k30_1;
  };
  protoOf(HexagonView$1$draggable$1).s2v = function (_set____db54di) {
    this.l30_1 = _set____db54di;
  };
  protoOf(HexagonView$1$draggable$1).t2v = function () {
    return this.l30_1;
  };
  function HexagonView$1$droppable$1($props) {
    this.m30_1 = $props.data.a1s_1;
    this.n30_1 = !$props.data.r1s_1;
  }
  protoOf(HexagonView$1$droppable$1).r2v = function (_set____db54di) {
    this.m30_1 = _set____db54di;
  };
  protoOf(HexagonView$1$droppable$1).r2o = function () {
    return this.m30_1;
  };
  protoOf(HexagonView$1$droppable$1).s2v = function (_set____db54di) {
    this.n30_1 = _set____db54di;
  };
  protoOf(HexagonView$1$droppable$1).t2v = function () {
    return this.n30_1;
  };
  function HexagonView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.w30_1 = $elementRef;
    this.x30_1 = $draggable;
    this.y30_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(HexagonView$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(HexagonView$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(HexagonView$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp76_safe_receiver = this.w30_1.current;
          if (tmp76_safe_receiver == null)
            null;
          else {
            this.x30_1.setNodeRef(tmp76_safe_receiver);
          }
          var tmp77_safe_receiver = this.w30_1.current;
          if (tmp77_safe_receiver == null)
            null;
          else {
            this.y30_1.setNodeRef(tmp77_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(HexagonView$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new HexagonView$lambda$lambda$slambda(this.w30_1, this.x30_1, this.y30_1, completion);
    i.z30_1 = $this$useEffect;
    return i;
  };
  function HexagonView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new HexagonView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function HexagonView$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function HexagonView$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function HexagonView$lambda$lambda($props, $elementRef, $draggable, $droppable) {
    return function ($this$bgwHexagonView) {
      $this$bgwHexagonView.tabIndex = 0;
      $this$bgwHexagonView.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonView.className = 'hexagonView';
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonView['aria-details'] = 'hex-' + $props.data.p2d_1;
      $this$bgwHexagonView.ref = $elementRef;
      useEffect(HexagonView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.gamecomponentviews.HexagonView.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_6(this_0, $props.data);
      if ($props.data.p2d_1 === 'pointy_top') {
        // Inline function 'web.cssom.em' call
        // Inline function 'kotlin.math.sqrt' call
        var this_1 = Math.sqrt(3.0) * $props.data.o2d_1;
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_0.width = toString_0(this_1) + 'em';
        // Inline function 'web.cssom.times' call
        // Inline function 'web.cssom.em' call
        var this_2 = $props.data.o2d_1;
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var other = toString_0(this_2) + 'em';
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_0.height = 'calc(' + toString_0(2) + ' * ' + toString_0(other) + ')';
      } else {
        // Inline function 'web.cssom.times' call
        // Inline function 'web.cssom.em' call
        var this_3 = $props.data.o2d_1;
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var other_0 = toString_0(this_3) + 'em';
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_0.width = 'calc(' + toString_0(2) + ' * ' + toString_0(other_0) + ')';
        // Inline function 'web.cssom.em' call
        // Inline function 'kotlin.math.sqrt' call
        var this_4 = Math.sqrt(3.0) * $props.data.o2d_1;
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_0.height = toString_0(this_4) + 'em';
      }
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp78_safe_receiver = $draggable.transform;
      var tmp79_safe_receiver = tmp78_safe_receiver == null ? null : tmp78_safe_receiver.x;
      var tmp;
      if (tmp79_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp79_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp80_safe_receiver = $draggable.transform;
      var tmp81_safe_receiver = tmp80_safe_receiver == null ? null : tmp80_safe_receiver.y;
      var tmp_2;
      if (tmp81_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp81_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      this_0.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      this_0.cursor = tmp_4;
      $this$bgwHexagonView.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_5 = 'bgw_visuals';
      var block = HexagonView$lambda$lambda$lambda($props);
      addChild($this$bgwHexagonView, this_5, block);
      var tmp_5;
      if ($props.data.p1s_1) {
        $this$bgwHexagonView.onPointerDown = HexagonView$lambda$lambda$lambda_0($draggable, $props);
        tmp_5 = Unit_instance;
      }
      applyCommonEventHandlers($this$bgwHexagonView, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonView['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonView['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonView['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwHexagonView['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_HexagonView_kt_auhlhn;
  function _init_properties_HexagonView_kt__nb8dyr() {
    if (!properties_initialized_HexagonView_kt_auhlhn) {
      properties_initialized_HexagonView_kt_auhlhn = true;
      HexagonView = FC(HexagonView$lambda);
    }
  }
  function get_TokenView() {
    _init_properties_TokenView_kt__yptbck();
    return TokenView;
  }
  var TokenView;
  function cssBuilderIntern_7(_this__u8e3s4, componentViewData) {
    _init_properties_TokenView_kt__yptbck();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function TokenView$lambda($this$FC, props) {
    _init_properties_TokenView_kt__yptbck();
    var draggable = useDraggable(new TokenView$1$draggable$1(props));
    var droppable = useDroppable(new TokenView$1$droppable$1(props));
    var style = TokenView$lambda$lambda(props, draggable);
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.gamecomponentviews.bgwTokenView' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_token_view';
    var block = TokenView$lambda$lambda_0(props, elementRef, style, draggable, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function TokenView$1$draggable$1($props) {
    this.a31_1 = $props.data.a1s_1;
    this.b31_1 = !$props.data.p1s_1;
  }
  protoOf(TokenView$1$draggable$1).r2v = function (_set____db54di) {
    this.a31_1 = _set____db54di;
  };
  protoOf(TokenView$1$draggable$1).r2o = function () {
    return this.a31_1;
  };
  protoOf(TokenView$1$draggable$1).s2v = function (_set____db54di) {
    this.b31_1 = _set____db54di;
  };
  protoOf(TokenView$1$draggable$1).t2v = function () {
    return this.b31_1;
  };
  function TokenView$1$droppable$1($props) {
    this.c31_1 = $props.data.a1s_1;
    this.d31_1 = !$props.data.r1s_1;
  }
  protoOf(TokenView$1$droppable$1).r2v = function (_set____db54di) {
    this.c31_1 = _set____db54di;
  };
  protoOf(TokenView$1$droppable$1).r2o = function () {
    return this.c31_1;
  };
  protoOf(TokenView$1$droppable$1).s2v = function (_set____db54di) {
    this.d31_1 = _set____db54di;
  };
  protoOf(TokenView$1$droppable$1).t2v = function () {
    return this.d31_1;
  };
  function TokenView$lambda$lambda($props, $draggable) {
    return function (_this__u8e3s4) {
      cssBuilderIntern_7(_this__u8e3s4, $props.data);
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp82_safe_receiver = $draggable.transform;
      var tmp83_safe_receiver = tmp82_safe_receiver == null ? null : tmp82_safe_receiver.x;
      var tmp;
      if (tmp83_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp = toString_0(tmp83_safe_receiver) + 'px';
      }
      var tmp0_elvis_lhs = tmp;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = toString_0(0) + 'px';
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var tmp_1 = toString_0(tmp_0);
      var tmp84_safe_receiver = $draggable.transform;
      var tmp85_safe_receiver = tmp84_safe_receiver == null ? null : tmp84_safe_receiver.y;
      var tmp_2;
      if (tmp85_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp85_safe_receiver) + 'px';
      }
      var tmp1_elvis_lhs = tmp_2;
      var tmp_3;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'web.cssom.px' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_3 = toString_0(0) + 'px';
      } else {
        tmp_3 = tmp1_elvis_lhs;
      }
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.translate = tmp_1 + ' ' + toString_0(tmp_3);
      var tmp_4;
      if ($props.data.p1s_1) {
        // Inline function 'web.cssom.Cursor.Companion.pointer' call
        tmp_4 = 'pointer';
      } else {
        // Inline function 'web.cssom.Cursor.Companion.default' call
        tmp_4 = 'default';
      }
      _this__u8e3s4.cursor = tmp_4;
      return Unit_instance;
    };
  }
  function TokenView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation) {
    this.m31_1 = $elementRef;
    this.n31_1 = $draggable;
    this.o31_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(TokenView$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(TokenView$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(TokenView$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp86_safe_receiver = this.m31_1.current;
          if (tmp86_safe_receiver == null)
            null;
          else {
            this.n31_1.setNodeRef(tmp86_safe_receiver);
          }
          var tmp87_safe_receiver = this.m31_1.current;
          if (tmp87_safe_receiver == null)
            null;
          else {
            this.o31_1.setNodeRef(tmp87_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(TokenView$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new TokenView$lambda$lambda$slambda(this.m31_1, this.n31_1, this.o31_1, completion);
    i.p31_1 = $this$useEffect;
    return i;
  };
  function TokenView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, resultContinuation) {
    var i = new TokenView$lambda$lambda$slambda($elementRef, $draggable, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function TokenView$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function TokenView$lambda$lambda$lambda_0($draggable, $props) {
    return function (it) {
      $draggable.listeners.onPointerDown(it, $props.data.a1s_1);
      return Unit_instance;
    };
  }
  function TokenView$lambda$lambda_0($props, $elementRef, $style, $draggable, $droppable) {
    return function ($this$bgwTokenView) {
      $this$bgwTokenView.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTokenView.className = 'tokenView';
      $this$bgwTokenView.ref = $elementRef;
      useEffect(TokenView$lambda$lambda$slambda_0($elementRef, $draggable, $droppable, null));
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      $style(this_0);
      $this$bgwTokenView.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = TokenView$lambda$lambda$lambda($props);
      addChild($this$bgwTokenView, this_1, block);
      var tmp;
      if ($props.data.p1s_1) {
        $this$bgwTokenView.onPointerDown = TokenView$lambda$lambda$lambda_0($draggable, $props);
        tmp = Unit_instance;
      }
      applyCommonEventHandlers($this$bgwTokenView, $props.data);
      // Inline function 'react.dom.aria.ariaDescribedBy' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTokenView['aria-describedby'] = $draggable.attributes['aria-describedby'];
      // Inline function 'react.dom.aria.ariaDisabled' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTokenView['aria-disabled'] = $draggable.attributes['aria-disabled'];
      // Inline function 'react.dom.aria.ariaPressed' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTokenView['aria-pressed'] = $draggable.attributes['aria-pressed'];
      // Inline function 'react.dom.aria.ariaRoleDescription' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTokenView['aria-roledescription'] = $draggable.attributes['aria-roledescription'];
      return Unit_instance;
    };
  }
  var properties_initialized_TokenView_kt_hm7kgi;
  function _init_properties_TokenView_kt__yptbck() {
    if (!properties_initialized_TokenView_kt_hm7kgi) {
      properties_initialized_TokenView_kt_hm7kgi = true;
      TokenView = FC(TokenView$lambda);
    }
  }
  function get_CameraPane() {
    _init_properties_CameraPane_kt__2fgyh9();
    return CameraPane;
  }
  var CameraPane;
  function cssBuilderIntern_8(_this__u8e3s4, componentViewData) {
    _init_properties_CameraPane_kt__2fgyh9();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function convertToRem(px) {
    _init_properties_CameraPane_kt__2fgyh9();
    var tmp88_safe_receiver = document.getElementById('bgw-root');
    var tmp;
    if (tmp88_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.convertToRem.<anonymous>' call
      tmp = toDouble(replace(getComputedStyle(tmp88_safe_receiver).fontSize, 'px', ''));
    }
    var currentRem = tmp;
    return px * ensureNotNull(currentRem);
  }
  function convertToPx(rem) {
    _init_properties_CameraPane_kt__2fgyh9();
    var tmp89_safe_receiver = document.getElementById('bgw-root');
    var tmp;
    if (tmp89_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.convertToPx.<anonymous>' call
      tmp = toDouble(replace(getComputedStyle(tmp89_safe_receiver).fontSize, 'px', ''));
    }
    var currentRem = tmp;
    return rem / ensureNotNull(currentRem);
  }
  function CameraPane$lambda($this$FC, props) {
    _init_properties_CameraPane_kt__2fgyh9();
    var cameraPaneRef = useRef(null);
    var tmp90_safe_receiver = props.data.l2a_1;
    var tmp91_safe_receiver = tmp90_safe_receiver == null ? null : tmp90_safe_receiver.d1s_1;
    var tmp0_elvis_lhs = tmp91_safe_receiver == null ? null : tmp91_safe_receiver;
    var targetWidth = tmp0_elvis_lhs == null ? 0.0 : tmp0_elvis_lhs;
    var tmp92_safe_receiver = props.data.l2a_1;
    var tmp93_safe_receiver = tmp92_safe_receiver == null ? null : tmp92_safe_receiver.e1s_1;
    var tmp1_elvis_lhs = tmp93_safe_receiver == null ? null : tmp93_safe_receiver;
    var targetHeight = tmp1_elvis_lhs == null ? 0.0 : tmp1_elvis_lhs;
    var paneWidth = props.data.d1s_1;
    var paneHeight = props.data.e1s_1;
    var snapPaneWidth = paneWidth / targetWidth;
    var snapPaneHeight = paneHeight / targetHeight;
    var targetAspect = targetWidth / targetHeight;
    var paneAspect = paneWidth / paneHeight;
    var isTargetWide = targetAspect >= 1.0;
    var isPaneWide = paneAspect >= 1.0;
    var tmp;
    if (isTargetWide && isPaneWide) {
      tmp = targetAspect >= paneAspect ? snapPaneHeight : snapPaneWidth;
    } else if (isTargetWide && !isPaneWide) {
      tmp = snapPaneHeight;
    } else if (!isTargetWide && isPaneWide) {
      tmp = snapPaneWidth;
    } else {
      tmp = targetAspect >= paneAspect ? snapPaneHeight : snapPaneWidth;
    }
    var minZoom = tmp;
    // Inline function 'kotlin.comparisons.maxOf' call
    var initialZoom = Math.max(minZoom, 1.0);
    useEffect(CameraPane$lambda$slambda_0(props, cameraPaneRef, minZoom, targetWidth, targetHeight, null));
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.layoutviews.bgwCameraTarget' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_camera_target';
    var block = CameraPane$lambda$lambda(props);
    addChild($this$FC, this_0, block);
    // Inline function 'react.ChildrenBuilder.invoke' call
    var this_1 = TransformWrapper;
    var block_0 = CameraPane$lambda$lambda_0(props, minZoom, initialZoom, cameraPaneRef);
    addChild($this$FC, this_1, block_0);
    return Unit_instance;
  }
  function CameraPane$lambda$slambda($props, $cameraPaneRef, $minZoom, $targetWidth, $targetHeight, resultContinuation) {
    this.y31_1 = $props;
    this.z31_1 = $cameraPaneRef;
    this.a32_1 = $minZoom;
    this.b32_1 = $targetWidth;
    this.c32_1 = $targetHeight;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(CameraPane$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(CameraPane$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(CameraPane$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var panSmooth = this.y31_1.data.p2a_1.h2q_1;
          var panTime = panSmooth ? 300 : 0;
          var panBy = this.y31_1.data.p2a_1.i2q_1;
          if (!(this.z31_1.current == null) && this.y31_1.data.p2a_1.k2q_1) {
            var ctx = ensureNotNull(this.z31_1.current);
            var currentX = ctx.instance.transformState.positionX;
            var currentY = ctx.instance.transformState.positionY;
            var tmp0_elvis_lhs = this.y31_1.data.p2a_1.j2q_1;
            var panZoom = tmp0_elvis_lhs == null ? ctx.instance.transformState.scale : tmp0_elvis_lhs;
            if (panZoom < this.a32_1 && this.y31_1.data.o2a_1)
              panZoom = this.a32_1;
            var containerWidth = this.y31_1.data.d1s_1;
            var containerHeight = this.y31_1.data.e1s_1;
            var targetWidthInternal = this.b32_1 * panZoom;
            var targetHeightInternal = this.c32_1 * panZoom;
            var minX = convertToRem(containerWidth - targetWidthInternal);
            var minY = convertToRem(containerHeight - targetHeightInternal);
            var maxX = 0.0;
            var maxY = 0.0;
            if (this.y31_1.data.o2a_1) {
              ctx.setTransform(coerceIn(currentX, minX, maxX), coerceIn(currentY, minY, maxY), panZoom, panTime);
            } else {
              ctx.setTransform(currentX, currentY, panZoom, panTime);
            }
            var actualXOffset = this.y31_1.data.o2a_1 ? convertToPx(coerceIn(currentX, minX, maxX)) : convertToPx(currentX);
            var actualYOffset = this.y31_1.data.o2a_1 ? convertToPx(coerceIn(currentY, minY, maxY)) : convertToPx(currentY);
            var tmp_0 = JCEFEventDispatcher_getInstance();
            var this_0 = new TransformChangedEventData(ctx.instance.transformState.scale, new Pair(actualXOffset, actualYOffset));
            this_0.s2o(this.y31_1.data.a1s_1);
            tmp_0.k2u(this_0);
          } else if (!(this.z31_1.current == null) && !(this.y31_1.data.p2a_1.g2q_1 == null)) {
            var ctx_0 = ensureNotNull(this.z31_1.current);
            var currentScale = ctx_0.instance.transformState.scale;
            var tmp1_elvis_lhs = this.y31_1.data.p2a_1.j2q_1;
            var panZoom_0 = tmp1_elvis_lhs == null ? currentScale : tmp1_elvis_lhs;
            if (panZoom_0 < this.a32_1 && this.y31_1.data.o2a_1)
              panZoom_0 = this.a32_1;
            var containerWidth_0 = this.y31_1.data.d1s_1;
            var containerHeight_0 = this.y31_1.data.e1s_1;
            var targetWidthInternal_0 = this.b32_1 * panZoom_0;
            var targetHeightInternal_0 = this.c32_1 * panZoom_0;
            var minX_0 = convertToRem(containerWidth_0 - targetWidthInternal_0);
            var minY_0 = convertToRem(containerHeight_0 - targetHeightInternal_0);
            var maxX_0 = 0.0;
            var maxY_0 = 0.0;
            if (panBy) {
              var panByX = convertToRem(ensureNotNull(this.y31_1.data.p2a_1.g2q_1).qc_1) * panZoom_0;
              var panByY = convertToRem(ensureNotNull(this.y31_1.data.p2a_1.g2q_1).rc_1) * panZoom_0;
              if (this.y31_1.data.o2a_1) {
                var newX = coerceIn(ctx_0.instance.transformState.positionX + panByX, minX_0, maxX_0);
                var newY = coerceIn(ctx_0.instance.transformState.positionY + panByY, minY_0, maxY_0);
                ctx_0.setTransform(newX, newY, panZoom_0, panTime);
              } else {
                var newX_0 = ctx_0.instance.transformState.positionX + panByX;
                var newY_0 = ctx_0.instance.transformState.positionY + panByY;
                ctx_0.setTransform(newX_0, newY_0, panZoom_0, panTime);
              }
            } else {
              var panToX = convertToRem(ensureNotNull(this.y31_1.data.p2a_1.g2q_1).qc_1) * panZoom_0;
              var panToY = convertToRem(ensureNotNull(this.y31_1.data.p2a_1.g2q_1).rc_1) * panZoom_0;
              panToX = panToX + convertToRem(this.y31_1.data.d1s_1 / 2.0);
              panToY = panToY + convertToRem(this.y31_1.data.e1s_1 / 2.0);
              if (this.y31_1.data.o2a_1) {
                var clampedX = coerceIn(panToX, minX_0, maxX_0);
                var clampedY = coerceIn(panToY, minY_0, maxY_0);
                ctx_0.setTransform(clampedX, clampedY, panZoom_0, panTime);
              } else {
                ctx_0.setTransform(panToX, panToY, panZoom_0, panTime);
              }
            }
            var currentX_0 = ctx_0.instance.transformState.positionX;
            var currentY_0 = ctx_0.instance.transformState.positionY;
            var actualXOffset_0 = convertToPx(currentX_0);
            var actualYOffset_0 = convertToPx(currentY_0);
            var tmp_1 = JCEFEventDispatcher_getInstance();
            var this_1 = new TransformChangedEventData(ctx_0.instance.transformState.scale, new Pair(actualXOffset_0, actualYOffset_0));
            this_1.s2o(this.y31_1.data.a1s_1);
            tmp_1.k2u(this_1);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(CameraPane$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new CameraPane$lambda$slambda(this.y31_1, this.z31_1, this.a32_1, this.b32_1, this.c32_1, completion);
    i.d32_1 = $this$useEffect;
    return i;
  };
  function CameraPane$lambda$slambda_0($props, $cameraPaneRef, $minZoom, $targetWidth, $targetHeight, resultContinuation) {
    var i = new CameraPane$lambda$slambda($props, $cameraPaneRef, $minZoom, $targetWidth, $targetHeight, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function CameraPane$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function CameraPane$lambda$lambda($props) {
    return function ($this$bgwCameraTarget) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_8(this_0, $props.data);
      $this$bgwCameraTarget.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = CameraPane$lambda$lambda$lambda($props);
      addChild($this$bgwCameraTarget, this_1, block);
      return Unit_instance;
    };
  }
  function CameraPane$lambda$lambda$lambda_0($props) {
    return function (ctx) {
      var currentX = ctx.instance.transformState.positionX;
      var currentY = ctx.instance.transformState.positionY;
      var actualXOffset = convertToPx(currentX);
      var actualYOffset = convertToPx(currentY);
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new TransformChangedEventData(ctx.instance.transformState.scale, new Pair(actualXOffset, actualYOffset));
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function CameraPane$lambda$lambda$lambda_1($props) {
    return function (ctx) {
      var tmp;
      if (!$props.data.o2a_1) {
        var currentX = ctx.instance.transformState.positionX;
        var currentY = ctx.instance.transformState.positionY;
        var tmp94_safe_receiver = $props.data.l2a_1;
        var tmp95_safe_receiver = tmp94_safe_receiver == null ? null : tmp94_safe_receiver.d1s_1;
        var tmp_0;
        if (tmp95_safe_receiver == null) {
          tmp_0 = null;
        } else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp_0 = convertToRem(tmp95_safe_receiver) * ctx.instance.transformState.scale;
        }
        var tmp0_elvis_lhs = tmp_0;
        var targetWidth = tmp0_elvis_lhs == null ? 0.0 : tmp0_elvis_lhs;
        var tmp96_safe_receiver = $props.data.l2a_1;
        var tmp97_safe_receiver = tmp96_safe_receiver == null ? null : tmp96_safe_receiver.e1s_1;
        var tmp_1;
        if (tmp97_safe_receiver == null) {
          tmp_1 = null;
        } else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
          tmp_1 = convertToRem(tmp97_safe_receiver) * ctx.instance.transformState.scale;
        }
        var tmp1_elvis_lhs = tmp_1;
        var targetHeight = tmp1_elvis_lhs == null ? 0.0 : tmp1_elvis_lhs;
        var paneWidth = convertToRem($props.data.d1s_1);
        var paneHeight = convertToRem($props.data.e1s_1);
        var minX = -targetWidth + convertToRem(50.0);
        var minY = -targetHeight + convertToRem(50.0);
        var maxX = paneWidth - convertToRem(50.0);
        var maxY = paneHeight - convertToRem(50.0);
        var tmp_2;
        if (currentX < minX && currentY < minY) {
          tmp_2 = ctx.setTransform(minX, minY, ctx.instance.transformState.scale, 300);
        } else if (currentX > maxX && currentY > maxY) {
          tmp_2 = ctx.setTransform(maxX, maxY, ctx.instance.transformState.scale, 300);
        } else if (currentX < minX && currentY > maxY) {
          tmp_2 = ctx.setTransform(minX, maxY, ctx.instance.transformState.scale, 300);
        } else if (currentX > maxX && currentY < minY) {
          tmp_2 = ctx.setTransform(maxX, minY, ctx.instance.transformState.scale, 300);
        } else {
          if (currentX < minX) {
            ctx.setTransform(minX, currentY, ctx.instance.transformState.scale, 300);
          } else if (currentX > maxX) {
            ctx.setTransform(maxX, currentY, ctx.instance.transformState.scale, 300);
          }
          var tmp_3;
          if (currentY < minY) {
            tmp_3 = ctx.setTransform(currentX, minY, ctx.instance.transformState.scale, 300);
          } else if (currentY > maxY) {
            tmp_3 = ctx.setTransform(currentX, maxY, ctx.instance.transformState.scale, 300);
          }
          tmp_2 = tmp_3;
        }
        tmp = tmp_2;
      }
      var tmp_4 = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new TransformChangedEventData(ctx.instance.transformState.scale, new Pair(convertToPx(ctx.instance.transformState.positionX), convertToPx(ctx.instance.transformState.positionY)));
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp_4.k2u(this_0);
      return Unit_instance;
    };
  }
  function CameraPane$lambda$lambda$lambda$lambda($props) {
    return function ($this$bgwCameraTarget) {
      var tmp98_safe_receiver = $props.data.l2a_1;
      $this$bgwCameraTarget.id = plus(tmp98_safe_receiver == null ? null : tmp98_safe_receiver.a1s_1, 'Target');
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCameraTarget.className = 'target';
      var tmp99_safe_receiver = $props.data.l2a_1;
      var tmp;
      if (tmp99_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        tmp = LayoutNodeBuilder_instance.n2u(tmp99_safe_receiver);
      }
      var this_0 = tmp;
      addChildNode($this$bgwCameraTarget, this_0);
      return Unit_instance;
    };
  }
  function CameraPane$lambda$lambda$lambda_2($props) {
    return function ($this$TransformComponent) {
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      var this_1 = $props.data.d1s_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(this_1) + 'em';
      // Inline function 'web.cssom.em' call
      var this_2 = $props.data.e1s_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(this_2) + 'em';
      // Inline function 'web.cssom.em' call
      var this_3 = $props.data.b1s_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(this_3) + 'em';
      // Inline function 'web.cssom.em' call
      var this_4 = $props.data.c1s_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(this_4) + 'em';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      $this$TransformComponent.wrapperStyle = this_0;
      var tmp;
      if (!($props.data.l2a_1 == null)) {
        // Inline function 'tools.aqua.bgw.elements.layoutviews.bgwCameraTarget' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var this_5 = 'bgw_camera_target';
        var block = CameraPane$lambda$lambda$lambda$lambda($props);
        addChild($this$TransformComponent, this_5, block);
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function CameraPane$lambda$lambda_0($props, $minZoom, $initialZoom, $cameraPaneRef) {
    return function ($this$TransformWrapper) {
      $this$TransformWrapper.centerZoomedOut = $props.data.o2a_1;
      $this$TransformWrapper.disablePadding = true;
      $this$TransformWrapper.smooth = false;
      $this$TransformWrapper.limitToBounds = $props.data.o2a_1;
      $this$TransformWrapper.centerOnInit = true;
      $this$TransformWrapper.minScale = $props.data.o2a_1 ? $minZoom : 0.1;
      $this$TransformWrapper.maxScale = 4.0;
      $this$TransformWrapper.initialScale = $props.data.o2a_1 ? $initialZoom : 1.0;
      $this$TransformWrapper.disabled = !$props.data.m2a_1;
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>' call
      this_0.step = 0.1;
      $this$TransformWrapper.wheel = this_0;
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_1 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>' call
      this_1.disabled = false;
      this_1.wheelPanning = false;
      this_1.velocityDisabled = true;
      this_1.allowLeftClickPan = $props.data.n2a_1 === 'left_button';
      this_1.allowMiddleClickPan = $props.data.n2a_1 === 'mouse_wheel';
      this_1.allowRightClickPan = $props.data.n2a_1 === 'right_button';
      $this$TransformWrapper.panning = this_1;
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_2 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>' call
      this_2.disabled = true;
      $this$TransformWrapper.pinch = this_2;
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_3 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.CameraPane.<anonymous>.<anonymous>.<anonymous>' call
      this_3.disabled = true;
      $this$TransformWrapper.doubleClick = this_3;
      $this$TransformWrapper.onZoomStop = CameraPane$lambda$lambda$lambda_0($props);
      $this$TransformWrapper.onPanningStop = CameraPane$lambda$lambda$lambda_1($props);
      $this$TransformWrapper.ref = $cameraPaneRef;
      var this_4 = TransformComponent;
      var block = CameraPane$lambda$lambda$lambda_2($props);
      addChild($this$TransformWrapper, this_4, block);
      return Unit_instance;
    };
  }
  var properties_initialized_CameraPane_kt_co92nl;
  function _init_properties_CameraPane_kt__2fgyh9() {
    if (!properties_initialized_CameraPane_kt_co92nl) {
      properties_initialized_CameraPane_kt_co92nl = true;
      CameraPane = FC(CameraPane$lambda);
    }
  }
  function get_ReactGridPane() {
    _init_properties_GridPane_kt__ltetci();
    return ReactGridPane;
  }
  var ReactGridPane;
  function cssBuilderIntern_9(_this__u8e3s4, componentViewData) {
    _init_properties_GridPane_kt__ltetci();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function ReactGridPane$lambda($this$FC, props) {
    _init_properties_GridPane_kt__ltetci();
    var droppable = useDroppable(new ReactGridPane$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.layoutviews.bgwGridPane' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_grid_pane';
    var block = ReactGridPane$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ReactGridPane$1$droppable$1($props) {
    this.e32_1 = $props.data.a1s_1;
    this.f32_1 = !$props.data.r1s_1;
  }
  protoOf(ReactGridPane$1$droppable$1).r2v = function (_set____db54di) {
    this.e32_1 = _set____db54di;
  };
  protoOf(ReactGridPane$1$droppable$1).r2o = function () {
    return this.e32_1;
  };
  protoOf(ReactGridPane$1$droppable$1).s2v = function (_set____db54di) {
    this.f32_1 = _set____db54di;
  };
  protoOf(ReactGridPane$1$droppable$1).t2v = function () {
    return this.f32_1;
  };
  function ReactGridPane$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.o32_1 = $elementRef;
    this.p32_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ReactGridPane$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ReactGridPane$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ReactGridPane$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp100_safe_receiver = this.o32_1.current;
          if (tmp100_safe_receiver == null)
            null;
          else {
            this.p32_1.setNodeRef(tmp100_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ReactGridPane$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ReactGridPane$lambda$lambda$slambda(this.o32_1, this.p32_1, completion);
    i.q32_1 = $this$useEffect;
    return i;
  };
  function ReactGridPane$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new ReactGridPane$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ReactGridPane$lambda$lambda$slambda_1($props, resultContinuation) {
    this.z32_1 = $props;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ReactGridPane$lambda$lambda$slambda_1).m2v = function ($this$useLayoutEffect, $completion) {
    var tmp = this.n2v($this$useLayoutEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ReactGridPane$lambda$lambda$slambda_1).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ReactGridPane$lambda$lambda$slambda_1).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          println('useLayoutEffect' + this.z32_1.data.a1s_1 + (' - ' + this.z32_1.data.o1s_1));
          var tmp101_safe_receiver = document.getElementById(this.z32_1.data.a1s_1);
          if (tmp101_safe_receiver == null)
            null;
          else {
            var element = tmp101_safe_receiver;
            var width = convertToPx(element.offsetWidth);
            var height = convertToPx(element.offsetHeight);
            var x = this.z32_1.data.b1s_1 - width / 2;
            var y = this.z32_1.data.c1s_1 - height / 2;
            element.style.left = '' + x + 'em';
            element.style.top = '' + y + 'em';
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ReactGridPane$lambda$lambda$slambda_1).n2v = function ($this$useLayoutEffect, completion) {
    var i = new ReactGridPane$lambda$lambda$slambda_1(this.z32_1, completion);
    i.a33_1 = $this$useLayoutEffect;
    return i;
  };
  function ReactGridPane$lambda$lambda$slambda_2($props, resultContinuation) {
    var i = new ReactGridPane$lambda$lambda$slambda_1($props, resultContinuation);
    var l = function ($this$useLayoutEffect, $completion) {
      return i.m2v($this$useLayoutEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ReactGridPane$lambda$lambda$slambda_3($props, resultContinuation) {
    this.j33_1 = $props;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ReactGridPane$lambda$lambda$slambda_3).m2v = function ($this$useLayoutEffect, $completion) {
    var tmp = this.n2v($this$useLayoutEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ReactGridPane$lambda$lambda$slambda_3).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ReactGridPane$lambda$lambda$slambda_3).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          println('useLayoutEffect' + this.j33_1.data.a1s_1 + (' - ' + this.j33_1.data.o1s_1));
          var tmp102_safe_receiver = document.getElementById(this.j33_1.data.a1s_1);
          if (tmp102_safe_receiver == null)
            null;
          else {
            tmp102_safe_receiver.style.left = '' + this.j33_1.data.b1s_1 + 'em';
            tmp102_safe_receiver.style.top = '' + this.j33_1.data.c1s_1 + 'em';
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ReactGridPane$lambda$lambda$slambda_3).n2v = function ($this$useLayoutEffect, completion) {
    var i = new ReactGridPane$lambda$lambda$slambda_3(this.j33_1, completion);
    i.k33_1 = $this$useLayoutEffect;
    return i;
  };
  function ReactGridPane$lambda$lambda$slambda_4($props, resultContinuation) {
    var i = new ReactGridPane$lambda$lambda$slambda_3($props, resultContinuation);
    var l = function ($this$useLayoutEffect, $completion) {
      return i.m2v($this$useLayoutEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ReactGridPane$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function ReactGridPane$lambda$lambda$lambda$lambda($this$div) {
    _init_properties_GridPane_kt__ltetci();
    return Unit_instance;
  }
  function ReactGridPane$lambda$lambda$lambda_0($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.ReactGridPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.repeat' call
      var times = $props.data.d29_1;
      var value = minContent();
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.gridTemplateColumns = 'repeat(' + times + ',' + toString_0(value) + ')';
      // Inline function 'web.cssom.repeat' call
      var times_0 = $props.data.e29_1;
      var value_0 = minContent();
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.gridTemplateRows = 'repeat(' + times_0 + ',' + toString_0(value_0) + ')';
      // Inline function 'web.cssom.Display.Companion.grid' call
      this_0.display = 'grid';
      this_0.width = fit();
      this_0.height = fit();
      // Inline function 'web.cssom.em' call
      var this_1 = $props.data.f29_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.gap = toString_0(this_1) + 'em';
      $this$bgwContents.className = css(this_0);
      var tmp0_iterator = $props.data.g29_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.layoutviews.ReactGridPane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var component = element.m29_1;
        if (component == null) {
          // Inline function 'react.ChildrenBuilder.invoke' call
          // Inline function 'react.dom.html.ReactHTML.div' call
          // Inline function 'react.IntrinsicType' call
          // Inline function 'js.reflect.unsafeCast' call
          // Inline function 'kotlin.js.unsafeCast' call
          // Inline function 'kotlin.js.asDynamic' call
          var block = ReactGridPane$lambda$lambda$lambda$lambda;
          addChild($this$bgwContents, 'div', block);
        } else {
          // Inline function 'react.ChildrenBuilder.unaryPlus' call
          var this_2 = NodeBuilder_instance.p2u(element);
          addChildNode($this$bgwContents, this_2);
        }
      }
      return Unit_instance;
    };
  }
  function ReactGridPane$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwGridPane) {
      $this$bgwGridPane.tabIndex = 0;
      $this$bgwGridPane.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwGridPane.className = 'gridPane';
      $this$bgwGridPane.ref = $elementRef;
      useEffect(ReactGridPane$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.ReactGridPane.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_9(this_0, $props.data);
      this_0.width = fit();
      this_0.height = fit();
      if ($props.data.o1s_1) {
        var tmp = [listOf($props.data)];
        useLayoutEffect(tmp, ReactGridPane$lambda$lambda$slambda_2($props, null));
      } else {
        var tmp_0 = [listOf($props.data)];
        useLayoutEffect(tmp_0, ReactGridPane$lambda$lambda$slambda_4($props, null));
      }
      $this$bgwGridPane.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = ReactGridPane$lambda$lambda$lambda($props);
      addChild($this$bgwGridPane, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = ReactGridPane$lambda$lambda$lambda_0($props);
      addChild($this$bgwGridPane, this_2, block_0);
      applyCommonEventHandlers($this$bgwGridPane, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_GridPane_kt_prqer4;
  function _init_properties_GridPane_kt__ltetci() {
    if (!properties_initialized_GridPane_kt_prqer4) {
      properties_initialized_GridPane_kt_prqer4 = true;
      ReactGridPane = FC(ReactGridPane$lambda);
    }
  }
  function get_Pane() {
    _init_properties_Pane_kt__fu0u0o();
    return Pane;
  }
  var Pane;
  function cssBuilderIntern_10(_this__u8e3s4, componentViewData) {
    _init_properties_Pane_kt__fu0u0o();
    cssBuilder(_this__u8e3s4, componentViewData);
  }
  function Pane$lambda($this$FC, props) {
    _init_properties_Pane_kt__fu0u0o();
    var droppable = useDroppable(new Pane$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.layoutviews.bgwPane' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_pane';
    var block = Pane$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function Pane$1$droppable$1($props) {
    this.l33_1 = $props.data.a1s_1;
    this.m33_1 = !$props.data.r1s_1;
  }
  protoOf(Pane$1$droppable$1).r2v = function (_set____db54di) {
    this.l33_1 = _set____db54di;
  };
  protoOf(Pane$1$droppable$1).r2o = function () {
    return this.l33_1;
  };
  protoOf(Pane$1$droppable$1).s2v = function (_set____db54di) {
    this.m33_1 = _set____db54di;
  };
  protoOf(Pane$1$droppable$1).t2v = function () {
    return this.m33_1;
  };
  function Pane$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.v33_1 = $elementRef;
    this.w33_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(Pane$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(Pane$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(Pane$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp103_safe_receiver = this.v33_1.current;
          if (tmp103_safe_receiver == null)
            null;
          else {
            this.w33_1.setNodeRef(tmp103_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(Pane$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new Pane$lambda$lambda$slambda(this.v33_1, this.w33_1, completion);
    i.x33_1 = $this$useEffect;
    return i;
  };
  function Pane$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new Pane$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function Pane$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function Pane$lambda$lambda$lambda_0($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      var tmp0_iterator = $props.data.f28_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.layoutviews.Pane.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.unaryPlus' call
        var this_0 = NodeBuilder_instance.o2u(element);
        addChildNode($this$bgwContents, this_0);
      }
      return Unit_instance;
    };
  }
  function Pane$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwPane) {
      $this$bgwPane.tabIndex = 0;
      $this$bgwPane.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwPane.className = 'pane';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.layoutviews.Pane.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_10(this_0, $props.data);
      $this$bgwPane.className = css(this_0);
      $this$bgwPane.ref = $elementRef;
      useEffect(Pane$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = Pane$lambda$lambda$lambda($props);
      addChild($this$bgwPane, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_contents';
      var block_0 = Pane$lambda$lambda$lambda_0($props);
      addChild($this$bgwPane, this_2, block_0);
      applyCommonEventHandlers($this$bgwPane, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_Pane_kt_a6sv1m;
  function _init_properties_Pane_kt__fu0u0o() {
    if (!properties_initialized_Pane_kt_a6sv1m) {
      properties_initialized_Pane_kt_a6sv1m = true;
      Pane = FC(Pane$lambda);
    }
  }
  function get_Button() {
    _init_properties_Button_kt__2845m6();
    return Button;
  }
  var Button;
  function cssBuilderIntern_11(_this__u8e3s4, componentViewData) {
    _init_properties_Button_kt__2845m6();
    cssBuilder_1(_this__u8e3s4, componentViewData);
    // Inline function 'web.cssom.Cursor.Companion.pointer' call
    _this__u8e3s4.cursor = 'pointer';
    // Inline function 'csstype.SimplePseudosRuleBuilder.hover' call
    // Inline function 'csstype.RuleBuilder.invoke' call
    // Inline function 'csstype.RuleBuilder.invoke' call
    // Inline function 'web.cssom.Selector' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'js.objects.jso' call
    // Inline function 'kotlin.apply' call
    // Inline function 'js.objects.jso' call
    var this_0 = {};
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.cssBuilderIntern.<anonymous>' call
    // Inline function 'csstype.RuleBuilder.invoke' call
    // Inline function 'csstype.RuleBuilder.invoke' call
    // Inline function 'web.cssom.Selector' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_1 = '> .visuals';
    // Inline function 'js.objects.jso' call
    // Inline function 'kotlin.apply' call
    // Inline function 'js.objects.jso' call
    var this_2 = {};
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.cssBuilderIntern.<anonymous>.<anonymous>' call
    // Inline function 'web.cssom.brightness' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    this_2.filter = 'brightness(' + toString_0(1.1) + ')';
    this_0[this_1] = this_2;
    _this__u8e3s4[':hover'] = this_0;
  }
  function cssTextBuilderIntern(_this__u8e3s4, componentViewData) {
    _init_properties_Button_kt__2845m6();
    cssTextBuilder(_this__u8e3s4, componentViewData);
  }
  function Button$lambda($this$FC, props) {
    _init_properties_Button_kt__2845m6();
    var droppable = useDroppable(new Button$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwButton' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_button';
    var block = Button$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function Button$1$droppable$1($props) {
    this.y33_1 = $props.data.a1s_1;
    this.z33_1 = !$props.data.r1s_1;
  }
  protoOf(Button$1$droppable$1).r2v = function (_set____db54di) {
    this.y33_1 = _set____db54di;
  };
  protoOf(Button$1$droppable$1).r2o = function () {
    return this.y33_1;
  };
  protoOf(Button$1$droppable$1).s2v = function (_set____db54di) {
    this.z33_1 = _set____db54di;
  };
  protoOf(Button$1$droppable$1).t2v = function () {
    return this.z33_1;
  };
  function Button$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.i34_1 = $elementRef;
    this.j34_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(Button$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(Button$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(Button$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp104_safe_receiver = this.i34_1.current;
          if (tmp104_safe_receiver == null)
            null;
          else {
            this.j34_1.setNodeRef(tmp104_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(Button$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new Button$lambda$lambda$slambda(this.i34_1, this.j34_1, completion);
    i.k34_1 = $this$useEffect;
    return i;
  };
  function Button$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new Button$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function Button$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function Button$lambda$lambda$lambda_0($props) {
    return function ($this$bgwText) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwText.className = 'text';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.Button.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      cssTextBuilderIntern(this_0, $props.data);
      $this$bgwText.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$11 = $props.data.o1u_1;
      addChildNode($this$bgwText, tmp$ret$11);
      return Unit_instance;
    };
  }
  function Button$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwButton) {
      $this$bgwButton.tabIndex = 0;
      $this$bgwButton.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwButton.className = 'button';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.Button.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_11(this_0, $props.data);
      $this$bgwButton.className = css(this_0);
      $this$bgwButton.ref = $elementRef;
      useEffect(Button$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = Button$lambda$lambda$lambda($props);
      addChild($this$bgwButton, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.bgwText' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_text';
      var block_0 = Button$lambda$lambda$lambda_0($props);
      addChild($this$bgwButton, this_2, block_0);
      applyCommonEventHandlers($this$bgwButton, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_Button_kt_yov184;
  function _init_properties_Button_kt__2845m6() {
    if (!properties_initialized_Button_kt_yov184) {
      properties_initialized_Button_kt_yov184 = true;
      Button = FC(Button$lambda);
    }
  }
  function get_CheckBox() {
    _init_properties_CheckBox_kt__5l3fst();
    return CheckBox;
  }
  var CheckBox;
  function cssBuilderIntern_12(_this__u8e3s4, componentViewData) {
    _init_properties_CheckBox_kt__5l3fst();
    cssBuilder_1(_this__u8e3s4, componentViewData);
    // Inline function 'web.cssom.Display.Companion.flex' call
    _this__u8e3s4.display = 'flex';
    // Inline function 'web.cssom.AlignItems.Companion.center' call
    _this__u8e3s4.alignItems = 'center';
    // Inline function 'web.cssom.JustifyItems.Companion.flexStart' call
    _this__u8e3s4.justifyItems = 'flex-start';
    // Inline function 'web.cssom.em' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.gap = toString_0(10) + 'em';
  }
  function CheckBox$lambda($this$FC, props) {
    _init_properties_CheckBox_kt__5l3fst();
    var droppable = useDroppable(new CheckBox$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwCheckBox' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_checkbox';
    var block = CheckBox$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function CheckBox$1$droppable$1($props) {
    this.l34_1 = $props.data.a1s_1;
    this.m34_1 = !$props.data.r1s_1;
  }
  protoOf(CheckBox$1$droppable$1).r2v = function (_set____db54di) {
    this.l34_1 = _set____db54di;
  };
  protoOf(CheckBox$1$droppable$1).r2o = function () {
    return this.l34_1;
  };
  protoOf(CheckBox$1$droppable$1).s2v = function (_set____db54di) {
    this.m34_1 = _set____db54di;
  };
  protoOf(CheckBox$1$droppable$1).t2v = function () {
    return this.m34_1;
  };
  function CheckBox$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.v34_1 = $elementRef;
    this.w34_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(CheckBox$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(CheckBox$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(CheckBox$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp105_safe_receiver = this.v34_1.current;
          if (tmp105_safe_receiver == null)
            null;
          else {
            this.w34_1.setNodeRef(tmp105_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(CheckBox$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new CheckBox$lambda$lambda$slambda(this.v34_1, this.w34_1, completion);
    i.x34_1 = $this$useEffect;
    return i;
  };
  function CheckBox$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new CheckBox$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function CheckBox$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function CheckBox$lambda$lambda$lambda$slambda($props, resultContinuation) {
    this.g35_1 = $props;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(CheckBox$lambda$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(CheckBox$lambda$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(CheckBox$lambda$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp106_safe_receiver = document.getElementById(this.g35_1.data.a1s_1 + '--checkbox');
          if (tmp106_safe_receiver == null)
            null;
          else {
            (tmp106_safe_receiver instanceof HTMLInputElement ? tmp106_safe_receiver : THROW_CCE()).indeterminate = !this.g35_1.data.x1x_1 ? this.g35_1.data.z1x_1 : false;
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(CheckBox$lambda$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new CheckBox$lambda$lambda$lambda$slambda(this.g35_1, completion);
    i.h35_1 = $this$useEffect;
    return i;
  };
  function CheckBox$lambda$lambda$lambda$slambda_0($props, resultContinuation) {
    var i = new CheckBox$lambda$lambda$lambda$slambda($props, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function CheckBox$lambda$lambda$lambda$lambda($props) {
    return function (it) {
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new CheckBoxChangedEventData(!$props.data.x1x_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.CheckBox.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function CheckBox$lambda$lambda$lambda_0($props) {
    return function ($this$input) {
      // Inline function 'web.html.InputType.Companion.checkbox' call
      $this$input.type = 'checkbox';
      $this$input.id = $props.data.a1s_1 + '--checkbox';
      $this$input.checked = $props.data.x1x_1;
      var tmp = [listOf_0([$props.data.x1x_1, $props.data.z1x_1, $props.data.y1x_1])];
      useEffect_0(tmp, CheckBox$lambda$lambda$lambda$slambda_0($props, null));
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.CheckBox.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(20) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(20) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.maxWidth = toString_0(20) + 'em';
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.zIndex = 1;
      $this$input.className = css(this_0);
      $this$input.onChange = CheckBox$lambda$lambda$lambda$lambda($props);
      return Unit_instance;
    };
  }
  function CheckBox$lambda$lambda$lambda_1($props) {
    return function ($this$label) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$label.className = 'text';
      $this$label.htmlFor = $props.data.a1s_1 + '--checkbox';
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$7 = $props.data.o1u_1;
      addChildNode($this$label, tmp$ret$7);
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.CheckBox.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      fontBuilder(this_0, $props.data);
      alignmentBuilder(this_0, $props.data);
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_0.position = 'relative';
      $this$label.className = css(this_0);
      return Unit_instance;
    };
  }
  function CheckBox$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwCheckBox) {
      $this$bgwCheckBox.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwCheckBox.className = 'textField';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.CheckBox.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_12(this_0, $props.data);
      $this$bgwCheckBox.className = css(this_0);
      $this$bgwCheckBox.ref = $elementRef;
      useEffect(CheckBox$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = CheckBox$lambda$lambda$lambda($props);
      addChild($this$bgwCheckBox, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.input' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = CheckBox$lambda$lambda$lambda_0($props);
      addChild($this$bgwCheckBox, 'input', block_0);
      // Inline function 'react.dom.html.ReactHTML.label' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_1 = CheckBox$lambda$lambda$lambda_1($props);
      addChild($this$bgwCheckBox, 'label', block_1);
      applyCommonEventHandlers($this$bgwCheckBox, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_CheckBox_kt_a964aj;
  function _init_properties_CheckBox_kt__5l3fst() {
    if (!properties_initialized_CheckBox_kt_a964aj) {
      properties_initialized_CheckBox_kt_a964aj = true;
      CheckBox = FC(CheckBox$lambda);
    }
  }
  function get_ColorPicker() {
    _init_properties_ColorPicker_kt__hcjezj();
    return ColorPicker;
  }
  var ColorPicker;
  function cssBuilderIntern_13(_this__u8e3s4, componentViewData) {
    _init_properties_ColorPicker_kt__hcjezj();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function ColorPicker$lambda($this$FC, props) {
    _init_properties_ColorPicker_kt__hcjezj();
    var droppable = useDroppable(new ColorPicker$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwColorPicker' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_color_picker';
    var block = ColorPicker$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ColorPicker$1$droppable$1($props) {
    this.i35_1 = $props.data.a1s_1;
    this.j35_1 = !$props.data.r1s_1;
  }
  protoOf(ColorPicker$1$droppable$1).r2v = function (_set____db54di) {
    this.i35_1 = _set____db54di;
  };
  protoOf(ColorPicker$1$droppable$1).r2o = function () {
    return this.i35_1;
  };
  protoOf(ColorPicker$1$droppable$1).s2v = function (_set____db54di) {
    this.j35_1 = _set____db54di;
  };
  protoOf(ColorPicker$1$droppable$1).t2v = function () {
    return this.j35_1;
  };
  function ColorPicker$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.s35_1 = $elementRef;
    this.t35_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ColorPicker$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ColorPicker$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ColorPicker$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp107_safe_receiver = this.s35_1.current;
          if (tmp107_safe_receiver == null)
            null;
          else {
            this.t35_1.setNodeRef(tmp107_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ColorPicker$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ColorPicker$lambda$lambda$slambda(this.s35_1, this.t35_1, completion);
    i.u35_1 = $this$useEffect;
    return i;
  };
  function ColorPicker$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new ColorPicker$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ColorPicker$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function ColorPicker$lambda$lambda$lambda$lambda$lambda($value, $props) {
    return function () {
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new ColorInputChangedEventData($value);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ColorPicker.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function ColorPicker$lambda$lambda$lambda$lambda($debounceTimeout, $props) {
    return function (it) {
      var value = it.target.value;
      var tmp108_safe_receiver = $debounceTimeout._v;
      if (tmp108_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        clearTimeout(tmp108_safe_receiver);
      }
      $debounceTimeout._v = setTimeout(ColorPicker$lambda$lambda$lambda$lambda$lambda(value, $props), 200);
      return Unit_instance;
    };
  }
  function ColorPicker$lambda$lambda$lambda_0($props) {
    return function ($this$input) {
      // Inline function 'web.html.InputType.Companion.color' call
      $this$input.type = 'color';
      $this$input.defaultValue = $props.data.i22_1;
      $this$input.value = $props.data.i22_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ColorPicker.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.margin = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.padding = toString_0(0) + 'px';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingLeft = toString_0(5) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingRight = toString_0(5) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingTop = toString_0(3) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingBottom = toString_0(3) + 'em';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.appearance = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.border = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.outline = 'none';
      // Inline function 'web.cssom.rgb' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundColor = 'rgb(' + 0 + ' ' + 0 + ' ' + 0 + ' / ' + 0.0 + ')';
      $this$input.className = css(this_0);
      var debounceTimeout = {_v: null};
      $this$input.onChange = ColorPicker$lambda$lambda$lambda$lambda(debounceTimeout, $props);
      return Unit_instance;
    };
  }
  function ColorPicker$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwColorPicker) {
      $this$bgwColorPicker.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwColorPicker.className = 'colorPicker';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ColorPicker.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_13(this_0, $props.data);
      $this$bgwColorPicker.className = css(this_0);
      $this$bgwColorPicker.ref = $elementRef;
      useEffect(ColorPicker$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = ColorPicker$lambda$lambda$lambda($props);
      addChild($this$bgwColorPicker, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.input' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = ColorPicker$lambda$lambda$lambda_0($props);
      addChild($this$bgwColorPicker, 'input', block_0);
      applyCommonEventHandlers($this$bgwColorPicker, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_ColorPicker_kt_3s3mhr;
  function _init_properties_ColorPicker_kt__hcjezj() {
    if (!properties_initialized_ColorPicker_kt_3s3mhr) {
      properties_initialized_ColorPicker_kt_3s3mhr = true;
      ColorPicker = FC(ColorPicker$lambda);
    }
  }
  function get_ComboBox() {
    _init_properties_ComboBox_kt__nediwz();
    return ComboBox;
  }
  var ComboBox;
  function cssBuilderIntern_14(_this__u8e3s4, componentViewData) {
    _init_properties_ComboBox_kt__nediwz();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function ComboBox$lambda($this$FC, props) {
    _init_properties_ComboBox_kt__nediwz();
    var droppable = useDroppable(new ComboBox$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwComboBox' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_combo_box';
    var block = ComboBox$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ComboBox$1$droppable$1($props) {
    this.v35_1 = $props.data.a1s_1;
    this.w35_1 = !$props.data.r1s_1;
  }
  protoOf(ComboBox$1$droppable$1).r2v = function (_set____db54di) {
    this.v35_1 = _set____db54di;
  };
  protoOf(ComboBox$1$droppable$1).r2o = function () {
    return this.v35_1;
  };
  protoOf(ComboBox$1$droppable$1).s2v = function (_set____db54di) {
    this.w35_1 = _set____db54di;
  };
  protoOf(ComboBox$1$droppable$1).t2v = function () {
    return this.w35_1;
  };
  function ComboBox$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.f36_1 = $elementRef;
    this.g36_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ComboBox$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ComboBox$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ComboBox$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp109_safe_receiver = this.f36_1.current;
          if (tmp109_safe_receiver == null)
            null;
          else {
            this.g36_1.setNodeRef(tmp109_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ComboBox$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ComboBox$lambda$lambda$slambda(this.f36_1, this.g36_1, completion);
    i.h36_1 = $this$useEffect;
    return i;
  };
  function ComboBox$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new ComboBox$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ComboBox$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function ComboBox$lambda$lambda$lambda$lambda($props) {
    return function ($this$option) {
      $this$option.value = '-1';
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$3 = $props.data.y1y_1;
      addChildNode($this$option, tmp$ret$3);
      $this$option.selected = $props.data.a1z_1 == null;
      return Unit_instance;
    };
  }
  function ComboBox$lambda$lambda$lambda$lambda_0($it, $props) {
    return function ($this$option) {
      $this$option.value = $it.qc_1.toString();
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$3 = $it.rc_1;
      addChildNode($this$option, tmp$ret$3);
      var tmp110_safe_receiver = $props.data.a1z_1;
      $this$option.selected = (tmp110_safe_receiver == null ? null : tmp110_safe_receiver.qc_1) === $it.qc_1;
      return Unit_instance;
    };
  }
  function ComboBox$lambda$lambda$lambda$lambda_1($props) {
    return function (it) {
      var value = toInt(it.target.value);
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new SelectionChangedEventData(value);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ComboBox.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function ComboBox$lambda$lambda$lambda_0($props) {
    return function ($this$select) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ComboBox.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      fontBuilder(this_0, $props.data);
      comboBoxBuilder(this_0, $props.data);
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.outline = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.border = 'none';
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.textIndent = toString_0(1) + 'em';
      $this$select.className = css(this_0);
      // Inline function 'react.dom.html.ReactHTML.option' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block = ComboBox$lambda$lambda$lambda$lambda($props);
      addChild($this$select, 'option', block);
      var tmp0_iterator = $props.data.z1y_1.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.uicomponents.ComboBox.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'react.ChildrenBuilder.invoke' call
        // Inline function 'react.dom.html.ReactHTML.option' call
        // Inline function 'react.IntrinsicType' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var block_0 = ComboBox$lambda$lambda$lambda$lambda_0(element, $props);
        addChild($this$select, 'option', block_0);
      }
      $this$select.onChange = ComboBox$lambda$lambda$lambda$lambda_1($props);
      return Unit_instance;
    };
  }
  function ComboBox$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwComboBox) {
      $this$bgwComboBox.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwComboBox.className = 'comboBox';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ComboBox.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_14(this_0, $props.data);
      $this$bgwComboBox.className = css(this_0);
      $this$bgwComboBox.ref = $elementRef;
      useEffect(ComboBox$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = ComboBox$lambda$lambda$lambda($props);
      addChild($this$bgwComboBox, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.select' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = ComboBox$lambda$lambda$lambda_0($props);
      addChild($this$bgwComboBox, 'select', block_0);
      applyCommonEventHandlers($this$bgwComboBox, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_ComboBox_kt_8nezsv;
  function _init_properties_ComboBox_kt__nediwz() {
    if (!properties_initialized_ComboBox_kt_8nezsv) {
      properties_initialized_ComboBox_kt_8nezsv = true;
      ComboBox = FC(ComboBox$lambda);
    }
  }
  function get_Label() {
    _init_properties_Label_kt__lqveyq();
    return Label;
  }
  var Label;
  function cssBuilderIntern_15(_this__u8e3s4, componentViewData) {
    _init_properties_Label_kt__lqveyq();
    cssBuilder_1(_this__u8e3s4, componentViewData);
  }
  function cssTextBuilderIntern_0(_this__u8e3s4, componentViewData) {
    _init_properties_Label_kt__lqveyq();
    cssTextBuilder(_this__u8e3s4, componentViewData);
  }
  function Label$lambda($this$FC, props) {
    _init_properties_Label_kt__lqveyq();
    var droppable = useDroppable(new Label$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwLabel' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_label';
    var block = Label$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function Label$1$droppable$1($props) {
    this.i36_1 = $props.data.a1s_1;
    this.j36_1 = !$props.data.r1s_1;
  }
  protoOf(Label$1$droppable$1).r2v = function (_set____db54di) {
    this.i36_1 = _set____db54di;
  };
  protoOf(Label$1$droppable$1).r2o = function () {
    return this.i36_1;
  };
  protoOf(Label$1$droppable$1).s2v = function (_set____db54di) {
    this.j36_1 = _set____db54di;
  };
  protoOf(Label$1$droppable$1).t2v = function () {
    return this.j36_1;
  };
  function Label$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.s36_1 = $elementRef;
    this.t36_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(Label$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(Label$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(Label$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp111_safe_receiver = this.s36_1.current;
          if (tmp111_safe_receiver == null)
            null;
          else {
            this.t36_1.setNodeRef(tmp111_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(Label$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new Label$lambda$lambda$slambda(this.s36_1, this.t36_1, completion);
    i.u36_1 = $this$useEffect;
    return i;
  };
  function Label$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new Label$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function Label$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function Label$lambda$lambda$lambda_0($props) {
    return function ($this$bgwText) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwText.className = 'text';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.Label.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      cssTextBuilderIntern_0(this_0, $props.data);
      $this$bgwText.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$11 = $props.data.o1u_1;
      addChildNode($this$bgwText, tmp$ret$11);
      return Unit_instance;
    };
  }
  function Label$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwLabel) {
      $this$bgwLabel.tabIndex = 0;
      $this$bgwLabel.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwLabel.className = 'label';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.Label.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_15(this_0, $props.data);
      $this$bgwLabel.className = css(this_0);
      $this$bgwLabel.ref = $elementRef;
      useEffect(Label$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = Label$lambda$lambda$lambda($props);
      addChild($this$bgwLabel, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.bgwText' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_text';
      var block_0 = Label$lambda$lambda$lambda_0($props);
      addChild($this$bgwLabel, this_2, block_0);
      applyCommonEventHandlers($this$bgwLabel, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_Label_kt_am5fok;
  function _init_properties_Label_kt__lqveyq() {
    if (!properties_initialized_Label_kt_am5fok) {
      properties_initialized_Label_kt_am5fok = true;
      Label = FC(Label$lambda);
    }
  }
  function get_ListView() {
    _init_properties_ListView_kt__vx7klf();
    return ListView;
  }
  var ListView;
  function cssBuilderIntern_16(_this__u8e3s4, componentViewData) {
    _init_properties_ListView_kt__vx7klf();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function ListView$lambda($this$FC, props) {
    _init_properties_ListView_kt__vx7klf();
    var droppable = useDroppable(new ListView$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwListView' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_list_view';
    var block = ListView$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ListView$1$droppable$1($props) {
    this.v36_1 = $props.data.a1s_1;
    this.w36_1 = !$props.data.r1s_1;
  }
  protoOf(ListView$1$droppable$1).r2v = function (_set____db54di) {
    this.v36_1 = _set____db54di;
  };
  protoOf(ListView$1$droppable$1).r2o = function () {
    return this.v36_1;
  };
  protoOf(ListView$1$droppable$1).s2v = function (_set____db54di) {
    this.w36_1 = _set____db54di;
  };
  protoOf(ListView$1$droppable$1).t2v = function () {
    return this.w36_1;
  };
  function ListView$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.f37_1 = $elementRef;
    this.g37_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ListView$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ListView$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ListView$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp7_safe_receiver = this.f37_1.current;
          if (tmp7_safe_receiver == null)
            null;
          else {
            this.g37_1.setNodeRef(tmp7_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ListView$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ListView$lambda$lambda$slambda(this.f37_1, this.g37_1, completion);
    i.h37_1 = $this$useEffect;
    return i;
  };
  function ListView$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new ListView$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ListView$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function ListView$lambda$lambda$lambda$lambda$lambda$lambda($index, $props) {
    return function (it) {
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new StructuredDataSelectEventData($index);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function ListView$lambda$lambda$lambda$lambda$lambda($props, $index, $item) {
    return function ($this$bgwText) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwText.className = 'text';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.padding = toString_0(1) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingTop = toString_0(0.5) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingBottom = toString_0(0.5) + 'em';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontStyle = ensureNotNull($props.data.q1t_1).a2k_1;
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontWeight = ensureNotNull($props.data.q1t_1).z2j_1;
      // Inline function 'web.cssom.em' call
      var this_1 = ensureNotNull($props.data.q1t_1).w2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontSize = toString_0(this_1) + 'em';
      this_0.fontFamily = cssFont(ensureNotNull($props.data.q1t_1).y2j_1);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.color = ensureNotNull($props.data.q1t_1).x2j_1;
      this_0.minWidth = fit();
      if ($props.data.s24_1.r1($index)) {
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_0.backgroundColor = $props.data.r24_1;
      }
      $this$bgwText.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$43 = $item;
      addChildNode($this$bgwText, tmp$ret$43);
      $this$bgwText.onClick = ListView$lambda$lambda$lambda$lambda$lambda$lambda($index, $props);
      return Unit_instance;
    };
  }
  function ListView$lambda$lambda$lambda$lambda($props) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'components';
      $this$bgwContents.id = $props.data.a1s_1 + '--components';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.FlexDirection.Companion.column' call
      this_0.flexDirection = 'column';
      // Inline function 'web.cssom.AlignItems.Companion.start' call
      this_0.alignItems = 'start';
      // Inline function 'web.cssom.minus' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = toString_0(100) + '%';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var other = toString_0(10) + 'em';
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.minWidth = 'calc(' + toString_0(this_1) + ' - ' + toString_0(other) + ')';
      if ($props.data.c26_1 === 'horizontal') {
        // Inline function 'web.cssom.FlexDirection.Companion.row' call
        this_0.flexDirection = 'row';
        // Inline function 'web.cssom.AlignItems.Companion.center' call
        this_0.alignItems = 'center';
      }
      $this$bgwContents.className = css(this_0);
      var index = 0;
      var tmp0_iterator = $props.data.p24_1.j();
      while (tmp0_iterator.k()) {
        var item = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var index_0 = checkIndexOverflow(tmp1);
        // Inline function 'react.ChildrenBuilder.invoke' call
        // Inline function 'tools.aqua.bgw.elements.bgwText' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var this_2 = 'bgw_text';
        var block = ListView$lambda$lambda$lambda$lambda$lambda($props, index_0, item);
        addChild($this$bgwContents, this_2, block);
      }
      return Unit_instance;
    };
  }
  function ListView$lambda$lambda$lambda_0($props) {
    return function ($this$bgwScroll) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwScroll.className = 'scroll';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Auto.Companion.auto' call
      this_0.overflow = 'auto';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_0.position = 'relative';
      $this$bgwScroll.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwContents' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_contents';
      var block = ListView$lambda$lambda$lambda$lambda($props);
      addChild($this$bgwScroll, this_1, block);
      applyCommonEventHandlers($this$bgwScroll, $props.data);
      return Unit_instance;
    };
  }
  function ListView$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwListView) {
      $this$bgwListView.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwListView.className = 'listView';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ListView.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_16(this_0, $props.data);
      $this$bgwListView.className = css(this_0);
      $this$bgwListView.ref = $elementRef;
      useEffect(ListView$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = ListView$lambda$lambda$lambda($props);
      addChild($this$bgwListView, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwScroll' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_scroll';
      var block_0 = ListView$lambda$lambda$lambda_0($props);
      addChild($this$bgwListView, this_2, block_0);
      return Unit_instance;
    };
  }
  var properties_initialized_ListView_kt_ic6v7f;
  function _init_properties_ListView_kt__vx7klf() {
    if (!properties_initialized_ListView_kt_ic6v7f) {
      properties_initialized_ListView_kt_ic6v7f = true;
      ListView = FC(ListView$lambda);
    }
  }
  function get_PasswordField() {
    _init_properties_PasswordField_kt__b0ydyl();
    return PasswordField;
  }
  var PasswordField;
  function cssBuilderIntern_17(_this__u8e3s4, componentViewData) {
    _init_properties_PasswordField_kt__b0ydyl();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function PasswordField$lambda($this$FC, props) {
    _init_properties_PasswordField_kt__b0ydyl();
    var droppable = useDroppable(new PasswordField$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwPasswordField' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_password_field';
    var block = PasswordField$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function PasswordField$1$droppable$1($props) {
    this.i37_1 = $props.data.a1s_1;
    this.j37_1 = !$props.data.r1s_1;
  }
  protoOf(PasswordField$1$droppable$1).r2v = function (_set____db54di) {
    this.i37_1 = _set____db54di;
  };
  protoOf(PasswordField$1$droppable$1).r2o = function () {
    return this.i37_1;
  };
  protoOf(PasswordField$1$droppable$1).s2v = function (_set____db54di) {
    this.j37_1 = _set____db54di;
  };
  protoOf(PasswordField$1$droppable$1).t2v = function () {
    return this.j37_1;
  };
  function PasswordField$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.s37_1 = $elementRef;
    this.t37_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(PasswordField$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(PasswordField$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(PasswordField$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp113_safe_receiver = this.s37_1.current;
          if (tmp113_safe_receiver == null)
            null;
          else {
            this.t37_1.setNodeRef(tmp113_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(PasswordField$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new PasswordField$lambda$lambda$slambda(this.s37_1, this.t37_1, completion);
    i.u37_1 = $this$useEffect;
    return i;
  };
  function PasswordField$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new PasswordField$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function PasswordField$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function PasswordField$lambda$lambda$lambda$lambda($props) {
    return function (it) {
      var value = it.target.value;
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new TextInputChangedEventData(value);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.PasswordField.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function PasswordField$lambda$lambda$lambda_0($props) {
    return function ($this$input) {
      $this$input.placeholder = $props.data.p1v_1;
      // Inline function 'web.html.InputType.Companion.password' call
      $this$input.type = 'password';
      $this$input.defaultValue = $props.data.o1v_1;
      $this$input.value = $props.data.o1v_1;
      $this$input.spellCheck = false;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.PasswordField.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      fontBuilder(this_0, $props.data);
      inputBuilder(this_0, $props.data);
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.outline = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.border = 'none';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.textIndent = toString_0(1) + 'em';
      // Inline function 'csstype.SimplePseudosRuleBuilder.placeholder' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = '::placeholder';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_2 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.PasswordField.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      placeholderFontBuilder(this_2, $props.data);
      this_0[this_1] = this_2;
      $this$input.className = css(this_0);
      $this$input.onChange = PasswordField$lambda$lambda$lambda$lambda($props);
      return Unit_instance;
    };
  }
  function PasswordField$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwPasswordField) {
      $this$bgwPasswordField.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwPasswordField.className = 'passwordField';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.PasswordField.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_17(this_0, $props.data);
      $this$bgwPasswordField.className = css(this_0);
      $this$bgwPasswordField.ref = $elementRef;
      useEffect(PasswordField$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = PasswordField$lambda$lambda$lambda($props);
      addChild($this$bgwPasswordField, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.input' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = PasswordField$lambda$lambda$lambda_0($props);
      addChild($this$bgwPasswordField, 'input', block_0);
      applyCommonEventHandlers($this$bgwPasswordField, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_PasswordField_kt_msn7hr;
  function _init_properties_PasswordField_kt__b0ydyl() {
    if (!properties_initialized_PasswordField_kt_msn7hr) {
      properties_initialized_PasswordField_kt_msn7hr = true;
      PasswordField = FC(PasswordField$lambda);
    }
  }
  function get_ProgressBar() {
    _init_properties_ProgressBar_kt__buaozw();
    return ProgressBar;
  }
  var ProgressBar;
  function cssBuilderIntern_18(_this__u8e3s4, componentViewData) {
    _init_properties_ProgressBar_kt__buaozw();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function ProgressBar$lambda($this$FC, props) {
    _init_properties_ProgressBar_kt__buaozw();
    var droppable = useDroppable(new ProgressBar$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwProgress' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_progress';
    var block = ProgressBar$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ProgressBar$1$droppable$1($props) {
    this.v37_1 = $props.data.a1s_1;
    this.w37_1 = !$props.data.r1s_1;
  }
  protoOf(ProgressBar$1$droppable$1).r2v = function (_set____db54di) {
    this.v37_1 = _set____db54di;
  };
  protoOf(ProgressBar$1$droppable$1).r2o = function () {
    return this.v37_1;
  };
  protoOf(ProgressBar$1$droppable$1).s2v = function (_set____db54di) {
    this.w37_1 = _set____db54di;
  };
  protoOf(ProgressBar$1$droppable$1).t2v = function () {
    return this.w37_1;
  };
  function ProgressBar$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.f38_1 = $elementRef;
    this.g38_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ProgressBar$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ProgressBar$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ProgressBar$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp114_safe_receiver = this.f38_1.current;
          if (tmp114_safe_receiver == null)
            null;
          else {
            this.g38_1.setNodeRef(tmp114_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ProgressBar$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ProgressBar$lambda$lambda$slambda(this.f38_1, this.g38_1, completion);
    i.h38_1 = $this$useEffect;
    return i;
  };
  function ProgressBar$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new ProgressBar$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ProgressBar$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function ProgressBar$lambda$lambda$lambda_0($props) {
    return function ($this$bgwProgressBar) {
      $this$bgwProgressBar.id = $props.data.a1s_1 + '--bar';
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwProgressBar.className = 'progress-bar';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ProgressBar.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      var this_1 = $props.data.k23_1 * 100;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(this_1) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Color' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundColor = $props.data.l23_1;
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(0) + 'px';
      // Inline function 'web.cssom.px' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(0) + 'px';
      this_0.transition = transition(500, 'width');
      $this$bgwProgressBar.className = css(this_0);
      return Unit_instance;
    };
  }
  function ProgressBar$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwProgress) {
      $this$bgwProgress.tabIndex = 0;
      $this$bgwProgress.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwProgress.className = 'progress';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ProgressBar.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_18(this_0, $props.data);
      $this$bgwProgress.className = css(this_0);
      $this$bgwProgress.ref = $elementRef;
      useEffect(ProgressBar$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = ProgressBar$lambda$lambda$lambda($props);
      addChild($this$bgwProgress, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwProgressBar' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_progress_bar';
      var block_0 = ProgressBar$lambda$lambda$lambda_0($props);
      addChild($this$bgwProgress, this_2, block_0);
      applyCommonEventHandlers($this$bgwProgress, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_ProgressBar_kt_jpqy2;
  function _init_properties_ProgressBar_kt__buaozw() {
    if (!properties_initialized_ProgressBar_kt_jpqy2) {
      properties_initialized_ProgressBar_kt_jpqy2 = true;
      ProgressBar = FC(ProgressBar$lambda);
    }
  }
  function get_RadioButton() {
    _init_properties_RadioButton_kt__dpeme3();
    return RadioButton;
  }
  var RadioButton;
  function cssBuilderIntern_19(_this__u8e3s4, componentViewData) {
    _init_properties_RadioButton_kt__dpeme3();
    // Inline function 'web.cssom.Display.Companion.flex' call
    _this__u8e3s4.display = 'flex';
    cssBuilder_1(_this__u8e3s4, componentViewData);
    // Inline function 'web.cssom.AlignItems.Companion.center' call
    _this__u8e3s4.alignItems = 'center';
    // Inline function 'web.cssom.JustifyItems.Companion.flexStart' call
    _this__u8e3s4.justifyItems = 'flex-start';
    // Inline function 'web.cssom.em' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.gap = toString_0(10) + 'em';
  }
  function RadioButton$lambda($this$FC, props) {
    _init_properties_RadioButton_kt__dpeme3();
    var droppable = useDroppable(new RadioButton$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwRadioButton' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_radiobutton';
    var block = RadioButton$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function RadioButton$1$droppable$1($props) {
    this.i38_1 = $props.data.a1s_1;
    this.j38_1 = !$props.data.r1s_1;
  }
  protoOf(RadioButton$1$droppable$1).r2v = function (_set____db54di) {
    this.i38_1 = _set____db54di;
  };
  protoOf(RadioButton$1$droppable$1).r2o = function () {
    return this.i38_1;
  };
  protoOf(RadioButton$1$droppable$1).s2v = function (_set____db54di) {
    this.j38_1 = _set____db54di;
  };
  protoOf(RadioButton$1$droppable$1).t2v = function () {
    return this.j38_1;
  };
  function RadioButton$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.s38_1 = $elementRef;
    this.t38_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(RadioButton$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(RadioButton$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(RadioButton$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp115_safe_receiver = this.s38_1.current;
          if (tmp115_safe_receiver == null)
            null;
          else {
            this.t38_1.setNodeRef(tmp115_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(RadioButton$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new RadioButton$lambda$lambda$slambda(this.s38_1, this.t38_1, completion);
    i.u38_1 = $this$useEffect;
    return i;
  };
  function RadioButton$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new RadioButton$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function RadioButton$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function RadioButton$lambda$lambda$lambda$lambda($props) {
    return function (it) {
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new RadioChangedEventData(!$props.data.f20_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.RadioButton.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function RadioButton$lambda$lambda$lambda_0($props) {
    return function ($this$input) {
      // Inline function 'web.html.InputType.Companion.radio' call
      $this$input.type = 'radio';
      $this$input.id = $props.data.a1s_1 + '--radio';
      $this$input.checked = $props.data.f20_1;
      $this$input.name = $props.data.g20_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.RadioButton.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(20) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(20) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.maxWidth = toString_0(20) + 'em';
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.zIndex = 1;
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.outline = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.border = 'none';
      $this$input.className = css(this_0);
      $this$input.onChange = RadioButton$lambda$lambda$lambda$lambda($props);
      return Unit_instance;
    };
  }
  function RadioButton$lambda$lambda$lambda_1($props) {
    return function ($this$label) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$label.className = 'text';
      $this$label.htmlFor = $props.data.a1s_1 + '--radio';
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$7 = $props.data.o1u_1;
      addChildNode($this$label, tmp$ret$7);
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.RadioButton.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      fontBuilder(this_0, $props.data);
      alignmentBuilder(this_0, $props.data);
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_0.position = 'relative';
      $this$label.className = css(this_0);
      return Unit_instance;
    };
  }
  function RadioButton$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwRadioButton) {
      $this$bgwRadioButton.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwRadioButton.className = 'textField';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.RadioButton.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_19(this_0, $props.data);
      // Inline function 'web.cssom.Cursor.Companion.pointer' call
      this_0.cursor = 'pointer';
      $this$bgwRadioButton.className = css(this_0);
      $this$bgwRadioButton.ref = $elementRef;
      useEffect(RadioButton$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = RadioButton$lambda$lambda$lambda($props);
      addChild($this$bgwRadioButton, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.input' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = RadioButton$lambda$lambda$lambda_0($props);
      addChild($this$bgwRadioButton, 'input', block_0);
      // Inline function 'react.dom.html.ReactHTML.label' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_1 = RadioButton$lambda$lambda$lambda_1($props);
      addChild($this$bgwRadioButton, 'label', block_1);
      applyCommonEventHandlers($this$bgwRadioButton, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_RadioButton_kt_x3rbx;
  function _init_properties_RadioButton_kt__dpeme3() {
    if (!properties_initialized_RadioButton_kt_x3rbx) {
      properties_initialized_RadioButton_kt_x3rbx = true;
      RadioButton = FC(RadioButton$lambda);
    }
  }
  function get_TableView() {
    _init_properties_TableView_kt__myb95t();
    return TableView;
  }
  var TableView;
  function cssBuilderIntern_20(_this__u8e3s4, componentViewData) {
    _init_properties_TableView_kt__myb95t();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function TableView$lambda($this$FC, props) {
    _init_properties_TableView_kt__myb95t();
    var droppable = useDroppable(new TableView$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwTableView' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_list_view';
    var block = TableView$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function TableView$1$droppable$1($props) {
    this.v38_1 = $props.data.a1s_1;
    this.w38_1 = !$props.data.r1s_1;
  }
  protoOf(TableView$1$droppable$1).r2v = function (_set____db54di) {
    this.v38_1 = _set____db54di;
  };
  protoOf(TableView$1$droppable$1).r2o = function () {
    return this.v38_1;
  };
  protoOf(TableView$1$droppable$1).s2v = function (_set____db54di) {
    this.w38_1 = _set____db54di;
  };
  protoOf(TableView$1$droppable$1).t2v = function () {
    return this.w38_1;
  };
  function TableView$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.f39_1 = $elementRef;
    this.g39_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(TableView$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(TableView$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(TableView$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp116_safe_receiver = this.f39_1.current;
          if (tmp116_safe_receiver == null)
            null;
          else {
            this.g39_1.setNodeRef(tmp116_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(TableView$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new TableView$lambda$lambda$slambda(this.f39_1, this.g39_1, completion);
    i.h39_1 = $this$useEffect;
    return i;
  };
  function TableView$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new TableView$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function TableView$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function TableView$lambda$lambda$lambda$lambda$lambda($column) {
    return function ($this$bgwText) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwText.className = 'text';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.padding = toString_0(1) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingTop = toString_0(0.5) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingBottom = toString_0(1) + 'em';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontStyle = $column.y24_1.a2k_1;
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontWeight = $column.y24_1.z2j_1;
      // Inline function 'web.cssom.em' call
      var this_1 = $column.y24_1.w2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontSize = toString_0(this_1) + 'em';
      this_0.fontFamily = cssFont($column.y24_1.y2j_1);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.color = $column.y24_1.x2j_1;
      this_0.minWidth = fit();
      $this$bgwText.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$41 = $column.w24_1;
      addChildNode($this$bgwText, tmp$ret$41);
      return Unit_instance;
    };
  }
  function TableView$lambda$lambda$lambda$lambda$lambda$lambda($index, $props) {
    return function (it) {
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new StructuredDataSelectEventData($index);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function TableView$lambda$lambda$lambda$lambda$lambda_0($column, $props, $index, $item) {
    return function ($this$bgwText) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwText.className = 'text';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.padding = toString_0(1) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingTop = toString_0(0.5) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.paddingBottom = toString_0(0.5) + 'em';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontStyle = $column.y24_1.a2k_1;
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontWeight = $column.y24_1.z2j_1;
      // Inline function 'web.cssom.em' call
      var this_1 = $column.y24_1.w2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.fontSize = toString_0(this_1) + 'em';
      this_0.fontFamily = cssFont($column.y24_1.y2j_1);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.color = $column.y24_1.x2j_1;
      this_0.minWidth = fit();
      if ($props.data.s24_1.r1($index)) {
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        this_0.backgroundColor = $props.data.r24_1;
      }
      $this$bgwText.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$43 = $item;
      addChildNode($this$bgwText, tmp$ret$43);
      $this$bgwText.onClick = TableView$lambda$lambda$lambda$lambda$lambda$lambda($index, $props);
      return Unit_instance;
    };
  }
  function TableView$lambda$lambda$lambda$lambda($props, $i, $column) {
    return function ($this$bgwContents) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwContents.className = 'column';
      $this$bgwContents.id = $props.data.a1s_1 + ('--column-' + $i);
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      var this_1 = $column.x24_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(this_1) + 'em';
      // Inline function 'web.cssom.em' call
      var this_2 = $column.x24_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.minWidth = toString_0(this_2) + 'em';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.FlexDirection.Companion.column' call
      this_0.flexDirection = 'column';
      // Inline function 'web.cssom.AlignItems.Companion.start' call
      this_0.alignItems = 'start';
      $this$bgwContents.className = css(this_0);
      // Inline function 'tools.aqua.bgw.elements.bgwText' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_3 = 'bgw_text';
      var block = TableView$lambda$lambda$lambda$lambda$lambda($column);
      addChild($this$bgwContents, this_3, block);
      var index = 0;
      var tmp0_iterator = $column.z24_1.j();
      while (tmp0_iterator.k()) {
        var item = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var index_0 = checkIndexOverflow(tmp1);
        // Inline function 'react.ChildrenBuilder.invoke' call
        // Inline function 'tools.aqua.bgw.elements.bgwText' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var this_4 = 'bgw_text';
        var block_0 = TableView$lambda$lambda$lambda$lambda$lambda_0($column, $props, index_0, item);
        addChild($this$bgwContents, this_4, block_0);
      }
      return Unit_instance;
    };
  }
  function TableView$lambda$lambda$lambda_0($props) {
    return function ($this$bgwScroll) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwScroll.className = 'scroll';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Auto.Companion.auto' call
      this_0.overflow = 'auto';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_0.position = 'relative';
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.AlignItems.Companion.start' call
      this_0.alignItems = 'start';
      $this$bgwScroll.className = css(this_0);
      var index = 0;
      var tmp0_iterator = $props.data.f27_1.j();
      while (tmp0_iterator.k()) {
        var item = tmp0_iterator.l();
        // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var i = checkIndexOverflow(tmp1);
        // Inline function 'react.ChildrenBuilder.invoke' call
        // Inline function 'tools.aqua.bgw.elements.bgwContents' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var this_1 = 'bgw_contents';
        var block = TableView$lambda$lambda$lambda$lambda($props, i, item);
        addChild($this$bgwScroll, this_1, block);
      }
      applyCommonEventHandlers($this$bgwScroll, $props.data);
      return Unit_instance;
    };
  }
  function TableView$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwTableView) {
      $this$bgwTableView.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTableView.className = 'tableView';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TableView.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_20(this_0, $props.data);
      $this$bgwTableView.className = css(this_0);
      $this$bgwTableView.ref = $elementRef;
      useEffect(TableView$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = TableView$lambda$lambda$lambda($props);
      addChild($this$bgwTableView, this_1, block);
      // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwScroll' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'bgw_scroll';
      var block_0 = TableView$lambda$lambda$lambda_0($props);
      addChild($this$bgwTableView, this_2, block_0);
      return Unit_instance;
    };
  }
  var properties_initialized_TableView_kt_5q6hwj;
  function _init_properties_TableView_kt__myb95t() {
    if (!properties_initialized_TableView_kt_5q6hwj) {
      properties_initialized_TableView_kt_5q6hwj = true;
      TableView = FC(TableView$lambda);
    }
  }
  function get_TextArea() {
    _init_properties_TextArea_kt__x9ea9m();
    return TextArea;
  }
  var TextArea;
  function cssBuilderIntern_21(_this__u8e3s4, componentViewData) {
    _init_properties_TextArea_kt__x9ea9m();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function TextArea$lambda($this$FC, props) {
    _init_properties_TextArea_kt__x9ea9m();
    var droppable = useDroppable(new TextArea$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwTextArea' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_text_area';
    var block = TextArea$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function TextArea$1$droppable$1($props) {
    this.i39_1 = $props.data.a1s_1;
    this.j39_1 = !$props.data.r1s_1;
  }
  protoOf(TextArea$1$droppable$1).r2v = function (_set____db54di) {
    this.i39_1 = _set____db54di;
  };
  protoOf(TextArea$1$droppable$1).r2o = function () {
    return this.i39_1;
  };
  protoOf(TextArea$1$droppable$1).s2v = function (_set____db54di) {
    this.j39_1 = _set____db54di;
  };
  protoOf(TextArea$1$droppable$1).t2v = function () {
    return this.j39_1;
  };
  function TextArea$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.s39_1 = $elementRef;
    this.t39_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(TextArea$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(TextArea$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(TextArea$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp117_safe_receiver = this.s39_1.current;
          if (tmp117_safe_receiver == null)
            null;
          else {
            this.t39_1.setNodeRef(tmp117_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(TextArea$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new TextArea$lambda$lambda$slambda(this.s39_1, this.t39_1, completion);
    i.u39_1 = $this$useEffect;
    return i;
  };
  function TextArea$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new TextArea$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function TextArea$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function TextArea$lambda$lambda$lambda$lambda($props) {
    return function (it) {
      var value = it.target.value;
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new TextInputChangedEventData(value);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextArea.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function TextArea$lambda$lambda$lambda_0($props) {
    return function ($this$textarea) {
      $this$textarea.placeholder = $props.data.p1v_1;
      $this$textarea.defaultValue = $props.data.o1v_1;
      $this$textarea.value = $props.data.o1v_1;
      $this$textarea.spellCheck = false;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextArea.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      fontBuilder(this_0, $props.data);
      inputBuilder(this_0, $props.data);
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.resize = 'none';
      // Inline function 'web.cssom.BoxSizing.Companion.borderBox' call
      this_0.boxSizing = 'border-box';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.outline = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.border = 'none';
      // Inline function 'csstype.SimplePseudosRuleBuilder.placeholder' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = '::placeholder';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_2 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextArea.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      placeholderFontBuilder(this_2, $props.data);
      this_0[this_1] = this_2;
      $this$textarea.className = css(this_0);
      $this$textarea.onChange = TextArea$lambda$lambda$lambda$lambda($props);
      return Unit_instance;
    };
  }
  function TextArea$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwTextArea) {
      $this$bgwTextArea.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTextArea.className = 'textArea';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextArea.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_21(this_0, $props.data);
      $this$bgwTextArea.className = css(this_0);
      $this$bgwTextArea.ref = $elementRef;
      useEffect(TextArea$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = TextArea$lambda$lambda$lambda($props);
      addChild($this$bgwTextArea, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.textarea' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_2 = 'textarea';
      var block_0 = TextArea$lambda$lambda$lambda_0($props);
      addChild($this$bgwTextArea, this_2, block_0);
      applyCommonEventHandlers($this$bgwTextArea, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_TextArea_kt_kkjizg;
  function _init_properties_TextArea_kt__x9ea9m() {
    if (!properties_initialized_TextArea_kt_kkjizg) {
      properties_initialized_TextArea_kt_kkjizg = true;
      TextArea = FC(TextArea$lambda);
    }
  }
  function get_TextField() {
    _init_properties_TextField_kt__b1se5h();
    return TextField;
  }
  var TextField;
  function cssBuilderIntern_22(_this__u8e3s4, componentViewData) {
    _init_properties_TextField_kt__b1se5h();
    cssBuilder_0(_this__u8e3s4, componentViewData);
  }
  function TextField$lambda($this$FC, props) {
    _init_properties_TextField_kt__b1se5h();
    var droppable = useDroppable(new TextField$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwTextField' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_text_field';
    var block = TextField$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function TextField$1$droppable$1($props) {
    this.v39_1 = $props.data.a1s_1;
    this.w39_1 = !$props.data.r1s_1;
  }
  protoOf(TextField$1$droppable$1).r2v = function (_set____db54di) {
    this.v39_1 = _set____db54di;
  };
  protoOf(TextField$1$droppable$1).r2o = function () {
    return this.v39_1;
  };
  protoOf(TextField$1$droppable$1).s2v = function (_set____db54di) {
    this.w39_1 = _set____db54di;
  };
  protoOf(TextField$1$droppable$1).t2v = function () {
    return this.w39_1;
  };
  function TextField$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.f3a_1 = $elementRef;
    this.g3a_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(TextField$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(TextField$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(TextField$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp118_safe_receiver = this.f3a_1.current;
          if (tmp118_safe_receiver == null)
            null;
          else {
            this.g3a_1.setNodeRef(tmp118_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(TextField$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new TextField$lambda$lambda$slambda(this.f3a_1, this.g3a_1, completion);
    i.h3a_1 = $this$useEffect;
    return i;
  };
  function TextField$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new TextField$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function TextField$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function TextField$lambda$lambda$lambda$lambda($props) {
    return function (it) {
      var value = it.target.value;
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new TextInputChangedEventData(value);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextField.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function TextField$lambda$lambda$lambda_0($props) {
    return function ($this$input) {
      $this$input.placeholder = $props.data.p1v_1;
      $this$input.defaultValue = $props.data.o1v_1;
      $this$input.value = $props.data.o1v_1;
      $this$input.spellCheck = false;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextField.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      inputBuilder(this_0, $props.data);
      fontBuilder(this_0, $props.data);
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.outline = 'none';
      // Inline function 'web.cssom.None.Companion.none' call
      this_0.border = 'none';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.textIndent = toString_0(1) + 'em';
      // Inline function 'csstype.SimplePseudosRuleBuilder.placeholder' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'csstype.RuleBuilder.invoke' call
      // Inline function 'web.cssom.Selector' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = '::placeholder';
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_2 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextField.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      placeholderFontBuilder(this_2, $props.data);
      this_0[this_1] = this_2;
      $this$input.className = css(this_0);
      $this$input.onChange = TextField$lambda$lambda$lambda$lambda($props);
      return Unit_instance;
    };
  }
  function TextField$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwTextField) {
      $this$bgwTextField.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwTextField.className = 'textField';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.TextField.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_22(this_0, $props.data);
      $this$bgwTextField.className = css(this_0);
      $this$bgwTextField.ref = $elementRef;
      useEffect(TextField$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = TextField$lambda$lambda$lambda($props);
      addChild($this$bgwTextField, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.input' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = TextField$lambda$lambda$lambda_0($props);
      addChild($this$bgwTextField, 'input', block_0);
      applyCommonEventHandlers($this$bgwTextField, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_TextField_kt_dspx0j;
  function _init_properties_TextField_kt__b1se5h() {
    if (!properties_initialized_TextField_kt_dspx0j) {
      properties_initialized_TextField_kt_dspx0j = true;
      TextField = FC(TextField$lambda);
    }
  }
  function get_ToggleButton() {
    _init_properties_ToggleButton_kt__n6nrne();
    return ToggleButton;
  }
  var ToggleButton;
  function cssBuilderIntern_23(_this__u8e3s4, componentViewData) {
    _init_properties_ToggleButton_kt__n6nrne();
    // Inline function 'web.cssom.Display.Companion.flex' call
    _this__u8e3s4.display = 'flex';
    cssBuilder_1(_this__u8e3s4, componentViewData);
    // Inline function 'web.cssom.AlignItems.Companion.center' call
    _this__u8e3s4.alignItems = 'center';
    // Inline function 'web.cssom.JustifyItems.Companion.flexStart' call
    _this__u8e3s4.justifyItems = 'flex-start';
    // Inline function 'web.cssom.em' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.gap = toString_0(10) + 'em';
  }
  function ToggleButton$lambda($this$FC, props) {
    _init_properties_ToggleButton_kt__n6nrne();
    var droppable = useDroppable(new ToggleButton$1$droppable$1(props));
    var elementRef = useRef(null);
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.uicomponents.bgwToggleButton' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_togglebutton';
    var block = ToggleButton$lambda$lambda(props, elementRef, droppable);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ToggleButton$1$droppable$1($props) {
    this.i3a_1 = $props.data.a1s_1;
    this.j3a_1 = !$props.data.r1s_1;
  }
  protoOf(ToggleButton$1$droppable$1).r2v = function (_set____db54di) {
    this.i3a_1 = _set____db54di;
  };
  protoOf(ToggleButton$1$droppable$1).r2o = function () {
    return this.i3a_1;
  };
  protoOf(ToggleButton$1$droppable$1).s2v = function (_set____db54di) {
    this.j3a_1 = _set____db54di;
  };
  protoOf(ToggleButton$1$droppable$1).t2v = function () {
    return this.j3a_1;
  };
  function ToggleButton$lambda$lambda$slambda($elementRef, $droppable, resultContinuation) {
    this.s3a_1 = $elementRef;
    this.t3a_1 = $droppable;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ToggleButton$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ToggleButton$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ToggleButton$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp119_safe_receiver = this.s3a_1.current;
          if (tmp119_safe_receiver == null)
            null;
          else {
            this.t3a_1.setNodeRef(tmp119_safe_receiver);
          }
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ToggleButton$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ToggleButton$lambda$lambda$slambda(this.s3a_1, this.t3a_1, completion);
    i.u3a_1 = $this$useEffect;
    return i;
  };
  function ToggleButton$lambda$lambda$slambda_0($elementRef, $droppable, resultContinuation) {
    var i = new ToggleButton$lambda$lambda$slambda($elementRef, $droppable, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ToggleButton$lambda$lambda$lambda($props) {
    return function ($this$bgwVisuals) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwVisuals.className = 'visuals';
      var this_0 = VisualBuilder_instance.f2u($props.data.f1s_1);
      addChildNode($this$bgwVisuals, this_0);
      return Unit_instance;
    };
  }
  function ToggleButton$lambda$lambda$lambda$lambda($props) {
    return function (it) {
      var tmp = JCEFEventDispatcher_getInstance();
      // Inline function 'kotlin.apply' call
      var this_0 = new RadioChangedEventData(!$props.data.i21_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ToggleButton.<anonymous>.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      this_0.s2o($props.data.a1s_1);
      tmp.k2u(this_0);
      return Unit_instance;
    };
  }
  function ToggleButton$lambda$lambda$lambda_0($props) {
    return function ($this$input) {
      // Inline function 'web.html.InputType.Companion.checkbox' call
      $this$input.type = 'checkbox';
      $this$input.id = $props.data.a1s_1 + '--toggle';
      $this$input.checked = $props.data.i21_1;
      $this$input.name = $props.data.j21_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ToggleButton.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(20) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(20) + 'em';
      // Inline function 'web.cssom.em' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.maxWidth = toString_0(20) + 'em';
      // Inline function 'web.cssom.integer' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.zIndex = 1;
      $this$input.className = css(this_0);
      $this$input.onChange = ToggleButton$lambda$lambda$lambda$lambda($props);
      return Unit_instance;
    };
  }
  function ToggleButton$lambda$lambda$lambda_1($this$span) {
    _init_properties_ToggleButton_kt__n6nrne();
    // Inline function 'web.cssom.ClassName' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    $this$span.className = 'toggle';
    return Unit_instance;
  }
  function ToggleButton$lambda$lambda$lambda_2($props) {
    return function ($this$label) {
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$label.className = 'text';
      $this$label.htmlFor = $props.data.a1s_1 + '--toggle';
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$7 = $props.data.o1u_1;
      addChildNode($this$label, tmp$ret$7);
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ToggleButton.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      fontBuilder(this_0, $props.data);
      alignmentBuilder(this_0, $props.data);
      // Inline function 'web.cssom.Display.Companion.flex' call
      this_0.display = 'flex';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Position.Companion.relative' call
      this_0.position = 'relative';
      $this$label.className = css(this_0);
      return Unit_instance;
    };
  }
  function ToggleButton$lambda$lambda($props, $elementRef, $droppable) {
    return function ($this$bgwToggleButton) {
      $this$bgwToggleButton.id = $props.data.a1s_1;
      // Inline function 'web.cssom.ClassName' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $this$bgwToggleButton.className = 'textField';
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.uicomponents.ToggleButton.<anonymous>.<anonymous>.<anonymous>' call
      cssBuilderIntern_23(this_0, $props.data);
      // Inline function 'web.cssom.Cursor.Companion.pointer' call
      this_0.cursor = 'pointer';
      $this$bgwToggleButton.className = css(this_0);
      $this$bgwToggleButton.ref = $elementRef;
      useEffect(ToggleButton$lambda$lambda$slambda_0($elementRef, $droppable, null));
      // Inline function 'tools.aqua.bgw.elements.bgwVisuals' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_visuals';
      var block = ToggleButton$lambda$lambda$lambda($props);
      addChild($this$bgwToggleButton, this_1, block);
      // Inline function 'react.dom.html.ReactHTML.input' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_0 = ToggleButton$lambda$lambda$lambda_0($props);
      addChild($this$bgwToggleButton, 'input', block_0);
      // Inline function 'react.dom.html.ReactHTML.span' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_1 = ToggleButton$lambda$lambda$lambda_1;
      addChild($this$bgwToggleButton, 'span', block_1);
      // Inline function 'react.dom.html.ReactHTML.label' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block_2 = ToggleButton$lambda$lambda$lambda_2($props);
      addChild($this$bgwToggleButton, 'label', block_2);
      applyCommonEventHandlers($this$bgwToggleButton, $props.data);
      return Unit_instance;
    };
  }
  var properties_initialized_ToggleButton_kt_40a33c;
  function _init_properties_ToggleButton_kt__n6nrne() {
    if (!properties_initialized_ToggleButton_kt_40a33c) {
      properties_initialized_ToggleButton_kt_40a33c = true;
      ToggleButton = FC(ToggleButton$lambda);
    }
  }
  function get_ColorVisual() {
    _init_properties_ColorVisual_kt__zgzpgv();
    return ColorVisual;
  }
  var ColorVisual;
  function ColorVisual$lambda($this$FC, props) {
    _init_properties_ColorVisual_kt__zgzpgv();
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.visual.bgwColorVisual' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_color_visual';
    var block = ColorVisual$lambda$lambda(props);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function ColorVisual$lambda$lambda($props) {
    return function ($this$bgwColorVisual) {
      $this$bgwColorVisual.id = $props.data.y2h_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.visual.ColorVisual.<anonymous>.<anonymous>.<anonymous>' call
      styleBuilder(this_0, $props.data.d2i_1);
      flipBuilder(this_0, $props.data.f2i_1);
      filterBuilder(this_0, $props.data.e2i_1);
      // Inline function 'web.cssom.Color' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundColor = $props.data.o2i_1;
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.opacity = $props.data.c2i_1;
      $this$bgwColorVisual.className = css(this_0);
      return Unit_instance;
    };
  }
  var properties_initialized_ColorVisual_kt_736t03;
  function _init_properties_ColorVisual_kt__zgzpgv() {
    if (!properties_initialized_ColorVisual_kt_736t03) {
      properties_initialized_ColorVisual_kt_736t03 = true;
      ColorVisual = FC(ColorVisual$lambda);
    }
  }
  function get_CompoundVisual() {
    _init_properties_CompoundVisual_kt__85kdkb();
    return CompoundVisual;
  }
  var CompoundVisual;
  function CompoundVisual$lambda($this$FC, props) {
    _init_properties_CompoundVisual_kt__85kdkb();
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = props.data.t2j_1.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'tools.aqua.bgw.elements.visual.CompoundVisual.<anonymous>.<anonymous>' call
      // Inline function 'react.ChildrenBuilder.unaryPlus' call
      var this_0 = VisualBuilder_instance.f2u(element);
      addChildNode($this$FC, this_0);
    }
    return Unit_instance;
  }
  var properties_initialized_CompoundVisual_kt_b7k0yb;
  function _init_properties_CompoundVisual_kt__85kdkb() {
    if (!properties_initialized_CompoundVisual_kt_b7k0yb) {
      properties_initialized_CompoundVisual_kt_b7k0yb = true;
      CompoundVisual = FC(CompoundVisual$lambda);
    }
  }
  function get_ImageVisual() {
    _init_properties_ImageVisual_kt__eroo8n();
    return ImageVisual;
  }
  var ImageVisual;
  function ImageVisual$lambda($this$FC, props) {
    _init_properties_ImageVisual_kt__eroo8n();
    if (!(props.data.y2i_1 === -1) && !(props.data.z2i_1 === -1)) {
      // Inline function 'react.ChildrenBuilder.invoke' call
      // Inline function 'tools.aqua.bgw.elements.visual.bgwImageVisual' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_0 = 'bgw_image_visual';
      var block = ImageVisual$lambda$lambda(props);
      addChild($this$FC, this_0, block);
    } else {
      // Inline function 'react.ChildrenBuilder.invoke' call
      // Inline function 'tools.aqua.bgw.elements.visual.bgwImageVisual' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var this_1 = 'bgw_image_visual';
      var block_0 = ImageVisual$lambda$lambda_0(props);
      addChild($this$FC, this_1, block_0);
    }
    return Unit_instance;
  }
  function ImageVisual$lambda$lambda$lambda$slambda$lambda($props, $img) {
    return function (it) {
      var tmp = document.getElementById($props.data.y2h_1);
      var canvas = tmp instanceof HTMLCanvasElement ? tmp : THROW_CCE();
      var tmp_0 = canvas.getContext('2d');
      var ctx = tmp_0 instanceof CanvasRenderingContext2D ? tmp_0 : THROW_CCE();
      ctx.clearRect(0.0, 0.0, $props.data.y2i_1, $props.data.z2i_1);
      ctx.drawImage($img, $props.data.a2j_1, $props.data.b2j_1, $props.data.y2i_1, $props.data.z2i_1, 0.0, 0.0, $props.data.y2i_1, $props.data.z2i_1);
      return Unit_instance;
    };
  }
  function ImageVisual$lambda$lambda$lambda$slambda($props, resultContinuation) {
    this.d3b_1 = $props;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(ImageVisual$lambda$lambda$lambda$slambda).m2v = function ($this$useEffect, $completion) {
    var tmp = this.n2v($this$useEffect, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(ImageVisual$lambda$lambda$lambda$slambda).r8 = function (p1, $completion) {
    return this.m2v((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(ImageVisual$lambda$lambda$lambda$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        if (tmp === 0) {
          this.z7_1 = 1;
          var tmp_0 = document.createElement('img');
          var img = tmp_0 instanceof HTMLImageElement ? tmp_0 : THROW_CCE();
          img.src = this.d3b_1.data.x2i_1;
          img.addEventListener('load', ImageVisual$lambda$lambda$lambda$slambda$lambda(this.d3b_1, img));
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(ImageVisual$lambda$lambda$lambda$slambda).n2v = function ($this$useEffect, completion) {
    var i = new ImageVisual$lambda$lambda$lambda$slambda(this.d3b_1, completion);
    i.e3b_1 = $this$useEffect;
    return i;
  };
  function ImageVisual$lambda$lambda$lambda$slambda_0($props, resultContinuation) {
    var i = new ImageVisual$lambda$lambda$lambda$slambda($props, resultContinuation);
    var l = function ($this$useEffect, $completion) {
      return i.m2v($this$useEffect, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function ImageVisual$lambda$lambda$lambda($props) {
    return function ($this$canvas) {
      $this$canvas.id = $props.data.y2h_1;
      $this$canvas.width = $props.data.y2i_1;
      $this$canvas.height = $props.data.z2i_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.visual.ImageVisual.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'web.cssom.Position.Companion.absolute' call
      this_0.position = 'absolute';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.opacity = $props.data.c2i_1;
      $this$canvas.className = css(this_0);
      useEffect(ImageVisual$lambda$lambda$lambda$slambda_0($props, null));
      return Unit_instance;
    };
  }
  function ImageVisual$lambda$lambda($props) {
    return function ($this$bgwImageVisual) {
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.visual.ImageVisual.<anonymous>.<anonymous>.<anonymous>' call
      styleBuilder(this_0, $props.data.d2i_1);
      flipBuilder(this_0, $props.data.f2i_1);
      filterBuilder(this_0, $props.data.e2i_1);
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.width = toString_0(100) + '%';
      // Inline function 'web.cssom.pct' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.height = toString_0(100) + '%';
      // Inline function 'web.cssom.Overflow.Companion.hidden' call
      this_0.overflow = 'hidden';
      $this$bgwImageVisual.className = css(this_0);
      // Inline function 'react.dom.html.ReactHTML.canvas' call
      // Inline function 'react.IntrinsicType' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var block = ImageVisual$lambda$lambda$lambda($props);
      addChild($this$bgwImageVisual, 'canvas', block);
      return Unit_instance;
    };
  }
  function ImageVisual$lambda$lambda_0($props) {
    return function ($this$bgwImageVisual) {
      $this$bgwImageVisual.id = $props.data.y2h_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.visual.ImageVisual.<anonymous>.<anonymous>.<anonymous>' call
      styleBuilder(this_0, $props.data.d2i_1);
      flipBuilder(this_0, $props.data.f2i_1);
      filterBuilder(this_0, $props.data.e2i_1);
      // Inline function 'web.cssom.url' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.backgroundImage = 'url(' + $props.data.x2i_1 + ')';
      // Inline function 'web.cssom.BackgroundSize.Companion.cover' call
      this_0.backgroundSize = 'cover';
      // Inline function 'web.cssom.BackgroundRepeat.Companion.noRepeat' call
      this_0.backgroundRepeat = 'no-repeat';
      // Inline function 'web.cssom.Background.Companion.center' call
      var tmp = 'center';
      this_0.backgroundPosition = !(tmp == null) ? tmp : THROW_CCE();
      // Inline function 'web.cssom.em' call
      var this_1 = $props.data.a2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(this_1) + 'em';
      // Inline function 'web.cssom.em' call
      var this_2 = $props.data.b2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(this_2) + 'em';
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.opacity = $props.data.c2i_1;
      $this$bgwImageVisual.className = css(this_0);
      return Unit_instance;
    };
  }
  var properties_initialized_ImageVisual_kt_44nqkr;
  function _init_properties_ImageVisual_kt__eroo8n() {
    if (!properties_initialized_ImageVisual_kt_44nqkr) {
      properties_initialized_ImageVisual_kt_44nqkr = true;
      ImageVisual = FC(ImageVisual$lambda);
    }
  }
  function get_TextVisual() {
    _init_properties_TextVisual_kt__1hhadv();
    return TextVisual;
  }
  var TextVisual;
  function TextVisual$lambda($this$FC, props) {
    _init_properties_TextVisual_kt__1hhadv();
    // Inline function 'react.ChildrenBuilder.invoke' call
    // Inline function 'tools.aqua.bgw.elements.visual.bgwTextVisual' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = 'bgw_text_visual';
    var block = TextVisual$lambda$lambda(props);
    addChild($this$FC, this_0, block);
    return Unit_instance;
  }
  function TextVisual$lambda$lambda($props) {
    return function ($this$bgwTextVisual) {
      $this$bgwTextVisual.id = $props.data.y2h_1;
      // Inline function 'emotion.css.ClassName' call
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'tools.aqua.bgw.elements.visual.TextVisual.<anonymous>.<anonymous>.<anonymous>' call
      styleBuilder(this_0, $props.data.d2i_1);
      flipBuilder(this_0, $props.data.f2i_1);
      filterBuilder(this_0, $props.data.e2i_1);
      var tmp120_safe_receiver = $props.data.l2j_1;
      var tmp0_elvis_lhs = tmp120_safe_receiver == null ? null : tmp120_safe_receiver.y2j_1;
      var tmp = tmp0_elvis_lhs == null ? 'Arial' : tmp0_elvis_lhs;
      this_0.fontFamily = !(tmp == null) ? tmp : THROW_CCE();
      var tmp121_safe_receiver = $props.data.l2j_1;
      var tmp1_elvis_lhs = tmp121_safe_receiver == null ? null : tmp121_safe_receiver.z2j_1;
      var tmp_0 = tmp1_elvis_lhs == null ? 'normal' : tmp1_elvis_lhs;
      this_0.fontWeight = !(tmp_0 == null) ? tmp_0 : THROW_CCE();
      var tmp122_safe_receiver = $props.data.l2j_1;
      var tmp2_elvis_lhs = tmp122_safe_receiver == null ? null : tmp122_safe_receiver.a2k_1;
      var tmp_1 = tmp2_elvis_lhs == null ? 'normal' : tmp2_elvis_lhs;
      this_0.fontStyle = !(tmp_1 == null) ? tmp_1 : THROW_CCE();
      var tmp123_safe_receiver = $props.data.l2j_1;
      var tmp124_safe_receiver = tmp123_safe_receiver == null ? null : tmp123_safe_receiver.w2j_1;
      var tmp_2;
      if (tmp124_safe_receiver == null) {
        tmp_2 = null;
      } else {
        // Inline function 'web.cssom.em' call
        // Inline function 'js.reflect.unsafeCast' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp_2 = toString_0(tmp124_safe_receiver) + 'em';
      }
      this_0.fontSize = tmp_2;
      // Inline function 'web.cssom.Color' call
      var tmp125_safe_receiver = $props.data.l2j_1;
      var tmp3_elvis_lhs = tmp125_safe_receiver == null ? null : tmp125_safe_receiver.x2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.color = tmp3_elvis_lhs == null ? 'black' : tmp3_elvis_lhs;
      var tmp_3;
      switch ($props.data.m2j_1.qc_1) {
        case 'left':
          // Inline function 'web.cssom.JustifyContent.Companion.flexStart' call

          tmp_3 = 'flex-start';
          break;
        case 'center':
          // Inline function 'web.cssom.JustifyContent.Companion.center' call

          tmp_3 = 'center';
          break;
        case 'right':
          // Inline function 'web.cssom.JustifyContent.Companion.flexEnd' call

          tmp_3 = 'flex-end';
          break;
        default:
          // Inline function 'web.cssom.JustifyContent.Companion.center' call

          tmp_3 = 'center';
          break;
      }
      this_0.justifyContent = tmp_3;
      var tmp_4;
      switch ($props.data.m2j_1.qc_1) {
        case 'left':
          // Inline function 'web.cssom.TextAlign.Companion.left' call

          tmp_4 = 'left';
          break;
        case 'center':
          // Inline function 'web.cssom.TextAlign.Companion.center' call

          tmp_4 = 'center';
          break;
        case 'right':
          // Inline function 'web.cssom.TextAlign.Companion.right' call

          tmp_4 = 'right';
          break;
        default:
          // Inline function 'web.cssom.TextAlign.Companion.center' call

          tmp_4 = 'center';
          break;
      }
      this_0.textAlign = tmp_4;
      var tmp_5;
      switch ($props.data.m2j_1.rc_1) {
        case 'top':
          // Inline function 'web.cssom.AlignItems.Companion.flexStart' call

          tmp_5 = 'flex-start';
          break;
        case 'center':
          // Inline function 'web.cssom.AlignItems.Companion.center' call

          tmp_5 = 'center';
          break;
        case 'bottom':
          // Inline function 'web.cssom.AlignItems.Companion.flexEnd' call

          tmp_5 = 'flex-end';
          break;
        default:
          // Inline function 'web.cssom.AlignItems.Companion.center' call

          tmp_5 = 'center';
          break;
      }
      this_0.alignItems = tmp_5;
      // Inline function 'web.cssom.em' call
      var this_1 = $props.data.n2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.left = toString_0(this_1) + 'em';
      // Inline function 'web.cssom.em' call
      var this_2 = $props.data.o2j_1;
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.top = toString_0(this_2) + 'em';
      // Inline function 'web.cssom.number' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      this_0.opacity = $props.data.c2i_1;
      $this$bgwTextVisual.className = css(this_0);
      // Inline function 'react.ReactNode' call
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$39 = $props.data.k2j_1;
      addChildNode($this$bgwTextVisual, tmp$ret$39);
      return Unit_instance;
    };
  }
  var properties_initialized_TextVisual_kt_h4ohld;
  function _init_properties_TextVisual_kt__1hhadv() {
    if (!properties_initialized_TextVisual_kt_h4ohld) {
      properties_initialized_TextVisual_kt_h4ohld = true;
      TextVisual = FC(TextVisual$lambda);
    }
  }
  function applyCommonEventHandlers(_this__u8e3s4, props) {
    _this__u8e3s4.onClick = applyCommonEventHandlers$lambda(props);
    _this__u8e3s4.onMouseDown = applyCommonEventHandlers$lambda_0(props);
    _this__u8e3s4.onMouseUp = applyCommonEventHandlers$lambda_1(props);
    _this__u8e3s4.onAuxClick = applyCommonEventHandlers$lambda_2(props);
    _this__u8e3s4.onKeyDown = applyCommonEventHandlers$lambda_3(props);
    _this__u8e3s4.onKeyUp = applyCommonEventHandlers$lambda_4(props);
    if (props.s1s_1) {
      _this__u8e3s4.onMouseEnter = applyCommonEventHandlers$lambda_5(props);
    }
    if (props.t1s_1) {
      _this__u8e3s4.onMouseLeave = applyCommonEventHandlers$lambda_6(props);
    }
    var debounceTimeout = {_v: null};
    var lastScrollDirection = {_v: null};
    _this__u8e3s4.onWheel = applyCommonEventHandlers$lambda_7(debounceTimeout, lastScrollDirection, props);
  }
  function applyCommonEventHandlers$lambda($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.s2u(it, $props.a1s_1));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_0($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.t2u(it, $props.a1s_1));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_1($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.u2u(it, $props.a1s_1));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_2($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.s2u(it, $props.a1s_1));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_3($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.v2u(it, $props.a1s_1, KeyEventAction_PRESS_getInstance()));
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.v2u(it, $props.a1s_1, KeyEventAction_TYPE_getInstance()));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_4($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.v2u(it, $props.a1s_1, KeyEventAction_RELEASE_getInstance()));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_5($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.q2u(it, $props.a1s_1));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_6($props) {
    return function (it) {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.r2u(it, $props.a1s_1));
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda$lambda($it, $props, $debounceTimeout) {
    return function () {
      JCEFEventDispatcher_getInstance().k2u(ReactConverters_instance.b2v($it, $props.a1s_1));
      $debounceTimeout._v = null;
      return Unit_instance;
    };
  }
  function applyCommonEventHandlers$lambda_7($debounceTimeout, $lastScrollDirection, $props) {
    return function (it) {
      // Inline function 'kotlin.math.sign' call
      var this_0 = it.deltaY;
      var currentDirection = sign(this_0);
      var tmp;
      if ($debounceTimeout._v == null || !(currentDirection === $lastScrollDirection._v)) {
        var tmp129_safe_receiver = $debounceTimeout._v;
        if (tmp129_safe_receiver == null)
          null;
        else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          clearTimeout(tmp129_safe_receiver);
        }
        $debounceTimeout._v = setTimeout(applyCommonEventHandlers$lambda$lambda(it, $props, $debounceTimeout), 200);
        $lastScrollDirection._v = currentDirection;
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function initialize($this) {
    window.bgwQuery = function (request) {
      if (window.cefQuery)
        window.cefQuery({request: request, persistent: false, onSuccess: function (response) {
        }, onFailure: function (error_code, error_message) {
        }});
    };
    window.bgwAnimationQuery = function (request) {
      if (window.cefAnimationQuery)
        window.cefAnimationQuery({request: request, persistent: false, onSuccess: function (response) {
        }, onFailure: function (error_code, error_message) {
        }});
    };
    window.bgwSceneQuery = function (request) {
      if (window.cefSceneQuery)
        window.cefSceneQuery({request: request, persistent: false, onSuccess: function (response) {
        }, onFailure: function (error_code, error_message) {
        }});
    };
  }
  function JCEFEventDispatcher() {
    JCEFEventDispatcher_instance = this;
    initialize(this);
  }
  protoOf(JCEFEventDispatcher).o2v = function (event) {
    // Inline function 'kotlinx.serialization.encodeToString' call
    var this_0 = get_jsonMapper();
    // Inline function 'kotlinx.serialization.serializer' call
    var this_1 = this_0.qm();
    // Inline function 'kotlinx.serialization.internal.cast' call
    var this_2 = serializer_0(this_1, createKType(getKClass(KeyEventData), arrayOf([]), false));
    var tmp$ret$1 = isInterface(this_2, KSerializer) ? this_2 : THROW_CCE();
    var json = this_0.y13(tmp$ret$1, event);
    try {
      // Inline function 'kotlin.js.asDynamic' call
      window.bgwSceneQuery(Base64_instance.w1p(json));
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
        println('Error while dispatching event: ' + e.toString());
      } else {
        throw $p;
      }
    }
  };
  protoOf(JCEFEventDispatcher).l2u = function (event) {
    // Inline function 'kotlinx.serialization.encodeToString' call
    var this_0 = get_jsonMapper();
    // Inline function 'kotlinx.serialization.serializer' call
    var this_1 = this_0.qm();
    // Inline function 'kotlinx.serialization.internal.cast' call
    var this_2 = serializer_0(this_1, createKType(getKClass(AnimationFinishedEventData), arrayOf([]), false));
    var tmp$ret$1 = isInterface(this_2, KSerializer) ? this_2 : THROW_CCE();
    var json = this_0.y13(tmp$ret$1, event);
    try {
      // Inline function 'kotlin.js.asDynamic' call
      window.bgwAnimationQuery(Base64_instance.w1p(json));
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
        println('Error while dispatching event: ' + e.toString());
      } else {
        throw $p;
      }
    }
  };
  protoOf(JCEFEventDispatcher).k2u = function (event) {
    // Inline function 'kotlinx.serialization.encodeToString' call
    var this_0 = get_jsonMapper();
    // Inline function 'kotlinx.serialization.serializer' call
    var this_1 = this_0.qm();
    // Inline function 'kotlinx.serialization.internal.cast' call
    var this_2 = serializer_0(this_1, createKType(getKClass(EventData), arrayOf([]), false));
    var tmp$ret$1 = isInterface(this_2, KSerializer) ? this_2 : THROW_CCE();
    var json = this_0.y13(tmp$ret$1, event);
    try {
      // Inline function 'kotlin.js.asDynamic' call
      window.bgwQuery(Base64_instance.w1p(json));
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
        println('Error while dispatching event: ' + e.toString());
      } else {
        throw $p;
      }
    }
  };
  var JCEFEventDispatcher_instance;
  function JCEFEventDispatcher_getInstance() {
    if (JCEFEventDispatcher_instance == null)
      new JCEFEventDispatcher();
    return JCEFEventDispatcher_instance;
  }
  //region block: post-declaration
  protoOf($serializer).fu = typeParametersSerializers;
  protoOf($serializer_0).fu = typeParametersSerializers;
  protoOf($serializer_1).fu = typeParametersSerializers;
  protoOf($serializer_2).fu = typeParametersSerializers;
  protoOf($serializer_3).fu = typeParametersSerializers;
  protoOf($serializer_4).fu = typeParametersSerializers;
  protoOf($serializer_5).fu = typeParametersSerializers;
  protoOf($serializer_6).fu = typeParametersSerializers;
  protoOf($serializer_7).fu = typeParametersSerializers;
  protoOf($serializer_8).fu = typeParametersSerializers;
  protoOf($serializer_9).fu = typeParametersSerializers;
  protoOf($serializer_10).fu = typeParametersSerializers;
  protoOf($serializer_11).fu = typeParametersSerializers;
  protoOf($serializer_12).fu = typeParametersSerializers;
  protoOf($serializer_13).fu = typeParametersSerializers;
  protoOf($serializer_14).fu = typeParametersSerializers;
  protoOf($serializer_15).fu = typeParametersSerializers;
  protoOf($serializer_16).fu = typeParametersSerializers;
  protoOf($serializer_17).fu = typeParametersSerializers;
  protoOf($serializer_18).fu = typeParametersSerializers;
  protoOf($serializer_19).fu = typeParametersSerializers;
  protoOf($serializer_20).fu = typeParametersSerializers;
  protoOf($serializer_21).fu = typeParametersSerializers;
  protoOf($serializer_22).fu = typeParametersSerializers;
  protoOf($serializer_23).fu = typeParametersSerializers;
  protoOf($serializer_24).fu = typeParametersSerializers;
  protoOf($serializer_25).fu = typeParametersSerializers;
  protoOf($serializer_26).fu = typeParametersSerializers;
  protoOf($serializer_27).fu = typeParametersSerializers;
  protoOf($serializer_28).fu = typeParametersSerializers;
  protoOf($serializer_29).fu = typeParametersSerializers;
  protoOf($serializer_30).fu = typeParametersSerializers;
  protoOf($serializer_31).fu = typeParametersSerializers;
  protoOf($serializer_32).fu = typeParametersSerializers;
  protoOf($serializer_33).fu = typeParametersSerializers;
  protoOf($serializer_34).fu = typeParametersSerializers;
  protoOf($serializer_35).fu = typeParametersSerializers;
  protoOf($serializer_36).fu = typeParametersSerializers;
  protoOf($serializer_37).fu = typeParametersSerializers;
  protoOf($serializer_38).fu = typeParametersSerializers;
  protoOf($serializer_39).fu = typeParametersSerializers;
  protoOf($serializer_40).fu = typeParametersSerializers;
  protoOf($serializer_41).fu = typeParametersSerializers;
  protoOf($serializer_42).fu = typeParametersSerializers;
  protoOf($serializer_43).fu = typeParametersSerializers;
  protoOf($serializer_44).fu = typeParametersSerializers;
  protoOf($serializer_45).fu = typeParametersSerializers;
  protoOf($serializer_46).fu = typeParametersSerializers;
  protoOf($serializer_47).fu = typeParametersSerializers;
  protoOf($serializer_48).fu = typeParametersSerializers;
  protoOf($serializer_49).fu = typeParametersSerializers;
  protoOf($serializer_50).fu = typeParametersSerializers;
  protoOf($serializer_51).fu = typeParametersSerializers;
  protoOf($serializer_52).fu = typeParametersSerializers;
  protoOf($serializer_53).fu = typeParametersSerializers;
  protoOf($serializer_54).fu = typeParametersSerializers;
  protoOf($serializer_55).fu = typeParametersSerializers;
  protoOf($serializer_56).fu = typeParametersSerializers;
  protoOf($serializer_57).fu = typeParametersSerializers;
  protoOf($serializer_58).fu = typeParametersSerializers;
  protoOf($serializer_59).fu = typeParametersSerializers;
  protoOf($serializer_60).fu = typeParametersSerializers;
  protoOf($serializer_61).fu = typeParametersSerializers;
  protoOf($serializer_62).fu = typeParametersSerializers;
  protoOf($serializer_63).fu = typeParametersSerializers;
  protoOf($serializer_64).fu = typeParametersSerializers;
  protoOf($serializer_65).fu = typeParametersSerializers;
  protoOf($serializer_66).fu = typeParametersSerializers;
  protoOf($serializer_67).fu = typeParametersSerializers;
  protoOf($serializer_68).fu = typeParametersSerializers;
  protoOf($serializer_69).fu = typeParametersSerializers;
  protoOf($serializer_70).fu = typeParametersSerializers;
  protoOf($serializer_71).fu = typeParametersSerializers;
  defineProp(protoOf(Area$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Area$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(Area$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Area$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(CardStack$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(CardStack$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(CardStack$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(CardStack$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(HexagonGrid$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(HexagonGrid$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(HexagonGrid$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(HexagonGrid$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(LinearLayout$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(LinearLayout$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(LinearLayout$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(LinearLayout$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(Satchel$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Satchel$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(Satchel$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Satchel$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(CardView$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(CardView$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(CardView$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(CardView$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(DiceView$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(DiceView$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(DiceView$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(DiceView$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(HexagonView$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(HexagonView$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(HexagonView$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(HexagonView$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(TokenView$1$draggable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(TokenView$1$draggable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(TokenView$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(TokenView$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(ReactGridPane$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(ReactGridPane$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(Pane$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Pane$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(Button$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Button$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(CheckBox$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(CheckBox$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(ColorPicker$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(ColorPicker$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(ComboBox$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(ComboBox$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(Label$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(Label$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(ListView$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(ListView$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(PasswordField$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(PasswordField$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(ProgressBar$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(ProgressBar$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(RadioButton$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(RadioButton$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(TableView$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(TableView$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(TextArea$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(TextArea$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(TextField$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(TextField$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  defineProp(protoOf(ToggleButton$1$droppable$1), 'id', function () {
    return this.r2o();
  }, function (value) {
    this.r2v(value);
  });
  defineProp(protoOf(ToggleButton$1$droppable$1), 'disabled', function () {
    return this.t2v();
  }, function (value) {
    this.s2v(value);
  });
  //endregion
  //region block: init
  Base64_instance = new Base64();
  Companion_instance_0 = new Companion_0();
  Companion_instance_50 = new Companion_50();
  Companion_instance_63 = new Companion_63();
  Companion_instance_64 = new Companion_64();
  Companion_instance_65 = new Companion_65();
  Companion_instance_66 = new Companion_66();
  Companion_instance_67 = new Companion_67();
  Companion_instance_68 = new Companion_68();
  Companion_instance_69 = new Companion_69();
  Companion_instance_70 = new Companion_70();
  Companion_instance_71 = new Companion_71();
  Companion_instance_78 = new Companion_78();
  Companion_instance_84 = new Companion_84();
  Companion_instance_86 = new Companion_86();
  Companion_instance_87 = new Companion_87();
  Companion_instance_88 = new Companion_88();
  Companion_instance_92 = new Companion_92();
  Config_instance = new Config();
  ContainerBuilder_instance = new ContainerBuilder();
  LayoutNodeBuilder_instance = new LayoutNodeBuilder();
  NodeBuilder_instance = new NodeBuilder();
  ReactConverters_instance = new ReactConverters();
  SceneBuilder_instance = new SceneBuilder();
  VisualBuilder_instance = new VisualBuilder();
  //endregion
  mainWrapper();
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-cssom-core.js":
/*!*************************************!*\
  !*** ./kotlin/kotlin-cssom-core.js ***!
  \*************************************/
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_) {
  'use strict';
  //region block: pre-declaration
  //endregion
  function Content(value) {
    // Inline function 'web.cssom.string' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return "'" + CSS.escape(value) + "'";
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = Content;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-js.js":
/*!*****************************!*\
  !*** ./kotlin/kotlin-js.js ***!
  \*****************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlinx-coroutines-core.js */ "./kotlin/kotlinx-coroutines-core.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core) {
  'use strict';
  //region block: imports
  var constructor = (class IteratorYieldResult {
    static [Symbol.hasInstance](instance) {
        return instance && (typeof instance === 'object') && (instance.done === false)
    }
    }.prototype).constructor;
  var VOID = kotlin_kotlin.$_$.e;
  var EmptyCoroutineContext_getInstance = kotlin_kotlin.$_$.g3;
  var CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.c;
  var iterator = kotlin_kotlin.$_$.i9;
  var CoroutineImpl = kotlin_kotlin.$_$.z6;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var protoOf = kotlin_kotlin.$_$.s8;
  var THROW_CCE = kotlin_kotlin.$_$.za;
  var SequenceScope = kotlin_kotlin.$_$.h9;
  var get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.k6;
  var initMetadataForLambda = kotlin_kotlin.$_$.a8;
  var intercepted = kotlin_kotlin.$_$.m6;
  var CancellableContinuationImpl = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.b;
  var resume = kotlin_kotlin.$_$.b7;
  var resumeWithException = kotlin_kotlin.$_$.a7;
  //endregion
  //region block: pre-declaration
  initMetadataForLambda(iteratorFromJsIteratorLike$slambda, CoroutineImpl, VOID, [1]);
  //endregion
  function copy(_this__u8e3s4, hourCycle, second, timeZone, calendar, era, dateStyle, formatMatcher, day, localeMatcher, hour12, fractionalSecondDigits, month, hour, dayPeriod, weekday, minute, timeStyle, timeZoneName, year, numberingSystem) {
    hourCycle = hourCycle === VOID ? VOID : hourCycle;
    second = second === VOID ? VOID : second;
    timeZone = timeZone === VOID ? VOID : timeZone;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    dateStyle = dateStyle === VOID ? VOID : dateStyle;
    formatMatcher = formatMatcher === VOID ? VOID : formatMatcher;
    day = day === VOID ? VOID : day;
    localeMatcher = localeMatcher === VOID ? VOID : localeMatcher;
    hour12 = hour12 === VOID ? VOID : hour12;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    month = month === VOID ? VOID : month;
    hour = hour === VOID ? VOID : hour;
    dayPeriod = dayPeriod === VOID ? VOID : dayPeriod;
    weekday = weekday === VOID ? VOID : weekday;
    minute = minute === VOID ? VOID : minute;
    timeStyle = timeStyle === VOID ? VOID : timeStyle;
    timeZoneName = timeZoneName === VOID ? VOID : timeZoneName;
    year = year === VOID ? VOID : year;
    numberingSystem = numberingSystem === VOID ? VOID : numberingSystem;
    return Object.assign({}, _this__u8e3s4, {hourCycle: hourCycle, second: second, timeZone: timeZone, calendar: calendar, era: era, dateStyle: dateStyle, formatMatcher: formatMatcher, day: day, localeMatcher: localeMatcher, hour12: hour12, fractionalSecondDigits: fractionalSecondDigits, month: month, hour: hour, dayPeriod: dayPeriod, weekday: weekday, minute: minute, timeStyle: timeStyle, timeZoneName: timeZoneName, year: year, numberingSystem: numberingSystem});
  }
  function invoke(_this__u8e3s4, hourCycle, second, timeZone, calendar, era, dateStyle, formatMatcher, day, localeMatcher, hour12, fractionalSecondDigits, month, hour, dayPeriod, weekday, minute, timeStyle, timeZoneName, year, numberingSystem) {
    hourCycle = hourCycle === VOID ? VOID : hourCycle;
    second = second === VOID ? VOID : second;
    timeZone = timeZone === VOID ? VOID : timeZone;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    dateStyle = dateStyle === VOID ? VOID : dateStyle;
    formatMatcher = formatMatcher === VOID ? VOID : formatMatcher;
    day = day === VOID ? VOID : day;
    localeMatcher = localeMatcher === VOID ? VOID : localeMatcher;
    hour12 = hour12 === VOID ? VOID : hour12;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    month = month === VOID ? VOID : month;
    hour = hour === VOID ? VOID : hour;
    dayPeriod = dayPeriod === VOID ? VOID : dayPeriod;
    weekday = weekday === VOID ? VOID : weekday;
    minute = minute === VOID ? VOID : minute;
    timeStyle = timeStyle === VOID ? VOID : timeStyle;
    timeZoneName = timeZoneName === VOID ? VOID : timeZoneName;
    year = year === VOID ? VOID : year;
    numberingSystem = numberingSystem === VOID ? VOID : numberingSystem;
    return {hourCycle: hourCycle, second: second, timeZone: timeZone, calendar: calendar, era: era, dateStyle: dateStyle, formatMatcher: formatMatcher, day: day, localeMatcher: localeMatcher, hour12: hour12, fractionalSecondDigits: fractionalSecondDigits, month: month, hour: hour, dayPeriod: dayPeriod, weekday: weekday, minute: minute, timeStyle: timeStyle, timeZoneName: timeZoneName, year: year, numberingSystem: numberingSystem};
  }
  function copy_0(_this__u8e3s4, maxByteLength) {
    maxByteLength = maxByteLength === VOID ? VOID : maxByteLength;
    return Object.assign({}, _this__u8e3s4, {maxByteLength: maxByteLength});
  }
  function invoke_0(_this__u8e3s4, maxByteLength) {
    return {maxByteLength: maxByteLength};
  }
  function get_POW() {
    _init_properties_BigInt_kt__agomkx();
    return POW;
  }
  var POW;
  function get_n(_this__u8e3s4) {
    _init_properties_BigInt_kt__agomkx();
    return BigInt(_this__u8e3s4);
  }
  var properties_initialized_BigInt_kt_nhzooh;
  function _init_properties_BigInt_kt__agomkx() {
    if (!properties_initialized_BigInt_kt_nhzooh) {
      properties_initialized_BigInt_kt_nhzooh = true;
      POW = Function('base', 'exponent', 'return base ** exponent');
    }
  }
  function IsolatedCoroutineScope() {
    return CoroutineScope(EmptyCoroutineContext_getInstance());
  }
  function invoke_1(_this__u8e3s4, p1, p2) {
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4(p1, p2);
  }
  function iteratorFromJsIterable(source) {
    // Inline function 'js.iterable.JsIterator.iterator' call
    var this_0 = source[Symbol.iterator]();
    return iteratorFromJsIteratorLike(this_0);
  }
  function iteratorFromJsIteratorLike(source) {
    return iterator(iteratorFromJsIteratorLike$slambda_0(source, null));
  }
  function iteratorFromJsIteratorLike$slambda($source, resultContinuation) {
    this.n1p_1 = $source;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(iteratorFromJsIteratorLike$slambda).s1p = function ($this$iterator, $completion) {
    var tmp = this.t1p($this$iterator, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(iteratorFromJsIteratorLike$slambda).r8 = function (p1, $completion) {
    return this.s1p(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(iteratorFromJsIteratorLike$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        switch (tmp) {
          case 0:
            this.z7_1 = 5;
            this.y7_1 = 1;
            continue $sm;
          case 1:
            var tmp_0 = this;
            var tmp_1 = this.n1p_1.next();
            tmp_0.p1p_1 = tmp_1 instanceof constructor ? tmp_1 : null;
            if (this.p1p_1 == null) {
              this.y7_1 = 4;
              var tmp_2 = this;
              continue $sm;
            } else {
              this.q1p_1 = this.p1p_1;
              this.y7_1 = 2;
              continue $sm;
            }

          case 2:
            this.r1p_1 = this.q1p_1;
            this.y7_1 = 3;
            suspendResult = this.o1p_1.vc(this.r1p_1.value, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 3:
            this.y7_1 = 1;
            continue $sm;
          case 4:
            return Unit_instance;
          case 5:
            throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.z7_1 === 5) {
          throw e;
        } else {
          this.y7_1 = this.z7_1;
          this.b8_1 = e;
        }
      }
     while (true);
  };
  protoOf(iteratorFromJsIteratorLike$slambda).t1p = function ($this$iterator, completion) {
    var i = new iteratorFromJsIteratorLike$slambda(this.n1p_1, completion);
    i.o1p_1 = $this$iterator;
    return i;
  };
  function iteratorFromJsIteratorLike$slambda_0($source, resultContinuation) {
    var i = new iteratorFromJsIteratorLike$slambda($source, resultContinuation);
    var l = function ($this$iterator, $completion) {
      return i.s1p($this$iterator, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function copy_1(_this__u8e3s4, enumerable, value, get, writable, set, configurable) {
    enumerable = enumerable === VOID ? VOID : enumerable;
    value = value === VOID ? VOID : value;
    get = get === VOID ? VOID : get;
    writable = writable === VOID ? VOID : writable;
    set = set === VOID ? VOID : set;
    configurable = configurable === VOID ? VOID : configurable;
    return Object.assign({}, _this__u8e3s4, {enumerable: enumerable, value: value, get: get, writable: writable, set: set, configurable: configurable});
  }
  function invoke_2(_this__u8e3s4, enumerable, value, get, writable, set, configurable) {
    enumerable = enumerable === VOID ? VOID : enumerable;
    value = value === VOID ? VOID : value;
    get = get === VOID ? VOID : get;
    writable = writable === VOID ? VOID : writable;
    set = set === VOID ? VOID : set;
    configurable = configurable === VOID ? VOID : configurable;
    return {enumerable: enumerable, value: value, get: get, writable: writable, set: set, configurable: configurable};
  }
  function awaitPromiseLike(promise, $completion) {
    // Inline function 'kotlinx.coroutines.suspendCancellableCoroutine.<anonymous>' call
    var cancellable = new CancellableContinuationImpl(intercepted($completion), 1);
    cancellable.p1i();
    // Inline function 'js.promise.PromiseLike.thenTo' call
    thenToContinuation(promise, cancellable);
    return cancellable.z1i();
  }
  function thenToContinuation(promise, continuation) {
    var tmp = resume$ref(continuation);
    promise.then(tmp, resumeWithException$ref(continuation));
  }
  function resume$ref($boundThis) {
    var l = function (p0) {
      resume($boundThis, p0);
      return Unit_instance;
    };
    l.callableName = 'resume';
    return l;
  }
  function resumeWithException$ref($boundThis) {
    var l = function (p0) {
      resumeWithException($boundThis, p0);
      return Unit_instance;
    };
    l.callableName = 'resumeWithException';
    return l;
  }
  function unsafeCast(value) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return value;
  }
  function unsafeCast_0(value) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return value;
  }
  function copy_2(_this__u8e3s4, overflow) {
    overflow = overflow === VOID ? VOID : overflow;
    return Object.assign({}, _this__u8e3s4, {overflow: overflow});
  }
  function invoke_3(_this__u8e3s4, overflow) {
    overflow = overflow === VOID ? VOID : overflow;
    return {overflow: overflow};
  }
  function copy_3(_this__u8e3s4, overflow) {
    overflow = overflow === VOID ? VOID : overflow;
    return Object.assign({}, _this__u8e3s4, {overflow: overflow});
  }
  function invoke_4(_this__u8e3s4, overflow) {
    overflow = overflow === VOID ? VOID : overflow;
    return {overflow: overflow};
  }
  function copy_4(_this__u8e3s4, era, eraYear, year, month, monthCode, day) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    day = day === VOID ? VOID : day;
    return Object.assign({}, _this__u8e3s4, {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode, day: day});
  }
  function invoke_5(_this__u8e3s4, era, eraYear, year, month, monthCode, day) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode, day: day};
  }
  function copy_5(_this__u8e3s4, era, eraYear, year, month, monthCode) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return Object.assign({}, _this__u8e3s4, {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode});
  }
  function invoke_6(_this__u8e3s4, era, eraYear, year, month, monthCode) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode};
  }
  function copy_6(_this__u8e3s4, era, eraYear, year, month, monthCode, day) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    day = day === VOID ? VOID : day;
    return Object.assign({}, _this__u8e3s4, {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode, day: day});
  }
  function invoke_7(_this__u8e3s4, era, eraYear, year, month, monthCode, day) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode, day: day};
  }
  function copy_7(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits, calendarName) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    calendarName = calendarName === VOID ? VOID : calendarName;
    return Object.assign({}, _this__u8e3s4, {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits, calendarName: calendarName});
  }
  function invoke_8(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits, calendarName) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    calendarName = calendarName === VOID ? VOID : calendarName;
    return {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits, calendarName: calendarName};
  }
  function copy_8(_this__u8e3s4, roundingIncrement, smallestUnit, roundingMode, largestUnit) {
    roundingIncrement = roundingIncrement === VOID ? VOID : roundingIncrement;
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    largestUnit = largestUnit === VOID ? VOID : largestUnit;
    return Object.assign({}, _this__u8e3s4, {roundingIncrement: roundingIncrement, smallestUnit: smallestUnit, roundingMode: roundingMode, largestUnit: largestUnit});
  }
  function invoke_9(_this__u8e3s4, roundingIncrement, smallestUnit, roundingMode, largestUnit) {
    roundingIncrement = roundingIncrement === VOID ? VOID : roundingIncrement;
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    largestUnit = largestUnit === VOID ? VOID : largestUnit;
    return {roundingIncrement: roundingIncrement, smallestUnit: smallestUnit, roundingMode: roundingMode, largestUnit: largestUnit};
  }
  function copy_9(_this__u8e3s4, relativeTo) {
    relativeTo = relativeTo === VOID ? VOID : relativeTo;
    return Object.assign({}, _this__u8e3s4, {relativeTo: relativeTo});
  }
  function invoke_10(_this__u8e3s4, relativeTo) {
    relativeTo = relativeTo === VOID ? VOID : relativeTo;
    return {relativeTo: relativeTo};
  }
  function copy_10(_this__u8e3s4, microseconds, milliseconds, days, nanoseconds, months, hours, minutes, years, seconds, weeks) {
    microseconds = microseconds === VOID ? VOID : microseconds;
    milliseconds = milliseconds === VOID ? VOID : milliseconds;
    days = days === VOID ? VOID : days;
    nanoseconds = nanoseconds === VOID ? VOID : nanoseconds;
    months = months === VOID ? VOID : months;
    hours = hours === VOID ? VOID : hours;
    minutes = minutes === VOID ? VOID : minutes;
    years = years === VOID ? VOID : years;
    seconds = seconds === VOID ? VOID : seconds;
    weeks = weeks === VOID ? VOID : weeks;
    return Object.assign({}, _this__u8e3s4, {microseconds: microseconds, milliseconds: milliseconds, days: days, nanoseconds: nanoseconds, months: months, hours: hours, minutes: minutes, years: years, seconds: seconds, weeks: weeks});
  }
  function invoke_11(_this__u8e3s4, microseconds, milliseconds, days, nanoseconds, months, hours, minutes, years, seconds, weeks) {
    microseconds = microseconds === VOID ? VOID : microseconds;
    milliseconds = milliseconds === VOID ? VOID : milliseconds;
    days = days === VOID ? VOID : days;
    nanoseconds = nanoseconds === VOID ? VOID : nanoseconds;
    months = months === VOID ? VOID : months;
    hours = hours === VOID ? VOID : hours;
    minutes = minutes === VOID ? VOID : minutes;
    years = years === VOID ? VOID : years;
    seconds = seconds === VOID ? VOID : seconds;
    weeks = weeks === VOID ? VOID : weeks;
    return {microseconds: microseconds, milliseconds: milliseconds, days: days, nanoseconds: nanoseconds, months: months, hours: hours, minutes: minutes, years: years, seconds: seconds, weeks: weeks};
  }
  function copy_11(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits, timeZone) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    timeZone = timeZone === VOID ? VOID : timeZone;
    return Object.assign({}, _this__u8e3s4, {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits, timeZone: timeZone});
  }
  function invoke_12(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits, timeZone) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    return {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits, timeZone: timeZone};
  }
  function copy_12(_this__u8e3s4, era, eraYear, year, month, monthCode) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return Object.assign({}, _this__u8e3s4, {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode});
  }
  function invoke_13(_this__u8e3s4, era, eraYear, year, month, monthCode) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return {era: era, eraYear: eraYear, year: year, month: month, monthCode: monthCode};
  }
  function copy_13(_this__u8e3s4, month, monthCode) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return Object.assign({}, _this__u8e3s4, {month: month, monthCode: monthCode});
  }
  function invoke_14(_this__u8e3s4, month, monthCode) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    return {month: month, monthCode: monthCode};
  }
  function copy_14(_this__u8e3s4, offset) {
    offset = offset === VOID ? VOID : offset;
    return Object.assign({}, _this__u8e3s4, {offset: offset});
  }
  function invoke_15(_this__u8e3s4, offset) {
    offset = offset === VOID ? VOID : offset;
    return {offset: offset};
  }
  function copy_15(_this__u8e3s4, isoDay, calendar, isoMonth, isoYear) {
    isoDay = isoDay === VOID ? VOID : isoDay;
    calendar = calendar === VOID ? VOID : calendar;
    isoMonth = isoMonth === VOID ? VOID : isoMonth;
    isoYear = isoYear === VOID ? VOID : isoYear;
    return Object.assign({}, _this__u8e3s4, {isoDay: isoDay, calendar: calendar, isoMonth: isoMonth, isoYear: isoYear});
  }
  function invoke_16(_this__u8e3s4, isoDay, calendar, isoMonth, isoYear) {
    return {isoDay: isoDay, calendar: calendar, isoMonth: isoMonth, isoYear: isoYear};
  }
  function copy_16(_this__u8e3s4, month, monthCode, calendar, era, eraYear, day, year) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    day = day === VOID ? VOID : day;
    year = year === VOID ? VOID : year;
    return Object.assign({}, _this__u8e3s4, {month: month, monthCode: monthCode, calendar: calendar, era: era, eraYear: eraYear, day: day, year: year});
  }
  function invoke_17(_this__u8e3s4, month, monthCode, calendar, era, eraYear, day, year) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    day = day === VOID ? VOID : day;
    year = year === VOID ? VOID : year;
    return {month: month, monthCode: monthCode, calendar: calendar, era: era, eraYear: eraYear, day: day, year: year};
  }
  function copy_17(_this__u8e3s4, isoDay, isoSecond, calendar, isoMonth, isoMinute, isoMicrosecond, isoNanosecond, isoYear, isoHour, isoMillisecond) {
    isoDay = isoDay === VOID ? VOID : isoDay;
    isoSecond = isoSecond === VOID ? VOID : isoSecond;
    calendar = calendar === VOID ? VOID : calendar;
    isoMonth = isoMonth === VOID ? VOID : isoMonth;
    isoMinute = isoMinute === VOID ? VOID : isoMinute;
    isoMicrosecond = isoMicrosecond === VOID ? VOID : isoMicrosecond;
    isoNanosecond = isoNanosecond === VOID ? VOID : isoNanosecond;
    isoYear = isoYear === VOID ? VOID : isoYear;
    isoHour = isoHour === VOID ? VOID : isoHour;
    isoMillisecond = isoMillisecond === VOID ? VOID : isoMillisecond;
    return Object.assign({}, _this__u8e3s4, {isoDay: isoDay, isoSecond: isoSecond, calendar: calendar, isoMonth: isoMonth, isoMinute: isoMinute, isoMicrosecond: isoMicrosecond, isoNanosecond: isoNanosecond, isoYear: isoYear, isoHour: isoHour, isoMillisecond: isoMillisecond});
  }
  function invoke_18(_this__u8e3s4, isoDay, isoSecond, calendar, isoMonth, isoMinute, isoMicrosecond, isoNanosecond, isoYear, isoHour, isoMillisecond) {
    return {isoDay: isoDay, isoSecond: isoSecond, calendar: calendar, isoMonth: isoMonth, isoMinute: isoMinute, isoMicrosecond: isoMicrosecond, isoNanosecond: isoNanosecond, isoYear: isoYear, isoHour: isoHour, isoMillisecond: isoMillisecond};
  }
  function copy_18(_this__u8e3s4, second, calendar, era, microsecond, nanosecond, day, millisecond, month, hour, monthCode, minute, eraYear, year) {
    second = second === VOID ? VOID : second;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    microsecond = microsecond === VOID ? VOID : microsecond;
    nanosecond = nanosecond === VOID ? VOID : nanosecond;
    day = day === VOID ? VOID : day;
    millisecond = millisecond === VOID ? VOID : millisecond;
    month = month === VOID ? VOID : month;
    hour = hour === VOID ? VOID : hour;
    monthCode = monthCode === VOID ? VOID : monthCode;
    minute = minute === VOID ? VOID : minute;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    return Object.assign({}, _this__u8e3s4, {second: second, calendar: calendar, era: era, microsecond: microsecond, nanosecond: nanosecond, day: day, millisecond: millisecond, month: month, hour: hour, monthCode: monthCode, minute: minute, eraYear: eraYear, year: year});
  }
  function invoke_19(_this__u8e3s4, second, calendar, era, microsecond, nanosecond, day, millisecond, month, hour, monthCode, minute, eraYear, year) {
    second = second === VOID ? VOID : second;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    microsecond = microsecond === VOID ? VOID : microsecond;
    nanosecond = nanosecond === VOID ? VOID : nanosecond;
    day = day === VOID ? VOID : day;
    millisecond = millisecond === VOID ? VOID : millisecond;
    month = month === VOID ? VOID : month;
    hour = hour === VOID ? VOID : hour;
    monthCode = monthCode === VOID ? VOID : monthCode;
    minute = minute === VOID ? VOID : minute;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    return {second: second, calendar: calendar, era: era, microsecond: microsecond, nanosecond: nanosecond, day: day, millisecond: millisecond, month: month, hour: hour, monthCode: monthCode, minute: minute, eraYear: eraYear, year: year};
  }
  function copy_19(_this__u8e3s4, month, monthCode, calendar, era, eraYear, day, year) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    day = day === VOID ? VOID : day;
    year = year === VOID ? VOID : year;
    return Object.assign({}, _this__u8e3s4, {month: month, monthCode: monthCode, calendar: calendar, era: era, eraYear: eraYear, day: day, year: year});
  }
  function invoke_20(_this__u8e3s4, month, monthCode, calendar, era, eraYear, day, year) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    day = day === VOID ? VOID : day;
    year = year === VOID ? VOID : year;
    return {month: month, monthCode: monthCode, calendar: calendar, era: era, eraYear: eraYear, day: day, year: year};
  }
  function copy_20(_this__u8e3s4, isoSecond, isoMinute, isoMicrosecond, isoNanosecond, isoHour, isoMillisecond) {
    isoSecond = isoSecond === VOID ? VOID : isoSecond;
    isoMinute = isoMinute === VOID ? VOID : isoMinute;
    isoMicrosecond = isoMicrosecond === VOID ? VOID : isoMicrosecond;
    isoNanosecond = isoNanosecond === VOID ? VOID : isoNanosecond;
    isoHour = isoHour === VOID ? VOID : isoHour;
    isoMillisecond = isoMillisecond === VOID ? VOID : isoMillisecond;
    return Object.assign({}, _this__u8e3s4, {isoSecond: isoSecond, isoMinute: isoMinute, isoMicrosecond: isoMicrosecond, isoNanosecond: isoNanosecond, isoHour: isoHour, isoMillisecond: isoMillisecond});
  }
  function invoke_21(_this__u8e3s4, isoSecond, isoMinute, isoMicrosecond, isoNanosecond, isoHour, isoMillisecond) {
    return {isoSecond: isoSecond, isoMinute: isoMinute, isoMicrosecond: isoMicrosecond, isoNanosecond: isoNanosecond, isoHour: isoHour, isoMillisecond: isoMillisecond};
  }
  function copy_21(_this__u8e3s4, hour, second, minute, microsecond, nanosecond, millisecond) {
    hour = hour === VOID ? VOID : hour;
    second = second === VOID ? VOID : second;
    minute = minute === VOID ? VOID : minute;
    microsecond = microsecond === VOID ? VOID : microsecond;
    nanosecond = nanosecond === VOID ? VOID : nanosecond;
    millisecond = millisecond === VOID ? VOID : millisecond;
    return Object.assign({}, _this__u8e3s4, {hour: hour, second: second, minute: minute, microsecond: microsecond, nanosecond: nanosecond, millisecond: millisecond});
  }
  function invoke_22(_this__u8e3s4, hour, second, minute, microsecond, nanosecond, millisecond) {
    hour = hour === VOID ? VOID : hour;
    second = second === VOID ? VOID : second;
    minute = minute === VOID ? VOID : minute;
    microsecond = microsecond === VOID ? VOID : microsecond;
    nanosecond = nanosecond === VOID ? VOID : nanosecond;
    millisecond = millisecond === VOID ? VOID : millisecond;
    return {hour: hour, second: second, minute: minute, microsecond: microsecond, nanosecond: nanosecond, millisecond: millisecond};
  }
  function copy_22(_this__u8e3s4, month, monthCode, calendar, era, eraYear, year) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    return Object.assign({}, _this__u8e3s4, {month: month, monthCode: monthCode, calendar: calendar, era: era, eraYear: eraYear, year: year});
  }
  function invoke_23(_this__u8e3s4, month, monthCode, calendar, era, eraYear, year) {
    month = month === VOID ? VOID : month;
    monthCode = monthCode === VOID ? VOID : monthCode;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    return {month: month, monthCode: monthCode, calendar: calendar, era: era, eraYear: eraYear, year: year};
  }
  function copy_23(_this__u8e3s4, roundingIncrement, smallestUnit, roundingMode) {
    roundingIncrement = roundingIncrement === VOID ? VOID : roundingIncrement;
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    return Object.assign({}, _this__u8e3s4, {roundingIncrement: roundingIncrement, smallestUnit: smallestUnit, roundingMode: roundingMode});
  }
  function invoke_24(_this__u8e3s4, roundingIncrement, smallestUnit, roundingMode) {
    roundingIncrement = roundingIncrement === VOID ? VOID : roundingIncrement;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    return {roundingIncrement: roundingIncrement, smallestUnit: smallestUnit, roundingMode: roundingMode};
  }
  function copy_24(_this__u8e3s4, calendarName) {
    calendarName = calendarName === VOID ? VOID : calendarName;
    return Object.assign({}, _this__u8e3s4, {calendarName: calendarName});
  }
  function invoke_25(_this__u8e3s4, calendarName) {
    calendarName = calendarName === VOID ? VOID : calendarName;
    return {calendarName: calendarName};
  }
  function copy_25(_this__u8e3s4, getPlainDateTimeFor, id, toString, getOffsetNanosecondsFor, getPreviousTransition, getPossibleInstantsFor, toJSON, getOffsetStringFor, getInstantFor, getNextTransition) {
    getPlainDateTimeFor = getPlainDateTimeFor === VOID ? VOID : getPlainDateTimeFor;
    id = id === VOID ? VOID : id;
    toString = toString === VOID ? VOID : toString;
    getOffsetNanosecondsFor = getOffsetNanosecondsFor === VOID ? VOID : getOffsetNanosecondsFor;
    getPreviousTransition = getPreviousTransition === VOID ? VOID : getPreviousTransition;
    getPossibleInstantsFor = getPossibleInstantsFor === VOID ? VOID : getPossibleInstantsFor;
    toJSON = toJSON === VOID ? VOID : toJSON;
    getOffsetStringFor = getOffsetStringFor === VOID ? VOID : getOffsetStringFor;
    getInstantFor = getInstantFor === VOID ? VOID : getInstantFor;
    getNextTransition = getNextTransition === VOID ? VOID : getNextTransition;
    return Object.assign({}, _this__u8e3s4, {getPlainDateTimeFor: getPlainDateTimeFor, id: id, toString: toString, getOffsetNanosecondsFor: getOffsetNanosecondsFor, getPreviousTransition: getPreviousTransition, getPossibleInstantsFor: getPossibleInstantsFor, toJSON: toJSON, getOffsetStringFor: getOffsetStringFor, getInstantFor: getInstantFor, getNextTransition: getNextTransition});
  }
  function invoke_26(_this__u8e3s4, getPlainDateTimeFor, id, toString, getOffsetNanosecondsFor, getPreviousTransition, getPossibleInstantsFor, toJSON, getOffsetStringFor, getInstantFor, getNextTransition) {
    getPlainDateTimeFor = getPlainDateTimeFor === VOID ? VOID : getPlainDateTimeFor;
    toString = toString === VOID ? VOID : toString;
    getPreviousTransition = getPreviousTransition === VOID ? VOID : getPreviousTransition;
    toJSON = toJSON === VOID ? VOID : toJSON;
    getOffsetStringFor = getOffsetStringFor === VOID ? VOID : getOffsetStringFor;
    getInstantFor = getInstantFor === VOID ? VOID : getInstantFor;
    getNextTransition = getNextTransition === VOID ? VOID : getNextTransition;
    return {getPlainDateTimeFor: getPlainDateTimeFor, id: id, toString: toString, getOffsetNanosecondsFor: getOffsetNanosecondsFor, getPreviousTransition: getPreviousTransition, getPossibleInstantsFor: getPossibleInstantsFor, toJSON: toJSON, getOffsetStringFor: getOffsetStringFor, getInstantFor: getInstantFor, getNextTransition: getNextTransition};
  }
  function copy_26(_this__u8e3s4, disambiguation) {
    disambiguation = disambiguation === VOID ? VOID : disambiguation;
    return Object.assign({}, _this__u8e3s4, {disambiguation: disambiguation});
  }
  function invoke_27(_this__u8e3s4, disambiguation) {
    disambiguation = disambiguation === VOID ? VOID : disambiguation;
    return {disambiguation: disambiguation};
  }
  function copy_27(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    return Object.assign({}, _this__u8e3s4, {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits});
  }
  function invoke_28(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    return {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits};
  }
  function copy_28(_this__u8e3s4, era, eraYear, year) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    return Object.assign({}, _this__u8e3s4, {era: era, eraYear: eraYear, year: year});
  }
  function invoke_29(_this__u8e3s4, era, eraYear, year) {
    era = era === VOID ? VOID : era;
    eraYear = eraYear === VOID ? VOID : eraYear;
    year = year === VOID ? VOID : year;
    return {era: era, eraYear: eraYear, year: year};
  }
  function copy_29(_this__u8e3s4, overflow, disambiguation, offset) {
    overflow = overflow === VOID ? VOID : overflow;
    disambiguation = disambiguation === VOID ? VOID : disambiguation;
    offset = offset === VOID ? VOID : offset;
    return Object.assign({}, _this__u8e3s4, {overflow: overflow, disambiguation: disambiguation, offset: offset});
  }
  function invoke_30(_this__u8e3s4, overflow, disambiguation, offset) {
    overflow = overflow === VOID ? VOID : overflow;
    disambiguation = disambiguation === VOID ? VOID : disambiguation;
    offset = offset === VOID ? VOID : offset;
    return {overflow: overflow, disambiguation: disambiguation, offset: offset};
  }
  function copy_30(_this__u8e3s4, isoDay, timeZone, isoSecond, calendar, isoMonth, isoNanosecond, isoHour, isoMillisecond, isoMinute, isoMicrosecond, offset, isoYear) {
    isoDay = isoDay === VOID ? VOID : isoDay;
    timeZone = timeZone === VOID ? VOID : timeZone;
    isoSecond = isoSecond === VOID ? VOID : isoSecond;
    calendar = calendar === VOID ? VOID : calendar;
    isoMonth = isoMonth === VOID ? VOID : isoMonth;
    isoNanosecond = isoNanosecond === VOID ? VOID : isoNanosecond;
    isoHour = isoHour === VOID ? VOID : isoHour;
    isoMillisecond = isoMillisecond === VOID ? VOID : isoMillisecond;
    isoMinute = isoMinute === VOID ? VOID : isoMinute;
    isoMicrosecond = isoMicrosecond === VOID ? VOID : isoMicrosecond;
    offset = offset === VOID ? VOID : offset;
    isoYear = isoYear === VOID ? VOID : isoYear;
    return Object.assign({}, _this__u8e3s4, {isoDay: isoDay, timeZone: timeZone, isoSecond: isoSecond, calendar: calendar, isoMonth: isoMonth, isoNanosecond: isoNanosecond, isoHour: isoHour, isoMillisecond: isoMillisecond, isoMinute: isoMinute, isoMicrosecond: isoMicrosecond, offset: offset, isoYear: isoYear});
  }
  function invoke_31(_this__u8e3s4, isoDay, timeZone, isoSecond, calendar, isoMonth, isoNanosecond, isoHour, isoMillisecond, isoMinute, isoMicrosecond, offset, isoYear) {
    return {isoDay: isoDay, timeZone: timeZone, isoSecond: isoSecond, calendar: calendar, isoMonth: isoMonth, isoNanosecond: isoNanosecond, isoHour: isoHour, isoMillisecond: isoMillisecond, isoMinute: isoMinute, isoMicrosecond: isoMicrosecond, offset: offset, isoYear: isoYear};
  }
  function copy_31(_this__u8e3s4, second, timeZone, calendar, era, microsecond, nanosecond, day, millisecond, month, hour, monthCode, minute, eraYear, offset, year) {
    second = second === VOID ? VOID : second;
    timeZone = timeZone === VOID ? VOID : timeZone;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    microsecond = microsecond === VOID ? VOID : microsecond;
    nanosecond = nanosecond === VOID ? VOID : nanosecond;
    day = day === VOID ? VOID : day;
    millisecond = millisecond === VOID ? VOID : millisecond;
    month = month === VOID ? VOID : month;
    hour = hour === VOID ? VOID : hour;
    monthCode = monthCode === VOID ? VOID : monthCode;
    minute = minute === VOID ? VOID : minute;
    eraYear = eraYear === VOID ? VOID : eraYear;
    offset = offset === VOID ? VOID : offset;
    year = year === VOID ? VOID : year;
    return Object.assign({}, _this__u8e3s4, {second: second, timeZone: timeZone, calendar: calendar, era: era, microsecond: microsecond, nanosecond: nanosecond, day: day, millisecond: millisecond, month: month, hour: hour, monthCode: monthCode, minute: minute, eraYear: eraYear, offset: offset, year: year});
  }
  function invoke_32(_this__u8e3s4, second, timeZone, calendar, era, microsecond, nanosecond, day, millisecond, month, hour, monthCode, minute, eraYear, offset, year) {
    second = second === VOID ? VOID : second;
    timeZone = timeZone === VOID ? VOID : timeZone;
    calendar = calendar === VOID ? VOID : calendar;
    era = era === VOID ? VOID : era;
    microsecond = microsecond === VOID ? VOID : microsecond;
    nanosecond = nanosecond === VOID ? VOID : nanosecond;
    day = day === VOID ? VOID : day;
    millisecond = millisecond === VOID ? VOID : millisecond;
    month = month === VOID ? VOID : month;
    hour = hour === VOID ? VOID : hour;
    monthCode = monthCode === VOID ? VOID : monthCode;
    minute = minute === VOID ? VOID : minute;
    eraYear = eraYear === VOID ? VOID : eraYear;
    offset = offset === VOID ? VOID : offset;
    year = year === VOID ? VOID : year;
    return {second: second, timeZone: timeZone, calendar: calendar, era: era, microsecond: microsecond, nanosecond: nanosecond, day: day, millisecond: millisecond, month: month, hour: hour, monthCode: monthCode, minute: minute, eraYear: eraYear, offset: offset, year: year};
  }
  function copy_32(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits, calendarName, offset, timeZoneName) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    calendarName = calendarName === VOID ? VOID : calendarName;
    offset = offset === VOID ? VOID : offset;
    timeZoneName = timeZoneName === VOID ? VOID : timeZoneName;
    return Object.assign({}, _this__u8e3s4, {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits, calendarName: calendarName, offset: offset, timeZoneName: timeZoneName});
  }
  function invoke_33(_this__u8e3s4, smallestUnit, roundingMode, fractionalSecondDigits, calendarName, offset, timeZoneName) {
    smallestUnit = smallestUnit === VOID ? VOID : smallestUnit;
    roundingMode = roundingMode === VOID ? VOID : roundingMode;
    fractionalSecondDigits = fractionalSecondDigits === VOID ? VOID : fractionalSecondDigits;
    calendarName = calendarName === VOID ? VOID : calendarName;
    offset = offset === VOID ? VOID : offset;
    timeZoneName = timeZoneName === VOID ? VOID : timeZoneName;
    return {smallestUnit: smallestUnit, roundingMode: roundingMode, fractionalSecondDigits: fractionalSecondDigits, calendarName: calendarName, offset: offset, timeZoneName: timeZoneName};
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = IsolatedCoroutineScope;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-kotlin-stdlib.js":
/*!****************************************!*\
  !*** ./kotlin/kotlin-kotlin-stdlib.js ***!
  \****************************************/
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//region block: polyfills
(function () {
  if (typeof globalThis === 'object')
    return;
  Object.defineProperty(Object.prototype, '__magic__', {get: function () {
    return this;
  }, configurable: true});
  __magic__.globalThis = __magic__;
  delete Object.prototype.__magic__;
}());
if (typeof Math.imul === 'undefined') {
  Math.imul = function imul(a, b) {
    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;
  };
}
if (typeof ArrayBuffer.isView === 'undefined') {
  ArrayBuffer.isView = function (a) {
    return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
  };
}
if (typeof Array.prototype.fill === 'undefined') {
  // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill
  Object.defineProperty(Array.prototype, 'fill', {value: function (value) {
    // Steps 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }
    var O = Object(this); // Steps 3-5.
    var len = O.length >>> 0; // Steps 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0; // Step 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0; // Step 11.
    var finalValue = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 12.
    while (k < finalValue) {
      O[k] = value;
      k++;
    }
    ; // Step 13.
    return O;
  }});
}
[Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array].forEach(function (TypedArray) {
  if (typeof TypedArray.prototype.fill === 'undefined') {
    Object.defineProperty(TypedArray.prototype, 'fill', {value: Array.prototype.fill});
  }
});
if (typeof Math.sign === 'undefined') {
  Math.sign = function (x) {
    x = +x; // convert to a number
    if (x === 0 || isNaN(x)) {
      return Number(x);
    }
    return x > 0 ? 1 : -1;
  };
}
if (typeof Math.clz32 === 'undefined') {
  Math.clz32 = function (log, LN2) {
    return function (x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log(asUint) / LN2 | 0) | 0; // the "| 0" acts like math.floor
    };
  }(Math.log, Math.LN2);
}
if (typeof String.prototype.endsWith === 'undefined') {
  Object.defineProperty(String.prototype, 'endsWith', {value: function (searchString, position) {
    var subjectString = this.toString();
    if (position === undefined || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  }});
}
if (typeof String.prototype.startsWith === 'undefined') {
  Object.defineProperty(String.prototype, 'startsWith', {value: function (searchString, position) {
    position = position || 0;
    return this.lastIndexOf(searchString, position) === position;
  }});
}
//endregion
(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var isView = ArrayBuffer.isView;
  var clz32 = Math.clz32;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(CharSequence, 'CharSequence');
  initMetadataForClass(Number_0, 'Number');
  initMetadataForObject(Unit, 'Unit');
  initMetadataForClass(_no_name_provided__qut3iv);
  initMetadataForClass(_no_name_provided__qut3iv_0);
  initMetadataForClass(_no_name_provided__qut3iv_1);
  initMetadataForCompanion(Companion);
  initMetadataForClass(Char, 'Char');
  initMetadataForInterface(Collection, 'Collection');
  initMetadataForInterface(KtList, 'List', VOID, VOID, [Collection]);
  initMetadataForInterface(KtSet, 'Set', VOID, VOID, [Collection]);
  initMetadataForInterface(Entry, 'Entry');
  initMetadataForInterface(KtMap, 'Map');
  initMetadataForInterface(KtMutableList, 'MutableList', VOID, VOID, [KtList, Collection]);
  initMetadataForInterface(KtMutableSet, 'MutableSet', VOID, VOID, [KtSet, Collection]);
  initMetadataForInterface(KtMutableMap, 'MutableMap', VOID, VOID, [KtMap]);
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(Enum, 'Enum');
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(Long, 'Long', VOID, Number_0);
  initMetadataForClass(arrayIterator$1);
  initMetadataForObject(ByteCompanionObject, 'ByteCompanionObject');
  initMetadataForObject(ShortCompanionObject, 'ShortCompanionObject');
  initMetadataForObject(IntCompanionObject, 'IntCompanionObject');
  initMetadataForObject(FloatCompanionObject, 'FloatCompanionObject');
  initMetadataForObject(DoubleCompanionObject, 'DoubleCompanionObject');
  initMetadataForObject(StringCompanionObject, 'StringCompanionObject');
  initMetadataForObject(BooleanCompanionObject, 'BooleanCompanionObject');
  initMetadataForObject(Digit, 'Digit');
  initMetadataForObject(Letter, 'Letter');
  initMetadataForClass(AbstractCollection, 'AbstractCollection', VOID, VOID, [Collection]);
  initMetadataForClass(AbstractMutableCollection, 'AbstractMutableCollection', VOID, AbstractCollection, [AbstractCollection, Collection]);
  initMetadataForClass(IteratorImpl, 'IteratorImpl');
  initMetadataForClass(AbstractMutableList, 'AbstractMutableList', VOID, AbstractMutableCollection, [AbstractMutableCollection, KtMutableList]);
  initMetadataForClass(AbstractMap, 'AbstractMap', VOID, VOID, [KtMap]);
  initMetadataForClass(AbstractMutableMap, 'AbstractMutableMap', VOID, AbstractMap, [AbstractMap, KtMutableMap]);
  initMetadataForClass(AbstractMutableSet, 'AbstractMutableSet', VOID, AbstractMutableCollection, [AbstractMutableCollection, KtMutableSet]);
  initMetadataForCompanion(Companion_2);
  initMetadataForClass(ArrayList, 'ArrayList', ArrayList_init_$Create$, AbstractMutableList, [AbstractMutableList, KtMutableList]);
  initMetadataForClass(HashMap, 'HashMap', HashMap_init_$Create$, AbstractMutableMap, [AbstractMutableMap, KtMutableMap]);
  initMetadataForClass(HashMapKeys, 'HashMapKeys', VOID, AbstractMutableSet, [KtMutableSet, AbstractMutableSet]);
  initMetadataForClass(HashMapValues, 'HashMapValues', VOID, AbstractMutableCollection, [Collection, AbstractMutableCollection]);
  initMetadataForClass(HashMapEntrySetBase, 'HashMapEntrySetBase', VOID, AbstractMutableSet, [KtMutableSet, AbstractMutableSet]);
  initMetadataForClass(HashMapEntrySet, 'HashMapEntrySet', VOID, HashMapEntrySetBase);
  initMetadataForClass(HashMapKeysDefault$iterator$1);
  initMetadataForClass(HashMapKeysDefault, 'HashMapKeysDefault', VOID, AbstractMutableSet);
  initMetadataForClass(HashMapValuesDefault$iterator$1);
  initMetadataForClass(HashMapValuesDefault, 'HashMapValuesDefault', VOID, AbstractMutableCollection);
  initMetadataForClass(HashSet, 'HashSet', HashSet_init_$Create$, AbstractMutableSet, [AbstractMutableSet, KtMutableSet]);
  initMetadataForCompanion(Companion_3);
  initMetadataForClass(Itr, 'Itr');
  initMetadataForClass(KeysItr, 'KeysItr', VOID, Itr);
  initMetadataForClass(ValuesItr, 'ValuesItr', VOID, Itr);
  initMetadataForClass(EntriesItr, 'EntriesItr', VOID, Itr);
  initMetadataForClass(EntryRef, 'EntryRef', VOID, VOID, [Entry]);
  function containsAllEntries(m) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(m, Collection)) {
        tmp = m.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = m.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.collections.InternalMap.containsAllEntries.<anonymous>' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var entry = element;
        var tmp_0;
        if (!(entry == null) ? isInterface(entry, Entry) : false) {
          tmp_0 = this.h7(entry);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  initMetadataForInterface(InternalMap, 'InternalMap');
  initMetadataForClass(InternalHashMap, 'InternalHashMap', InternalHashMap_init_$Create$, VOID, [InternalMap]);
  initMetadataForClass(LinkedHashMap, 'LinkedHashMap', LinkedHashMap_init_$Create$, HashMap, [HashMap, KtMutableMap]);
  initMetadataForClass(LinkedHashSet, 'LinkedHashSet', LinkedHashSet_init_$Create$, HashSet, [HashSet, KtMutableSet]);
  initMetadataForClass(BaseOutput, 'BaseOutput');
  initMetadataForClass(NodeJsOutput, 'NodeJsOutput', VOID, BaseOutput);
  initMetadataForClass(BufferedOutput, 'BufferedOutput', BufferedOutput, BaseOutput);
  initMetadataForClass(BufferedOutputToConsoleLog, 'BufferedOutputToConsoleLog', BufferedOutputToConsoleLog, BufferedOutput);
  initMetadataForInterface(Continuation, 'Continuation');
  initMetadataForClass(InterceptedCoroutine, 'InterceptedCoroutine', VOID, VOID, [Continuation]);
  initMetadataForClass(CoroutineImpl, 'CoroutineImpl', VOID, InterceptedCoroutine, [InterceptedCoroutine, Continuation]);
  initMetadataForObject(CompletedContinuation, 'CompletedContinuation', VOID, VOID, [Continuation]);
  initMetadataForClass(Exception, 'Exception', Exception_init_$Create$, Error);
  initMetadataForClass(RuntimeException, 'RuntimeException', RuntimeException_init_$Create$, Exception);
  initMetadataForClass(IllegalStateException, 'IllegalStateException', IllegalStateException_init_$Create$, RuntimeException);
  initMetadataForClass(CancellationException, 'CancellationException', CancellationException_init_$Create$, IllegalStateException);
  initMetadataForClass(_no_name_provided__qut3iv_2, VOID, VOID, CoroutineImpl);
  initMetadataForClass(IllegalArgumentException, 'IllegalArgumentException', IllegalArgumentException_init_$Create$, RuntimeException);
  initMetadataForClass(IndexOutOfBoundsException, 'IndexOutOfBoundsException', IndexOutOfBoundsException_init_$Create$, RuntimeException);
  initMetadataForClass(UnsupportedOperationException, 'UnsupportedOperationException', UnsupportedOperationException_init_$Create$, RuntimeException);
  initMetadataForClass(NoSuchElementException, 'NoSuchElementException', NoSuchElementException_init_$Create$, RuntimeException);
  initMetadataForClass(Error_0, 'Error', Error_init_$Create$, Error);
  initMetadataForClass(AssertionError, 'AssertionError', AssertionError_init_$Create$, Error_0);
  initMetadataForClass(ConcurrentModificationException, 'ConcurrentModificationException', ConcurrentModificationException_init_$Create$, RuntimeException);
  initMetadataForClass(ArithmeticException, 'ArithmeticException', ArithmeticException_init_$Create$, RuntimeException);
  initMetadataForClass(NumberFormatException, 'NumberFormatException', NumberFormatException_init_$Create$, IllegalArgumentException);
  initMetadataForClass(NullPointerException, 'NullPointerException', NullPointerException_init_$Create$, RuntimeException);
  initMetadataForClass(NoWhenBranchMatchedException, 'NoWhenBranchMatchedException', NoWhenBranchMatchedException_init_$Create$, RuntimeException);
  initMetadataForClass(ClassCastException, 'ClassCastException', ClassCastException_init_$Create$, RuntimeException);
  initMetadataForClass(UninitializedPropertyAccessException, 'UninitializedPropertyAccessException', UninitializedPropertyAccessException_init_$Create$, RuntimeException);
  initMetadataForInterface(KClass, 'KClass');
  initMetadataForClass(KClassImpl, 'KClassImpl', VOID, VOID, [KClass]);
  initMetadataForObject(NothingKClassImpl, 'NothingKClassImpl', VOID, KClassImpl);
  initMetadataForClass(ErrorKClass, 'ErrorKClass', ErrorKClass, VOID, [KClass]);
  initMetadataForClass(PrimitiveKClassImpl, 'PrimitiveKClassImpl', VOID, KClassImpl);
  initMetadataForClass(SimpleKClassImpl, 'SimpleKClassImpl', VOID, KClassImpl);
  initMetadataForInterface(KProperty1, 'KProperty1');
  initMetadataForClass(KTypeImpl, 'KTypeImpl');
  initMetadataForObject(PrimitiveClasses, 'PrimitiveClasses');
  initMetadataForClass(CharacterCodingException, 'CharacterCodingException', CharacterCodingException_init_$Create$, Exception);
  initMetadataForClass(StringBuilder, 'StringBuilder', StringBuilder_init_$Create$_0, VOID, [CharSequence]);
  initMetadataForCompanion(Companion_4);
  initMetadataForClass(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0');
  initMetadataForClass(DurationUnit, 'DurationUnit', VOID, Enum);
  initMetadataForClass(IteratorImpl_0, 'IteratorImpl');
  initMetadataForCompanion(Companion_5);
  initMetadataForClass(AbstractList, 'AbstractList', VOID, AbstractCollection, [AbstractCollection, KtList]);
  initMetadataForClass(AbstractMap$keys$1$iterator$1);
  initMetadataForClass(AbstractMap$values$1$iterator$1);
  initMetadataForCompanion(Companion_6);
  initMetadataForClass(AbstractSet, 'AbstractSet', VOID, AbstractCollection, [AbstractCollection, KtSet]);
  initMetadataForClass(AbstractMap$keys$1, VOID, VOID, AbstractSet);
  initMetadataForClass(AbstractMap$values$1, VOID, VOID, AbstractCollection);
  initMetadataForCompanion(Companion_7);
  initMetadataForCompanion(Companion_8);
  initMetadataForClass(ArrayDeque, 'ArrayDeque', ArrayDeque_init_$Create$, AbstractMutableList);
  initMetadataForObject(EmptyList, 'EmptyList', VOID, VOID, [KtList]);
  initMetadataForObject(EmptyIterator, 'EmptyIterator');
  initMetadataForClass(ArrayAsCollection, 'ArrayAsCollection', VOID, VOID, [Collection]);
  initMetadataForClass(IndexedValue, 'IndexedValue');
  initMetadataForClass(IndexingIterable, 'IndexingIterable');
  initMetadataForClass(IndexingIterator, 'IndexingIterator');
  initMetadataForInterface(MapWithDefault, 'MapWithDefault', VOID, VOID, [KtMap]);
  initMetadataForObject(EmptyMap, 'EmptyMap', VOID, VOID, [KtMap]);
  initMetadataForClass(IntIterator, 'IntIterator');
  initMetadataForClass(SequenceScope, 'SequenceScope', VOID, VOID, VOID, [1]);
  initMetadataForClass(SequenceBuilderIterator, 'SequenceBuilderIterator', SequenceBuilderIterator, SequenceScope, [SequenceScope, Continuation], [1]);
  initMetadataForClass(TransformingSequence$iterator$1);
  initMetadataForClass(TransformingSequence, 'TransformingSequence');
  initMetadataForObject(EmptySequence, 'EmptySequence');
  initMetadataForObject(EmptySet, 'EmptySet', VOID, VOID, [KtSet]);
  initMetadataForObject(Key, 'Key');
  function plus(context) {
    var tmp;
    if (context === EmptyCoroutineContext_getInstance()) {
      tmp = this;
    } else {
      tmp = context.ld(this, CoroutineContext$plus$lambda);
    }
    return tmp;
  }
  initMetadataForInterface(CoroutineContext, 'CoroutineContext');
  function get(key) {
    var tmp;
    if (equals(this.t1(), key)) {
      tmp = isInterface(this, Element) ? this : THROW_CCE();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function fold(initial, operation) {
    return operation(initial, this);
  }
  function minusKey(key) {
    return equals(this.t1(), key) ? EmptyCoroutineContext_getInstance() : this;
  }
  initMetadataForInterface(Element, 'Element', VOID, VOID, [CoroutineContext]);
  function releaseInterceptedContinuation(continuation) {
  }
  function get_0(key) {
    if (key instanceof AbstractCoroutineContextKey) {
      var tmp;
      if (key.jd(this.t1())) {
        var tmp_0 = key.id(this);
        tmp = (!(tmp_0 == null) ? isInterface(tmp_0, Element) : false) ? tmp_0 : null;
      } else {
        tmp = null;
      }
      return tmp;
    }
    var tmp_1;
    if (Key_instance === key) {
      tmp_1 = isInterface(this, Element) ? this : THROW_CCE();
    } else {
      tmp_1 = null;
    }
    return tmp_1;
  }
  function minusKey_0(key) {
    if (key instanceof AbstractCoroutineContextKey) {
      return key.jd(this.t1()) && !(key.id(this) == null) ? EmptyCoroutineContext_getInstance() : this;
    }
    return Key_instance === key ? EmptyCoroutineContext_getInstance() : this;
  }
  initMetadataForInterface(ContinuationInterceptor, 'ContinuationInterceptor', VOID, VOID, [Element]);
  initMetadataForObject(EmptyCoroutineContext, 'EmptyCoroutineContext', VOID, VOID, [CoroutineContext]);
  initMetadataForClass(CombinedContext, 'CombinedContext', VOID, VOID, [CoroutineContext]);
  initMetadataForClass(AbstractCoroutineContextKey, 'AbstractCoroutineContextKey');
  initMetadataForClass(AbstractCoroutineContextElement, 'AbstractCoroutineContextElement', VOID, VOID, [Element]);
  initMetadataForClass(CoroutineSingletons, 'CoroutineSingletons', VOID, Enum);
  initMetadataForClass(EnumEntriesList, 'EnumEntriesList', VOID, AbstractList, [KtList, AbstractList]);
  initMetadataForClass(Random, 'Random');
  initMetadataForObject(Default, 'Default', VOID, Random);
  initMetadataForCompanion(Companion_9);
  initMetadataForClass(XorWowRandom, 'XorWowRandom', VOID, Random);
  initMetadataForCompanion(Companion_10);
  initMetadataForClass(IntProgression, 'IntProgression');
  function contains(value) {
    return compareTo(value, this.ge()) >= 0 && compareTo(value, this.he()) <= 0;
  }
  initMetadataForInterface(ClosedRange, 'ClosedRange');
  initMetadataForClass(IntRange, 'IntRange', VOID, IntProgression, [IntProgression, ClosedRange]);
  initMetadataForClass(IntProgressionIterator, 'IntProgressionIterator', VOID, IntIterator);
  initMetadataForCompanion(Companion_11);
  initMetadataForInterface(KTypeParameter, 'KTypeParameter');
  initMetadataForCompanion(Companion_12);
  initMetadataForCompanion(Companion_13);
  initMetadataForClass(BytesHexFormat, 'BytesHexFormat');
  initMetadataForClass(NumberHexFormat, 'NumberHexFormat');
  initMetadataForCompanion(Companion_14);
  initMetadataForClass(HexFormat, 'HexFormat');
  initMetadataForClass(DelimitedRangesSequence$iterator$1);
  initMetadataForClass(DelimitedRangesSequence, 'DelimitedRangesSequence');
  initMetadataForCompanion(Companion_15);
  initMetadataForClass(Duration, 'Duration');
  initMetadataForClass(DeepRecursiveScope, 'DeepRecursiveScope', VOID, VOID, VOID, [1]);
  initMetadataForClass(DeepRecursiveFunction, 'DeepRecursiveFunction');
  initMetadataForClass(DeepRecursiveScopeImpl, 'DeepRecursiveScopeImpl', VOID, DeepRecursiveScope, [DeepRecursiveScope, Continuation], [1]);
  initMetadataForClass(LazyThreadSafetyMode, 'LazyThreadSafetyMode', VOID, Enum);
  initMetadataForClass(UnsafeLazyImpl, 'UnsafeLazyImpl');
  initMetadataForObject(UNINITIALIZED_VALUE, 'UNINITIALIZED_VALUE');
  initMetadataForCompanion(Companion_16);
  initMetadataForClass(Failure, 'Failure');
  initMetadataForClass(Result, 'Result');
  initMetadataForClass(NotImplementedError, 'NotImplementedError', NotImplementedError, Error_0);
  initMetadataForClass(Pair, 'Pair');
  initMetadataForClass(Triple, 'Triple');
  initMetadataForClass(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0');
  initMetadataForCompanion(Companion_17);
  initMetadataForClass(Uuid, 'Uuid');
  initMetadataForCompanion(Companion_18);
  initMetadataForClass(UByte, 'UByte');
  initMetadataForClass(Iterator, 'Iterator');
  initMetadataForClass(UByteArray, 'UByteArray', VOID, VOID, [Collection]);
  initMetadataForCompanion(Companion_19);
  initMetadataForClass(UInt, 'UInt');
  initMetadataForClass(Iterator_0, 'Iterator');
  initMetadataForClass(UIntArray, 'UIntArray', VOID, VOID, [Collection]);
  initMetadataForCompanion(Companion_20);
  initMetadataForClass(ULong, 'ULong');
  initMetadataForClass(Iterator_1, 'Iterator');
  initMetadataForClass(ULongArray, 'ULongArray', VOID, VOID, [Collection]);
  initMetadataForCompanion(Companion_21);
  initMetadataForClass(UShort, 'UShort');
  initMetadataForClass(Iterator_2, 'Iterator');
  initMetadataForClass(UShortArray, 'UShortArray', VOID, VOID, [Collection]);
  //endregion
  function CharSequence() {
  }
  function Number_0() {
  }
  function Unit() {
  }
  protoOf(Unit).toString = function () {
    return 'kotlin.Unit';
  };
  var Unit_instance;
  function Unit_getInstance() {
    return Unit_instance;
  }
  function toList(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptyList();
      case 1:
        return listOf(_this__u8e3s4[0]);
      default:
        return toMutableList(_this__u8e3s4);
    }
  }
  function withIndex(_this__u8e3s4) {
    return new IndexingIterable(withIndex$lambda(_this__u8e3s4));
  }
  function get_indices(_this__u8e3s4) {
    return new IntRange(0, get_lastIndex(_this__u8e3s4));
  }
  function get_indices_0(_this__u8e3s4) {
    return new IntRange(0, get_lastIndex_0(_this__u8e3s4));
  }
  function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function contains_0(_this__u8e3s4, element) {
    return indexOf_0(_this__u8e3s4, element) >= 0;
  }
  function contains_1(_this__u8e3s4, element) {
    return indexOf_1(_this__u8e3s4, element) >= 0;
  }
  function contains_2(_this__u8e3s4, element) {
    return indexOf_2(_this__u8e3s4, element) >= 0;
  }
  function contains_3(_this__u8e3s4, element) {
    return indexOf_3(_this__u8e3s4, element) >= 0;
  }
  function indexOf(_this__u8e3s4, element) {
    if (element == null) {
      var inductionVariable = 0;
      var last = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (_this__u8e3s4[index] == null) {
            return index;
          }
        }
         while (inductionVariable <= last);
    } else {
      var inductionVariable_0 = 0;
      var last_0 = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals(element, _this__u8e3s4[index_0])) {
            return index_0;
          }
        }
         while (inductionVariable_0 <= last_0);
    }
    return -1;
  }
  function toSet(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptySet();
      case 1:
        return setOf(_this__u8e3s4[0]);
      default:
        return toCollection(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.length)));
    }
  }
  function single(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.length) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('Array is empty.');
      case 1:
        tmp = _this__u8e3s4[0];
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('Array has more than one element.');
    }
    return tmp;
  }
  function toMutableList(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(asCollection(_this__u8e3s4));
  }
  function get_lastIndex(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function get_lastIndex_0(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function joinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.d(prefix);
    var count = 0;
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    $l$loop: while (inductionVariable < last) {
      var element = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      count = count + 1 | 0;
      if (count > 1) {
        buffer.d(separator);
      }
      if (limit < 0 || count <= limit) {
        if (!(transform == null)) {
          buffer.d(transform(element));
        } else {
          buffer.d(element.toString());
        }
      } else
        break $l$loop;
    }
    if (limit >= 0 && count > limit) {
      buffer.d(truncated);
    }
    buffer.d(postfix);
    return buffer;
  }
  function indexOf_0(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element.equals(_this__u8e3s4[index])) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function indexOf_1(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element === _this__u8e3s4[index]) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function indexOf_2(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element === _this__u8e3s4[index]) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function indexOf_3(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element === _this__u8e3s4[index]) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function toCollection(_this__u8e3s4, destination) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    while (inductionVariable < last) {
      var item = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.e(item);
    }
    return destination;
  }
  function get_lastIndex_1(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function contains_4(_this__u8e3s4, element) {
    return indexOf(_this__u8e3s4, element) >= 0;
  }
  function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.d(prefix);
    var count = 0;
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    $l$loop: while (inductionVariable < last) {
      var element = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      count = count + 1 | 0;
      if (count > 1) {
        buffer.d(separator);
      }
      if (limit < 0 || count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 && count > limit) {
      buffer.d(truncated);
    }
    buffer.d(postfix);
    return buffer;
  }
  function zip(_this__u8e3s4, other) {
    // Inline function 'kotlin.collections.zip' call
    // Inline function 'kotlin.comparisons.minOf' call
    var a = _this__u8e3s4.length;
    var b = other.length;
    var size = Math.min(a, b);
    var list = ArrayList_init_$Create$_0(size);
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.zip.<anonymous>' call
        var t1 = _this__u8e3s4[i];
        var t2 = other[i];
        var tmp$ret$1 = to(t1, t2);
        list.e(tmp$ret$1);
      }
       while (inductionVariable < size);
    return list;
  }
  function asSequence(_this__u8e3s4) {
    // Inline function 'kotlin.collections.isEmpty' call
    if (_this__u8e3s4.length === 0)
      return emptySequence();
    // Inline function 'kotlin.sequences.Sequence' call
    return new _no_name_provided__qut3iv(_this__u8e3s4);
  }
  function getOrNull(_this__u8e3s4, index) {
    return (0 <= index ? index <= (_this__u8e3s4.length - 1 | 0) : false) ? _this__u8e3s4[index] : null;
  }
  function withIndex$lambda($this_withIndex) {
    return function () {
      return arrayIterator($this_withIndex);
    };
  }
  function _no_name_provided__qut3iv($this_asSequence) {
    this.i_1 = $this_asSequence;
  }
  protoOf(_no_name_provided__qut3iv).j = function () {
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    return arrayIterator(this.i_1);
  };
  function joinToString_1(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo_1(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinTo_1(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.d(prefix);
    var count = 0;
    var tmp0_iterator = _this__u8e3s4.j();
    $l$loop: while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      count = count + 1 | 0;
      if (count > 1) {
        buffer.d(separator);
      }
      if (limit < 0 || count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 && count > limit) {
      buffer.d(truncated);
    }
    buffer.d(postfix);
    return buffer;
  }
  function toHashSet(_this__u8e3s4) {
    return toCollection_0(_this__u8e3s4, HashSet_init_$Create$_1(mapCapacity(collectionSizeOrDefault(_this__u8e3s4, 12))));
  }
  function toBooleanArray(_this__u8e3s4) {
    var result = booleanArray(_this__u8e3s4.m());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function last(_this__u8e3s4) {
    if (_this__u8e3s4.n())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.o(get_lastIndex_2(_this__u8e3s4));
  }
  function toMutableList_0(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(_this__u8e3s4);
  }
  function toList_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.m()) {
        case 0:
          tmp = emptyList();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, KtList)) {
            tmp_0 = _this__u8e3s4.o(0);
          } else {
            tmp_0 = _this__u8e3s4.j().l();
          }

          tmp = listOf(tmp_0);
          break;
        default:
          tmp = toMutableList_0(_this__u8e3s4);
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyList(toMutableList_1(_this__u8e3s4));
  }
  function toCollection_0(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.j();
    while (tmp0_iterator.k()) {
      var item = tmp0_iterator.l();
      destination.e(item);
    }
    return destination;
  }
  function random(_this__u8e3s4, random) {
    if (_this__u8e3s4.n())
      throw NoSuchElementException_init_$Create$_0('Collection is empty.');
    return elementAt(_this__u8e3s4, random.p(_this__u8e3s4.m()));
  }
  function toMutableList_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return toMutableList_0(_this__u8e3s4);
    return toCollection_0(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function elementAt(_this__u8e3s4, index) {
    if (isInterface(_this__u8e3s4, KtList))
      return _this__u8e3s4.o(index);
    return elementAtOrElse(_this__u8e3s4, index, elementAt$lambda(index));
  }
  function elementAtOrElse(_this__u8e3s4, index, defaultValue) {
    // Inline function 'kotlin.contracts.contract' call
    if (isInterface(_this__u8e3s4, KtList)) {
      // Inline function 'kotlin.collections.getOrElse' call
      // Inline function 'kotlin.contracts.contract' call
      return (0 <= index ? index < _this__u8e3s4.m() : false) ? _this__u8e3s4.o(index) : defaultValue(index);
    }
    if (index < 0)
      return defaultValue(index);
    var iterator = _this__u8e3s4.j();
    var count = 0;
    while (iterator.k()) {
      var element = iterator.l();
      var tmp0 = count;
      count = tmp0 + 1 | 0;
      if (index === tmp0)
        return element;
    }
    return defaultValue(index);
  }
  function single_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, KtList))
      return single_1(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.j();
      if (!iterator.k())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      var single = iterator.l();
      if (iterator.k())
        throw IllegalArgumentException_init_$Create$_0('Collection has more than one element.');
      return single;
    }
  }
  function minOrNull(_this__u8e3s4) {
    var iterator = _this__u8e3s4.j();
    if (!iterator.k())
      return null;
    var min = iterator.l();
    while (iterator.k()) {
      var e = iterator.l();
      if (compareTo(min, e) > 0)
        min = e;
    }
    return min;
  }
  function asSequence_0(_this__u8e3s4) {
    // Inline function 'kotlin.sequences.Sequence' call
    return new _no_name_provided__qut3iv_0(_this__u8e3s4);
  }
  function single_1(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.m()) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('List is empty.');
      case 1:
        tmp = _this__u8e3s4.o(0);
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('List has more than one element.');
    }
    return tmp;
  }
  function singleOrNull(_this__u8e3s4) {
    return _this__u8e3s4.m() === 1 ? _this__u8e3s4.o(0) : null;
  }
  function lastOrNull(_this__u8e3s4) {
    return _this__u8e3s4.n() ? null : _this__u8e3s4.o(_this__u8e3s4.m() - 1 | 0);
  }
  function elementAt$lambda($index) {
    return function (it) {
      throw IndexOutOfBoundsException_init_$Create$_0("Collection doesn't contain element at index " + $index + '.');
    };
  }
  function _no_name_provided__qut3iv_0($this_asSequence) {
    this.q_1 = $this_asSequence;
  }
  protoOf(_no_name_provided__qut3iv_0).j = function () {
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    return this.q_1.j();
  };
  function asSequence_1(_this__u8e3s4) {
    return asSequence_0(_this__u8e3s4.r());
  }
  function until(_this__u8e3s4, to) {
    if (to <= -2147483648)
      return Companion_getInstance_10().s_1;
    return numberRangeToNumber(_this__u8e3s4, to - 1 | 0);
  }
  function step(_this__u8e3s4, step) {
    checkStepIsPositive(step > 0, step);
    return Companion_instance_11.w(_this__u8e3s4.t_1, _this__u8e3s4.u_1, _this__u8e3s4.v_1 > 0 ? step : -step | 0);
  }
  function coerceAtLeast(_this__u8e3s4, minimumValue) {
    return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;
  }
  function downTo(_this__u8e3s4, to) {
    return Companion_instance_11.w(_this__u8e3s4, to, -1);
  }
  function coerceIn(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue.z(maximumValue) > 0)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue.toString() + ' is less than minimum ' + minimumValue.toString() + '.');
    if (_this__u8e3s4.z(minimumValue) < 0)
      return minimumValue;
    if (_this__u8e3s4.z(maximumValue) > 0)
      return maximumValue;
    return _this__u8e3s4;
  }
  function coerceIn_0(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function coerceAtMost(_this__u8e3s4, maximumValue) {
    return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;
  }
  function coerceIn_1(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function contains_5(_this__u8e3s4, value) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.ranges.contains.<anonymous>' call
    var it = toIntExactOrNull(value);
    return !(it == null) ? _this__u8e3s4.a1(it) : false;
  }
  function toIntExactOrNull(_this__u8e3s4) {
    return ((new Long(-2147483648, -1)).z(_this__u8e3s4) <= 0 ? _this__u8e3s4.z(new Long(2147483647, 0)) <= 0 : false) ? _this__u8e3s4.b1() : null;
  }
  function asIterable(_this__u8e3s4) {
    // Inline function 'kotlin.collections.Iterable' call
    return new _no_name_provided__qut3iv_1(_this__u8e3s4);
  }
  function map(_this__u8e3s4, transform) {
    return new TransformingSequence(_this__u8e3s4, transform);
  }
  function toList_1(_this__u8e3s4) {
    var it = _this__u8e3s4.j();
    if (!it.k())
      return emptyList();
    var element = it.l();
    if (!it.k())
      return listOf(element);
    var dst = ArrayList_init_$Create$();
    dst.e(element);
    while (it.k()) {
      dst.e(it.l());
    }
    return dst;
  }
  function _no_name_provided__qut3iv_1($this_asIterable) {
    this.c1_1 = $this_asIterable;
  }
  protoOf(_no_name_provided__qut3iv_1).j = function () {
    // Inline function 'kotlin.sequences.asIterable.<anonymous>' call
    return this.c1_1.j();
  };
  function plus_0(_this__u8e3s4, elements) {
    var tmp0_safe_receiver = collectionSizeOrNull(elements);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.plus.<anonymous>' call
      tmp = _this__u8e3s4.m() + tmp0_safe_receiver | 0;
    }
    var tmp1_elvis_lhs = tmp;
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(tmp1_elvis_lhs == null ? imul(_this__u8e3s4.m(), 2) : tmp1_elvis_lhs));
    result.d1(_this__u8e3s4);
    addAll(result, elements);
    return result;
  }
  function last_0(_this__u8e3s4) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(_this__u8e3s4) === 0)
      throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');
    return charSequenceGet(_this__u8e3s4, get_lastIndex_3(_this__u8e3s4));
  }
  function drop(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.drop.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.text.substring' call
    var startIndex = coerceAtMost(n, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(startIndex);
  }
  function single_2(_this__u8e3s4) {
    var tmp;
    switch (charSequenceLength(_this__u8e3s4)) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');
      case 1:
        tmp = charSequenceGet(_this__u8e3s4, 0);
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('Char sequence has more than one element.');
    }
    return tmp;
  }
  function asUByteArray(_this__u8e3s4) {
    return _UByteArray___init__impl__ip4y9n(_this__u8e3s4);
  }
  function _Char___init__impl__6a9atx(value) {
    return value;
  }
  function _get_value__a43j40($this) {
    return $this;
  }
  function _Char___init__impl__6a9atx_0(code) {
    // Inline function 'kotlin.UShort.toInt' call
    var tmp$ret$0 = _UShort___get_data__impl__g0245(code) & 65535;
    return _Char___init__impl__6a9atx(tmp$ret$0);
  }
  function Char__compareTo_impl_ypi4mb($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__compareTo_impl_ypi4mb_0($this, other) {
    return Char__compareTo_impl_ypi4mb($this.e1_1, other instanceof Char ? other.e1_1 : THROW_CCE());
  }
  function Char__minus_impl_a2frrh($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__toInt_impl_vasixd($this) {
    return _get_value__a43j40($this);
  }
  function toString($this) {
    // Inline function 'kotlin.js.unsafeCast' call
    return String.fromCharCode(_get_value__a43j40($this));
  }
  function Char__equals_impl_x6719k($this, other) {
    if (!(other instanceof Char))
      return false;
    return _get_value__a43j40($this) === _get_value__a43j40(other.e1_1);
  }
  function Char__hashCode_impl_otmys($this) {
    return _get_value__a43j40($this);
  }
  function Companion() {
    Companion_instance = this;
    this.f1_1 = _Char___init__impl__6a9atx(0);
    this.g1_1 = _Char___init__impl__6a9atx(65535);
    this.h1_1 = _Char___init__impl__6a9atx(55296);
    this.i1_1 = _Char___init__impl__6a9atx(56319);
    this.j1_1 = _Char___init__impl__6a9atx(56320);
    this.k1_1 = _Char___init__impl__6a9atx(57343);
    this.l1_1 = _Char___init__impl__6a9atx(55296);
    this.m1_1 = _Char___init__impl__6a9atx(57343);
    this.n1_1 = 2;
    this.o1_1 = 16;
  }
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function Char(value) {
    Companion_getInstance();
    this.e1_1 = value;
  }
  protoOf(Char).p1 = function (other) {
    return Char__compareTo_impl_ypi4mb(this.e1_1, other);
  };
  protoOf(Char).q1 = function (other) {
    return Char__compareTo_impl_ypi4mb_0(this, other);
  };
  protoOf(Char).toString = function () {
    return toString(this.e1_1);
  };
  protoOf(Char).equals = function (other) {
    return Char__equals_impl_x6719k(this.e1_1, other);
  };
  protoOf(Char).hashCode = function () {
    return Char__hashCode_impl_otmys(this.e1_1);
  };
  function KtList() {
  }
  function Collection() {
  }
  function KtSet() {
  }
  function Entry() {
  }
  function KtMap() {
  }
  function KtMutableList() {
  }
  function KtMutableSet() {
  }
  function KtMutableMap() {
  }
  function Companion_0() {
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    return Companion_instance_0;
  }
  function Enum(name, ordinal) {
    this.d2_1 = name;
    this.e2_1 = ordinal;
  }
  protoOf(Enum).f2 = function (other) {
    return compareTo(this.e2_1, other.e2_1);
  };
  protoOf(Enum).q1 = function (other) {
    return this.f2(other instanceof Enum ? other : THROW_CCE());
  };
  protoOf(Enum).equals = function (other) {
    return this === other;
  };
  protoOf(Enum).hashCode = function () {
    return identityHashCode(this);
  };
  protoOf(Enum).toString = function () {
    return this.d2_1;
  };
  function arrayOf(elements) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return elements;
  }
  function toString_0(_this__u8e3s4) {
    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : toString_1(_this__u8e3s4);
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function plus_1(_this__u8e3s4, other) {
    var tmp3_elvis_lhs = _this__u8e3s4 == null ? null : toString_1(_this__u8e3s4);
    var tmp = tmp3_elvis_lhs == null ? 'null' : tmp3_elvis_lhs;
    var tmp1_elvis_lhs = other == null ? null : toString_1(other);
    return tmp + (tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs);
  }
  function Companion_1() {
    Companion_instance_1 = this;
    this.g2_1 = new Long(0, -2147483648);
    this.h2_1 = new Long(-1, 2147483647);
    this.i2_1 = 8;
    this.j2_1 = 64;
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function Long(low, high) {
    Companion_getInstance_1();
    Number_0.call(this);
    this.x_1 = low;
    this.y_1 = high;
  }
  protoOf(Long).z = function (other) {
    return compare(this, other);
  };
  protoOf(Long).q1 = function (other) {
    return this.z(other instanceof Long ? other : THROW_CCE());
  };
  protoOf(Long).k2 = function (other) {
    return add(this, other);
  };
  protoOf(Long).l2 = function (other) {
    return subtract(this, other);
  };
  protoOf(Long).m2 = function (other) {
    return multiply(this, other);
  };
  protoOf(Long).n2 = function (other) {
    return divide(this, other);
  };
  protoOf(Long).o2 = function (other) {
    return modulo(this, other);
  };
  protoOf(Long).p2 = function () {
    return this.q2().k2(new Long(1, 0));
  };
  protoOf(Long).r2 = function (bitCount) {
    return shiftLeft(this, bitCount);
  };
  protoOf(Long).s2 = function (bitCount) {
    return shiftRight(this, bitCount);
  };
  protoOf(Long).t2 = function (bitCount) {
    return shiftRightUnsigned(this, bitCount);
  };
  protoOf(Long).u2 = function (other) {
    return new Long(this.x_1 & other.x_1, this.y_1 & other.y_1);
  };
  protoOf(Long).v2 = function (other) {
    return new Long(this.x_1 | other.x_1, this.y_1 | other.y_1);
  };
  protoOf(Long).w2 = function (other) {
    return new Long(this.x_1 ^ other.x_1, this.y_1 ^ other.y_1);
  };
  protoOf(Long).q2 = function () {
    return new Long(~this.x_1, ~this.y_1);
  };
  protoOf(Long).x2 = function () {
    return toByte(this.x_1);
  };
  protoOf(Long).y2 = function () {
    return toShort(this.x_1);
  };
  protoOf(Long).b1 = function () {
    return this.x_1;
  };
  protoOf(Long).z2 = function () {
    return toNumber(this);
  };
  protoOf(Long).toString = function () {
    return toStringImpl(this, 10);
  };
  protoOf(Long).equals = function (other) {
    var tmp;
    if (other instanceof Long) {
      tmp = equalsLong(this, other);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Long).hashCode = function () {
    return hashCode_0(this);
  };
  protoOf(Long).valueOf = function () {
    return this.z2();
  };
  function implement(interfaces) {
    var maxSize = 1;
    var masks = [];
    var inductionVariable = 0;
    var last = interfaces.length;
    while (inductionVariable < last) {
      var i = interfaces[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var currentSize = maxSize;
      var tmp1_elvis_lhs = i.prototype.$imask$;
      var imask = tmp1_elvis_lhs == null ? i.$imask$ : tmp1_elvis_lhs;
      if (!(imask == null)) {
        masks.push(imask);
        currentSize = imask.length;
      }
      var iid = i.$metadata$.iid;
      var tmp;
      if (iid == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlin.js.implement.<anonymous>' call
        tmp = bitMaskWith(iid);
      }
      var iidImask = tmp;
      if (!(iidImask == null)) {
        masks.push(iidImask);
        currentSize = Math.max(currentSize, iidImask.length);
      }
      if (currentSize > maxSize) {
        maxSize = currentSize;
      }
    }
    return compositeBitMask(maxSize, masks);
  }
  function bitMaskWith(activeBit) {
    var numberIndex = activeBit >> 5;
    var intArray = new Int32Array(numberIndex + 1 | 0);
    var positionInNumber = activeBit & 31;
    var numberWithSettledBit = 1 << positionInNumber;
    intArray[numberIndex] = intArray[numberIndex] | numberWithSettledBit;
    return intArray;
  }
  function compositeBitMask(capacity, masks) {
    var tmp = 0;
    var tmp_0 = new Int32Array(capacity);
    while (tmp < capacity) {
      var tmp_1 = tmp;
      var result = 0;
      var inductionVariable = 0;
      var last = masks.length;
      while (inductionVariable < last) {
        var mask = masks[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        if (tmp_1 < mask.length) {
          result = result | mask[tmp_1];
        }
      }
      tmp_0[tmp_1] = result;
      tmp = tmp + 1 | 0;
    }
    return tmp_0;
  }
  function isBitSet(_this__u8e3s4, possibleActiveBit) {
    var numberIndex = possibleActiveBit >> 5;
    if (numberIndex > _this__u8e3s4.length)
      return false;
    var positionInNumber = possibleActiveBit & 31;
    var numberWithSettledBit = 1 << positionInNumber;
    return !((_this__u8e3s4[numberIndex] & numberWithSettledBit) === 0);
  }
  function fillArrayVal(array, initValue) {
    var inductionVariable = 0;
    var last = array.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        array[i] = initValue;
      }
       while (!(i === last));
    return array;
  }
  function arrayIterator(array) {
    return new arrayIterator$1(array);
  }
  function booleanArray(size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'BooleanArray';
    var array = fillArrayVal(Array(size), false);
    array.$type$ = type;
    return array;
  }
  function charArray(size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'CharArray';
    var array = new Uint16Array(size);
    array.$type$ = type;
    return array;
  }
  function longArray(size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'LongArray';
    var array = fillArrayVal(Array(size), new Long(0, 0));
    array.$type$ = type;
    return array;
  }
  function charArrayOf(arr) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'CharArray';
    var array = new Uint16Array(arr);
    array.$type$ = type;
    return array;
  }
  function arrayIterator$1($array) {
    this.b3_1 = $array;
    this.a3_1 = 0;
  }
  protoOf(arrayIterator$1).k = function () {
    return !(this.a3_1 === this.b3_1.length);
  };
  protoOf(arrayIterator$1).l = function () {
    var tmp;
    if (!(this.a3_1 === this.b3_1.length)) {
      var tmp1 = this.a3_1;
      this.a3_1 = tmp1 + 1 | 0;
      tmp = this.b3_1[tmp1];
    } else {
      throw NoSuchElementException_init_$Create$_0('' + this.a3_1);
    }
    return tmp;
  };
  function get_buf() {
    _init_properties_bitUtils_kt__nfcg4k();
    return buf;
  }
  var buf;
  function get_bufFloat64() {
    _init_properties_bitUtils_kt__nfcg4k();
    return bufFloat64;
  }
  var bufFloat64;
  var bufFloat32;
  function get_bufInt32() {
    _init_properties_bitUtils_kt__nfcg4k();
    return bufInt32;
  }
  var bufInt32;
  function get_lowIndex() {
    _init_properties_bitUtils_kt__nfcg4k();
    return lowIndex;
  }
  var lowIndex;
  function get_highIndex() {
    _init_properties_bitUtils_kt__nfcg4k();
    return highIndex;
  }
  var highIndex;
  function getNumberHashCode(obj) {
    _init_properties_bitUtils_kt__nfcg4k();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.jsBitwiseOr' call
    // Inline function 'kotlin.js.asDynamic' call
    if ((obj | 0) === obj) {
      return numberToInt(obj);
    }
    get_bufFloat64()[0] = obj;
    return imul(get_bufInt32()[get_highIndex()], 31) + get_bufInt32()[get_lowIndex()] | 0;
  }
  var properties_initialized_bitUtils_kt_i2bo3e;
  function _init_properties_bitUtils_kt__nfcg4k() {
    if (!properties_initialized_bitUtils_kt_i2bo3e) {
      properties_initialized_bitUtils_kt_i2bo3e = true;
      buf = new ArrayBuffer(8);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufFloat64 = new Float64Array(get_buf());
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufFloat32 = new Float32Array(get_buf());
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufInt32 = new Int32Array(get_buf());
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.js.lowIndex.<anonymous>' call
      get_bufFloat64()[0] = -1.0;
      lowIndex = !(get_bufInt32()[0] === 0) ? 1 : 0;
      highIndex = 1 - get_lowIndex() | 0;
    }
  }
  function charSequenceGet(a, index) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.Char' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var code = a.charCodeAt(index);
      var tmp_0;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(0);
      if (code < Char__toInt_impl_vasixd(this_0)) {
        tmp_0 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_1 = _Char___init__impl__6a9atx(65535);
        tmp_0 = code > Char__toInt_impl_vasixd(this_1);
      }
      if (tmp_0) {
        throw IllegalArgumentException_init_$Create$_0('Invalid Char code: ' + code);
      }
      tmp = numberToChar(code);
    } else {
      tmp = a.b(index);
    }
    return tmp;
  }
  function isString(a) {
    return typeof a === 'string';
  }
  function charSequenceLength(a) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = a.length;
    } else {
      tmp = a.a();
    }
    return tmp;
  }
  function charSequenceSubSequence(a, startIndex, endIndex) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = a.substring(startIndex, endIndex);
    } else {
      tmp = a.c(startIndex, endIndex);
    }
    return tmp;
  }
  function arrayToString(array) {
    return joinToString_0(array, ', ', '[', ']', VOID, VOID, arrayToString$lambda);
  }
  function contentEqualsInternal(_this__u8e3s4, other) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    // Inline function 'kotlin.js.asDynamic' call
    var b = other;
    if (a === b)
      return true;
    if (a == null || b == null || !isArrayish(b) || a.length != b.length)
      return false;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals(a[i], b[i])) {
          return false;
        }
      }
       while (inductionVariable < last);
    return true;
  }
  function contentHashCodeInternal(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    if (a == null)
      return 0;
    var result = 1;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = imul(result, 31) + hashCode(a[i]) | 0;
      }
       while (inductionVariable < last);
    return result;
  }
  function arrayToString$lambda(it) {
    return toString_1(it);
  }
  function compareTo(a, b) {
    var tmp;
    switch (typeof a) {
      case 'number':
        var tmp_0;
        if (typeof b === 'number') {
          tmp_0 = doubleCompareTo(a, b);
        } else {
          if (b instanceof Long) {
            tmp_0 = doubleCompareTo(a, b.z2());
          } else {
            tmp_0 = primitiveCompareTo(a, b);
          }
        }

        tmp = tmp_0;
        break;
      case 'string':
      case 'boolean':
        tmp = primitiveCompareTo(a, b);
        break;
      default:
        tmp = compareToDoNotIntrinsicify(a, b);
        break;
    }
    return tmp;
  }
  function doubleCompareTo(a, b) {
    var tmp;
    if (a < b) {
      tmp = -1;
    } else if (a > b) {
      tmp = 1;
    } else if (a === b) {
      var tmp_0;
      if (a !== 0) {
        tmp_0 = 0;
      } else {
        // Inline function 'kotlin.js.asDynamic' call
        var ia = 1 / a;
        var tmp_1;
        // Inline function 'kotlin.js.asDynamic' call
        if (ia === 1 / b) {
          tmp_1 = 0;
        } else {
          if (ia < 0) {
            tmp_1 = -1;
          } else {
            tmp_1 = 1;
          }
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else if (a !== a) {
      tmp = b !== b ? 0 : 1;
    } else {
      tmp = -1;
    }
    return tmp;
  }
  function primitiveCompareTo(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function compareToDoNotIntrinsicify(a, b) {
    return a.q1(b);
  }
  function identityHashCode(obj) {
    return getObjectHashCode(obj);
  }
  function getObjectHashCode(obj) {
    // Inline function 'kotlin.js.jsIn' call
    if (!('kotlinHashCodeValue$' in obj)) {
      var hash = calculateRandomHash();
      var descriptor = new Object();
      descriptor.value = hash;
      descriptor.enumerable = false;
      Object.defineProperty(obj, 'kotlinHashCodeValue$', descriptor);
    }
    // Inline function 'kotlin.js.unsafeCast' call
    return obj['kotlinHashCodeValue$'];
  }
  function calculateRandomHash() {
    // Inline function 'kotlin.js.jsBitwiseOr' call
    return Math.random() * 4.294967296E9 | 0;
  }
  function objectCreate(proto) {
    proto = proto === VOID ? null : proto;
    return Object.create(proto);
  }
  function defineProp(obj, name, getter, setter) {
    return Object.defineProperty(obj, name, {configurable: true, get: getter, set: setter});
  }
  function toString_1(o) {
    var tmp;
    if (o == null) {
      tmp = 'null';
    } else if (isArrayish(o)) {
      tmp = '[...]';
    } else if (!(typeof o.toString === 'function')) {
      tmp = anyToString(o);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = o.toString();
    }
    return tmp;
  }
  function equals(obj1, obj2) {
    if (obj1 == null) {
      return obj2 == null;
    }
    if (obj2 == null) {
      return false;
    }
    if (typeof obj1 === 'object' && typeof obj1.equals === 'function') {
      return obj1.equals(obj2);
    }
    if (obj1 !== obj1) {
      return obj2 !== obj2;
    }
    if (typeof obj1 === 'number' && typeof obj2 === 'number') {
      var tmp;
      if (obj1 === obj2) {
        var tmp_0;
        if (obj1 !== 0) {
          tmp_0 = true;
        } else {
          // Inline function 'kotlin.js.asDynamic' call
          var tmp_1 = 1 / obj1;
          // Inline function 'kotlin.js.asDynamic' call
          tmp_0 = tmp_1 === 1 / obj2;
        }
        tmp = tmp_0;
      } else {
        tmp = false;
      }
      return tmp;
    }
    return obj1 === obj2;
  }
  function hashCode(obj) {
    if (obj == null)
      return 0;
    var typeOf = typeof obj;
    var tmp;
    switch (typeOf) {
      case 'object':
        tmp = 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
        break;
      case 'function':
        tmp = getObjectHashCode(obj);
        break;
      case 'number':
        tmp = getNumberHashCode(obj);
        break;
      case 'boolean':
        // Inline function 'kotlin.js.unsafeCast' call

        tmp = getBooleanHashCode(obj);
        break;
      case 'string':
        tmp = getStringHashCode(String(obj));
        break;
      case 'bigint':
        tmp = getBigIntHashCode(obj);
        break;
      case 'symbol':
        tmp = getSymbolHashCode(obj);
        break;
      default:
        tmp = function () {
          throw new Error('Unexpected typeof `' + typeOf + '`');
        }();
        break;
    }
    return tmp;
  }
  function anyToString(o) {
    return Object.prototype.toString.call(o);
  }
  function getBooleanHashCode(value) {
    return value ? 1231 : 1237;
  }
  function getStringHashCode(str) {
    var hash = 0;
    var length = str.length;
    var inductionVariable = 0;
    var last = length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        var code = str.charCodeAt(i);
        hash = imul(hash, 31) + code | 0;
      }
       while (!(i === last));
    return hash;
  }
  function getBigIntHashCode(value) {
    var shiftNumber = BigInt(32);
    var MASK = BigInt(4.294967295E9);
    var bigNumber = value < 0 ? -value : value;
    var hashCode = 0;
    var signum = value < 0 ? -1 : 1;
    while (bigNumber != 0) {
      // Inline function 'kotlin.js.unsafeCast' call
      var chunk = Number(bigNumber & MASK);
      hashCode = imul(31, hashCode) + chunk | 0;
      bigNumber = bigNumber >> shiftNumber;
    }
    return imul(hashCode, signum);
  }
  function getSymbolHashCode(value) {
    var hashCodeMap = symbolIsSharable(value) ? getSymbolMap() : getSymbolWeakMap();
    var cachedHashCode = hashCodeMap.get(value);
    if (cachedHashCode !== VOID)
      return cachedHashCode;
    var hash = calculateRandomHash();
    hashCodeMap.set(value, hash);
    return hash;
  }
  function symbolIsSharable(symbol) {
    return Symbol.keyFor(symbol) != VOID;
  }
  function getSymbolMap() {
    if (symbolMap === VOID) {
      symbolMap = new Map();
    }
    return symbolMap;
  }
  function getSymbolWeakMap() {
    if (symbolWeakMap === VOID) {
      symbolWeakMap = new WeakMap();
    }
    return symbolWeakMap;
  }
  var symbolMap;
  var symbolWeakMap;
  function boxIntrinsic(x) {
    var message = 'Should be lowered';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  }
  function unboxIntrinsic(x) {
    var message = 'Should be lowered';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  }
  function captureStack(instance, constructorFunction) {
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(instance, constructorFunction);
    } else {
      // Inline function 'kotlin.js.asDynamic' call
      instance.stack = (new Error()).stack;
    }
  }
  function protoOf(constructor) {
    return constructor.prototype;
  }
  function extendThrowable(this_, message, cause) {
    Error.call(this_);
    setPropertiesToThrowableInstance(this_, message, cause);
  }
  function setPropertiesToThrowableInstance(this_, message, cause) {
    var errorInfo = calculateErrorInfo(Object.getPrototypeOf(this_));
    if ((errorInfo & 1) === 0) {
      var tmp;
      if (message == null) {
        var tmp_0;
        if (!(message === null)) {
          var tmp1_elvis_lhs = cause == null ? null : cause.toString();
          tmp_0 = tmp1_elvis_lhs == null ? VOID : tmp1_elvis_lhs;
        } else {
          tmp_0 = VOID;
        }
        tmp = tmp_0;
      } else {
        tmp = message;
      }
      this_.message = tmp;
    }
    if ((errorInfo & 2) === 0) {
      this_.cause = cause;
    }
    this_.name = Object.getPrototypeOf(this_).constructor.name;
  }
  function ensureNotNull(v) {
    var tmp;
    if (v == null) {
      THROW_NPE();
    } else {
      tmp = v;
    }
    return tmp;
  }
  function THROW_NPE() {
    throw NullPointerException_init_$Create$();
  }
  function noWhenBranchMatchedException() {
    throw NoWhenBranchMatchedException_init_$Create$();
  }
  function THROW_CCE() {
    throw ClassCastException_init_$Create$();
  }
  function throwUninitializedPropertyAccessException(name) {
    throw UninitializedPropertyAccessException_init_$Create$_0('lateinit property ' + name + ' has not been initialized');
  }
  function get_ZERO() {
    _init_properties_longJs_kt__elc2w5();
    return ZERO;
  }
  var ZERO;
  function get_ONE() {
    _init_properties_longJs_kt__elc2w5();
    return ONE;
  }
  var ONE;
  function get_NEG_ONE() {
    _init_properties_longJs_kt__elc2w5();
    return NEG_ONE;
  }
  var NEG_ONE;
  function get_MAX_VALUE() {
    _init_properties_longJs_kt__elc2w5();
    return MAX_VALUE;
  }
  var MAX_VALUE;
  function get_MIN_VALUE() {
    _init_properties_longJs_kt__elc2w5();
    return MIN_VALUE;
  }
  var MIN_VALUE;
  function get_TWO_PWR_24_() {
    _init_properties_longJs_kt__elc2w5();
    return TWO_PWR_24_;
  }
  var TWO_PWR_24_;
  function compare(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (equalsLong(_this__u8e3s4, other)) {
      return 0;
    }
    var thisNeg = isNegative(_this__u8e3s4);
    var otherNeg = isNegative(other);
    return thisNeg && !otherNeg ? -1 : !thisNeg && otherNeg ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;
  }
  function add(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    var a48 = _this__u8e3s4.y_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.y_1 & 65535;
    var a16 = _this__u8e3s4.x_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.x_1 & 65535;
    var b48 = other.y_1 >>> 16 | 0;
    var b32 = other.y_1 & 65535;
    var b16 = other.x_1 >>> 16 | 0;
    var b00 = other.x_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + (a00 + b00 | 0) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + (a16 + b16 | 0) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + (a32 + b32 | 0) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (a48 + b48 | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function subtract(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return add(_this__u8e3s4, other.p2());
  }
  function multiply(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    } else if (isZero(other)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      return isOdd(other) ? get_MIN_VALUE() : get_ZERO();
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = multiply(negate(_this__u8e3s4), negate(other));
      } else {
        tmp = negate(multiply(negate(_this__u8e3s4), other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(multiply(_this__u8e3s4, negate(other)));
    }
    if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) && lessThan(other, get_TWO_PWR_24_())) {
      return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));
    }
    var a48 = _this__u8e3s4.y_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.y_1 & 65535;
    var a16 = _this__u8e3s4.x_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.x_1 & 65535;
    var b48 = other.y_1 >>> 16 | 0;
    var b32 = other.y_1 & 65535;
    var b16 = other.x_1 >>> 16 | 0;
    var b00 = other.x_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + imul(a00, b00) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + imul(a16, b00) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c16 = c16 + imul(a00, b16) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + imul(a32, b00) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a16, b16) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a00, b32) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function divide(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (isZero(other)) {
      throw Exception_init_$Create$_0('division by zero');
    } else if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      if (equalsLong(other, get_ONE()) || equalsLong(other, get_NEG_ONE())) {
        return get_MIN_VALUE();
      } else if (equalsLong(other, get_MIN_VALUE())) {
        return get_ONE();
      } else {
        var halfThis = shiftRight(_this__u8e3s4, 1);
        var approx = shiftLeft(halfThis.n2(other), 1);
        if (equalsLong(approx, get_ZERO())) {
          return isNegative(other) ? get_ONE() : get_NEG_ONE();
        } else {
          var rem = subtract(_this__u8e3s4, multiply(other, approx));
          return add(approx, rem.n2(other));
        }
      }
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = negate(_this__u8e3s4).n2(negate(other));
      } else {
        tmp = negate(negate(_this__u8e3s4).n2(other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(_this__u8e3s4.n2(negate(other)));
    }
    var res = get_ZERO();
    var rem_0 = _this__u8e3s4;
    while (greaterThanOrEqual(rem_0, other)) {
      var approxDouble = toNumber(rem_0) / toNumber(other);
      var approx2 = Math.max(1.0, Math.floor(approxDouble));
      var log2 = Math.ceil(Math.log(approx2) / Math.LN2);
      var delta = log2 <= 48 ? 1.0 : Math.pow(2.0, log2 - 48);
      var approxRes = fromNumber(approx2);
      var approxRem = multiply(approxRes, other);
      while (isNegative(approxRem) || greaterThan(approxRem, rem_0)) {
        approx2 = approx2 - delta;
        approxRes = fromNumber(approx2);
        approxRem = multiply(approxRes, other);
      }
      if (isZero(approxRes)) {
        approxRes = get_ONE();
      }
      res = add(res, approxRes);
      rem_0 = subtract(rem_0, approxRem);
    }
    return res;
  }
  function modulo(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return subtract(_this__u8e3s4, multiply(_this__u8e3s4.n2(other), other));
  }
  function shiftLeft(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.x_1 << numBits_0, _this__u8e3s4.y_1 << numBits_0 | (_this__u8e3s4.x_1 >>> (32 - numBits_0 | 0) | 0));
      } else {
        return new Long(0, _this__u8e3s4.x_1 << (numBits_0 - 32 | 0));
      }
    }
  }
  function shiftRight(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.x_1 >>> numBits_0 | 0 | _this__u8e3s4.y_1 << (32 - numBits_0 | 0), _this__u8e3s4.y_1 >> numBits_0);
      } else {
        return new Long(_this__u8e3s4.y_1 >> (numBits_0 - 32 | 0), _this__u8e3s4.y_1 >= 0 ? 0 : -1);
      }
    }
  }
  function shiftRightUnsigned(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.x_1 >>> numBits_0 | 0 | _this__u8e3s4.y_1 << (32 - numBits_0 | 0), _this__u8e3s4.y_1 >>> numBits_0 | 0);
      } else {
        var tmp;
        if (numBits_0 === 32) {
          tmp = new Long(_this__u8e3s4.y_1, 0);
        } else {
          tmp = new Long(_this__u8e3s4.y_1 >>> (numBits_0 - 32 | 0) | 0, 0);
        }
        return tmp;
      }
    }
  }
  function toNumber(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 * 4.294967296E9 + getLowBitsUnsigned(_this__u8e3s4);
  }
  function toStringImpl(_this__u8e3s4, radix) {
    _init_properties_longJs_kt__elc2w5();
    if (radix < 2 || 36 < radix) {
      throw Exception_init_$Create$_0('radix out of range: ' + radix);
    }
    if (isZero(_this__u8e3s4)) {
      return '0';
    }
    if (isNegative(_this__u8e3s4)) {
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
        var radixLong = fromInt(radix);
        var div = _this__u8e3s4.n2(radixLong);
        var rem = subtract(multiply(div, radixLong), _this__u8e3s4).b1();
        var tmp = toStringImpl(div, radix);
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        return tmp + rem.toString(radix);
      } else {
        return '-' + toStringImpl(negate(_this__u8e3s4), radix);
      }
    }
    var digitsPerTime = radix === 2 ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5;
    var radixToPower = fromNumber(Math.pow(radix, digitsPerTime));
    var rem_0 = _this__u8e3s4;
    var result = '';
    while (true) {
      var remDiv = rem_0.n2(radixToPower);
      var intval = subtract(rem_0, multiply(remDiv, radixToPower)).b1();
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var digits = intval.toString(radix);
      rem_0 = remDiv;
      if (isZero(rem_0)) {
        return digits + result;
      } else {
        while (digits.length < digitsPerTime) {
          digits = '0' + digits;
        }
        result = digits + result;
      }
    }
  }
  function equalsLong(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 === other.y_1 && _this__u8e3s4.x_1 === other.x_1;
  }
  function hashCode_0(l) {
    _init_properties_longJs_kt__elc2w5();
    return l.x_1 ^ l.y_1;
  }
  function fromInt(value) {
    _init_properties_longJs_kt__elc2w5();
    return new Long(value, value < 0 ? -1 : 0);
  }
  function isNegative(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 < 0;
  }
  function isZero(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 === 0 && _this__u8e3s4.x_1 === 0;
  }
  function isOdd(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return (_this__u8e3s4.x_1 & 1) === 1;
  }
  function negate(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.p2();
  }
  function lessThan(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) < 0;
  }
  function fromNumber(value) {
    _init_properties_longJs_kt__elc2w5();
    if (isNaN_0(value)) {
      return get_ZERO();
    } else if (value <= -9.223372036854776E18) {
      return get_MIN_VALUE();
    } else if (value + 1 >= 9.223372036854776E18) {
      return get_MAX_VALUE();
    } else if (value < 0) {
      return negate(fromNumber(-value));
    } else {
      var twoPwr32 = 4.294967296E9;
      // Inline function 'kotlin.js.jsBitwiseOr' call
      var tmp = value % twoPwr32 | 0;
      // Inline function 'kotlin.js.jsBitwiseOr' call
      var tmp$ret$1 = value / twoPwr32 | 0;
      return new Long(tmp, tmp$ret$1);
    }
  }
  function greaterThan(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) > 0;
  }
  function greaterThanOrEqual(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) >= 0;
  }
  function getLowBitsUnsigned(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.x_1 >= 0 ? _this__u8e3s4.x_1 : 4.294967296E9 + _this__u8e3s4.x_1;
  }
  var properties_initialized_longJs_kt_4syf89;
  function _init_properties_longJs_kt__elc2w5() {
    if (!properties_initialized_longJs_kt_4syf89) {
      properties_initialized_longJs_kt_4syf89 = true;
      ZERO = fromInt(0);
      ONE = fromInt(1);
      NEG_ONE = fromInt(-1);
      MAX_VALUE = new Long(-1, 2147483647);
      MIN_VALUE = new Long(0, -2147483648);
      TWO_PWR_24_ = fromInt(16777216);
    }
  }
  function createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    var undef = VOID;
    var iid = kind === 'interface' ? generateInterfaceId() : VOID;
    return {kind: kind, simpleName: name, associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, $kClass$: undef, defaultConstructor: defaultConstructor, iid: iid};
  }
  function generateInterfaceId() {
    if (globalInterfaceId === VOID) {
      globalInterfaceId = 0;
    }
    // Inline function 'kotlin.js.unsafeCast' call
    globalInterfaceId = globalInterfaceId + 1 | 0;
    // Inline function 'kotlin.js.unsafeCast' call
    return globalInterfaceId;
  }
  var globalInterfaceId;
  function initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    if (!(parent == null)) {
      ctor.prototype = Object.create(parent.prototype);
      ctor.prototype.constructor = ctor;
    }
    var metadata = createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity);
    ctor.$metadata$ = metadata;
    if (!(interfaces == null)) {
      var receiver = !equals(metadata.iid, VOID) ? ctor : ctor.prototype;
      receiver.$imask$ = implement(interfaces);
    }
  }
  function initMetadataForClass(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    var kind = 'class';
    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
  }
  function initMetadataForObject(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    var kind = 'object';
    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
  }
  function initMetadataForInterface(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    var kind = 'interface';
    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
  }
  function initMetadataForLambda(ctor, parent, interfaces, suspendArity) {
    initMetadataForClass(ctor, 'Lambda', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function initMetadataForCoroutine(ctor, parent, interfaces, suspendArity) {
    initMetadataForClass(ctor, 'Coroutine', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function initMetadataForFunctionReference(ctor, parent, interfaces, suspendArity) {
    initMetadataForClass(ctor, 'FunctionReference', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function initMetadataForCompanion(ctor, parent, interfaces, suspendArity) {
    initMetadataForObject(ctor, 'Companion', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function classMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    return createMetadata('class', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity);
  }
  function toByte(a) {
    // Inline function 'kotlin.js.unsafeCast' call
    return a << 24 >> 24;
  }
  function numberToInt(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a.b1();
    } else {
      tmp = doubleToInt(a);
    }
    return tmp;
  }
  function doubleToInt(a) {
    var tmp;
    if (a > 2147483647) {
      tmp = 2147483647;
    } else if (a < -2147483648) {
      tmp = -2147483648;
    } else {
      // Inline function 'kotlin.js.jsBitwiseOr' call
      tmp = a | 0;
    }
    return tmp;
  }
  function toShort(a) {
    // Inline function 'kotlin.js.unsafeCast' call
    return a << 16 >> 16;
  }
  function numberToLong(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a;
    } else {
      tmp = fromNumber(a);
    }
    return tmp;
  }
  function numberToChar(a) {
    // Inline function 'kotlin.toUShort' call
    var this_0 = numberToInt(a);
    var tmp$ret$0 = _UShort___init__impl__jigrne(toShort(this_0));
    return _Char___init__impl__6a9atx_0(tmp$ret$0);
  }
  function toLong(a) {
    return fromInt(a);
  }
  function ByteCompanionObject() {
    this.MIN_VALUE = -128;
    this.MAX_VALUE = 127;
    this.SIZE_BYTES = 1;
    this.SIZE_BITS = 8;
  }
  protoOf(ByteCompanionObject).c3 = function () {
    return this.MIN_VALUE;
  };
  protoOf(ByteCompanionObject).d3 = function () {
    return this.MAX_VALUE;
  };
  protoOf(ByteCompanionObject).e3 = function () {
    return this.SIZE_BYTES;
  };
  protoOf(ByteCompanionObject).f3 = function () {
    return this.SIZE_BITS;
  };
  var ByteCompanionObject_instance;
  function ByteCompanionObject_getInstance() {
    return ByteCompanionObject_instance;
  }
  function ShortCompanionObject() {
    this.MIN_VALUE = -32768;
    this.MAX_VALUE = 32767;
    this.SIZE_BYTES = 2;
    this.SIZE_BITS = 16;
  }
  protoOf(ShortCompanionObject).c3 = function () {
    return this.MIN_VALUE;
  };
  protoOf(ShortCompanionObject).d3 = function () {
    return this.MAX_VALUE;
  };
  protoOf(ShortCompanionObject).e3 = function () {
    return this.SIZE_BYTES;
  };
  protoOf(ShortCompanionObject).f3 = function () {
    return this.SIZE_BITS;
  };
  var ShortCompanionObject_instance;
  function ShortCompanionObject_getInstance() {
    return ShortCompanionObject_instance;
  }
  function IntCompanionObject() {
    this.MIN_VALUE = -2147483648;
    this.MAX_VALUE = 2147483647;
    this.SIZE_BYTES = 4;
    this.SIZE_BITS = 32;
  }
  protoOf(IntCompanionObject).c3 = function () {
    return this.MIN_VALUE;
  };
  protoOf(IntCompanionObject).d3 = function () {
    return this.MAX_VALUE;
  };
  protoOf(IntCompanionObject).e3 = function () {
    return this.SIZE_BYTES;
  };
  protoOf(IntCompanionObject).f3 = function () {
    return this.SIZE_BITS;
  };
  var IntCompanionObject_instance;
  function IntCompanionObject_getInstance() {
    return IntCompanionObject_instance;
  }
  function FloatCompanionObject() {
    this.MIN_VALUE = 1.4E-45;
    this.MAX_VALUE = 3.4028235E38;
    this.POSITIVE_INFINITY = Infinity;
    this.NEGATIVE_INFINITY = -Infinity;
    this.NaN = NaN;
    this.SIZE_BYTES = 4;
    this.SIZE_BITS = 32;
  }
  protoOf(FloatCompanionObject).c3 = function () {
    return this.MIN_VALUE;
  };
  protoOf(FloatCompanionObject).d3 = function () {
    return this.MAX_VALUE;
  };
  protoOf(FloatCompanionObject).g3 = function () {
    return this.POSITIVE_INFINITY;
  };
  protoOf(FloatCompanionObject).h3 = function () {
    return this.NEGATIVE_INFINITY;
  };
  protoOf(FloatCompanionObject).i3 = function () {
    return this.NaN;
  };
  protoOf(FloatCompanionObject).e3 = function () {
    return this.SIZE_BYTES;
  };
  protoOf(FloatCompanionObject).f3 = function () {
    return this.SIZE_BITS;
  };
  var FloatCompanionObject_instance;
  function FloatCompanionObject_getInstance() {
    return FloatCompanionObject_instance;
  }
  function DoubleCompanionObject() {
    this.MIN_VALUE = 4.9E-324;
    this.MAX_VALUE = 1.7976931348623157E308;
    this.POSITIVE_INFINITY = Infinity;
    this.NEGATIVE_INFINITY = -Infinity;
    this.NaN = NaN;
    this.SIZE_BYTES = 8;
    this.SIZE_BITS = 64;
  }
  protoOf(DoubleCompanionObject).c3 = function () {
    return this.MIN_VALUE;
  };
  protoOf(DoubleCompanionObject).d3 = function () {
    return this.MAX_VALUE;
  };
  protoOf(DoubleCompanionObject).g3 = function () {
    return this.POSITIVE_INFINITY;
  };
  protoOf(DoubleCompanionObject).h3 = function () {
    return this.NEGATIVE_INFINITY;
  };
  protoOf(DoubleCompanionObject).i3 = function () {
    return this.NaN;
  };
  protoOf(DoubleCompanionObject).e3 = function () {
    return this.SIZE_BYTES;
  };
  protoOf(DoubleCompanionObject).f3 = function () {
    return this.SIZE_BITS;
  };
  var DoubleCompanionObject_instance;
  function DoubleCompanionObject_getInstance() {
    return DoubleCompanionObject_instance;
  }
  function StringCompanionObject() {
  }
  var StringCompanionObject_instance;
  function StringCompanionObject_getInstance() {
    return StringCompanionObject_instance;
  }
  function BooleanCompanionObject() {
  }
  var BooleanCompanionObject_instance;
  function BooleanCompanionObject_getInstance() {
    return BooleanCompanionObject_instance;
  }
  function numberRangeToNumber(start, endInclusive) {
    return new IntRange(start, endInclusive);
  }
  function get_propertyRefClassMetadataCache() {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return propertyRefClassMetadataCache;
  }
  var propertyRefClassMetadataCache;
  function metadataObject() {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return classMeta(VOID, VOID, VOID, VOID, VOID);
  }
  function getPropertyCallableRef(name, paramCount, superType, getter, setter) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    getter.get = getter;
    getter.set = setter;
    getter.callableName = name;
    // Inline function 'kotlin.js.unsafeCast' call
    return getPropertyRefClass(getter, getKPropMetadata(paramCount, setter), getInterfaceMaskFor(getter, superType));
  }
  function getPropertyRefClass(obj, metadata, imask) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    obj.$metadata$ = metadata;
    obj.constructor = obj;
    obj.$imask$ = imask;
    return obj;
  }
  function getKPropMetadata(paramCount, setter) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return get_propertyRefClassMetadataCache()[paramCount][setter == null ? 0 : 1];
  }
  function getInterfaceMaskFor(obj, superType) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    var tmp0_elvis_lhs = obj.$imask$;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = [superType];
      tmp = implement(tmp$ret$2);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  var properties_initialized_reflectRuntime_kt_inkhwd;
  function _init_properties_reflectRuntime_kt__5r4uu3() {
    if (!properties_initialized_reflectRuntime_kt_inkhwd) {
      properties_initialized_reflectRuntime_kt_inkhwd = true;
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp = [metadataObject(), metadataObject()];
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp_0 = [metadataObject(), metadataObject()];
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      propertyRefClassMetadataCache = [tmp, tmp_0, [metadataObject(), metadataObject()]];
    }
  }
  function isArrayish(o) {
    return isJsArray(o) || isView(o);
  }
  function isJsArray(obj) {
    // Inline function 'kotlin.js.unsafeCast' call
    return Array.isArray(obj);
  }
  function isInterface(obj, iface) {
    return isInterfaceImpl(obj, iface.$metadata$.iid);
  }
  function isInterfaceImpl(obj, iface) {
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_elvis_lhs = obj.$imask$;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var mask = tmp;
    return isBitSet(mask, iface);
  }
  function isArray(obj) {
    var tmp;
    if (isJsArray(obj)) {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = !obj.$type$;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isSuspendFunction(obj, arity) {
    var objTypeOf = typeof obj;
    if (objTypeOf === 'function') {
      // Inline function 'kotlin.js.unsafeCast' call
      return obj.$arity === arity;
    }
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp1_safe_receiver = obj == null ? null : obj.constructor;
    var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.$metadata$;
    var tmp3_elvis_lhs = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.suspendArity;
    var tmp;
    if (tmp3_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp3_elvis_lhs;
    }
    var suspendArity = tmp;
    var result = false;
    var inductionVariable = 0;
    var last = suspendArity.length;
    $l$loop: while (inductionVariable < last) {
      var item = suspendArity[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (arity === item) {
        result = true;
        break $l$loop;
      }
    }
    return result;
  }
  function isNumber(a) {
    var tmp;
    if (typeof a === 'number') {
      tmp = true;
    } else {
      tmp = a instanceof Long;
    }
    return tmp;
  }
  function isCharSequence(value) {
    return typeof value === 'string' || isInterface(value, CharSequence);
  }
  function isBooleanArray(a) {
    return isJsArray(a) && a.$type$ === 'BooleanArray';
  }
  function isByteArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int8Array;
  }
  function isShortArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int16Array;
  }
  function isCharArray(a) {
    var tmp;
    // Inline function 'kotlin.js.jsInstanceOf' call
    if (a instanceof Uint16Array) {
      tmp = a.$type$ === 'CharArray';
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isIntArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int32Array;
  }
  function isFloatArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Float32Array;
  }
  function isLongArray(a) {
    return isJsArray(a) && a.$type$ === 'LongArray';
  }
  function isDoubleArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Float64Array;
  }
  function jsIsType(obj, jsClass) {
    if (jsClass === Object) {
      return obj != null;
    }
    var objType = typeof obj;
    var jsClassType = typeof jsClass;
    if (obj == null || jsClass == null || (!(objType === 'object') && !(objType === 'function'))) {
      return false;
    }
    var constructor = jsClassType === 'object' ? jsGetPrototypeOf(jsClass) : jsClass;
    var klassMetadata = constructor.$metadata$;
    if ((klassMetadata == null ? null : klassMetadata.kind) === 'interface') {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp1_elvis_lhs = klassMetadata.iid;
      var tmp;
      if (tmp1_elvis_lhs == null) {
        return false;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var iid = tmp;
      return isInterfaceImpl(obj, iid);
    }
    // Inline function 'kotlin.js.jsInstanceOf' call
    return obj instanceof constructor;
  }
  function jsGetPrototypeOf(jsClass) {
    return Object.getPrototypeOf(jsClass);
  }
  function calculateErrorInfo(proto) {
    var tmp0_safe_receiver = proto.constructor;
    var metadata = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.$metadata$;
    var tmp2_safe_receiver = metadata == null ? null : metadata.errorInfo;
    if (tmp2_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp2_safe_receiver;
    }
    var result = 0;
    if (hasProp(proto, 'message'))
      result = result | 1;
    if (hasProp(proto, 'cause'))
      result = result | 2;
    if (!(result === 3)) {
      var parentProto = getPrototypeOf(proto);
      if (parentProto != Error.prototype) {
        result = result | calculateErrorInfo(parentProto);
      }
    }
    if (!(metadata == null)) {
      metadata.errorInfo = result;
    }
    return result;
  }
  function hasProp(proto, propName) {
    return proto.hasOwnProperty(propName);
  }
  function getPrototypeOf(obj) {
    return Object.getPrototypeOf(obj);
  }
  function get_VOID() {
    _init_properties_void_kt__3zg9as();
    return VOID;
  }
  var VOID;
  var properties_initialized_void_kt_e4ret2;
  function _init_properties_void_kt__3zg9as() {
    if (!properties_initialized_void_kt_e4ret2) {
      properties_initialized_void_kt_e4ret2 = true;
      VOID = void 0;
    }
  }
  function asList(_this__u8e3s4) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return new ArrayList(_this__u8e3s4);
  }
  function contentEquals(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function copyOf(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'withType' call
    var type = 'CharArray';
    var array = fillFrom(_this__u8e3s4, charArray(newSize));
    array.$type$ = type;
    return array;
  }
  function copyOf_0(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Float64Array(newSize));
  }
  function copyOf_1(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Float32Array(newSize));
  }
  function copyOf_2(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'withType' call
    var type = 'LongArray';
    var array = arrayCopyResize(_this__u8e3s4, newSize, new Long(0, 0));
    array.$type$ = type;
    return array;
  }
  function copyOf_3(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Int32Array(newSize));
  }
  function copyOf_4(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Int16Array(newSize));
  }
  function copyOf_5(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Int8Array(newSize));
  }
  function copyOf_6(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'withType' call
    var type = 'BooleanArray';
    var array = arrayCopyResize(_this__u8e3s4, newSize, false);
    array.$type$ = type;
    return array;
  }
  function contentHashCode(_this__u8e3s4) {
    return contentHashCodeInternal(_this__u8e3s4);
  }
  function copyOf_7(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return arrayCopyResize(_this__u8e3s4, newSize, null);
  }
  function contentToString(_this__u8e3s4) {
    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : joinToString_0(_this__u8e3s4, ', ', '[', ']');
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function decodeVarLenBase64(base64, fromBase64, resultLength) {
    var result = new Int32Array(resultLength);
    var index = 0;
    var int = 0;
    var shift = 0;
    var inductionVariable = 0;
    var last = base64.length;
    while (inductionVariable < last) {
      var char = charSequenceGet(base64, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'kotlin.code' call
      var sixBit = fromBase64[Char__toInt_impl_vasixd(char)];
      int = int | (sixBit & 31) << shift;
      if (sixBit < 32) {
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        result[tmp1] = int;
        int = 0;
        shift = 0;
      } else {
        shift = shift + 5 | 0;
      }
    }
    return result;
  }
  function digitToIntImpl(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    var index = binarySearchRange(Digit_getInstance().j3_1, ch);
    var diff = ch - Digit_getInstance().j3_1[index] | 0;
    return diff < 10 ? diff : -1;
  }
  function binarySearchRange(array, needle) {
    var bottom = 0;
    var top = array.length - 1 | 0;
    var middle = -1;
    var value = 0;
    while (bottom <= top) {
      middle = (bottom + top | 0) / 2 | 0;
      value = array[middle];
      if (needle > value)
        bottom = middle + 1 | 0;
      else if (needle === value)
        return middle;
      else
        top = middle - 1 | 0;
    }
    return middle - (needle < value ? 1 : 0) | 0;
  }
  function Digit() {
    Digit_instance = this;
    var tmp = this;
    // Inline function 'kotlin.intArrayOf' call
    tmp.j3_1 = new Int32Array([48, 1632, 1776, 1984, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3558, 3664, 3792, 3872, 4160, 4240, 6112, 6160, 6470, 6608, 6784, 6800, 6992, 7088, 7232, 7248, 42528, 43216, 43264, 43472, 43504, 43600, 44016, 65296]);
  }
  var Digit_instance;
  function Digit_getInstance() {
    if (Digit_instance == null)
      new Digit();
    return Digit_instance;
  }
  function isLetterImpl(_this__u8e3s4) {
    return !(getLetterType(_this__u8e3s4) === 0);
  }
  function getLetterType(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    var index = binarySearchRange(Letter_getInstance().k3_1, ch);
    var rangeStart = Letter_getInstance().k3_1[index];
    var rangeEnd = (rangeStart + Letter_getInstance().l3_1[index] | 0) - 1 | 0;
    var code = Letter_getInstance().m3_1[index];
    if (ch > rangeEnd) {
      return 0;
    }
    var lastTwoBits = code & 3;
    if (lastTwoBits === 0) {
      var shift = 2;
      var threshold = rangeStart;
      var inductionVariable = 0;
      if (inductionVariable <= 1)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          threshold = threshold + (code >> shift & 127) | 0;
          if (threshold > ch) {
            return 3;
          }
          shift = shift + 7 | 0;
          threshold = threshold + (code >> shift & 127) | 0;
          if (threshold > ch) {
            return 0;
          }
          shift = shift + 7 | 0;
        }
         while (inductionVariable <= 1);
      return 3;
    }
    if (code <= 7) {
      return lastTwoBits;
    }
    var distance = ch - rangeStart | 0;
    var shift_0 = code <= 31 ? distance % 2 | 0 : distance;
    return code >> imul(2, shift_0) & 3;
  }
  function Letter() {
    Letter_instance = this;
    var toBase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var fromBase64 = new Int32Array(128);
    var inductionVariable = 0;
    var last = charSequenceLength(toBase64) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.code' call
        var this_0 = charSequenceGet(toBase64, i);
        fromBase64[Char__toInt_impl_vasixd(this_0)] = i;
      }
       while (inductionVariable <= last);
    var rangeStartDiff = 'hCgBpCQGYHZH5BRpBPPPPPPRMP5BPPlCPP6BkEPPPPcPXPzBvBrB3BOiDoBHwD+E3DauCnFmBmB2D6E1BlBTiBmBlBP5BhBiBrBvBjBqBnBPRtBiCmCtBlB0BmB5BiB7BmBgEmChBZgCoEoGVpBSfRhBPqKQ2BwBYoFgB4CJuTiEvBuCuDrF5DgEgFlJ1DgFmBQtBsBRGsB+BPiBlD1EIjDPRPPPQPPPPPGQSQS/DxENVNU+B9zCwBwBPPCkDPNnBPqDYY1R8B7FkFgTgwGgwUwmBgKwBuBScmEP/BPPPPPPrBP8B7F1B/ErBqC6B7BiBmBfQsBUwCw/KwqIwLwETPcPjQgJxFgBlBsD';
    var diff = decodeVarLenBase64(rangeStartDiff, fromBase64, 222);
    var start = new Int32Array(diff.length);
    var inductionVariable_0 = 0;
    var last_0 = diff.length - 1 | 0;
    if (inductionVariable_0 <= last_0)
      do {
        var i_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (i_0 === 0) {
          start[i_0] = diff[i_0];
        } else {
          start[i_0] = start[i_0 - 1 | 0] + diff[i_0] | 0;
        }
      }
       while (inductionVariable_0 <= last_0);
    this.k3_1 = start;
    var rangeLength = 'aaMBXHYH5BRpBPPPPPPRMP5BPPlCPPzBDOOPPcPXPzBvBjB3BOhDmBBpB7DoDYxB+EiBP1DoExBkBQhBekBPmBgBhBctBiBMWOOXhCsBpBkBUV3Ba4BkB0DlCgBXgBtD4FSdBfPhBPpKP0BvBXjEQ2CGsT8DhBtCqDpFvD1D3E0IrD2EkBJrBDOBsB+BPiBlB1EIjDPPPPPPPPPPPGPPMNLsBNPNPKCvBvBPPCkDPBmBPhDXXgD4B6FzEgDguG9vUtkB9JcuBSckEP/BPPPPPPBPf4FrBjEhBpC3B5BKaWPrBOwCk/KsCuLqDHPbPxPsFtEaaqDL';
    this.l3_1 = decodeVarLenBase64(rangeLength, fromBase64, 222);
    var rangeCategory = 'GFjgggUHGGFFZZZmzpz5qB6s6020B60ptltB6smt2sB60mz22B1+vv+8BZZ5s2850BW5q1ymtB506smzBF3q1q1qB1q1q1+Bgii4wDTm74g3KiggxqM60q1q1Bq1o1q1BF1qlrqrBZ2q5wprBGFZWWZGHFsjiooLowgmOowjkwCkgoiIk7ligGogiioBkwkiYkzj2oNoi+sbkwj04DghhkQ8wgiYkgoioDsgnkwC4gikQ//v+85BkwvoIsgoyI4yguI0whiwEowri4CoghsJowgqYowgm4DkwgsY/nwnzPowhmYkg6wI8yggZswikwHgxgmIoxgqYkwgk4DkxgmIkgoioBsgssoBgzgyI8g9gL8g9kI0wgwJoxgkoC0wgioFkw/wI0w53iF4gioYowjmgBHGq1qkgwBF1q1q8qBHwghuIwghyKk0goQkwgoQk3goQHGFHkyg0pBgxj6IoinkxDswno7Ikwhz9Bo0gioB8z48Rwli0xN0mpjoX8w78pDwltoqKHFGGwwgsIHFH3q1q16BFHWFZ1q10q1B2qlwq1B1q10q1B2q1yq1B6q1gq1Biq1qhxBir1qp1Bqt1q1qB1g1q1+B//3q16B///q1qBH/qlqq9Bholqq9B1i00a1q10qD1op1HkwmigEigiy6Cptogq1Bixo1kDq7/j00B2qgoBWGFm1lz50B6s5q1+BGWhggzhwBFFhgk4//Bo2jigE8wguI8wguI8wgugUog1qoB4qjmIwwi2KgkYHHH4lBgiFWkgIWoghssMmz5smrBZ3q1y50B5sm7gzBtz1smzB5smz50BqzqtmzB5sgzqzBF2/9//5BowgoIwmnkzPkwgk4C8ys65BkgoqI0wgy6FghquZo2giY0ghiIsgh24B4ghsQ8QF/v1q1OFs0O8iCHHF1qggz/B8wg6Iznv+//B08QgohsjK0QGFk7hsQ4gB';
    this.m3_1 = decodeVarLenBase64(rangeCategory, fromBase64, 222);
  }
  var Letter_instance;
  function Letter_getInstance() {
    if (Letter_instance == null)
      new Letter();
    return Letter_instance;
  }
  function isWhitespaceImpl(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    return (9 <= ch ? ch <= 13 : false) || (28 <= ch ? ch <= 32 : false) || ch === 160 || (ch > 4096 && (ch === 5760 || (8192 <= ch ? ch <= 8202 : false) || ch === 8232 || ch === 8233 || ch === 8239 || ch === 8287 || ch === 12288));
  }
  function isNaN_0(_this__u8e3s4) {
    return !(_this__u8e3s4 === _this__u8e3s4);
  }
  function isInfinite(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 === Infinity) {
      tmp = true;
    } else {
      tmp = _this__u8e3s4 === -Infinity;
    }
    return tmp;
  }
  function isFinite(_this__u8e3s4) {
    return !isInfinite(_this__u8e3s4) && !isNaN_0(_this__u8e3s4);
  }
  function takeHighestOneBit(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 === 0) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.countLeadingZeroBits' call
      tmp = 1 << (31 - clz32(_this__u8e3s4) | 0);
    }
    return tmp;
  }
  function isFinite_0(_this__u8e3s4) {
    return !isInfinite_0(_this__u8e3s4) && !isNaN_1(_this__u8e3s4);
  }
  function isInfinite_0(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 === Infinity) {
      tmp = true;
    } else {
      tmp = _this__u8e3s4 === -Infinity;
    }
    return tmp;
  }
  function isNaN_1(_this__u8e3s4) {
    return !(_this__u8e3s4 === _this__u8e3s4);
  }
  function countTrailingZeroBits(_this__u8e3s4) {
    var low = _this__u8e3s4.x_1;
    return low === 0 ? 32 + countTrailingZeroBits_0(_this__u8e3s4.y_1) | 0 : countTrailingZeroBits_0(low);
  }
  function countTrailingZeroBits_0(_this__u8e3s4) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    var this_0 = ~(_this__u8e3s4 | (-_this__u8e3s4 | 0));
    return 32 - clz32(this_0) | 0;
  }
  function uintCompare(v1, v2) {
    return compareTo(v1 ^ -2147483648, v2 ^ -2147483648);
  }
  function uintDivide(v1, v2) {
    // Inline function 'kotlin.toUInt' call
    // Inline function 'kotlin.UInt.toLong' call
    // Inline function 'kotlin.uintToLong' call
    var value = _UInt___get_data__impl__f0vqqw(v1);
    var tmp = toLong(value).u2(new Long(-1, 0));
    // Inline function 'kotlin.UInt.toLong' call
    // Inline function 'kotlin.uintToLong' call
    var value_0 = _UInt___get_data__impl__f0vqqw(v2);
    var tmp$ret$3 = toLong(value_0).u2(new Long(-1, 0));
    var this_0 = tmp.n2(tmp$ret$3);
    return _UInt___init__impl__l7qpdl(this_0.b1());
  }
  function ulongCompare(v1, v2) {
    return v1.w2(new Long(0, -2147483648)).z(v2.w2(new Long(0, -2147483648)));
  }
  function ulongDivide(v1, v2) {
    // Inline function 'kotlin.ULong.toLong' call
    var dividend = _ULong___get_data__impl__fggpzb(v1);
    // Inline function 'kotlin.ULong.toLong' call
    var divisor = _ULong___get_data__impl__fggpzb(v2);
    if (divisor.z(new Long(0, 0)) < 0) {
      var tmp;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2)) < 0) {
        tmp = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        tmp = _ULong___init__impl__c78o9k(new Long(1, 0));
      }
      return tmp;
    }
    if (dividend.z(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.n2(divisor));
    }
    var quotient = dividend.t2(1).n2(divisor).r2(1);
    var rem = dividend.l2(quotient.m2(divisor));
    // Inline function 'kotlin.Long.plus' call
    var tmp_0;
    // Inline function 'kotlin.ULong.compareTo' call
    var this_0 = _ULong___init__impl__c78o9k(rem);
    var other = _ULong___init__impl__c78o9k(divisor);
    if (ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) >= 0) {
      tmp_0 = 1;
    } else {
      tmp_0 = 0;
    }
    var other_0 = tmp_0;
    var tmp$ret$4 = quotient.k2(toLong(other_0));
    return _ULong___init__impl__c78o9k(tmp$ret$4);
  }
  function ulongToString(value, base) {
    if (value.z(new Long(0, 0)) >= 0)
      return toString_3(value, base);
    // Inline function 'kotlin.Long.div' call
    var quotient = value.t2(1).n2(toLong(base)).r2(1);
    // Inline function 'kotlin.Long.times' call
    var tmp$ret$1 = quotient.m2(toLong(base));
    var rem = value.l2(tmp$ret$1);
    if (rem.z(toLong(base)) >= 0) {
      // Inline function 'kotlin.Long.minus' call
      rem = rem.l2(toLong(base));
      // Inline function 'kotlin.Long.plus' call
      quotient = quotient.k2(toLong(1));
    }
    return toString_3(quotient, base) + toString_3(rem, base);
  }
  function collectionToArray(collection) {
    return collectionToArrayCommonImpl(collection);
  }
  function terminateCollectionToArray(collectionSize, array) {
    return array;
  }
  function arrayOfNulls(reference, size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.arrayOfNulls' call
    // Inline function 'kotlin.js.asDynamic' call
    return fillArrayVal(Array(size), null);
  }
  function listOf(element) {
    return arrayListOf([element]);
  }
  function mapCapacity(expectedSize) {
    return expectedSize;
  }
  function mapOf(pair) {
    return hashMapOf([pair]);
  }
  function checkIndexOverflow(index) {
    if (index < 0) {
      throwIndexOverflow();
    }
    return index;
  }
  function copyToArray(collection) {
    var tmp;
    // Inline function 'kotlin.js.asDynamic' call
    if (collection.toArray !== undefined) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = collection.toArray();
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = collectionToArray(collection);
    }
    return tmp;
  }
  function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
    Companion_instance_5.o3(startIndex, endIndex, source.length);
    var rangeSize = endIndex - startIndex | 0;
    Companion_instance_5.o3(destinationOffset, destinationOffset + rangeSize | 0, destination.length);
    if (isView(destination) && isView(source)) {
      // Inline function 'kotlin.js.asDynamic' call
      var subrange = source.subarray(startIndex, endIndex);
      // Inline function 'kotlin.js.asDynamic' call
      destination.set(subrange, destinationOffset);
    } else {
      if (!(source === destination) || destinationOffset <= startIndex) {
        var inductionVariable = 0;
        if (inductionVariable < rangeSize)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            destination[destinationOffset + index | 0] = source[startIndex + index | 0];
          }
           while (inductionVariable < rangeSize);
      } else {
        var inductionVariable_0 = rangeSize - 1 | 0;
        if (0 <= inductionVariable_0)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + -1 | 0;
            destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
          }
           while (0 <= inductionVariable_0);
      }
    }
  }
  function setOf(element) {
    return hashSetOf([element]);
  }
  function AbstractMutableCollection() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractMutableCollection).d1 = function (elements) {
    this.p3();
    var modified = false;
    var tmp0_iterator = elements.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      if (this.e(element))
        modified = true;
    }
    return modified;
  };
  protoOf(AbstractMutableCollection).toJSON = function () {
    return this.toArray();
  };
  protoOf(AbstractMutableCollection).p3 = function () {
  };
  function IteratorImpl($outer) {
    this.s3_1 = $outer;
    this.q3_1 = 0;
    this.r3_1 = -1;
  }
  protoOf(IteratorImpl).k = function () {
    return this.q3_1 < this.s3_1.m();
  };
  protoOf(IteratorImpl).l = function () {
    if (!this.k())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.q3_1;
    this.q3_1 = tmp1 + 1 | 0;
    tmp.r3_1 = tmp1;
    return this.s3_1.o(this.r3_1);
  };
  protoOf(IteratorImpl).t3 = function () {
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!(this.r3_1 === -1)) {
      // Inline function 'kotlin.collections.IteratorImpl.remove.<anonymous>' call
      var message = 'Call next() or previous() before removing element from the iterator.';
      throw IllegalStateException_init_$Create$_0(toString_1(message));
    }
    this.s3_1.a2(this.r3_1);
    this.q3_1 = this.r3_1;
    this.r3_1 = -1;
  };
  function AbstractMutableList() {
    AbstractMutableCollection.call(this);
    this.u3_1 = 0;
  }
  protoOf(AbstractMutableList).e = function (element) {
    this.p3();
    this.v3(this.m(), element);
    return true;
  };
  protoOf(AbstractMutableList).j = function () {
    return new IteratorImpl(this);
  };
  protoOf(AbstractMutableList).r1 = function (element) {
    return this.w3(element) >= 0;
  };
  protoOf(AbstractMutableList).w3 = function (element) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var index = 0;
      var tmp0_iterator = this.j();
      while (tmp0_iterator.k()) {
        var item = tmp0_iterator.l();
        // Inline function 'kotlin.collections.AbstractMutableList.indexOf.<anonymous>' call
        if (equals(item, element)) {
          tmp$ret$1 = index;
          break $l$block;
        }
        index = index + 1 | 0;
      }
      tmp$ret$1 = -1;
    }
    return tmp$ret$1;
  };
  protoOf(AbstractMutableList).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtList) : false))
      return false;
    return Companion_instance_5.x3(this, other);
  };
  protoOf(AbstractMutableList).hashCode = function () {
    return Companion_instance_5.y3(this);
  };
  function AbstractMutableMap() {
    AbstractMap.call(this);
    this.b4_1 = null;
    this.c4_1 = null;
  }
  protoOf(AbstractMutableMap).d4 = function () {
    return new HashMapKeysDefault(this);
  };
  protoOf(AbstractMutableMap).e4 = function () {
    return new HashMapValuesDefault(this);
  };
  protoOf(AbstractMutableMap).y1 = function () {
    var tmp0_elvis_lhs = this.b4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = this.d4();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.AbstractMutableMap.<get-keys>.<anonymous>' call
      this.b4_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(AbstractMutableMap).z1 = function () {
    var tmp0_elvis_lhs = this.c4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = this.e4();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.AbstractMutableMap.<get-values>.<anonymous>' call
      this.c4_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(AbstractMutableMap).c2 = function (key) {
    this.p3();
    var iter = this.r().j();
    while (iter.k()) {
      var entry = iter.l();
      var k = entry.t1();
      if (equals(key, k)) {
        var value = entry.u1();
        iter.t3();
        return value;
      }
    }
    return null;
  };
  protoOf(AbstractMutableMap).p3 = function () {
  };
  function AbstractMutableSet() {
    AbstractMutableCollection.call(this);
  }
  protoOf(AbstractMutableSet).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtSet) : false))
      return false;
    return Companion_instance_7.i4(this, other);
  };
  protoOf(AbstractMutableSet).hashCode = function () {
    return Companion_instance_7.j4(this);
  };
  function arrayOfUninitializedElements(capacity) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(capacity >= 0)) {
      // Inline function 'kotlin.collections.arrayOfUninitializedElements.<anonymous>' call
      var message = 'capacity must be non-negative.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.arrayOfNulls' call
    // Inline function 'kotlin.js.asDynamic' call
    return fillArrayVal(Array(capacity), null);
  }
  function resetRange(_this__u8e3s4, fromIndex, toIndex) {
    // Inline function 'kotlin.js.nativeFill' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fill(null, fromIndex, toIndex);
  }
  function copyOfUninitializedElements(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return copyOf_7(_this__u8e3s4, newSize);
  }
  function resetAt(_this__u8e3s4, index) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4[index] = null;
  }
  function Companion_2() {
    Companion_instance_2 = this;
    var tmp = this;
    // Inline function 'kotlin.also' call
    var this_0 = ArrayList_init_$Create$_0(0);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.Companion.Empty.<anonymous>' call
    this_0.h_1 = true;
    tmp.k4_1 = this_0;
  }
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function ArrayList_init_$Init$($this) {
    // Inline function 'kotlin.emptyArray' call
    var tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$() {
    return ArrayList_init_$Init$(objectCreate(protoOf(ArrayList)));
  }
  function ArrayList_init_$Init$_0(initialCapacity, $this) {
    // Inline function 'kotlin.emptyArray' call
    var tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(initialCapacity >= 0)) {
      // Inline function 'kotlin.collections.ArrayList.<init>.<anonymous>' call
      var message = 'Negative initial capacity: ' + initialCapacity;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return $this;
  }
  function ArrayList_init_$Create$_0(initialCapacity) {
    return ArrayList_init_$Init$_0(initialCapacity, objectCreate(protoOf(ArrayList)));
  }
  function ArrayList_init_$Init$_1(elements, $this) {
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$0 = copyToArray(elements);
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_1(elements) {
    return ArrayList_init_$Init$_1(elements, objectCreate(protoOf(ArrayList)));
  }
  function increaseLength($this, amount) {
    var previous = $this.m();
    // Inline function 'kotlin.js.asDynamic' call
    $this.g_1.length = $this.m() + amount | 0;
    return previous;
  }
  function rangeCheck($this, index) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.rangeCheck.<anonymous>' call
    Companion_instance_5.l4(index, $this.m());
    return index;
  }
  function insertionRangeCheck($this, index) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.insertionRangeCheck.<anonymous>' call
    Companion_instance_5.m4(index, $this.m());
    return index;
  }
  function ArrayList(array) {
    Companion_getInstance_2();
    AbstractMutableList.call(this);
    this.g_1 = array;
    this.h_1 = false;
  }
  protoOf(ArrayList).n4 = function (minCapacity) {
  };
  protoOf(ArrayList).m = function () {
    return this.g_1.length;
  };
  protoOf(ArrayList).o = function (index) {
    var tmp = this.g_1[rangeCheck(this, index)];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayList).e = function (element) {
    this.p3();
    // Inline function 'kotlin.js.asDynamic' call
    this.g_1.push(element);
    this.u3_1 = this.u3_1 + 1 | 0;
    return true;
  };
  protoOf(ArrayList).v3 = function (index, element) {
    this.p3();
    // Inline function 'kotlin.js.asDynamic' call
    this.g_1.splice(insertionRangeCheck(this, index), 0, element);
    this.u3_1 = this.u3_1 + 1 | 0;
  };
  protoOf(ArrayList).d1 = function (elements) {
    this.p3();
    if (elements.n())
      return false;
    var offset = increaseLength(this, elements.m());
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = elements.j();
    while (tmp0_iterator.k()) {
      var item = tmp0_iterator.l();
      // Inline function 'kotlin.collections.ArrayList.addAll.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var index_0 = checkIndexOverflow(tmp1);
      this.g_1[offset + index_0 | 0] = item;
    }
    this.u3_1 = this.u3_1 + 1 | 0;
    return true;
  };
  protoOf(ArrayList).a2 = function (index) {
    this.p3();
    rangeCheck(this, index);
    this.u3_1 = this.u3_1 + 1 | 0;
    var tmp;
    if (index === get_lastIndex_2(this)) {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = this.g_1.pop();
    } else {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = this.g_1.splice(index, 1)[0];
    }
    return tmp;
  };
  protoOf(ArrayList).w3 = function (element) {
    return indexOf(this.g_1, element);
  };
  protoOf(ArrayList).toString = function () {
    return arrayToString(this.g_1);
  };
  protoOf(ArrayList).o4 = function () {
    return [].slice.call(this.g_1);
  };
  protoOf(ArrayList).toArray = function () {
    return this.o4();
  };
  protoOf(ArrayList).p3 = function () {
    if (this.h_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  function HashMap_init_$Init$(internalMap, $this) {
    AbstractMutableMap.call($this);
    HashMap.call($this);
    $this.t4_1 = internalMap;
    return $this;
  }
  function HashMap_init_$Init$_0($this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$(), $this);
    return $this;
  }
  function HashMap_init_$Create$() {
    return HashMap_init_$Init$_0(objectCreate(protoOf(HashMap)));
  }
  function HashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$_2(initialCapacity, loadFactor), $this);
    return $this;
  }
  function HashMap_init_$Init$_2(initialCapacity, $this) {
    HashMap_init_$Init$_1(initialCapacity, 1.0, $this);
    return $this;
  }
  function HashMap_init_$Create$_0(initialCapacity) {
    return HashMap_init_$Init$_2(initialCapacity, objectCreate(protoOf(HashMap)));
  }
  function HashMap_init_$Init$_3(original, $this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$_1(original), $this);
    return $this;
  }
  function HashMap_init_$Create$_1(original) {
    return HashMap_init_$Init$_3(original, objectCreate(protoOf(HashMap)));
  }
  protoOf(HashMap).v1 = function (key) {
    return this.t4_1.v4(key);
  };
  protoOf(HashMap).w1 = function (value) {
    return this.t4_1.w1(value);
  };
  protoOf(HashMap).d4 = function () {
    return new HashMapKeys(this.t4_1);
  };
  protoOf(HashMap).e4 = function () {
    return new HashMapValues(this.t4_1);
  };
  protoOf(HashMap).r = function () {
    var tmp0_elvis_lhs = this.u4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new HashMapEntrySet(this.t4_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.HashMap.<get-entries>.<anonymous>' call
      this.u4_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(HashMap).x1 = function (key) {
    return this.t4_1.x1(key);
  };
  protoOf(HashMap).b2 = function (key, value) {
    return this.t4_1.b2(key, value);
  };
  protoOf(HashMap).c2 = function (key) {
    return this.t4_1.c2(key);
  };
  protoOf(HashMap).m = function () {
    return this.t4_1.m();
  };
  function HashMap() {
    this.u4_1 = null;
  }
  function HashMapKeys(backing) {
    AbstractMutableSet.call(this);
    this.w4_1 = backing;
  }
  protoOf(HashMapKeys).m = function () {
    return this.w4_1.m();
  };
  protoOf(HashMapKeys).n = function () {
    return this.w4_1.m() === 0;
  };
  protoOf(HashMapKeys).r1 = function (element) {
    return this.w4_1.v4(element);
  };
  protoOf(HashMapKeys).e = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapKeys).d1 = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapKeys).j = function () {
    return this.w4_1.x4();
  };
  protoOf(HashMapKeys).p3 = function () {
    return this.w4_1.y4();
  };
  function HashMapValues(backing) {
    AbstractMutableCollection.call(this);
    this.z4_1 = backing;
  }
  protoOf(HashMapValues).m = function () {
    return this.z4_1.m();
  };
  protoOf(HashMapValues).n = function () {
    return this.z4_1.m() === 0;
  };
  protoOf(HashMapValues).a5 = function (element) {
    return this.z4_1.w1(element);
  };
  protoOf(HashMapValues).r1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.a5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValues).b5 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapValues).e = function (element) {
    return this.b5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValues).c5 = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapValues).d1 = function (elements) {
    return this.c5(elements);
  };
  protoOf(HashMapValues).j = function () {
    return this.z4_1.d5();
  };
  protoOf(HashMapValues).p3 = function () {
    return this.z4_1.y4();
  };
  function HashMapEntrySet(backing) {
    HashMapEntrySetBase.call(this, backing);
  }
  protoOf(HashMapEntrySet).j = function () {
    return this.f5_1.g5();
  };
  function HashMapEntrySetBase(backing) {
    AbstractMutableSet.call(this);
    this.f5_1 = backing;
  }
  protoOf(HashMapEntrySetBase).m = function () {
    return this.f5_1.m();
  };
  protoOf(HashMapEntrySetBase).n = function () {
    return this.f5_1.m() === 0;
  };
  protoOf(HashMapEntrySetBase).h5 = function (element) {
    return this.f5_1.j5(element);
  };
  protoOf(HashMapEntrySetBase).r1 = function (element) {
    if (!(!(element == null) ? isInterface(element, Entry) : false))
      return false;
    return this.h5((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).i5 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapEntrySetBase).e = function (element) {
    return this.i5((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).d1 = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapEntrySetBase).s1 = function (elements) {
    return this.f5_1.k5(elements);
  };
  protoOf(HashMapEntrySetBase).p3 = function () {
    return this.f5_1.y4();
  };
  function HashMapKeysDefault$iterator$1($entryIterator) {
    this.l5_1 = $entryIterator;
  }
  protoOf(HashMapKeysDefault$iterator$1).k = function () {
    return this.l5_1.k();
  };
  protoOf(HashMapKeysDefault$iterator$1).l = function () {
    return this.l5_1.l().t1();
  };
  protoOf(HashMapKeysDefault$iterator$1).t3 = function () {
    return this.l5_1.t3();
  };
  function HashMapKeysDefault(backingMap) {
    AbstractMutableSet.call(this);
    this.m5_1 = backingMap;
  }
  protoOf(HashMapKeysDefault).n5 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on keys');
  };
  protoOf(HashMapKeysDefault).e = function (element) {
    return this.n5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapKeysDefault).v4 = function (element) {
    return this.m5_1.v1(element);
  };
  protoOf(HashMapKeysDefault).r1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.v4((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapKeysDefault).j = function () {
    var entryIterator = this.m5_1.r().j();
    return new HashMapKeysDefault$iterator$1(entryIterator);
  };
  protoOf(HashMapKeysDefault).m = function () {
    return this.m5_1.m();
  };
  protoOf(HashMapKeysDefault).p3 = function () {
    return this.m5_1.p3();
  };
  function HashMapValuesDefault$iterator$1($entryIterator) {
    this.o5_1 = $entryIterator;
  }
  protoOf(HashMapValuesDefault$iterator$1).k = function () {
    return this.o5_1.k();
  };
  protoOf(HashMapValuesDefault$iterator$1).l = function () {
    return this.o5_1.l().u1();
  };
  protoOf(HashMapValuesDefault$iterator$1).t3 = function () {
    return this.o5_1.t3();
  };
  function HashMapValuesDefault(backingMap) {
    AbstractMutableCollection.call(this);
    this.p5_1 = backingMap;
  }
  protoOf(HashMapValuesDefault).b5 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on values');
  };
  protoOf(HashMapValuesDefault).e = function (element) {
    return this.b5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValuesDefault).a5 = function (element) {
    return this.p5_1.w1(element);
  };
  protoOf(HashMapValuesDefault).r1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.a5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValuesDefault).j = function () {
    var entryIterator = this.p5_1.r().j();
    return new HashMapValuesDefault$iterator$1(entryIterator);
  };
  protoOf(HashMapValuesDefault).m = function () {
    return this.p5_1.m();
  };
  protoOf(HashMapValuesDefault).p3 = function () {
    return this.p5_1.p3();
  };
  function HashSet_init_$Init$(map, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.q5_1 = map;
    return $this;
  }
  function HashSet_init_$Init$_0($this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$(), $this);
    return $this;
  }
  function HashSet_init_$Create$() {
    return HashSet_init_$Init$_0(objectCreate(protoOf(HashSet)));
  }
  function HashSet_init_$Init$_1(elements, $this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$_0(elements.m()), $this);
    var tmp0_iterator = elements.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      $this.q5_1.b2(element, true);
    }
    return $this;
  }
  function HashSet_init_$Create$_0(elements) {
    return HashSet_init_$Init$_1(elements, objectCreate(protoOf(HashSet)));
  }
  function HashSet_init_$Init$_2(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$_2(initialCapacity, loadFactor), $this);
    return $this;
  }
  function HashSet_init_$Init$_3(initialCapacity, $this) {
    HashSet_init_$Init$_2(initialCapacity, 1.0, $this);
    return $this;
  }
  function HashSet_init_$Create$_1(initialCapacity) {
    return HashSet_init_$Init$_3(initialCapacity, objectCreate(protoOf(HashSet)));
  }
  protoOf(HashSet).e = function (element) {
    return this.q5_1.b2(element, true) == null;
  };
  protoOf(HashSet).r1 = function (element) {
    return this.q5_1.v4(element);
  };
  protoOf(HashSet).n = function () {
    return this.q5_1.m() === 0;
  };
  protoOf(HashSet).j = function () {
    return this.q5_1.x4();
  };
  protoOf(HashSet).m = function () {
    return this.q5_1.m();
  };
  function HashSet() {
  }
  function computeHashSize($this, capacity) {
    return takeHighestOneBit(imul(coerceAtLeast(capacity, 1), 3));
  }
  function computeShift($this, hashSize) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    return clz32(hashSize) + 1 | 0;
  }
  function InternalHashMap_init_$Init$($this) {
    InternalHashMap_init_$Init$_0(8, $this);
    return $this;
  }
  function InternalHashMap_init_$Create$() {
    return InternalHashMap_init_$Init$(objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_0(initialCapacity, $this) {
    InternalHashMap.call($this, arrayOfUninitializedElements(initialCapacity), null, new Int32Array(initialCapacity), new Int32Array(computeHashSize(Companion_instance_3, initialCapacity)), 2, 0);
    return $this;
  }
  function InternalHashMap_init_$Create$_0(initialCapacity) {
    return InternalHashMap_init_$Init$_0(initialCapacity, objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_1(original, $this) {
    InternalHashMap_init_$Init$_0(original.m(), $this);
    $this.b6(original);
    return $this;
  }
  function InternalHashMap_init_$Create$_1(original) {
    return InternalHashMap_init_$Init$_1(original, objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_2(initialCapacity, loadFactor, $this) {
    InternalHashMap_init_$Init$_0(initialCapacity, $this);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(loadFactor > 0)) {
      // Inline function 'kotlin.collections.InternalHashMap.<init>.<anonymous>' call
      var message = 'Non-positive load factor: ' + loadFactor;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return $this;
  }
  function InternalHashMap_init_$Create$_2(initialCapacity, loadFactor) {
    return InternalHashMap_init_$Init$_2(initialCapacity, loadFactor, objectCreate(protoOf(InternalHashMap)));
  }
  function _get_capacity__a9k9f3($this) {
    return $this.r5_1.length;
  }
  function _get_hashSize__tftcho($this) {
    return $this.u5_1.length;
  }
  function registerModification($this) {
    $this.y5_1 = $this.y5_1 + 1 | 0;
  }
  function ensureExtraCapacity($this, n) {
    if (shouldCompact($this, n)) {
      compact($this, true);
    } else {
      ensureCapacity($this, $this.w5_1 + n | 0);
    }
  }
  function shouldCompact($this, extraCapacity) {
    var spareCapacity = _get_capacity__a9k9f3($this) - $this.w5_1 | 0;
    var gaps = $this.w5_1 - $this.m() | 0;
    return spareCapacity < extraCapacity && (gaps + spareCapacity | 0) >= extraCapacity && gaps >= (_get_capacity__a9k9f3($this) / 4 | 0);
  }
  function ensureCapacity($this, minCapacity) {
    if (minCapacity < 0)
      throw RuntimeException_init_$Create$_0('too many elements');
    if (minCapacity > _get_capacity__a9k9f3($this)) {
      var newSize = Companion_instance_5.c6(_get_capacity__a9k9f3($this), minCapacity);
      $this.r5_1 = copyOfUninitializedElements($this.r5_1, newSize);
      var tmp = $this;
      var tmp0_safe_receiver = $this.s5_1;
      tmp.s5_1 = tmp0_safe_receiver == null ? null : copyOfUninitializedElements(tmp0_safe_receiver, newSize);
      $this.t5_1 = copyOf_3($this.t5_1, newSize);
      var newHashSize = computeHashSize(Companion_instance_3, newSize);
      if (newHashSize > _get_hashSize__tftcho($this)) {
        rehash($this, newHashSize);
      }
    }
  }
  function allocateValuesArray($this) {
    var curValuesArray = $this.s5_1;
    if (!(curValuesArray == null))
      return curValuesArray;
    var newValuesArray = arrayOfUninitializedElements(_get_capacity__a9k9f3($this));
    $this.s5_1 = newValuesArray;
    return newValuesArray;
  }
  function hash($this, key) {
    return key == null ? 0 : imul(hashCode(key), -1640531527) >>> $this.x5_1 | 0;
  }
  function compact($this, updateHashArray) {
    var i = 0;
    var j = 0;
    var valuesArray = $this.s5_1;
    while (i < $this.w5_1) {
      var hash = $this.t5_1[i];
      if (hash >= 0) {
        $this.r5_1[j] = $this.r5_1[i];
        if (!(valuesArray == null)) {
          valuesArray[j] = valuesArray[i];
        }
        if (updateHashArray) {
          $this.t5_1[j] = hash;
          $this.u5_1[hash] = j + 1 | 0;
        }
        j = j + 1 | 0;
      }
      i = i + 1 | 0;
    }
    resetRange($this.r5_1, j, $this.w5_1);
    if (valuesArray == null)
      null;
    else {
      resetRange(valuesArray, j, $this.w5_1);
    }
    $this.w5_1 = j;
  }
  function rehash($this, newHashSize) {
    registerModification($this);
    if ($this.w5_1 > $this.z5_1) {
      compact($this, false);
    }
    $this.u5_1 = new Int32Array(newHashSize);
    $this.x5_1 = computeShift(Companion_instance_3, newHashSize);
    var i = 0;
    while (i < $this.w5_1) {
      var tmp0 = i;
      i = tmp0 + 1 | 0;
      if (!putRehash($this, tmp0)) {
        throw IllegalStateException_init_$Create$_0('This cannot happen with fixed magic multiplier and grow-only hash array. Have object hashCodes changed?');
      }
    }
  }
  function putRehash($this, i) {
    var hash_0 = hash($this, $this.r5_1[i]);
    var probesLeft = $this.v5_1;
    while (true) {
      var index = $this.u5_1[hash_0];
      if (index === 0) {
        $this.u5_1[hash_0] = i + 1 | 0;
        $this.t5_1[i] = hash_0;
        return true;
      }
      probesLeft = probesLeft - 1 | 0;
      if (probesLeft < 0)
        return false;
      var tmp0 = hash_0;
      hash_0 = tmp0 - 1 | 0;
      if (tmp0 === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
    }
  }
  function findKey($this, key) {
    var hash_0 = hash($this, key);
    var probesLeft = $this.v5_1;
    while (true) {
      var index = $this.u5_1[hash_0];
      if (index === 0)
        return -1;
      if (index > 0 && equals($this.r5_1[index - 1 | 0], key))
        return index - 1 | 0;
      probesLeft = probesLeft - 1 | 0;
      if (probesLeft < 0)
        return -1;
      var tmp0 = hash_0;
      hash_0 = tmp0 - 1 | 0;
      if (tmp0 === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
    }
  }
  function findValue($this, value) {
    var i = $this.w5_1;
    $l$loop: while (true) {
      i = i - 1 | 0;
      if (!(i >= 0)) {
        break $l$loop;
      }
      if ($this.t5_1[i] >= 0 && equals(ensureNotNull($this.s5_1)[i], value))
        return i;
    }
    return -1;
  }
  function addKey($this, key) {
    $this.y4();
    retry: while (true) {
      var hash_0 = hash($this, key);
      var tentativeMaxProbeDistance = coerceAtMost(imul($this.v5_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
      var probeDistance = 0;
      while (true) {
        var index = $this.u5_1[hash_0];
        if (index <= 0) {
          if ($this.w5_1 >= _get_capacity__a9k9f3($this)) {
            ensureExtraCapacity($this, 1);
            continue retry;
          }
          var tmp1 = $this.w5_1;
          $this.w5_1 = tmp1 + 1 | 0;
          var putIndex = tmp1;
          $this.r5_1[putIndex] = key;
          $this.t5_1[putIndex] = hash_0;
          $this.u5_1[hash_0] = putIndex + 1 | 0;
          $this.z5_1 = $this.z5_1 + 1 | 0;
          registerModification($this);
          if (probeDistance > $this.v5_1)
            $this.v5_1 = probeDistance;
          return putIndex;
        }
        if (equals($this.r5_1[index - 1 | 0], key)) {
          return -index | 0;
        }
        probeDistance = probeDistance + 1 | 0;
        if (probeDistance > tentativeMaxProbeDistance) {
          rehash($this, imul(_get_hashSize__tftcho($this), 2));
          continue retry;
        }
        var tmp4 = hash_0;
        hash_0 = tmp4 - 1 | 0;
        if (tmp4 === 0)
          hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
      }
    }
  }
  function removeEntryAt($this, index) {
    resetAt($this.r5_1, index);
    var tmp0_safe_receiver = $this.s5_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      resetAt(tmp0_safe_receiver, index);
    }
    removeHashAt($this, $this.t5_1[index]);
    $this.t5_1[index] = -1;
    $this.z5_1 = $this.z5_1 - 1 | 0;
    registerModification($this);
  }
  function removeHashAt($this, removedHash) {
    var hash_0 = removedHash;
    var hole = removedHash;
    var probeDistance = 0;
    var patchAttemptsLeft = coerceAtMost(imul($this.v5_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
    while (true) {
      var tmp0 = hash_0;
      hash_0 = tmp0 - 1 | 0;
      if (tmp0 === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
      probeDistance = probeDistance + 1 | 0;
      if (probeDistance > $this.v5_1) {
        $this.u5_1[hole] = 0;
        return Unit_instance;
      }
      var index = $this.u5_1[hash_0];
      if (index === 0) {
        $this.u5_1[hole] = 0;
        return Unit_instance;
      }
      if (index < 0) {
        $this.u5_1[hole] = -1;
        hole = hash_0;
        probeDistance = 0;
      } else {
        var otherHash = hash($this, $this.r5_1[index - 1 | 0]);
        if (((otherHash - hash_0 | 0) & (_get_hashSize__tftcho($this) - 1 | 0)) >= probeDistance) {
          $this.u5_1[hole] = index;
          $this.t5_1[index - 1 | 0] = hole;
          hole = hash_0;
          probeDistance = 0;
        }
      }
      patchAttemptsLeft = patchAttemptsLeft - 1 | 0;
      if (patchAttemptsLeft < 0) {
        $this.u5_1[hole] = -1;
        return Unit_instance;
      }
    }
  }
  function contentEquals_0($this, other) {
    return $this.z5_1 === other.m() && $this.k5(other.r());
  }
  function putEntry($this, entry) {
    var index = addKey($this, entry.t1());
    var valuesArray = allocateValuesArray($this);
    if (index >= 0) {
      valuesArray[index] = entry.u1();
      return true;
    }
    var oldValue = valuesArray[(-index | 0) - 1 | 0];
    if (!equals(entry.u1(), oldValue)) {
      valuesArray[(-index | 0) - 1 | 0] = entry.u1();
      return true;
    }
    return false;
  }
  function putAllEntries($this, from) {
    if (from.n())
      return false;
    ensureExtraCapacity($this, from.m());
    var it = from.j();
    var updated = false;
    while (it.k()) {
      if (putEntry($this, it.l()))
        updated = true;
    }
    return updated;
  }
  function Companion_3() {
    this.d6_1 = -1640531527;
    this.e6_1 = 8;
    this.f6_1 = 2;
    this.g6_1 = -1;
  }
  var Companion_instance_3;
  function Companion_getInstance_3() {
    return Companion_instance_3;
  }
  function Itr(map) {
    this.h6_1 = map;
    this.i6_1 = 0;
    this.j6_1 = -1;
    this.k6_1 = this.h6_1.y5_1;
    this.l6();
  }
  protoOf(Itr).l6 = function () {
    while (this.i6_1 < this.h6_1.w5_1 && this.h6_1.t5_1[this.i6_1] < 0) {
      this.i6_1 = this.i6_1 + 1 | 0;
    }
  };
  protoOf(Itr).k = function () {
    return this.i6_1 < this.h6_1.w5_1;
  };
  protoOf(Itr).t3 = function () {
    this.m6();
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!(this.j6_1 === -1)) {
      // Inline function 'kotlin.collections.Itr.remove.<anonymous>' call
      var message = 'Call next() before removing element from the iterator.';
      throw IllegalStateException_init_$Create$_0(toString_1(message));
    }
    this.h6_1.y4();
    removeEntryAt(this.h6_1, this.j6_1);
    this.j6_1 = -1;
    this.k6_1 = this.h6_1.y5_1;
  };
  protoOf(Itr).m6 = function () {
    if (!(this.h6_1.y5_1 === this.k6_1))
      throw ConcurrentModificationException_init_$Create$();
  };
  function KeysItr(map) {
    Itr.call(this, map);
  }
  protoOf(KeysItr).l = function () {
    this.m6();
    if (this.i6_1 >= this.h6_1.w5_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.i6_1;
    this.i6_1 = tmp1 + 1 | 0;
    tmp.j6_1 = tmp1;
    var result = this.h6_1.r5_1[this.j6_1];
    this.l6();
    return result;
  };
  function ValuesItr(map) {
    Itr.call(this, map);
  }
  protoOf(ValuesItr).l = function () {
    this.m6();
    if (this.i6_1 >= this.h6_1.w5_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.i6_1;
    this.i6_1 = tmp1 + 1 | 0;
    tmp.j6_1 = tmp1;
    var result = ensureNotNull(this.h6_1.s5_1)[this.j6_1];
    this.l6();
    return result;
  };
  function EntriesItr(map) {
    Itr.call(this, map);
  }
  protoOf(EntriesItr).l = function () {
    this.m6();
    if (this.i6_1 >= this.h6_1.w5_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.i6_1;
    this.i6_1 = tmp1 + 1 | 0;
    tmp.j6_1 = tmp1;
    var result = new EntryRef(this.h6_1, this.j6_1);
    this.l6();
    return result;
  };
  protoOf(EntriesItr).z6 = function () {
    if (this.i6_1 >= this.h6_1.w5_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.i6_1;
    this.i6_1 = tmp1 + 1 | 0;
    tmp.j6_1 = tmp1;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.h6_1.r5_1[this.j6_1];
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp_0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = ensureNotNull(this.h6_1.s5_1)[this.j6_1];
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    var result = tmp_0 ^ (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0);
    this.l6();
    return result;
  };
  protoOf(EntriesItr).a7 = function (sb) {
    if (this.i6_1 >= this.h6_1.w5_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.i6_1;
    this.i6_1 = tmp1 + 1 | 0;
    tmp.j6_1 = tmp1;
    var key = this.h6_1.r5_1[this.j6_1];
    if (equals(key, this.h6_1)) {
      sb.d7('(this Map)');
    } else {
      sb.c7(key);
    }
    sb.e7(_Char___init__impl__6a9atx(61));
    var value = ensureNotNull(this.h6_1.s5_1)[this.j6_1];
    if (equals(value, this.h6_1)) {
      sb.d7('(this Map)');
    } else {
      sb.c7(value);
    }
    this.l6();
  };
  function EntryRef(map, index) {
    this.f7_1 = map;
    this.g7_1 = index;
  }
  protoOf(EntryRef).t1 = function () {
    return this.f7_1.r5_1[this.g7_1];
  };
  protoOf(EntryRef).u1 = function () {
    return ensureNotNull(this.f7_1.s5_1)[this.g7_1];
  };
  protoOf(EntryRef).equals = function (other) {
    var tmp;
    var tmp_0;
    if (!(other == null) ? isInterface(other, Entry) : false) {
      tmp_0 = equals(other.t1(), this.t1());
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals(other.u1(), this.u1());
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EntryRef).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.t1();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = this.u1();
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    return tmp ^ (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0);
  };
  protoOf(EntryRef).toString = function () {
    return toString_0(this.t1()) + '=' + toString_0(this.u1());
  };
  function InternalHashMap(keysArray, valuesArray, presenceArray, hashArray, maxProbeDistance, length) {
    this.r5_1 = keysArray;
    this.s5_1 = valuesArray;
    this.t5_1 = presenceArray;
    this.u5_1 = hashArray;
    this.v5_1 = maxProbeDistance;
    this.w5_1 = length;
    this.x5_1 = computeShift(Companion_instance_3, _get_hashSize__tftcho(this));
    this.y5_1 = 0;
    this.z5_1 = 0;
    this.a6_1 = false;
  }
  protoOf(InternalHashMap).m = function () {
    return this.z5_1;
  };
  protoOf(InternalHashMap).w1 = function (value) {
    return findValue(this, value) >= 0;
  };
  protoOf(InternalHashMap).x1 = function (key) {
    var index = findKey(this, key);
    if (index < 0)
      return null;
    return ensureNotNull(this.s5_1)[index];
  };
  protoOf(InternalHashMap).v4 = function (key) {
    return findKey(this, key) >= 0;
  };
  protoOf(InternalHashMap).b2 = function (key, value) {
    var index = addKey(this, key);
    var valuesArray = allocateValuesArray(this);
    if (index < 0) {
      var oldValue = valuesArray[(-index | 0) - 1 | 0];
      valuesArray[(-index | 0) - 1 | 0] = value;
      return oldValue;
    } else {
      valuesArray[index] = value;
      return null;
    }
  };
  protoOf(InternalHashMap).b6 = function (from) {
    this.y4();
    putAllEntries(this, from.r());
  };
  protoOf(InternalHashMap).c2 = function (key) {
    this.y4();
    var index = findKey(this, key);
    if (index < 0)
      return null;
    var oldValue = ensureNotNull(this.s5_1)[index];
    removeEntryAt(this, index);
    return oldValue;
  };
  protoOf(InternalHashMap).equals = function (other) {
    var tmp;
    if (other === this) {
      tmp = true;
    } else {
      var tmp_0;
      if (!(other == null) ? isInterface(other, KtMap) : false) {
        tmp_0 = contentEquals_0(this, other);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(InternalHashMap).hashCode = function () {
    var result = 0;
    var it = this.g5();
    while (it.k()) {
      result = result + it.z6() | 0;
    }
    return result;
  };
  protoOf(InternalHashMap).toString = function () {
    var sb = StringBuilder_init_$Create$(2 + imul(this.z5_1, 3) | 0);
    sb.d7('{');
    var i = 0;
    var it = this.g5();
    while (it.k()) {
      if (i > 0) {
        sb.d7(', ');
      }
      it.a7(sb);
      i = i + 1 | 0;
    }
    sb.d7('}');
    return sb.toString();
  };
  protoOf(InternalHashMap).y4 = function () {
    if (this.a6_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(InternalHashMap).j5 = function (entry) {
    var index = findKey(this, entry.t1());
    if (index < 0)
      return false;
    return equals(ensureNotNull(this.s5_1)[index], entry.u1());
  };
  protoOf(InternalHashMap).h7 = function (entry) {
    return this.j5(isInterface(entry, Entry) ? entry : THROW_CCE());
  };
  protoOf(InternalHashMap).x4 = function () {
    return new KeysItr(this);
  };
  protoOf(InternalHashMap).d5 = function () {
    return new ValuesItr(this);
  };
  protoOf(InternalHashMap).g5 = function () {
    return new EntriesItr(this);
  };
  function InternalMap() {
  }
  function LinkedHashMap_init_$Init$($this) {
    HashMap_init_$Init$_0($this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$() {
    return LinkedHashMap_init_$Init$(objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_0(initialCapacity, $this) {
    HashMap_init_$Init$_2(initialCapacity, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_0(initialCapacity) {
    return LinkedHashMap_init_$Init$_0(initialCapacity, objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_1(original, $this) {
    HashMap_init_$Init$_3(original, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_1(original) {
    return LinkedHashMap_init_$Init$_1(original, objectCreate(protoOf(LinkedHashMap)));
  }
  protoOf(LinkedHashMap).p3 = function () {
    return this.t4_1.y4();
  };
  function LinkedHashMap() {
  }
  function LinkedHashSet_init_$Init$($this) {
    HashSet_init_$Init$_0($this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$() {
    return LinkedHashSet_init_$Init$(objectCreate(protoOf(LinkedHashSet)));
  }
  function LinkedHashSet_init_$Init$_0(elements, $this) {
    HashSet_init_$Init$_1(elements, $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_0(elements) {
    return LinkedHashSet_init_$Init$_0(elements, objectCreate(protoOf(LinkedHashSet)));
  }
  function LinkedHashSet_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$_2(initialCapacity, loadFactor, $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Init$_2(initialCapacity, $this) {
    LinkedHashSet_init_$Init$_1(initialCapacity, 1.0, $this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_1(initialCapacity) {
    return LinkedHashSet_init_$Init$_2(initialCapacity, objectCreate(protoOf(LinkedHashSet)));
  }
  protoOf(LinkedHashSet).p3 = function () {
    return this.q5_1.y4();
  };
  function LinkedHashSet() {
  }
  function get_output() {
    _init_properties_console_kt__rfg7jv();
    return output;
  }
  var output;
  function BaseOutput() {
  }
  protoOf(BaseOutput).p7 = function () {
    this.q7('\n');
  };
  protoOf(BaseOutput).r7 = function (message) {
    this.q7(message);
    this.p7();
  };
  function NodeJsOutput(outputStream) {
    BaseOutput.call(this);
    this.s7_1 = outputStream;
  }
  protoOf(NodeJsOutput).q7 = function (message) {
    // Inline function 'kotlin.io.String' call
    var messageString = String(message);
    this.s7_1.write(messageString);
  };
  function BufferedOutputToConsoleLog() {
    BufferedOutput.call(this);
  }
  protoOf(BufferedOutputToConsoleLog).q7 = function (message) {
    // Inline function 'kotlin.io.String' call
    var s = String(message);
    // Inline function 'kotlin.text.nativeLastIndexOf' call
    // Inline function 'kotlin.js.asDynamic' call
    var i = s.lastIndexOf('\n', 0);
    if (i >= 0) {
      var tmp = this;
      var tmp_0 = this.u7_1;
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp.u7_1 = tmp_0 + s.substring(0, i);
      this.v7();
      // Inline function 'kotlin.text.substring' call
      var this_0 = s;
      var startIndex = i + 1 | 0;
      // Inline function 'kotlin.js.asDynamic' call
      s = this_0.substring(startIndex);
    }
    this.u7_1 = this.u7_1 + s;
  };
  protoOf(BufferedOutputToConsoleLog).v7 = function () {
    console.log(this.u7_1);
    this.u7_1 = '';
  };
  function BufferedOutput() {
    BaseOutput.call(this);
    this.u7_1 = '';
  }
  protoOf(BufferedOutput).q7 = function (message) {
    var tmp = this;
    var tmp_0 = this.u7_1;
    // Inline function 'kotlin.io.String' call
    tmp.u7_1 = tmp_0 + String(message);
  };
  function println(message) {
    _init_properties_console_kt__rfg7jv();
    get_output().r7(message);
  }
  var properties_initialized_console_kt_gll9dl;
  function _init_properties_console_kt__rfg7jv() {
    if (!properties_initialized_console_kt_gll9dl) {
      properties_initialized_console_kt_gll9dl = true;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.io.output.<anonymous>' call
      var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
      output = isNode ? new NodeJsOutput(process.stdout) : new BufferedOutputToConsoleLog();
    }
  }
  function CoroutineImpl(resultContinuation) {
    InterceptedCoroutine.call(this);
    this.x7_1 = resultContinuation;
    this.y7_1 = 0;
    this.z7_1 = 0;
    this.a8_1 = null;
    this.b8_1 = null;
    this.c8_1 = null;
    var tmp = this;
    var tmp0_safe_receiver = this.x7_1;
    tmp.d8_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.e8();
  }
  protoOf(CoroutineImpl).e8 = function () {
    return ensureNotNull(this.d8_1);
  };
  protoOf(CoroutineImpl).f8 = function (result) {
    var current = this;
    // Inline function 'kotlin.Result.getOrNull' call
    var tmp;
    if (_Result___get_isFailure__impl__jpiriv(result)) {
      tmp = null;
    } else {
      var tmp_0 = _Result___get_value__impl__bjfvqg(result);
      tmp = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
    }
    var currentResult = tmp;
    var currentException = Result__exceptionOrNull_impl_p6xea9(result);
    while (true) {
      // Inline function 'kotlin.with' call
      // Inline function 'kotlin.contracts.contract' call
      var $this$with = current;
      if (currentException == null) {
        $this$with.a8_1 = currentResult;
      } else {
        $this$with.y7_1 = $this$with.z7_1;
        $this$with.b8_1 = currentException;
      }
      try {
        var outcome = $this$with.g8();
        if (outcome === get_COROUTINE_SUSPENDED())
          return Unit_instance;
        currentResult = outcome;
        currentException = null;
      } catch ($p) {
        var exception = $p;
        currentResult = null;
        // Inline function 'kotlin.js.unsafeCast' call
        currentException = exception;
      }
      $this$with.i8();
      var completion = ensureNotNull($this$with.x7_1);
      if (completion instanceof CoroutineImpl) {
        current = completion;
      } else {
        if (!(currentException == null)) {
          // Inline function 'kotlin.coroutines.resumeWithException' call
          // Inline function 'kotlin.Companion.failure' call
          var exception_0 = ensureNotNull(currentException);
          var tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure(exception_0));
          completion.j8(tmp$ret$2);
        } else {
          // Inline function 'kotlin.coroutines.resume' call
          // Inline function 'kotlin.Companion.success' call
          var value = currentResult;
          var tmp$ret$4 = _Result___init__impl__xyqfz8(value);
          completion.j8(tmp$ret$4);
        }
        return Unit_instance;
      }
    }
  };
  protoOf(CoroutineImpl).j8 = function (result) {
    return this.f8(result);
  };
  function CompletedContinuation() {
  }
  protoOf(CompletedContinuation).e8 = function () {
    var message = 'This continuation is already complete';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(CompletedContinuation).f8 = function (result) {
    // Inline function 'kotlin.error' call
    var message = 'This continuation is already complete';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(CompletedContinuation).j8 = function (result) {
    return this.f8(result);
  };
  protoOf(CompletedContinuation).toString = function () {
    return 'This continuation is already complete';
  };
  var CompletedContinuation_instance;
  function CompletedContinuation_getInstance() {
    return CompletedContinuation_instance;
  }
  function InterceptedCoroutine() {
    this.h8_1 = null;
  }
  protoOf(InterceptedCoroutine).k8 = function () {
    var tmp2_elvis_lhs = this.h8_1;
    var tmp;
    if (tmp2_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var tmp0_safe_receiver = this.e8().l8(Key_instance);
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.m8(this);
      var this_0 = tmp1_elvis_lhs == null ? this : tmp1_elvis_lhs;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.coroutines.InterceptedCoroutine.intercepted.<anonymous>' call
      this.h8_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp2_elvis_lhs;
    }
    return tmp;
  };
  protoOf(InterceptedCoroutine).i8 = function () {
    var intercepted = this.h8_1;
    if (!(intercepted == null) && !(intercepted === this)) {
      ensureNotNull(this.e8().l8(Key_instance)).n8(intercepted);
    }
    this.h8_1 = CompletedContinuation_instance;
  };
  function CancellationException_init_$Init$($this) {
    IllegalStateException_init_$Init$($this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException_init_$Create$() {
    var tmp = CancellationException_init_$Init$(objectCreate(protoOf(CancellationException)));
    captureStack(tmp, CancellationException_init_$Create$);
    return tmp;
  }
  function CancellationException_init_$Init$_0(message, $this) {
    IllegalStateException_init_$Init$_0(message, $this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException_init_$Create$_0(message) {
    var tmp = CancellationException_init_$Init$_0(message, objectCreate(protoOf(CancellationException)));
    captureStack(tmp, CancellationException_init_$Create$_0);
    return tmp;
  }
  function CancellationException_init_$Init$_1(message, cause, $this) {
    IllegalStateException_init_$Init$_1(message, cause, $this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException() {
    captureStack(this, CancellationException);
  }
  function intercepted(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4 instanceof InterceptedCoroutine ? _this__u8e3s4 : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.k8();
    return tmp1_elvis_lhs == null ? _this__u8e3s4 : tmp1_elvis_lhs;
  }
  function createCoroutineUnintercepted(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineFromSuspendFunction' call
    return new _no_name_provided__qut3iv_2(completion, _this__u8e3s4, receiver, completion);
  }
  function invokeSuspendSuperTypeWithReceiver(_this__u8e3s4, receiver, completion) {
    throw new NotImplementedError('It is intrinsic method');
  }
  function startCoroutineUninterceptedOrReturnNonGeneratorVersion(_this__u8e3s4, receiver, param, completion) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    return typeof a === 'function' ? a(receiver, param, completion) : _this__u8e3s4.q8(receiver, param, completion);
  }
  function invokeSuspendSuperTypeWithReceiverAndParam(_this__u8e3s4, receiver, param, completion) {
    throw new NotImplementedError('It is intrinsic method');
  }
  function startCoroutineUninterceptedOrReturnNonGeneratorVersion_0(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    return typeof a === 'function' ? a(receiver, completion) : _this__u8e3s4.r8(receiver, completion);
  }
  function _no_name_provided__qut3iv_2($completion, $this_createCoroutineUnintercepted, $receiver, $completion$1) {
    this.a9_1 = $this_createCoroutineUnintercepted;
    this.b9_1 = $receiver;
    this.c9_1 = $completion$1;
    CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
  }
  protoOf(_no_name_provided__qut3iv_2).g8 = function () {
    if (this.b8_1 != null)
      throw this.b8_1;
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineUnintercepted.<anonymous>' call
    // Inline function 'kotlin.js.asDynamic' call
    var a = this.a9_1;
    return typeof a === 'function' ? a(this.b9_1, this.c9_1) : this.a9_1.r8(this.b9_1, this.c9_1);
  };
  function asDynamic(_this__u8e3s4) {
    return _this__u8e3s4;
  }
  function Exception_init_$Init$($this) {
    extendThrowable($this);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$() {
    var tmp = Exception_init_$Init$(objectCreate(protoOf(Exception)));
    captureStack(tmp, Exception_init_$Create$);
    return tmp;
  }
  function Exception_init_$Init$_0(message, $this) {
    extendThrowable($this, message);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$_0(message) {
    var tmp = Exception_init_$Init$_0(message, objectCreate(protoOf(Exception)));
    captureStack(tmp, Exception_init_$Create$_0);
    return tmp;
  }
  function Exception_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Exception.call($this);
    return $this;
  }
  function Exception() {
    captureStack(this, Exception);
  }
  function IllegalArgumentException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$() {
    var tmp = IllegalArgumentException_init_$Init$(objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$);
    return tmp;
  }
  function IllegalArgumentException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$_0(message) {
    var tmp = IllegalArgumentException_init_$Init$_0(message, objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$_0);
    return tmp;
  }
  function IllegalArgumentException_init_$Init$_1(message, cause, $this) {
    RuntimeException_init_$Init$_1(message, cause, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$_1(message, cause) {
    var tmp = IllegalArgumentException_init_$Init$_1(message, cause, objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$_1);
    return tmp;
  }
  function IllegalArgumentException() {
    captureStack(this, IllegalArgumentException);
  }
  function IndexOutOfBoundsException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$() {
    var tmp = IndexOutOfBoundsException_init_$Init$(objectCreate(protoOf(IndexOutOfBoundsException)));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$);
    return tmp;
  }
  function IndexOutOfBoundsException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$_0(message) {
    var tmp = IndexOutOfBoundsException_init_$Init$_0(message, objectCreate(protoOf(IndexOutOfBoundsException)));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$_0);
    return tmp;
  }
  function IndexOutOfBoundsException() {
    captureStack(this, IndexOutOfBoundsException);
  }
  function IllegalStateException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$() {
    var tmp = IllegalStateException_init_$Init$(objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$);
    return tmp;
  }
  function IllegalStateException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_0(message) {
    var tmp = IllegalStateException_init_$Init$_0(message, objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$_0);
    return tmp;
  }
  function IllegalStateException_init_$Init$_1(message, cause, $this) {
    RuntimeException_init_$Init$_1(message, cause, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_1(message, cause) {
    var tmp = IllegalStateException_init_$Init$_1(message, cause, objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$_1);
    return tmp;
  }
  function IllegalStateException() {
    captureStack(this, IllegalStateException);
  }
  function UnsupportedOperationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$() {
    var tmp = UnsupportedOperationException_init_$Init$(objectCreate(protoOf(UnsupportedOperationException)));
    captureStack(tmp, UnsupportedOperationException_init_$Create$);
    return tmp;
  }
  function UnsupportedOperationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$_0(message) {
    var tmp = UnsupportedOperationException_init_$Init$_0(message, objectCreate(protoOf(UnsupportedOperationException)));
    captureStack(tmp, UnsupportedOperationException_init_$Create$_0);
    return tmp;
  }
  function UnsupportedOperationException() {
    captureStack(this, UnsupportedOperationException);
  }
  function RuntimeException_init_$Init$($this) {
    Exception_init_$Init$($this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$() {
    var tmp = RuntimeException_init_$Init$(objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$);
    return tmp;
  }
  function RuntimeException_init_$Init$_0(message, $this) {
    Exception_init_$Init$_0(message, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$_0(message) {
    var tmp = RuntimeException_init_$Init$_0(message, objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$_0);
    return tmp;
  }
  function RuntimeException_init_$Init$_1(message, cause, $this) {
    Exception_init_$Init$_1(message, cause, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$_1(message, cause) {
    var tmp = RuntimeException_init_$Init$_1(message, cause, objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$_1);
    return tmp;
  }
  function RuntimeException() {
    captureStack(this, RuntimeException);
  }
  function NoSuchElementException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$() {
    var tmp = NoSuchElementException_init_$Init$(objectCreate(protoOf(NoSuchElementException)));
    captureStack(tmp, NoSuchElementException_init_$Create$);
    return tmp;
  }
  function NoSuchElementException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$_0(message) {
    var tmp = NoSuchElementException_init_$Init$_0(message, objectCreate(protoOf(NoSuchElementException)));
    captureStack(tmp, NoSuchElementException_init_$Create$_0);
    return tmp;
  }
  function NoSuchElementException() {
    captureStack(this, NoSuchElementException);
  }
  function Error_init_$Init$($this) {
    extendThrowable($this);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Create$() {
    var tmp = Error_init_$Init$(objectCreate(protoOf(Error_0)));
    captureStack(tmp, Error_init_$Create$);
    return tmp;
  }
  function Error_init_$Init$_0(message, $this) {
    extendThrowable($this, message);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Error_0.call($this);
    return $this;
  }
  function Error_0() {
    captureStack(this, Error_0);
  }
  function AssertionError_init_$Init$($this) {
    Error_init_$Init$($this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$() {
    var tmp = AssertionError_init_$Init$(objectCreate(protoOf(AssertionError)));
    captureStack(tmp, AssertionError_init_$Create$);
    return tmp;
  }
  function AssertionError_init_$Init$_0(message, $this) {
    Error_init_$Init$_0(message, $this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$_0(message) {
    var tmp = AssertionError_init_$Init$_0(message, objectCreate(protoOf(AssertionError)));
    captureStack(tmp, AssertionError_init_$Create$_0);
    return tmp;
  }
  function AssertionError() {
    captureStack(this, AssertionError);
  }
  function ConcurrentModificationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ConcurrentModificationException.call($this);
    return $this;
  }
  function ConcurrentModificationException_init_$Create$() {
    var tmp = ConcurrentModificationException_init_$Init$(objectCreate(protoOf(ConcurrentModificationException)));
    captureStack(tmp, ConcurrentModificationException_init_$Create$);
    return tmp;
  }
  function ConcurrentModificationException() {
    captureStack(this, ConcurrentModificationException);
  }
  function ArithmeticException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$() {
    var tmp = ArithmeticException_init_$Init$(objectCreate(protoOf(ArithmeticException)));
    captureStack(tmp, ArithmeticException_init_$Create$);
    return tmp;
  }
  function ArithmeticException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$_0(message) {
    var tmp = ArithmeticException_init_$Init$_0(message, objectCreate(protoOf(ArithmeticException)));
    captureStack(tmp, ArithmeticException_init_$Create$_0);
    return tmp;
  }
  function ArithmeticException() {
    captureStack(this, ArithmeticException);
  }
  function NumberFormatException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$() {
    var tmp = NumberFormatException_init_$Init$(objectCreate(protoOf(NumberFormatException)));
    captureStack(tmp, NumberFormatException_init_$Create$);
    return tmp;
  }
  function NumberFormatException_init_$Init$_0(message, $this) {
    IllegalArgumentException_init_$Init$_0(message, $this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$_0(message) {
    var tmp = NumberFormatException_init_$Init$_0(message, objectCreate(protoOf(NumberFormatException)));
    captureStack(tmp, NumberFormatException_init_$Create$_0);
    return tmp;
  }
  function NumberFormatException() {
    captureStack(this, NumberFormatException);
  }
  function NullPointerException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NullPointerException.call($this);
    return $this;
  }
  function NullPointerException_init_$Create$() {
    var tmp = NullPointerException_init_$Init$(objectCreate(protoOf(NullPointerException)));
    captureStack(tmp, NullPointerException_init_$Create$);
    return tmp;
  }
  function NullPointerException() {
    captureStack(this, NullPointerException);
  }
  function NoWhenBranchMatchedException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoWhenBranchMatchedException.call($this);
    return $this;
  }
  function NoWhenBranchMatchedException_init_$Create$() {
    var tmp = NoWhenBranchMatchedException_init_$Init$(objectCreate(protoOf(NoWhenBranchMatchedException)));
    captureStack(tmp, NoWhenBranchMatchedException_init_$Create$);
    return tmp;
  }
  function NoWhenBranchMatchedException() {
    captureStack(this, NoWhenBranchMatchedException);
  }
  function ClassCastException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ClassCastException.call($this);
    return $this;
  }
  function ClassCastException_init_$Create$() {
    var tmp = ClassCastException_init_$Init$(objectCreate(protoOf(ClassCastException)));
    captureStack(tmp, ClassCastException_init_$Create$);
    return tmp;
  }
  function ClassCastException() {
    captureStack(this, ClassCastException);
  }
  function UninitializedPropertyAccessException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UninitializedPropertyAccessException.call($this);
    return $this;
  }
  function UninitializedPropertyAccessException_init_$Create$() {
    var tmp = UninitializedPropertyAccessException_init_$Init$(objectCreate(protoOf(UninitializedPropertyAccessException)));
    captureStack(tmp, UninitializedPropertyAccessException_init_$Create$);
    return tmp;
  }
  function UninitializedPropertyAccessException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UninitializedPropertyAccessException.call($this);
    return $this;
  }
  function UninitializedPropertyAccessException_init_$Create$_0(message) {
    var tmp = UninitializedPropertyAccessException_init_$Init$_0(message, objectCreate(protoOf(UninitializedPropertyAccessException)));
    captureStack(tmp, UninitializedPropertyAccessException_init_$Create$_0);
    return tmp;
  }
  function UninitializedPropertyAccessException() {
    captureStack(this, UninitializedPropertyAccessException);
  }
  function lazy(mode, initializer) {
    return new UnsafeLazyImpl(initializer);
  }
  function lazy_0(initializer) {
    return new UnsafeLazyImpl(initializer);
  }
  function fillFrom(src, dst) {
    var srcLen = src.length;
    var dstLen = dst.length;
    var index = 0;
    // Inline function 'kotlin.js.unsafeCast' call
    var arr = dst;
    while (index < srcLen && index < dstLen) {
      var tmp = index;
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      arr[tmp] = src[tmp0];
    }
    return dst;
  }
  function arrayCopyResize(source, newSize, defaultValue) {
    // Inline function 'kotlin.js.unsafeCast' call
    var result = source.slice(0, newSize);
    // Inline function 'kotlin.copyArrayType' call
    if (source.$type$ !== undefined) {
      result.$type$ = source.$type$;
    }
    var index = source.length;
    if (newSize > index) {
      // Inline function 'kotlin.js.asDynamic' call
      result.length = newSize;
      while (index < newSize) {
        var tmp0 = index;
        index = tmp0 + 1 | 0;
        result[tmp0] = defaultValue;
      }
    }
    return result;
  }
  function roundToLong(_this__u8e3s4) {
    var tmp;
    if (isNaN_0(_this__u8e3s4)) {
      throw IllegalArgumentException_init_$Create$_0('Cannot round NaN value.');
    } else if (_this__u8e3s4 > (new Long(-1, 2147483647)).z2()) {
      tmp = new Long(-1, 2147483647);
    } else if (_this__u8e3s4 < (new Long(0, -2147483648)).z2()) {
      tmp = new Long(0, -2147483648);
    } else {
      tmp = numberToLong(Math.round(_this__u8e3s4));
    }
    return tmp;
  }
  var INV_2_26;
  var INV_2_53;
  function defaultPlatformRandom() {
    _init_properties_PlatformRandom_kt__6kjv62();
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0 = Math.random() * Math.pow(2, 32) | 0;
    return Random_0(tmp$ret$0);
  }
  var properties_initialized_PlatformRandom_kt_uibhw8;
  function _init_properties_PlatformRandom_kt__6kjv62() {
    if (!properties_initialized_PlatformRandom_kt_uibhw8) {
      properties_initialized_PlatformRandom_kt_uibhw8 = true;
      // Inline function 'kotlin.math.pow' call
      INV_2_26 = Math.pow(2.0, -26);
      // Inline function 'kotlin.math.pow' call
      INV_2_53 = Math.pow(2.0, -53);
    }
  }
  function get_js(_this__u8e3s4) {
    return (_this__u8e3s4 instanceof KClassImpl ? _this__u8e3s4 : THROW_CCE()).e9();
  }
  function KClass() {
  }
  function KClassImpl(jClass) {
    this.d9_1 = jClass;
  }
  protoOf(KClassImpl).e9 = function () {
    return this.d9_1;
  };
  protoOf(KClassImpl).equals = function (other) {
    var tmp;
    if (other instanceof NothingKClassImpl) {
      tmp = false;
    } else {
      if (other instanceof ErrorKClass) {
        tmp = false;
      } else {
        if (other instanceof KClassImpl) {
          tmp = equals(this.e9(), other.e9());
        } else {
          tmp = false;
        }
      }
    }
    return tmp;
  };
  protoOf(KClassImpl).hashCode = function () {
    var tmp0_safe_receiver = this.f9();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  protoOf(KClassImpl).toString = function () {
    return 'class ' + this.f9();
  };
  function NothingKClassImpl() {
    NothingKClassImpl_instance = this;
    KClassImpl.call(this, Object);
    this.i9_1 = 'Nothing';
  }
  protoOf(NothingKClassImpl).f9 = function () {
    return this.i9_1;
  };
  protoOf(NothingKClassImpl).g9 = function (value) {
    return false;
  };
  protoOf(NothingKClassImpl).e9 = function () {
    throw UnsupportedOperationException_init_$Create$_0("There's no native JS class for Nothing type");
  };
  protoOf(NothingKClassImpl).equals = function (other) {
    return other === this;
  };
  protoOf(NothingKClassImpl).hashCode = function () {
    return 0;
  };
  var NothingKClassImpl_instance;
  function NothingKClassImpl_getInstance() {
    if (NothingKClassImpl_instance == null)
      new NothingKClassImpl();
    return NothingKClassImpl_instance;
  }
  function ErrorKClass() {
  }
  protoOf(ErrorKClass).f9 = function () {
    var message = 'Unknown simpleName for ErrorKClass';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(ErrorKClass).g9 = function (value) {
    var message = "Can's check isInstance on ErrorKClass";
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(ErrorKClass).equals = function (other) {
    return other === this;
  };
  protoOf(ErrorKClass).hashCode = function () {
    return 0;
  };
  function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
    KClassImpl.call(this, jClass);
    this.k9_1 = givenSimpleName;
    this.l9_1 = isInstanceFunction;
  }
  protoOf(PrimitiveKClassImpl).equals = function (other) {
    if (!(other instanceof PrimitiveKClassImpl))
      return false;
    return protoOf(KClassImpl).equals.call(this, other) && this.k9_1 === other.k9_1;
  };
  protoOf(PrimitiveKClassImpl).f9 = function () {
    return this.k9_1;
  };
  protoOf(PrimitiveKClassImpl).g9 = function (value) {
    return this.l9_1(value);
  };
  function SimpleKClassImpl(jClass) {
    KClassImpl.call(this, jClass);
    var tmp = this;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = jClass.$metadata$;
    tmp.n9_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.simpleName;
  }
  protoOf(SimpleKClassImpl).f9 = function () {
    return this.n9_1;
  };
  protoOf(SimpleKClassImpl).g9 = function (value) {
    return jsIsType(value, this.e9());
  };
  function KProperty1() {
  }
  function createKType(classifier, arguments_0, isMarkedNullable) {
    return new KTypeImpl(classifier, asList(arguments_0), isMarkedNullable);
  }
  function KTypeImpl(classifier, arguments_0, isMarkedNullable) {
    this.o9_1 = classifier;
    this.p9_1 = arguments_0;
    this.q9_1 = isMarkedNullable;
  }
  protoOf(KTypeImpl).r9 = function () {
    return this.o9_1;
  };
  protoOf(KTypeImpl).s9 = function () {
    return this.p9_1;
  };
  protoOf(KTypeImpl).t9 = function () {
    return this.q9_1;
  };
  protoOf(KTypeImpl).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    if (other instanceof KTypeImpl) {
      tmp_1 = equals(this.o9_1, other.o9_1);
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = equals(this.p9_1, other.p9_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.q9_1 === other.q9_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(KTypeImpl).hashCode = function () {
    return imul(imul(hashCode(this.o9_1), 31) + hashCode(this.p9_1) | 0, 31) + getBooleanHashCode(this.q9_1) | 0;
  };
  protoOf(KTypeImpl).toString = function () {
    var tmp = this.o9_1;
    var kClass = isInterface(tmp, KClass) ? tmp : null;
    var classifierName = kClass == null ? toString_1(this.o9_1) : !(kClass.f9() == null) ? kClass.f9() : '(non-denotable type)';
    var args = this.p9_1.n() ? '' : joinToString_1(this.p9_1, ', ', '<', '>');
    var nullable = this.q9_1 ? '?' : '';
    return plus_1(classifierName, args) + nullable;
  };
  function get_functionClasses() {
    _init_properties_primitives_kt__3fums4();
    return functionClasses;
  }
  var functionClasses;
  function PrimitiveClasses$anyClass$lambda(it) {
    return !(it == null);
  }
  function PrimitiveClasses$numberClass$lambda(it) {
    return isNumber(it);
  }
  function PrimitiveClasses$booleanClass$lambda(it) {
    return !(it == null) ? typeof it === 'boolean' : false;
  }
  function PrimitiveClasses$byteClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$shortClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$intClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$floatClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$doubleClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$arrayClass$lambda(it) {
    return !(it == null) ? isArray(it) : false;
  }
  function PrimitiveClasses$stringClass$lambda(it) {
    return !(it == null) ? typeof it === 'string' : false;
  }
  function PrimitiveClasses$throwableClass$lambda(it) {
    return it instanceof Error;
  }
  function PrimitiveClasses$booleanArrayClass$lambda(it) {
    return !(it == null) ? isBooleanArray(it) : false;
  }
  function PrimitiveClasses$charArrayClass$lambda(it) {
    return !(it == null) ? isCharArray(it) : false;
  }
  function PrimitiveClasses$byteArrayClass$lambda(it) {
    return !(it == null) ? isByteArray(it) : false;
  }
  function PrimitiveClasses$shortArrayClass$lambda(it) {
    return !(it == null) ? isShortArray(it) : false;
  }
  function PrimitiveClasses$intArrayClass$lambda(it) {
    return !(it == null) ? isIntArray(it) : false;
  }
  function PrimitiveClasses$longArrayClass$lambda(it) {
    return !(it == null) ? isLongArray(it) : false;
  }
  function PrimitiveClasses$floatArrayClass$lambda(it) {
    return !(it == null) ? isFloatArray(it) : false;
  }
  function PrimitiveClasses$doubleArrayClass$lambda(it) {
    return !(it == null) ? isDoubleArray(it) : false;
  }
  function PrimitiveClasses$functionClass$lambda($arity) {
    return function (it) {
      var tmp;
      if (typeof it === 'function') {
        // Inline function 'kotlin.js.asDynamic' call
        tmp = it.length === $arity;
      } else {
        tmp = false;
      }
      return tmp;
    };
  }
  function PrimitiveClasses() {
    PrimitiveClasses_instance = this;
    var tmp = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_0 = Object;
    tmp.anyClass = new PrimitiveKClassImpl(tmp_0, 'Any', PrimitiveClasses$anyClass$lambda);
    var tmp_1 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_2 = Number;
    tmp_1.numberClass = new PrimitiveKClassImpl(tmp_2, 'Number', PrimitiveClasses$numberClass$lambda);
    this.nothingClass = NothingKClassImpl_getInstance();
    var tmp_3 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_4 = Boolean;
    tmp_3.booleanClass = new PrimitiveKClassImpl(tmp_4, 'Boolean', PrimitiveClasses$booleanClass$lambda);
    var tmp_5 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_6 = Number;
    tmp_5.byteClass = new PrimitiveKClassImpl(tmp_6, 'Byte', PrimitiveClasses$byteClass$lambda);
    var tmp_7 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_8 = Number;
    tmp_7.shortClass = new PrimitiveKClassImpl(tmp_8, 'Short', PrimitiveClasses$shortClass$lambda);
    var tmp_9 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_10 = Number;
    tmp_9.intClass = new PrimitiveKClassImpl(tmp_10, 'Int', PrimitiveClasses$intClass$lambda);
    var tmp_11 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_12 = Number;
    tmp_11.floatClass = new PrimitiveKClassImpl(tmp_12, 'Float', PrimitiveClasses$floatClass$lambda);
    var tmp_13 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_14 = Number;
    tmp_13.doubleClass = new PrimitiveKClassImpl(tmp_14, 'Double', PrimitiveClasses$doubleClass$lambda);
    var tmp_15 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_16 = Array;
    tmp_15.arrayClass = new PrimitiveKClassImpl(tmp_16, 'Array', PrimitiveClasses$arrayClass$lambda);
    var tmp_17 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_18 = String;
    tmp_17.stringClass = new PrimitiveKClassImpl(tmp_18, 'String', PrimitiveClasses$stringClass$lambda);
    var tmp_19 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_20 = Error;
    tmp_19.throwableClass = new PrimitiveKClassImpl(tmp_20, 'Throwable', PrimitiveClasses$throwableClass$lambda);
    var tmp_21 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_22 = Array;
    tmp_21.booleanArrayClass = new PrimitiveKClassImpl(tmp_22, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);
    var tmp_23 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_24 = Uint16Array;
    tmp_23.charArrayClass = new PrimitiveKClassImpl(tmp_24, 'CharArray', PrimitiveClasses$charArrayClass$lambda);
    var tmp_25 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_26 = Int8Array;
    tmp_25.byteArrayClass = new PrimitiveKClassImpl(tmp_26, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);
    var tmp_27 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_28 = Int16Array;
    tmp_27.shortArrayClass = new PrimitiveKClassImpl(tmp_28, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);
    var tmp_29 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_30 = Int32Array;
    tmp_29.intArrayClass = new PrimitiveKClassImpl(tmp_30, 'IntArray', PrimitiveClasses$intArrayClass$lambda);
    var tmp_31 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_32 = Array;
    tmp_31.longArrayClass = new PrimitiveKClassImpl(tmp_32, 'LongArray', PrimitiveClasses$longArrayClass$lambda);
    var tmp_33 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_34 = Float32Array;
    tmp_33.floatArrayClass = new PrimitiveKClassImpl(tmp_34, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);
    var tmp_35 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_36 = Float64Array;
    tmp_35.doubleArrayClass = new PrimitiveKClassImpl(tmp_36, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);
  }
  protoOf(PrimitiveClasses).u9 = function () {
    return this.anyClass;
  };
  protoOf(PrimitiveClasses).v9 = function () {
    return this.numberClass;
  };
  protoOf(PrimitiveClasses).w9 = function () {
    return this.nothingClass;
  };
  protoOf(PrimitiveClasses).x9 = function () {
    return this.booleanClass;
  };
  protoOf(PrimitiveClasses).y9 = function () {
    return this.byteClass;
  };
  protoOf(PrimitiveClasses).z9 = function () {
    return this.shortClass;
  };
  protoOf(PrimitiveClasses).aa = function () {
    return this.intClass;
  };
  protoOf(PrimitiveClasses).ba = function () {
    return this.floatClass;
  };
  protoOf(PrimitiveClasses).ca = function () {
    return this.doubleClass;
  };
  protoOf(PrimitiveClasses).da = function () {
    return this.arrayClass;
  };
  protoOf(PrimitiveClasses).ea = function () {
    return this.stringClass;
  };
  protoOf(PrimitiveClasses).fa = function () {
    return this.throwableClass;
  };
  protoOf(PrimitiveClasses).ga = function () {
    return this.booleanArrayClass;
  };
  protoOf(PrimitiveClasses).ha = function () {
    return this.charArrayClass;
  };
  protoOf(PrimitiveClasses).ia = function () {
    return this.byteArrayClass;
  };
  protoOf(PrimitiveClasses).ja = function () {
    return this.shortArrayClass;
  };
  protoOf(PrimitiveClasses).ka = function () {
    return this.intArrayClass;
  };
  protoOf(PrimitiveClasses).la = function () {
    return this.longArrayClass;
  };
  protoOf(PrimitiveClasses).ma = function () {
    return this.floatArrayClass;
  };
  protoOf(PrimitiveClasses).na = function () {
    return this.doubleArrayClass;
  };
  protoOf(PrimitiveClasses).functionClass = function (arity) {
    var tmp0_elvis_lhs = get_functionClasses()[arity];
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.reflect.js.internal.PrimitiveClasses.functionClass.<anonymous>' call
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp_0 = Function;
      var tmp_1 = 'Function' + arity;
      var result = new PrimitiveKClassImpl(tmp_0, tmp_1, PrimitiveClasses$functionClass$lambda(arity));
      // Inline function 'kotlin.js.asDynamic' call
      get_functionClasses()[arity] = result;
      tmp = result;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  var PrimitiveClasses_instance;
  function PrimitiveClasses_getInstance() {
    if (PrimitiveClasses_instance == null)
      new PrimitiveClasses();
    return PrimitiveClasses_instance;
  }
  var properties_initialized_primitives_kt_jle18u;
  function _init_properties_primitives_kt__3fums4() {
    if (!properties_initialized_primitives_kt_jle18u) {
      properties_initialized_primitives_kt_jle18u = true;
      // Inline function 'kotlin.arrayOfNulls' call
      functionClasses = fillArrayVal(Array(0), null);
    }
  }
  function getKClass(jClass) {
    var tmp;
    if (Array.isArray(jClass)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = getKClassM(jClass);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = getKClass1(jClass);
    }
    return tmp;
  }
  function getKClassM(jClasses) {
    var tmp;
    switch (jClasses.length) {
      case 1:
        tmp = getKClass1(jClasses[0]);
        break;
      case 0:
        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp = NothingKClassImpl_getInstance();
        break;
      default:
        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp = new ErrorKClass();
        break;
    }
    return tmp;
  }
  function getKClass1(jClass) {
    if (jClass === String) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      return PrimitiveClasses_getInstance().stringClass;
    }
    // Inline function 'kotlin.js.asDynamic' call
    var metadata = jClass.$metadata$;
    var tmp;
    if (metadata != null) {
      var tmp_0;
      if (metadata.$kClass$ == null) {
        var kClass = new SimpleKClassImpl(jClass);
        metadata.$kClass$ = kClass;
        tmp_0 = kClass;
      } else {
        tmp_0 = metadata.$kClass$;
      }
      tmp = tmp_0;
    } else {
      tmp = new SimpleKClassImpl(jClass);
    }
    return tmp;
  }
  function getKClassFromExpression(e) {
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp;
    switch (typeof e) {
      case 'string':
        tmp = PrimitiveClasses_getInstance().stringClass;
        break;
      case 'number':
        var tmp_0;
        // Inline function 'kotlin.js.asDynamic' call

        // Inline function 'kotlin.js.jsBitwiseOr' call

        if ((e | 0) === e) {
          tmp_0 = PrimitiveClasses_getInstance().intClass;
        } else {
          tmp_0 = PrimitiveClasses_getInstance().doubleClass;
        }

        tmp = tmp_0;
        break;
      case 'boolean':
        tmp = PrimitiveClasses_getInstance().booleanClass;
        break;
      case 'function':
        var tmp_1 = PrimitiveClasses_getInstance();
        // Inline function 'kotlin.js.asDynamic' call

        tmp = tmp_1.functionClass(e.length);
        break;
      default:
        var tmp_2;
        if (isBooleanArray(e)) {
          tmp_2 = PrimitiveClasses_getInstance().booleanArrayClass;
        } else {
          if (isCharArray(e)) {
            tmp_2 = PrimitiveClasses_getInstance().charArrayClass;
          } else {
            if (isByteArray(e)) {
              tmp_2 = PrimitiveClasses_getInstance().byteArrayClass;
            } else {
              if (isShortArray(e)) {
                tmp_2 = PrimitiveClasses_getInstance().shortArrayClass;
              } else {
                if (isIntArray(e)) {
                  tmp_2 = PrimitiveClasses_getInstance().intArrayClass;
                } else {
                  if (isLongArray(e)) {
                    tmp_2 = PrimitiveClasses_getInstance().longArrayClass;
                  } else {
                    if (isFloatArray(e)) {
                      tmp_2 = PrimitiveClasses_getInstance().floatArrayClass;
                    } else {
                      if (isDoubleArray(e)) {
                        tmp_2 = PrimitiveClasses_getInstance().doubleArrayClass;
                      } else {
                        if (isInterface(e, KClass)) {
                          tmp_2 = getKClass(KClass);
                        } else {
                          if (isArray(e)) {
                            tmp_2 = PrimitiveClasses_getInstance().arrayClass;
                          } else {
                            var constructor = Object.getPrototypeOf(e).constructor;
                            var tmp_3;
                            if (constructor === Object) {
                              tmp_3 = PrimitiveClasses_getInstance().anyClass;
                            } else if (constructor === Error) {
                              tmp_3 = PrimitiveClasses_getInstance().throwableClass;
                            } else {
                              var jsClass = constructor;
                              tmp_3 = getKClass1(jsClass);
                            }
                            tmp_2 = tmp_3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        tmp = tmp_2;
        break;
    }
    // Inline function 'kotlin.js.asDynamic' call
    return tmp;
  }
  function findAssociatedObject(_this__u8e3s4, annotationClass) {
    var tmp;
    var tmp_0;
    if (_this__u8e3s4 instanceof KClassImpl) {
      tmp_0 = annotationClass instanceof KClassImpl;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      // Inline function 'kotlin.js.asDynamic' call
      var tmp0_safe_receiver = annotationClass.e9().$metadata$;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.associatedObjectKey;
      var tmp_1;
      if (tmp1_safe_receiver == null) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.js.unsafeCast' call
        tmp_1 = tmp1_safe_receiver;
      }
      var tmp2_elvis_lhs = tmp_1;
      var tmp_2;
      if (tmp2_elvis_lhs == null) {
        return null;
      } else {
        tmp_2 = tmp2_elvis_lhs;
      }
      var key = tmp_2;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp3_safe_receiver = _this__u8e3s4.e9().$metadata$;
      var tmp4_elvis_lhs = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.associatedObjects;
      var tmp_3;
      if (tmp4_elvis_lhs == null) {
        return null;
      } else {
        tmp_3 = tmp4_elvis_lhs;
      }
      var map = tmp_3;
      var tmp5_elvis_lhs = map[key];
      var tmp_4;
      if (tmp5_elvis_lhs == null) {
        return null;
      } else {
        tmp_4 = tmp5_elvis_lhs;
      }
      var factory = tmp_4;
      return factory();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function CharacterCodingException_init_$Init$($this) {
    CharacterCodingException.call($this, null);
    return $this;
  }
  function CharacterCodingException_init_$Create$() {
    var tmp = CharacterCodingException_init_$Init$(objectCreate(protoOf(CharacterCodingException)));
    captureStack(tmp, CharacterCodingException_init_$Create$);
    return tmp;
  }
  function CharacterCodingException(message) {
    Exception_init_$Init$_0(message, this);
    captureStack(this, CharacterCodingException);
  }
  function StringBuilder_init_$Init$(capacity, $this) {
    StringBuilder_init_$Init$_0($this);
    return $this;
  }
  function StringBuilder_init_$Create$(capacity) {
    return StringBuilder_init_$Init$(capacity, objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder_init_$Init$_0($this) {
    StringBuilder.call($this, '');
    return $this;
  }
  function StringBuilder_init_$Create$_0() {
    return StringBuilder_init_$Init$_0(objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder(content) {
    this.b7_1 = !(content === undefined) ? content : '';
  }
  protoOf(StringBuilder).a = function () {
    // Inline function 'kotlin.js.asDynamic' call
    return this.b7_1.length;
  };
  protoOf(StringBuilder).b = function (index) {
    // Inline function 'kotlin.text.getOrElse' call
    var this_0 = this.b7_1;
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (0 <= index ? index <= (charSequenceLength(this_0) - 1 | 0) : false) {
      tmp = charSequenceGet(this_0, index);
    } else {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', length: ' + this.a() + '}');
    }
    return tmp;
  };
  protoOf(StringBuilder).c = function (startIndex, endIndex) {
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    return this.b7_1.substring(startIndex, endIndex);
  };
  protoOf(StringBuilder).e7 = function (value) {
    this.b7_1 = this.b7_1 + toString(value);
    return this;
  };
  protoOf(StringBuilder).d = function (value) {
    this.b7_1 = this.b7_1 + toString_0(value);
    return this;
  };
  protoOf(StringBuilder).oa = function (value, startIndex, endIndex) {
    return this.pa(value == null ? 'null' : value, startIndex, endIndex);
  };
  protoOf(StringBuilder).c7 = function (value) {
    this.b7_1 = this.b7_1 + toString_0(value);
    return this;
  };
  protoOf(StringBuilder).qa = function (value) {
    this.b7_1 = this.b7_1 + value;
    return this;
  };
  protoOf(StringBuilder).ra = function (value) {
    return this.d7(value.toString());
  };
  protoOf(StringBuilder).sa = function (value) {
    return this.d7(value.toString());
  };
  protoOf(StringBuilder).d7 = function (value) {
    var tmp = this;
    var tmp_0 = this.b7_1;
    tmp.b7_1 = tmp_0 + (value == null ? 'null' : value);
    return this;
  };
  protoOf(StringBuilder).ta = function (index, value) {
    Companion_instance_5.m4(index, this.a());
    var tmp = this;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = this.b7_1.substring(0, index) + toString(value);
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.b7_1 = tmp_0 + this.b7_1.substring(index);
    return this;
  };
  protoOf(StringBuilder).ua = function (newLength) {
    if (newLength < 0) {
      throw IllegalArgumentException_init_$Create$_0('Negative new length: ' + newLength + '.');
    }
    if (newLength <= this.a()) {
      var tmp = this;
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp.b7_1 = this.b7_1.substring(0, newLength);
    } else {
      var inductionVariable = this.a();
      if (inductionVariable < newLength)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          this.b7_1 = this.b7_1 + toString(_Char___init__impl__6a9atx(0));
        }
         while (inductionVariable < newLength);
    }
  };
  protoOf(StringBuilder).toString = function () {
    return this.b7_1;
  };
  protoOf(StringBuilder).va = function () {
    this.b7_1 = '';
    return this;
  };
  protoOf(StringBuilder).pa = function (value, startIndex, endIndex) {
    var stringCsq = toString_1(value);
    Companion_instance_5.wa(startIndex, endIndex, stringCsq.length);
    var tmp = this;
    var tmp_0 = this.b7_1;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.b7_1 = tmp_0 + stringCsq.substring(startIndex, endIndex);
    return this;
  };
  function uppercaseChar(_this__u8e3s4) {
    // Inline function 'kotlin.text.uppercase' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var uppercase = toString(_this__u8e3s4).toUpperCase();
    return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);
  }
  function isWhitespace(_this__u8e3s4) {
    return isWhitespaceImpl(_this__u8e3s4);
  }
  function isLetter(_this__u8e3s4) {
    if ((_Char___init__impl__6a9atx(97) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(122) : false) || (_Char___init__impl__6a9atx(65) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(90) : false)) {
      return true;
    }
    if (Char__compareTo_impl_ypi4mb(_this__u8e3s4, _Char___init__impl__6a9atx(128)) < 0) {
      return false;
    }
    return isLetterImpl(_this__u8e3s4);
  }
  function toString_2(_this__u8e3s4, radix) {
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.toString(checkRadix(radix));
  }
  function checkRadix(radix) {
    if (!(2 <= radix ? radix <= 36 : false)) {
      throw IllegalArgumentException_init_$Create$_0('radix ' + radix + ' was not in valid range 2..36');
    }
    return radix;
  }
  function toString_3(_this__u8e3s4, radix) {
    return toStringImpl(_this__u8e3s4, checkRadix(radix));
  }
  function toDouble(_this__u8e3s4) {
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = +_this__u8e3s4;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.toDouble.<anonymous>' call
    if (isNaN_0(this_0) && !isNaN_2(_this__u8e3s4) || (this_0 === 0.0 && isBlank(_this__u8e3s4))) {
      numberFormatError(_this__u8e3s4);
    }
    return this_0;
  }
  function toInt(_this__u8e3s4) {
    var tmp0_elvis_lhs = toIntOrNull(_this__u8e3s4);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toLong_0(_this__u8e3s4) {
    var tmp0_elvis_lhs = toLongOrNull(_this__u8e3s4);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function digitOf(char, radix) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.digitOf.<anonymous>' call
    var it = Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(48)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(57)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(48)) : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(90)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(97)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(122)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(97)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(128)) < 0 ? -1 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65313)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65338)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65313)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65345)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65370)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65345)) + 10 | 0 : digitToIntImpl(char);
    return it >= radix ? -1 : it;
  }
  function isNaN_2(_this__u8e3s4) {
    // Inline function 'kotlin.text.lowercase' call
    // Inline function 'kotlin.js.asDynamic' call
    switch (_this__u8e3s4.toLowerCase()) {
      case 'nan':
      case '+nan':
      case '-nan':
        return true;
      default:
        return false;
    }
  }
  function toDoubleOrNull(_this__u8e3s4) {
    // Inline function 'kotlin.takeIf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var this_0 = +_this__u8e3s4;
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    // Inline function 'kotlin.text.toDoubleOrNull.<anonymous>' call
    if (!(isNaN_0(this_0) && !isNaN_2(_this__u8e3s4) || (this_0 === 0.0 && isBlank(_this__u8e3s4)))) {
      tmp = this_0;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function Companion_4() {
    Companion_instance_4 = this;
    this.xa_1 = new RegExp('[\\\\^$*+?.()|[\\]{}]', 'g');
    this.ya_1 = new RegExp('[\\\\$]', 'g');
    this.za_1 = new RegExp('\\$', 'g');
  }
  protoOf(Companion_4).ab = function (literal) {
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = this.xa_1;
    // Inline function 'kotlin.js.asDynamic' call
    return literal.replace(pattern, '\\$&');
  };
  protoOf(Companion_4).bb = function (literal) {
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = this.za_1;
    // Inline function 'kotlin.js.asDynamic' call
    return literal.replace(pattern, '$$$$');
  };
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  var STRING_CASE_INSENSITIVE_ORDER;
  function compareTo_0(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    _init_properties_stringJs_kt__bg7zye();
    if (ignoreCase) {
      var n1 = _this__u8e3s4.length;
      var n2 = other.length;
      // Inline function 'kotlin.comparisons.minOf' call
      var min = Math.min(n1, n2);
      if (min === 0)
        return n1 - n2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < min)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var thisChar = charSequenceGet(_this__u8e3s4, index);
          var otherChar = charSequenceGet(other, index);
          if (!(thisChar === otherChar)) {
            thisChar = uppercaseChar(thisChar);
            otherChar = uppercaseChar(otherChar);
            if (!(thisChar === otherChar)) {
              // Inline function 'kotlin.text.lowercaseChar' call
              // Inline function 'kotlin.text.lowercase' call
              var this_0 = thisChar;
              // Inline function 'kotlin.js.unsafeCast' call
              // Inline function 'kotlin.js.asDynamic' call
              var tmp$ret$3 = toString(this_0).toLowerCase();
              thisChar = charSequenceGet(tmp$ret$3, 0);
              // Inline function 'kotlin.text.lowercaseChar' call
              // Inline function 'kotlin.text.lowercase' call
              var this_1 = otherChar;
              // Inline function 'kotlin.js.unsafeCast' call
              // Inline function 'kotlin.js.asDynamic' call
              var tmp$ret$7 = toString(this_1).toLowerCase();
              otherChar = charSequenceGet(tmp$ret$7, 0);
              if (!(thisChar === otherChar)) {
                return Char__compareTo_impl_ypi4mb(thisChar, otherChar);
              }
            }
          }
        }
         while (inductionVariable < min);
      return n1 - n2 | 0;
    } else {
      return compareTo(_this__u8e3s4, other);
    }
  }
  function encodeToByteArray(_this__u8e3s4) {
    _init_properties_stringJs_kt__bg7zye();
    return encodeUtf8(_this__u8e3s4, 0, _this__u8e3s4.length, false);
  }
  function decodeToString(_this__u8e3s4) {
    _init_properties_stringJs_kt__bg7zye();
    return decodeUtf8(_this__u8e3s4, 0, _this__u8e3s4.length, false);
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.cb_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).db = function (a, b) {
    return this.cb_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.db(a, b);
  };
  function STRING_CASE_INSENSITIVE_ORDER$lambda(a, b) {
    _init_properties_stringJs_kt__bg7zye();
    return compareTo_0(a, b, true);
  }
  var properties_initialized_stringJs_kt_nta8o4;
  function _init_properties_stringJs_kt__bg7zye() {
    if (!properties_initialized_stringJs_kt_nta8o4) {
      properties_initialized_stringJs_kt_nta8o4 = true;
      var tmp = STRING_CASE_INSENSITIVE_ORDER$lambda;
      STRING_CASE_INSENSITIVE_ORDER = new sam$kotlin_Comparator$0(tmp);
    }
  }
  function startsWith(_this__u8e3s4, prefix, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (!ignoreCase) {
      // Inline function 'kotlin.text.nativeStartsWith' call
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.startsWith(prefix, 0);
    } else
      return regionMatches(_this__u8e3s4, 0, prefix, 0, prefix.length, ignoreCase);
  }
  function replace(_this__u8e3s4, oldValue, newValue, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = new RegExp(Companion_getInstance_4().ab(oldValue), ignoreCase ? 'gui' : 'gu');
    var replacement = Companion_getInstance_4().bb(newValue);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(pattern, replacement);
  }
  function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase);
  }
  function equals_0(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (_this__u8e3s4 == null)
      return other == null;
    if (other == null)
      return false;
    if (!ignoreCase)
      return _this__u8e3s4 == other;
    if (!(_this__u8e3s4.length === other.length))
      return false;
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    if (inductionVariable < last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var thisChar = charSequenceGet(_this__u8e3s4, index);
        var otherChar = charSequenceGet(other, index);
        if (!equals_1(thisChar, otherChar, ignoreCase)) {
          return false;
        }
      }
       while (inductionVariable < last);
    return true;
  }
  function endsWith(_this__u8e3s4, suffix, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (!ignoreCase) {
      // Inline function 'kotlin.text.nativeEndsWith' call
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.endsWith(suffix);
    } else
      return regionMatches(_this__u8e3s4, _this__u8e3s4.length - suffix.length | 0, suffix, 0, suffix.length, ignoreCase);
  }
  function get_REPLACEMENT_BYTE_SEQUENCE() {
    _init_properties_utf8Encoding_kt__9thjs4();
    return REPLACEMENT_BYTE_SEQUENCE;
  }
  var REPLACEMENT_BYTE_SEQUENCE;
  function encodeUtf8(string, startIndex, endIndex, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)) {
      // Inline function 'kotlin.require.<anonymous>' call
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var bytes = new Int8Array(imul(endIndex - startIndex | 0, 3));
    var byteIndex = 0;
    var charIndex = startIndex;
    while (charIndex < endIndex) {
      // Inline function 'kotlin.code' call
      var tmp0 = charIndex;
      charIndex = tmp0 + 1 | 0;
      var this_0 = charSequenceGet(string, tmp0);
      var code = Char__toInt_impl_vasixd(this_0);
      if (code < 128) {
        var tmp1 = byteIndex;
        byteIndex = tmp1 + 1 | 0;
        bytes[tmp1] = toByte(code);
      } else if (code < 2048) {
        var tmp2 = byteIndex;
        byteIndex = tmp2 + 1 | 0;
        bytes[tmp2] = toByte(code >> 6 | 192);
        var tmp3 = byteIndex;
        byteIndex = tmp3 + 1 | 0;
        bytes[tmp3] = toByte(code & 63 | 128);
      } else if (code < 55296 || code >= 57344) {
        var tmp4 = byteIndex;
        byteIndex = tmp4 + 1 | 0;
        bytes[tmp4] = toByte(code >> 12 | 224);
        var tmp5 = byteIndex;
        byteIndex = tmp5 + 1 | 0;
        bytes[tmp5] = toByte(code >> 6 & 63 | 128);
        var tmp6 = byteIndex;
        byteIndex = tmp6 + 1 | 0;
        bytes[tmp6] = toByte(code & 63 | 128);
      } else {
        var codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed);
        if (codePoint <= 0) {
          var tmp7 = byteIndex;
          byteIndex = tmp7 + 1 | 0;
          bytes[tmp7] = get_REPLACEMENT_BYTE_SEQUENCE()[0];
          var tmp8 = byteIndex;
          byteIndex = tmp8 + 1 | 0;
          bytes[tmp8] = get_REPLACEMENT_BYTE_SEQUENCE()[1];
          var tmp9 = byteIndex;
          byteIndex = tmp9 + 1 | 0;
          bytes[tmp9] = get_REPLACEMENT_BYTE_SEQUENCE()[2];
        } else {
          var tmp10 = byteIndex;
          byteIndex = tmp10 + 1 | 0;
          bytes[tmp10] = toByte(codePoint >> 18 | 240);
          var tmp11 = byteIndex;
          byteIndex = tmp11 + 1 | 0;
          bytes[tmp11] = toByte(codePoint >> 12 & 63 | 128);
          var tmp12 = byteIndex;
          byteIndex = tmp12 + 1 | 0;
          bytes[tmp12] = toByte(codePoint >> 6 & 63 | 128);
          var tmp13 = byteIndex;
          byteIndex = tmp13 + 1 | 0;
          bytes[tmp13] = toByte(codePoint & 63 | 128);
          charIndex = charIndex + 1 | 0;
        }
      }
    }
    return bytes.length === byteIndex ? bytes : copyOf_5(bytes, byteIndex);
  }
  function decodeUtf8(bytes, startIndex, endIndex, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(startIndex >= 0 && endIndex <= bytes.length && startIndex <= endIndex)) {
      // Inline function 'kotlin.require.<anonymous>' call
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var byteIndex = startIndex;
    var stringBuilder = StringBuilder_init_$Create$_0();
    while (byteIndex < endIndex) {
      var tmp0 = byteIndex;
      byteIndex = tmp0 + 1 | 0;
      var byte = bytes[tmp0];
      if (byte >= 0) {
        stringBuilder.e7(numberToChar(byte));
      } else if (byte >> 5 === -2) {
        var code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed);
        if (code <= 0) {
          stringBuilder.e7(_Char___init__impl__6a9atx(65533));
          byteIndex = byteIndex + (-code | 0) | 0;
        } else {
          stringBuilder.e7(numberToChar(code));
          byteIndex = byteIndex + 1 | 0;
        }
      } else if (byte >> 4 === -2) {
        var code_0 = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed);
        if (code_0 <= 0) {
          stringBuilder.e7(_Char___init__impl__6a9atx(65533));
          byteIndex = byteIndex + (-code_0 | 0) | 0;
        } else {
          stringBuilder.e7(numberToChar(code_0));
          byteIndex = byteIndex + 2 | 0;
        }
      } else if (byte >> 3 === -2) {
        var code_1 = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed);
        if (code_1 <= 0) {
          stringBuilder.e7(_Char___init__impl__6a9atx(65533));
          byteIndex = byteIndex + (-code_1 | 0) | 0;
        } else {
          var high = (code_1 - 65536 | 0) >> 10 | 55296;
          var low = code_1 & 1023 | 56320;
          stringBuilder.e7(numberToChar(high));
          stringBuilder.e7(numberToChar(low));
          byteIndex = byteIndex + 3 | 0;
        }
      } else {
        malformed(0, byteIndex, throwOnMalformed);
        stringBuilder.e7(_Char___init__impl__6a9atx(65533));
      }
    }
    return stringBuilder.toString();
  }
  function codePointFromSurrogate(string, high, index, endIndex, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    if (!(55296 <= high ? high <= 56319 : false) || index >= endIndex) {
      return malformed(0, index, throwOnMalformed);
    }
    // Inline function 'kotlin.code' call
    var this_0 = charSequenceGet(string, index);
    var low = Char__toInt_impl_vasixd(this_0);
    if (!(56320 <= low ? low <= 57343 : false)) {
      return malformed(0, index, throwOnMalformed);
    }
    return 65536 + ((high & 1023) << 10) | 0 | low & 1023;
  }
  function codePointFrom2(bytes, byte1, index, endIndex, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    if ((byte1 & 30) === 0 || index >= endIndex) {
      return malformed(0, index, throwOnMalformed);
    }
    var byte2 = bytes[index];
    if (!((byte2 & 192) === 128)) {
      return malformed(0, index, throwOnMalformed);
    }
    return byte1 << 6 ^ byte2 ^ 3968;
  }
  function codePointFrom3(bytes, byte1, index, endIndex, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    if (index >= endIndex) {
      return malformed(0, index, throwOnMalformed);
    }
    var byte2 = bytes[index];
    if ((byte1 & 15) === 0) {
      if (!((byte2 & 224) === 160)) {
        return malformed(0, index, throwOnMalformed);
      }
    } else if ((byte1 & 15) === 13) {
      if (!((byte2 & 224) === 128)) {
        return malformed(0, index, throwOnMalformed);
      }
    } else if (!((byte2 & 192) === 128)) {
      return malformed(0, index, throwOnMalformed);
    }
    if ((index + 1 | 0) === endIndex) {
      return malformed(1, index, throwOnMalformed);
    }
    var byte3 = bytes[index + 1 | 0];
    if (!((byte3 & 192) === 128)) {
      return malformed(1, index, throwOnMalformed);
    }
    return byte1 << 12 ^ byte2 << 6 ^ byte3 ^ -123008;
  }
  function codePointFrom4(bytes, byte1, index, endIndex, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    if (index >= endIndex) {
      return malformed(0, index, throwOnMalformed);
    }
    var byte2 = bytes[index];
    if ((byte1 & 15) === 0) {
      if ((byte2 & 240) <= 128) {
        return malformed(0, index, throwOnMalformed);
      }
    } else if ((byte1 & 15) === 4) {
      if (!((byte2 & 240) === 128)) {
        return malformed(0, index, throwOnMalformed);
      }
    } else if ((byte1 & 15) > 4) {
      return malformed(0, index, throwOnMalformed);
    }
    if (!((byte2 & 192) === 128)) {
      return malformed(0, index, throwOnMalformed);
    }
    if ((index + 1 | 0) === endIndex) {
      return malformed(1, index, throwOnMalformed);
    }
    var byte3 = bytes[index + 1 | 0];
    if (!((byte3 & 192) === 128)) {
      return malformed(1, index, throwOnMalformed);
    }
    if ((index + 2 | 0) === endIndex) {
      return malformed(2, index, throwOnMalformed);
    }
    var byte4 = bytes[index + 2 | 0];
    if (!((byte4 & 192) === 128)) {
      return malformed(2, index, throwOnMalformed);
    }
    return byte1 << 18 ^ byte2 << 12 ^ byte3 << 6 ^ byte4 ^ 3678080;
  }
  function malformed(size, index, throwOnMalformed) {
    _init_properties_utf8Encoding_kt__9thjs4();
    if (throwOnMalformed)
      throw new CharacterCodingException('Malformed sequence starting at ' + (index - 1 | 0));
    return -size | 0;
  }
  var properties_initialized_utf8Encoding_kt_eee1vq;
  function _init_properties_utf8Encoding_kt__9thjs4() {
    if (!properties_initialized_utf8Encoding_kt_eee1vq) {
      properties_initialized_utf8Encoding_kt_eee1vq = true;
      // Inline function 'kotlin.byteArrayOf' call
      REPLACEMENT_BYTE_SEQUENCE = new Int8Array([-17, -65, -67]);
    }
  }
  function addSuppressed(_this__u8e3s4, exception) {
    if (!(_this__u8e3s4 === exception)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var suppressed = _this__u8e3s4._suppressed;
      if (suppressed == null) {
        // Inline function 'kotlin.js.asDynamic' call
        _this__u8e3s4._suppressed = mutableListOf([exception]);
      } else {
        suppressed.e(exception);
      }
    }
  }
  var DurationUnit_NANOSECONDS_instance;
  var DurationUnit_MICROSECONDS_instance;
  var DurationUnit_MILLISECONDS_instance;
  var DurationUnit_SECONDS_instance;
  var DurationUnit_MINUTES_instance;
  var DurationUnit_HOURS_instance;
  var DurationUnit_DAYS_instance;
  var DurationUnit_entriesInitialized;
  function DurationUnit_initEntries() {
    if (DurationUnit_entriesInitialized)
      return Unit_instance;
    DurationUnit_entriesInitialized = true;
    DurationUnit_NANOSECONDS_instance = new DurationUnit('NANOSECONDS', 0, 1.0);
    DurationUnit_MICROSECONDS_instance = new DurationUnit('MICROSECONDS', 1, 1000.0);
    DurationUnit_MILLISECONDS_instance = new DurationUnit('MILLISECONDS', 2, 1000000.0);
    DurationUnit_SECONDS_instance = new DurationUnit('SECONDS', 3, 1.0E9);
    DurationUnit_MINUTES_instance = new DurationUnit('MINUTES', 4, 6.0E10);
    DurationUnit_HOURS_instance = new DurationUnit('HOURS', 5, 3.6E12);
    DurationUnit_DAYS_instance = new DurationUnit('DAYS', 6, 8.64E13);
  }
  function DurationUnit(name, ordinal, scale) {
    Enum.call(this, name, ordinal);
    this.gb_1 = scale;
  }
  function convertDurationUnit(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo(sourceUnit.gb_1, targetUnit.gb_1);
    return sourceCompareTarget > 0 ? value * (sourceUnit.gb_1 / targetUnit.gb_1) : sourceCompareTarget < 0 ? value / (targetUnit.gb_1 / sourceUnit.gb_1) : value;
  }
  function convertDurationUnit_0(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo(sourceUnit.gb_1, targetUnit.gb_1);
    var tmp;
    if (sourceCompareTarget > 0) {
      var scale = numberToLong(sourceUnit.gb_1 / targetUnit.gb_1);
      var result = value.m2(scale);
      tmp = result.n2(scale).equals(value) ? result : value.z(new Long(0, 0)) > 0 ? new Long(-1, 2147483647) : new Long(0, -2147483648);
    } else if (sourceCompareTarget < 0) {
      tmp = value.n2(numberToLong(targetUnit.gb_1 / sourceUnit.gb_1));
    } else {
      tmp = value;
    }
    return tmp;
  }
  function convertDurationUnitOverflow(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo(sourceUnit.gb_1, targetUnit.gb_1);
    return sourceCompareTarget > 0 ? value.m2(numberToLong(sourceUnit.gb_1 / targetUnit.gb_1)) : sourceCompareTarget < 0 ? value.n2(numberToLong(targetUnit.gb_1 / sourceUnit.gb_1)) : value;
  }
  function DurationUnit_NANOSECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_NANOSECONDS_instance;
  }
  function DurationUnit_MICROSECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MICROSECONDS_instance;
  }
  function DurationUnit_MILLISECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MILLISECONDS_instance;
  }
  function DurationUnit_SECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_SECONDS_instance;
  }
  function DurationUnit_MINUTES_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MINUTES_instance;
  }
  function DurationUnit_HOURS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_HOURS_instance;
  }
  function DurationUnit_DAYS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_DAYS_instance;
  }
  function AbstractCollection$toString$lambda(this$0) {
    return function (it) {
      return it === this$0 ? '(this Collection)' : toString_0(it);
    };
  }
  function AbstractCollection() {
  }
  protoOf(AbstractCollection).r1 = function (element) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(this, Collection)) {
        tmp = this.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = this.j();
      while (tmp0_iterator.k()) {
        var element_0 = tmp0_iterator.l();
        // Inline function 'kotlin.collections.AbstractCollection.contains.<anonymous>' call
        if (equals(element_0, element)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractCollection).s1 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.collections.AbstractCollection.containsAll.<anonymous>' call
        if (!this.r1(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractCollection).n = function () {
    return this.m() === 0;
  };
  protoOf(AbstractCollection).toString = function () {
    return joinToString_1(this, ', ', '[', ']', VOID, VOID, AbstractCollection$toString$lambda(this));
  };
  protoOf(AbstractCollection).toArray = function () {
    return collectionToArray(this);
  };
  function IteratorImpl_0($outer) {
    this.ib_1 = $outer;
    this.hb_1 = 0;
  }
  protoOf(IteratorImpl_0).k = function () {
    return this.hb_1 < this.ib_1.m();
  };
  protoOf(IteratorImpl_0).l = function () {
    if (!this.k())
      throw NoSuchElementException_init_$Create$();
    var tmp1 = this.hb_1;
    this.hb_1 = tmp1 + 1 | 0;
    return this.ib_1.o(tmp1);
  };
  function Companion_5() {
    this.n3_1 = 2147483639;
  }
  protoOf(Companion_5).l4 = function (index, size) {
    if (index < 0 || index >= size) {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);
    }
  };
  protoOf(Companion_5).m4 = function (index, size) {
    if (index < 0 || index > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);
    }
  };
  protoOf(Companion_5).o3 = function (fromIndex, toIndex, size) {
    if (fromIndex < 0 || toIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex + ', size: ' + size);
    }
    if (fromIndex > toIndex) {
      throw IllegalArgumentException_init_$Create$_0('fromIndex: ' + fromIndex + ' > toIndex: ' + toIndex);
    }
  };
  protoOf(Companion_5).wa = function (startIndex, endIndex, size) {
    if (startIndex < 0 || endIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('startIndex: ' + startIndex + ', endIndex: ' + endIndex + ', size: ' + size);
    }
    if (startIndex > endIndex) {
      throw IllegalArgumentException_init_$Create$_0('startIndex: ' + startIndex + ' > endIndex: ' + endIndex);
    }
  };
  protoOf(Companion_5).c6 = function (oldCapacity, minCapacity) {
    var newCapacity = oldCapacity + (oldCapacity >> 1) | 0;
    if ((newCapacity - minCapacity | 0) < 0)
      newCapacity = minCapacity;
    if ((newCapacity - 2147483639 | 0) > 0)
      newCapacity = minCapacity > 2147483639 ? 2147483647 : 2147483639;
    return newCapacity;
  };
  protoOf(Companion_5).y3 = function (c) {
    var hashCode_0 = 1;
    var tmp0_iterator = c.j();
    while (tmp0_iterator.k()) {
      var e = tmp0_iterator.l();
      var tmp = imul(31, hashCode_0);
      var tmp2_elvis_lhs = e == null ? null : hashCode(e);
      hashCode_0 = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode_0;
  };
  protoOf(Companion_5).x3 = function (c, other) {
    if (!(c.m() === other.m()))
      return false;
    var otherIterator = other.j();
    var tmp0_iterator = c.j();
    while (tmp0_iterator.k()) {
      var elem = tmp0_iterator.l();
      var elemOther = otherIterator.l();
      if (!equals(elem, elemOther)) {
        return false;
      }
    }
    return true;
  };
  var Companion_instance_5;
  function Companion_getInstance_5() {
    return Companion_instance_5;
  }
  function AbstractList() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractList).j = function () {
    return new IteratorImpl_0(this);
  };
  protoOf(AbstractList).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtList) : false))
      return false;
    return Companion_instance_5.x3(this, other);
  };
  protoOf(AbstractList).hashCode = function () {
    return Companion_instance_5.y3(this);
  };
  function AbstractMap$keys$1$iterator$1($entryIterator) {
    this.jb_1 = $entryIterator;
  }
  protoOf(AbstractMap$keys$1$iterator$1).k = function () {
    return this.jb_1.k();
  };
  protoOf(AbstractMap$keys$1$iterator$1).l = function () {
    return this.jb_1.l().t1();
  };
  function AbstractMap$values$1$iterator$1($entryIterator) {
    this.kb_1 = $entryIterator;
  }
  protoOf(AbstractMap$values$1$iterator$1).k = function () {
    return this.kb_1.k();
  };
  protoOf(AbstractMap$values$1$iterator$1).l = function () {
    return this.kb_1.l().u1();
  };
  function toString_4($this, o) {
    return o === $this ? '(this Map)' : toString_0(o);
  }
  function implFindEntry($this, key) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = $this.r().j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.collections.AbstractMap.implFindEntry.<anonymous>' call
        if (equals(element.t1(), key)) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function Companion_6() {
  }
  var Companion_instance_6;
  function Companion_getInstance_6() {
    return Companion_instance_6;
  }
  function AbstractMap$keys$1(this$0) {
    this.lb_1 = this$0;
    AbstractSet.call(this);
  }
  protoOf(AbstractMap$keys$1).v4 = function (element) {
    return this.lb_1.v1(element);
  };
  protoOf(AbstractMap$keys$1).r1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.v4((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(AbstractMap$keys$1).j = function () {
    var entryIterator = this.lb_1.r().j();
    return new AbstractMap$keys$1$iterator$1(entryIterator);
  };
  protoOf(AbstractMap$keys$1).m = function () {
    return this.lb_1.m();
  };
  function AbstractMap$toString$lambda(this$0) {
    return function (it) {
      return this$0.mb(it);
    };
  }
  function AbstractMap$values$1(this$0) {
    this.nb_1 = this$0;
    AbstractCollection.call(this);
  }
  protoOf(AbstractMap$values$1).a5 = function (element) {
    return this.nb_1.w1(element);
  };
  protoOf(AbstractMap$values$1).r1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.a5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(AbstractMap$values$1).j = function () {
    var entryIterator = this.nb_1.r().j();
    return new AbstractMap$values$1$iterator$1(entryIterator);
  };
  protoOf(AbstractMap$values$1).m = function () {
    return this.nb_1.m();
  };
  function AbstractMap() {
    this.f4_1 = null;
    this.g4_1 = null;
  }
  protoOf(AbstractMap).v1 = function (key) {
    return !(implFindEntry(this, key) == null);
  };
  protoOf(AbstractMap).w1 = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var this_0 = this.r();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.collections.AbstractMap.containsValue.<anonymous>' call
        if (equals(element.u1(), value)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractMap).h4 = function (entry) {
    if (!(!(entry == null) ? isInterface(entry, Entry) : false))
      return false;
    var key = entry.t1();
    var value = entry.u1();
    // Inline function 'kotlin.collections.get' call
    var ourValue = (isInterface(this, KtMap) ? this : THROW_CCE()).x1(key);
    if (!equals(value, ourValue)) {
      return false;
    }
    var tmp;
    if (ourValue == null) {
      // Inline function 'kotlin.collections.containsKey' call
      tmp = !(isInterface(this, KtMap) ? this : THROW_CCE()).v1(key);
    } else {
      tmp = false;
    }
    if (tmp) {
      return false;
    }
    return true;
  };
  protoOf(AbstractMap).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtMap) : false))
      return false;
    if (!(this.m() === other.m()))
      return false;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = other.r();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.collections.AbstractMap.equals.<anonymous>' call
        if (!this.h4(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractMap).x1 = function (key) {
    var tmp0_safe_receiver = implFindEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.u1();
  };
  protoOf(AbstractMap).hashCode = function () {
    return hashCode(this.r());
  };
  protoOf(AbstractMap).n = function () {
    return this.m() === 0;
  };
  protoOf(AbstractMap).m = function () {
    return this.r().m();
  };
  protoOf(AbstractMap).y1 = function () {
    if (this.f4_1 == null) {
      var tmp = this;
      tmp.f4_1 = new AbstractMap$keys$1(this);
    }
    return ensureNotNull(this.f4_1);
  };
  protoOf(AbstractMap).toString = function () {
    var tmp = this.r();
    return joinToString_1(tmp, ', ', '{', '}', VOID, VOID, AbstractMap$toString$lambda(this));
  };
  protoOf(AbstractMap).mb = function (entry) {
    return toString_4(this, entry.t1()) + '=' + toString_4(this, entry.u1());
  };
  protoOf(AbstractMap).z1 = function () {
    if (this.g4_1 == null) {
      var tmp = this;
      tmp.g4_1 = new AbstractMap$values$1(this);
    }
    return ensureNotNull(this.g4_1);
  };
  function Companion_7() {
  }
  protoOf(Companion_7).j4 = function (c) {
    var hashCode_0 = 0;
    var tmp0_iterator = c.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      var tmp = hashCode_0;
      var tmp2_elvis_lhs = element == null ? null : hashCode(element);
      hashCode_0 = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode_0;
  };
  protoOf(Companion_7).i4 = function (c, other) {
    if (!(c.m() === other.m()))
      return false;
    // Inline function 'kotlin.collections.containsAll' call
    return c.s1(other);
  };
  var Companion_instance_7;
  function Companion_getInstance_7() {
    return Companion_instance_7;
  }
  function AbstractSet() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractSet).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtSet) : false))
      return false;
    return Companion_instance_7.i4(this, other);
  };
  protoOf(AbstractSet).hashCode = function () {
    return Companion_instance_7.j4(this);
  };
  function ArrayDeque_init_$Init$($this) {
    AbstractMutableList.call($this);
    ArrayDeque.call($this);
    $this.qb_1 = Companion_getInstance_8().sb_1;
    return $this;
  }
  function ArrayDeque_init_$Create$() {
    return ArrayDeque_init_$Init$(objectCreate(protoOf(ArrayDeque)));
  }
  function ensureCapacity_0($this, minCapacity) {
    if (minCapacity < 0)
      throw IllegalStateException_init_$Create$_0('Deque is too big.');
    if (minCapacity <= $this.qb_1.length)
      return Unit_instance;
    if ($this.qb_1 === Companion_getInstance_8().sb_1) {
      var tmp = $this;
      // Inline function 'kotlin.arrayOfNulls' call
      var size = coerceAtLeast(minCapacity, 10);
      tmp.qb_1 = fillArrayVal(Array(size), null);
      return Unit_instance;
    }
    var newCapacity = Companion_instance_5.c6($this.qb_1.length, minCapacity);
    copyElements($this, newCapacity);
  }
  function copyElements($this, newCapacity) {
    // Inline function 'kotlin.arrayOfNulls' call
    var newElements = fillArrayVal(Array(newCapacity), null);
    // Inline function 'kotlin.collections.copyInto' call
    var this_0 = $this.qb_1;
    var startIndex = $this.pb_1;
    var endIndex = $this.qb_1.length;
    arrayCopy(this_0, newElements, 0, startIndex, endIndex);
    // Inline function 'kotlin.collections.copyInto' call
    var this_1 = $this.qb_1;
    var destinationOffset = $this.qb_1.length - $this.pb_1 | 0;
    var endIndex_0 = $this.pb_1;
    arrayCopy(this_1, newElements, destinationOffset, 0, endIndex_0);
    $this.pb_1 = 0;
    $this.qb_1 = newElements;
  }
  function positiveMod($this, index) {
    return index >= $this.qb_1.length ? index - $this.qb_1.length | 0 : index;
  }
  function incremented($this, index) {
    return index === get_lastIndex($this.qb_1) ? 0 : index + 1 | 0;
  }
  function decremented($this, index) {
    return index === 0 ? get_lastIndex($this.qb_1) : index - 1 | 0;
  }
  function copyCollectionElements($this, internalIndex, elements) {
    var iterator = elements.j();
    var inductionVariable = internalIndex;
    var last = $this.qb_1.length;
    if (inductionVariable < last)
      $l$loop: do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!iterator.k())
          break $l$loop;
        $this.qb_1[index] = iterator.l();
      }
       while (inductionVariable < last);
    var inductionVariable_0 = 0;
    var last_0 = $this.pb_1;
    if (inductionVariable_0 < last_0)
      $l$loop_0: do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (!iterator.k())
          break $l$loop_0;
        $this.qb_1[index_0] = iterator.l();
      }
       while (inductionVariable_0 < last_0);
    $this.rb_1 = $this.rb_1 + elements.m() | 0;
  }
  function registerModification_0($this) {
    $this.u3_1 = $this.u3_1 + 1 | 0;
  }
  function Companion_8() {
    Companion_instance_8 = this;
    var tmp = this;
    // Inline function 'kotlin.emptyArray' call
    tmp.sb_1 = [];
    this.tb_1 = 10;
  }
  var Companion_instance_8;
  function Companion_getInstance_8() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  protoOf(ArrayDeque).m = function () {
    return this.rb_1;
  };
  protoOf(ArrayDeque).n = function () {
    return this.rb_1 === 0;
  };
  protoOf(ArrayDeque).ub = function (element) {
    registerModification_0(this);
    ensureCapacity_0(this, this.rb_1 + 1 | 0);
    this.pb_1 = decremented(this, this.pb_1);
    this.qb_1[this.pb_1] = element;
    this.rb_1 = this.rb_1 + 1 | 0;
  };
  protoOf(ArrayDeque).vb = function (element) {
    registerModification_0(this);
    ensureCapacity_0(this, this.rb_1 + 1 | 0);
    var tmp = this.qb_1;
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.rb_1;
    tmp[positiveMod(this, this.pb_1 + index | 0)] = element;
    this.rb_1 = this.rb_1 + 1 | 0;
  };
  protoOf(ArrayDeque).wb = function () {
    if (this.n())
      throw NoSuchElementException_init_$Create$_0('ArrayDeque is empty.');
    registerModification_0(this);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var internalIndex = this.pb_1;
    var tmp = this.qb_1[internalIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.qb_1[this.pb_1] = null;
    this.pb_1 = incremented(this, this.pb_1);
    this.rb_1 = this.rb_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).xb = function () {
    return this.n() ? null : this.wb();
  };
  protoOf(ArrayDeque).yb = function () {
    if (this.n())
      throw NoSuchElementException_init_$Create$_0('ArrayDeque is empty.');
    registerModification_0(this);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = get_lastIndex_2(this);
    var internalLastIndex = positiveMod(this, this.pb_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.qb_1[internalLastIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.qb_1[internalLastIndex] = null;
    this.rb_1 = this.rb_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).e = function (element) {
    this.vb(element);
    return true;
  };
  protoOf(ArrayDeque).v3 = function (index, element) {
    Companion_instance_5.m4(index, this.rb_1);
    if (index === this.rb_1) {
      this.vb(element);
      return Unit_instance;
    } else if (index === 0) {
      this.ub(element);
      return Unit_instance;
    }
    registerModification_0(this);
    ensureCapacity_0(this, this.rb_1 + 1 | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.pb_1 + index | 0);
    if (index < (this.rb_1 + 1 | 0) >> 1) {
      var decrementedInternalIndex = decremented(this, internalIndex);
      var decrementedHead = decremented(this, this.pb_1);
      if (decrementedInternalIndex >= this.pb_1) {
        this.qb_1[decrementedHead] = this.qb_1[this.pb_1];
        // Inline function 'kotlin.collections.copyInto' call
        var this_0 = this.qb_1;
        var destination = this.qb_1;
        var destinationOffset = this.pb_1;
        var startIndex = this.pb_1 + 1 | 0;
        var endIndex = decrementedInternalIndex + 1 | 0;
        arrayCopy(this_0, destination, destinationOffset, startIndex, endIndex);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_1 = this.qb_1;
        var destination_0 = this.qb_1;
        var destinationOffset_0 = this.pb_1 - 1 | 0;
        var startIndex_0 = this.pb_1;
        var endIndex_0 = this.qb_1.length;
        arrayCopy(this_1, destination_0, destinationOffset_0, startIndex_0, endIndex_0);
        this.qb_1[this.qb_1.length - 1 | 0] = this.qb_1[0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_2 = this.qb_1;
        var destination_1 = this.qb_1;
        var endIndex_1 = decrementedInternalIndex + 1 | 0;
        arrayCopy(this_2, destination_1, 0, 1, endIndex_1);
      }
      this.qb_1[decrementedInternalIndex] = element;
      this.pb_1 = decrementedHead;
    } else {
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index_0 = this.rb_1;
      var tail = positiveMod(this, this.pb_1 + index_0 | 0);
      if (internalIndex < tail) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_3 = this.qb_1;
        var destination_2 = this.qb_1;
        var destinationOffset_1 = internalIndex + 1 | 0;
        arrayCopy(this_3, destination_2, destinationOffset_1, internalIndex, tail);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_4 = this.qb_1;
        var destination_3 = this.qb_1;
        arrayCopy(this_4, destination_3, 1, 0, tail);
        this.qb_1[0] = this.qb_1[this.qb_1.length - 1 | 0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_5 = this.qb_1;
        var destination_4 = this.qb_1;
        var destinationOffset_2 = internalIndex + 1 | 0;
        var endIndex_2 = this.qb_1.length - 1 | 0;
        arrayCopy(this_5, destination_4, destinationOffset_2, internalIndex, endIndex_2);
      }
      this.qb_1[internalIndex] = element;
    }
    this.rb_1 = this.rb_1 + 1 | 0;
  };
  protoOf(ArrayDeque).d1 = function (elements) {
    if (elements.n())
      return false;
    registerModification_0(this);
    ensureCapacity_0(this, this.rb_1 + elements.m() | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.rb_1;
    var tmp$ret$0 = positiveMod(this, this.pb_1 + index | 0);
    copyCollectionElements(this, tmp$ret$0, elements);
    return true;
  };
  protoOf(ArrayDeque).o = function (index) {
    Companion_instance_5.l4(index, this.rb_1);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.pb_1 + index | 0);
    var tmp = this.qb_1[internalIndex];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayDeque).r1 = function (element) {
    return !(this.w3(element) === -1);
  };
  protoOf(ArrayDeque).w3 = function (element) {
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.rb_1;
    var tail = positiveMod(this, this.pb_1 + index | 0);
    if (this.pb_1 < tail) {
      var inductionVariable = this.pb_1;
      if (inductionVariable < tail)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (equals(element, this.qb_1[index_0]))
            return index_0 - this.pb_1 | 0;
        }
         while (inductionVariable < tail);
    } else if (this.pb_1 >= tail) {
      var inductionVariable_0 = this.pb_1;
      var last = this.qb_1.length;
      if (inductionVariable_0 < last)
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals(element, this.qb_1[index_1]))
            return index_1 - this.pb_1 | 0;
        }
         while (inductionVariable_0 < last);
      var inductionVariable_1 = 0;
      if (inductionVariable_1 < tail)
        do {
          var index_2 = inductionVariable_1;
          inductionVariable_1 = inductionVariable_1 + 1 | 0;
          if (equals(element, this.qb_1[index_2]))
            return (index_2 + this.qb_1.length | 0) - this.pb_1 | 0;
        }
         while (inductionVariable_1 < tail);
    }
    return -1;
  };
  protoOf(ArrayDeque).a2 = function (index) {
    Companion_instance_5.l4(index, this.rb_1);
    if (index === get_lastIndex_2(this)) {
      return this.yb();
    } else if (index === 0) {
      return this.wb();
    }
    registerModification_0(this);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.pb_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.qb_1[internalIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    if (index < this.rb_1 >> 1) {
      if (internalIndex >= this.pb_1) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_0 = this.qb_1;
        var destination = this.qb_1;
        var destinationOffset = this.pb_1 + 1 | 0;
        var startIndex = this.pb_1;
        arrayCopy(this_0, destination, destinationOffset, startIndex, internalIndex);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_1 = this.qb_1;
        var destination_0 = this.qb_1;
        arrayCopy(this_1, destination_0, 1, 0, internalIndex);
        this.qb_1[0] = this.qb_1[this.qb_1.length - 1 | 0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_2 = this.qb_1;
        var destination_1 = this.qb_1;
        var destinationOffset_0 = this.pb_1 + 1 | 0;
        var startIndex_0 = this.pb_1;
        var endIndex = this.qb_1.length - 1 | 0;
        arrayCopy(this_2, destination_1, destinationOffset_0, startIndex_0, endIndex);
      }
      this.qb_1[this.pb_1] = null;
      this.pb_1 = incremented(this, this.pb_1);
    } else {
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index_0 = get_lastIndex_2(this);
      var internalLastIndex = positiveMod(this, this.pb_1 + index_0 | 0);
      if (internalIndex <= internalLastIndex) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_3 = this.qb_1;
        var destination_2 = this.qb_1;
        var startIndex_1 = internalIndex + 1 | 0;
        var endIndex_0 = internalLastIndex + 1 | 0;
        arrayCopy(this_3, destination_2, internalIndex, startIndex_1, endIndex_0);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_4 = this.qb_1;
        var destination_3 = this.qb_1;
        var startIndex_2 = internalIndex + 1 | 0;
        var endIndex_1 = this.qb_1.length;
        arrayCopy(this_4, destination_3, internalIndex, startIndex_2, endIndex_1);
        this.qb_1[this.qb_1.length - 1 | 0] = this.qb_1[0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_5 = this.qb_1;
        var destination_4 = this.qb_1;
        var endIndex_2 = internalLastIndex + 1 | 0;
        arrayCopy(this_5, destination_4, 0, 1, endIndex_2);
      }
      this.qb_1[internalLastIndex] = null;
    }
    this.rb_1 = this.rb_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).zb = function (array) {
    var tmp = array.length >= this.rb_1 ? array : arrayOfNulls(array, this.rb_1);
    var dest = isArray(tmp) ? tmp : THROW_CCE();
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.rb_1;
    var tail = positiveMod(this, this.pb_1 + index | 0);
    if (this.pb_1 < tail) {
      // Inline function 'kotlin.collections.copyInto' call
      var this_0 = this.qb_1;
      var startIndex = this.pb_1;
      arrayCopy(this_0, dest, 0, startIndex, tail);
    } else {
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!this.n()) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_1 = this.qb_1;
        var startIndex_0 = this.pb_1;
        var endIndex = this.qb_1.length;
        arrayCopy(this_1, dest, 0, startIndex_0, endIndex);
        // Inline function 'kotlin.collections.copyInto' call
        var this_2 = this.qb_1;
        var destinationOffset = this.qb_1.length - this.pb_1 | 0;
        arrayCopy(this_2, dest, destinationOffset, 0, tail);
      }
    }
    var tmp_0 = terminateCollectionToArray(this.rb_1, dest);
    return isArray(tmp_0) ? tmp_0 : THROW_CCE();
  };
  protoOf(ArrayDeque).o4 = function () {
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.rb_1;
    var tmp$ret$0 = fillArrayVal(Array(size), null);
    return this.zb(tmp$ret$0);
  };
  protoOf(ArrayDeque).toArray = function () {
    return this.o4();
  };
  function ArrayDeque() {
    Companion_getInstance_8();
    this.pb_1 = 0;
    this.rb_1 = 0;
  }
  function collectionToArrayCommonImpl(collection) {
    if (collection.n()) {
      // Inline function 'kotlin.emptyArray' call
      return [];
    }
    // Inline function 'kotlin.arrayOfNulls' call
    var size = collection.m();
    var destination = fillArrayVal(Array(size), null);
    var iterator = collection.j();
    var index = 0;
    while (iterator.k()) {
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      destination[tmp0] = iterator.l();
    }
    return destination;
  }
  function emptyList() {
    return EmptyList_getInstance();
  }
  function listOf_0(elements) {
    return elements.length > 0 ? asList(elements) : emptyList();
  }
  function EmptyList() {
    EmptyList_instance = this;
    this.ac_1 = new Long(-1478467534, -1720727600);
  }
  protoOf(EmptyList).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, KtList) : false) {
      tmp = other.n();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptyList).hashCode = function () {
    return 1;
  };
  protoOf(EmptyList).toString = function () {
    return '[]';
  };
  protoOf(EmptyList).m = function () {
    return 0;
  };
  protoOf(EmptyList).n = function () {
    return true;
  };
  protoOf(EmptyList).bc = function (element) {
    return false;
  };
  protoOf(EmptyList).r1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.bc(tmp);
  };
  protoOf(EmptyList).cc = function (elements) {
    return elements.n();
  };
  protoOf(EmptyList).s1 = function (elements) {
    return this.cc(elements);
  };
  protoOf(EmptyList).o = function (index) {
    throw IndexOutOfBoundsException_init_$Create$_0("Empty list doesn't contain element at index " + index + '.');
  };
  protoOf(EmptyList).j = function () {
    return EmptyIterator_instance;
  };
  var EmptyList_instance;
  function EmptyList_getInstance() {
    if (EmptyList_instance == null)
      new EmptyList();
    return EmptyList_instance;
  }
  function EmptyIterator() {
  }
  protoOf(EmptyIterator).k = function () {
    return false;
  };
  protoOf(EmptyIterator).l = function () {
    throw NoSuchElementException_init_$Create$();
  };
  var EmptyIterator_instance;
  function EmptyIterator_getInstance() {
    return EmptyIterator_instance;
  }
  function get_lastIndex_2(_this__u8e3s4) {
    return _this__u8e3s4.m() - 1 | 0;
  }
  function optimizeReadOnlyList(_this__u8e3s4) {
    switch (_this__u8e3s4.m()) {
      case 0:
        return emptyList();
      case 1:
        return listOf(_this__u8e3s4.o(0));
      default:
        return _this__u8e3s4;
    }
  }
  function arrayListOf(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function throwIndexOverflow() {
    throw ArithmeticException_init_$Create$_0('Index overflow has happened.');
  }
  function asCollection(_this__u8e3s4) {
    return new ArrayAsCollection(_this__u8e3s4, false);
  }
  function mutableListOf(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function ArrayAsCollection(values, isVarargs) {
    this.dc_1 = values;
    this.ec_1 = isVarargs;
  }
  protoOf(ArrayAsCollection).m = function () {
    return this.dc_1.length;
  };
  protoOf(ArrayAsCollection).n = function () {
    // Inline function 'kotlin.collections.isEmpty' call
    return this.dc_1.length === 0;
  };
  protoOf(ArrayAsCollection).fc = function (element) {
    return contains_4(this.dc_1, element);
  };
  protoOf(ArrayAsCollection).gc = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.collections.ArrayAsCollection.containsAll.<anonymous>' call
        if (!this.fc(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(ArrayAsCollection).s1 = function (elements) {
    return this.gc(elements);
  };
  protoOf(ArrayAsCollection).j = function () {
    return arrayIterator(this.dc_1);
  };
  function IndexedValue(index, value) {
    this.hc_1 = index;
    this.ic_1 = value;
  }
  protoOf(IndexedValue).toString = function () {
    return 'IndexedValue(index=' + this.hc_1 + ', value=' + toString_0(this.ic_1) + ')';
  };
  protoOf(IndexedValue).hashCode = function () {
    var result = this.hc_1;
    result = imul(result, 31) + (this.ic_1 == null ? 0 : hashCode(this.ic_1)) | 0;
    return result;
  };
  protoOf(IndexedValue).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof IndexedValue))
      return false;
    var tmp0_other_with_cast = other instanceof IndexedValue ? other : THROW_CCE();
    if (!(this.hc_1 === tmp0_other_with_cast.hc_1))
      return false;
    if (!equals(this.ic_1, tmp0_other_with_cast.ic_1))
      return false;
    return true;
  };
  function collectionSizeOrDefault(_this__u8e3s4, default_0) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.m();
    } else {
      tmp = default_0;
    }
    return tmp;
  }
  function IndexingIterable(iteratorFactory) {
    this.jc_1 = iteratorFactory;
  }
  protoOf(IndexingIterable).j = function () {
    return new IndexingIterator(this.jc_1());
  };
  function collectionSizeOrNull(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.m();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function IndexingIterator(iterator) {
    this.kc_1 = iterator;
    this.lc_1 = 0;
  }
  protoOf(IndexingIterator).k = function () {
    return this.kc_1.k();
  };
  protoOf(IndexingIterator).l = function () {
    var tmp1 = this.lc_1;
    this.lc_1 = tmp1 + 1 | 0;
    return new IndexedValue(checkIndexOverflow(tmp1), this.kc_1.l());
  };
  function getOrImplicitDefault(_this__u8e3s4, key) {
    if (isInterface(_this__u8e3s4, MapWithDefault))
      return _this__u8e3s4.mc(key);
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlin.collections.getOrElseNullable' call
      var value = _this__u8e3s4.x1(key);
      if (value == null && !_this__u8e3s4.v1(key)) {
        throw NoSuchElementException_init_$Create$_0('Key ' + toString_0(key) + ' is missing in the map.');
      } else {
        tmp$ret$0 = (value == null ? true : !(value == null)) ? value : THROW_CCE();
        break $l$block;
      }
    }
    return tmp$ret$0;
  }
  function MapWithDefault() {
  }
  function emptyMap() {
    var tmp = EmptyMap_getInstance();
    return isInterface(tmp, KtMap) ? tmp : THROW_CCE();
  }
  function mapOf_0(pairs) {
    return pairs.length > 0 ? toMap_0(pairs, LinkedHashMap_init_$Create$_0(mapCapacity(pairs.length))) : emptyMap();
  }
  function getValue(_this__u8e3s4, key) {
    return getOrImplicitDefault(_this__u8e3s4, key);
  }
  function toMap(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.m()) {
        case 0:
          tmp = emptyMap();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, KtList)) {
            tmp_0 = _this__u8e3s4.o(0);
          } else {
            tmp_0 = _this__u8e3s4.j().l();
          }

          tmp = mapOf(tmp_0);
          break;
        default:
          tmp = toMap_1(_this__u8e3s4, LinkedHashMap_init_$Create$_0(mapCapacity(_this__u8e3s4.m())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyMap(toMap_1(_this__u8e3s4, LinkedHashMap_init_$Create$()));
  }
  function EmptyMap() {
    EmptyMap_instance = this;
    this.nc_1 = new Long(-888910638, 1920087921);
  }
  protoOf(EmptyMap).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, KtMap) : false) {
      tmp = other.n();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptyMap).hashCode = function () {
    return 0;
  };
  protoOf(EmptyMap).toString = function () {
    return '{}';
  };
  protoOf(EmptyMap).m = function () {
    return 0;
  };
  protoOf(EmptyMap).n = function () {
    return true;
  };
  protoOf(EmptyMap).oc = function (key) {
    return false;
  };
  protoOf(EmptyMap).v1 = function (key) {
    if (!(key == null ? true : !(key == null)))
      return false;
    return this.oc((key == null ? true : !(key == null)) ? key : THROW_CCE());
  };
  protoOf(EmptyMap).pc = function (key) {
    return null;
  };
  protoOf(EmptyMap).x1 = function (key) {
    if (!(key == null ? true : !(key == null)))
      return null;
    return this.pc((key == null ? true : !(key == null)) ? key : THROW_CCE());
  };
  protoOf(EmptyMap).r = function () {
    return EmptySet_getInstance();
  };
  protoOf(EmptyMap).y1 = function () {
    return EmptySet_getInstance();
  };
  protoOf(EmptyMap).z1 = function () {
    return EmptyList_getInstance();
  };
  var EmptyMap_instance;
  function EmptyMap_getInstance() {
    if (EmptyMap_instance == null)
      new EmptyMap();
    return EmptyMap_instance;
  }
  function toMap_0(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll(destination, _this__u8e3s4);
    return destination;
  }
  function toMap_1(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll_0(destination, _this__u8e3s4);
    return destination;
  }
  function optimizeReadOnlyMap(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.m()) {
      case 0:
        tmp = emptyMap();
        break;
      case 1:
        // Inline function 'kotlin.collections.toSingletonMapOrSelf' call

        tmp = _this__u8e3s4;
        break;
      default:
        tmp = _this__u8e3s4;
        break;
    }
    return tmp;
  }
  function putAll(_this__u8e3s4, pairs) {
    var inductionVariable = 0;
    var last = pairs.length;
    while (inductionVariable < last) {
      var tmp1_loop_parameter = pairs[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var key = tmp1_loop_parameter.sc();
      var value = tmp1_loop_parameter.tc();
      _this__u8e3s4.b2(key, value);
    }
  }
  function putAll_0(_this__u8e3s4, pairs) {
    var tmp0_iterator = pairs.j();
    while (tmp0_iterator.k()) {
      var tmp1_loop_parameter = tmp0_iterator.l();
      var key = tmp1_loop_parameter.sc();
      var value = tmp1_loop_parameter.tc();
      _this__u8e3s4.b2(key, value);
    }
  }
  function hashMapOf(pairs) {
    // Inline function 'kotlin.apply' call
    var this_0 = HashMap_init_$Create$_0(mapCapacity(pairs.length));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.hashMapOf.<anonymous>' call
    putAll(this_0, pairs);
    return this_0;
  }
  function removeFirstOrNull(_this__u8e3s4) {
    return _this__u8e3s4.n() ? null : _this__u8e3s4.a2(0);
  }
  function removeLast(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4.n()) {
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    } else {
      tmp = _this__u8e3s4.a2(get_lastIndex_2(_this__u8e3s4));
    }
    return tmp;
  }
  function addAll(_this__u8e3s4, elements) {
    if (isInterface(elements, Collection))
      return _this__u8e3s4.d1(elements);
    else {
      var result = false;
      var tmp1_iterator = elements.j();
      while (tmp1_iterator.k()) {
        var item = tmp1_iterator.l();
        if (_this__u8e3s4.e(item))
          result = true;
      }
      return result;
    }
  }
  function IntIterator() {
  }
  protoOf(IntIterator).l = function () {
    return this.uc();
  };
  function SequenceScope() {
  }
  function iterator(block) {
    var iterator = new SequenceBuilderIterator();
    iterator.zc_1 = createCoroutineUnintercepted(block, iterator, iterator);
    return iterator;
  }
  function nextNotReady($this) {
    if (!$this.k())
      throw NoSuchElementException_init_$Create$();
    else
      return $this.l();
  }
  function exceptionalState($this) {
    switch ($this.wc_1) {
      case 4:
        return NoSuchElementException_init_$Create$();
      case 5:
        return IllegalStateException_init_$Create$_0('Iterator has failed.');
      default:
        return IllegalStateException_init_$Create$_0('Unexpected state of the iterator: ' + $this.wc_1);
    }
  }
  function SequenceBuilderIterator() {
    SequenceScope.call(this);
    this.wc_1 = 0;
    this.xc_1 = null;
    this.yc_1 = null;
    this.zc_1 = null;
  }
  protoOf(SequenceBuilderIterator).k = function () {
    while (true) {
      switch (this.wc_1) {
        case 0:
          break;
        case 1:
          if (ensureNotNull(this.yc_1).k()) {
            this.wc_1 = 2;
            return true;
          } else {
            this.yc_1 = null;
          }

          break;
        case 4:
          return false;
        case 3:
        case 2:
          return true;
        default:
          throw exceptionalState(this);
      }
      this.wc_1 = 5;
      var step = ensureNotNull(this.zc_1);
      this.zc_1 = null;
      // Inline function 'kotlin.coroutines.resume' call
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      step.j8(tmp$ret$0);
    }
  };
  protoOf(SequenceBuilderIterator).l = function () {
    switch (this.wc_1) {
      case 0:
      case 1:
        return nextNotReady(this);
      case 2:
        this.wc_1 = 1;
        return ensureNotNull(this.yc_1).l();
      case 3:
        this.wc_1 = 0;
        var tmp = this.xc_1;
        var result = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
        this.xc_1 = null;
        return result;
      default:
        throw exceptionalState(this);
    }
  };
  protoOf(SequenceBuilderIterator).vc = function (value, $completion) {
    this.xc_1 = value;
    this.wc_1 = 3;
    // Inline function 'kotlin.sequences.SequenceBuilderIterator.yield.<anonymous>' call
    this.zc_1 = $completion;
    return get_COROUTINE_SUSPENDED();
  };
  protoOf(SequenceBuilderIterator).ad = function (result) {
    // Inline function 'kotlin.getOrThrow' call
    throwOnFailure(result);
    var tmp = _Result___get_value__impl__bjfvqg(result);
    (tmp == null ? true : !(tmp == null)) || THROW_CCE();
    this.wc_1 = 4;
  };
  protoOf(SequenceBuilderIterator).j8 = function (result) {
    return this.ad(result);
  };
  protoOf(SequenceBuilderIterator).e8 = function () {
    return EmptyCoroutineContext_getInstance();
  };
  function emptySequence() {
    return EmptySequence_instance;
  }
  function TransformingSequence$iterator$1(this$0) {
    this.cd_1 = this$0;
    this.bd_1 = this$0.dd_1.j();
  }
  protoOf(TransformingSequence$iterator$1).l = function () {
    return this.cd_1.ed_1(this.bd_1.l());
  };
  protoOf(TransformingSequence$iterator$1).k = function () {
    return this.bd_1.k();
  };
  function TransformingSequence(sequence, transformer) {
    this.dd_1 = sequence;
    this.ed_1 = transformer;
  }
  protoOf(TransformingSequence).j = function () {
    return new TransformingSequence$iterator$1(this);
  };
  function EmptySequence() {
  }
  protoOf(EmptySequence).j = function () {
    return EmptyIterator_instance;
  };
  var EmptySequence_instance;
  function EmptySequence_getInstance() {
    return EmptySequence_instance;
  }
  function sequenceOf(elements) {
    return asSequence(elements);
  }
  function setOf_0(elements) {
    return toSet(elements);
  }
  function EmptySet() {
    EmptySet_instance = this;
    this.fd_1 = new Long(1993859828, 793161749);
  }
  protoOf(EmptySet).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, KtSet) : false) {
      tmp = other.n();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptySet).hashCode = function () {
    return 0;
  };
  protoOf(EmptySet).toString = function () {
    return '[]';
  };
  protoOf(EmptySet).m = function () {
    return 0;
  };
  protoOf(EmptySet).n = function () {
    return true;
  };
  protoOf(EmptySet).bc = function (element) {
    return false;
  };
  protoOf(EmptySet).r1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.bc(tmp);
  };
  protoOf(EmptySet).cc = function (elements) {
    return elements.n();
  };
  protoOf(EmptySet).s1 = function (elements) {
    return this.cc(elements);
  };
  protoOf(EmptySet).j = function () {
    return EmptyIterator_instance;
  };
  var EmptySet_instance;
  function EmptySet_getInstance() {
    if (EmptySet_instance == null)
      new EmptySet();
    return EmptySet_instance;
  }
  function emptySet() {
    return EmptySet_getInstance();
  }
  function hashSetOf(elements) {
    return toCollection(elements, HashSet_init_$Create$_1(mapCapacity(elements.length)));
  }
  function Continuation() {
  }
  function resume(_this__u8e3s4, value) {
    // Inline function 'kotlin.Companion.success' call
    var tmp$ret$0 = _Result___init__impl__xyqfz8(value);
    return _this__u8e3s4.j8(tmp$ret$0);
  }
  function resumeWithException(_this__u8e3s4, exception) {
    // Inline function 'kotlin.Companion.failure' call
    var tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(exception));
    return _this__u8e3s4.j8(tmp$ret$0);
  }
  function startCoroutine(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlin.coroutines.resume' call
    var this_0 = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion));
    // Inline function 'kotlin.Companion.success' call
    var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
    this_0.j8(tmp$ret$0);
  }
  function Key() {
  }
  var Key_instance;
  function Key_getInstance() {
    return Key_instance;
  }
  function ContinuationInterceptor() {
  }
  function Element() {
  }
  function CoroutineContext$plus$lambda(acc, element) {
    var removed = acc.kd(element.t1());
    var tmp;
    if (removed === EmptyCoroutineContext_getInstance()) {
      tmp = element;
    } else {
      var interceptor = removed.l8(Key_instance);
      var tmp_0;
      if (interceptor == null) {
        tmp_0 = new CombinedContext(removed, element);
      } else {
        var left = removed.kd(Key_instance);
        tmp_0 = left === EmptyCoroutineContext_getInstance() ? new CombinedContext(element, interceptor) : new CombinedContext(new CombinedContext(left, element), interceptor);
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function CoroutineContext() {
  }
  function EmptyCoroutineContext() {
    EmptyCoroutineContext_instance = this;
    this.nd_1 = new Long(0, 0);
  }
  protoOf(EmptyCoroutineContext).l8 = function (key) {
    return null;
  };
  protoOf(EmptyCoroutineContext).ld = function (initial, operation) {
    return initial;
  };
  protoOf(EmptyCoroutineContext).md = function (context) {
    return context;
  };
  protoOf(EmptyCoroutineContext).kd = function (key) {
    return this;
  };
  protoOf(EmptyCoroutineContext).hashCode = function () {
    return 0;
  };
  protoOf(EmptyCoroutineContext).toString = function () {
    return 'EmptyCoroutineContext';
  };
  var EmptyCoroutineContext_instance;
  function EmptyCoroutineContext_getInstance() {
    if (EmptyCoroutineContext_instance == null)
      new EmptyCoroutineContext();
    return EmptyCoroutineContext_instance;
  }
  function size($this) {
    var cur = $this;
    var size = 2;
    while (true) {
      var tmp = cur.od_1;
      var tmp0_elvis_lhs = tmp instanceof CombinedContext ? tmp : null;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        return size;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      cur = tmp_0;
      size = size + 1 | 0;
    }
  }
  function contains_6($this, element) {
    return equals($this.l8(element.t1()), element);
  }
  function containsAll($this, context) {
    var cur = context;
    while (true) {
      if (!contains_6($this, cur.pd_1))
        return false;
      var next = cur.od_1;
      if (next instanceof CombinedContext) {
        cur = next;
      } else {
        return contains_6($this, isInterface(next, Element) ? next : THROW_CCE());
      }
    }
  }
  function CombinedContext$toString$lambda(acc, element) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(acc) === 0) {
      tmp = toString_1(element);
    } else {
      tmp = acc + ', ' + toString_1(element);
    }
    return tmp;
  }
  function CombinedContext(left, element) {
    this.od_1 = left;
    this.pd_1 = element;
  }
  protoOf(CombinedContext).l8 = function (key) {
    var cur = this;
    while (true) {
      var tmp0_safe_receiver = cur.pd_1.l8(key);
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        return tmp0_safe_receiver;
      }
      var next = cur.od_1;
      if (next instanceof CombinedContext) {
        cur = next;
      } else {
        return next.l8(key);
      }
    }
  };
  protoOf(CombinedContext).ld = function (initial, operation) {
    return operation(this.od_1.ld(initial, operation), this.pd_1);
  };
  protoOf(CombinedContext).kd = function (key) {
    if (this.pd_1.l8(key) == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return this.od_1;
    }
    var newLeft = this.od_1.kd(key);
    return newLeft === this.od_1 ? this : newLeft === EmptyCoroutineContext_getInstance() ? this.pd_1 : new CombinedContext(newLeft, this.pd_1);
  };
  protoOf(CombinedContext).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      if (other instanceof CombinedContext) {
        tmp_1 = size(other) === size(this);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = containsAll(other, this);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(CombinedContext).hashCode = function () {
    return hashCode(this.od_1) + hashCode(this.pd_1) | 0;
  };
  protoOf(CombinedContext).toString = function () {
    return '[' + this.ld('', CombinedContext$toString$lambda) + ']';
  };
  function AbstractCoroutineContextKey(baseKey, safeCast) {
    this.gd_1 = safeCast;
    var tmp = this;
    var tmp_0;
    if (baseKey instanceof AbstractCoroutineContextKey) {
      tmp_0 = baseKey.hd_1;
    } else {
      tmp_0 = baseKey;
    }
    tmp.hd_1 = tmp_0;
  }
  protoOf(AbstractCoroutineContextKey).id = function (element) {
    return this.gd_1(element);
  };
  protoOf(AbstractCoroutineContextKey).jd = function (key) {
    return key === this || this.hd_1 === key;
  };
  function AbstractCoroutineContextElement(key) {
    this.qd_1 = key;
  }
  protoOf(AbstractCoroutineContextElement).t1 = function () {
    return this.qd_1;
  };
  function get_COROUTINE_SUSPENDED() {
    return CoroutineSingletons_COROUTINE_SUSPENDED_getInstance();
  }
  var CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  var CoroutineSingletons_UNDECIDED_instance;
  var CoroutineSingletons_RESUMED_instance;
  var CoroutineSingletons_entriesInitialized;
  function CoroutineSingletons_initEntries() {
    if (CoroutineSingletons_entriesInitialized)
      return Unit_instance;
    CoroutineSingletons_entriesInitialized = true;
    CoroutineSingletons_COROUTINE_SUSPENDED_instance = new CoroutineSingletons('COROUTINE_SUSPENDED', 0);
    CoroutineSingletons_UNDECIDED_instance = new CoroutineSingletons('UNDECIDED', 1);
    CoroutineSingletons_RESUMED_instance = new CoroutineSingletons('RESUMED', 2);
  }
  function CoroutineSingletons(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function CoroutineSingletons_COROUTINE_SUSPENDED_getInstance() {
    CoroutineSingletons_initEntries();
    return CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  }
  function enumEntries(entries) {
    return new EnumEntriesList(entries);
  }
  function EnumEntriesList(entries) {
    AbstractList.call(this);
    this.rd_1 = entries;
  }
  protoOf(EnumEntriesList).m = function () {
    return this.rd_1.length;
  };
  protoOf(EnumEntriesList).o = function (index) {
    Companion_instance_5.l4(index, this.rd_1.length);
    return this.rd_1[index];
  };
  protoOf(EnumEntriesList).sd = function (element) {
    if (element === null)
      return false;
    var target = getOrNull(this.rd_1, element.e2_1);
    return target === element;
  };
  protoOf(EnumEntriesList).r1 = function (element) {
    if (!(element instanceof Enum))
      return false;
    return this.sd(element instanceof Enum ? element : THROW_CCE());
  };
  function getProgressionLastElement(start, end, step) {
    var tmp;
    if (step > 0) {
      tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0;
    } else if (step < 0) {
      tmp = start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;
    } else {
      throw IllegalArgumentException_init_$Create$_0('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo(a, b, c) {
    return mod(mod(a, c) - mod(b, c) | 0, c);
  }
  function mod(a, b) {
    var mod = a % b | 0;
    return mod >= 0 ? mod : mod + b | 0;
  }
  function Default() {
    Default_instance = this;
    Random.call(this);
    this.td_1 = defaultPlatformRandom();
  }
  protoOf(Default).ud = function (bitCount) {
    return this.td_1.ud(bitCount);
  };
  protoOf(Default).uc = function () {
    return this.td_1.uc();
  };
  protoOf(Default).p = function (until) {
    return this.td_1.p(until);
  };
  protoOf(Default).vd = function (from, until) {
    return this.td_1.vd(from, until);
  };
  var Default_instance;
  function Default_getInstance() {
    if (Default_instance == null)
      new Default();
    return Default_instance;
  }
  function Random() {
    Default_getInstance();
  }
  protoOf(Random).uc = function () {
    return this.ud(32);
  };
  protoOf(Random).p = function (until) {
    return this.vd(0, until);
  };
  protoOf(Random).vd = function (from, until) {
    checkRangeBounds(from, until);
    var n = until - from | 0;
    if (n > 0 || n === -2147483648) {
      var tmp;
      if ((n & (-n | 0)) === n) {
        var bitCount = fastLog2(n);
        tmp = this.ud(bitCount);
      } else {
        var v;
        do {
          var bits = this.uc() >>> 1 | 0;
          v = bits % n | 0;
        }
         while (((bits - v | 0) + (n - 1 | 0) | 0) < 0);
        tmp = v;
      }
      var rnd = tmp;
      return from + rnd | 0;
    } else {
      while (true) {
        var rnd_0 = this.uc();
        if (from <= rnd_0 ? rnd_0 < until : false)
          return rnd_0;
      }
    }
  };
  function checkRangeBounds(from, until) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!(until > from)) {
      // Inline function 'kotlin.random.checkRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(from, until);
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function fastLog2(value) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    return 31 - clz32(value) | 0;
  }
  function boundsErrorMessage(from, until) {
    return 'Random range is empty: [' + toString_1(from) + ', ' + toString_1(until) + ').';
  }
  function Random_0(seed) {
    return XorWowRandom_init_$Create$(seed, seed >> 31);
  }
  function takeUpperBits(_this__u8e3s4, bitCount) {
    return (_this__u8e3s4 >>> (32 - bitCount | 0) | 0) & (-bitCount | 0) >> 31;
  }
  function XorWowRandom_init_$Init$(seed1, seed2, $this) {
    XorWowRandom.call($this, seed1, seed2, 0, 0, ~seed1, seed1 << 10 ^ (seed2 >>> 4 | 0));
    return $this;
  }
  function XorWowRandom_init_$Create$(seed1, seed2) {
    return XorWowRandom_init_$Init$(seed1, seed2, objectCreate(protoOf(XorWowRandom)));
  }
  function Companion_9() {
    Companion_instance_9 = this;
    this.wd_1 = new Long(0, 0);
  }
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function XorWowRandom(x, y, z, w, v, addend) {
    Companion_getInstance_9();
    Random.call(this);
    this.xd_1 = x;
    this.yd_1 = y;
    this.zd_1 = z;
    this.ae_1 = w;
    this.be_1 = v;
    this.ce_1 = addend;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!((this.xd_1 | this.yd_1 | this.zd_1 | this.ae_1 | this.be_1) === 0)) {
      // Inline function 'kotlin.random.XorWowRandom.<anonymous>' call
      var message = 'Initial state must have at least one non-zero element.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < 64)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.random.XorWowRandom.<anonymous>' call
        this.uc();
      }
       while (inductionVariable < 64);
  }
  protoOf(XorWowRandom).uc = function () {
    var t = this.xd_1;
    t = t ^ (t >>> 2 | 0);
    this.xd_1 = this.yd_1;
    this.yd_1 = this.zd_1;
    this.zd_1 = this.ae_1;
    var v0 = this.be_1;
    this.ae_1 = v0;
    t = t ^ t << 1 ^ v0 ^ v0 << 4;
    this.be_1 = t;
    this.ce_1 = this.ce_1 + 362437 | 0;
    return t + this.ce_1 | 0;
  };
  protoOf(XorWowRandom).ud = function (bitCount) {
    return takeUpperBits(this.uc(), bitCount);
  };
  function Companion_10() {
    Companion_instance_10 = this;
    this.s_1 = new IntRange(1, 0);
  }
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function IntRange(start, endInclusive) {
    Companion_getInstance_10();
    IntProgression.call(this, start, endInclusive, 1);
  }
  protoOf(IntRange).ge = function () {
    return this.t_1;
  };
  protoOf(IntRange).he = function () {
    return this.u_1;
  };
  protoOf(IntRange).ie = function (value) {
    return this.t_1 <= value && value <= this.u_1;
  };
  protoOf(IntRange).a1 = function (value) {
    return this.ie(typeof value === 'number' ? value : THROW_CCE());
  };
  protoOf(IntRange).n = function () {
    return this.t_1 > this.u_1;
  };
  protoOf(IntRange).equals = function (other) {
    var tmp;
    if (other instanceof IntRange) {
      tmp = this.n() && other.n() || (this.t_1 === other.t_1 && this.u_1 === other.u_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IntRange).hashCode = function () {
    return this.n() ? -1 : imul(31, this.t_1) + this.u_1 | 0;
  };
  protoOf(IntRange).toString = function () {
    return '' + this.t_1 + '..' + this.u_1;
  };
  function IntProgressionIterator(first, last, step) {
    IntIterator.call(this);
    this.je_1 = step;
    this.ke_1 = last;
    this.le_1 = this.je_1 > 0 ? first <= last : first >= last;
    this.me_1 = this.le_1 ? first : this.ke_1;
  }
  protoOf(IntProgressionIterator).k = function () {
    return this.le_1;
  };
  protoOf(IntProgressionIterator).uc = function () {
    var value = this.me_1;
    if (value === this.ke_1) {
      if (!this.le_1)
        throw NoSuchElementException_init_$Create$();
      this.le_1 = false;
    } else {
      this.me_1 = this.me_1 + this.je_1 | 0;
    }
    return value;
  };
  function Companion_11() {
  }
  protoOf(Companion_11).w = function (rangeStart, rangeEnd, step) {
    return new IntProgression(rangeStart, rangeEnd, step);
  };
  var Companion_instance_11;
  function Companion_getInstance_11() {
    return Companion_instance_11;
  }
  function IntProgression(start, endInclusive, step) {
    if (step === 0)
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step === -2147483648)
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.t_1 = start;
    this.u_1 = getProgressionLastElement(start, endInclusive, step);
    this.v_1 = step;
  }
  protoOf(IntProgression).j = function () {
    return new IntProgressionIterator(this.t_1, this.u_1, this.v_1);
  };
  protoOf(IntProgression).n = function () {
    return this.v_1 > 0 ? this.t_1 > this.u_1 : this.t_1 < this.u_1;
  };
  protoOf(IntProgression).equals = function (other) {
    var tmp;
    if (other instanceof IntProgression) {
      tmp = this.n() && other.n() || (this.t_1 === other.t_1 && this.u_1 === other.u_1 && this.v_1 === other.v_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IntProgression).hashCode = function () {
    return this.n() ? -1 : imul(31, imul(31, this.t_1) + this.u_1 | 0) + this.v_1 | 0;
  };
  protoOf(IntProgression).toString = function () {
    return this.v_1 > 0 ? '' + this.t_1 + '..' + this.u_1 + ' step ' + this.v_1 : '' + this.t_1 + ' downTo ' + this.u_1 + ' step ' + (-this.v_1 | 0);
  };
  function ClosedRange() {
  }
  function checkStepIsPositive(isPositive, step) {
    if (!isPositive)
      throw IllegalArgumentException_init_$Create$_0('Step must be positive, was: ' + toString_1(step) + '.');
  }
  function KTypeParameter() {
  }
  function appendElement(_this__u8e3s4, element, transform) {
    if (!(transform == null)) {
      _this__u8e3s4.d(transform(element));
    } else {
      if (element == null ? true : isCharSequence(element)) {
        _this__u8e3s4.d(element);
      } else {
        if (element instanceof Char) {
          _this__u8e3s4.e7(element.e1_1);
        } else {
          _this__u8e3s4.d(toString_0(element));
        }
      }
    }
  }
  function equals_1(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (_this__u8e3s4 === other)
      return true;
    if (!ignoreCase)
      return false;
    var thisUpper = uppercaseChar(_this__u8e3s4);
    var otherUpper = uppercaseChar(other);
    var tmp;
    if (thisUpper === otherUpper) {
      tmp = true;
    } else {
      // Inline function 'kotlin.text.lowercaseChar' call
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = toString(thisUpper).toLowerCase();
      var tmp_0 = charSequenceGet(tmp$ret$2, 0);
      // Inline function 'kotlin.text.lowercaseChar' call
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$6 = toString(otherUpper).toLowerCase();
      tmp = tmp_0 === charSequenceGet(tmp$ret$6, 0);
    }
    return tmp;
  }
  function get_BYTE_TO_LOWER_CASE_HEX_DIGITS() {
    _init_properties_HexExtensions_kt__wu8rc3();
    return BYTE_TO_LOWER_CASE_HEX_DIGITS;
  }
  var BYTE_TO_LOWER_CASE_HEX_DIGITS;
  var BYTE_TO_UPPER_CASE_HEX_DIGITS;
  var HEX_DIGITS_TO_DECIMAL;
  function get_HEX_DIGITS_TO_LONG_DECIMAL() {
    _init_properties_HexExtensions_kt__wu8rc3();
    return HEX_DIGITS_TO_LONG_DECIMAL;
  }
  var HEX_DIGITS_TO_LONG_DECIMAL;
  function hexToLong(_this__u8e3s4, startIndex, endIndex, format) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    endIndex = endIndex === VOID ? _this__u8e3s4.length : endIndex;
    format = format === VOID ? Companion_getInstance_14().ne_1 : format;
    _init_properties_HexExtensions_kt__wu8rc3();
    return hexToLongImpl(_this__u8e3s4, startIndex, endIndex, format, 16);
  }
  function hexToLongImpl(_this__u8e3s4, startIndex, endIndex, format, typeHexLength) {
    _init_properties_HexExtensions_kt__wu8rc3();
    Companion_instance_5.wa(startIndex, endIndex, _this__u8e3s4.length);
    var numberFormat = format.re_1;
    if (numberFormat.we_1) {
      checkNumberOfDigits(_this__u8e3s4, startIndex, endIndex, typeHexLength);
      return parseLong(_this__u8e3s4, startIndex, endIndex);
    }
    var prefix = numberFormat.se_1;
    var suffix = numberFormat.te_1;
    checkPrefixSuffixNumberOfDigits(_this__u8e3s4, startIndex, endIndex, prefix, suffix, numberFormat.ye_1, typeHexLength);
    return parseLong(_this__u8e3s4, startIndex + prefix.length | 0, endIndex - suffix.length | 0);
  }
  function checkNumberOfDigits(_this__u8e3s4, startIndex, endIndex, typeHexLength) {
    _init_properties_HexExtensions_kt__wu8rc3();
    var digits = endIndex - startIndex | 0;
    if (digits < 1) {
      throwInvalidNumberOfDigits(_this__u8e3s4, startIndex, endIndex, 'at least', 1);
    } else if (digits > typeHexLength) {
      checkZeroDigits(_this__u8e3s4, startIndex, (startIndex + digits | 0) - typeHexLength | 0);
    }
  }
  function parseLong(_this__u8e3s4, startIndex, endIndex) {
    _init_properties_HexExtensions_kt__wu8rc3();
    var result = new Long(0, 0);
    var inductionVariable = startIndex;
    if (inductionVariable < endIndex)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = result.r2(4);
        var tmp$ret$1;
        $l$block: {
          // Inline function 'kotlin.text.longDecimalFromHexDigitAt' call
          // Inline function 'kotlin.code' call
          var this_0 = charSequenceGet(_this__u8e3s4, i);
          var code = Char__toInt_impl_vasixd(this_0);
          if ((code >>> 8 | 0) === 0 && _get_HEX_DIGITS_TO_LONG_DECIMAL_$accessor$7lg4o7_q0rk0h()[code].z(new Long(0, 0)) >= 0) {
            tmp$ret$1 = _get_HEX_DIGITS_TO_LONG_DECIMAL_$accessor$7lg4o7_q0rk0h()[code];
            break $l$block;
          }
          throwInvalidDigitAt$accessor$7lg4o7(_this__u8e3s4, i);
        }
        result = tmp.v2(tmp$ret$1);
      }
       while (inductionVariable < endIndex);
    return result;
  }
  function checkPrefixSuffixNumberOfDigits(_this__u8e3s4, startIndex, endIndex, prefix, suffix, ignoreCase, typeHexLength) {
    _init_properties_HexExtensions_kt__wu8rc3();
    if (((endIndex - startIndex | 0) - prefix.length | 0) <= suffix.length) {
      throwInvalidPrefixSuffix(_this__u8e3s4, startIndex, endIndex, prefix, suffix);
    }
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.checkContainsAt' call
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(prefix) === 0) {
        tmp$ret$1 = startIndex;
        break $l$block;
      }
      var inductionVariable = 0;
      var last = charSequenceLength(prefix) - 1 | 0;
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!equals_1(charSequenceGet(prefix, i), charSequenceGet(_this__u8e3s4, startIndex + i | 0), ignoreCase)) {
            throwNotContainedAt$accessor$7lg4o7(_this__u8e3s4, startIndex, endIndex, prefix, 'prefix');
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = startIndex + prefix.length | 0;
    }
    var digitsStartIndex = tmp$ret$1;
    var digitsEndIndex = endIndex - suffix.length | 0;
    $l$block_0: {
      // Inline function 'kotlin.text.checkContainsAt' call
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(suffix) === 0) {
        break $l$block_0;
      }
      var inductionVariable_0 = 0;
      var last_0 = charSequenceLength(suffix) - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var i_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (!equals_1(charSequenceGet(suffix, i_0), charSequenceGet(_this__u8e3s4, digitsEndIndex + i_0 | 0), ignoreCase)) {
            throwNotContainedAt$accessor$7lg4o7(_this__u8e3s4, digitsEndIndex, endIndex, suffix, 'suffix');
          }
        }
         while (inductionVariable_0 <= last_0);
      suffix.length;
    }
    checkNumberOfDigits(_this__u8e3s4, digitsStartIndex, digitsEndIndex, typeHexLength);
  }
  function throwInvalidNumberOfDigits(_this__u8e3s4, startIndex, endIndex, specifier, expected) {
    _init_properties_HexExtensions_kt__wu8rc3();
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    var substring = _this__u8e3s4.substring(startIndex, endIndex);
    throw NumberFormatException_init_$Create$_0('Expected ' + specifier + ' ' + expected + ' hexadecimal digits at index ' + startIndex + ', but was "' + substring + '" of length ' + (endIndex - startIndex | 0));
  }
  function checkZeroDigits(_this__u8e3s4, startIndex, endIndex) {
    _init_properties_HexExtensions_kt__wu8rc3();
    var inductionVariable = startIndex;
    if (inductionVariable < endIndex)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(charSequenceGet(_this__u8e3s4, index) === _Char___init__impl__6a9atx(48))) {
          throw NumberFormatException_init_$Create$_0("Expected the hexadecimal digit '0' at index " + index + ", but was '" + toString(charSequenceGet(_this__u8e3s4, index)) + "'.\n" + "The result won't fit the type being parsed.");
        }
      }
       while (inductionVariable < endIndex);
  }
  function throwInvalidPrefixSuffix(_this__u8e3s4, startIndex, endIndex, prefix, suffix) {
    _init_properties_HexExtensions_kt__wu8rc3();
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    var substring = _this__u8e3s4.substring(startIndex, endIndex);
    throw NumberFormatException_init_$Create$_0('Expected a hexadecimal number with prefix "' + prefix + '" and suffix "' + suffix + '", but was ' + substring);
  }
  function throwInvalidDigitAt(_this__u8e3s4, index) {
    _init_properties_HexExtensions_kt__wu8rc3();
    throw NumberFormatException_init_$Create$_0('Expected a hexadecimal digit at index ' + index + ', but was ' + toString(charSequenceGet(_this__u8e3s4, index)));
  }
  function throwNotContainedAt(_this__u8e3s4, index, endIndex, part, partName) {
    _init_properties_HexExtensions_kt__wu8rc3();
    // Inline function 'kotlin.text.substring' call
    var endIndex_0 = coerceAtMost(index + part.length | 0, endIndex);
    // Inline function 'kotlin.js.asDynamic' call
    var substring = _this__u8e3s4.substring(index, endIndex_0);
    throw NumberFormatException_init_$Create$_0('Expected ' + partName + ' "' + part + '" at index ' + index + ', but was ' + substring);
  }
  function _get_HEX_DIGITS_TO_LONG_DECIMAL_$accessor$7lg4o7_q0rk0h() {
    _init_properties_HexExtensions_kt__wu8rc3();
    return get_HEX_DIGITS_TO_LONG_DECIMAL();
  }
  function throwInvalidDigitAt$accessor$7lg4o7(_this__u8e3s4, index) {
    _init_properties_HexExtensions_kt__wu8rc3();
    throwInvalidDigitAt(_this__u8e3s4, index);
  }
  function throwNotContainedAt$accessor$7lg4o7(_this__u8e3s4, index, endIndex, part, partName) {
    _init_properties_HexExtensions_kt__wu8rc3();
    return throwNotContainedAt(_this__u8e3s4, index, endIndex, part, partName);
  }
  var properties_initialized_HexExtensions_kt_h16sbl;
  function _init_properties_HexExtensions_kt__wu8rc3() {
    if (!properties_initialized_HexExtensions_kt_h16sbl) {
      properties_initialized_HexExtensions_kt_h16sbl = true;
      var tmp = 0;
      var tmp_0 = new Int32Array(256);
      while (tmp < 256) {
        var tmp_1 = tmp;
        // Inline function 'kotlin.code' call
        var this_0 = charSequenceGet('0123456789abcdef', tmp_1 >> 4);
        var tmp_2 = Char__toInt_impl_vasixd(this_0) << 8;
        // Inline function 'kotlin.code' call
        var this_1 = charSequenceGet('0123456789abcdef', tmp_1 & 15);
        tmp_0[tmp_1] = tmp_2 | Char__toInt_impl_vasixd(this_1);
        tmp = tmp + 1 | 0;
      }
      BYTE_TO_LOWER_CASE_HEX_DIGITS = tmp_0;
      var tmp_3 = 0;
      var tmp_4 = new Int32Array(256);
      while (tmp_3 < 256) {
        var tmp_5 = tmp_3;
        // Inline function 'kotlin.code' call
        var this_2 = charSequenceGet('0123456789ABCDEF', tmp_5 >> 4);
        var tmp_6 = Char__toInt_impl_vasixd(this_2) << 8;
        // Inline function 'kotlin.code' call
        var this_3 = charSequenceGet('0123456789ABCDEF', tmp_5 & 15);
        tmp_4[tmp_5] = tmp_6 | Char__toInt_impl_vasixd(this_3);
        tmp_3 = tmp_3 + 1 | 0;
      }
      BYTE_TO_UPPER_CASE_HEX_DIGITS = tmp_4;
      // Inline function 'kotlin.apply' call
      var tmp_7 = 0;
      var tmp_8 = new Int32Array(256);
      while (tmp_7 < 256) {
        tmp_8[tmp_7] = -1;
        tmp_7 = tmp_7 + 1 | 0;
      }
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.text.HEX_DIGITS_TO_DECIMAL.<anonymous>' call
      // Inline function 'kotlin.text.forEachIndexed' call
      var index = 0;
      var indexedObject = '0123456789abcdef';
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(indexedObject)) {
        var item = charSequenceGet(indexedObject, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.text.HEX_DIGITS_TO_DECIMAL.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        // Inline function 'kotlin.code' call
        tmp_8[Char__toInt_impl_vasixd(item)] = tmp1;
      }
      // Inline function 'kotlin.text.forEachIndexed' call
      var index_0 = 0;
      var indexedObject_0 = '0123456789ABCDEF';
      var inductionVariable_0 = 0;
      while (inductionVariable_0 < charSequenceLength(indexedObject_0)) {
        var item_0 = charSequenceGet(indexedObject_0, inductionVariable_0);
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        // Inline function 'kotlin.text.HEX_DIGITS_TO_DECIMAL.<anonymous>.<anonymous>' call
        var tmp1_0 = index_0;
        index_0 = tmp1_0 + 1 | 0;
        // Inline function 'kotlin.code' call
        tmp_8[Char__toInt_impl_vasixd(item_0)] = tmp1_0;
      }
      HEX_DIGITS_TO_DECIMAL = tmp_8;
      // Inline function 'kotlin.apply' call
      var tmp_9 = 0;
      var tmp_10 = longArray(256);
      while (tmp_9 < 256) {
        tmp_10[tmp_9] = new Long(-1, -1);
        tmp_9 = tmp_9 + 1 | 0;
      }
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.text.HEX_DIGITS_TO_LONG_DECIMAL.<anonymous>' call
      // Inline function 'kotlin.text.forEachIndexed' call
      var index_1 = 0;
      var indexedObject_1 = '0123456789abcdef';
      var inductionVariable_1 = 0;
      while (inductionVariable_1 < charSequenceLength(indexedObject_1)) {
        var item_1 = charSequenceGet(indexedObject_1, inductionVariable_1);
        inductionVariable_1 = inductionVariable_1 + 1 | 0;
        // Inline function 'kotlin.text.HEX_DIGITS_TO_LONG_DECIMAL.<anonymous>.<anonymous>' call
        var tmp1_1 = index_1;
        index_1 = tmp1_1 + 1 | 0;
        // Inline function 'kotlin.code' call
        tmp_10[Char__toInt_impl_vasixd(item_1)] = toLong(tmp1_1);
      }
      // Inline function 'kotlin.text.forEachIndexed' call
      var index_2 = 0;
      var indexedObject_2 = '0123456789ABCDEF';
      var inductionVariable_2 = 0;
      while (inductionVariable_2 < charSequenceLength(indexedObject_2)) {
        var item_2 = charSequenceGet(indexedObject_2, inductionVariable_2);
        inductionVariable_2 = inductionVariable_2 + 1 | 0;
        // Inline function 'kotlin.text.HEX_DIGITS_TO_LONG_DECIMAL.<anonymous>.<anonymous>' call
        var tmp1_2 = index_2;
        index_2 = tmp1_2 + 1 | 0;
        // Inline function 'kotlin.code' call
        tmp_10[Char__toInt_impl_vasixd(item_2)] = toLong(tmp1_2);
      }
      HEX_DIGITS_TO_LONG_DECIMAL = tmp_10;
    }
  }
  function Companion_12() {
    Companion_instance_12 = this;
    this.ze_1 = new BytesHexFormat(2147483647, 2147483647, '  ', '', '', '');
  }
  var Companion_instance_12;
  function Companion_getInstance_12() {
    if (Companion_instance_12 == null)
      new Companion_12();
    return Companion_instance_12;
  }
  function Companion_13() {
    Companion_instance_13 = this;
    this.af_1 = new NumberHexFormat('', '', false, 1);
  }
  var Companion_instance_13;
  function Companion_getInstance_13() {
    if (Companion_instance_13 == null)
      new Companion_13();
    return Companion_instance_13;
  }
  function BytesHexFormat(bytesPerLine, bytesPerGroup, groupSeparator, byteSeparator, bytePrefix, byteSuffix) {
    Companion_getInstance_12();
    this.bf_1 = bytesPerLine;
    this.cf_1 = bytesPerGroup;
    this.df_1 = groupSeparator;
    this.ef_1 = byteSeparator;
    this.ff_1 = bytePrefix;
    this.gf_1 = byteSuffix;
    this.hf_1 = (this.bf_1 === 2147483647 && this.cf_1 === 2147483647);
    var tmp = this;
    var tmp_0;
    var tmp_1;
    // Inline function 'kotlin.text.isEmpty' call
    var this_0 = this.ff_1;
    if (charSequenceLength(this_0) === 0) {
      // Inline function 'kotlin.text.isEmpty' call
      var this_1 = this.gf_1;
      tmp_1 = charSequenceLength(this_1) === 0;
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = this.ef_1.length <= 1;
    } else {
      tmp_0 = false;
    }
    tmp.if_1 = tmp_0;
    this.jf_1 = isCaseSensitive(this.df_1) || isCaseSensitive(this.ef_1) || isCaseSensitive(this.ff_1) || isCaseSensitive(this.gf_1);
  }
  protoOf(BytesHexFormat).toString = function () {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.BytesHexFormat.toString.<anonymous>' call
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('BytesHexFormat(').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this.kf(this_0, '    ').e7(_Char___init__impl__6a9atx(10));
    this_0.d7(')');
    return this_0.toString();
  };
  protoOf(BytesHexFormat).kf = function (sb, indent) {
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('bytesPerLine = ').ra(this.bf_1).d7(',').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('bytesPerGroup = ').ra(this.cf_1).d7(',').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('groupSeparator = "').d7(this.df_1).d7('",').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('byteSeparator = "').d7(this.ef_1).d7('",').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('bytePrefix = "').d7(this.ff_1).d7('",').e7(_Char___init__impl__6a9atx(10));
    sb.d7(indent).d7('byteSuffix = "').d7(this.gf_1).d7('"');
    return sb;
  };
  function NumberHexFormat(prefix, suffix, removeLeadingZeros, minLength) {
    Companion_getInstance_13();
    this.se_1 = prefix;
    this.te_1 = suffix;
    this.ue_1 = removeLeadingZeros;
    this.ve_1 = minLength;
    var tmp = this;
    var tmp_0;
    // Inline function 'kotlin.text.isEmpty' call
    var this_0 = this.se_1;
    if (charSequenceLength(this_0) === 0) {
      // Inline function 'kotlin.text.isEmpty' call
      var this_1 = this.te_1;
      tmp_0 = charSequenceLength(this_1) === 0;
    } else {
      tmp_0 = false;
    }
    tmp.we_1 = tmp_0;
    this.xe_1 = (this.we_1 && this.ve_1 === 1);
    this.ye_1 = isCaseSensitive(this.se_1) || isCaseSensitive(this.te_1);
  }
  protoOf(NumberHexFormat).toString = function () {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.NumberHexFormat.toString.<anonymous>' call
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('NumberHexFormat(').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this.kf(this_0, '    ').e7(_Char___init__impl__6a9atx(10));
    this_0.d7(')');
    return this_0.toString();
  };
  protoOf(NumberHexFormat).kf = function (sb, indent) {
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('prefix = "').d7(this.se_1).d7('",').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    sb.d7(indent).d7('suffix = "').d7(this.te_1).d7('",').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    var this_0 = sb.d7(indent).d7('removeLeadingZeros = ').qa(this.ue_1);
    var value = _Char___init__impl__6a9atx(44);
    // Inline function 'kotlin.text.appendLine' call
    this_0.e7(value).e7(_Char___init__impl__6a9atx(10));
    sb.d7(indent).d7('minLength = ').ra(this.ve_1);
    return sb;
  };
  function Companion_14() {
    Companion_instance_14 = this;
    this.ne_1 = new HexFormat(false, Companion_getInstance_12().ze_1, Companion_getInstance_13().af_1);
    this.oe_1 = new HexFormat(true, Companion_getInstance_12().ze_1, Companion_getInstance_13().af_1);
  }
  var Companion_instance_14;
  function Companion_getInstance_14() {
    if (Companion_instance_14 == null)
      new Companion_14();
    return Companion_instance_14;
  }
  function HexFormat(upperCase, bytes, number) {
    Companion_getInstance_14();
    this.pe_1 = upperCase;
    this.qe_1 = bytes;
    this.re_1 = number;
  }
  protoOf(HexFormat).toString = function () {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.HexFormat.toString.<anonymous>' call
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('HexFormat(').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('    upperCase = ').qa(this.pe_1).d7(',').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('    bytes = BytesHexFormat(').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this.qe_1.kf(this_0, '        ').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('    ),').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('    number = NumberHexFormat(').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this.re_1.kf(this_0, '        ').e7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.text.appendLine' call
    this_0.d7('    )').e7(_Char___init__impl__6a9atx(10));
    this_0.d7(')');
    return this_0.toString();
  };
  function isCaseSensitive(_this__u8e3s4) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.any' call
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(_this__u8e3s4)) {
        var element = charSequenceGet(_this__u8e3s4, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.text.isCaseSensitive.<anonymous>' call
        if (Char__compareTo_impl_ypi4mb(element, _Char___init__impl__6a9atx(128)) >= 0 || isLetter(element)) {
          tmp$ret$1 = true;
          break $l$block;
        }
      }
      tmp$ret$1 = false;
    }
    return tmp$ret$1;
  }
  function trimIndent(_this__u8e3s4) {
    return replaceIndent(_this__u8e3s4, '');
  }
  function replaceIndent(_this__u8e3s4, newIndent) {
    newIndent = newIndent === VOID ? '' : newIndent;
    var lines_0 = lines(_this__u8e3s4);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var tmp0_iterator = lines_0.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'kotlin.text.isNotBlank' call
      if (!isBlank(element)) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(destination, 10));
    var tmp0_iterator_0 = destination.j();
    while (tmp0_iterator_0.k()) {
      var item = tmp0_iterator_0.l();
      var tmp$ret$3 = indentWidth(item);
      destination_0.e(tmp$ret$3);
    }
    var tmp0_elvis_lhs = minOrNull(destination_0);
    var minCommonIndent = tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs;
    // Inline function 'kotlin.text.reindent' call
    var resultSizeEstimate = _this__u8e3s4.length + imul(newIndent.length, lines_0.m()) | 0;
    var indentAddFunction = getIndentFunction(newIndent);
    var lastIndex = get_lastIndex_2(lines_0);
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var destination_1 = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator_1 = lines_0.j();
    while (tmp0_iterator_1.k()) {
      var item_0 = tmp0_iterator_1.l();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      // Inline function 'kotlin.text.reindent.<anonymous>' call
      var index_0 = checkIndexOverflow(tmp1);
      var tmp;
      if ((index_0 === 0 || index_0 === lastIndex) && isBlank(item_0)) {
        tmp = null;
      } else {
        // Inline function 'kotlin.text.replaceIndent.<anonymous>' call
        var tmp0_safe_receiver = drop(item_0, minCommonIndent);
        var tmp_0;
        if (tmp0_safe_receiver == null) {
          tmp_0 = null;
        } else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          tmp_0 = indentAddFunction(tmp0_safe_receiver);
        }
        var tmp1_elvis_lhs = tmp_0;
        tmp = tmp1_elvis_lhs == null ? item_0 : tmp1_elvis_lhs;
      }
      var tmp0_safe_receiver_0 = tmp;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        destination_1.e(tmp0_safe_receiver_0);
      }
    }
    return joinTo_1(destination_1, StringBuilder_init_$Create$(resultSizeEstimate), '\n').toString();
  }
  function indentWidth(_this__u8e3s4) {
    // Inline function 'kotlin.let' call
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.indexOfFirst' call
      var inductionVariable = 0;
      var last = charSequenceLength(_this__u8e3s4) - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlin.text.indentWidth.<anonymous>' call
          var it = charSequenceGet(_this__u8e3s4, index);
          if (!isWhitespace(it)) {
            tmp$ret$1 = index;
            break $l$block;
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = -1;
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.indentWidth.<anonymous>' call
    var it_0 = tmp$ret$1;
    return it_0 === -1 ? _this__u8e3s4.length : it_0;
  }
  function getIndentFunction(indent) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(indent) === 0) {
      tmp = getIndentFunction$lambda;
    } else {
      tmp = getIndentFunction$lambda_0(indent);
    }
    return tmp;
  }
  function getIndentFunction$lambda(line) {
    return line;
  }
  function getIndentFunction$lambda_0($indent) {
    return function (line) {
      return $indent + line;
    };
  }
  function toIntOrNull(_this__u8e3s4) {
    return toIntOrNull_0(_this__u8e3s4, 10);
  }
  function toLongOrNull(_this__u8e3s4) {
    return toLongOrNull_0(_this__u8e3s4, 10);
  }
  function toIntOrNull_0(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (firstChar === _Char___init__impl__6a9atx(45)) {
        isNegative = true;
        limit = -2147483648;
      } else if (firstChar === _Char___init__impl__6a9atx(43)) {
        isNegative = false;
        limit = -2147483647;
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      limit = -2147483647;
    }
    var limitForMaxRadix = -59652323;
    var limitBeforeMul = limitForMaxRadix;
    var result = 0;
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result < limitBeforeMul) {
          if (limitBeforeMul === limitForMaxRadix) {
            limitBeforeMul = limit / radix | 0;
            if (result < limitBeforeMul) {
              return null;
            }
          } else {
            return null;
          }
        }
        result = imul(result, radix);
        if (result < (limit + digit | 0))
          return null;
        result = result - digit | 0;
      }
       while (inductionVariable < length);
    return isNegative ? result : -result | 0;
  }
  function toLongOrNull_0(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (firstChar === _Char___init__impl__6a9atx(45)) {
        isNegative = true;
        limit = new Long(0, -2147483648);
      } else if (firstChar === _Char___init__impl__6a9atx(43)) {
        isNegative = false;
        limit = new Long(1, -2147483648);
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      limit = new Long(1, -2147483648);
    }
    // Inline function 'kotlin.Long.div' call
    var limitForMaxRadix = (new Long(1, -2147483648)).n2(toLong(36));
    var limitBeforeMul = limitForMaxRadix;
    var result = new Long(0, 0);
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result.z(limitBeforeMul) < 0) {
          if (limitBeforeMul.equals(limitForMaxRadix)) {
            // Inline function 'kotlin.Long.div' call
            limitBeforeMul = limit.n2(toLong(radix));
            if (result.z(limitBeforeMul) < 0) {
              return null;
            }
          } else {
            return null;
          }
        }
        // Inline function 'kotlin.Long.times' call
        result = result.m2(toLong(radix));
        var tmp = result;
        // Inline function 'kotlin.Long.plus' call
        var tmp$ret$3 = limit.k2(toLong(digit));
        if (tmp.z(tmp$ret$3) < 0)
          return null;
        // Inline function 'kotlin.Long.minus' call
        result = result.l2(toLong(digit));
      }
       while (inductionVariable < length);
    return isNegative ? result : result.p2();
  }
  function numberFormatError(input) {
    throw NumberFormatException_init_$Create$_0("Invalid number format: '" + input + "'");
  }
  function padStart(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    return toString_1(padStart_0(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE(), length, padChar));
  }
  function split(_this__u8e3s4, delimiters, ignoreCase, limit) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    if (delimiters.length === 1) {
      var delimiter = delimiters[0];
      // Inline function 'kotlin.text.isEmpty' call
      if (!(charSequenceLength(delimiter) === 0)) {
        return split_0(_this__u8e3s4, delimiter, ignoreCase, limit);
      }
    }
    // Inline function 'kotlin.collections.map' call
    var this_0 = asIterable(rangesDelimitedBy(_this__u8e3s4, delimiters, VOID, ignoreCase, limit));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.j();
    while (tmp0_iterator.k()) {
      var item = tmp0_iterator.l();
      // Inline function 'kotlin.text.split.<anonymous>' call
      var tmp$ret$1 = substring(_this__u8e3s4, item);
      destination.e(tmp$ret$1);
    }
    return destination;
  }
  function startsWith_0(_this__u8e3s4, char, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return charSequenceLength(_this__u8e3s4) > 0 && equals_1(charSequenceGet(_this__u8e3s4, 0), char, ignoreCase);
  }
  function contains_7(_this__u8e3s4, char, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return indexOf_4(_this__u8e3s4, char, VOID, ignoreCase) >= 0;
  }
  function indexOf_4(_this__u8e3s4, char, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      // Inline function 'kotlin.charArrayOf' call
      var tmp$ret$0 = charArrayOf([char]);
      tmp = indexOfAny(_this__u8e3s4, tmp$ret$0, startIndex, ignoreCase);
    } else {
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.text.nativeIndexOf' call
      var str = toString(char);
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.indexOf(str, startIndex);
    }
    return tmp;
  }
  function get_lastIndex_3(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) - 1 | 0;
  }
  function isBlank(_this__u8e3s4) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.all' call
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(_this__u8e3s4)) {
        var element = charSequenceGet(_this__u8e3s4, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.text.isBlank.<anonymous>' call
        if (!isWhitespace(element)) {
          tmp$ret$1 = false;
          break $l$block;
        }
      }
      tmp$ret$1 = true;
    }
    return tmp$ret$1;
  }
  function padStart_0(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    if (length < 0)
      throw IllegalArgumentException_init_$Create$_0('Desired length ' + length + ' is less than zero.');
    if (length <= charSequenceLength(_this__u8e3s4))
      return charSequenceSubSequence(_this__u8e3s4, 0, charSequenceLength(_this__u8e3s4));
    var sb = StringBuilder_init_$Create$(length);
    var inductionVariable = 1;
    var last = length - charSequenceLength(_this__u8e3s4) | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        sb.e7(padChar);
      }
       while (!(i === last));
    sb.d(_this__u8e3s4);
    return sb;
  }
  function split_0(_this__u8e3s4, delimiter, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var currentOffset = 0;
    var nextIndex = indexOf_5(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    if (nextIndex === -1 || limit === 1) {
      return listOf(toString_1(_this__u8e3s4));
    }
    var isLimited = limit > 0;
    var result = ArrayList_init_$Create$_0(isLimited ? coerceAtMost(limit, 10) : 10);
    $l$loop: do {
      // Inline function 'kotlin.text.substring' call
      var startIndex = currentOffset;
      var endIndex = nextIndex;
      var tmp$ret$0 = toString_1(charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex));
      result.e(tmp$ret$0);
      currentOffset = nextIndex + delimiter.length | 0;
      if (isLimited && result.m() === (limit - 1 | 0))
        break $l$loop;
      nextIndex = indexOf_5(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    }
     while (!(nextIndex === -1));
    // Inline function 'kotlin.text.substring' call
    var startIndex_0 = currentOffset;
    var endIndex_0 = charSequenceLength(_this__u8e3s4);
    var tmp$ret$1 = toString_1(charSequenceSubSequence(_this__u8e3s4, startIndex_0, endIndex_0));
    result.e(tmp$ret$1);
    return result;
  }
  function substring(_this__u8e3s4, range) {
    return toString_1(charSequenceSubSequence(_this__u8e3s4, range.ge(), range.he() + 1 | 0));
  }
  function rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    requireNonNegativeLimit(limit);
    var delimitersList = asList(delimiters);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda(delimitersList, ignoreCase));
  }
  function indexOfAny(_this__u8e3s4, chars, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    if (!ignoreCase && chars.length === 1) {
      tmp = typeof _this__u8e3s4 === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var char = single(chars);
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.text.nativeIndexOf' call
      var str = toString(char);
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.indexOf(str, startIndex);
    }
    var inductionVariable = coerceAtLeast(startIndex, 0);
    var last = get_lastIndex_3(_this__u8e3s4);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var charAtIndex = charSequenceGet(_this__u8e3s4, index);
        var tmp$ret$4;
        $l$block: {
          // Inline function 'kotlin.collections.any' call
          var inductionVariable_0 = 0;
          var last_0 = chars.length;
          while (inductionVariable_0 < last_0) {
            var element = chars[inductionVariable_0];
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.text.indexOfAny.<anonymous>' call
            if (equals_1(element, charAtIndex, ignoreCase)) {
              tmp$ret$4 = true;
              break $l$block;
            }
          }
          tmp$ret$4 = false;
        }
        if (tmp$ret$4)
          return index;
      }
       while (!(index === last));
    return -1;
  }
  function requireNonNegativeLimit(limit) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!(limit >= 0)) {
      // Inline function 'kotlin.text.requireNonNegativeLimit.<anonymous>' call
      var message = 'Limit must be non-negative, but was ' + limit;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function indexOf_5(_this__u8e3s4, string, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_6(_this__u8e3s4, string, startIndex, charSequenceLength(_this__u8e3s4), ignoreCase);
    } else {
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.indexOf(string, startIndex);
    }
    return tmp;
  }
  function calcNext($this) {
    if ($this.nf_1 < 0) {
      $this.lf_1 = 0;
      $this.of_1 = null;
    } else {
      var tmp;
      var tmp_0;
      if ($this.qf_1.tf_1 > 0) {
        $this.pf_1 = $this.pf_1 + 1 | 0;
        tmp_0 = $this.pf_1 >= $this.qf_1.tf_1;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = true;
      } else {
        tmp = $this.nf_1 > charSequenceLength($this.qf_1.rf_1);
      }
      if (tmp) {
        $this.of_1 = numberRangeToNumber($this.mf_1, get_lastIndex_3($this.qf_1.rf_1));
        $this.nf_1 = -1;
      } else {
        var match = $this.qf_1.uf_1($this.qf_1.rf_1, $this.nf_1);
        if (match == null) {
          $this.of_1 = numberRangeToNumber($this.mf_1, get_lastIndex_3($this.qf_1.rf_1));
          $this.nf_1 = -1;
        } else {
          var index = match.sc();
          var length = match.tc();
          $this.of_1 = until($this.mf_1, index);
          $this.mf_1 = index + length | 0;
          $this.nf_1 = $this.mf_1 + (length === 0 ? 1 : 0) | 0;
        }
      }
      $this.lf_1 = 1;
    }
  }
  function DelimitedRangesSequence$iterator$1(this$0) {
    this.qf_1 = this$0;
    this.lf_1 = -1;
    this.mf_1 = coerceIn_1(this$0.sf_1, 0, charSequenceLength(this$0.rf_1));
    this.nf_1 = this.mf_1;
    this.of_1 = null;
    this.pf_1 = 0;
  }
  protoOf(DelimitedRangesSequence$iterator$1).l = function () {
    if (this.lf_1 === -1) {
      calcNext(this);
    }
    if (this.lf_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.of_1;
    var result = tmp instanceof IntRange ? tmp : THROW_CCE();
    this.of_1 = null;
    this.lf_1 = -1;
    return result;
  };
  protoOf(DelimitedRangesSequence$iterator$1).k = function () {
    if (this.lf_1 === -1) {
      calcNext(this);
    }
    return this.lf_1 === 1;
  };
  function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {
    this.rf_1 = input;
    this.sf_1 = startIndex;
    this.tf_1 = limit;
    this.uf_1 = getNextMatch;
  }
  protoOf(DelimitedRangesSequence).j = function () {
    return new DelimitedRangesSequence$iterator$1(this);
  };
  function findAnyOf(_this__u8e3s4, strings, startIndex, ignoreCase, last) {
    if (!ignoreCase && strings.m() === 1) {
      var string = single_0(strings);
      var index = !last ? indexOf_5(_this__u8e3s4, string, startIndex) : lastIndexOf(_this__u8e3s4, string, startIndex);
      return index < 0 ? null : to(index, string);
    }
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), charSequenceLength(_this__u8e3s4)) : downTo(coerceAtMost(startIndex, get_lastIndex_3(_this__u8e3s4)), 0);
    if (typeof _this__u8e3s4 === 'string') {
      var inductionVariable = indices.t_1;
      var last_0 = indices.u_1;
      var step = indices.v_1;
      if (step > 0 && inductionVariable <= last_0 || (step < 0 && last_0 <= inductionVariable))
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          var tmp$ret$1;
          $l$block: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator = strings.j();
            while (tmp0_iterator.k()) {
              var element = tmp0_iterator.l();
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              if (regionMatches(element, 0, _this__u8e3s4, index_0, element.length, ignoreCase)) {
                tmp$ret$1 = element;
                break $l$block;
              }
            }
            tmp$ret$1 = null;
          }
          var matchingString = tmp$ret$1;
          if (!(matchingString == null))
            return to(index_0, matchingString);
        }
         while (!(index_0 === last_0));
    } else {
      var inductionVariable_0 = indices.t_1;
      var last_1 = indices.u_1;
      var step_0 = indices.v_1;
      if (step_0 > 0 && inductionVariable_0 <= last_1 || (step_0 < 0 && last_1 <= inductionVariable_0))
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          var tmp$ret$3;
          $l$block_0: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator_0 = strings.j();
            while (tmp0_iterator_0.k()) {
              var element_0 = tmp0_iterator_0.l();
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              if (regionMatchesImpl(element_0, 0, _this__u8e3s4, index_1, element_0.length, ignoreCase)) {
                tmp$ret$3 = element_0;
                break $l$block_0;
              }
            }
            tmp$ret$3 = null;
          }
          var matchingString_0 = tmp$ret$3;
          if (!(matchingString_0 == null))
            return to(index_1, matchingString_0);
        }
         while (!(index_1 === last_1));
    }
    return null;
  }
  function indexOf_6(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {
    last = last === VOID ? false : last;
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4))) : downTo(coerceAtMost(startIndex, get_lastIndex_3(_this__u8e3s4)), coerceAtLeast(endIndex, 0));
    var tmp;
    if (typeof _this__u8e3s4 === 'string') {
      tmp = typeof other === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var inductionVariable = indices.t_1;
      var last_0 = indices.u_1;
      var step = indices.v_1;
      if (step > 0 && inductionVariable <= last_0 || (step < 0 && last_0 <= inductionVariable))
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          if (regionMatches(other, 0, _this__u8e3s4, index, charSequenceLength(other), ignoreCase))
            return index;
        }
         while (!(index === last_0));
    } else {
      var inductionVariable_0 = indices.t_1;
      var last_1 = indices.u_1;
      var step_0 = indices.v_1;
      if (step_0 > 0 && inductionVariable_0 <= last_1 || (step_0 < 0 && last_1 <= inductionVariable_0))
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          if (regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase))
            return index_0;
        }
         while (!(index_0 === last_1));
    }
    return -1;
  }
  function lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? get_lastIndex_3(_this__u8e3s4) : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_6(_this__u8e3s4, string, startIndex, 0, ignoreCase, true);
    } else {
      // Inline function 'kotlin.text.nativeLastIndexOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.lastIndexOf(string, startIndex);
    }
    return tmp;
  }
  function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    if (otherOffset < 0 || thisOffset < 0 || thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0) || otherOffset > (charSequenceLength(other) - length | 0)) {
      return false;
    }
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals_1(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase))
          return false;
      }
       while (inductionVariable < length);
    return true;
  }
  function lines(_this__u8e3s4) {
    return toList_1(lineSequence(_this__u8e3s4));
  }
  function lineSequence(_this__u8e3s4) {
    return splitToSequence(_this__u8e3s4, ['\r\n', '\n', '\r']);
  }
  function splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    var tmp = rangesDelimitedBy(_this__u8e3s4, delimiters, VOID, ignoreCase, limit);
    return map(tmp, splitToSequence$lambda(_this__u8e3s4));
  }
  function removeSuffix(_this__u8e3s4, suffix) {
    if (endsWith_0(_this__u8e3s4, suffix)) {
      // Inline function 'kotlin.text.substring' call
      var endIndex = _this__u8e3s4.length - charSequenceLength(suffix) | 0;
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.substring(0, endIndex);
    }
    return _this__u8e3s4;
  }
  function substringBefore(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_4(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(0, index);
    }
    return tmp;
  }
  function substringAfter(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_4(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      // Inline function 'kotlin.text.substring' call
      var startIndex = index + 1 | 0;
      var endIndex = _this__u8e3s4.length;
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(startIndex, endIndex);
    }
    return tmp;
  }
  function contains_8(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    if (typeof other === 'string') {
      tmp = indexOf_5(_this__u8e3s4, other, VOID, ignoreCase) >= 0;
    } else {
      tmp = indexOf_6(_this__u8e3s4, other, 0, charSequenceLength(_this__u8e3s4), ignoreCase) >= 0;
    }
    return tmp;
  }
  function toBooleanStrictOrNull(_this__u8e3s4) {
    switch (_this__u8e3s4) {
      case 'true':
        return true;
      case 'false':
        return false;
      default:
        return null;
    }
  }
  function endsWith_0(_this__u8e3s4, suffix, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (!ignoreCase) {
      tmp_0 = typeof _this__u8e3s4 === 'string';
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = typeof suffix === 'string';
    } else {
      tmp = false;
    }
    if (tmp)
      return endsWith(_this__u8e3s4, suffix);
    else {
      return regionMatchesImpl(_this__u8e3s4, charSequenceLength(_this__u8e3s4) - charSequenceLength(suffix) | 0, suffix, 0, charSequenceLength(suffix), ignoreCase);
    }
  }
  function rangesDelimitedBy$lambda($delimitersList, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      var tmp0_safe_receiver = findAnyOf($this$$receiver, $delimitersList, currentIndex, $ignoreCase, false);
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
        tmp = to(tmp0_safe_receiver.qc_1, tmp0_safe_receiver.rc_1.length);
      }
      return tmp;
    };
  }
  function splitToSequence$lambda($this_splitToSequence) {
    return function (it) {
      return substring($this_splitToSequence, it);
    };
  }
  function _Duration___init__impl__kdtzql(rawValue) {
    // Inline function 'kotlin.time.durationAssertionsEnabled' call
    if (true) {
      if (isInNanos(rawValue)) {
        var containsArg = _get_value__a43j40_0(rawValue);
        if (!((new Long(387905, -1073741824)).z(containsArg) <= 0 ? containsArg.z(new Long(-387905, 1073741823)) <= 0 : false))
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ns is out of nanoseconds range');
      } else {
        var containsArg_0 = _get_value__a43j40_0(rawValue);
        if (!((new Long(1, -1073741824)).z(containsArg_0) <= 0 ? containsArg_0.z(new Long(-1, 1073741823)) <= 0 : false))
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ms is out of milliseconds range');
        var containsArg_1 = _get_value__a43j40_0(rawValue);
        if ((new Long(1108857478, -1074)).z(containsArg_1) <= 0 ? containsArg_1.z(new Long(-1108857478, 1073)) <= 0 : false)
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ms is denormalized');
      }
    }
    return rawValue;
  }
  function _get_rawValue__5zfu4e($this) {
    return $this;
  }
  function _get_value__a43j40_0($this) {
    return _get_rawValue__5zfu4e($this).s2(1);
  }
  function isInNanos($this) {
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    return (_get_rawValue__5zfu4e($this).b1() & 1) === 0;
  }
  function isInMillis($this) {
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    return (_get_rawValue__5zfu4e($this).b1() & 1) === 1;
  }
  function _get_storageUnit__szjgha($this) {
    return isInNanos($this) ? DurationUnit_NANOSECONDS_getInstance() : DurationUnit_MILLISECONDS_getInstance();
  }
  function Companion_15() {
    Companion_instance_15 = this;
    this.vf_1 = _Duration___init__impl__kdtzql(new Long(0, 0));
    this.wf_1 = durationOfMillis(new Long(-1, 1073741823));
    this.xf_1 = durationOfMillis(new Long(1, -1073741824));
  }
  protoOf(Companion_15).yf = function (value) {
    var tmp;
    try {
      tmp = parseDuration(value, true);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof IllegalArgumentException) {
        var e = $p;
        throw IllegalArgumentException_init_$Create$_1("Invalid ISO duration string format: '" + value + "'.", e);
      } else {
        throw $p;
      }
    }
    return tmp;
  };
  var Companion_instance_15;
  function Companion_getInstance_15() {
    if (Companion_instance_15 == null)
      new Companion_15();
    return Companion_instance_15;
  }
  function Duration__unaryMinus_impl_x2k1y0($this) {
    var tmp = _get_value__a43j40_0($this).p2();
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp$ret$0 = _get_rawValue__5zfu4e($this).b1() & 1;
    return durationOf(tmp, tmp$ret$0);
  }
  function Duration__plus_impl_yu9v8f($this, other) {
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      if (Duration__isFinite_impl_rzjsps(other) || _get_rawValue__5zfu4e($this).w2(_get_rawValue__5zfu4e(other)).z(new Long(0, 0)) >= 0)
        return $this;
      else
        throw IllegalArgumentException_init_$Create$_0('Summing infinite durations of different signs yields an undefined result.');
    } else if (Duration__isInfinite_impl_tsn9y3(other))
      return other;
    var tmp;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp_0 = _get_rawValue__5zfu4e($this).b1() & 1;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    if (tmp_0 === (_get_rawValue__5zfu4e(other).b1() & 1)) {
      var result = _get_value__a43j40_0($this).k2(_get_value__a43j40_0(other));
      tmp = isInNanos($this) ? durationOfNanosNormalized(result) : durationOfMillisNormalized(result);
    } else {
      if (isInMillis($this)) {
        tmp = addValuesMixedRanges($this, _get_value__a43j40_0($this), _get_value__a43j40_0(other));
      } else {
        tmp = addValuesMixedRanges($this, _get_value__a43j40_0(other), _get_value__a43j40_0($this));
      }
    }
    return tmp;
  }
  function addValuesMixedRanges($this, thisMillis, otherNanos) {
    var otherMillis = nanosToMillis(otherNanos);
    var resultMillis = thisMillis.k2(otherMillis);
    var tmp;
    if ((new Long(1108857478, -1074)).z(resultMillis) <= 0 ? resultMillis.z(new Long(-1108857478, 1073)) <= 0 : false) {
      var otherNanoRemainder = otherNanos.l2(millisToNanos(otherMillis));
      tmp = durationOfNanos(millisToNanos(resultMillis).k2(otherNanoRemainder));
    } else {
      tmp = durationOfMillis(coerceIn(resultMillis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function Duration__isNegative_impl_pbysfa($this) {
    return _get_rawValue__5zfu4e($this).z(new Long(0, 0)) < 0;
  }
  function Duration__isInfinite_impl_tsn9y3($this) {
    return _get_rawValue__5zfu4e($this).equals(_get_rawValue__5zfu4e(Companion_getInstance_15().wf_1)) || _get_rawValue__5zfu4e($this).equals(_get_rawValue__5zfu4e(Companion_getInstance_15().xf_1));
  }
  function Duration__isFinite_impl_rzjsps($this) {
    return !Duration__isInfinite_impl_tsn9y3($this);
  }
  function _Duration___get_absoluteValue__impl__vr7i6w($this) {
    return Duration__isNegative_impl_pbysfa($this) ? Duration__unaryMinus_impl_x2k1y0($this) : $this;
  }
  function Duration__compareTo_impl_pchp0f($this, other) {
    var compareBits = _get_rawValue__5zfu4e($this).w2(_get_rawValue__5zfu4e(other));
    if (compareBits.z(new Long(0, 0)) < 0 || (compareBits.b1() & 1) === 0)
      return _get_rawValue__5zfu4e($this).z(_get_rawValue__5zfu4e(other));
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp = _get_rawValue__5zfu4e($this).b1() & 1;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var r = tmp - (_get_rawValue__5zfu4e(other).b1() & 1) | 0;
    return Duration__isNegative_impl_pbysfa($this) ? -r | 0 : r;
  }
  function Duration__compareTo_impl_pchp0f_0($this, other) {
    return Duration__compareTo_impl_pchp0f($this.zf_1, other instanceof Duration ? other.zf_1 : THROW_CCE());
  }
  function _Duration___get_hoursComponent__impl__7hllxa($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeHours__impl__kb9f3j($this).o2(toLong(24)).b1();
    }
    return tmp;
  }
  function _Duration___get_minutesComponent__impl__ctvd8u($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeMinutes__impl__dognoh($this).o2(toLong(60)).b1();
    }
    return tmp;
  }
  function _Duration___get_secondsComponent__impl__if34a6($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeSeconds__impl__hpy7b3($this).o2(toLong(60)).b1();
    }
    return tmp;
  }
  function _Duration___get_nanosecondsComponent__impl__nh19kq($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else if (isInMillis($this)) {
      // Inline function 'kotlin.Long.rem' call
      var tmp$ret$0 = _get_value__a43j40_0($this).o2(toLong(1000));
      tmp = millisToNanos(tmp$ret$0).b1();
    } else {
      // Inline function 'kotlin.Long.rem' call
      var this_0 = _get_value__a43j40_0($this);
      var other = 1000000000;
      tmp = this_0.o2(toLong(other)).b1();
    }
    return tmp;
  }
  function Duration__toLong_impl_shr43i($this, unit) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    return tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_15().wf_1)) ? new Long(-1, 2147483647) : tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_15().xf_1)) ? new Long(0, -2147483648) : convertDurationUnit_0(_get_value__a43j40_0($this), _get_storageUnit__szjgha($this), unit);
  }
  function _Duration___get_inWholeDays__impl__7bvpxz($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_DAYS_getInstance());
  }
  function _Duration___get_inWholeHours__impl__kb9f3j($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_HOURS_getInstance());
  }
  function _Duration___get_inWholeMinutes__impl__dognoh($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_MINUTES_getInstance());
  }
  function _Duration___get_inWholeSeconds__impl__hpy7b3($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_SECONDS_getInstance());
  }
  function Duration__toString_impl_8d916b($this) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    var tmp;
    if (tmp0_subject.equals(new Long(0, 0))) {
      tmp = '0s';
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_15().wf_1))) {
      tmp = 'Infinity';
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_15().xf_1))) {
      tmp = '-Infinity';
    } else {
      var isNegative = Duration__isNegative_impl_pbysfa($this);
      // Inline function 'kotlin.text.buildString' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.apply' call
      var this_0 = StringBuilder_init_$Create$_0();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.time.Duration.toString.<anonymous>' call
      if (isNegative) {
        this_0.e7(_Char___init__impl__6a9atx(45));
      }
      // Inline function 'kotlin.time.Duration.toComponents' call
      var this_1 = _Duration___get_absoluteValue__impl__vr7i6w($this);
      // Inline function 'kotlin.contracts.contract' call
      var days = _Duration___get_inWholeDays__impl__7bvpxz(this_1);
      var hours = _Duration___get_hoursComponent__impl__7hllxa(this_1);
      var minutes = _Duration___get_minutesComponent__impl__ctvd8u(this_1);
      var seconds = _Duration___get_secondsComponent__impl__if34a6(this_1);
      var nanoseconds = _Duration___get_nanosecondsComponent__impl__nh19kq(this_1);
      var hasDays = !days.equals(new Long(0, 0));
      var hasHours = !(hours === 0);
      var hasMinutes = !(minutes === 0);
      var hasSeconds = !(seconds === 0) || !(nanoseconds === 0);
      var components = 0;
      if (hasDays) {
        this_0.sa(days).e7(_Char___init__impl__6a9atx(100));
        components = components + 1 | 0;
      }
      if (hasHours || (hasDays && (hasMinutes || hasSeconds))) {
        var tmp1 = components;
        components = tmp1 + 1 | 0;
        if (tmp1 > 0) {
          this_0.e7(_Char___init__impl__6a9atx(32));
        }
        this_0.ra(hours).e7(_Char___init__impl__6a9atx(104));
      }
      if (hasMinutes || (hasSeconds && (hasHours || hasDays))) {
        var tmp2 = components;
        components = tmp2 + 1 | 0;
        if (tmp2 > 0) {
          this_0.e7(_Char___init__impl__6a9atx(32));
        }
        this_0.ra(minutes).e7(_Char___init__impl__6a9atx(109));
      }
      if (hasSeconds) {
        var tmp3 = components;
        components = tmp3 + 1 | 0;
        if (tmp3 > 0) {
          this_0.e7(_Char___init__impl__6a9atx(32));
        }
        if (!(seconds === 0) || hasDays || hasHours || hasMinutes) {
          appendFractional(this_0, $this, seconds, nanoseconds, 9, 's', false);
        } else if (nanoseconds >= 1000000) {
          appendFractional(this_0, $this, nanoseconds / 1000000 | 0, nanoseconds % 1000000 | 0, 6, 'ms', false);
        } else if (nanoseconds >= 1000) {
          appendFractional(this_0, $this, nanoseconds / 1000 | 0, nanoseconds % 1000 | 0, 3, 'us', false);
        } else {
          this_0.ra(nanoseconds).d7('ns');
        }
      }
      if (isNegative && components > 1) {
        this_0.ta(1, _Char___init__impl__6a9atx(40)).e7(_Char___init__impl__6a9atx(41));
      }
      tmp = this_0.toString();
    }
    return tmp;
  }
  function appendFractional(_this__u8e3s4, $this, whole, fractional, fractionalSize, unit, isoZeroes) {
    _this__u8e3s4.ra(whole);
    if (!(fractional === 0)) {
      _this__u8e3s4.e7(_Char___init__impl__6a9atx(46));
      var fracString = padStart(fractional.toString(), fractionalSize, _Char___init__impl__6a9atx(48));
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.text.indexOfLast' call
        var inductionVariable = charSequenceLength(fracString) - 1 | 0;
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'kotlin.time.Duration.appendFractional.<anonymous>' call
            if (!(charSequenceGet(fracString, index) === _Char___init__impl__6a9atx(48))) {
              tmp$ret$1 = index;
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$1 = -1;
      }
      var nonZeroDigits = tmp$ret$1 + 1 | 0;
      if (!isoZeroes && nonZeroDigits < 3) {
        _this__u8e3s4.pa(fracString, 0, nonZeroDigits);
      } else {
        _this__u8e3s4.pa(fracString, 0, imul((nonZeroDigits + 2 | 0) / 3 | 0, 3));
      }
    }
    _this__u8e3s4.d7(unit);
  }
  function Duration__toIsoString_impl_9h6wsm($this) {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.time.Duration.toIsoString.<anonymous>' call
    if (Duration__isNegative_impl_pbysfa($this)) {
      this_0.e7(_Char___init__impl__6a9atx(45));
    }
    this_0.d7('PT');
    // Inline function 'kotlin.time.Duration.toComponents' call
    var this_1 = _Duration___get_absoluteValue__impl__vr7i6w($this);
    // Inline function 'kotlin.contracts.contract' call
    var hours = _Duration___get_inWholeHours__impl__kb9f3j(this_1);
    var minutes = _Duration___get_minutesComponent__impl__ctvd8u(this_1);
    var seconds = _Duration___get_secondsComponent__impl__if34a6(this_1);
    var nanoseconds = _Duration___get_nanosecondsComponent__impl__nh19kq(this_1);
    var hours_0 = hours;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      hours_0 = new Long(1316134911, 2328);
    }
    var hasHours = !hours_0.equals(new Long(0, 0));
    var hasSeconds = !(seconds === 0) || !(nanoseconds === 0);
    var hasMinutes = !(minutes === 0) || (hasSeconds && hasHours);
    if (hasHours) {
      this_0.sa(hours_0).e7(_Char___init__impl__6a9atx(72));
    }
    if (hasMinutes) {
      this_0.ra(minutes).e7(_Char___init__impl__6a9atx(77));
    }
    if (hasSeconds || (!hasHours && !hasMinutes)) {
      appendFractional(this_0, $this, seconds, nanoseconds, 9, 'S', true);
    }
    return this_0.toString();
  }
  function Duration__hashCode_impl_u4exz6($this) {
    return $this.hashCode();
  }
  function Duration__equals_impl_ygj6w6($this, other) {
    if (!(other instanceof Duration))
      return false;
    var tmp0_other_with_cast = other instanceof Duration ? other.zf_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function Duration(rawValue) {
    Companion_getInstance_15();
    this.zf_1 = rawValue;
  }
  protoOf(Duration).ag = function (other) {
    return Duration__compareTo_impl_pchp0f(this.zf_1, other);
  };
  protoOf(Duration).q1 = function (other) {
    return Duration__compareTo_impl_pchp0f_0(this, other);
  };
  protoOf(Duration).toString = function () {
    return Duration__toString_impl_8d916b(this.zf_1);
  };
  protoOf(Duration).hashCode = function () {
    return Duration__hashCode_impl_u4exz6(this.zf_1);
  };
  protoOf(Duration).equals = function (other) {
    return Duration__equals_impl_ygj6w6(this.zf_1, other);
  };
  function durationOfMillis(normalMillis) {
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = normalMillis.r2(1).k2(toLong(1));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function toDuration(_this__u8e3s4, unit) {
    var maxNsInUnit = convertDurationUnitOverflow(new Long(-387905, 1073741823), DurationUnit_NANOSECONDS_getInstance(), unit);
    if (maxNsInUnit.p2().z(_this__u8e3s4) <= 0 ? _this__u8e3s4.z(maxNsInUnit) <= 0 : false) {
      return durationOfNanos(convertDurationUnitOverflow(_this__u8e3s4, unit, DurationUnit_NANOSECONDS_getInstance()));
    } else {
      var millis = convertDurationUnit_0(_this__u8e3s4, unit, DurationUnit_MILLISECONDS_getInstance());
      return durationOfMillis(coerceIn(millis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
  }
  function toDuration_0(_this__u8e3s4, unit) {
    var valueInNs = convertDurationUnit(_this__u8e3s4, unit, DurationUnit_NANOSECONDS_getInstance());
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isNaN_0(valueInNs)) {
      // Inline function 'kotlin.time.toDuration.<anonymous>' call
      var message = 'Duration value cannot be NaN.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var nanos = roundToLong(valueInNs);
    var tmp;
    if ((new Long(387905, -1073741824)).z(nanos) <= 0 ? nanos.z(new Long(-387905, 1073741823)) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      var millis = roundToLong(convertDurationUnit(_this__u8e3s4, unit, DurationUnit_MILLISECONDS_getInstance()));
      tmp = durationOfMillisNormalized(millis);
    }
    return tmp;
  }
  function parseDuration(value, strictIso) {
    var length = value.length;
    if (length === 0)
      throw IllegalArgumentException_init_$Create$_0('The string is empty');
    var index = 0;
    var result = Companion_getInstance_15().vf_1;
    var infinityString = 'Infinity';
    var tmp0_subject = charSequenceGet(value, index);
    if (tmp0_subject === _Char___init__impl__6a9atx(43) ? true : tmp0_subject === _Char___init__impl__6a9atx(45)) {
      index = index + 1 | 0;
    }
    var hasSign = index > 0;
    var isNegative = hasSign && startsWith_0(value, _Char___init__impl__6a9atx(45));
    if (length <= index)
      throw IllegalArgumentException_init_$Create$_0('No components');
    else {
      if (charSequenceGet(value, index) === _Char___init__impl__6a9atx(80)) {
        index = index + 1 | 0;
        if (index === length)
          throw IllegalArgumentException_init_$Create$();
        var nonDigitSymbols = '+-.';
        var isTimeComponent = false;
        var prevUnit = null;
        $l$loop: while (index < length) {
          if (charSequenceGet(value, index) === _Char___init__impl__6a9atx(84)) {
            var tmp;
            if (isTimeComponent) {
              tmp = true;
            } else {
              index = index + 1 | 0;
              tmp = index === length;
            }
            if (tmp)
              throw IllegalArgumentException_init_$Create$();
            isTimeComponent = true;
            continue $l$loop;
          }
          // Inline function 'kotlin.time.substringWhile' call
          var startIndex = index;
          // Inline function 'kotlin.text.substring' call
          // Inline function 'kotlin.time.skipWhile' call
          var i = startIndex;
          $l$loop_0: while (true) {
            var tmp_0;
            if (i < value.length) {
              // Inline function 'kotlin.time.parseDuration.<anonymous>' call
              var it = charSequenceGet(value, i);
              tmp_0 = (_Char___init__impl__6a9atx(48) <= it ? it <= _Char___init__impl__6a9atx(57) : false) || contains_7(nonDigitSymbols, it);
            } else {
              tmp_0 = false;
            }
            if (!tmp_0) {
              break $l$loop_0;
            }
            i = i + 1 | 0;
          }
          var endIndex = i;
          // Inline function 'kotlin.js.asDynamic' call
          var component = value.substring(startIndex, endIndex);
          // Inline function 'kotlin.text.isEmpty' call
          if (charSequenceLength(component) === 0)
            throw IllegalArgumentException_init_$Create$();
          index = index + component.length | 0;
          // Inline function 'kotlin.text.getOrElse' call
          var index_0 = index;
          // Inline function 'kotlin.contracts.contract' call
          var tmp_1;
          if (0 <= index_0 ? index_0 <= (charSequenceLength(value) - 1 | 0) : false) {
            tmp_1 = charSequenceGet(value, index_0);
          } else {
            throw IllegalArgumentException_init_$Create$_0('Missing unit for value ' + component);
          }
          var unitChar = tmp_1;
          index = index + 1 | 0;
          var unit = durationUnitByIsoChar(unitChar, isTimeComponent);
          if (!(prevUnit == null) && prevUnit.f2(unit) <= 0)
            throw IllegalArgumentException_init_$Create$_0('Unexpected order of duration components');
          prevUnit = unit;
          var dotIndex = indexOf_4(component, _Char___init__impl__6a9atx(46));
          if (unit.equals(DurationUnit_SECONDS_getInstance()) && dotIndex > 0) {
            // Inline function 'kotlin.text.substring' call
            // Inline function 'kotlin.js.asDynamic' call
            var whole = component.substring(0, dotIndex);
            result = Duration__plus_impl_yu9v8f(result, toDuration(parseOverLongIsoComponent(whole), unit));
            var tmp_2 = result;
            // Inline function 'kotlin.text.substring' call
            // Inline function 'kotlin.js.asDynamic' call
            var tmp$ret$10 = component.substring(dotIndex);
            result = Duration__plus_impl_yu9v8f(tmp_2, toDuration_0(toDouble(tmp$ret$10), unit));
          } else {
            result = Duration__plus_impl_yu9v8f(result, toDuration(parseOverLongIsoComponent(component), unit));
          }
        }
      } else {
        if (strictIso)
          throw IllegalArgumentException_init_$Create$();
        else {
          var tmp_3 = index;
          // Inline function 'kotlin.comparisons.maxOf' call
          var a = length - index | 0;
          var b = infinityString.length;
          var tmp$ret$11 = Math.max(a, b);
          if (regionMatches(value, tmp_3, infinityString, 0, tmp$ret$11, true)) {
            result = Companion_getInstance_15().wf_1;
          } else {
            var prevUnit_0 = null;
            var afterFirst = false;
            var allowSpaces = !hasSign;
            if (hasSign && charSequenceGet(value, index) === _Char___init__impl__6a9atx(40) && last_0(value) === _Char___init__impl__6a9atx(41)) {
              allowSpaces = true;
              index = index + 1 | 0;
              var tmp_4 = index;
              length = length - 1 | 0;
              if (tmp_4 === length)
                throw IllegalArgumentException_init_$Create$_0('No components');
            }
            while (index < length) {
              if (afterFirst && allowSpaces) {
                // Inline function 'kotlin.time.skipWhile' call
                var i_0 = index;
                $l$loop_1: while (true) {
                  var tmp_5;
                  if (i_0 < value.length) {
                    // Inline function 'kotlin.time.parseDuration.<anonymous>' call
                    tmp_5 = charSequenceGet(value, i_0) === _Char___init__impl__6a9atx(32);
                  } else {
                    tmp_5 = false;
                  }
                  if (!tmp_5) {
                    break $l$loop_1;
                  }
                  i_0 = i_0 + 1 | 0;
                }
                index = i_0;
              }
              afterFirst = true;
              // Inline function 'kotlin.time.substringWhile' call
              var startIndex_0 = index;
              // Inline function 'kotlin.text.substring' call
              // Inline function 'kotlin.time.skipWhile' call
              var i_1 = startIndex_0;
              $l$loop_2: while (true) {
                var tmp_6;
                if (i_1 < value.length) {
                  // Inline function 'kotlin.time.parseDuration.<anonymous>' call
                  var it_0 = charSequenceGet(value, i_1);
                  tmp_6 = (_Char___init__impl__6a9atx(48) <= it_0 ? it_0 <= _Char___init__impl__6a9atx(57) : false) || it_0 === _Char___init__impl__6a9atx(46);
                } else {
                  tmp_6 = false;
                }
                if (!tmp_6) {
                  break $l$loop_2;
                }
                i_1 = i_1 + 1 | 0;
              }
              var endIndex_0 = i_1;
              // Inline function 'kotlin.js.asDynamic' call
              var component_0 = value.substring(startIndex_0, endIndex_0);
              // Inline function 'kotlin.text.isEmpty' call
              if (charSequenceLength(component_0) === 0)
                throw IllegalArgumentException_init_$Create$();
              index = index + component_0.length | 0;
              // Inline function 'kotlin.time.substringWhile' call
              var startIndex_1 = index;
              // Inline function 'kotlin.text.substring' call
              // Inline function 'kotlin.time.skipWhile' call
              var i_2 = startIndex_1;
              $l$loop_3: while (true) {
                var tmp_7;
                if (i_2 < value.length) {
                  // Inline function 'kotlin.time.parseDuration.<anonymous>' call
                  var it_1 = charSequenceGet(value, i_2);
                  tmp_7 = _Char___init__impl__6a9atx(97) <= it_1 ? it_1 <= _Char___init__impl__6a9atx(122) : false;
                } else {
                  tmp_7 = false;
                }
                if (!tmp_7) {
                  break $l$loop_3;
                }
                i_2 = i_2 + 1 | 0;
              }
              var endIndex_1 = i_2;
              // Inline function 'kotlin.js.asDynamic' call
              var unitName = value.substring(startIndex_1, endIndex_1);
              index = index + unitName.length | 0;
              var unit_0 = durationUnitByShortName(unitName);
              if (!(prevUnit_0 == null) && prevUnit_0.f2(unit_0) <= 0)
                throw IllegalArgumentException_init_$Create$_0('Unexpected order of duration components');
              prevUnit_0 = unit_0;
              var dotIndex_0 = indexOf_4(component_0, _Char___init__impl__6a9atx(46));
              if (dotIndex_0 > 0) {
                // Inline function 'kotlin.text.substring' call
                // Inline function 'kotlin.js.asDynamic' call
                var whole_0 = component_0.substring(0, dotIndex_0);
                result = Duration__plus_impl_yu9v8f(result, toDuration(toLong_0(whole_0), unit_0));
                var tmp_8 = result;
                // Inline function 'kotlin.text.substring' call
                // Inline function 'kotlin.js.asDynamic' call
                var tmp$ret$28 = component_0.substring(dotIndex_0);
                result = Duration__plus_impl_yu9v8f(tmp_8, toDuration_0(toDouble(tmp$ret$28), unit_0));
                if (index < length)
                  throw IllegalArgumentException_init_$Create$_0('Fractional component must be last');
              } else {
                result = Duration__plus_impl_yu9v8f(result, toDuration(toLong_0(component_0), unit_0));
              }
            }
          }
        }
      }
    }
    return isNegative ? Duration__unaryMinus_impl_x2k1y0(result) : result;
  }
  function durationOf(normalValue, unitDiscriminator) {
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = normalValue.r2(1).k2(toLong(unitDiscriminator));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function durationOfNanosNormalized(nanos) {
    var tmp;
    if ((new Long(387905, -1073741824)).z(nanos) <= 0 ? nanos.z(new Long(-387905, 1073741823)) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      tmp = durationOfMillis(nanosToMillis(nanos));
    }
    return tmp;
  }
  function durationOfMillisNormalized(millis) {
    var tmp;
    if ((new Long(1108857478, -1074)).z(millis) <= 0 ? millis.z(new Long(-1108857478, 1073)) <= 0 : false) {
      tmp = durationOfNanos(millisToNanos(millis));
    } else {
      tmp = durationOfMillis(coerceIn(millis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function nanosToMillis(nanos) {
    // Inline function 'kotlin.Long.div' call
    return nanos.n2(toLong(1000000));
  }
  function millisToNanos(millis) {
    // Inline function 'kotlin.Long.times' call
    return millis.m2(toLong(1000000));
  }
  function durationOfNanos(normalNanos) {
    return _Duration___init__impl__kdtzql(normalNanos.r2(1));
  }
  function parseOverLongIsoComponent(value) {
    var length = value.length;
    var startIndex = 0;
    if (length > 0 && contains_7('+-', charSequenceGet(value, 0))) {
      startIndex = startIndex + 1 | 0;
    }
    var tmp;
    if ((length - startIndex | 0) > 16) {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var this_0 = numberRangeToNumber(startIndex, get_lastIndex_3(value));
        var tmp_0;
        if (isInterface(this_0, Collection)) {
          tmp_0 = this_0.n();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.j();
        while (tmp0_iterator.k()) {
          var element = tmp0_iterator.l();
          // Inline function 'kotlin.time.parseOverLongIsoComponent.<anonymous>' call
          var containsArg = charSequenceGet(value, element);
          if (!(_Char___init__impl__6a9atx(48) <= containsArg ? containsArg <= _Char___init__impl__6a9atx(57) : false)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      tmp = tmp$ret$0;
    } else {
      tmp = false;
    }
    if (tmp) {
      return charSequenceGet(value, 0) === _Char___init__impl__6a9atx(45) ? new Long(0, -2147483648) : new Long(-1, 2147483647);
    }
    return startsWith(value, '+') ? toLong_0(drop(value, 1)) : toLong_0(value);
  }
  function durationUnitByIsoChar(isoChar, isTimeComponent) {
    var tmp;
    if (!isTimeComponent) {
      var tmp_0;
      if (isoChar === _Char___init__impl__6a9atx(68)) {
        tmp_0 = DurationUnit_DAYS_getInstance();
      } else {
        throw IllegalArgumentException_init_$Create$_0('Invalid or unsupported duration ISO non-time unit: ' + toString(isoChar));
      }
      tmp = tmp_0;
    } else {
      var tmp_1;
      if (isoChar === _Char___init__impl__6a9atx(72)) {
        tmp_1 = DurationUnit_HOURS_getInstance();
      } else if (isoChar === _Char___init__impl__6a9atx(77)) {
        tmp_1 = DurationUnit_MINUTES_getInstance();
      } else if (isoChar === _Char___init__impl__6a9atx(83)) {
        tmp_1 = DurationUnit_SECONDS_getInstance();
      } else {
        throw IllegalArgumentException_init_$Create$_0('Invalid duration ISO time unit: ' + toString(isoChar));
      }
      tmp = tmp_1;
    }
    return tmp;
  }
  function durationUnitByShortName(shortName) {
    var tmp;
    switch (shortName) {
      case 'ns':
        tmp = DurationUnit_NANOSECONDS_getInstance();
        break;
      case 'us':
        tmp = DurationUnit_MICROSECONDS_getInstance();
        break;
      case 'ms':
        tmp = DurationUnit_MILLISECONDS_getInstance();
        break;
      case 's':
        tmp = DurationUnit_SECONDS_getInstance();
        break;
      case 'm':
        tmp = DurationUnit_MINUTES_getInstance();
        break;
      case 'h':
        tmp = DurationUnit_HOURS_getInstance();
        break;
      case 'd':
        tmp = DurationUnit_DAYS_getInstance();
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('Unknown duration unit short name: ' + shortName);
    }
    return tmp;
  }
  function get_UNDEFINED_RESULT() {
    _init_properties_DeepRecursive_kt__zbwcac();
    return UNDEFINED_RESULT;
  }
  var UNDEFINED_RESULT;
  function DeepRecursiveScope() {
  }
  function invoke(_this__u8e3s4, value) {
    _init_properties_DeepRecursive_kt__zbwcac();
    return (new DeepRecursiveScopeImpl(_this__u8e3s4.cg_1, value)).hg();
  }
  function DeepRecursiveFunction(block) {
    this.cg_1 = block;
  }
  function DeepRecursiveScopeImpl(block, value) {
    DeepRecursiveScope.call(this);
    var tmp = this;
    tmp.dg_1 = isSuspendFunction(block, 2) ? block : THROW_CCE();
    this.eg_1 = value;
    var tmp_0 = this;
    tmp_0.fg_1 = isInterface(this, Continuation) ? this : THROW_CCE();
    this.gg_1 = get_UNDEFINED_RESULT();
  }
  protoOf(DeepRecursiveScopeImpl).e8 = function () {
    return EmptyCoroutineContext_getInstance();
  };
  protoOf(DeepRecursiveScopeImpl).ig = function (result) {
    this.fg_1 = null;
    this.gg_1 = result;
  };
  protoOf(DeepRecursiveScopeImpl).j8 = function (result) {
    return this.ig(result);
  };
  protoOf(DeepRecursiveScopeImpl).bg = function (value, $completion) {
    // Inline function 'kotlin.DeepRecursiveScopeImpl.callRecursive.<anonymous>' call
    var tmp = this;
    tmp.fg_1 = isInterface($completion, Continuation) ? $completion : THROW_CCE();
    this.eg_1 = value;
    return get_COROUTINE_SUSPENDED();
  };
  protoOf(DeepRecursiveScopeImpl).hg = function () {
    $l$loop: while (true) {
      var result = this.gg_1;
      var tmp0_elvis_lhs = this.fg_1;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'kotlin.getOrThrow' call
        var this_0 = new Result(result) instanceof Result ? result : THROW_CCE();
        throwOnFailure(this_0);
        var tmp_0 = _Result___get_value__impl__bjfvqg(this_0);
        return (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var cont = tmp;
      if (equals(get_UNDEFINED_RESULT(), result)) {
        var tmp_1;
        try {
          // Inline function 'kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn' call
          var this_1 = this.dg_1;
          var param = this.eg_1;
          tmp_1 = startCoroutineUninterceptedOrReturnNonGeneratorVersion(this_1, this, param, cont);
        } catch ($p) {
          var tmp_2;
          if ($p instanceof Error) {
            var e = $p;
            // Inline function 'kotlin.coroutines.resumeWithException' call
            // Inline function 'kotlin.Companion.failure' call
            var tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure(e));
            cont.j8(tmp$ret$2);
            continue $l$loop;
          } else {
            throw $p;
          }
        }
        var r = tmp_1;
        if (!(r === get_COROUTINE_SUSPENDED())) {
          // Inline function 'kotlin.coroutines.resume' call
          // Inline function 'kotlin.Companion.success' call
          var value = (r == null ? true : !(r == null)) ? r : THROW_CCE();
          var tmp$ret$4 = _Result___init__impl__xyqfz8(value);
          cont.j8(tmp$ret$4);
        }
      } else {
        this.gg_1 = get_UNDEFINED_RESULT();
        cont.j8(result);
      }
    }
  };
  var properties_initialized_DeepRecursive_kt_5z0al2;
  function _init_properties_DeepRecursive_kt__zbwcac() {
    if (!properties_initialized_DeepRecursive_kt_5z0al2) {
      properties_initialized_DeepRecursive_kt_5z0al2 = true;
      // Inline function 'kotlin.Companion.success' call
      var value = get_COROUTINE_SUSPENDED();
      UNDEFINED_RESULT = _Result___init__impl__xyqfz8(value);
    }
  }
  var LazyThreadSafetyMode_SYNCHRONIZED_instance;
  var LazyThreadSafetyMode_PUBLICATION_instance;
  var LazyThreadSafetyMode_NONE_instance;
  var LazyThreadSafetyMode_entriesInitialized;
  function LazyThreadSafetyMode_initEntries() {
    if (LazyThreadSafetyMode_entriesInitialized)
      return Unit_instance;
    LazyThreadSafetyMode_entriesInitialized = true;
    LazyThreadSafetyMode_SYNCHRONIZED_instance = new LazyThreadSafetyMode('SYNCHRONIZED', 0);
    LazyThreadSafetyMode_PUBLICATION_instance = new LazyThreadSafetyMode('PUBLICATION', 1);
    LazyThreadSafetyMode_NONE_instance = new LazyThreadSafetyMode('NONE', 2);
  }
  function LazyThreadSafetyMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function UnsafeLazyImpl(initializer) {
    this.jg_1 = initializer;
    this.kg_1 = UNINITIALIZED_VALUE_instance;
  }
  protoOf(UnsafeLazyImpl).u1 = function () {
    if (this.kg_1 === UNINITIALIZED_VALUE_instance) {
      this.kg_1 = ensureNotNull(this.jg_1)();
      this.jg_1 = null;
    }
    var tmp = this.kg_1;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(UnsafeLazyImpl).lg = function () {
    return !(this.kg_1 === UNINITIALIZED_VALUE_instance);
  };
  protoOf(UnsafeLazyImpl).toString = function () {
    return this.lg() ? toString_0(this.u1()) : 'Lazy value not initialized yet.';
  };
  function UNINITIALIZED_VALUE() {
  }
  var UNINITIALIZED_VALUE_instance;
  function UNINITIALIZED_VALUE_getInstance() {
    return UNINITIALIZED_VALUE_instance;
  }
  function LazyThreadSafetyMode_PUBLICATION_getInstance() {
    LazyThreadSafetyMode_initEntries();
    return LazyThreadSafetyMode_PUBLICATION_instance;
  }
  function _Result___init__impl__xyqfz8(value) {
    return value;
  }
  function _Result___get_value__impl__bjfvqg($this) {
    return $this;
  }
  function _Result___get_isFailure__impl__jpiriv($this) {
    var tmp = _Result___get_value__impl__bjfvqg($this);
    return tmp instanceof Failure;
  }
  function Result__exceptionOrNull_impl_p6xea9($this) {
    var tmp;
    if (_Result___get_value__impl__bjfvqg($this) instanceof Failure) {
      tmp = _Result___get_value__impl__bjfvqg($this).mg_1;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function Result__toString_impl_yu5r8k($this) {
    var tmp;
    if (_Result___get_value__impl__bjfvqg($this) instanceof Failure) {
      tmp = toString_1(_Result___get_value__impl__bjfvqg($this));
    } else {
      tmp = 'Success(' + toString_0(_Result___get_value__impl__bjfvqg($this)) + ')';
    }
    return tmp;
  }
  function Companion_16() {
  }
  var Companion_instance_16;
  function Companion_getInstance_16() {
    return Companion_instance_16;
  }
  function Failure(exception) {
    this.mg_1 = exception;
  }
  protoOf(Failure).equals = function (other) {
    var tmp;
    if (other instanceof Failure) {
      tmp = equals(this.mg_1, other.mg_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Failure).hashCode = function () {
    return hashCode(this.mg_1);
  };
  protoOf(Failure).toString = function () {
    return 'Failure(' + this.mg_1.toString() + ')';
  };
  function Result__hashCode_impl_d2zufp($this) {
    return $this == null ? 0 : hashCode($this);
  }
  function Result__equals_impl_bxgmep($this, other) {
    if (!(other instanceof Result))
      return false;
    var tmp0_other_with_cast = other instanceof Result ? other.ng_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function Result(value) {
    this.ng_1 = value;
  }
  protoOf(Result).toString = function () {
    return Result__toString_impl_yu5r8k(this.ng_1);
  };
  protoOf(Result).hashCode = function () {
    return Result__hashCode_impl_d2zufp(this.ng_1);
  };
  protoOf(Result).equals = function (other) {
    return Result__equals_impl_bxgmep(this.ng_1, other);
  };
  function createFailure(exception) {
    return new Failure(exception);
  }
  function throwOnFailure(_this__u8e3s4) {
    var tmp = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
    if (tmp instanceof Failure)
      throw _Result___get_value__impl__bjfvqg(_this__u8e3s4).mg_1;
  }
  function NotImplementedError(message) {
    message = message === VOID ? 'An operation is not implemented.' : message;
    Error_init_$Init$_0(message, this);
    captureStack(this, NotImplementedError);
  }
  function Pair(first, second) {
    this.qc_1 = first;
    this.rc_1 = second;
  }
  protoOf(Pair).toString = function () {
    return '(' + toString_0(this.qc_1) + ', ' + toString_0(this.rc_1) + ')';
  };
  protoOf(Pair).sc = function () {
    return this.qc_1;
  };
  protoOf(Pair).tc = function () {
    return this.rc_1;
  };
  protoOf(Pair).hashCode = function () {
    var result = this.qc_1 == null ? 0 : hashCode(this.qc_1);
    result = imul(result, 31) + (this.rc_1 == null ? 0 : hashCode(this.rc_1)) | 0;
    return result;
  };
  protoOf(Pair).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Pair))
      return false;
    var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();
    if (!equals(this.qc_1, tmp0_other_with_cast.qc_1))
      return false;
    if (!equals(this.rc_1, tmp0_other_with_cast.rc_1))
      return false;
    return true;
  };
  function to(_this__u8e3s4, that) {
    return new Pair(_this__u8e3s4, that);
  }
  function Triple(first, second, third) {
    this.og_1 = first;
    this.pg_1 = second;
    this.qg_1 = third;
  }
  protoOf(Triple).toString = function () {
    return '(' + toString_0(this.og_1) + ', ' + toString_0(this.pg_1) + ', ' + toString_0(this.qg_1) + ')';
  };
  protoOf(Triple).hashCode = function () {
    var result = this.og_1 == null ? 0 : hashCode(this.og_1);
    result = imul(result, 31) + (this.pg_1 == null ? 0 : hashCode(this.pg_1)) | 0;
    result = imul(result, 31) + (this.qg_1 == null ? 0 : hashCode(this.qg_1)) | 0;
    return result;
  };
  protoOf(Triple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Triple))
      return false;
    var tmp0_other_with_cast = other instanceof Triple ? other : THROW_CCE();
    if (!equals(this.og_1, tmp0_other_with_cast.og_1))
      return false;
    if (!equals(this.pg_1, tmp0_other_with_cast.pg_1))
      return false;
    if (!equals(this.qg_1, tmp0_other_with_cast.qg_1))
      return false;
    return true;
  };
  function sam$kotlin_Comparator$0_0(function_0) {
    this.rg_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).db = function (a, b) {
    return this.rg_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.db(a, b);
  };
  function Uuid$Companion$LEXICAL_ORDER$lambda(a, b) {
    var tmp;
    if (!a.sg_1.equals(b.sg_1)) {
      // Inline function 'kotlin.ULong.compareTo' call
      // Inline function 'kotlin.toULong' call
      var this_0 = a.sg_1;
      var this_1 = _ULong___init__impl__c78o9k(this_0);
      // Inline function 'kotlin.toULong' call
      var this_2 = b.sg_1;
      var other = _ULong___init__impl__c78o9k(this_2);
      tmp = ulongCompare(_ULong___get_data__impl__fggpzb(this_1), _ULong___get_data__impl__fggpzb(other));
    } else {
      // Inline function 'kotlin.ULong.compareTo' call
      // Inline function 'kotlin.toULong' call
      var this_3 = a.tg_1;
      var this_4 = _ULong___init__impl__c78o9k(this_3);
      // Inline function 'kotlin.toULong' call
      var this_5 = b.tg_1;
      var other_0 = _ULong___init__impl__c78o9k(this_5);
      tmp = ulongCompare(_ULong___get_data__impl__fggpzb(this_4), _ULong___get_data__impl__fggpzb(other_0));
    }
    return tmp;
  }
  function Companion_17() {
    Companion_instance_17 = this;
    this.ug_1 = new Uuid(new Long(0, 0), new Long(0, 0));
    this.vg_1 = 16;
    this.wg_1 = 128;
    var tmp = this;
    var tmp_0 = Uuid$Companion$LEXICAL_ORDER$lambda;
    tmp.xg_1 = new sam$kotlin_Comparator$0_0(tmp_0);
  }
  protoOf(Companion_17).yg = function (mostSignificantBits, leastSignificantBits) {
    var tmp;
    if (mostSignificantBits.equals(new Long(0, 0)) && leastSignificantBits.equals(new Long(0, 0))) {
      tmp = this.ug_1;
    } else {
      tmp = new Uuid(mostSignificantBits, leastSignificantBits);
    }
    return tmp;
  };
  protoOf(Companion_17).zg = function (uuidString) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(uuidString.length === 36)) {
      // Inline function 'kotlin.uuid.Companion.parse.<anonymous>' call
      var message = 'Expected a 36-char string in the standard uuid format.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var part1 = hexToLong(uuidString, 0, 8);
    checkHyphenAt(uuidString, 8);
    var part2 = hexToLong(uuidString, 9, 13);
    checkHyphenAt(uuidString, 13);
    var part3 = hexToLong(uuidString, 14, 18);
    checkHyphenAt(uuidString, 18);
    var part4 = hexToLong(uuidString, 19, 23);
    checkHyphenAt(uuidString, 23);
    var part5 = hexToLong(uuidString, 24, 36);
    var msb = part1.r2(32).v2(part2.r2(16)).v2(part3);
    var lsb = part4.r2(48).v2(part5);
    return this.yg(msb, lsb);
  };
  var Companion_instance_17;
  function Companion_getInstance_17() {
    if (Companion_instance_17 == null)
      new Companion_17();
    return Companion_instance_17;
  }
  function Uuid(mostSignificantBits, leastSignificantBits) {
    Companion_getInstance_17();
    this.sg_1 = mostSignificantBits;
    this.tg_1 = leastSignificantBits;
  }
  protoOf(Uuid).toString = function () {
    var bytes = new Int8Array(36);
    formatBytesInto(this.tg_1, bytes, 24, 6);
    bytes[23] = 45;
    formatBytesInto(this.tg_1.t2(48), bytes, 19, 2);
    bytes[18] = 45;
    formatBytesInto(this.sg_1, bytes, 14, 2);
    bytes[13] = 45;
    formatBytesInto(this.sg_1.t2(16), bytes, 9, 2);
    bytes[8] = 45;
    formatBytesInto(this.sg_1.t2(32), bytes, 0, 4);
    return decodeToString(bytes);
  };
  protoOf(Uuid).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Uuid))
      return false;
    return this.sg_1.equals(other.sg_1) && this.tg_1.equals(other.tg_1);
  };
  protoOf(Uuid).hashCode = function () {
    var x = this.sg_1.w2(this.tg_1);
    return x.s2(32).b1() ^ x.b1();
  };
  function formatBytesInto(_this__u8e3s4, dst, dstOffset, count) {
    var long = _this__u8e3s4;
    var dstIndex = dstOffset + imul(2, count) | 0;
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < count)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.uuid.formatBytesInto.<anonymous>' call
        var byte = long.u2(new Long(255, 0)).b1();
        var byteDigits = get_BYTE_TO_LOWER_CASE_HEX_DIGITS()[byte];
        dstIndex = dstIndex - 1 | 0;
        dst[dstIndex] = toByte(byteDigits);
        dstIndex = dstIndex - 1 | 0;
        dst[dstIndex] = toByte(byteDigits >> 8);
        long = long.s2(8);
      }
       while (inductionVariable < count);
  }
  function checkHyphenAt(_this__u8e3s4, index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(charSequenceGet(_this__u8e3s4, index) === _Char___init__impl__6a9atx(45))) {
      // Inline function 'kotlin.uuid.checkHyphenAt.<anonymous>' call
      var message = "Expected '-' (hyphen) at index 8, but was " + toString(charSequenceGet(_this__u8e3s4, index));
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
  }
  function _UByte___init__impl__g9hnc4(data) {
    return data;
  }
  function _UByte___get_data__impl__jof9qr($this) {
    return $this;
  }
  function Companion_18() {
    Companion_instance_18 = this;
    this.ah_1 = _UByte___init__impl__g9hnc4(0);
    this.bh_1 = _UByte___init__impl__g9hnc4(-1);
    this.ch_1 = 1;
    this.dh_1 = 8;
  }
  var Companion_instance_18;
  function Companion_getInstance_18() {
    if (Companion_instance_18 == null)
      new Companion_18();
    return Companion_instance_18;
  }
  function UByte__compareTo_impl_5w5192($this, other) {
    // Inline function 'kotlin.UByte.toInt' call
    var tmp = _UByte___get_data__impl__jof9qr($this) & 255;
    // Inline function 'kotlin.UByte.toInt' call
    var tmp$ret$1 = _UByte___get_data__impl__jof9qr(other) & 255;
    return compareTo(tmp, tmp$ret$1);
  }
  function UByte__compareTo_impl_5w5192_0($this, other) {
    return UByte__compareTo_impl_5w5192($this.eh_1, other instanceof UByte ? other.eh_1 : THROW_CCE());
  }
  function UByte__toString_impl_v72jg($this) {
    // Inline function 'kotlin.UByte.toInt' call
    return (_UByte___get_data__impl__jof9qr($this) & 255).toString();
  }
  function UByte__hashCode_impl_mmczcb($this) {
    return $this;
  }
  function UByte__equals_impl_nvqtsf($this, other) {
    if (!(other instanceof UByte))
      return false;
    if (!($this === (other instanceof UByte ? other.eh_1 : THROW_CCE())))
      return false;
    return true;
  }
  function UByte(data) {
    Companion_getInstance_18();
    this.eh_1 = data;
  }
  protoOf(UByte).fh = function (other) {
    return UByte__compareTo_impl_5w5192(this.eh_1, other);
  };
  protoOf(UByte).q1 = function (other) {
    return UByte__compareTo_impl_5w5192_0(this, other);
  };
  protoOf(UByte).toString = function () {
    return UByte__toString_impl_v72jg(this.eh_1);
  };
  protoOf(UByte).hashCode = function () {
    return UByte__hashCode_impl_mmczcb(this.eh_1);
  };
  protoOf(UByte).equals = function (other) {
    return UByte__equals_impl_nvqtsf(this.eh_1, other);
  };
  function _UByteArray___init__impl__ip4y9n(storage) {
    return storage;
  }
  function _UByteArray___get_storage__impl__d4kctt($this) {
    return $this;
  }
  function _UByteArray___init__impl__ip4y9n_0(size) {
    return _UByteArray___init__impl__ip4y9n(new Int8Array(size));
  }
  function UByteArray__get_impl_t5f3hv($this, index) {
    // Inline function 'kotlin.toUByte' call
    var this_0 = _UByteArray___get_storage__impl__d4kctt($this)[index];
    return _UByte___init__impl__g9hnc4(this_0);
  }
  function UByteArray__set_impl_jvcicn($this, index, value) {
    var tmp = _UByteArray___get_storage__impl__d4kctt($this);
    // Inline function 'kotlin.UByte.toByte' call
    tmp[index] = _UByte___get_data__impl__jof9qr(value);
  }
  function _UByteArray___get_size__impl__h6pkdv($this) {
    return _UByteArray___get_storage__impl__d4kctt($this).length;
  }
  function UByteArray__iterator_impl_509y1p($this) {
    return new Iterator(_UByteArray___get_storage__impl__d4kctt($this));
  }
  function Iterator(array) {
    this.gh_1 = array;
    this.hh_1 = 0;
  }
  protoOf(Iterator).k = function () {
    return this.hh_1 < this.gh_1.length;
  };
  protoOf(Iterator).ih = function () {
    var tmp;
    if (this.hh_1 < this.gh_1.length) {
      // Inline function 'kotlin.toUByte' call
      var tmp1 = this.hh_1;
      this.hh_1 = tmp1 + 1 | 0;
      var this_0 = this.gh_1[tmp1];
      tmp = _UByte___init__impl__g9hnc4(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.hh_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator).l = function () {
    return new UByte(this.ih());
  };
  function UByteArray__containsAll_impl_v9s6dj($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.UByteArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof UByte) {
          var tmp_1 = _UByteArray___get_storage__impl__d4kctt($this);
          // Inline function 'kotlin.UByte.toByte' call
          var this_1 = element.eh_1;
          var tmp$ret$1 = _UByte___get_data__impl__jof9qr(this_1);
          tmp_0 = contains_3(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function UByteArray__containsAll_impl_v9s6dj_0($this, elements) {
    return UByteArray__containsAll_impl_v9s6dj($this.jh_1, elements);
  }
  function UByteArray__isEmpty_impl_nbfqsa($this) {
    return _UByteArray___get_storage__impl__d4kctt($this).length === 0;
  }
  function UByteArray__toString_impl_ukpl97($this) {
    return 'UByteArray(storage=' + toString_1($this) + ')';
  }
  function UByteArray__hashCode_impl_ip8jx2($this) {
    return hashCode($this);
  }
  function UByteArray__equals_impl_roka4u($this, other) {
    if (!(other instanceof UByteArray))
      return false;
    var tmp0_other_with_cast = other instanceof UByteArray ? other.jh_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function UByteArray(storage) {
    this.jh_1 = storage;
  }
  protoOf(UByteArray).m = function () {
    return _UByteArray___get_size__impl__h6pkdv(this.jh_1);
  };
  protoOf(UByteArray).j = function () {
    return UByteArray__iterator_impl_509y1p(this.jh_1);
  };
  protoOf(UByteArray).kh = function (elements) {
    return UByteArray__containsAll_impl_v9s6dj(this.jh_1, elements);
  };
  protoOf(UByteArray).s1 = function (elements) {
    return UByteArray__containsAll_impl_v9s6dj_0(this, elements);
  };
  protoOf(UByteArray).n = function () {
    return UByteArray__isEmpty_impl_nbfqsa(this.jh_1);
  };
  protoOf(UByteArray).toString = function () {
    return UByteArray__toString_impl_ukpl97(this.jh_1);
  };
  protoOf(UByteArray).hashCode = function () {
    return UByteArray__hashCode_impl_ip8jx2(this.jh_1);
  };
  protoOf(UByteArray).equals = function (other) {
    return UByteArray__equals_impl_roka4u(this.jh_1, other);
  };
  function _UInt___init__impl__l7qpdl(data) {
    return data;
  }
  function _UInt___get_data__impl__f0vqqw($this) {
    return $this;
  }
  function Companion_19() {
    Companion_instance_19 = this;
    this.lh_1 = _UInt___init__impl__l7qpdl(0);
    this.mh_1 = _UInt___init__impl__l7qpdl(-1);
    this.nh_1 = 4;
    this.oh_1 = 32;
  }
  var Companion_instance_19;
  function Companion_getInstance_19() {
    if (Companion_instance_19 == null)
      new Companion_19();
    return Companion_instance_19;
  }
  function UInt__compareTo_impl_yacclj($this, other) {
    return uintCompare(_UInt___get_data__impl__f0vqqw($this), _UInt___get_data__impl__f0vqqw(other));
  }
  function UInt__compareTo_impl_yacclj_0($this, other) {
    return UInt__compareTo_impl_yacclj($this.ph_1, other instanceof UInt ? other.ph_1 : THROW_CCE());
  }
  function UInt__toString_impl_dbgl21($this) {
    // Inline function 'kotlin.uintToString' call
    // Inline function 'kotlin.uintToLong' call
    var value = _UInt___get_data__impl__f0vqqw($this);
    return toLong(value).u2(new Long(-1, 0)).toString();
  }
  function UInt__hashCode_impl_z2mhuw($this) {
    return $this;
  }
  function UInt__equals_impl_ffdoxg($this, other) {
    if (!(other instanceof UInt))
      return false;
    if (!($this === (other instanceof UInt ? other.ph_1 : THROW_CCE())))
      return false;
    return true;
  }
  function UInt(data) {
    Companion_getInstance_19();
    this.ph_1 = data;
  }
  protoOf(UInt).qh = function (other) {
    return UInt__compareTo_impl_yacclj(this.ph_1, other);
  };
  protoOf(UInt).q1 = function (other) {
    return UInt__compareTo_impl_yacclj_0(this, other);
  };
  protoOf(UInt).toString = function () {
    return UInt__toString_impl_dbgl21(this.ph_1);
  };
  protoOf(UInt).hashCode = function () {
    return UInt__hashCode_impl_z2mhuw(this.ph_1);
  };
  protoOf(UInt).equals = function (other) {
    return UInt__equals_impl_ffdoxg(this.ph_1, other);
  };
  function _UIntArray___init__impl__ghjpc6(storage) {
    return storage;
  }
  function _UIntArray___get_storage__impl__92a0v0($this) {
    return $this;
  }
  function _UIntArray___init__impl__ghjpc6_0(size) {
    return _UIntArray___init__impl__ghjpc6(new Int32Array(size));
  }
  function UIntArray__get_impl_gp5kza($this, index) {
    // Inline function 'kotlin.toUInt' call
    var this_0 = _UIntArray___get_storage__impl__92a0v0($this)[index];
    return _UInt___init__impl__l7qpdl(this_0);
  }
  function UIntArray__set_impl_7f2zu2($this, index, value) {
    var tmp = _UIntArray___get_storage__impl__92a0v0($this);
    // Inline function 'kotlin.UInt.toInt' call
    tmp[index] = _UInt___get_data__impl__f0vqqw(value);
  }
  function _UIntArray___get_size__impl__r6l8ci($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length;
  }
  function UIntArray__iterator_impl_tkdv7k($this) {
    return new Iterator_0(_UIntArray___get_storage__impl__92a0v0($this));
  }
  function Iterator_0(array) {
    this.rh_1 = array;
    this.sh_1 = 0;
  }
  protoOf(Iterator_0).k = function () {
    return this.sh_1 < this.rh_1.length;
  };
  protoOf(Iterator_0).th = function () {
    var tmp;
    if (this.sh_1 < this.rh_1.length) {
      // Inline function 'kotlin.toUInt' call
      var tmp1 = this.sh_1;
      this.sh_1 = tmp1 + 1 | 0;
      var this_0 = this.rh_1[tmp1];
      tmp = _UInt___init__impl__l7qpdl(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.sh_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator_0).l = function () {
    return new UInt(this.th());
  };
  function UIntArray__containsAll_impl_414g22($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.UIntArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof UInt) {
          var tmp_1 = _UIntArray___get_storage__impl__92a0v0($this);
          // Inline function 'kotlin.UInt.toInt' call
          var this_1 = element.ph_1;
          var tmp$ret$1 = _UInt___get_data__impl__f0vqqw(this_1);
          tmp_0 = contains_1(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function UIntArray__containsAll_impl_414g22_0($this, elements) {
    return UIntArray__containsAll_impl_414g22($this.uh_1, elements);
  }
  function UIntArray__isEmpty_impl_vd8j4n($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length === 0;
  }
  function UIntArray__toString_impl_3zy802($this) {
    return 'UIntArray(storage=' + toString_1($this) + ')';
  }
  function UIntArray__hashCode_impl_hr7ost($this) {
    return hashCode($this);
  }
  function UIntArray__equals_impl_flcmof($this, other) {
    if (!(other instanceof UIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof UIntArray ? other.uh_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function UIntArray(storage) {
    this.uh_1 = storage;
  }
  protoOf(UIntArray).m = function () {
    return _UIntArray___get_size__impl__r6l8ci(this.uh_1);
  };
  protoOf(UIntArray).j = function () {
    return UIntArray__iterator_impl_tkdv7k(this.uh_1);
  };
  protoOf(UIntArray).vh = function (elements) {
    return UIntArray__containsAll_impl_414g22(this.uh_1, elements);
  };
  protoOf(UIntArray).s1 = function (elements) {
    return UIntArray__containsAll_impl_414g22_0(this, elements);
  };
  protoOf(UIntArray).n = function () {
    return UIntArray__isEmpty_impl_vd8j4n(this.uh_1);
  };
  protoOf(UIntArray).toString = function () {
    return UIntArray__toString_impl_3zy802(this.uh_1);
  };
  protoOf(UIntArray).hashCode = function () {
    return UIntArray__hashCode_impl_hr7ost(this.uh_1);
  };
  protoOf(UIntArray).equals = function (other) {
    return UIntArray__equals_impl_flcmof(this.uh_1, other);
  };
  function _ULong___init__impl__c78o9k(data) {
    return data;
  }
  function _ULong___get_data__impl__fggpzb($this) {
    return $this;
  }
  function Companion_20() {
    Companion_instance_20 = this;
    this.wh_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
    this.xh_1 = _ULong___init__impl__c78o9k(new Long(-1, -1));
    this.yh_1 = 8;
    this.zh_1 = 64;
  }
  var Companion_instance_20;
  function Companion_getInstance_20() {
    if (Companion_instance_20 == null)
      new Companion_20();
    return Companion_instance_20;
  }
  function ULong__compareTo_impl_38i7tu($this, other) {
    return ulongCompare(_ULong___get_data__impl__fggpzb($this), _ULong___get_data__impl__fggpzb(other));
  }
  function ULong__compareTo_impl_38i7tu_0($this, other) {
    return ULong__compareTo_impl_38i7tu($this.ai_1, other instanceof ULong ? other.ai_1 : THROW_CCE());
  }
  function ULong__toString_impl_f9au7k($this) {
    // Inline function 'kotlin.ulongToString' call
    var value = _ULong___get_data__impl__fggpzb($this);
    return ulongToString(value, 10);
  }
  function ULong__hashCode_impl_6hv2lb($this) {
    return $this.hashCode();
  }
  function ULong__equals_impl_o0gnyb($this, other) {
    if (!(other instanceof ULong))
      return false;
    var tmp0_other_with_cast = other instanceof ULong ? other.ai_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULong(data) {
    Companion_getInstance_20();
    this.ai_1 = data;
  }
  protoOf(ULong).bi = function (other) {
    return ULong__compareTo_impl_38i7tu(this.ai_1, other);
  };
  protoOf(ULong).q1 = function (other) {
    return ULong__compareTo_impl_38i7tu_0(this, other);
  };
  protoOf(ULong).toString = function () {
    return ULong__toString_impl_f9au7k(this.ai_1);
  };
  protoOf(ULong).hashCode = function () {
    return ULong__hashCode_impl_6hv2lb(this.ai_1);
  };
  protoOf(ULong).equals = function (other) {
    return ULong__equals_impl_o0gnyb(this.ai_1, other);
  };
  function _ULongArray___init__impl__twm1l3(storage) {
    return storage;
  }
  function _ULongArray___get_storage__impl__28e64j($this) {
    return $this;
  }
  function _ULongArray___init__impl__twm1l3_0(size) {
    return _ULongArray___init__impl__twm1l3(longArray(size));
  }
  function ULongArray__get_impl_pr71q9($this, index) {
    // Inline function 'kotlin.toULong' call
    var this_0 = _ULongArray___get_storage__impl__28e64j($this)[index];
    return _ULong___init__impl__c78o9k(this_0);
  }
  function ULongArray__set_impl_z19mvh($this, index, value) {
    var tmp = _ULongArray___get_storage__impl__28e64j($this);
    // Inline function 'kotlin.ULong.toLong' call
    tmp[index] = _ULong___get_data__impl__fggpzb(value);
  }
  function _ULongArray___get_size__impl__ju6dtr($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length;
  }
  function ULongArray__iterator_impl_cq4d2h($this) {
    return new Iterator_1(_ULongArray___get_storage__impl__28e64j($this));
  }
  function Iterator_1(array) {
    this.ci_1 = array;
    this.di_1 = 0;
  }
  protoOf(Iterator_1).k = function () {
    return this.di_1 < this.ci_1.length;
  };
  protoOf(Iterator_1).ei = function () {
    var tmp;
    if (this.di_1 < this.ci_1.length) {
      // Inline function 'kotlin.toULong' call
      var tmp1 = this.di_1;
      this.di_1 = tmp1 + 1 | 0;
      var this_0 = this.ci_1[tmp1];
      tmp = _ULong___init__impl__c78o9k(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.di_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator_1).l = function () {
    return new ULong(this.ei());
  };
  function ULongArray__containsAll_impl_xx8ztf($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.ULongArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof ULong) {
          var tmp_1 = _ULongArray___get_storage__impl__28e64j($this);
          // Inline function 'kotlin.ULong.toLong' call
          var this_1 = element.ai_1;
          var tmp$ret$1 = _ULong___get_data__impl__fggpzb(this_1);
          tmp_0 = contains_0(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function ULongArray__containsAll_impl_xx8ztf_0($this, elements) {
    return ULongArray__containsAll_impl_xx8ztf($this.fi_1, elements);
  }
  function ULongArray__isEmpty_impl_c3yngu($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length === 0;
  }
  function ULongArray__toString_impl_wqk1p5($this) {
    return 'ULongArray(storage=' + toString_1($this) + ')';
  }
  function ULongArray__hashCode_impl_aze4wa($this) {
    return hashCode($this);
  }
  function ULongArray__equals_impl_vwitwa($this, other) {
    if (!(other instanceof ULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof ULongArray ? other.fi_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULongArray(storage) {
    this.fi_1 = storage;
  }
  protoOf(ULongArray).m = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.fi_1);
  };
  protoOf(ULongArray).j = function () {
    return ULongArray__iterator_impl_cq4d2h(this.fi_1);
  };
  protoOf(ULongArray).gi = function (elements) {
    return ULongArray__containsAll_impl_xx8ztf(this.fi_1, elements);
  };
  protoOf(ULongArray).s1 = function (elements) {
    return ULongArray__containsAll_impl_xx8ztf_0(this, elements);
  };
  protoOf(ULongArray).n = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.fi_1);
  };
  protoOf(ULongArray).toString = function () {
    return ULongArray__toString_impl_wqk1p5(this.fi_1);
  };
  protoOf(ULongArray).hashCode = function () {
    return ULongArray__hashCode_impl_aze4wa(this.fi_1);
  };
  protoOf(ULongArray).equals = function (other) {
    return ULongArray__equals_impl_vwitwa(this.fi_1, other);
  };
  function _UShort___init__impl__jigrne(data) {
    return data;
  }
  function _UShort___get_data__impl__g0245($this) {
    return $this;
  }
  function Companion_21() {
    Companion_instance_21 = this;
    this.hi_1 = _UShort___init__impl__jigrne(0);
    this.ii_1 = _UShort___init__impl__jigrne(-1);
    this.ji_1 = 2;
    this.ki_1 = 16;
  }
  var Companion_instance_21;
  function Companion_getInstance_21() {
    if (Companion_instance_21 == null)
      new Companion_21();
    return Companion_instance_21;
  }
  function UShort__compareTo_impl_1pfgyc($this, other) {
    // Inline function 'kotlin.UShort.toInt' call
    var tmp = _UShort___get_data__impl__g0245($this) & 65535;
    // Inline function 'kotlin.UShort.toInt' call
    var tmp$ret$1 = _UShort___get_data__impl__g0245(other) & 65535;
    return compareTo(tmp, tmp$ret$1);
  }
  function UShort__compareTo_impl_1pfgyc_0($this, other) {
    return UShort__compareTo_impl_1pfgyc($this.li_1, other instanceof UShort ? other.li_1 : THROW_CCE());
  }
  function UShort__toString_impl_edaoee($this) {
    // Inline function 'kotlin.UShort.toInt' call
    return (_UShort___get_data__impl__g0245($this) & 65535).toString();
  }
  function UShort__hashCode_impl_ywngrv($this) {
    return $this;
  }
  function UShort__equals_impl_7t9pdz($this, other) {
    if (!(other instanceof UShort))
      return false;
    if (!($this === (other instanceof UShort ? other.li_1 : THROW_CCE())))
      return false;
    return true;
  }
  function UShort(data) {
    Companion_getInstance_21();
    this.li_1 = data;
  }
  protoOf(UShort).mi = function (other) {
    return UShort__compareTo_impl_1pfgyc(this.li_1, other);
  };
  protoOf(UShort).q1 = function (other) {
    return UShort__compareTo_impl_1pfgyc_0(this, other);
  };
  protoOf(UShort).toString = function () {
    return UShort__toString_impl_edaoee(this.li_1);
  };
  protoOf(UShort).hashCode = function () {
    return UShort__hashCode_impl_ywngrv(this.li_1);
  };
  protoOf(UShort).equals = function (other) {
    return UShort__equals_impl_7t9pdz(this.li_1, other);
  };
  function _UShortArray___init__impl__9b26ef(storage) {
    return storage;
  }
  function _UShortArray___get_storage__impl__t2jpv5($this) {
    return $this;
  }
  function _UShortArray___init__impl__9b26ef_0(size) {
    return _UShortArray___init__impl__9b26ef(new Int16Array(size));
  }
  function UShortArray__get_impl_fnbhmx($this, index) {
    // Inline function 'kotlin.toUShort' call
    var this_0 = _UShortArray___get_storage__impl__t2jpv5($this)[index];
    return _UShort___init__impl__jigrne(this_0);
  }
  function UShortArray__set_impl_6d8whp($this, index, value) {
    var tmp = _UShortArray___get_storage__impl__t2jpv5($this);
    // Inline function 'kotlin.UShort.toShort' call
    tmp[index] = _UShort___get_data__impl__g0245(value);
  }
  function _UShortArray___get_size__impl__jqto1b($this) {
    return _UShortArray___get_storage__impl__t2jpv5($this).length;
  }
  function UShortArray__iterator_impl_ktpenn($this) {
    return new Iterator_2(_UShortArray___get_storage__impl__t2jpv5($this));
  }
  function Iterator_2(array) {
    this.ni_1 = array;
    this.oi_1 = 0;
  }
  protoOf(Iterator_2).k = function () {
    return this.oi_1 < this.ni_1.length;
  };
  protoOf(Iterator_2).pi = function () {
    var tmp;
    if (this.oi_1 < this.ni_1.length) {
      // Inline function 'kotlin.toUShort' call
      var tmp1 = this.oi_1;
      this.oi_1 = tmp1 + 1 | 0;
      var this_0 = this.ni_1[tmp1];
      tmp = _UShort___init__impl__jigrne(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.oi_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator_2).l = function () {
    return new UShort(this.pi());
  };
  function UShortArray__containsAll_impl_vlaaxp($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.n();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlin.UShortArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof UShort) {
          var tmp_1 = _UShortArray___get_storage__impl__t2jpv5($this);
          // Inline function 'kotlin.UShort.toShort' call
          var this_1 = element.li_1;
          var tmp$ret$1 = _UShort___get_data__impl__g0245(this_1);
          tmp_0 = contains_2(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function UShortArray__containsAll_impl_vlaaxp_0($this, elements) {
    return UShortArray__containsAll_impl_vlaaxp($this.qi_1, elements);
  }
  function UShortArray__isEmpty_impl_cdd9l0($this) {
    return _UShortArray___get_storage__impl__t2jpv5($this).length === 0;
  }
  function UShortArray__toString_impl_omz03z($this) {
    return 'UShortArray(storage=' + toString_1($this) + ')';
  }
  function UShortArray__hashCode_impl_2vt3b4($this) {
    return hashCode($this);
  }
  function UShortArray__equals_impl_tyc3mk($this, other) {
    if (!(other instanceof UShortArray))
      return false;
    var tmp0_other_with_cast = other instanceof UShortArray ? other.qi_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function UShortArray(storage) {
    this.qi_1 = storage;
  }
  protoOf(UShortArray).m = function () {
    return _UShortArray___get_size__impl__jqto1b(this.qi_1);
  };
  protoOf(UShortArray).j = function () {
    return UShortArray__iterator_impl_ktpenn(this.qi_1);
  };
  protoOf(UShortArray).ri = function (elements) {
    return UShortArray__containsAll_impl_vlaaxp(this.qi_1, elements);
  };
  protoOf(UShortArray).s1 = function (elements) {
    return UShortArray__containsAll_impl_vlaaxp_0(this, elements);
  };
  protoOf(UShortArray).n = function () {
    return UShortArray__isEmpty_impl_cdd9l0(this.qi_1);
  };
  protoOf(UShortArray).toString = function () {
    return UShortArray__toString_impl_omz03z(this.qi_1);
  };
  protoOf(UShortArray).hashCode = function () {
    return UShortArray__hashCode_impl_2vt3b4(this.qi_1);
  };
  protoOf(UShortArray).equals = function (other) {
    return UShortArray__equals_impl_tyc3mk(this.qi_1, other);
  };
  function toString_5(_this__u8e3s4, radix) {
    // Inline function 'kotlin.UByte.toInt' call
    var tmp$ret$0 = _UByte___get_data__impl__jof9qr(_this__u8e3s4) & 255;
    return toString_2(tmp$ret$0, radix);
  }
  function toUInt(_this__u8e3s4) {
    var tmp0_elvis_lhs = toUIntOrNull(_this__u8e3s4);
    var tmp;
    var tmp_0 = tmp0_elvis_lhs;
    if ((tmp_0 == null ? null : new UInt(tmp_0)) == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toULong(_this__u8e3s4) {
    var tmp0_elvis_lhs = toULongOrNull(_this__u8e3s4);
    var tmp;
    var tmp_0 = tmp0_elvis_lhs;
    if ((tmp_0 == null ? null : new ULong(tmp_0)) == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toUByte(_this__u8e3s4) {
    var tmp0_elvis_lhs = toUByteOrNull(_this__u8e3s4);
    var tmp;
    var tmp_0 = tmp0_elvis_lhs;
    if ((tmp_0 == null ? null : new UByte(tmp_0)) == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toUShort(_this__u8e3s4) {
    var tmp0_elvis_lhs = toUShortOrNull(_this__u8e3s4);
    var tmp;
    var tmp_0 = tmp0_elvis_lhs;
    if ((tmp_0 == null ? null : new UShort(tmp_0)) == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toULongOrNull(_this__u8e3s4) {
    return toULongOrNull_0(_this__u8e3s4, 10);
  }
  function toUIntOrNull(_this__u8e3s4) {
    return toUIntOrNull_0(_this__u8e3s4, 10);
  }
  function toUByteOrNull(_this__u8e3s4) {
    return toUByteOrNull_0(_this__u8e3s4, 10);
  }
  function toUShortOrNull(_this__u8e3s4) {
    return toUShortOrNull_0(_this__u8e3s4, 10);
  }
  function toULongOrNull_0(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var limit = _ULong___init__impl__c78o9k(new Long(-1, -1));
    var start;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1 || !(firstChar === _Char___init__impl__6a9atx(43)))
        return null;
      start = 1;
    } else {
      start = 0;
    }
    var limitForMaxRadix = _ULong___init__impl__c78o9k(new Long(477218588, 119304647));
    var limitBeforeMul = limitForMaxRadix;
    // Inline function 'kotlin.toULong' call
    var uradix = _ULong___init__impl__c78o9k(toLong(radix));
    var result = _ULong___init__impl__c78o9k(new Long(0, 0));
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        // Inline function 'kotlin.ULong.compareTo' call
        var this_0 = result;
        var other = limitBeforeMul;
        if (ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) > 0) {
          if (equals(limitBeforeMul, limitForMaxRadix)) {
            // Inline function 'kotlin.ULong.div' call
            limitBeforeMul = ulongDivide(limit, uradix);
            // Inline function 'kotlin.ULong.compareTo' call
            var this_1 = result;
            var other_0 = limitBeforeMul;
            if (ulongCompare(_ULong___get_data__impl__fggpzb(this_1), _ULong___get_data__impl__fggpzb(other_0)) > 0) {
              return null;
            }
          } else {
            return null;
          }
        }
        // Inline function 'kotlin.ULong.times' call
        var this_2 = result;
        result = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).m2(_ULong___get_data__impl__fggpzb(uradix)));
        var beforeAdding = result;
        // Inline function 'kotlin.ULong.plus' call
        var this_3 = result;
        // Inline function 'kotlin.toUInt' call
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_4 = _UInt___init__impl__l7qpdl(digit);
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value = _UInt___get_data__impl__f0vqqw(this_4);
        var tmp$ret$6 = toLong(value).u2(new Long(-1, 0));
        var other_1 = _ULong___init__impl__c78o9k(tmp$ret$6);
        result = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).k2(_ULong___get_data__impl__fggpzb(other_1)));
        // Inline function 'kotlin.ULong.compareTo' call
        var this_5 = result;
        if (ulongCompare(_ULong___get_data__impl__fggpzb(this_5), _ULong___get_data__impl__fggpzb(beforeAdding)) < 0)
          return null;
      }
       while (inductionVariable < length);
    return result;
  }
  function toUIntOrNull_0(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var limit = _UInt___init__impl__l7qpdl(-1);
    var start;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1 || !(firstChar === _Char___init__impl__6a9atx(43)))
        return null;
      start = 1;
    } else {
      start = 0;
    }
    var limitForMaxRadix = _UInt___init__impl__l7qpdl(119304647);
    var limitBeforeMul = limitForMaxRadix;
    // Inline function 'kotlin.toUInt' call
    var uradix = _UInt___init__impl__l7qpdl(radix);
    var result = _UInt___init__impl__l7qpdl(0);
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        // Inline function 'kotlin.UInt.compareTo' call
        var this_0 = result;
        var other = limitBeforeMul;
        if (uintCompare(_UInt___get_data__impl__f0vqqw(this_0), _UInt___get_data__impl__f0vqqw(other)) > 0) {
          if (limitBeforeMul === limitForMaxRadix) {
            // Inline function 'kotlin.UInt.div' call
            limitBeforeMul = uintDivide(limit, uradix);
            // Inline function 'kotlin.UInt.compareTo' call
            var this_1 = result;
            var other_0 = limitBeforeMul;
            if (uintCompare(_UInt___get_data__impl__f0vqqw(this_1), _UInt___get_data__impl__f0vqqw(other_0)) > 0) {
              return null;
            }
          } else {
            return null;
          }
        }
        // Inline function 'kotlin.UInt.times' call
        var this_2 = result;
        result = _UInt___init__impl__l7qpdl(imul(_UInt___get_data__impl__f0vqqw(this_2), _UInt___get_data__impl__f0vqqw(uradix)));
        var beforeAdding = result;
        // Inline function 'kotlin.UInt.plus' call
        var this_3 = result;
        // Inline function 'kotlin.toUInt' call
        var other_1 = _UInt___init__impl__l7qpdl(digit);
        result = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_3) + _UInt___get_data__impl__f0vqqw(other_1) | 0);
        // Inline function 'kotlin.UInt.compareTo' call
        var this_4 = result;
        if (uintCompare(_UInt___get_data__impl__f0vqqw(this_4), _UInt___get_data__impl__f0vqqw(beforeAdding)) < 0)
          return null;
      }
       while (inductionVariable < length);
    return result;
  }
  function toUByteOrNull_0(_this__u8e3s4, radix) {
    var tmp0_elvis_lhs = toUIntOrNull_0(_this__u8e3s4, radix);
    var tmp;
    var tmp_0 = tmp0_elvis_lhs;
    if ((tmp_0 == null ? null : new UInt(tmp_0)) == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var int = tmp;
    // Inline function 'kotlin.UInt.compareTo' call
    // Inline function 'kotlin.UInt.compareTo' call
    // Inline function 'kotlin.UByte.toUInt' call
    var this_0 = _UByte___init__impl__g9hnc4(-1);
    var other = _UInt___init__impl__l7qpdl(_UByte___get_data__impl__jof9qr(this_0) & 255);
    if (uintCompare(_UInt___get_data__impl__f0vqqw(int), _UInt___get_data__impl__f0vqqw(other)) > 0)
      return null;
    // Inline function 'kotlin.UInt.toUByte' call
    // Inline function 'kotlin.toUByte' call
    var this_1 = _UInt___get_data__impl__f0vqqw(int);
    return _UByte___init__impl__g9hnc4(toByte(this_1));
  }
  function toUShortOrNull_0(_this__u8e3s4, radix) {
    var tmp0_elvis_lhs = toUIntOrNull_0(_this__u8e3s4, radix);
    var tmp;
    var tmp_0 = tmp0_elvis_lhs;
    if ((tmp_0 == null ? null : new UInt(tmp_0)) == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var int = tmp;
    // Inline function 'kotlin.UInt.compareTo' call
    // Inline function 'kotlin.UInt.compareTo' call
    // Inline function 'kotlin.UShort.toUInt' call
    var this_0 = _UShort___init__impl__jigrne(-1);
    var other = _UInt___init__impl__l7qpdl(_UShort___get_data__impl__g0245(this_0) & 65535);
    if (uintCompare(_UInt___get_data__impl__f0vqqw(int), _UInt___get_data__impl__f0vqqw(other)) > 0)
      return null;
    // Inline function 'kotlin.UInt.toUShort' call
    // Inline function 'kotlin.toUShort' call
    var this_1 = _UInt___get_data__impl__f0vqqw(int);
    return _UShort___init__impl__jigrne(toShort(this_1));
  }
  //region block: post-declaration
  protoOf(InternalHashMap).k5 = containsAllEntries;
  protoOf(CombinedContext).md = plus;
  protoOf(AbstractCoroutineContextElement).l8 = get;
  protoOf(AbstractCoroutineContextElement).ld = fold;
  protoOf(AbstractCoroutineContextElement).kd = minusKey;
  protoOf(AbstractCoroutineContextElement).md = plus;
  //endregion
  //region block: init
  Unit_instance = new Unit();
  Companion_instance_0 = new Companion_0();
  ByteCompanionObject_instance = new ByteCompanionObject();
  ShortCompanionObject_instance = new ShortCompanionObject();
  IntCompanionObject_instance = new IntCompanionObject();
  FloatCompanionObject_instance = new FloatCompanionObject();
  DoubleCompanionObject_instance = new DoubleCompanionObject();
  StringCompanionObject_instance = new StringCompanionObject();
  BooleanCompanionObject_instance = new BooleanCompanionObject();
  Companion_instance_3 = new Companion_3();
  CompletedContinuation_instance = new CompletedContinuation();
  Companion_instance_5 = new Companion_5();
  Companion_instance_6 = new Companion_6();
  Companion_instance_7 = new Companion_7();
  EmptyIterator_instance = new EmptyIterator();
  EmptySequence_instance = new EmptySequence();
  Key_instance = new Key();
  Companion_instance_11 = new Companion_11();
  UNINITIALIZED_VALUE_instance = new UNINITIALIZED_VALUE();
  Companion_instance_16 = new Companion_16();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = createKType;
  _.$_$.b = findAssociatedObject;
  _.$_$.c = getKClassFromExpression;
  _.$_$.d = getKClass;
  _.$_$.e = VOID;
  _.$_$.f = LazyThreadSafetyMode_PUBLICATION_getInstance;
  _.$_$.g = ArrayDeque_init_$Create$;
  _.$_$.h = ArrayList_init_$Create$_0;
  _.$_$.i = ArrayList_init_$Create$;
  _.$_$.j = ArrayList_init_$Create$_1;
  _.$_$.k = HashMap_init_$Create$_0;
  _.$_$.l = HashMap_init_$Create$;
  _.$_$.m = HashMap_init_$Create$_1;
  _.$_$.n = HashSet_init_$Create$_1;
  _.$_$.o = HashSet_init_$Create$;
  _.$_$.p = HashSet_init_$Create$_0;
  _.$_$.q = LinkedHashMap_init_$Create$_0;
  _.$_$.r = LinkedHashMap_init_$Create$;
  _.$_$.s = LinkedHashMap_init_$Create$_1;
  _.$_$.t = LinkedHashSet_init_$Create$;
  _.$_$.u = LinkedHashSet_init_$Create$_0;
  _.$_$.v = CancellationException_init_$Create$_0;
  _.$_$.w = CancellationException_init_$Init$_1;
  _.$_$.x = StringBuilder_init_$Create$;
  _.$_$.y = StringBuilder_init_$Create$_0;
  _.$_$.z = Error_init_$Init$_1;
  _.$_$.a1 = IllegalArgumentException_init_$Init$;
  _.$_$.b1 = IllegalArgumentException_init_$Init$_0;
  _.$_$.c1 = IllegalArgumentException_init_$Create$_0;
  _.$_$.d1 = IllegalArgumentException_init_$Init$_1;
  _.$_$.e1 = IllegalStateException_init_$Create$_0;
  _.$_$.f1 = IllegalStateException_init_$Create$_1;
  _.$_$.g1 = IndexOutOfBoundsException_init_$Create$_0;
  _.$_$.h1 = NumberFormatException_init_$Create$_0;
  _.$_$.i1 = RuntimeException_init_$Init$_0;
  _.$_$.j1 = RuntimeException_init_$Init$_1;
  _.$_$.k1 = RuntimeException_init_$Create$_1;
  _.$_$.l1 = UnsupportedOperationException_init_$Create$_0;
  _.$_$.m1 = Duration__toIsoString_impl_9h6wsm;
  _.$_$.n1 = _Char___init__impl__6a9atx;
  _.$_$.o1 = Char__minus_impl_a2frrh;
  _.$_$.p1 = Char__toInt_impl_vasixd;
  _.$_$.q1 = toString;
  _.$_$.r1 = _Result___init__impl__xyqfz8;
  _.$_$.s1 = Result__exceptionOrNull_impl_p6xea9;
  _.$_$.t1 = _Result___get_isFailure__impl__jpiriv;
  _.$_$.u1 = _Result___get_value__impl__bjfvqg;
  _.$_$.v1 = _UByte___init__impl__g9hnc4;
  _.$_$.w1 = _UByte___get_data__impl__jof9qr;
  _.$_$.x1 = UByte__toString_impl_v72jg;
  _.$_$.y1 = _UByteArray___init__impl__ip4y9n;
  _.$_$.z1 = _UByteArray___init__impl__ip4y9n_0;
  _.$_$.a2 = UByteArray__get_impl_t5f3hv;
  _.$_$.b2 = UByteArray__set_impl_jvcicn;
  _.$_$.c2 = _UByteArray___get_size__impl__h6pkdv;
  _.$_$.d2 = _UByteArray___get_storage__impl__d4kctt;
  _.$_$.e2 = _UInt___init__impl__l7qpdl;
  _.$_$.f2 = _UInt___get_data__impl__f0vqqw;
  _.$_$.g2 = UInt__toString_impl_dbgl21;
  _.$_$.h2 = _UIntArray___init__impl__ghjpc6_0;
  _.$_$.i2 = _UIntArray___init__impl__ghjpc6;
  _.$_$.j2 = UIntArray__get_impl_gp5kza;
  _.$_$.k2 = UIntArray__set_impl_7f2zu2;
  _.$_$.l2 = _UIntArray___get_size__impl__r6l8ci;
  _.$_$.m2 = _UIntArray___get_storage__impl__92a0v0;
  _.$_$.n2 = _ULong___init__impl__c78o9k;
  _.$_$.o2 = _ULong___get_data__impl__fggpzb;
  _.$_$.p2 = ULong__toString_impl_f9au7k;
  _.$_$.q2 = _ULongArray___init__impl__twm1l3_0;
  _.$_$.r2 = _ULongArray___init__impl__twm1l3;
  _.$_$.s2 = ULongArray__get_impl_pr71q9;
  _.$_$.t2 = ULongArray__set_impl_z19mvh;
  _.$_$.u2 = _ULongArray___get_size__impl__ju6dtr;
  _.$_$.v2 = _ULongArray___get_storage__impl__28e64j;
  _.$_$.w2 = _UShort___init__impl__jigrne;
  _.$_$.x2 = _UShort___get_data__impl__g0245;
  _.$_$.y2 = UShort__toString_impl_edaoee;
  _.$_$.z2 = _UShortArray___init__impl__9b26ef_0;
  _.$_$.a3 = _UShortArray___init__impl__9b26ef;
  _.$_$.b3 = UShortArray__get_impl_fnbhmx;
  _.$_$.c3 = UShortArray__set_impl_6d8whp;
  _.$_$.d3 = _UShortArray___get_size__impl__jqto1b;
  _.$_$.e3 = _UShortArray___get_storage__impl__t2jpv5;
  _.$_$.f3 = Key_instance;
  _.$_$.g3 = EmptyCoroutineContext_getInstance;
  _.$_$.h3 = BooleanCompanionObject_instance;
  _.$_$.i3 = ByteCompanionObject_instance;
  _.$_$.j3 = DoubleCompanionObject_instance;
  _.$_$.k3 = FloatCompanionObject_instance;
  _.$_$.l3 = IntCompanionObject_instance;
  _.$_$.m3 = ShortCompanionObject_instance;
  _.$_$.n3 = StringCompanionObject_instance;
  _.$_$.o3 = Default_getInstance;
  _.$_$.p3 = PrimitiveClasses_getInstance;
  _.$_$.q3 = Companion_getInstance_15;
  _.$_$.r3 = Companion_getInstance_17;
  _.$_$.s3 = Companion_getInstance;
  _.$_$.t3 = Companion_getInstance_1;
  _.$_$.u3 = Companion_instance_16;
  _.$_$.v3 = Companion_getInstance_18;
  _.$_$.w3 = Companion_getInstance_19;
  _.$_$.x3 = Companion_getInstance_20;
  _.$_$.y3 = Companion_getInstance_21;
  _.$_$.z3 = Unit_instance;
  _.$_$.a4 = ArrayList;
  _.$_$.b4 = Collection;
  _.$_$.c4 = HashMap;
  _.$_$.d4 = HashSet;
  _.$_$.e4 = LinkedHashMap;
  _.$_$.f4 = LinkedHashSet;
  _.$_$.g4 = KtList;
  _.$_$.h4 = Entry;
  _.$_$.i4 = KtMap;
  _.$_$.j4 = KtMutableList;
  _.$_$.k4 = KtMutableMap;
  _.$_$.l4 = KtMutableSet;
  _.$_$.m4 = KtSet;
  _.$_$.n4 = asList;
  _.$_$.o4 = asSequence_1;
  _.$_$.p4 = checkIndexOverflow;
  _.$_$.q4 = collectionSizeOrDefault;
  _.$_$.r4 = contentEquals;
  _.$_$.s4 = contentHashCode;
  _.$_$.t4 = contentToString;
  _.$_$.u4 = copyOf_4;
  _.$_$.v4 = copyOf_2;
  _.$_$.w4 = copyOf_6;
  _.$_$.x4 = copyOf;
  _.$_$.y4 = copyOf_5;
  _.$_$.z4 = copyOf_0;
  _.$_$.a5 = copyOf_1;
  _.$_$.b5 = copyOf_7;
  _.$_$.c5 = copyOf_3;
  _.$_$.d5 = copyToArray;
  _.$_$.e5 = emptyList;
  _.$_$.f5 = emptyMap;
  _.$_$.g5 = emptySet;
  _.$_$.h5 = getValue;
  _.$_$.i5 = indexOf;
  _.$_$.j5 = get_indices_0;
  _.$_$.k5 = get_indices;
  _.$_$.l5 = joinToString;
  _.$_$.m5 = joinToString_1;
  _.$_$.n5 = get_lastIndex_1;
  _.$_$.o5 = get_lastIndex_2;
  _.$_$.p5 = lastOrNull;
  _.$_$.q5 = last;
  _.$_$.r5 = listOf;
  _.$_$.s5 = listOf_0;
  _.$_$.t5 = mapCapacity;
  _.$_$.u5 = mapOf_0;
  _.$_$.v5 = plus_0;
  _.$_$.w5 = random;
  _.$_$.x5 = removeFirstOrNull;
  _.$_$.y5 = removeLast;
  _.$_$.z5 = setOf_0;
  _.$_$.a6 = singleOrNull;
  _.$_$.b6 = toBooleanArray;
  _.$_$.c6 = toHashSet;
  _.$_$.d6 = toList_0;
  _.$_$.e6 = toList;
  _.$_$.f6 = toMap;
  _.$_$.g6 = toMutableList_0;
  _.$_$.h6 = withIndex;
  _.$_$.i6 = zip;
  _.$_$.j6 = CancellationException;
  _.$_$.k6 = get_COROUTINE_SUSPENDED;
  _.$_$.l6 = createCoroutineUnintercepted;
  _.$_$.m6 = intercepted;
  _.$_$.n6 = startCoroutineUninterceptedOrReturnNonGeneratorVersion_0;
  _.$_$.o6 = AbstractCoroutineContextElement;
  _.$_$.p6 = AbstractCoroutineContextKey;
  _.$_$.q6 = get_0;
  _.$_$.r6 = minusKey_0;
  _.$_$.s6 = ContinuationInterceptor;
  _.$_$.t6 = Continuation;
  _.$_$.u6 = fold;
  _.$_$.v6 = get;
  _.$_$.w6 = minusKey;
  _.$_$.x6 = Element;
  _.$_$.y6 = plus;
  _.$_$.z6 = CoroutineImpl;
  _.$_$.a7 = resumeWithException;
  _.$_$.b7 = resume;
  _.$_$.c7 = startCoroutine;
  _.$_$.d7 = enumEntries;
  _.$_$.e7 = println;
  _.$_$.f7 = anyToString;
  _.$_$.g7 = arrayIterator;
  _.$_$.h7 = booleanArray;
  _.$_$.i7 = captureStack;
  _.$_$.j7 = charArray;
  _.$_$.k7 = charSequenceGet;
  _.$_$.l7 = charSequenceLength;
  _.$_$.m7 = charSequenceSubSequence;
  _.$_$.n7 = compareTo;
  _.$_$.o7 = defineProp;
  _.$_$.p7 = equals;
  _.$_$.q7 = fillArrayVal;
  _.$_$.r7 = getBooleanHashCode;
  _.$_$.s7 = getNumberHashCode;
  _.$_$.t7 = getPropertyCallableRef;
  _.$_$.u7 = getStringHashCode;
  _.$_$.v7 = hashCode;
  _.$_$.w7 = initMetadataForClass;
  _.$_$.x7 = initMetadataForCompanion;
  _.$_$.y7 = initMetadataForCoroutine;
  _.$_$.z7 = initMetadataForInterface;
  _.$_$.a8 = initMetadataForLambda;
  _.$_$.b8 = initMetadataForObject;
  _.$_$.c8 = isArray;
  _.$_$.d8 = isBooleanArray;
  _.$_$.e8 = isByteArray;
  _.$_$.f8 = isCharArray;
  _.$_$.g8 = isDoubleArray;
  _.$_$.h8 = isFloatArray;
  _.$_$.i8 = isIntArray;
  _.$_$.j8 = isInterface;
  _.$_$.k8 = isLongArray;
  _.$_$.l8 = isShortArray;
  _.$_$.m8 = get_js;
  _.$_$.n8 = longArray;
  _.$_$.o8 = numberRangeToNumber;
  _.$_$.p8 = numberToChar;
  _.$_$.q8 = numberToLong;
  _.$_$.r8 = objectCreate;
  _.$_$.s8 = protoOf;
  _.$_$.t8 = toByte;
  _.$_$.u8 = toLong;
  _.$_$.v8 = toShort;
  _.$_$.w8 = toString_1;
  _.$_$.x8 = ClosedRange;
  _.$_$.y8 = coerceAtLeast;
  _.$_$.z8 = coerceAtMost;
  _.$_$.a9 = coerceIn_0;
  _.$_$.b9 = contains_5;
  _.$_$.c9 = step;
  _.$_$.d9 = until;
  _.$_$.e9 = KClass;
  _.$_$.f9 = KProperty1;
  _.$_$.g9 = KTypeParameter;
  _.$_$.h9 = SequenceScope;
  _.$_$.i9 = iterator;
  _.$_$.j9 = sequenceOf;
  _.$_$.k9 = contains_8;
  _.$_$.l9 = encodeToByteArray;
  _.$_$.m9 = equals_0;
  _.$_$.n9 = indexOf_5;
  _.$_$.o9 = indexOf_4;
  _.$_$.p9 = isBlank;
  _.$_$.q9 = lastIndexOf;
  _.$_$.r9 = padStart;
  _.$_$.s9 = removeSuffix;
  _.$_$.t9 = replace;
  _.$_$.u9 = single_2;
  _.$_$.v9 = split;
  _.$_$.w9 = startsWith;
  _.$_$.x9 = substringAfter;
  _.$_$.y9 = substringBefore;
  _.$_$.z9 = toBooleanStrictOrNull;
  _.$_$.aa = toDoubleOrNull;
  _.$_$.ba = toDouble;
  _.$_$.ca = toIntOrNull;
  _.$_$.da = toInt;
  _.$_$.ea = toLongOrNull;
  _.$_$.fa = toString_5;
  _.$_$.ga = toUByte;
  _.$_$.ha = toUInt;
  _.$_$.ia = toULongOrNull;
  _.$_$.ja = toULong;
  _.$_$.ka = toUShort;
  _.$_$.la = trimIndent;
  _.$_$.ma = Duration;
  _.$_$.na = Uuid;
  _.$_$.oa = Char;
  _.$_$.pa = DeepRecursiveFunction;
  _.$_$.qa = DeepRecursiveScope;
  _.$_$.ra = Enum;
  _.$_$.sa = Error_0;
  _.$_$.ta = Exception;
  _.$_$.ua = IllegalArgumentException;
  _.$_$.va = Long;
  _.$_$.wa = Pair;
  _.$_$.xa = Result;
  _.$_$.ya = RuntimeException;
  _.$_$.za = THROW_CCE;
  _.$_$.ab = Triple;
  _.$_$.bb = UByteArray;
  _.$_$.cb = UByte;
  _.$_$.db = UIntArray;
  _.$_$.eb = UInt;
  _.$_$.fb = ULongArray;
  _.$_$.gb = ULong;
  _.$_$.hb = UShortArray;
  _.$_$.ib = UShort;
  _.$_$.jb = Unit;
  _.$_$.kb = UnsupportedOperationException;
  _.$_$.lb = addSuppressed;
  _.$_$.mb = arrayOf;
  _.$_$.nb = countTrailingZeroBits;
  _.$_$.ob = createFailure;
  _.$_$.pb = ensureNotNull;
  _.$_$.qb = invoke;
  _.$_$.rb = isFinite;
  _.$_$.sb = isFinite_0;
  _.$_$.tb = lazy;
  _.$_$.ub = lazy_0;
  _.$_$.vb = noWhenBranchMatchedException;
  _.$_$.wb = plus_1;
  _.$_$.xb = throwUninitializedPropertyAccessException;
  _.$_$.yb = toString_0;
  _.$_$.zb = to;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-react-core.js":
/*!*************************************!*\
  !*** ./kotlin/kotlin-react-core.js ***!
  \*************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! react */ "../../node_modules/react/index.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlin-js.js */ "./kotlin/kotlin-js.js"), __webpack_require__(/*! ./kotlinx-coroutines-core.js */ "./kotlin/kotlinx-coroutines-core.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, $module$react, kotlin_kotlin, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core) {
  'use strict';
  //region block: imports
  var createElement = $module$react.createElement;
  var useEffect = $module$react.useEffect;
  var useLayoutEffect = $module$react.useLayoutEffect;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var VOID = kotlin_kotlin.$_$.e;
  var toString = kotlin_kotlin.$_$.q1;
  var IsolatedCoroutineScope = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a;
  var CoroutineStart_UNDISPATCHED_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.a;
  var launch = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.e;
  //endregion
  //region block: pre-declaration
  //endregion
  function get_CHILD_ARRAY() {
    _init_properties_ChildrenBuilder_kt__gexuom();
    return CHILD_ARRAY;
  }
  var CHILD_ARRAY;
  function get_DEFAULT_KEY() {
    _init_properties_ChildrenBuilder_kt__gexuom();
    return DEFAULT_KEY;
  }
  var DEFAULT_KEY;
  function addChildNode(_this__u8e3s4, node) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    // Inline function 'react.childArray' call
    // Inline function 'kotlin.js.asDynamic' call
    if (!(_this__u8e3s4[get_CHILD_ARRAY()] == null)) {
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'react.childArray' call
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4[get_CHILD_ARRAY()].push(node);
    } else {
      // Inline function 'react.childArray' call
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var value = [node];
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4[get_CHILD_ARRAY()] = value;
    }
  }
  function addChild(_this__u8e3s4, type, props) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    addChildElement(_this__u8e3s4, type, props, VOID, getDefaultKey(_this__u8e3s4));
  }
  function addChild_0(_this__u8e3s4, type) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    addChildElement(_this__u8e3s4, type, VOID, VOID, getDefaultKey(_this__u8e3s4));
  }
  function addChild_1(_this__u8e3s4, type, block) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    var defaultKey = getDefaultKey(_this__u8e3s4);
    // Inline function 'js.objects.jso' call
    // Inline function 'kotlin.apply' call
    // Inline function 'js.objects.jso' call
    var this_0 = {};
    // Inline function 'kotlin.contracts.contract' call
    block(this_0);
    var props = this_0;
    addChildElement(_this__u8e3s4, type, props, getChildArray(props), defaultKey);
  }
  function addChild_2(_this__u8e3s4, provider, value, block) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    addChild_1(_this__u8e3s4, provider, addChild$lambda(value, block));
  }
  function addChild_3(_this__u8e3s4, context, value, block) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    addChild_2(_this__u8e3s4, context.Provider, value, block);
  }
  function addChildElement(_this__u8e3s4, type, props, children, defaultKey) {
    props = props === VOID ? null : props;
    children = children === VOID ? null : children;
    _init_properties_ChildrenBuilder_kt__gexuom();
    var childProps_0 = childProps(props, defaultKey);
    var tmp;
    if (!(children == null)) {
      tmp = createElement.apply(null, [type, childProps_0].concat([].slice.call(children.slice())));
    } else {
      tmp = createElement(type, childProps_0);
    }
    var element = tmp;
    addChildNode(_this__u8e3s4, element);
  }
  function getDefaultKey(_this__u8e3s4) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    // Inline function 'kotlin.js.asDynamic' call
    var key = _this__u8e3s4[get_DEFAULT_KEY()];
    // Inline function 'kotlin.js.asDynamic' call
    delete(_this__u8e3s4[get_DEFAULT_KEY()]);
    return key;
  }
  function getChildArray(_this__u8e3s4) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4[get_CHILD_ARRAY()];
  }
  function childProps(props, defaultKey) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    if (defaultKey == null)
      return props;
    if (props == null) {
      // Inline function 'js.objects.jso' call
      // Inline function 'kotlin.apply' call
      // Inline function 'js.objects.jso' call
      var this_0 = {};
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'react.childProps.<anonymous>' call
      this_0.key = defaultKey;
      return this_0;
    }
    if (!(props.key == null))
      return props;
    // Inline function 'js.objects.jso' call
    // Inline function 'kotlin.apply' call
    // Inline function 'js.objects.jso' call
    var this_1 = {};
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'react.childProps.<anonymous>' call
    // Inline function 'react.Props.unaryPlus' call
    Object.assign(this_1, props);
    this_1.key = defaultKey;
    return this_1;
  }
  function getChildArray_0(_this__u8e3s4) {
    _init_properties_ChildrenBuilder_kt__gexuom();
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4[get_CHILD_ARRAY()];
  }
  function addChild$lambda($value, $block) {
    return function ($this$addChild) {
      $this$addChild.value = $value;
      $block($this$addChild);
      return Unit_instance;
    };
  }
  var properties_initialized_ChildrenBuilder_kt_gby2z0;
  function _init_properties_ChildrenBuilder_kt__gexuom() {
    if (!properties_initialized_ChildrenBuilder_kt_gby2z0) {
      properties_initialized_ChildrenBuilder_kt_gby2z0 = true;
      CHILD_ARRAY = Symbol('@@child-array');
      DEFAULT_KEY = Symbol('@@default-key');
    }
  }
  function ReactNode(source) {
    // Inline function 'react.ReactNode' call
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return toString(source);
  }
  function buildCleanup(cleanups) {
    // Inline function 'kotlin.collections.isEmpty' call
    if (cleanups.length === 0)
      return undefined;
    return buildCleanup$lambda(cleanups);
  }
  function buildCleanup$lambda($cleanups) {
    return function () {
      var indexedObject = $cleanups;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var cleanup = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        cleanup();
      }
      return Unit_instance;
    };
  }
  function createCleanupCallback(block) {
    return createCleanupCallback$lambda(block);
  }
  function createCleanupCallback_0(block) {
    return createCleanupCallback$lambda_0(block);
  }
  function createCleanupCallback$lambda$lambda($job) {
    return function () {
      $job.t1g();
      return Unit_instance;
    };
  }
  function createCleanupCallback$lambda($block) {
    return function () {
      var job = isolatedJob($block);
      return createCleanupCallback$lambda$lambda(job);
    };
  }
  function createCleanupCallback$lambda_0($block) {
    return function () {
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var cleanups = [];
      // Inline function 'js.reflect.unsafeCast' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      $block(cleanups);
      return buildCleanup(cleanups);
    };
  }
  function isolatedJob(block) {
    return launch(IsolatedCoroutineScope(), VOID, CoroutineStart_UNDISPATCHED_getInstance(), block);
  }
  function useEffect_0(effect) {
    var callback = createCleanupCallback(effect);
    useEffect(callback);
  }
  function useEffect_1(dependencies, effect) {
    var callback = createCleanupCallback(effect);
    useEffect(callback, dependencies);
  }
  function useEffectWithCleanup(effect) {
    var callback = createCleanupCallback_0(effect);
    useEffect(callback);
  }
  function useLayoutEffect_0(dependencies, effect) {
    var callback = createCleanupCallback(effect);
    useLayoutEffect(callback, dependencies);
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = addChildNode;
  _.$_$.b = addChild_1;
  _.$_$.c = getChildArray_0;
  _.$_$.d = getChildArray;
  _.$_$.e = useEffectWithCleanup;
  _.$_$.f = useEffect_1;
  _.$_$.g = useEffect_0;
  _.$_$.h = useLayoutEffect_0;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-react-dom.js":
/*!************************************!*\
  !*** ./kotlin/kotlin-react-dom.js ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var protoOf = kotlin_kotlin.$_$.s8;
  var initMetadataForObject = kotlin_kotlin.$_$.b8;
  //endregion
  //region block: pre-declaration
  initMetadataForObject(ReactHTML, 'ReactHTML');
  //endregion
  function ReactHTML() {
  }
  var ReactHTML_instance;
  function ReactHTML_getInstance() {
    return ReactHTML_instance;
  }
  //region block: init
  ReactHTML_instance = new ReactHTML();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = ReactHTML_instance;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-react.js":
/*!********************************!*\
  !*** ./kotlin/kotlin-react.js ***!
  \********************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! react */ "../../node_modules/react/index.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlin-react-core.js */ "./kotlin/kotlin-react-core.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, $module$react, kotlin_kotlin, kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core) {
  'use strict';
  //region block: imports
  var createElement = $module$react.createElement;
  var Fragment = $module$react.Fragment;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var getChildArray = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.d;
  var getChildArray_0 = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_core.$_$.c;
  var VOID = kotlin_kotlin.$_$.e;
  //endregion
  //region block: pre-declaration
  //endregion
  function FC(block) {
    // Inline function 'js.reflect.unsafeCast' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return FC$lambda(block);
  }
  function FC$lambda$lambda($block, $props) {
    return function ($this$createElementOrNull) {
      $block($this$createElementOrNull, $props);
      return Unit_instance;
    };
  }
  function FC$lambda($block) {
    return function (props) {
      return createElementOrNull(FC$lambda$lambda($block, props));
    };
  }
  function create(_this__u8e3s4, block) {
    // Inline function 'js.objects.jso' call
    // Inline function 'kotlin.apply' call
    // Inline function 'js.objects.jso' call
    var this_0 = {};
    // Inline function 'kotlin.contracts.contract' call
    block(this_0);
    var props = this_0;
    var tmp0_elvis_lhs = getChildArray(props);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.emptyArray' call
      tmp = [];
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var children = tmp;
    return createElement.apply(null, [_this__u8e3s4, props].concat([].slice.call(children.slice())));
  }
  function create_0(_this__u8e3s4) {
    return createElement(_this__u8e3s4);
  }
  function createElementOrNull(block) {
    // Inline function 'js.objects.jso' call
    // Inline function 'kotlin.apply' call
    // Inline function 'js.objects.jso' call
    var this_0 = {};
    // Inline function 'kotlin.contracts.contract' call
    block(this_0);
    var tmp0_elvis_lhs = getChildArray_0(this_0);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var children = tmp;
    return createElement.apply(null, [Fragment, VOID].concat([].slice.call(children.slice())));
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = FC;
  _.$_$.b = create;
  _.$_$.c = create_0;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlinx-atomicfu.js":
/*!************************************!*\
  !*** ./kotlin/kotlinx-atomicfu.js ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var protoOf = kotlin_kotlin.$_$.s8;
  var initMetadataForObject = kotlin_kotlin.$_$.b8;
  var VOID = kotlin_kotlin.$_$.e;
  var initMetadataForClass = kotlin_kotlin.$_$.w7;
  var toString = kotlin_kotlin.$_$.yb;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(atomicfu$TraceBase, 'TraceBase');
  initMetadataForObject(None, 'None', VOID, atomicfu$TraceBase);
  initMetadataForClass(AtomicRef, 'AtomicRef');
  initMetadataForClass(AtomicBoolean, 'AtomicBoolean');
  initMetadataForClass(AtomicInt, 'AtomicInt');
  //endregion
  function None() {
    None_instance = this;
    atomicfu$TraceBase.call(this);
  }
  var None_instance;
  function None_getInstance() {
    if (None_instance == null)
      new None();
    return None_instance;
  }
  function atomicfu$TraceBase() {
  }
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$1 = function (event) {
  };
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$2 = function (event1, event2) {
  };
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$3 = function (event1, event2, event3) {
  };
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$4 = function (event1, event2, event3, event4) {
  };
  function AtomicRef(value) {
    this.kotlinx$atomicfu$value = value;
  }
  protoOf(AtomicRef).d1f = function (_set____db54di) {
    this.kotlinx$atomicfu$value = _set____db54di;
  };
  protoOf(AtomicRef).e1f = function () {
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicRef).atomicfu$compareAndSet = function (expect, update) {
    if (!(this.kotlinx$atomicfu$value === expect))
      return false;
    this.kotlinx$atomicfu$value = update;
    return true;
  };
  protoOf(AtomicRef).atomicfu$getAndSet = function (value) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = value;
    return oldValue;
  };
  protoOf(AtomicRef).toString = function () {
    return toString(this.kotlinx$atomicfu$value);
  };
  function atomic$ref$1(initial) {
    return atomic$ref$(initial, None_getInstance());
  }
  function AtomicBoolean(value) {
    this.kotlinx$atomicfu$value = value;
  }
  protoOf(AtomicBoolean).f1f = function (_set____db54di) {
    this.kotlinx$atomicfu$value = _set____db54di;
  };
  protoOf(AtomicBoolean).e1f = function () {
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicBoolean).atomicfu$compareAndSet = function (expect, update) {
    if (!(this.kotlinx$atomicfu$value === expect))
      return false;
    this.kotlinx$atomicfu$value = update;
    return true;
  };
  protoOf(AtomicBoolean).atomicfu$getAndSet = function (value) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = value;
    return oldValue;
  };
  protoOf(AtomicBoolean).toString = function () {
    return this.kotlinx$atomicfu$value.toString();
  };
  function atomic$boolean$1(initial) {
    return atomic$boolean$(initial, None_getInstance());
  }
  function AtomicInt(value) {
    this.kotlinx$atomicfu$value = value;
  }
  protoOf(AtomicInt).g1f = function (_set____db54di) {
    this.kotlinx$atomicfu$value = _set____db54di;
  };
  protoOf(AtomicInt).e1f = function () {
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).atomicfu$compareAndSet = function (expect, update) {
    if (!(this.kotlinx$atomicfu$value === expect))
      return false;
    this.kotlinx$atomicfu$value = update;
    return true;
  };
  protoOf(AtomicInt).atomicfu$getAndSet = function (value) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = value;
    return oldValue;
  };
  protoOf(AtomicInt).atomicfu$getAndIncrement = function () {
    var _unary__edvuaz = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = _unary__edvuaz + 1 | 0;
    return _unary__edvuaz;
  };
  protoOf(AtomicInt).atomicfu$getAndDecrement = function () {
    var _unary__edvuaz = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = _unary__edvuaz - 1 | 0;
    return _unary__edvuaz;
  };
  protoOf(AtomicInt).atomicfu$getAndAdd = function (delta) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + delta | 0;
    return oldValue;
  };
  protoOf(AtomicInt).atomicfu$addAndGet = function (delta) {
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + delta | 0;
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).atomicfu$incrementAndGet = function () {
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + 1 | 0;
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).atomicfu$decrementAndGet = function () {
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value - 1 | 0;
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).toString = function () {
    return this.kotlinx$atomicfu$value.toString();
  };
  function atomic$int$1(initial) {
    return atomic$int$(initial, None_getInstance());
  }
  function atomic$ref$(initial, trace) {
    trace = trace === VOID ? None_getInstance() : trace;
    return new AtomicRef(initial);
  }
  function atomic$boolean$(initial, trace) {
    trace = trace === VOID ? None_getInstance() : trace;
    return new AtomicBoolean(initial);
  }
  function atomic$int$(initial, trace) {
    trace = trace === VOID ? None_getInstance() : trace;
    return new AtomicInt(initial);
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = atomic$boolean$1;
  _.$_$.b = atomic$ref$1;
  _.$_$.c = atomic$int$1;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlinx-coroutines-core.js":
/*!*******************************************!*\
  !*** ./kotlin/kotlinx-coroutines-core.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlinx-atomicfu.js */ "./kotlin/kotlinx-atomicfu.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_atomicfu) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var protoOf = kotlin_kotlin.$_$.s8;
  var THROW_CCE = kotlin_kotlin.$_$.za;
  var Continuation = kotlin_kotlin.$_$.t6;
  var initMetadataForClass = kotlin_kotlin.$_$.w7;
  var VOID = kotlin_kotlin.$_$.e;
  var EmptyCoroutineContext_getInstance = kotlin_kotlin.$_$.g3;
  var createCoroutineUnintercepted = kotlin_kotlin.$_$.l6;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.l1;
  var isInterface = kotlin_kotlin.$_$.j8;
  var toString = kotlin_kotlin.$_$.w8;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.e1;
  var toString_0 = kotlin_kotlin.$_$.yb;
  var atomic$int$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.c;
  var atomic$ref$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.b;
  var get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.k6;
  var initMetadataForInterface = kotlin_kotlin.$_$.z7;
  var initMetadataForObject = kotlin_kotlin.$_$.b8;
  var hashCode = kotlin_kotlin.$_$.v7;
  var equals = kotlin_kotlin.$_$.p7;
  var atomic$boolean$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.a;
  var CancellationException_init_$Create$ = kotlin_kotlin.$_$.v;
  var Result__exceptionOrNull_impl_p6xea9 = kotlin_kotlin.$_$.s1;
  var _Result___get_value__impl__bjfvqg = kotlin_kotlin.$_$.u1;
  var AbstractCoroutineContextKey = kotlin_kotlin.$_$.p6;
  var Key_instance = kotlin_kotlin.$_$.f3;
  var AbstractCoroutineContextElement = kotlin_kotlin.$_$.o6;
  var get = kotlin_kotlin.$_$.q6;
  var minusKey = kotlin_kotlin.$_$.r6;
  var ContinuationInterceptor = kotlin_kotlin.$_$.s6;
  var RuntimeException_init_$Create$ = kotlin_kotlin.$_$.k1;
  var addSuppressed = kotlin_kotlin.$_$.lb;
  var Enum = kotlin_kotlin.$_$.ra;
  var startCoroutine = kotlin_kotlin.$_$.c7;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.vb;
  var Long = kotlin_kotlin.$_$.va;
  var ArrayDeque_init_$Create$ = kotlin_kotlin.$_$.g;
  var RuntimeException = kotlin_kotlin.$_$.ya;
  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.j1;
  var captureStack = kotlin_kotlin.$_$.i7;
  var Error_0 = kotlin_kotlin.$_$.sa;
  var Error_init_$Init$ = kotlin_kotlin.$_$.z;
  var Element = kotlin_kotlin.$_$.x6;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.y;
  var throwUninitializedPropertyAccessException = kotlin_kotlin.$_$.xb;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.h;
  var CancellationException = kotlin_kotlin.$_$.j6;
  var ArrayList = kotlin_kotlin.$_$.a4;
  var IllegalStateException_init_$Create$_0 = kotlin_kotlin.$_$.f1;
  var plus = kotlin_kotlin.$_$.y6;
  var get_0 = kotlin_kotlin.$_$.v6;
  var fold = kotlin_kotlin.$_$.u6;
  var minusKey_0 = kotlin_kotlin.$_$.w6;
  var anyToString = kotlin_kotlin.$_$.f7;
  var UnsupportedOperationException = kotlin_kotlin.$_$.kb;
  var Exception = kotlin_kotlin.$_$.ta;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.c1;
  var Companion_instance = kotlin_kotlin.$_$.u3;
  var createFailure = kotlin_kotlin.$_$.ob;
  var _Result___init__impl__xyqfz8 = kotlin_kotlin.$_$.r1;
  var intercepted = kotlin_kotlin.$_$.m6;
  var startCoroutineUninterceptedOrReturnNonGeneratorVersion = kotlin_kotlin.$_$.n6;
  var getKClassFromExpression = kotlin_kotlin.$_$.c;
  var removeFirstOrNull = kotlin_kotlin.$_$.x5;
  var KtMutableList = kotlin_kotlin.$_$.j4;
  var CancellationException_init_$Init$ = kotlin_kotlin.$_$.w;
  var ensureNotNull = kotlin_kotlin.$_$.pb;
  var getStringHashCode = kotlin_kotlin.$_$.u7;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.n;
  var RuntimeException_init_$Init$_0 = kotlin_kotlin.$_$.i1;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.t;
  //endregion
  //region block: pre-declaration
  function cancel$default(cause, $super) {
    cause = cause === VOID ? null : cause;
    var tmp;
    if ($super === VOID) {
      this.s1g(cause);
      tmp = Unit_instance;
    } else {
      tmp = $super.s1g.call(this, cause);
    }
    return tmp;
  }
  initMetadataForInterface(Job, 'Job', VOID, VOID, [Element], [0]);
  initMetadataForInterface(ParentJob, 'ParentJob', VOID, VOID, [Job], [0]);
  initMetadataForClass(JobSupport, 'JobSupport', VOID, VOID, [Job, ParentJob], [0]);
  initMetadataForInterface(CoroutineScope, 'CoroutineScope');
  initMetadataForClass(AbstractCoroutine, 'AbstractCoroutine', VOID, JobSupport, [JobSupport, Job, Continuation, CoroutineScope], [0]);
  initMetadataForClass(StandaloneCoroutine, 'StandaloneCoroutine', VOID, AbstractCoroutine, VOID, [0]);
  initMetadataForClass(LazyStandaloneCoroutine, 'LazyStandaloneCoroutine', VOID, StandaloneCoroutine, VOID, [0]);
  initMetadataForInterface(Runnable, 'Runnable');
  initMetadataForClass(SchedulerTask, 'SchedulerTask', VOID, VOID, [Runnable]);
  initMetadataForClass(DispatchedTask, 'DispatchedTask', VOID, SchedulerTask);
  initMetadataForClass(CancellableContinuationImpl, 'CancellableContinuationImpl', VOID, DispatchedTask, [DispatchedTask, Continuation]);
  initMetadataForInterface(NotCompleted, 'NotCompleted');
  initMetadataForInterface(CancelHandler, 'CancelHandler', VOID, VOID, [NotCompleted]);
  initMetadataForClass(UserSupplied, 'UserSupplied', VOID, VOID, [CancelHandler]);
  initMetadataForObject(Active, 'Active', VOID, VOID, [NotCompleted]);
  initMetadataForClass(CompletedContinuation, 'CompletedContinuation');
  initMetadataForClass(LockFreeLinkedListNode, 'LockFreeLinkedListNode', LockFreeLinkedListNode);
  initMetadataForInterface(Incomplete, 'Incomplete');
  initMetadataForClass(JobNode, 'JobNode', VOID, LockFreeLinkedListNode, [LockFreeLinkedListNode, Incomplete]);
  initMetadataForClass(ChildContinuation, 'ChildContinuation', VOID, JobNode);
  initMetadataForClass(CompletedExceptionally, 'CompletedExceptionally');
  initMetadataForClass(CancelledContinuation, 'CancelledContinuation', VOID, CompletedExceptionally);
  initMetadataForObject(Key, 'Key', VOID, AbstractCoroutineContextKey);
  initMetadataForClass(CoroutineDispatcher, 'CoroutineDispatcher', VOID, AbstractCoroutineContextElement, [AbstractCoroutineContextElement, ContinuationInterceptor]);
  initMetadataForObject(Key_0, 'Key');
  initMetadataForClass(CoroutineStart, 'CoroutineStart', VOID, Enum);
  initMetadataForClass(EventLoop, 'EventLoop', VOID, CoroutineDispatcher);
  initMetadataForObject(ThreadLocalEventLoop, 'ThreadLocalEventLoop');
  initMetadataForClass(CompletionHandlerException, 'CompletionHandlerException', VOID, RuntimeException);
  initMetadataForClass(CoroutinesInternalError, 'CoroutinesInternalError', VOID, Error_0);
  initMetadataForObject(Key_1, 'Key');
  initMetadataForObject(NonDisposableHandle, 'NonDisposableHandle');
  initMetadataForClass(Empty, 'Empty', VOID, VOID, [Incomplete]);
  initMetadataForClass(LockFreeLinkedListHead, 'LockFreeLinkedListHead', LockFreeLinkedListHead, LockFreeLinkedListNode);
  initMetadataForClass(NodeList, 'NodeList', NodeList, LockFreeLinkedListHead, [LockFreeLinkedListHead, Incomplete]);
  initMetadataForClass(SynchronizedObject, 'SynchronizedObject', SynchronizedObject);
  initMetadataForClass(Finishing, 'Finishing', VOID, SynchronizedObject, [SynchronizedObject, Incomplete]);
  initMetadataForClass(ChildCompletion, 'ChildCompletion', VOID, JobNode);
  initMetadataForClass(InactiveNodeList, 'InactiveNodeList', VOID, VOID, [Incomplete]);
  initMetadataForClass(InvokeOnCompletion, 'InvokeOnCompletion', VOID, JobNode);
  initMetadataForClass(InvokeOnCancelling, 'InvokeOnCancelling', VOID, JobNode);
  initMetadataForClass(ChildHandleNode, 'ChildHandleNode', VOID, JobNode);
  initMetadataForClass(IncompleteStateBox, 'IncompleteStateBox');
  initMetadataForClass(JobImpl, 'JobImpl', VOID, JobSupport, [JobSupport, Job], [0]);
  initMetadataForClass(MainCoroutineDispatcher, 'MainCoroutineDispatcher', VOID, CoroutineDispatcher);
  initMetadataForClass(TimeoutCancellationException, 'TimeoutCancellationException', VOID, CancellationException);
  initMetadataForObject(Unconfined, 'Unconfined', VOID, CoroutineDispatcher);
  initMetadataForObject(Key_2, 'Key');
  initMetadataForClass(ConcurrentLinkedListNode, 'ConcurrentLinkedListNode');
  initMetadataForClass(Segment, 'Segment', VOID, ConcurrentLinkedListNode, [ConcurrentLinkedListNode, NotCompleted]);
  initMetadataForObject(ExceptionSuccessfullyProcessed, 'ExceptionSuccessfullyProcessed', VOID, Exception);
  initMetadataForClass(DispatchedContinuation, 'DispatchedContinuation', VOID, DispatchedTask, [DispatchedTask, Continuation]);
  initMetadataForClass(ContextScope, 'ContextScope', VOID, VOID, [CoroutineScope]);
  initMetadataForClass(Symbol, 'Symbol');
  initMetadataForClass(SetTimeoutBasedDispatcher, 'SetTimeoutBasedDispatcher', VOID, CoroutineDispatcher, VOID, [1]);
  initMetadataForObject(NodeDispatcher, 'NodeDispatcher', VOID, SetTimeoutBasedDispatcher, VOID, [1]);
  initMetadataForClass(MessageQueue, 'MessageQueue', VOID, VOID, [KtMutableList]);
  initMetadataForClass(ScheduledMessageQueue, 'ScheduledMessageQueue', VOID, MessageQueue);
  initMetadataForClass(WindowMessageQueue, 'WindowMessageQueue', VOID, MessageQueue);
  initMetadataForClass(UnconfinedEventLoop, 'UnconfinedEventLoop', UnconfinedEventLoop, EventLoop);
  initMetadataForObject(SetTimeoutDispatcher, 'SetTimeoutDispatcher', VOID, SetTimeoutBasedDispatcher, VOID, [1]);
  initMetadataForClass(WindowDispatcher, 'WindowDispatcher', VOID, CoroutineDispatcher, VOID, [1]);
  initMetadataForObject(Dispatchers, 'Dispatchers');
  initMetadataForClass(JsMainDispatcher, 'JsMainDispatcher', VOID, MainCoroutineDispatcher);
  initMetadataForClass(JobCancellationException, 'JobCancellationException', VOID, CancellationException);
  initMetadataForClass(DiagnosticCoroutineContextException, 'DiagnosticCoroutineContextException', VOID, RuntimeException);
  initMetadataForClass(ListClosed, 'ListClosed', VOID, LockFreeLinkedListNode);
  initMetadataForClass(CommonThreadLocal, 'CommonThreadLocal', CommonThreadLocal);
  //endregion
  function AbstractCoroutine(parentContext, initParentJob, active) {
    JobSupport.call(this, active);
    if (initParentJob) {
      this.j1f(parentContext.l8(Key_instance_2));
    }
    this.m1f_1 = parentContext.md(this);
  }
  protoOf(AbstractCoroutine).e8 = function () {
    return this.m1f_1;
  };
  protoOf(AbstractCoroutine).n1f = function () {
    return this.m1f_1;
  };
  protoOf(AbstractCoroutine).o1f = function () {
    return protoOf(JobSupport).o1f.call(this);
  };
  protoOf(AbstractCoroutine).p1f = function (value) {
  };
  protoOf(AbstractCoroutine).q1f = function (cause, handled) {
  };
  protoOf(AbstractCoroutine).r1f = function () {
    return get_classSimpleName(this) + ' was cancelled';
  };
  protoOf(AbstractCoroutine).s1f = function (state) {
    if (state instanceof CompletedExceptionally) {
      this.q1f(state.t1f_1, state.v1f());
    } else {
      this.p1f((state == null ? true : !(state == null)) ? state : THROW_CCE());
    }
  };
  protoOf(AbstractCoroutine).j8 = function (result) {
    var state = this.w1f(toState_0(result));
    if (state === get_COMPLETING_WAITING_CHILDREN())
      return Unit_instance;
    this.x1f(state);
  };
  protoOf(AbstractCoroutine).x1f = function (state) {
    return this.y1f(state);
  };
  protoOf(AbstractCoroutine).z1f = function (exception) {
    handleCoroutineException(this.m1f_1, exception);
  };
  protoOf(AbstractCoroutine).a1g = function () {
    var tmp0_elvis_lhs = get_coroutineName(this.m1f_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return protoOf(JobSupport).a1g.call(this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var coroutineName = tmp;
    return '"' + coroutineName + '":' + protoOf(JobSupport).a1g.call(this);
  };
  protoOf(AbstractCoroutine).b1g = function (start, receiver, block) {
    start.e1g(block, receiver, this);
  };
  function launch(_this__u8e3s4, context, start, block) {
    context = context === VOID ? EmptyCoroutineContext_getInstance() : context;
    start = start === VOID ? CoroutineStart_DEFAULT_getInstance() : start;
    var newContext = newCoroutineContext(_this__u8e3s4, context);
    var coroutine = start.f1h() ? new LazyStandaloneCoroutine(newContext, block) : new StandaloneCoroutine(newContext, true);
    coroutine.b1g(start, coroutine, block);
    return coroutine;
  }
  function StandaloneCoroutine(parentContext, active) {
    AbstractCoroutine.call(this, parentContext, true, active);
  }
  protoOf(StandaloneCoroutine).d1h = function (exception) {
    handleCoroutineException(this.m1f_1, exception);
    return true;
  };
  function LazyStandaloneCoroutine(parentContext, block) {
    StandaloneCoroutine.call(this, parentContext, false);
    this.m1h_1 = createCoroutineUnintercepted(block, this, this);
  }
  protoOf(LazyStandaloneCoroutine).k1g = function () {
    startCoroutineCancellable(this.m1h_1, this);
  };
  function invokeOnCancellation(_this__u8e3s4, handler) {
    var tmp;
    if (_this__u8e3s4 instanceof CancellableContinuationImpl) {
      _this__u8e3s4.t1h(handler);
      tmp = Unit_instance;
    } else {
      throw UnsupportedOperationException_init_$Create$('third-party implementation of CancellableContinuation is not supported');
    }
    return tmp;
  }
  function _get_parentHandle__f8dcex($this) {
    return $this.s1h_1.kotlinx$atomicfu$value;
  }
  function _get_stateDebugRepresentation__bf18u4($this) {
    var tmp5_subject = $this.h1g();
    var tmp;
    if (!(tmp5_subject == null) ? isInterface(tmp5_subject, NotCompleted) : false) {
      tmp = 'Active';
    } else {
      if (tmp5_subject instanceof CancelledContinuation) {
        tmp = 'Cancelled';
      } else {
        tmp = 'Completed';
      }
    }
    return tmp;
  }
  function isReusable($this) {
    var tmp;
    if (get_isReusableMode($this.b1i_1)) {
      var tmp_0 = $this.o1h_1;
      tmp = (tmp_0 instanceof DispatchedContinuation ? tmp_0 : THROW_CCE()).a1i();
    } else {
      tmp = false;
    }
    return tmp;
  }
  function cancelLater($this, cause) {
    if (!isReusable($this))
      return false;
    var tmp = $this.o1h_1;
    var dispatched = tmp instanceof DispatchedContinuation ? tmp : THROW_CCE();
    return dispatched.c1i(cause);
  }
  function callSegmentOnCancellation($this, segment, cause) {
    // Inline function 'kotlinx.coroutines.index' call
    var index = $this.q1h_1.kotlinx$atomicfu$value & 536870911;
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!(index === 536870911)) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.callSegmentOnCancellation.<anonymous>' call
      var message = 'The index for Segment.onCancellation(..) is broken';
      throw IllegalStateException_init_$Create$(toString(message));
    }
    // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.callCancelHandlerSafely' call
    try {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.callSegmentOnCancellation.<anonymous>' call
      segment.d1i(index, cause, $this.e8());
    } catch ($p) {
      if ($p instanceof Error) {
        var ex = $p;
        handleCoroutineException($this.e8(), new CompletionHandlerException('Exception in invokeOnCancellation handler for ' + $this.toString(), ex));
      } else {
        throw $p;
      }
    }
  }
  function trySuspend($this) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = $this.q1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.trySuspend.<anonymous>' call
      var cur = this_0.kotlinx$atomicfu$value;
      // Inline function 'kotlinx.coroutines.decision' call
      switch (cur >> 29) {
        case 0:
          // Inline function 'kotlinx.coroutines.decisionAndIndex' call

          // Inline function 'kotlinx.coroutines.index' call

          var tmp$ret$2 = (1 << 29) + (cur & 536870911) | 0;
          if ($this.q1h_1.atomicfu$compareAndSet(cur, tmp$ret$2))
            return true;
          break;
        case 2:
          return false;
        default:
          // Inline function 'kotlin.error' call

          var message = 'Already suspended';
          throw IllegalStateException_init_$Create$(toString(message));
      }
    }
  }
  function tryResume($this) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = $this.q1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.tryResume.<anonymous>' call
      var cur = this_0.kotlinx$atomicfu$value;
      // Inline function 'kotlinx.coroutines.decision' call
      switch (cur >> 29) {
        case 0:
          // Inline function 'kotlinx.coroutines.decisionAndIndex' call

          // Inline function 'kotlinx.coroutines.index' call

          var tmp$ret$2 = (2 << 29) + (cur & 536870911) | 0;
          if ($this.q1h_1.atomicfu$compareAndSet(cur, tmp$ret$2))
            return true;
          break;
        case 1:
          return false;
        default:
          // Inline function 'kotlin.error' call

          var message = 'Already resumed';
          throw IllegalStateException_init_$Create$(toString(message));
      }
    }
  }
  function installParentHandle($this) {
    var tmp0_elvis_lhs = $this.e8().l8(Key_instance_2);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var parent = tmp;
    var handle = invokeOnCompletion(parent, VOID, new ChildContinuation($this));
    $this.s1h_1.atomicfu$compareAndSet(null, handle);
    return handle;
  }
  function invokeOnCancellationImpl($this, handler) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = $this.r1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.invokeOnCancellationImpl.<anonymous>' call
      var state = this_0.kotlinx$atomicfu$value;
      if (state instanceof Active) {
        if ($this.r1h_1.atomicfu$compareAndSet(state, handler))
          return Unit_instance;
      } else {
        var tmp;
        if (!(state == null) ? isInterface(state, CancelHandler) : false) {
          tmp = true;
        } else {
          tmp = state instanceof Segment;
        }
        if (tmp) {
          multipleHandlersError($this, handler, state);
        } else {
          if (state instanceof CompletedExceptionally) {
            if (!state.m1i()) {
              multipleHandlersError($this, handler, state);
            }
            if (state instanceof CancelledContinuation) {
              var tmp13_safe_receiver = state instanceof CompletedExceptionally ? state : null;
              var cause = tmp13_safe_receiver == null ? null : tmp13_safe_receiver.t1f_1;
              if (isInterface(handler, CancelHandler)) {
                $this.j1i(handler, cause);
              } else {
                var segment = handler instanceof Segment ? handler : THROW_CCE();
                callSegmentOnCancellation($this, segment, cause);
              }
            }
            return Unit_instance;
          } else {
            if (state instanceof CompletedContinuation) {
              if (!(state.f1i_1 == null)) {
                multipleHandlersError($this, handler, state);
              }
              if (handler instanceof Segment)
                return Unit_instance;
              if (!isInterface(handler, CancelHandler))
                THROW_CCE();
              if (state.k1i()) {
                $this.j1i(handler, state.i1i_1);
                return Unit_instance;
              }
              var update = state.l1i(VOID, handler);
              if ($this.r1h_1.atomicfu$compareAndSet(state, update))
                return Unit_instance;
            } else {
              if (handler instanceof Segment)
                return Unit_instance;
              if (!isInterface(handler, CancelHandler))
                THROW_CCE();
              var update_0 = new CompletedContinuation(state, handler);
              if ($this.r1h_1.atomicfu$compareAndSet(state, update_0))
                return Unit_instance;
            }
          }
        }
      }
    }
  }
  function multipleHandlersError($this, handler, state) {
    // Inline function 'kotlin.error' call
    var message = "It's prohibited to register multiple handlers, tried to register " + toString(handler) + ', already has ' + toString_0(state);
    throw IllegalStateException_init_$Create$(toString(message));
  }
  function dispatchResume($this, mode) {
    if (tryResume($this))
      return Unit_instance;
    dispatch($this, mode);
  }
  function resumedState($this, state, proposedUpdate, resumeMode, onCancellation, idempotent) {
    var tmp;
    if (proposedUpdate instanceof CompletedExceptionally) {
      // Inline function 'kotlinx.coroutines.assert' call
      // Inline function 'kotlinx.coroutines.assert' call
      tmp = proposedUpdate;
    } else {
      if (!get_isCancellableMode(resumeMode) && idempotent == null) {
        tmp = proposedUpdate;
      } else {
        var tmp_0;
        var tmp_1;
        if (!(onCancellation == null)) {
          tmp_1 = true;
        } else {
          tmp_1 = isInterface(state, CancelHandler);
        }
        if (tmp_1) {
          tmp_0 = true;
        } else {
          tmp_0 = !(idempotent == null);
        }
        if (tmp_0) {
          tmp = new CompletedContinuation(proposedUpdate, isInterface(state, CancelHandler) ? state : null, onCancellation, idempotent);
        } else {
          tmp = proposedUpdate;
        }
      }
    }
    return tmp;
  }
  function alreadyResumedError($this, proposedUpdate) {
    // Inline function 'kotlin.error' call
    var message = 'Already resumed, but proposed with update ' + toString_0(proposedUpdate);
    throw IllegalStateException_init_$Create$(toString(message));
  }
  function detachChildIfNonResuable($this) {
    if (!isReusable($this)) {
      $this.n1i();
    }
  }
  function CancellableContinuationImpl(delegate, resumeMode) {
    DispatchedTask.call(this, resumeMode);
    this.o1h_1 = delegate;
    // Inline function 'kotlinx.coroutines.assert' call
    this.p1h_1 = this.o1h_1.e8();
    var tmp = this;
    // Inline function 'kotlinx.coroutines.decisionAndIndex' call
    var tmp$ret$0 = (0 << 29) + 536870911 | 0;
    tmp.q1h_1 = atomic$int$1(tmp$ret$0);
    this.r1h_1 = atomic$ref$1(Active_instance);
    this.s1h_1 = atomic$ref$1(null);
  }
  protoOf(CancellableContinuationImpl).o1i = function () {
    return this.o1h_1;
  };
  protoOf(CancellableContinuationImpl).e8 = function () {
    return this.p1h_1;
  };
  protoOf(CancellableContinuationImpl).h1g = function () {
    return this.r1h_1.kotlinx$atomicfu$value;
  };
  protoOf(CancellableContinuationImpl).i1g = function () {
    var tmp = this.h1g();
    return !(!(tmp == null) ? isInterface(tmp, NotCompleted) : false);
  };
  protoOf(CancellableContinuationImpl).p1i = function () {
    var tmp0_elvis_lhs = installParentHandle(this);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handle = tmp;
    if (this.i1g()) {
      handle.q1i();
      this.s1h_1.kotlinx$atomicfu$value = NonDisposableHandle_instance;
    }
  };
  protoOf(CancellableContinuationImpl).r1i = function () {
    return this.h1g();
  };
  protoOf(CancellableContinuationImpl).s1i = function (takenState, cause) {
    var this_0 = this.r1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.cancelCompletedResult.<anonymous>' call
      var state = this_0.kotlinx$atomicfu$value;
      if (!(state == null) ? isInterface(state, NotCompleted) : false) {
        // Inline function 'kotlin.error' call
        var message = 'Not completed';
        throw IllegalStateException_init_$Create$(toString(message));
      } else {
        if (state instanceof CompletedExceptionally)
          return Unit_instance;
        else {
          if (state instanceof CompletedContinuation) {
            // Inline function 'kotlin.check' call
            // Inline function 'kotlin.contracts.contract' call
            if (!!state.k1i()) {
              // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.cancelCompletedResult.<anonymous>.<anonymous>' call
              var message_0 = 'Must be called at most once';
              throw IllegalStateException_init_$Create$(toString(message_0));
            }
            var update = state.l1i(VOID, VOID, VOID, VOID, cause);
            if (this.r1h_1.atomicfu$compareAndSet(state, update)) {
              state.t1i(this, cause);
              return Unit_instance;
            }
          } else {
            if (this.r1h_1.atomicfu$compareAndSet(state, new CompletedContinuation(state, VOID, VOID, VOID, cause))) {
              return Unit_instance;
            }
          }
        }
      }
    }
    return Unit_instance;
  };
  protoOf(CancellableContinuationImpl).u1i = function (cause) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.r1h_1;
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.cancel.<anonymous>' call
        var state = this_0.kotlinx$atomicfu$value;
        if (!(!(state == null) ? isInterface(state, NotCompleted) : false))
          return false;
        var tmp;
        if (isInterface(state, CancelHandler)) {
          tmp = true;
        } else {
          tmp = state instanceof Segment;
        }
        var update = new CancelledContinuation(this, cause, tmp);
        if (!this.r1h_1.atomicfu$compareAndSet(state, update)) {
          break $l$block;
        }
        if (isInterface(state, CancelHandler)) {
          this.j1i(state, cause);
        } else {
          if (state instanceof Segment) {
            callSegmentOnCancellation(this, state, cause);
          }
        }
        detachChildIfNonResuable(this);
        dispatchResume(this, this.b1i_1);
        return true;
      }
    }
  };
  protoOf(CancellableContinuationImpl).v1i = function (cause) {
    if (cancelLater(this, cause))
      return Unit_instance;
    this.u1i(cause);
    detachChildIfNonResuable(this);
  };
  protoOf(CancellableContinuationImpl).j1i = function (handler, cause) {
    var tmp;
    try {
      handler.w1i(cause);
      tmp = Unit_instance;
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var ex = $p;
        handleCoroutineException(this.e8(), new CompletionHandlerException('Exception in invokeOnCancellation handler for ' + this.toString(), ex));
        tmp_0 = Unit_instance;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(CancellableContinuationImpl).x1i = function (onCancellation, cause, value) {
    try {
      onCancellation(cause, value, this.e8());
    } catch ($p) {
      if ($p instanceof Error) {
        var ex = $p;
        handleCoroutineException(this.e8(), new CompletionHandlerException('Exception in resume onCancellation handler for ' + this.toString(), ex));
      } else {
        throw $p;
      }
    }
  };
  protoOf(CancellableContinuationImpl).y1i = function (parent) {
    return parent.l1g();
  };
  protoOf(CancellableContinuationImpl).z1i = function () {
    var isReusable_0 = isReusable(this);
    if (trySuspend(this)) {
      if (_get_parentHandle__f8dcex(this) == null) {
        installParentHandle(this);
      }
      if (isReusable_0) {
        this.a1j();
      }
      return get_COROUTINE_SUSPENDED();
    }
    if (isReusable_0) {
      this.a1j();
    }
    var state = this.h1g();
    if (state instanceof CompletedExceptionally)
      throw recoverStackTrace(state.t1f_1, this);
    if (get_isCancellableMode(this.b1i_1)) {
      var job = this.e8().l8(Key_instance_2);
      if (!(job == null) && !job.o1f()) {
        var cause = job.l1g();
        this.s1i(state, cause);
        throw recoverStackTrace(cause, this);
      }
    }
    return this.b1j(state);
  };
  protoOf(CancellableContinuationImpl).a1j = function () {
    var tmp = this.o1h_1;
    var tmp10_safe_receiver = tmp instanceof DispatchedContinuation ? tmp : null;
    var tmp0_elvis_lhs = tmp10_safe_receiver == null ? null : tmp10_safe_receiver.c1j(this);
    var tmp_0;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp_0 = tmp0_elvis_lhs;
    }
    var cancellationCause = tmp_0;
    this.n1i();
    this.u1i(cancellationCause);
  };
  protoOf(CancellableContinuationImpl).j8 = function (result) {
    return this.d1j(toState(result, this), this.b1i_1);
  };
  protoOf(CancellableContinuationImpl).e1j = function (handler) {
    return invokeOnCancellation(this, new UserSupplied(handler));
  };
  protoOf(CancellableContinuationImpl).t1h = function (handler) {
    return invokeOnCancellationImpl(this, handler);
  };
  protoOf(CancellableContinuationImpl).f1j = function (proposedUpdate, resumeMode, onCancellation) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.r1h_1;
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.resumeImpl.<anonymous>' call
        var state = this_0.kotlinx$atomicfu$value;
        if (!(state == null) ? isInterface(state, NotCompleted) : false) {
          var update = resumedState(this, state, proposedUpdate, resumeMode, onCancellation, null);
          if (!this.r1h_1.atomicfu$compareAndSet(state, update)) {
            break $l$block;
          }
          detachChildIfNonResuable(this);
          dispatchResume(this, resumeMode);
          return Unit_instance;
        } else {
          if (state instanceof CancelledContinuation) {
            if (state.j1j()) {
              if (onCancellation == null)
                null;
              else {
                // Inline function 'kotlin.let' call
                // Inline function 'kotlin.contracts.contract' call
                this.x1i(onCancellation, state.t1f_1, proposedUpdate);
              }
              return Unit_instance;
            }
          }
        }
        alreadyResumedError(this, proposedUpdate);
      }
    }
  };
  protoOf(CancellableContinuationImpl).d1j = function (proposedUpdate, resumeMode, onCancellation, $super) {
    onCancellation = onCancellation === VOID ? null : onCancellation;
    var tmp;
    if ($super === VOID) {
      this.f1j(proposedUpdate, resumeMode, onCancellation);
      tmp = Unit_instance;
    } else {
      tmp = $super.f1j.call(this, proposedUpdate, resumeMode, onCancellation);
    }
    return tmp;
  };
  protoOf(CancellableContinuationImpl).n1i = function () {
    var tmp0_elvis_lhs = _get_parentHandle__f8dcex(this);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handle = tmp;
    handle.q1i();
    this.s1h_1.kotlinx$atomicfu$value = NonDisposableHandle_instance;
  };
  protoOf(CancellableContinuationImpl).b1j = function (state) {
    var tmp;
    if (state instanceof CompletedContinuation) {
      var tmp_0 = state.e1i_1;
      tmp = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
    } else {
      tmp = (state == null ? true : !(state == null)) ? state : THROW_CCE();
    }
    return tmp;
  };
  protoOf(CancellableContinuationImpl).k1j = function (state) {
    var tmp20_safe_receiver = protoOf(DispatchedTask).k1j.call(this, state);
    var tmp;
    if (tmp20_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.CancellableContinuationImpl.getExceptionalResult.<anonymous>' call
      tmp = recoverStackTrace(tmp20_safe_receiver, this.o1h_1);
    }
    return tmp;
  };
  protoOf(CancellableContinuationImpl).toString = function () {
    return this.l1j() + '(' + toDebugString(this.o1h_1) + '){' + _get_stateDebugRepresentation__bf18u4(this) + '}@' + get_hexAddress(this);
  };
  protoOf(CancellableContinuationImpl).l1j = function () {
    return 'CancellableContinuation';
  };
  function NotCompleted() {
  }
  function UserSupplied(handler) {
    this.o1j_1 = handler;
  }
  protoOf(UserSupplied).w1i = function (cause) {
    this.o1j_1(cause);
  };
  protoOf(UserSupplied).toString = function () {
    return 'CancelHandler.UserSupplied[' + get_classSimpleName(this.o1j_1) + '@' + get_hexAddress(this) + ']';
  };
  function CancelHandler() {
  }
  function Active() {
  }
  protoOf(Active).toString = function () {
    return 'Active';
  };
  var Active_instance;
  function Active_getInstance() {
    return Active_instance;
  }
  function CompletedContinuation(result, cancelHandler, onCancellation, idempotentResume, cancelCause) {
    cancelHandler = cancelHandler === VOID ? null : cancelHandler;
    onCancellation = onCancellation === VOID ? null : onCancellation;
    idempotentResume = idempotentResume === VOID ? null : idempotentResume;
    cancelCause = cancelCause === VOID ? null : cancelCause;
    this.e1i_1 = result;
    this.f1i_1 = cancelHandler;
    this.g1i_1 = onCancellation;
    this.h1i_1 = idempotentResume;
    this.i1i_1 = cancelCause;
  }
  protoOf(CompletedContinuation).k1i = function () {
    return !(this.i1i_1 == null);
  };
  protoOf(CompletedContinuation).t1i = function (cont, cause) {
    var tmp21_safe_receiver = this.f1i_1;
    if (tmp21_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      cont.j1i(tmp21_safe_receiver, cause);
    }
    var tmp22_safe_receiver = this.g1i_1;
    if (tmp22_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      cont.x1i(tmp22_safe_receiver, cause, this.e1i_1);
    }
  };
  protoOf(CompletedContinuation).p1j = function (result, cancelHandler, onCancellation, idempotentResume, cancelCause) {
    return new CompletedContinuation(result, cancelHandler, onCancellation, idempotentResume, cancelCause);
  };
  protoOf(CompletedContinuation).l1i = function (result, cancelHandler, onCancellation, idempotentResume, cancelCause, $super) {
    result = result === VOID ? this.e1i_1 : result;
    cancelHandler = cancelHandler === VOID ? this.f1i_1 : cancelHandler;
    onCancellation = onCancellation === VOID ? this.g1i_1 : onCancellation;
    idempotentResume = idempotentResume === VOID ? this.h1i_1 : idempotentResume;
    cancelCause = cancelCause === VOID ? this.i1i_1 : cancelCause;
    return $super === VOID ? this.p1j(result, cancelHandler, onCancellation, idempotentResume, cancelCause) : $super.p1j.call(this, result, cancelHandler, onCancellation, idempotentResume, cancelCause);
  };
  protoOf(CompletedContinuation).toString = function () {
    return 'CompletedContinuation(result=' + toString_0(this.e1i_1) + ', cancelHandler=' + toString_0(this.f1i_1) + ', onCancellation=' + toString_0(this.g1i_1) + ', idempotentResume=' + toString_0(this.h1i_1) + ', cancelCause=' + toString_0(this.i1i_1) + ')';
  };
  protoOf(CompletedContinuation).hashCode = function () {
    var result = this.e1i_1 == null ? 0 : hashCode(this.e1i_1);
    result = imul(result, 31) + (this.f1i_1 == null ? 0 : hashCode(this.f1i_1)) | 0;
    result = imul(result, 31) + (this.g1i_1 == null ? 0 : hashCode(this.g1i_1)) | 0;
    result = imul(result, 31) + (this.h1i_1 == null ? 0 : hashCode(this.h1i_1)) | 0;
    result = imul(result, 31) + (this.i1i_1 == null ? 0 : hashCode(this.i1i_1)) | 0;
    return result;
  };
  protoOf(CompletedContinuation).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CompletedContinuation))
      return false;
    var tmp0_other_with_cast = other instanceof CompletedContinuation ? other : THROW_CCE();
    if (!equals(this.e1i_1, tmp0_other_with_cast.e1i_1))
      return false;
    if (!equals(this.f1i_1, tmp0_other_with_cast.f1i_1))
      return false;
    if (!equals(this.g1i_1, tmp0_other_with_cast.g1i_1))
      return false;
    if (!equals(this.h1i_1, tmp0_other_with_cast.h1i_1))
      return false;
    if (!equals(this.i1i_1, tmp0_other_with_cast.i1i_1))
      return false;
    return true;
  };
  function ChildContinuation(child) {
    JobNode.call(this);
    this.u1j_1 = child;
  }
  protoOf(ChildContinuation).v1j = function () {
    return true;
  };
  protoOf(ChildContinuation).w1i = function (cause) {
    this.u1j_1.v1i(this.u1j_1.y1i(this.a1k()));
  };
  function CompletedExceptionally(cause, handled) {
    handled = handled === VOID ? false : handled;
    this.t1f_1 = cause;
    this.u1f_1 = atomic$boolean$1(handled);
  }
  protoOf(CompletedExceptionally).v1f = function () {
    return this.u1f_1.kotlinx$atomicfu$value;
  };
  protoOf(CompletedExceptionally).m1i = function () {
    return this.u1f_1.atomicfu$compareAndSet(false, true);
  };
  protoOf(CompletedExceptionally).toString = function () {
    return get_classSimpleName(this) + '[' + this.t1f_1.toString() + ']';
  };
  function CancelledContinuation(continuation, cause, handled) {
    CompletedExceptionally.call(this, cause == null ? CancellationException_init_$Create$('Continuation ' + toString(continuation) + ' was cancelled normally') : cause, handled);
    this.i1j_1 = atomic$boolean$1(false);
  }
  protoOf(CancelledContinuation).j1j = function () {
    return this.i1j_1.atomicfu$compareAndSet(false, true);
  };
  function toState(_this__u8e3s4, caller) {
    // Inline function 'kotlin.getOrElse' call
    // Inline function 'kotlin.contracts.contract' call
    var exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
    var tmp;
    if (exception == null) {
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      tmp = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
    } else {
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      tmp = new CompletedExceptionally(recoverStackTrace(exception, caller));
    }
    return tmp;
  }
  function toState_0(_this__u8e3s4) {
    // Inline function 'kotlin.getOrElse' call
    // Inline function 'kotlin.contracts.contract' call
    var exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
    var tmp;
    if (exception == null) {
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      tmp = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
    } else {
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      tmp = new CompletedExceptionally(exception);
    }
    return tmp;
  }
  function CoroutineDispatcher$Key$_init_$lambda_akl8b5(it) {
    return it instanceof CoroutineDispatcher ? it : null;
  }
  function Key() {
    Key_instance_0 = this;
    var tmp = Key_instance;
    AbstractCoroutineContextKey.call(this, tmp, CoroutineDispatcher$Key$_init_$lambda_akl8b5);
  }
  var Key_instance_0;
  function Key_getInstance() {
    if (Key_instance_0 == null)
      new Key();
    return Key_instance_0;
  }
  function CoroutineDispatcher() {
    Key_getInstance();
    AbstractCoroutineContextElement.call(this, Key_instance);
  }
  protoOf(CoroutineDispatcher).j1k = function (context) {
    return true;
  };
  protoOf(CoroutineDispatcher).m8 = function (continuation) {
    return new DispatchedContinuation(this, continuation);
  };
  protoOf(CoroutineDispatcher).n8 = function (continuation) {
    var dispatched = continuation instanceof DispatchedContinuation ? continuation : THROW_CCE();
    dispatched.l1k();
  };
  protoOf(CoroutineDispatcher).toString = function () {
    return get_classSimpleName(this) + '@' + get_hexAddress(this);
  };
  function handleCoroutineException(context, exception) {
    try {
      var tmp23_safe_receiver = context.l8(Key_instance_1);
      if (tmp23_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp23_safe_receiver.m1k(context, exception);
        return Unit_instance;
      }
    } catch ($p) {
      if ($p instanceof Error) {
        var t = $p;
        handleUncaughtCoroutineException(context, handlerException(exception, t));
        return Unit_instance;
      } else {
        throw $p;
      }
    }
    handleUncaughtCoroutineException(context, exception);
  }
  function Key_0() {
  }
  var Key_instance_1;
  function Key_getInstance_0() {
    return Key_instance_1;
  }
  function handlerException(originalException, thrownException) {
    if (originalException === thrownException)
      return originalException;
    // Inline function 'kotlin.apply' call
    var this_0 = RuntimeException_init_$Create$('Exception while trying to handle coroutine exception', thrownException);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.handlerException.<anonymous>' call
    addSuppressed(this_0, originalException);
    return this_0;
  }
  function CoroutineScope() {
  }
  function CoroutineScope_0(context) {
    return new ContextScope(!(context.l8(Key_instance_2) == null) ? context : context.md(Job_0()));
  }
  var CoroutineStart_DEFAULT_instance;
  var CoroutineStart_LAZY_instance;
  var CoroutineStart_ATOMIC_instance;
  var CoroutineStart_UNDISPATCHED_instance;
  var CoroutineStart_entriesInitialized;
  function CoroutineStart_initEntries() {
    if (CoroutineStart_entriesInitialized)
      return Unit_instance;
    CoroutineStart_entriesInitialized = true;
    CoroutineStart_DEFAULT_instance = new CoroutineStart('DEFAULT', 0);
    CoroutineStart_LAZY_instance = new CoroutineStart('LAZY', 1);
    CoroutineStart_ATOMIC_instance = new CoroutineStart('ATOMIC', 2);
    CoroutineStart_UNDISPATCHED_instance = new CoroutineStart('UNDISPATCHED', 3);
  }
  function CoroutineStart(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  protoOf(CoroutineStart).e1g = function (block, receiver, completion) {
    var tmp;
    switch (this.e2_1) {
      case 0:
        startCoroutineCancellable_0(block, receiver, completion);
        tmp = Unit_instance;
        break;
      case 2:
        startCoroutine(block, receiver, completion);
        tmp = Unit_instance;
        break;
      case 3:
        startCoroutineUndispatched(block, receiver, completion);
        tmp = Unit_instance;
        break;
      case 1:
        tmp = Unit_instance;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(CoroutineStart).f1h = function () {
    return this === CoroutineStart_LAZY_getInstance();
  };
  function CoroutineStart_DEFAULT_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_DEFAULT_instance;
  }
  function CoroutineStart_LAZY_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_LAZY_instance;
  }
  function CoroutineStart_UNDISPATCHED_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_UNDISPATCHED_instance;
  }
  function delta($this, unconfined) {
    return unconfined ? new Long(0, 1) : new Long(1, 0);
  }
  function EventLoop() {
    CoroutineDispatcher.call(this);
    this.o1k_1 = new Long(0, 0);
    this.p1k_1 = false;
    this.q1k_1 = null;
  }
  protoOf(EventLoop).r1k = function () {
    var tmp0_elvis_lhs = this.q1k_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    var tmp1_elvis_lhs = queue.xb();
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      return false;
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var task = tmp_0;
    task.m1j();
    return true;
  };
  protoOf(EventLoop).s1k = function (task) {
    var tmp0_elvis_lhs = this.q1k_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = ArrayDeque_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.EventLoop.dispatchUnconfined.<anonymous>' call
      this.q1k_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    queue.vb(task);
  };
  protoOf(EventLoop).t1k = function () {
    return this.o1k_1.z(delta(this, true)) >= 0;
  };
  protoOf(EventLoop).u1k = function () {
    var tmp27_safe_receiver = this.q1k_1;
    var tmp0_elvis_lhs = tmp27_safe_receiver == null ? null : tmp27_safe_receiver.n();
    return tmp0_elvis_lhs == null ? true : tmp0_elvis_lhs;
  };
  protoOf(EventLoop).v1k = function (unconfined) {
    this.o1k_1 = this.o1k_1.k2(delta(this, unconfined));
    if (!unconfined)
      this.p1k_1 = true;
  };
  protoOf(EventLoop).w1k = function (unconfined) {
    this.o1k_1 = this.o1k_1.l2(delta(this, unconfined));
    if (this.o1k_1.z(new Long(0, 0)) > 0)
      return Unit_instance;
    // Inline function 'kotlinx.coroutines.assert' call
    if (this.p1k_1) {
      this.x1k();
    }
  };
  protoOf(EventLoop).x1k = function () {
  };
  function ThreadLocalEventLoop() {
    ThreadLocalEventLoop_instance = this;
    this.y1k_1 = commonThreadLocal(new Symbol('ThreadLocalEventLoop'));
  }
  protoOf(ThreadLocalEventLoop).z1k = function () {
    var tmp0_elvis_lhs = this.y1k_1.b1l();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = createEventLoop();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.ThreadLocalEventLoop.<get-eventLoop>.<anonymous>' call
      ThreadLocalEventLoop_getInstance().y1k_1.c1l(this_0);
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  var ThreadLocalEventLoop_instance;
  function ThreadLocalEventLoop_getInstance() {
    if (ThreadLocalEventLoop_instance == null)
      new ThreadLocalEventLoop();
    return ThreadLocalEventLoop_instance;
  }
  function CompletionHandlerException(message, cause) {
    RuntimeException_init_$Init$(message, cause, this);
    captureStack(this, CompletionHandlerException);
  }
  function CoroutinesInternalError(message, cause) {
    Error_init_$Init$(message, cause, this);
    captureStack(this, CoroutinesInternalError);
  }
  function Key_1() {
  }
  var Key_instance_2;
  function Key_getInstance_1() {
    return Key_instance_2;
  }
  function Job() {
  }
  function ParentJob() {
  }
  function NonDisposableHandle() {
  }
  protoOf(NonDisposableHandle).q1i = function () {
  };
  protoOf(NonDisposableHandle).w1g = function (cause) {
    return false;
  };
  protoOf(NonDisposableHandle).toString = function () {
    return 'NonDisposableHandle';
  };
  var NonDisposableHandle_instance;
  function NonDisposableHandle_getInstance() {
    return NonDisposableHandle_instance;
  }
  function invokeOnCompletion(_this__u8e3s4, invokeImmediately, handler) {
    invokeImmediately = invokeImmediately === VOID ? true : invokeImmediately;
    var tmp;
    if (_this__u8e3s4 instanceof JobSupport) {
      tmp = _this__u8e3s4.p1g(invokeImmediately, handler);
    } else {
      var tmp_0 = handler.v1j();
      tmp = _this__u8e3s4.o1g(tmp_0, invokeImmediately, JobNode$invoke$ref(handler));
    }
    return tmp;
  }
  function Job_0(parent) {
    parent = parent === VOID ? null : parent;
    return new JobImpl(parent);
  }
  function JobNode$invoke$ref($boundThis) {
    var l = function (p0) {
      $boundThis.w1i(p0);
      return Unit_instance;
    };
    l.callableName = 'invoke';
    return l;
  }
  function get_COMPLETING_ALREADY() {
    _init_properties_JobSupport_kt__68f172();
    return COMPLETING_ALREADY;
  }
  var COMPLETING_ALREADY;
  function get_COMPLETING_WAITING_CHILDREN() {
    _init_properties_JobSupport_kt__68f172();
    return COMPLETING_WAITING_CHILDREN;
  }
  var COMPLETING_WAITING_CHILDREN;
  function get_COMPLETING_RETRY() {
    _init_properties_JobSupport_kt__68f172();
    return COMPLETING_RETRY;
  }
  var COMPLETING_RETRY;
  function get_TOO_LATE_TO_CANCEL() {
    _init_properties_JobSupport_kt__68f172();
    return TOO_LATE_TO_CANCEL;
  }
  var TOO_LATE_TO_CANCEL;
  function get_SEALED() {
    _init_properties_JobSupport_kt__68f172();
    return SEALED;
  }
  var SEALED;
  function get_EMPTY_NEW() {
    _init_properties_JobSupport_kt__68f172();
    return EMPTY_NEW;
  }
  var EMPTY_NEW;
  function get_EMPTY_ACTIVE() {
    _init_properties_JobSupport_kt__68f172();
    return EMPTY_ACTIVE;
  }
  var EMPTY_ACTIVE;
  function Empty(isActive) {
    this.d1l_1 = isActive;
  }
  protoOf(Empty).o1f = function () {
    return this.d1l_1;
  };
  protoOf(Empty).b1k = function () {
    return null;
  };
  protoOf(Empty).toString = function () {
    return 'Empty{' + (this.d1l_1 ? 'Active' : 'New') + '}';
  };
  function Incomplete() {
  }
  function NodeList() {
    LockFreeLinkedListHead.call(this);
  }
  protoOf(NodeList).o1f = function () {
    return true;
  };
  protoOf(NodeList).b1k = function () {
    return this;
  };
  protoOf(NodeList).h1l = function (state) {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.NodeList.getString.<anonymous>' call
    this_0.d7('List{');
    this_0.d7(state);
    this_0.d7('}[');
    var first = true;
    // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListHead.forEach' call
    var cur = this.c1k_1;
    while (!equals(cur, this)) {
      // Inline function 'kotlinx.coroutines.NodeList.getString.<anonymous>.<anonymous>' call
      var node = cur;
      if (node instanceof JobNode) {
        if (first) {
          first = false;
        } else
          this_0.d7(', ');
        this_0.c7(node);
      }
      cur = cur.c1k_1;
    }
    this_0.d7(']');
    return this_0.toString();
  };
  protoOf(NodeList).toString = function () {
    return get_DEBUG() ? this.h1l('Active') : protoOf(LockFreeLinkedListHead).toString.call(this);
  };
  function JobNode() {
    LockFreeLinkedListNode.call(this);
  }
  protoOf(JobNode).a1k = function () {
    var tmp = this.z1j_1;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('job');
    }
  };
  protoOf(JobNode).o1f = function () {
    return true;
  };
  protoOf(JobNode).b1k = function () {
    return null;
  };
  protoOf(JobNode).q1i = function () {
    return this.a1k().q1g(this);
  };
  protoOf(JobNode).toString = function () {
    return get_classSimpleName(this) + '@' + get_hexAddress(this) + '[job@' + get_hexAddress(this.a1k()) + ']';
  };
  function _set_exceptionsHolder__tqm22h($this, value) {
    $this.m1l_1.kotlinx$atomicfu$value = value;
  }
  function _get_exceptionsHolder__nhszp($this) {
    return $this.m1l_1.kotlinx$atomicfu$value;
  }
  function allocateList($this) {
    return ArrayList_init_$Create$(4);
  }
  function finalizeFinishingState($this, state, proposedUpdate) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    var tmp46_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
    var proposedException = tmp46_safe_receiver == null ? null : tmp46_safe_receiver.t1f_1;
    var wasCancelling;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
    // Inline function 'kotlinx.coroutines.JobSupport.finalizeFinishingState.<anonymous>' call
    wasCancelling = state.n1l();
    var exceptions = state.o1l(proposedException);
    var finalCause = getFinalRootCause($this, state, exceptions);
    if (!(finalCause == null)) {
      addSuppressedExceptions($this, finalCause, exceptions);
    }
    var finalException = finalCause;
    var finalState = finalException == null ? proposedUpdate : finalException === proposedException ? proposedUpdate : new CompletedExceptionally(finalException);
    if (!(finalException == null)) {
      var handled = cancelParent($this, finalException) || $this.d1h(finalException);
      if (handled) {
        (finalState instanceof CompletedExceptionally ? finalState : THROW_CCE()).m1i();
      }
    }
    if (!wasCancelling) {
      $this.a1h(finalException);
    }
    $this.s1f(finalState);
    var casSuccess = $this.h1f_1.atomicfu$compareAndSet(state, boxIncomplete(finalState));
    // Inline function 'kotlinx.coroutines.assert' call
    completeStateFinalization($this, state, finalState);
    return finalState;
  }
  function getFinalRootCause($this, state, exceptions) {
    if (exceptions.n()) {
      if (state.n1l()) {
        // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
        return new JobCancellationException( true ? $this.r1f() : 0, null, $this);
      }
      return null;
    }
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = exceptions.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlinx.coroutines.JobSupport.getFinalRootCause.<anonymous>' call
        if (!(element instanceof CancellationException)) {
          tmp$ret$2 = element;
          break $l$block;
        }
      }
      tmp$ret$2 = null;
    }
    var firstNonCancellation = tmp$ret$2;
    if (!(firstNonCancellation == null))
      return firstNonCancellation;
    var first = exceptions.o(0);
    if (first instanceof TimeoutCancellationException) {
      var tmp$ret$4;
      $l$block_0: {
        // Inline function 'kotlin.collections.firstOrNull' call
        var tmp0_iterator_0 = exceptions.j();
        while (tmp0_iterator_0.k()) {
          var element_0 = tmp0_iterator_0.l();
          // Inline function 'kotlinx.coroutines.JobSupport.getFinalRootCause.<anonymous>' call
          var tmp;
          if (!(element_0 === first)) {
            tmp = element_0 instanceof TimeoutCancellationException;
          } else {
            tmp = false;
          }
          if (tmp) {
            tmp$ret$4 = element_0;
            break $l$block_0;
          }
        }
        tmp$ret$4 = null;
      }
      var detailedTimeoutException = tmp$ret$4;
      if (!(detailedTimeoutException == null))
        return detailedTimeoutException;
    }
    return first;
  }
  function addSuppressedExceptions($this, rootCause, exceptions) {
    if (exceptions.m() <= 1)
      return Unit_instance;
    var seenExceptions = identitySet(exceptions.m());
    var unwrappedCause = unwrap(rootCause);
    var _iterator__ex2g4s = exceptions.j();
    while (_iterator__ex2g4s.k()) {
      var exception = _iterator__ex2g4s.l();
      var unwrapped = unwrap(exception);
      var tmp;
      var tmp_0;
      if (!(unwrapped === rootCause) && !(unwrapped === unwrappedCause)) {
        tmp_0 = !(unwrapped instanceof CancellationException);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = seenExceptions.e(unwrapped);
      } else {
        tmp = false;
      }
      if (tmp) {
        addSuppressed(rootCause, unwrapped);
      }
    }
  }
  function tryFinalizeSimpleState($this, state, update) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    if (!$this.h1f_1.atomicfu$compareAndSet(state, boxIncomplete(update)))
      return false;
    $this.a1h(null);
    $this.s1f(update);
    completeStateFinalization($this, state, update);
    return true;
  }
  function completeStateFinalization($this, state, update) {
    var tmp47_safe_receiver = $this.g1g();
    if (tmp47_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp47_safe_receiver.q1i();
      $this.f1g(NonDisposableHandle_instance);
    }
    var tmp48_safe_receiver = update instanceof CompletedExceptionally ? update : null;
    var cause = tmp48_safe_receiver == null ? null : tmp48_safe_receiver.t1f_1;
    if (state instanceof JobNode) {
      try {
        state.w1i(cause);
      } catch ($p) {
        if ($p instanceof Error) {
          var ex = $p;
          $this.z1f(new CompletionHandlerException('Exception in completion handler ' + state.toString() + ' for ' + $this.toString(), ex));
        } else {
          throw $p;
        }
      }
    } else {
      var tmp49_safe_receiver = state.b1k();
      if (tmp49_safe_receiver == null)
        null;
      else {
        notifyCompletion(tmp49_safe_receiver, $this, cause);
      }
    }
  }
  function notifyCancelling($this, list, cause) {
    $this.a1h(cause);
    list.i1l(4);
    // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers' call
    var exception = null;
    // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListHead.forEach' call
    var cur = list.c1k_1;
    while (!equals(cur, list)) {
      // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>' call
      var node = cur;
      var tmp;
      if (node instanceof JobNode) {
        // Inline function 'kotlinx.coroutines.JobSupport.notifyCancelling.<anonymous>' call
        tmp = node.v1j();
      } else {
        tmp = false;
      }
      if (tmp) {
        try {
          node.w1i(cause);
        } catch ($p) {
          if ($p instanceof Error) {
            var ex = $p;
            var tmp50_safe_receiver = exception;
            var tmp_0;
            if (tmp50_safe_receiver == null) {
              tmp_0 = null;
            } else {
              // Inline function 'kotlin.apply' call
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>.<anonymous>' call
              addSuppressed(tmp50_safe_receiver, ex);
              tmp_0 = tmp50_safe_receiver;
            }
            if (tmp_0 == null) {
              // Inline function 'kotlin.run' call
              // Inline function 'kotlin.contracts.contract' call
              exception = new CompletionHandlerException('Exception in completion handler ' + node.toString() + ' for ' + $this.toString(), ex);
            }
          } else {
            throw $p;
          }
        }
      }
      cur = cur.c1k_1;
    }
    var tmp51_safe_receiver = exception;
    if (tmp51_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      $this.z1f(tmp51_safe_receiver);
    }
    cancelParent($this, cause);
  }
  function cancelParent($this, cause) {
    if ($this.b1h())
      return true;
    var isCancellation = cause instanceof CancellationException;
    var parent = $this.g1g();
    if (parent === null || parent === NonDisposableHandle_instance) {
      return isCancellation;
    }
    return parent.w1g(cause) || isCancellation;
  }
  function notifyCompletion(_this__u8e3s4, $this, cause) {
    _this__u8e3s4.i1l(1);
    // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers' call
    var exception = null;
    // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListHead.forEach' call
    var cur = _this__u8e3s4.c1k_1;
    while (!equals(cur, _this__u8e3s4)) {
      // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>' call
      var node = cur;
      var tmp;
      if (node instanceof JobNode) {
        // Inline function 'kotlinx.coroutines.JobSupport.notifyCompletion.<anonymous>' call
        tmp = true;
      } else {
        tmp = false;
      }
      if (tmp) {
        try {
          node.w1i(cause);
        } catch ($p) {
          if ($p instanceof Error) {
            var ex = $p;
            var tmp50_safe_receiver = exception;
            var tmp_0;
            if (tmp50_safe_receiver == null) {
              tmp_0 = null;
            } else {
              // Inline function 'kotlin.apply' call
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>.<anonymous>' call
              addSuppressed(tmp50_safe_receiver, ex);
              tmp_0 = tmp50_safe_receiver;
            }
            if (tmp_0 == null) {
              // Inline function 'kotlin.run' call
              // Inline function 'kotlin.contracts.contract' call
              exception = new CompletionHandlerException('Exception in completion handler ' + node.toString() + ' for ' + $this.toString(), ex);
            }
          } else {
            throw $p;
          }
        }
      }
      cur = cur.c1k_1;
    }
    var tmp51_safe_receiver = exception;
    if (tmp51_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      $this.z1f(tmp51_safe_receiver);
    }
  }
  function startInternal($this, state) {
    if (state instanceof Empty) {
      if (state.d1l_1)
        return 0;
      if (!$this.h1f_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE()))
        return -1;
      $this.k1g();
      return 1;
    } else {
      if (state instanceof InactiveNodeList) {
        if (!$this.h1f_1.atomicfu$compareAndSet(state, state.p1l_1))
          return -1;
        $this.k1g();
        return 1;
      } else {
        return 0;
      }
    }
  }
  function promoteEmptyToNodeList($this, state) {
    var list = new NodeList();
    var update = state.d1l_1 ? list : new InactiveNodeList(list);
    $this.h1f_1.atomicfu$compareAndSet(state, update);
  }
  function promoteSingleToNodeList($this, state) {
    state.h1k(new NodeList());
    // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListNode.nextNode' call
    var list = state.c1k_1;
    $this.h1f_1.atomicfu$compareAndSet(state, list);
  }
  function cancelMakeCompleting($this, cause) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.cancelMakeCompleting.<anonymous>' call
      var state = $this.h1g();
      var tmp;
      if (!(!(state == null) ? isInterface(state, Incomplete) : false)) {
        tmp = true;
      } else {
        var tmp_0;
        if (state instanceof Finishing) {
          tmp_0 = state.q1l();
        } else {
          tmp_0 = false;
        }
        tmp = tmp_0;
      }
      if (tmp) {
        return get_COMPLETING_ALREADY();
      }
      var proposedUpdate = new CompletedExceptionally(createCauseException($this, cause));
      var finalState = tryMakeCompleting($this, state, proposedUpdate);
      if (!(finalState === get_COMPLETING_RETRY()))
        return finalState;
    }
  }
  function createCauseException($this, cause) {
    var tmp;
    if (cause == null ? true : cause instanceof Error) {
      var tmp_0;
      if (cause == null) {
        // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
        tmp_0 = new JobCancellationException( true ? $this.r1f() : 0, null, $this);
      } else {
        tmp_0 = cause;
      }
      tmp = tmp_0;
    } else {
      tmp = ((!(cause == null) ? isInterface(cause, ParentJob) : false) ? cause : THROW_CCE()).y1g();
    }
    return tmp;
  }
  function makeCancelling($this, cause) {
    var causeExceptionCache = null;
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>' call
        var state = $this.h1g();
        if (state instanceof Finishing) {
          // Inline function 'kotlinx.coroutines.internal.synchronized' call
          // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
          // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>' call
          if (state.r1l())
            return get_TOO_LATE_TO_CANCEL();
          var wasCancelling = state.n1l();
          if (!(cause == null) || !wasCancelling) {
            var tmp0_elvis_lhs = causeExceptionCache;
            var tmp;
            if (tmp0_elvis_lhs == null) {
              // Inline function 'kotlin.also' call
              var this_0 = createCauseException($this, cause);
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>.<anonymous>' call
              causeExceptionCache = this_0;
              tmp = this_0;
            } else {
              tmp = tmp0_elvis_lhs;
            }
            var causeException = tmp;
            state.s1l(causeException);
          }
          // Inline function 'kotlin.takeIf' call
          var this_1 = state.t1l();
          // Inline function 'kotlin.contracts.contract' call
          var tmp_0;
          // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>.<anonymous>' call
          if (!wasCancelling) {
            tmp_0 = this_1;
          } else {
            tmp_0 = null;
          }
          var notifyRootCause = tmp_0;
          if (notifyRootCause == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            notifyCancelling($this, state.j1l_1, notifyRootCause);
          }
          return get_COMPLETING_ALREADY();
        } else {
          if (!(state == null) ? isInterface(state, Incomplete) : false) {
            var tmp0_elvis_lhs_0 = causeExceptionCache;
            var tmp_1;
            if (tmp0_elvis_lhs_0 == null) {
              // Inline function 'kotlin.also' call
              var this_2 = createCauseException($this, cause);
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>' call
              causeExceptionCache = this_2;
              tmp_1 = this_2;
            } else {
              tmp_1 = tmp0_elvis_lhs_0;
            }
            var causeException_0 = tmp_1;
            if (state.o1f()) {
              if (tryMakeCancelling($this, state, causeException_0))
                return get_COMPLETING_ALREADY();
            } else {
              var finalState = tryMakeCompleting($this, state, new CompletedExceptionally(causeException_0));
              if (finalState === get_COMPLETING_ALREADY()) {
                // Inline function 'kotlin.error' call
                var message = 'Cannot happen in ' + toString(state);
                throw IllegalStateException_init_$Create$(toString(message));
              } else if (finalState === get_COMPLETING_RETRY()) {
                break $l$block;
              } else
                return finalState;
            }
          } else {
            return get_TOO_LATE_TO_CANCEL();
          }
        }
      }
    }
  }
  function getOrPromoteCancellingList($this, state) {
    var tmp0_elvis_lhs = state.b1k();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp_0;
      if (state instanceof Empty) {
        tmp_0 = new NodeList();
      } else {
        if (state instanceof JobNode) {
          promoteSingleToNodeList($this, state);
          tmp_0 = null;
        } else {
          var message = 'State should have list: ' + toString(state);
          throw IllegalStateException_init_$Create$(toString(message));
        }
      }
      tmp = tmp_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function tryMakeCancelling($this, state, rootCause) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var list = tmp;
    var cancelling = new Finishing(list, false, rootCause);
    if (!$this.h1f_1.atomicfu$compareAndSet(state, cancelling))
      return false;
    notifyCancelling($this, list, rootCause);
    return true;
  }
  function tryMakeCompleting($this, state, proposedUpdate) {
    if (!(!(state == null) ? isInterface(state, Incomplete) : false))
      return get_COMPLETING_ALREADY();
    var tmp;
    var tmp_0;
    var tmp_1;
    if (state instanceof Empty) {
      tmp_1 = true;
    } else {
      tmp_1 = state instanceof JobNode;
    }
    if (tmp_1) {
      tmp_0 = !(state instanceof ChildHandleNode);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = !(proposedUpdate instanceof CompletedExceptionally);
    } else {
      tmp = false;
    }
    if (tmp) {
      if (tryFinalizeSimpleState($this, state, proposedUpdate)) {
        return proposedUpdate;
      }
      return get_COMPLETING_RETRY();
    }
    return tryMakeCompletingSlowPath($this, state, proposedUpdate);
  }
  function tryMakeCompletingSlowPath($this, state, proposedUpdate) {
    var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return get_COMPLETING_RETRY();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var list = tmp;
    var tmp1_elvis_lhs = state instanceof Finishing ? state : null;
    var finishing = tmp1_elvis_lhs == null ? new Finishing(list, false, null) : tmp1_elvis_lhs;
    var notifyRootCause;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
    if (finishing.q1l())
      return get_COMPLETING_ALREADY();
    finishing.u1l(true);
    if (!(finishing === state)) {
      if (!$this.h1f_1.atomicfu$compareAndSet(state, finishing))
        return get_COMPLETING_RETRY();
    }
    // Inline function 'kotlinx.coroutines.assert' call
    var wasCancelling = finishing.n1l();
    var tmp65_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
    if (tmp65_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      finishing.s1l(tmp65_safe_receiver.t1f_1);
    }
    // Inline function 'kotlin.takeIf' call
    var this_0 = finishing.t1l();
    // Inline function 'kotlin.contracts.contract' call
    var tmp_0;
    // Inline function 'kotlinx.coroutines.JobSupport.tryMakeCompletingSlowPath.<anonymous>.<anonymous>' call
    if (!wasCancelling) {
      tmp_0 = this_0;
    } else {
      tmp_0 = null;
    }
    notifyRootCause = tmp_0;
    if (notifyRootCause == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      notifyCancelling($this, list, notifyRootCause);
    }
    var child = nextChild(list, $this);
    if (!(child == null) && tryWaitForChild($this, finishing, child, proposedUpdate))
      return get_COMPLETING_WAITING_CHILDREN();
    list.i1l(2);
    var anotherChild = nextChild(list, $this);
    if (!(anotherChild == null) && tryWaitForChild($this, finishing, anotherChild, proposedUpdate))
      return get_COMPLETING_WAITING_CHILDREN();
    return finalizeFinishingState($this, finishing, proposedUpdate);
  }
  function _get_exceptionOrNull__b3j7js(_this__u8e3s4, $this) {
    var tmp67_safe_receiver = _this__u8e3s4 instanceof CompletedExceptionally ? _this__u8e3s4 : null;
    return tmp67_safe_receiver == null ? null : tmp67_safe_receiver.t1f_1;
  }
  function tryWaitForChild($this, state, child, proposedUpdate) {
    var $this_0 = $this;
    var state_0 = state;
    var child_0 = child;
    var proposedUpdate_0 = proposedUpdate;
    $l$1: do {
      $l$0: do {
        var handle = invokeOnCompletion(child_0.z1l_1, false, new ChildCompletion($this_0, state_0, child_0, proposedUpdate_0));
        if (!(handle === NonDisposableHandle_instance))
          return true;
        var tmp0_elvis_lhs = nextChild(child_0, $this_0);
        var tmp;
        if (tmp0_elvis_lhs == null) {
          return false;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var nextChild_0 = tmp;
        $this_0 = $this_0;
        state_0 = state_0;
        child_0 = nextChild_0;
        proposedUpdate_0 = proposedUpdate_0;
        continue $l$0;
      }
       while (false);
    }
     while (true);
  }
  function continueCompleting($this, state, lastChild, proposedUpdate) {
    // Inline function 'kotlinx.coroutines.assert' call
    var waitChild = nextChild(lastChild, $this);
    if (!(waitChild == null) && tryWaitForChild($this, state, waitChild, proposedUpdate))
      return Unit_instance;
    state.j1l_1.i1l(2);
    var waitChildAgain = nextChild(lastChild, $this);
    if (!(waitChildAgain == null) && tryWaitForChild($this, state, waitChildAgain, proposedUpdate)) {
      return Unit_instance;
    }
    var finalState = finalizeFinishingState($this, state, proposedUpdate);
    $this.y1f(finalState);
  }
  function nextChild(_this__u8e3s4, $this) {
    var cur = _this__u8e3s4;
    $l$loop: while (true) {
      // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved' call
      if (!cur.e1k_1) {
        break $l$loop;
      }
      // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListNode.prevNode' call
      cur = cur.d1k_1;
    }
    $l$loop_0: while (true) {
      // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListNode.nextNode' call
      cur = cur.c1k_1;
      // Inline function 'kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved' call
      if (cur.e1k_1)
        continue $l$loop_0;
      if (cur instanceof ChildHandleNode)
        return cur;
      if (cur instanceof NodeList)
        return null;
    }
  }
  function stateString($this, state) {
    var tmp;
    if (state instanceof Finishing) {
      tmp = state.n1l() ? 'Cancelling' : state.q1l() ? 'Completing' : 'Active';
    } else {
      if (!(state == null) ? isInterface(state, Incomplete) : false) {
        tmp = state.o1f() ? 'Active' : 'New';
      } else {
        if (state instanceof CompletedExceptionally) {
          tmp = 'Cancelled';
        } else {
          tmp = 'Completed';
        }
      }
    }
    return tmp;
  }
  function Finishing(list, isCompleting, rootCause) {
    SynchronizedObject.call(this);
    this.j1l_1 = list;
    this.k1l_1 = atomic$boolean$1(isCompleting);
    this.l1l_1 = atomic$ref$1(rootCause);
    this.m1l_1 = atomic$ref$1(null);
  }
  protoOf(Finishing).b1k = function () {
    return this.j1l_1;
  };
  protoOf(Finishing).u1l = function (value) {
    this.k1l_1.kotlinx$atomicfu$value = value;
  };
  protoOf(Finishing).q1l = function () {
    return this.k1l_1.kotlinx$atomicfu$value;
  };
  protoOf(Finishing).a1m = function (value) {
    this.l1l_1.kotlinx$atomicfu$value = value;
  };
  protoOf(Finishing).t1l = function () {
    return this.l1l_1.kotlinx$atomicfu$value;
  };
  protoOf(Finishing).r1l = function () {
    return _get_exceptionsHolder__nhszp(this) === get_SEALED();
  };
  protoOf(Finishing).n1l = function () {
    return !(this.t1l() == null);
  };
  protoOf(Finishing).o1f = function () {
    return this.t1l() == null;
  };
  protoOf(Finishing).o1l = function (proposedException) {
    var eh = _get_exceptionsHolder__nhszp(this);
    var tmp;
    if (eh == null) {
      tmp = allocateList(this);
    } else {
      if (eh instanceof Error) {
        // Inline function 'kotlin.also' call
        var this_0 = allocateList(this);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.Finishing.sealLocked.<anonymous>' call
        this_0.e(eh);
        tmp = this_0;
      } else {
        if (eh instanceof ArrayList) {
          tmp = eh instanceof ArrayList ? eh : THROW_CCE();
        } else {
          var message = 'State is ' + toString_0(eh);
          throw IllegalStateException_init_$Create$(toString(message));
        }
      }
    }
    var list = tmp;
    var rootCause = this.t1l();
    if (rootCause == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      list.v3(0, rootCause);
    }
    if (!(proposedException == null) && !equals(proposedException, rootCause)) {
      list.e(proposedException);
    }
    _set_exceptionsHolder__tqm22h(this, get_SEALED());
    return list;
  };
  protoOf(Finishing).s1l = function (exception) {
    var rootCause = this.t1l();
    if (rootCause == null) {
      this.a1m(exception);
      return Unit_instance;
    }
    if (exception === rootCause)
      return Unit_instance;
    var eh = _get_exceptionsHolder__nhszp(this);
    if (eh == null) {
      _set_exceptionsHolder__tqm22h(this, exception);
    } else {
      if (eh instanceof Error) {
        if (exception === eh)
          return Unit_instance;
        // Inline function 'kotlin.apply' call
        var this_0 = allocateList(this);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.Finishing.addExceptionLocked.<anonymous>' call
        this_0.e(eh);
        this_0.e(exception);
        _set_exceptionsHolder__tqm22h(this, this_0);
      } else {
        if (eh instanceof ArrayList) {
          (eh instanceof ArrayList ? eh : THROW_CCE()).e(exception);
        } else {
          var message = 'State is ' + toString_0(eh);
          throw IllegalStateException_init_$Create$(toString(message));
        }
      }
    }
  };
  protoOf(Finishing).toString = function () {
    return 'Finishing[cancelling=' + this.n1l() + ', completing=' + this.q1l() + ', rootCause=' + toString_0(this.t1l()) + ', exceptions=' + toString_0(_get_exceptionsHolder__nhszp(this)) + ', list=' + this.j1l_1.toString() + ']';
  };
  function ChildCompletion(parent, state, child, proposedUpdate) {
    JobNode.call(this);
    this.f1m_1 = parent;
    this.g1m_1 = state;
    this.h1m_1 = child;
    this.i1m_1 = proposedUpdate;
  }
  protoOf(ChildCompletion).v1j = function () {
    return false;
  };
  protoOf(ChildCompletion).w1i = function (cause) {
    continueCompleting(this.f1m_1, this.g1m_1, this.h1m_1, this.i1m_1);
  };
  function JobSupport(active) {
    this.h1f_1 = atomic$ref$1(active ? get_EMPTY_ACTIVE() : get_EMPTY_NEW());
    this.i1f_1 = atomic$ref$1(null);
  }
  protoOf(JobSupport).t1 = function () {
    return Key_instance_2;
  };
  protoOf(JobSupport).f1g = function (value) {
    this.i1f_1.kotlinx$atomicfu$value = value;
  };
  protoOf(JobSupport).g1g = function () {
    return this.i1f_1.kotlinx$atomicfu$value;
  };
  protoOf(JobSupport).j1f = function (parent) {
    // Inline function 'kotlinx.coroutines.assert' call
    if (parent == null) {
      this.f1g(NonDisposableHandle_instance);
      return Unit_instance;
    }
    parent.j1g();
    var handle = parent.z1g(this);
    this.f1g(handle);
    if (this.i1g()) {
      handle.q1i();
      this.f1g(NonDisposableHandle_instance);
    }
  };
  protoOf(JobSupport).h1g = function () {
    return this.h1f_1.kotlinx$atomicfu$value;
  };
  protoOf(JobSupport).o1f = function () {
    var state = this.h1g();
    var tmp;
    if (!(state == null) ? isInterface(state, Incomplete) : false) {
      tmp = state.o1f();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(JobSupport).i1g = function () {
    var tmp = this.h1g();
    return !(!(tmp == null) ? isInterface(tmp, Incomplete) : false);
  };
  protoOf(JobSupport).j1g = function () {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.start.<anonymous>' call
      var state = this.h1g();
      var tmp52_subject = startInternal(this, state);
      if (tmp52_subject === 0)
        return false;
      else if (tmp52_subject === 1)
        return true;
    }
  };
  protoOf(JobSupport).k1g = function () {
  };
  protoOf(JobSupport).l1g = function () {
    var state = this.h1g();
    var tmp;
    if (state instanceof Finishing) {
      var tmp54_safe_receiver = state.t1l();
      var tmp0_elvis_lhs = tmp54_safe_receiver == null ? null : this.m1g(tmp54_safe_receiver, get_classSimpleName(this) + ' is cancelling');
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        var message = 'Job is still new or active: ' + this.toString();
        throw IllegalStateException_init_$Create$(toString(message));
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      if (!(state == null) ? isInterface(state, Incomplete) : false) {
        var message_0 = 'Job is still new or active: ' + this.toString();
        throw IllegalStateException_init_$Create$(toString(message_0));
      } else {
        if (state instanceof CompletedExceptionally) {
          tmp = this.n1g(state.t1f_1);
        } else {
          tmp = new JobCancellationException(get_classSimpleName(this) + ' has completed normally', null, this);
        }
      }
    }
    return tmp;
  };
  protoOf(JobSupport).m1g = function (_this__u8e3s4, message) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof CancellationException ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
      tmp = new JobCancellationException(message == null ? this.r1f() : message, _this__u8e3s4, this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(JobSupport).n1g = function (_this__u8e3s4, message, $super) {
    message = message === VOID ? null : message;
    return $super === VOID ? this.m1g(_this__u8e3s4, message) : $super.m1g.call(this, _this__u8e3s4, message);
  };
  protoOf(JobSupport).o1g = function (onCancelling, invokeImmediately, handler) {
    var tmp;
    if (onCancelling) {
      tmp = new InvokeOnCancelling(handler);
    } else {
      tmp = new InvokeOnCompletion(handler);
    }
    return this.p1g(invokeImmediately, tmp);
  };
  protoOf(JobSupport).p1g = function (invokeImmediately, node) {
    node.z1j_1 = this;
    var tmp$ret$0;
    $l$block_1: {
      // Inline function 'kotlinx.coroutines.JobSupport.tryPutNodeIntoList' call
      // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
      while (true) {
        // Inline function 'kotlinx.coroutines.JobSupport.tryPutNodeIntoList.<anonymous>' call
        var state = this.h1g();
        if (state instanceof Empty) {
          if (state.d1l_1) {
            if (this.h1f_1.atomicfu$compareAndSet(state, node)) {
              tmp$ret$0 = true;
              break $l$block_1;
            }
          } else {
            promoteEmptyToNodeList(this, state);
          }
        } else {
          if (!(state == null) ? isInterface(state, Incomplete) : false) {
            var list = state.b1k();
            if (list == null) {
              promoteSingleToNodeList(this, state instanceof JobNode ? state : THROW_CCE());
            } else {
              // Inline function 'kotlinx.coroutines.JobSupport.invokeOnCompletionInternal.<anonymous>' call
              var tmp;
              if (node.v1j()) {
                var tmp55_safe_receiver = state instanceof Finishing ? state : null;
                var rootCause = tmp55_safe_receiver == null ? null : tmp55_safe_receiver.t1l();
                var tmp_0;
                if (rootCause == null) {
                  tmp_0 = list.f1k(node, 5);
                } else {
                  if (invokeImmediately) {
                    node.w1i(rootCause);
                  }
                  return NonDisposableHandle_instance;
                }
                tmp = tmp_0;
              } else {
                tmp = list.f1k(node, 1);
              }
              if (tmp) {
                tmp$ret$0 = true;
                break $l$block_1;
              }
            }
          } else {
            tmp$ret$0 = false;
            break $l$block_1;
          }
        }
      }
    }
    var added = tmp$ret$0;
    if (added)
      return node;
    else if (invokeImmediately) {
      var tmp_1 = this.h1g();
      var tmp56_safe_receiver = tmp_1 instanceof CompletedExceptionally ? tmp_1 : null;
      node.w1i(tmp56_safe_receiver == null ? null : tmp56_safe_receiver.t1f_1);
    }
    return NonDisposableHandle_instance;
  };
  protoOf(JobSupport).q1g = function (node) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.removeNode.<anonymous>' call
      var state = this.h1g();
      if (state instanceof JobNode) {
        if (!(state === node))
          return Unit_instance;
        if (this.h1f_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE()))
          return Unit_instance;
      } else {
        if (!(state == null) ? isInterface(state, Incomplete) : false) {
          if (!(state.b1k() == null)) {
            node.g1k();
          }
          return Unit_instance;
        } else {
          return Unit_instance;
        }
      }
    }
  };
  protoOf(JobSupport).r1g = function () {
    return false;
  };
  protoOf(JobSupport).s1g = function (cause) {
    var tmp;
    if (cause == null) {
      // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
      tmp = new JobCancellationException( true ? this.r1f() : 0, null, this);
    } else {
      tmp = cause;
    }
    this.u1g(tmp);
  };
  protoOf(JobSupport).r1f = function () {
    return 'Job was cancelled';
  };
  protoOf(JobSupport).u1g = function (cause) {
    this.x1g(cause);
  };
  protoOf(JobSupport).v1g = function (parentJob) {
    this.x1g(parentJob);
  };
  protoOf(JobSupport).w1g = function (cause) {
    if (cause instanceof CancellationException)
      return true;
    return this.x1g(cause) && this.c1h();
  };
  protoOf(JobSupport).x1g = function (cause) {
    var finalState = get_COMPLETING_ALREADY();
    if (this.r1g()) {
      finalState = cancelMakeCompleting(this, cause);
      if (finalState === get_COMPLETING_WAITING_CHILDREN())
        return true;
    }
    if (finalState === get_COMPLETING_ALREADY()) {
      finalState = makeCancelling(this, cause);
    }
    var tmp;
    if (finalState === get_COMPLETING_ALREADY()) {
      tmp = true;
    } else if (finalState === get_COMPLETING_WAITING_CHILDREN()) {
      tmp = true;
    } else if (finalState === get_TOO_LATE_TO_CANCEL()) {
      tmp = false;
    } else {
      this.y1f(finalState);
      tmp = true;
    }
    return tmp;
  };
  protoOf(JobSupport).y1g = function () {
    var state = this.h1g();
    var tmp;
    if (state instanceof Finishing) {
      tmp = state.t1l();
    } else {
      if (state instanceof CompletedExceptionally) {
        tmp = state.t1f_1;
      } else {
        if (!(state == null) ? isInterface(state, Incomplete) : false) {
          var message = 'Cannot be cancelling child in this state: ' + toString(state);
          throw IllegalStateException_init_$Create$(toString(message));
        } else {
          tmp = null;
        }
      }
    }
    var rootCause = tmp;
    var tmp0_elvis_lhs = rootCause instanceof CancellationException ? rootCause : null;
    return tmp0_elvis_lhs == null ? new JobCancellationException('Parent job is ' + stateString(this, state), rootCause, this) : tmp0_elvis_lhs;
  };
  protoOf(JobSupport).w1f = function (proposedUpdate) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.makeCompletingOnce.<anonymous>' call
        var state = this.h1g();
        var finalState = tryMakeCompleting(this, state, proposedUpdate);
        if (finalState === get_COMPLETING_ALREADY())
          throw IllegalStateException_init_$Create$_0('Job ' + this.toString() + ' is already complete or completing, ' + ('but is being completed with ' + toString_0(proposedUpdate)), _get_exceptionOrNull__b3j7js(proposedUpdate, this));
        else if (finalState === get_COMPLETING_RETRY()) {
          break $l$block;
        } else
          return finalState;
      }
    }
  };
  protoOf(JobSupport).z1g = function (child) {
    // Inline function 'kotlin.also' call
    var this_0 = new ChildHandleNode(child);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.JobSupport.attachChild.<anonymous>' call
    this_0.z1j_1 = this;
    var node = this_0;
    var tmp$ret$1;
    $l$block_1: {
      // Inline function 'kotlinx.coroutines.JobSupport.tryPutNodeIntoList' call
      // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
      while (true) {
        // Inline function 'kotlinx.coroutines.JobSupport.tryPutNodeIntoList.<anonymous>' call
        var state = this.h1g();
        if (state instanceof Empty) {
          if (state.d1l_1) {
            if (this.h1f_1.atomicfu$compareAndSet(state, node)) {
              tmp$ret$1 = true;
              break $l$block_1;
            }
          } else {
            promoteEmptyToNodeList(this, state);
          }
        } else {
          if (!(state == null) ? isInterface(state, Incomplete) : false) {
            var list = state.b1k();
            if (list == null) {
              promoteSingleToNodeList(this, state instanceof JobNode ? state : THROW_CCE());
            } else {
              // Inline function 'kotlinx.coroutines.JobSupport.attachChild.<anonymous>' call
              var addedBeforeCancellation = list.f1k(node, 7);
              var tmp;
              if (addedBeforeCancellation) {
                tmp = true;
              } else {
                var addedBeforeCompletion = list.f1k(node, 3);
                var latestState = this.h1g();
                var tmp_0;
                if (latestState instanceof Finishing) {
                  tmp_0 = latestState.t1l();
                } else {
                  // Inline function 'kotlinx.coroutines.assert' call
                  var tmp69_safe_receiver = latestState instanceof CompletedExceptionally ? latestState : null;
                  tmp_0 = tmp69_safe_receiver == null ? null : tmp69_safe_receiver.t1f_1;
                }
                var rootCause = tmp_0;
                node.w1i(rootCause);
                var tmp_1;
                if (addedBeforeCompletion) {
                  // Inline function 'kotlinx.coroutines.assert' call
                  tmp_1 = true;
                } else {
                  return NonDisposableHandle_instance;
                }
                tmp = tmp_1;
              }
              if (tmp) {
                tmp$ret$1 = true;
                break $l$block_1;
              }
            }
          } else {
            tmp$ret$1 = false;
            break $l$block_1;
          }
        }
      }
    }
    var added = tmp$ret$1;
    if (added)
      return node;
    var tmp_2 = this.h1g();
    var tmp70_safe_receiver = tmp_2 instanceof CompletedExceptionally ? tmp_2 : null;
    node.w1i(tmp70_safe_receiver == null ? null : tmp70_safe_receiver.t1f_1);
    return NonDisposableHandle_instance;
  };
  protoOf(JobSupport).z1f = function (exception) {
    throw exception;
  };
  protoOf(JobSupport).a1h = function (cause) {
  };
  protoOf(JobSupport).b1h = function () {
    return false;
  };
  protoOf(JobSupport).c1h = function () {
    return true;
  };
  protoOf(JobSupport).d1h = function (exception) {
    return false;
  };
  protoOf(JobSupport).s1f = function (state) {
  };
  protoOf(JobSupport).y1f = function (state) {
  };
  protoOf(JobSupport).toString = function () {
    return this.e1h() + '@' + get_hexAddress(this);
  };
  protoOf(JobSupport).e1h = function () {
    return this.a1g() + '{' + stateString(this, this.h1g()) + '}';
  };
  protoOf(JobSupport).a1g = function () {
    return get_classSimpleName(this);
  };
  function boxIncomplete(_this__u8e3s4) {
    _init_properties_JobSupport_kt__68f172();
    var tmp;
    if (!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Incomplete) : false) {
      tmp = new IncompleteStateBox(_this__u8e3s4);
    } else {
      tmp = _this__u8e3s4;
    }
    return tmp;
  }
  function InactiveNodeList(list) {
    this.p1l_1 = list;
  }
  protoOf(InactiveNodeList).b1k = function () {
    return this.p1l_1;
  };
  protoOf(InactiveNodeList).o1f = function () {
    return false;
  };
  protoOf(InactiveNodeList).toString = function () {
    return get_DEBUG() ? this.p1l_1.h1l('New') : anyToString(this);
  };
  function InvokeOnCompletion(handler) {
    JobNode.call(this);
    this.n1m_1 = handler;
  }
  protoOf(InvokeOnCompletion).v1j = function () {
    return false;
  };
  protoOf(InvokeOnCompletion).w1i = function (cause) {
    return this.n1m_1(cause);
  };
  function InvokeOnCancelling(handler) {
    JobNode.call(this);
    this.s1m_1 = handler;
    this.t1m_1 = atomic$boolean$1(false);
  }
  protoOf(InvokeOnCancelling).v1j = function () {
    return true;
  };
  protoOf(InvokeOnCancelling).w1i = function (cause) {
    if (this.t1m_1.atomicfu$compareAndSet(false, true))
      this.s1m_1(cause);
  };
  function ChildHandleNode(childJob) {
    JobNode.call(this);
    this.z1l_1 = childJob;
  }
  protoOf(ChildHandleNode).v1j = function () {
    return true;
  };
  protoOf(ChildHandleNode).w1i = function (cause) {
    return this.z1l_1.v1g(this.a1k());
  };
  protoOf(ChildHandleNode).w1g = function (cause) {
    return this.a1k().w1g(cause);
  };
  function IncompleteStateBox(state) {
    this.u1m_1 = state;
  }
  function handlesExceptionF($this) {
    var tmp = $this.g1g();
    var tmp75_safe_receiver = tmp instanceof ChildHandleNode ? tmp : null;
    var tmp0_elvis_lhs = tmp75_safe_receiver == null ? null : tmp75_safe_receiver.a1k();
    var tmp_0;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp_0 = tmp0_elvis_lhs;
    }
    var parentJob = tmp_0;
    while (true) {
      if (parentJob.c1h())
        return true;
      var tmp_1 = parentJob.g1g();
      var tmp76_safe_receiver = tmp_1 instanceof ChildHandleNode ? tmp_1 : null;
      var tmp1_elvis_lhs = tmp76_safe_receiver == null ? null : tmp76_safe_receiver.a1k();
      var tmp_2;
      if (tmp1_elvis_lhs == null) {
        return false;
      } else {
        tmp_2 = tmp1_elvis_lhs;
      }
      parentJob = tmp_2;
    }
  }
  function JobImpl(parent) {
    JobSupport.call(this, true);
    this.j1f(parent);
    this.x1m_1 = handlesExceptionF(this);
  }
  protoOf(JobImpl).r1g = function () {
    return true;
  };
  protoOf(JobImpl).c1h = function () {
    return this.x1m_1;
  };
  var properties_initialized_JobSupport_kt_5iq8a4;
  function _init_properties_JobSupport_kt__68f172() {
    if (!properties_initialized_JobSupport_kt_5iq8a4) {
      properties_initialized_JobSupport_kt_5iq8a4 = true;
      COMPLETING_ALREADY = new Symbol('COMPLETING_ALREADY');
      COMPLETING_WAITING_CHILDREN = new Symbol('COMPLETING_WAITING_CHILDREN');
      COMPLETING_RETRY = new Symbol('COMPLETING_RETRY');
      TOO_LATE_TO_CANCEL = new Symbol('TOO_LATE_TO_CANCEL');
      SEALED = new Symbol('SEALED');
      EMPTY_NEW = new Empty(false);
      EMPTY_ACTIVE = new Empty(true);
    }
  }
  function MainCoroutineDispatcher() {
    CoroutineDispatcher.call(this);
  }
  protoOf(MainCoroutineDispatcher).toString = function () {
    var tmp0_elvis_lhs = this.a1n();
    return tmp0_elvis_lhs == null ? get_classSimpleName(this) + '@' + get_hexAddress(this) : tmp0_elvis_lhs;
  };
  protoOf(MainCoroutineDispatcher).a1n = function () {
    var main = Dispatchers_getInstance().f1n();
    if (this === main)
      return 'Dispatchers.Main';
    var tmp;
    try {
      tmp = main.z1m();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof UnsupportedOperationException) {
        var e = $p;
        tmp_0 = null;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var immediate = tmp;
    if (this === immediate)
      return 'Dispatchers.Main.immediate';
    return null;
  };
  function TimeoutCancellationException() {
  }
  function Unconfined() {
    Unconfined_instance = this;
    CoroutineDispatcher.call(this);
  }
  protoOf(Unconfined).j1k = function (context) {
    return false;
  };
  protoOf(Unconfined).k1k = function (context, block) {
    var yieldContext = context.l8(Key_instance_3);
    if (!(yieldContext == null)) {
      yieldContext.i1n_1 = true;
      return Unit_instance;
    }
    throw UnsupportedOperationException_init_$Create$('Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls.');
  };
  protoOf(Unconfined).toString = function () {
    return 'Dispatchers.Unconfined';
  };
  var Unconfined_instance;
  function Unconfined_getInstance() {
    if (Unconfined_instance == null)
      new Unconfined();
    return Unconfined_instance;
  }
  function Key_2() {
  }
  var Key_instance_3;
  function Key_getInstance_2() {
    return Key_instance_3;
  }
  function Segment() {
  }
  function ConcurrentLinkedListNode() {
  }
  function handleUncaughtCoroutineException(context, exception) {
    var _iterator__ex2g4s = get_platformExceptionHandlers().j();
    while (_iterator__ex2g4s.k()) {
      var handler = _iterator__ex2g4s.l();
      try {
        handler.m1k(context, exception);
      } catch ($p) {
        if ($p instanceof ExceptionSuccessfullyProcessed) {
          var _unused_var__etf5q3 = $p;
          return Unit_instance;
        } else {
          if ($p instanceof Error) {
            var t = $p;
            propagateExceptionFinalResort(handlerException(exception, t));
          } else {
            throw $p;
          }
        }
      }
    }
    try {
      addSuppressed(exception, new DiagnosticCoroutineContextException(context));
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
      } else {
        throw $p;
      }
    }
    propagateExceptionFinalResort(exception);
  }
  function ExceptionSuccessfullyProcessed() {
  }
  function get_UNDEFINED() {
    _init_properties_DispatchedContinuation_kt__tnmqc0();
    return UNDEFINED;
  }
  var UNDEFINED;
  function get_REUSABLE_CLAIMED() {
    _init_properties_DispatchedContinuation_kt__tnmqc0();
    return REUSABLE_CLAIMED;
  }
  var REUSABLE_CLAIMED;
  function _get_reusableCancellableContinuation__9qex09($this) {
    var tmp = $this.z1h_1.kotlinx$atomicfu$value;
    return tmp instanceof CancellableContinuationImpl ? tmp : null;
  }
  function DispatchedContinuation(dispatcher, continuation) {
    DispatchedTask.call(this, -1);
    this.v1h_1 = dispatcher;
    this.w1h_1 = continuation;
    this.x1h_1 = get_UNDEFINED();
    this.y1h_1 = threadContextElements(this.e8());
    this.z1h_1 = atomic$ref$1(null);
  }
  protoOf(DispatchedContinuation).e8 = function () {
    return this.w1h_1.e8();
  };
  protoOf(DispatchedContinuation).a1i = function () {
    return !(this.z1h_1.kotlinx$atomicfu$value == null);
  };
  protoOf(DispatchedContinuation).j1n = function () {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.z1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability.<anonymous>' call
      if (!(this_0.kotlinx$atomicfu$value === get_REUSABLE_CLAIMED()))
        return Unit_instance;
    }
  };
  protoOf(DispatchedContinuation).l1k = function () {
    this.j1n();
    var tmp148_safe_receiver = _get_reusableCancellableContinuation__9qex09(this);
    if (tmp148_safe_receiver == null)
      null;
    else {
      tmp148_safe_receiver.n1i();
    }
  };
  protoOf(DispatchedContinuation).c1j = function (continuation) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.z1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.tryReleaseClaimedContinuation.<anonymous>' call
      var state = this_0.kotlinx$atomicfu$value;
      if (state === get_REUSABLE_CLAIMED()) {
        if (this.z1h_1.atomicfu$compareAndSet(get_REUSABLE_CLAIMED(), continuation))
          return null;
      } else {
        if (state instanceof Error) {
          // Inline function 'kotlin.require' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'kotlin.require' call
          // Inline function 'kotlin.contracts.contract' call
          if (!this.z1h_1.atomicfu$compareAndSet(state, null)) {
            // Inline function 'kotlin.require.<anonymous>' call
            var message = 'Failed requirement.';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
          return state;
        } else {
          var message_0 = 'Inconsistent state ' + toString_0(state);
          throw IllegalStateException_init_$Create$(toString(message_0));
        }
      }
    }
  };
  protoOf(DispatchedContinuation).c1i = function (cause) {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.z1h_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.postponeCancellation.<anonymous>' call
      var state = this_0.kotlinx$atomicfu$value;
      if (equals(state, get_REUSABLE_CLAIMED())) {
        if (this.z1h_1.atomicfu$compareAndSet(get_REUSABLE_CLAIMED(), cause))
          return true;
      } else {
        if (state instanceof Error)
          return true;
        else {
          if (this.z1h_1.atomicfu$compareAndSet(state, null))
            return false;
        }
      }
    }
  };
  protoOf(DispatchedContinuation).r1i = function () {
    var state = this.x1h_1;
    // Inline function 'kotlinx.coroutines.assert' call
    this.x1h_1 = get_UNDEFINED();
    return state;
  };
  protoOf(DispatchedContinuation).o1i = function () {
    return this;
  };
  protoOf(DispatchedContinuation).j8 = function (result) {
    var state = toState_0(result);
    if (this.v1h_1.j1k(this.e8())) {
      this.x1h_1 = state;
      this.b1i_1 = 0;
      this.v1h_1.k1k(this.e8(), this);
    } else {
      $l$block: {
        // Inline function 'kotlinx.coroutines.internal.executeUnconfined' call
        // Inline function 'kotlinx.coroutines.assert' call
        var eventLoop = ThreadLocalEventLoop_getInstance().z1k();
        if (false) {}
        var tmp;
        if (eventLoop.t1k()) {
          this.x1h_1 = state;
          this.b1i_1 = 0;
          eventLoop.s1k(this);
          tmp = true;
        } else {
          // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
          eventLoop.v1k(true);
          try {
            // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeWith.<anonymous>' call
            // Inline function 'kotlinx.coroutines.withCoroutineContext' call
            this.e8();
            this.y1h_1;
            this.w1h_1.j8(result);
            $l$loop: while (eventLoop.r1k()) {
            }
          } catch ($p) {
            if ($p instanceof Error) {
              var e = $p;
              this.n1j(e);
            } else {
              throw $p;
            }
          }
          finally {
            eventLoop.w1k(true);
          }
          tmp = false;
        }
      }
    }
  };
  protoOf(DispatchedContinuation).toString = function () {
    return 'DispatchedContinuation[' + this.v1h_1.toString() + ', ' + toDebugString(this.w1h_1) + ']';
  };
  function resumeCancellableWith(_this__u8e3s4, result) {
    _init_properties_DispatchedContinuation_kt__tnmqc0();
    var tmp;
    if (_this__u8e3s4 instanceof DispatchedContinuation) {
      var state = toState_0(result);
      if (_this__u8e3s4.v1h_1.j1k(_this__u8e3s4.e8())) {
        _this__u8e3s4.x1h_1 = state;
        _this__u8e3s4.b1i_1 = 1;
        _this__u8e3s4.v1h_1.k1k(_this__u8e3s4.e8(), _this__u8e3s4);
      } else {
        $l$block: {
          // Inline function 'kotlinx.coroutines.internal.executeUnconfined' call
          // Inline function 'kotlinx.coroutines.assert' call
          var eventLoop = ThreadLocalEventLoop_getInstance().z1k();
          if (false) {}
          var tmp_0;
          if (eventLoop.t1k()) {
            _this__u8e3s4.x1h_1 = state;
            _this__u8e3s4.b1i_1 = 1;
            eventLoop.s1k(_this__u8e3s4);
            tmp_0 = true;
          } else {
            // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
            eventLoop.v1k(true);
            try {
              // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeCancellableWith.<anonymous>' call
              var tmp$ret$3;
              $l$block_0: {
                // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeCancelled' call
                var job = _this__u8e3s4.e8().l8(Key_instance_2);
                if (!(job == null) && !job.o1f()) {
                  var cause = job.l1g();
                  _this__u8e3s4.s1i(state, cause);
                  // Inline function 'kotlin.coroutines.resumeWithException' call
                  // Inline function 'kotlin.Companion.failure' call
                  var tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(cause));
                  _this__u8e3s4.j8(tmp$ret$1);
                  tmp$ret$3 = true;
                  break $l$block_0;
                }
                tmp$ret$3 = false;
              }
              if (!tmp$ret$3) {
                // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeUndispatchedWith' call
                // Inline function 'kotlinx.coroutines.withContinuationContext' call
                _this__u8e3s4.w1h_1;
                _this__u8e3s4.y1h_1;
                _this__u8e3s4.w1h_1.j8(result);
              }
              $l$loop: while (eventLoop.r1k()) {
              }
            } catch ($p) {
              if ($p instanceof Error) {
                var e = $p;
                _this__u8e3s4.n1j(e);
              } else {
                throw $p;
              }
            }
            finally {
              eventLoop.w1k(true);
            }
            tmp_0 = false;
          }
        }
      }
      tmp = Unit_instance;
    } else {
      _this__u8e3s4.j8(result);
      tmp = Unit_instance;
    }
    return tmp;
  }
  var properties_initialized_DispatchedContinuation_kt_2siadq;
  function _init_properties_DispatchedContinuation_kt__tnmqc0() {
    if (!properties_initialized_DispatchedContinuation_kt_2siadq) {
      properties_initialized_DispatchedContinuation_kt_2siadq = true;
      UNDEFINED = new Symbol('UNDEFINED');
      REUSABLE_CLAIMED = new Symbol('REUSABLE_CLAIMED');
    }
  }
  function DispatchedTask(resumeMode) {
    SchedulerTask.call(this);
    this.b1i_1 = resumeMode;
  }
  protoOf(DispatchedTask).s1i = function (takenState, cause) {
  };
  protoOf(DispatchedTask).b1j = function (state) {
    return (state == null ? true : !(state == null)) ? state : THROW_CCE();
  };
  protoOf(DispatchedTask).k1j = function (state) {
    var tmp151_safe_receiver = state instanceof CompletedExceptionally ? state : null;
    return tmp151_safe_receiver == null ? null : tmp151_safe_receiver.t1f_1;
  };
  protoOf(DispatchedTask).m1j = function () {
    // Inline function 'kotlinx.coroutines.assert' call
    var fatalException = null;
    try {
      var tmp = this.o1i();
      var delegate = tmp instanceof DispatchedContinuation ? tmp : THROW_CCE();
      var continuation = delegate.w1h_1;
      // Inline function 'kotlinx.coroutines.withContinuationContext' call
      delegate.y1h_1;
      var context = continuation.e8();
      var state = this.r1i();
      var exception = this.k1j(state);
      var job = exception == null && get_isCancellableMode(this.b1i_1) ? context.l8(Key_instance_2) : null;
      if (!(job == null) && !job.o1f()) {
        var cause = job.l1g();
        this.s1i(state, cause);
        // Inline function 'kotlinx.coroutines.resumeWithStackTrace' call
        // Inline function 'kotlin.Companion.failure' call
        var exception_0 = recoverStackTrace(cause, continuation);
        var tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(exception_0));
        continuation.j8(tmp$ret$0);
      } else {
        if (!(exception == null)) {
          // Inline function 'kotlin.coroutines.resumeWithException' call
          // Inline function 'kotlin.Companion.failure' call
          var tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(exception));
          continuation.j8(tmp$ret$1);
        } else {
          // Inline function 'kotlin.coroutines.resume' call
          // Inline function 'kotlin.Companion.success' call
          var value = this.b1j(state);
          var tmp$ret$3 = _Result___init__impl__xyqfz8(value);
          continuation.j8(tmp$ret$3);
        }
      }
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
        fatalException = e;
      } else {
        throw $p;
      }
    }
    finally {
      var tmp152_safe_receiver = fatalException;
      if (tmp152_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        this.n1j(tmp152_safe_receiver);
      }
    }
  };
  protoOf(DispatchedTask).n1j = function (exception) {
    var reason = new CoroutinesInternalError('Fatal exception in coroutines machinery for ' + toString(this) + '. ' + "Please read KDoc to 'handleFatalException' method and report this incident to maintainers", exception);
    handleCoroutineException(this.o1i().e8(), reason);
  };
  function get_isReusableMode(_this__u8e3s4) {
    return _this__u8e3s4 === 2;
  }
  function get_isCancellableMode(_this__u8e3s4) {
    return _this__u8e3s4 === 1 || _this__u8e3s4 === 2;
  }
  function dispatch(_this__u8e3s4, mode) {
    // Inline function 'kotlinx.coroutines.assert' call
    var delegate = _this__u8e3s4.o1i();
    var undispatched = mode === 4;
    var tmp;
    var tmp_0;
    if (!undispatched) {
      tmp_0 = delegate instanceof DispatchedContinuation;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = get_isCancellableMode(mode) === get_isCancellableMode(_this__u8e3s4.b1i_1);
    } else {
      tmp = false;
    }
    if (tmp) {
      var dispatcher = delegate.v1h_1;
      var context = delegate.e8();
      if (dispatcher.j1k(context)) {
        dispatcher.k1k(context, _this__u8e3s4);
      } else {
        resumeUnconfined(_this__u8e3s4);
      }
    } else {
      resume(_this__u8e3s4, delegate, undispatched);
    }
  }
  function resumeUnconfined(_this__u8e3s4) {
    var eventLoop = ThreadLocalEventLoop_getInstance().z1k();
    if (eventLoop.t1k()) {
      eventLoop.s1k(_this__u8e3s4);
    } else {
      // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
      eventLoop.v1k(true);
      try {
        // Inline function 'kotlinx.coroutines.resumeUnconfined.<anonymous>' call
        resume(_this__u8e3s4, _this__u8e3s4.o1i(), true);
        $l$loop: while (eventLoop.r1k()) {
        }
      } catch ($p) {
        if ($p instanceof Error) {
          var e = $p;
          _this__u8e3s4.n1j(e);
        } else {
          throw $p;
        }
      }
      finally {
        eventLoop.w1k(true);
      }
    }
  }
  function resume(_this__u8e3s4, delegate, undispatched) {
    var state = _this__u8e3s4.r1i();
    var exception = _this__u8e3s4.k1j(state);
    var tmp;
    if (!(exception == null)) {
      // Inline function 'kotlin.Companion.failure' call
      tmp = _Result___init__impl__xyqfz8(createFailure(exception));
    } else {
      // Inline function 'kotlin.Companion.success' call
      var value = _this__u8e3s4.b1j(state);
      tmp = _Result___init__impl__xyqfz8(value);
    }
    var result = tmp;
    if (undispatched) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeUndispatchedWith' call
      var this_0 = delegate instanceof DispatchedContinuation ? delegate : THROW_CCE();
      // Inline function 'kotlinx.coroutines.withContinuationContext' call
      this_0.w1h_1;
      this_0.y1h_1;
      this_0.w1h_1.j8(result);
    } else {
      delegate.j8(result);
    }
  }
  function ContextScope(context) {
    this.k1n_1 = context;
  }
  protoOf(ContextScope).n1f = function () {
    return this.k1n_1;
  };
  protoOf(ContextScope).toString = function () {
    return 'CoroutineScope(coroutineContext=' + toString(this.k1n_1) + ')';
  };
  function Symbol(symbol) {
    this.l1n_1 = symbol;
  }
  protoOf(Symbol).toString = function () {
    return '<' + this.l1n_1 + '>';
  };
  function startCoroutineCancellable(_this__u8e3s4, fatalCompletion) {
    var tmp;
    try {
      var tmp_0 = intercepted(_this__u8e3s4);
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      resumeCancellableWith(tmp_0, tmp$ret$0);
      tmp = Unit_instance;
    } catch ($p) {
      var tmp_1;
      if ($p instanceof Error) {
        var e = $p;
        dispatcherFailure$accessor$glj1hg(fatalCompletion, e);
        tmp_1 = Unit_instance;
      } else {
        throw $p;
      }
      tmp = tmp_1;
    }
    return tmp;
  }
  function startCoroutineCancellable_0(_this__u8e3s4, receiver, completion) {
    var tmp;
    try {
      var tmp_0 = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion));
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      resumeCancellableWith(tmp_0, tmp$ret$0);
      tmp = Unit_instance;
    } catch ($p) {
      var tmp_1;
      if ($p instanceof Error) {
        var e = $p;
        dispatcherFailure$accessor$glj1hg(completion, e);
        tmp_1 = Unit_instance;
      } else {
        throw $p;
      }
      tmp = tmp_1;
    }
    return tmp;
  }
  function dispatcherFailure(completion, e) {
    // Inline function 'kotlin.Companion.failure' call
    var tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(e));
    completion.j8(tmp$ret$0);
    throw e;
  }
  function dispatcherFailure$accessor$glj1hg(completion, e) {
    return dispatcherFailure(completion, e);
  }
  function startCoroutineUndispatched(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlinx.coroutines.internal.probeCoroutineCreated' call
    var actualCompletion = completion;
    var tmp;
    try {
      // Inline function 'kotlinx.coroutines.withCoroutineContext' call
      actualCompletion.e8();
      // Inline function 'kotlinx.coroutines.intrinsics.startCoroutineUndispatched.<anonymous>' call
      // Inline function 'kotlinx.coroutines.internal.probeCoroutineResumed' call
      // Inline function 'kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn' call
      tmp = startCoroutineUninterceptedOrReturnNonGeneratorVersion(_this__u8e3s4, receiver, actualCompletion);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        // Inline function 'kotlin.coroutines.resumeWithException' call
        // Inline function 'kotlin.Companion.failure' call
        var tmp$ret$4 = _Result___init__impl__xyqfz8(createFailure(e));
        actualCompletion.j8(tmp$ret$4);
        return Unit_instance;
      } else {
        throw $p;
      }
    }
    var value = tmp;
    if (!(value === get_COROUTINE_SUSPENDED())) {
      // Inline function 'kotlin.coroutines.resume' call
      // Inline function 'kotlin.Companion.success' call
      var value_0 = (value == null ? true : !(value == null)) ? value : THROW_CCE();
      var tmp$ret$6 = _Result___init__impl__xyqfz8(value_0);
      actualCompletion.j8(tmp$ret$6);
    }
  }
  function createDefaultDispatcher() {
    var tmp;
    if (isJsdom()) {
      tmp = NodeDispatcher_getInstance();
    } else {
      var tmp_0;
      var tmp_1;
      if (!(typeof window === 'undefined')) {
        // Inline function 'kotlin.js.asDynamic' call
        tmp_1 = window != null;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = !(typeof window.addEventListener === 'undefined');
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = asCoroutineDispatcher(window);
      } else {
        if (typeof process === 'undefined' || typeof process.nextTick === 'undefined') {
          tmp = SetTimeoutDispatcher_getInstance();
        } else {
          tmp = NodeDispatcher_getInstance();
        }
      }
    }
    return tmp;
  }
  function isJsdom() {
    return !(typeof navigator === 'undefined') && navigator != null && navigator.userAgent != null && !(typeof navigator.userAgent === 'undefined') && !(typeof navigator.userAgent.match === 'undefined') && navigator.userAgent.match('\\bjsdom\\b');
  }
  var counter;
  function get_DEBUG() {
    return DEBUG;
  }
  var DEBUG;
  function get_classSimpleName(_this__u8e3s4) {
    var tmp0_elvis_lhs = getKClassFromExpression(_this__u8e3s4).f9();
    return tmp0_elvis_lhs == null ? 'Unknown' : tmp0_elvis_lhs;
  }
  function get_hexAddress(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var result = _this__u8e3s4.__debug_counter;
    if (!(typeof result === 'number')) {
      counter = counter + 1 | 0;
      result = counter;
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.__debug_counter = result;
    }
    return ((!(result == null) ? typeof result === 'number' : false) ? result : THROW_CCE()).toString();
  }
  function NodeDispatcher() {
    NodeDispatcher_instance = this;
    SetTimeoutBasedDispatcher.call(this);
  }
  protoOf(NodeDispatcher).o1n = function () {
    process.nextTick(this.v1n_1.t1n_1);
  };
  var NodeDispatcher_instance;
  function NodeDispatcher_getInstance() {
    if (NodeDispatcher_instance == null)
      new NodeDispatcher();
    return NodeDispatcher_instance;
  }
  function ScheduledMessageQueue$processQueue$lambda(this$0) {
    return function () {
      this$0.z1n();
      return Unit_instance;
    };
  }
  function ScheduledMessageQueue(dispatcher) {
    MessageQueue.call(this);
    this.s1n_1 = dispatcher;
    var tmp = this;
    tmp.t1n_1 = ScheduledMessageQueue$processQueue$lambda(this);
  }
  protoOf(ScheduledMessageQueue).a1o = function () {
    this.s1n_1.o1n();
  };
  protoOf(ScheduledMessageQueue).b1o = function () {
    setTimeout(this.t1n_1, 0);
  };
  protoOf(ScheduledMessageQueue).c1o = function (timeout) {
    setTimeout(this.t1n_1, timeout);
  };
  function WindowMessageQueue$lambda(this$0) {
    return function (event) {
      var tmp;
      if (event.source == this$0.l1o_1 && event.data == this$0.m1o_1) {
        event.stopPropagation();
        this$0.z1n();
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function WindowMessageQueue$schedule$lambda(this$0) {
    return function (it) {
      this$0.z1n();
      return Unit_instance;
    };
  }
  function WindowMessageQueue(window_0) {
    MessageQueue.call(this);
    this.l1o_1 = window_0;
    this.m1o_1 = 'dispatchCoroutine';
    this.l1o_1.addEventListener('message', WindowMessageQueue$lambda(this), true);
  }
  protoOf(WindowMessageQueue).a1o = function () {
    var tmp = Promise.resolve(Unit_instance);
    tmp.then(WindowMessageQueue$schedule$lambda(this));
  };
  protoOf(WindowMessageQueue).b1o = function () {
    this.l1o_1.postMessage(this.m1o_1, '*');
  };
  function asCoroutineDispatcher(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_elvis_lhs = _this__u8e3s4.coroutineDispatcher;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new WindowDispatcher(_this__u8e3s4);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.asCoroutineDispatcher.<anonymous>' call
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.coroutineDispatcher = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function propagateExceptionFinalResort(exception) {
    console.error(exception.toString());
  }
  function createEventLoop() {
    return new UnconfinedEventLoop();
  }
  function UnconfinedEventLoop() {
    EventLoop.call(this);
  }
  protoOf(UnconfinedEventLoop).k1k = function (context, block) {
    unsupported();
  };
  function unsupported() {
    throw UnsupportedOperationException_init_$Create$('runBlocking event loop is not supported');
  }
  function SetTimeoutDispatcher() {
    SetTimeoutDispatcher_instance = this;
    SetTimeoutBasedDispatcher.call(this);
  }
  protoOf(SetTimeoutDispatcher).o1n = function () {
    this.v1n_1.c1o(0);
  };
  var SetTimeoutDispatcher_instance;
  function SetTimeoutDispatcher_getInstance() {
    if (SetTimeoutDispatcher_instance == null)
      new SetTimeoutDispatcher();
    return SetTimeoutDispatcher_instance;
  }
  function SetTimeoutBasedDispatcher() {
    CoroutineDispatcher.call(this);
    this.v1n_1 = new ScheduledMessageQueue(this);
  }
  protoOf(SetTimeoutBasedDispatcher).k1k = function (context, block) {
    this.v1n_1.h1o(block);
  };
  function MessageQueue() {
    this.w1n_1 = ArrayDeque_init_$Create$();
    this.x1n_1 = 16;
    this.y1n_1 = false;
  }
  protoOf(MessageQueue).d1o = function (element) {
    return this.w1n_1.e(element);
  };
  protoOf(MessageQueue).e = function (element) {
    return this.d1o((!(element == null) ? isInterface(element, Runnable) : false) ? element : THROW_CCE());
  };
  protoOf(MessageQueue).e1o = function (elements) {
    return this.w1n_1.d1(elements);
  };
  protoOf(MessageQueue).d1 = function (elements) {
    return this.e1o(elements);
  };
  protoOf(MessageQueue).a2 = function (index) {
    return this.w1n_1.a2(index);
  };
  protoOf(MessageQueue).f1o = function (element) {
    return this.w1n_1.r1(element);
  };
  protoOf(MessageQueue).r1 = function (element) {
    if (!(!(element == null) ? isInterface(element, Runnable) : false))
      return false;
    return this.f1o((!(element == null) ? isInterface(element, Runnable) : false) ? element : THROW_CCE());
  };
  protoOf(MessageQueue).g1o = function (elements) {
    return this.w1n_1.s1(elements);
  };
  protoOf(MessageQueue).s1 = function (elements) {
    return this.g1o(elements);
  };
  protoOf(MessageQueue).o = function (index) {
    return this.w1n_1.o(index);
  };
  protoOf(MessageQueue).n = function () {
    return this.w1n_1.n();
  };
  protoOf(MessageQueue).j = function () {
    return this.w1n_1.j();
  };
  protoOf(MessageQueue).m = function () {
    return this.w1n_1.rb_1;
  };
  protoOf(MessageQueue).h1o = function (element) {
    this.d1o(element);
    if (!this.y1n_1) {
      this.y1n_1 = true;
      this.a1o();
    }
  };
  protoOf(MessageQueue).z1n = function () {
    try {
      // Inline function 'kotlin.repeat' call
      var times = this.x1n_1;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlinx.coroutines.MessageQueue.process.<anonymous>' call
          var tmp0_elvis_lhs = removeFirstOrNull(this);
          var tmp;
          if (tmp0_elvis_lhs == null) {
            return Unit_instance;
          } else {
            tmp = tmp0_elvis_lhs;
          }
          var element = tmp;
          element.m1j();
        }
         while (inductionVariable < times);
    }finally {
      if (this.n()) {
        this.y1n_1 = false;
      } else {
        this.b1o();
      }
    }
  };
  function WindowDispatcher(window_0) {
    CoroutineDispatcher.call(this);
    this.u1o_1 = window_0;
    this.v1o_1 = new WindowMessageQueue(this.u1o_1);
  }
  protoOf(WindowDispatcher).k1k = function (context, block) {
    return this.v1o_1.h1o(block);
  };
  function toDebugString(_this__u8e3s4) {
    return toString(_this__u8e3s4);
  }
  function newCoroutineContext(_this__u8e3s4, context) {
    var combined = _this__u8e3s4.n1f().md(context);
    return !(combined === Dispatchers_getInstance().b1n_1) && combined.l8(Key_instance) == null ? combined.md(Dispatchers_getInstance().b1n_1) : combined;
  }
  function get_coroutineName(_this__u8e3s4) {
    return null;
  }
  function Dispatchers() {
    Dispatchers_instance = this;
    this.b1n_1 = createDefaultDispatcher();
    this.c1n_1 = Unconfined_getInstance();
    this.d1n_1 = new JsMainDispatcher(this.b1n_1, false);
    this.e1n_1 = null;
  }
  protoOf(Dispatchers).f1n = function () {
    var tmp0_elvis_lhs = this.e1n_1;
    return tmp0_elvis_lhs == null ? this.d1n_1 : tmp0_elvis_lhs;
  };
  var Dispatchers_instance;
  function Dispatchers_getInstance() {
    if (Dispatchers_instance == null)
      new Dispatchers();
    return Dispatchers_instance;
  }
  function JsMainDispatcher(delegate, invokeImmediately) {
    MainCoroutineDispatcher.call(this);
    this.x1o_1 = delegate;
    this.y1o_1 = invokeImmediately;
    this.z1o_1 = this.y1o_1 ? this : new JsMainDispatcher(this.x1o_1, true);
  }
  protoOf(JsMainDispatcher).z1m = function () {
    return this.z1o_1;
  };
  protoOf(JsMainDispatcher).j1k = function (context) {
    return !this.y1o_1;
  };
  protoOf(JsMainDispatcher).k1k = function (context, block) {
    return this.x1o_1.k1k(context, block);
  };
  protoOf(JsMainDispatcher).toString = function () {
    var tmp0_elvis_lhs = this.a1n();
    return tmp0_elvis_lhs == null ? this.x1o_1.toString() : tmp0_elvis_lhs;
  };
  function JobCancellationException(message, cause, job) {
    CancellationException_init_$Init$(message, cause, this);
    captureStack(this, JobCancellationException);
    this.a1p_1 = job;
  }
  protoOf(JobCancellationException).toString = function () {
    return protoOf(CancellationException).toString.call(this) + '; job=' + toString(this.a1p_1);
  };
  protoOf(JobCancellationException).equals = function (other) {
    var tmp;
    if (other === this) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      var tmp_2;
      if (other instanceof JobCancellationException) {
        tmp_2 = other.message == this.message;
      } else {
        tmp_2 = false;
      }
      if (tmp_2) {
        tmp_1 = equals(other.a1p_1, this.a1p_1);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = equals(other.cause, this.cause);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(JobCancellationException).hashCode = function () {
    var tmp = imul(imul(getStringHashCode(ensureNotNull(this.message)), 31) + hashCode(this.a1p_1) | 0, 31);
    var tmp0_safe_receiver = this.cause;
    var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    return tmp + (tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs) | 0;
  };
  function Runnable() {
  }
  function SchedulerTask() {
  }
  function identitySet(expectedSize) {
    return HashSet_init_$Create$(expectedSize);
  }
  function get_platformExceptionHandlers_() {
    _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf();
    return platformExceptionHandlers_;
  }
  var platformExceptionHandlers_;
  function get_platformExceptionHandlers() {
    _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf();
    return get_platformExceptionHandlers_();
  }
  function DiagnosticCoroutineContextException(context) {
    RuntimeException_init_$Init$_0(toString(context), this);
    captureStack(this, DiagnosticCoroutineContextException);
  }
  var properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx;
  function _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf() {
    if (!properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx) {
      properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx = true;
      // Inline function 'kotlin.collections.mutableSetOf' call
      platformExceptionHandlers_ = LinkedHashSet_init_$Create$();
    }
  }
  function LockFreeLinkedListHead() {
    LockFreeLinkedListNode.call(this);
  }
  function LockFreeLinkedListNode() {
    this.c1k_1 = this;
    this.d1k_1 = this;
    this.e1k_1 = false;
  }
  protoOf(LockFreeLinkedListNode).f1k = function (node, permissionsBitmask) {
    var prev = this.d1k_1;
    var tmp;
    if (prev instanceof ListClosed) {
      tmp = ((prev.e1p_1 & permissionsBitmask) === 0 && prev.f1k(node, permissionsBitmask));
    } else {
      node.c1k_1 = this;
      node.d1k_1 = prev;
      prev.c1k_1 = node;
      this.d1k_1 = node;
      tmp = true;
    }
    return tmp;
  };
  protoOf(LockFreeLinkedListNode).i1l = function (forbiddenElementsBit) {
    this.f1k(new ListClosed(forbiddenElementsBit), forbiddenElementsBit);
  };
  protoOf(LockFreeLinkedListNode).g1k = function () {
    if (this.e1k_1)
      return false;
    var prev = this.d1k_1;
    var next = this.c1k_1;
    prev.c1k_1 = next;
    next.d1k_1 = prev;
    this.e1k_1 = true;
    return true;
  };
  protoOf(LockFreeLinkedListNode).h1k = function (node) {
    if (!(this.c1k_1 === this))
      return false;
    this.f1k(node, -2147483648);
    return true;
  };
  function ListClosed(forbiddenElementsBitmask) {
    LockFreeLinkedListNode.call(this);
    this.e1p_1 = forbiddenElementsBitmask;
  }
  function unwrap(exception) {
    return exception;
  }
  function recoverStackTrace(exception, continuation) {
    return exception;
  }
  function SynchronizedObject() {
  }
  function threadContextElements(context) {
    return 0;
  }
  function CommonThreadLocal() {
    this.a1l_1 = null;
  }
  protoOf(CommonThreadLocal).b1l = function () {
    var tmp = this.a1l_1;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(CommonThreadLocal).c1l = function (value) {
    this.a1l_1 = value;
  };
  function commonThreadLocal(name) {
    return new CommonThreadLocal();
  }
  //region block: post-declaration
  protoOf(JobSupport).t1g = cancel$default;
  protoOf(JobSupport).md = plus;
  protoOf(JobSupport).l8 = get_0;
  protoOf(JobSupport).ld = fold;
  protoOf(JobSupport).kd = minusKey_0;
  protoOf(CoroutineDispatcher).l8 = get;
  protoOf(CoroutineDispatcher).kd = minusKey;
  //endregion
  //region block: init
  Active_instance = new Active();
  Key_instance_1 = new Key_0();
  Key_instance_2 = new Key_1();
  NonDisposableHandle_instance = new NonDisposableHandle();
  Key_instance_3 = new Key_2();
  counter = 0;
  DEBUG = false;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = CoroutineStart_UNDISPATCHED_getInstance;
  _.$_$.b = CancellableContinuationImpl;
  _.$_$.c = CoroutineScope_0;
  _.$_$.d = CoroutineScope;
  _.$_$.e = launch;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlinx-serialization-kotlinx-serialization-core.js":
/*!********************************************************************!*\
  !*** ./kotlin/kotlinx-serialization-kotlinx-serialization-core.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var protoOf = kotlin_kotlin.$_$.s8;
  var initMetadataForInterface = kotlin_kotlin.$_$.z7;
  var VOID = kotlin_kotlin.$_$.e;
  var asList = kotlin_kotlin.$_$.n4;
  var objectCreate = kotlin_kotlin.$_$.r8;
  var StringCompanionObject_instance = kotlin_kotlin.$_$.n3;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var emptyList = kotlin_kotlin.$_$.e5;
  var LazyThreadSafetyMode_PUBLICATION_getInstance = kotlin_kotlin.$_$.f;
  var lazy = kotlin_kotlin.$_$.tb;
  var toString = kotlin_kotlin.$_$.w8;
  var initMetadataForClass = kotlin_kotlin.$_$.w7;
  var getKClassFromExpression = kotlin_kotlin.$_$.c;
  var KProperty1 = kotlin_kotlin.$_$.f9;
  var getPropertyCallableRef = kotlin_kotlin.$_$.t7;
  var THROW_CCE = kotlin_kotlin.$_$.za;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.c1;
  var zip = kotlin_kotlin.$_$.i6;
  var toMap = kotlin_kotlin.$_$.f6;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.r;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.e1;
  var mapCapacity = kotlin_kotlin.$_$.t5;
  var LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.q;
  var KtMap = kotlin_kotlin.$_$.i4;
  var isInterface = kotlin_kotlin.$_$.j8;
  var IllegalArgumentException_init_$Init$ = kotlin_kotlin.$_$.a1;
  var captureStack = kotlin_kotlin.$_$.i7;
  var IllegalArgumentException_init_$Init$_0 = kotlin_kotlin.$_$.b1;
  var IllegalArgumentException_init_$Init$_1 = kotlin_kotlin.$_$.d1;
  var IllegalArgumentException = kotlin_kotlin.$_$.ua;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.q4;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.h;
  var KClass = kotlin_kotlin.$_$.e9;
  var Triple = kotlin_kotlin.$_$.ab;
  var getKClass = kotlin_kotlin.$_$.d;
  var Pair = kotlin_kotlin.$_$.wa;
  var Entry = kotlin_kotlin.$_$.h4;
  var KtMutableMap = kotlin_kotlin.$_$.k4;
  var LinkedHashMap = kotlin_kotlin.$_$.e4;
  var HashMap = kotlin_kotlin.$_$.c4;
  var KtSet = kotlin_kotlin.$_$.m4;
  var KtMutableSet = kotlin_kotlin.$_$.l4;
  var LinkedHashSet = kotlin_kotlin.$_$.f4;
  var HashSet = kotlin_kotlin.$_$.d4;
  var Collection = kotlin_kotlin.$_$.b4;
  var KtList = kotlin_kotlin.$_$.g4;
  var KtMutableList = kotlin_kotlin.$_$.j4;
  var ArrayList = kotlin_kotlin.$_$.a4;
  var copyToArray = kotlin_kotlin.$_$.d5;
  var _Result___get_value__impl__bjfvqg = kotlin_kotlin.$_$.u1;
  var _Result___get_isFailure__impl__jpiriv = kotlin_kotlin.$_$.t1;
  var Result = kotlin_kotlin.$_$.xa;
  var ensureNotNull = kotlin_kotlin.$_$.pb;
  var equals = kotlin_kotlin.$_$.p7;
  var getStringHashCode = kotlin_kotlin.$_$.u7;
  var isBlank = kotlin_kotlin.$_$.p9;
  var toList = kotlin_kotlin.$_$.e6;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.i;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.o;
  var toHashSet = kotlin_kotlin.$_$.c6;
  var toBooleanArray = kotlin_kotlin.$_$.b6;
  var withIndex = kotlin_kotlin.$_$.h6;
  var to = kotlin_kotlin.$_$.zb;
  var lazy_0 = kotlin_kotlin.$_$.ub;
  var contentEquals = kotlin_kotlin.$_$.r4;
  var until = kotlin_kotlin.$_$.d9;
  var joinToString = kotlin_kotlin.$_$.m5;
  var initMetadataForObject = kotlin_kotlin.$_$.b8;
  var Long = kotlin_kotlin.$_$.va;
  var Char = kotlin_kotlin.$_$.oa;
  var Duration__toIsoString_impl_9h6wsm = kotlin_kotlin.$_$.m1;
  var Duration = kotlin_kotlin.$_$.ma;
  var Companion_getInstance = kotlin_kotlin.$_$.q3;
  var Uuid = kotlin_kotlin.$_$.na;
  var Companion_getInstance_0 = kotlin_kotlin.$_$.r3;
  var toIntOrNull = kotlin_kotlin.$_$.ca;
  var hashCode = kotlin_kotlin.$_$.v7;
  var ArrayList_init_$Create$_1 = kotlin_kotlin.$_$.j;
  var HashSet_init_$Create$_0 = kotlin_kotlin.$_$.p;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.t;
  var LinkedHashSet_init_$Create$_0 = kotlin_kotlin.$_$.u;
  var HashMap_init_$Create$ = kotlin_kotlin.$_$.l;
  var HashMap_init_$Create$_0 = kotlin_kotlin.$_$.m;
  var LinkedHashMap_init_$Create$_1 = kotlin_kotlin.$_$.s;
  var isArray = kotlin_kotlin.$_$.c8;
  var arrayIterator = kotlin_kotlin.$_$.g7;
  var step = kotlin_kotlin.$_$.c9;
  var getValue = kotlin_kotlin.$_$.h5;
  var longArray = kotlin_kotlin.$_$.n8;
  var initMetadataForCompanion = kotlin_kotlin.$_$.x7;
  var get_lastIndex = kotlin_kotlin.$_$.n5;
  var countTrailingZeroBits = kotlin_kotlin.$_$.nb;
  var indexOf = kotlin_kotlin.$_$.i5;
  var contentToString = kotlin_kotlin.$_$.t4;
  var Enum = kotlin_kotlin.$_$.ra;
  var fillArrayVal = kotlin_kotlin.$_$.q7;
  var HashSet_init_$Create$_1 = kotlin_kotlin.$_$.n;
  var toString_0 = kotlin_kotlin.$_$.yb;
  var KTypeParameter = kotlin_kotlin.$_$.g9;
  var contentHashCode = kotlin_kotlin.$_$.s4;
  var booleanArray = kotlin_kotlin.$_$.h7;
  var emptyMap = kotlin_kotlin.$_$.f5;
  var Companion_getInstance_1 = kotlin_kotlin.$_$.s3;
  var isCharArray = kotlin_kotlin.$_$.f8;
  var charArray = kotlin_kotlin.$_$.j7;
  var DoubleCompanionObject_instance = kotlin_kotlin.$_$.j3;
  var isDoubleArray = kotlin_kotlin.$_$.g8;
  var FloatCompanionObject_instance = kotlin_kotlin.$_$.k3;
  var isFloatArray = kotlin_kotlin.$_$.h8;
  var Companion_getInstance_2 = kotlin_kotlin.$_$.t3;
  var isLongArray = kotlin_kotlin.$_$.k8;
  var Companion_getInstance_3 = kotlin_kotlin.$_$.x3;
  var _ULongArray___get_size__impl__ju6dtr = kotlin_kotlin.$_$.u2;
  var ULongArray = kotlin_kotlin.$_$.fb;
  var _ULongArray___init__impl__twm1l3 = kotlin_kotlin.$_$.q2;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.n2;
  var ULongArray__get_impl_pr71q9 = kotlin_kotlin.$_$.s2;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.o2;
  var IntCompanionObject_instance = kotlin_kotlin.$_$.l3;
  var isIntArray = kotlin_kotlin.$_$.i8;
  var Companion_getInstance_4 = kotlin_kotlin.$_$.w3;
  var _UIntArray___get_size__impl__r6l8ci = kotlin_kotlin.$_$.l2;
  var UIntArray = kotlin_kotlin.$_$.db;
  var _UIntArray___init__impl__ghjpc6 = kotlin_kotlin.$_$.h2;
  var _UInt___init__impl__l7qpdl = kotlin_kotlin.$_$.e2;
  var UIntArray__get_impl_gp5kza = kotlin_kotlin.$_$.j2;
  var _UInt___get_data__impl__f0vqqw = kotlin_kotlin.$_$.f2;
  var ShortCompanionObject_instance = kotlin_kotlin.$_$.m3;
  var isShortArray = kotlin_kotlin.$_$.l8;
  var Companion_getInstance_5 = kotlin_kotlin.$_$.y3;
  var _UShortArray___get_size__impl__jqto1b = kotlin_kotlin.$_$.d3;
  var UShortArray = kotlin_kotlin.$_$.hb;
  var _UShortArray___init__impl__9b26ef = kotlin_kotlin.$_$.z2;
  var _UShort___init__impl__jigrne = kotlin_kotlin.$_$.w2;
  var UShortArray__get_impl_fnbhmx = kotlin_kotlin.$_$.b3;
  var _UShort___get_data__impl__g0245 = kotlin_kotlin.$_$.x2;
  var ByteCompanionObject_instance = kotlin_kotlin.$_$.i3;
  var isByteArray = kotlin_kotlin.$_$.e8;
  var Companion_getInstance_6 = kotlin_kotlin.$_$.v3;
  var _UByteArray___get_size__impl__h6pkdv = kotlin_kotlin.$_$.c2;
  var UByteArray = kotlin_kotlin.$_$.bb;
  var _UByteArray___init__impl__ip4y9n = kotlin_kotlin.$_$.z1;
  var _UByte___init__impl__g9hnc4 = kotlin_kotlin.$_$.v1;
  var UByteArray__get_impl_t5f3hv = kotlin_kotlin.$_$.a2;
  var _UByte___get_data__impl__jof9qr = kotlin_kotlin.$_$.w1;
  var BooleanCompanionObject_instance = kotlin_kotlin.$_$.h3;
  var isBooleanArray = kotlin_kotlin.$_$.d8;
  var coerceAtLeast = kotlin_kotlin.$_$.y8;
  var copyOf = kotlin_kotlin.$_$.x4;
  var copyOf_0 = kotlin_kotlin.$_$.z4;
  var copyOf_1 = kotlin_kotlin.$_$.a5;
  var copyOf_2 = kotlin_kotlin.$_$.v4;
  var _ULongArray___get_storage__impl__28e64j = kotlin_kotlin.$_$.v2;
  var _ULongArray___init__impl__twm1l3_0 = kotlin_kotlin.$_$.r2;
  var ULongArray__set_impl_z19mvh = kotlin_kotlin.$_$.t2;
  var copyOf_3 = kotlin_kotlin.$_$.c5;
  var _UIntArray___get_storage__impl__92a0v0 = kotlin_kotlin.$_$.m2;
  var _UIntArray___init__impl__ghjpc6_0 = kotlin_kotlin.$_$.i2;
  var UIntArray__set_impl_7f2zu2 = kotlin_kotlin.$_$.k2;
  var copyOf_4 = kotlin_kotlin.$_$.u4;
  var _UShortArray___get_storage__impl__t2jpv5 = kotlin_kotlin.$_$.e3;
  var _UShortArray___init__impl__9b26ef_0 = kotlin_kotlin.$_$.a3;
  var UShortArray__set_impl_6d8whp = kotlin_kotlin.$_$.c3;
  var copyOf_5 = kotlin_kotlin.$_$.y4;
  var _UByteArray___get_storage__impl__d4kctt = kotlin_kotlin.$_$.d2;
  var _UByteArray___init__impl__ip4y9n_0 = kotlin_kotlin.$_$.y1;
  var UByteArray__set_impl_jvcicn = kotlin_kotlin.$_$.b2;
  var copyOf_6 = kotlin_kotlin.$_$.w4;
  var Unit = kotlin_kotlin.$_$.jb;
  var trimIndent = kotlin_kotlin.$_$.la;
  var charSequenceLength = kotlin_kotlin.$_$.l7;
  var lastOrNull = kotlin_kotlin.$_$.p5;
  var get_lastIndex_0 = kotlin_kotlin.$_$.o5;
  var ULong = kotlin_kotlin.$_$.gb;
  var UInt = kotlin_kotlin.$_$.eb;
  var UShort = kotlin_kotlin.$_$.ib;
  var UByte = kotlin_kotlin.$_$.cb;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.vb;
  var asSequence = kotlin_kotlin.$_$.o4;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.p3;
  var mapOf = kotlin_kotlin.$_$.u5;
  var get_js = kotlin_kotlin.$_$.m8;
  var findAssociatedObject = kotlin_kotlin.$_$.b;
  var get_indices = kotlin_kotlin.$_$.k5;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.g1;
  var get_indices_0 = kotlin_kotlin.$_$.j5;
  var Companion_instance = kotlin_kotlin.$_$.u3;
  var _Result___init__impl__xyqfz8 = kotlin_kotlin.$_$.r1;
  var createFailure = kotlin_kotlin.$_$.ob;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(SerializationStrategy, 'SerializationStrategy');
  initMetadataForInterface(DeserializationStrategy, 'DeserializationStrategy');
  initMetadataForInterface(KSerializer, 'KSerializer', VOID, VOID, [SerializationStrategy, DeserializationStrategy]);
  initMetadataForClass(AbstractPolymorphicSerializer, 'AbstractPolymorphicSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(PolymorphicSerializer, 'PolymorphicSerializer', VOID, AbstractPolymorphicSerializer);
  initMetadataForClass(_no_name_provided__qut3iv);
  initMetadataForClass(SealedClassSerializer, 'SealedClassSerializer', VOID, AbstractPolymorphicSerializer);
  initMetadataForClass(SerializationException, 'SerializationException', SerializationException_init_$Create$, IllegalArgumentException);
  initMetadataForClass(UnknownFieldException, 'UnknownFieldException', VOID, SerializationException);
  initMetadataForClass(MissingFieldException, 'MissingFieldException', VOID, SerializationException);
  function get_isNullable() {
    return false;
  }
  function get_isInline() {
    return false;
  }
  function get_annotations() {
    return emptyList();
  }
  initMetadataForInterface(SerialDescriptor, 'SerialDescriptor');
  initMetadataForClass(ContextDescriptor, 'ContextDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForClass(elementDescriptors$1$1);
  initMetadataForClass(_no_name_provided__qut3iv_0);
  initMetadataForClass(elementNames$1$1);
  initMetadataForClass(_no_name_provided__qut3iv_1);
  initMetadataForClass(ClassSerialDescriptorBuilder, 'ClassSerialDescriptorBuilder');
  initMetadataForInterface(CachedNames, 'CachedNames');
  initMetadataForClass(SerialDescriptorImpl, 'SerialDescriptorImpl', VOID, VOID, [SerialDescriptor, CachedNames]);
  initMetadataForClass(SerialKind, 'SerialKind');
  initMetadataForObject(ENUM, 'ENUM', VOID, SerialKind);
  initMetadataForObject(CONTEXTUAL, 'CONTEXTUAL', VOID, SerialKind);
  initMetadataForClass(PolymorphicKind, 'PolymorphicKind', VOID, SerialKind);
  initMetadataForObject(SEALED, 'SEALED', VOID, PolymorphicKind);
  initMetadataForObject(OPEN, 'OPEN', VOID, PolymorphicKind);
  initMetadataForClass(PrimitiveKind, 'PrimitiveKind', VOID, SerialKind);
  initMetadataForObject(BOOLEAN, 'BOOLEAN', VOID, PrimitiveKind);
  initMetadataForObject(BYTE, 'BYTE', VOID, PrimitiveKind);
  initMetadataForObject(CHAR, 'CHAR', VOID, PrimitiveKind);
  initMetadataForObject(SHORT, 'SHORT', VOID, PrimitiveKind);
  initMetadataForObject(INT, 'INT', VOID, PrimitiveKind);
  initMetadataForObject(LONG, 'LONG', VOID, PrimitiveKind);
  initMetadataForObject(FLOAT, 'FLOAT', VOID, PrimitiveKind);
  initMetadataForObject(DOUBLE, 'DOUBLE', VOID, PrimitiveKind);
  initMetadataForObject(STRING, 'STRING', VOID, PrimitiveKind);
  initMetadataForClass(StructureKind, 'StructureKind', VOID, SerialKind);
  initMetadataForObject(CLASS, 'CLASS', VOID, StructureKind);
  initMetadataForObject(LIST, 'LIST', VOID, StructureKind);
  initMetadataForObject(MAP, 'MAP', VOID, StructureKind);
  initMetadataForObject(OBJECT, 'OBJECT', VOID, StructureKind);
  function decodeSerializableValue(deserializer) {
    return deserializer.ui(this);
  }
  initMetadataForInterface(Decoder, 'Decoder');
  function decodeSequentially() {
    return false;
  }
  function decodeCollectionSize(descriptor) {
    return -1;
  }
  function decodeSerializableElement$default(descriptor, index, deserializer, previousValue, $super) {
    previousValue = previousValue === VOID ? null : previousValue;
    return $super === VOID ? this.nm(descriptor, index, deserializer, previousValue) : $super.nm.call(this, descriptor, index, deserializer, previousValue);
  }
  initMetadataForInterface(CompositeDecoder, 'CompositeDecoder');
  initMetadataForClass(AbstractDecoder, 'AbstractDecoder', VOID, VOID, [Decoder, CompositeDecoder]);
  function encodeNotNullMark() {
  }
  function beginCollection(descriptor, collectionSize) {
    return this.bm(descriptor);
  }
  function encodeSerializableValue(serializer, value) {
    serializer.ti(this, value);
  }
  function encodeNullableSerializableValue(serializer, value) {
    var isNullabilitySupported = serializer.si().bk();
    if (isNullabilitySupported) {
      return this.tn(isInterface(serializer, SerializationStrategy) ? serializer : THROW_CCE(), value);
    }
    if (value == null) {
      this.wm();
    } else {
      this.wn();
      this.tn(serializer, value);
    }
  }
  initMetadataForInterface(Encoder, 'Encoder');
  function shouldEncodeElementDefault(descriptor, index) {
    return true;
  }
  initMetadataForInterface(CompositeEncoder, 'CompositeEncoder');
  initMetadataForClass(AbstractEncoder, 'AbstractEncoder', VOID, VOID, [Encoder, CompositeEncoder]);
  initMetadataForObject(NothingSerializer_0, 'NothingSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(DurationSerializer, 'DurationSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(UuidSerializer, 'UuidSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(ListLikeDescriptor, 'ListLikeDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForClass(ArrayListClassDesc, 'ArrayListClassDesc', VOID, ListLikeDescriptor);
  initMetadataForClass(HashSetClassDesc, 'HashSetClassDesc', VOID, ListLikeDescriptor);
  initMetadataForClass(LinkedHashSetClassDesc, 'LinkedHashSetClassDesc', VOID, ListLikeDescriptor);
  initMetadataForClass(MapLikeDescriptor, 'MapLikeDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForClass(HashMapClassDesc, 'HashMapClassDesc', VOID, MapLikeDescriptor);
  initMetadataForClass(LinkedHashMapClassDesc, 'LinkedHashMapClassDesc', VOID, MapLikeDescriptor);
  initMetadataForClass(ArrayClassDesc, 'ArrayClassDesc', VOID, ListLikeDescriptor);
  initMetadataForClass(PrimitiveArrayDescriptor, 'PrimitiveArrayDescriptor', VOID, ListLikeDescriptor);
  initMetadataForClass(AbstractCollectionSerializer, 'AbstractCollectionSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(CollectionLikeSerializer, 'CollectionLikeSerializer', VOID, AbstractCollectionSerializer);
  initMetadataForClass(CollectionSerializer, 'CollectionSerializer', VOID, CollectionLikeSerializer);
  initMetadataForClass(ArrayListSerializer, 'ArrayListSerializer', VOID, CollectionSerializer);
  initMetadataForClass(HashSetSerializer, 'HashSetSerializer', VOID, CollectionSerializer);
  initMetadataForClass(LinkedHashSetSerializer, 'LinkedHashSetSerializer', VOID, CollectionSerializer);
  initMetadataForClass(MapLikeSerializer, 'MapLikeSerializer', VOID, AbstractCollectionSerializer);
  initMetadataForClass(HashMapSerializer, 'HashMapSerializer', VOID, MapLikeSerializer);
  initMetadataForClass(LinkedHashMapSerializer, 'LinkedHashMapSerializer', VOID, MapLikeSerializer);
  initMetadataForClass(ReferenceArraySerializer, 'ReferenceArraySerializer', VOID, CollectionLikeSerializer);
  initMetadataForClass(PrimitiveArraySerializer, 'PrimitiveArraySerializer', VOID, CollectionLikeSerializer);
  initMetadataForClass(PrimitiveArrayBuilder, 'PrimitiveArrayBuilder');
  initMetadataForCompanion(Companion);
  initMetadataForClass(ElementMarker, 'ElementMarker');
  initMetadataForClass(EnumSerializer, 'EnumSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(PluginGeneratedSerialDescriptor, 'PluginGeneratedSerialDescriptor', VOID, VOID, [SerialDescriptor, CachedNames]);
  initMetadataForClass(EnumDescriptor, 'EnumDescriptor', VOID, PluginGeneratedSerialDescriptor);
  initMetadataForClass(InlineClassDescriptor, 'InlineClassDescriptor', VOID, PluginGeneratedSerialDescriptor);
  function typeParametersSerializers() {
    return get_EMPTY_SERIALIZER_ARRAY();
  }
  initMetadataForInterface(GeneratedSerializer, 'GeneratedSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(InlinePrimitiveDescriptor$1, VOID, VOID, VOID, [GeneratedSerializer]);
  initMetadataForObject(NoOpEncoder, 'NoOpEncoder', VOID, AbstractEncoder);
  initMetadataForObject(NothingSerialDescriptor, 'NothingSerialDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForClass(NullableSerializer, 'NullableSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(SerialDescriptorForNullable, 'SerialDescriptorForNullable', VOID, VOID, [SerialDescriptor, CachedNames]);
  initMetadataForClass(ObjectSerializer, 'ObjectSerializer', VOID, VOID, [KSerializer]);
  initMetadataForInterface(SerializerFactory, 'SerializerFactory');
  initMetadataForObject(CharArraySerializer_0, 'CharArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(DoubleArraySerializer_0, 'DoubleArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(FloatArraySerializer_0, 'FloatArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(LongArraySerializer_0, 'LongArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(ULongArraySerializer_0, 'ULongArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(IntArraySerializer_0, 'IntArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(UIntArraySerializer_0, 'UIntArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(ShortArraySerializer_0, 'ShortArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(UShortArraySerializer_0, 'UShortArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(ByteArraySerializer_0, 'ByteArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(UByteArraySerializer_0, 'UByteArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForObject(BooleanArraySerializer_0, 'BooleanArraySerializer', VOID, PrimitiveArraySerializer, [KSerializer, PrimitiveArraySerializer]);
  initMetadataForClass(CharArrayBuilder, 'CharArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(DoubleArrayBuilder, 'DoubleArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(FloatArrayBuilder, 'FloatArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(LongArrayBuilder, 'LongArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(ULongArrayBuilder, 'ULongArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(IntArrayBuilder, 'IntArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(UIntArrayBuilder, 'UIntArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(ShortArrayBuilder, 'ShortArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(UShortArrayBuilder, 'UShortArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(ByteArrayBuilder, 'ByteArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(UByteArrayBuilder, 'UByteArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForClass(BooleanArrayBuilder, 'BooleanArrayBuilder', VOID, PrimitiveArrayBuilder);
  initMetadataForObject(StringSerializer, 'StringSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(CharSerializer, 'CharSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(DoubleSerializer, 'DoubleSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(FloatSerializer, 'FloatSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(LongSerializer, 'LongSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(IntSerializer, 'IntSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(ShortSerializer, 'ShortSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(ByteSerializer, 'ByteSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(BooleanSerializer, 'BooleanSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(UnitSerializer, 'UnitSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(PrimitiveSerialDescriptor_0, 'PrimitiveSerialDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForClass(TaggedDecoder, 'TaggedDecoder', VOID, VOID, [Decoder, CompositeDecoder]);
  initMetadataForClass(NamedValueDecoder, 'NamedValueDecoder', VOID, TaggedDecoder);
  initMetadataForClass(MapEntry, 'MapEntry', VOID, VOID, [Entry]);
  initMetadataForClass(KeyValueSerializer, 'KeyValueSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(MapEntrySerializer_0, 'MapEntrySerializer', VOID, KeyValueSerializer);
  initMetadataForClass(PairSerializer_0, 'PairSerializer', VOID, KeyValueSerializer);
  initMetadataForClass(TripleSerializer_0, 'TripleSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(ULongSerializer, 'ULongSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(UIntSerializer, 'UIntSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(UShortSerializer, 'UShortSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(UByteSerializer, 'UByteSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(PolymorphicModuleBuilder, 'PolymorphicModuleBuilder');
  initMetadataForClass(SerializersModule, 'SerializersModule');
  initMetadataForClass(SerialModuleImpl, 'SerialModuleImpl', VOID, SerializersModule);
  initMetadataForClass(ContextualProvider, 'ContextualProvider');
  initMetadataForClass(Argless, 'Argless', VOID, ContextualProvider);
  initMetadataForClass(WithTypeArguments, 'WithTypeArguments', VOID, ContextualProvider);
  function contextual(kClass, serializer) {
    return this.j13(kClass, SerializersModuleCollector$contextual$lambda(serializer));
  }
  initMetadataForInterface(SerializersModuleCollector, 'SerializersModuleCollector');
  initMetadataForClass(SerializersModuleBuilder, 'SerializersModuleBuilder', VOID, VOID, [SerializersModuleCollector]);
  initMetadataForClass(SerializerAlreadyRegisteredException, 'SerializerAlreadyRegisteredException', VOID, IllegalArgumentException);
  initMetadataForClass(SerializableWith, 'SerializableWith', VOID, VOID, VOID, VOID, 0);
  initMetadataForClass(createCache$1);
  initMetadataForClass(createParametrizedCache$1);
  //endregion
  function KSerializer() {
  }
  function SerializationStrategy() {
  }
  function DeserializationStrategy() {
  }
  function PolymorphicSerializer_init_$Init$(baseClass, classAnnotations, $this) {
    PolymorphicSerializer.call($this, baseClass);
    $this.wi_1 = asList(classAnnotations);
    return $this;
  }
  function PolymorphicSerializer_init_$Create$(baseClass, classAnnotations) {
    return PolymorphicSerializer_init_$Init$(baseClass, classAnnotations, objectCreate(protoOf(PolymorphicSerializer)));
  }
  function PolymorphicSerializer$descriptor$delegate$lambda$lambda(this$0) {
    return function ($this$buildSerialDescriptor) {
      $this$buildSerialDescriptor.gj('type', serializer_1(StringCompanionObject_instance).si());
      $this$buildSerialDescriptor.gj('value', buildSerialDescriptor('kotlinx.serialization.Polymorphic<' + this$0.vi_1.f9() + '>', CONTEXTUAL_getInstance(), []));
      $this$buildSerialDescriptor.aj_1 = this$0.wi_1;
      return Unit_instance;
    };
  }
  function PolymorphicSerializer$descriptor$delegate$lambda(this$0) {
    return function () {
      var tmp = OPEN_getInstance();
      return withContext(buildSerialDescriptor('kotlinx.serialization.Polymorphic', tmp, [], PolymorphicSerializer$descriptor$delegate$lambda$lambda(this$0)), this$0.vi_1);
    };
  }
  function PolymorphicSerializer(baseClass) {
    AbstractPolymorphicSerializer.call(this);
    this.vi_1 = baseClass;
    this.wi_1 = emptyList();
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.xi_1 = lazy(tmp_0, PolymorphicSerializer$descriptor$delegate$lambda(this));
  }
  protoOf(PolymorphicSerializer).hj = function () {
    return this.vi_1;
  };
  protoOf(PolymorphicSerializer).si = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.xi_1;
    descriptor$factory();
    return this_0.u1();
  };
  protoOf(PolymorphicSerializer).toString = function () {
    return 'kotlinx.serialization.PolymorphicSerializer(baseClass: ' + toString(this.vi_1) + ')';
  };
  function findPolymorphicSerializer(_this__u8e3s4, encoder, value) {
    var tmp0_elvis_lhs = _this__u8e3s4.kj(encoder, value);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwSubtypeNotRegistered(getKClassFromExpression(value), _this__u8e3s4.hj());
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function findPolymorphicSerializer_0(_this__u8e3s4, decoder, klassName) {
    var tmp0_elvis_lhs = _this__u8e3s4.jj(decoder, klassName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwSubtypeNotRegistered_0(klassName, _this__u8e3s4.hj());
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function descriptor$factory() {
    return getPropertyCallableRef('descriptor', 1, KProperty1, function (receiver) {
      return receiver.si();
    }, null);
  }
  function SealedClassSerializer_init_$Init$(serialName, baseClass, subclasses, subclassSerializers, classAnnotations, $this) {
    SealedClassSerializer.call($this, serialName, baseClass, subclasses, subclassSerializers);
    $this.mj_1 = asList(classAnnotations);
    return $this;
  }
  function SealedClassSerializer_init_$Create$(serialName, baseClass, subclasses, subclassSerializers, classAnnotations) {
    return SealedClassSerializer_init_$Init$(serialName, baseClass, subclasses, subclassSerializers, classAnnotations, objectCreate(protoOf(SealedClassSerializer)));
  }
  function SealedClassSerializer$descriptor$delegate$lambda$lambda$lambda(this$0) {
    return function ($this$buildSerialDescriptor) {
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator = this$0.pj_1.r().j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlinx.serialization.SealedClassSerializer.descriptor$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var name = element.t1();
        // Inline function 'kotlin.collections.component2' call
        var serializer = element.u1();
        $this$buildSerialDescriptor.gj(name, serializer.si());
      }
      return Unit_instance;
    };
  }
  function SealedClassSerializer$descriptor$delegate$lambda$lambda(this$0) {
    return function ($this$buildSerialDescriptor) {
      $this$buildSerialDescriptor.gj('type', serializer_1(StringCompanionObject_instance).si());
      var tmp = 'kotlinx.serialization.Sealed<' + this$0.lj_1.f9() + '>';
      var tmp_0 = CONTEXTUAL_getInstance();
      var elementDescriptor = buildSerialDescriptor(tmp, tmp_0, [], SealedClassSerializer$descriptor$delegate$lambda$lambda$lambda(this$0));
      $this$buildSerialDescriptor.gj('value', elementDescriptor);
      $this$buildSerialDescriptor.aj_1 = this$0.mj_1;
      return Unit_instance;
    };
  }
  function SealedClassSerializer$descriptor$delegate$lambda($serialName, this$0) {
    return function () {
      var tmp = SEALED_getInstance();
      return buildSerialDescriptor($serialName, tmp, [], SealedClassSerializer$descriptor$delegate$lambda$lambda(this$0));
    };
  }
  function _no_name_provided__qut3iv($this) {
    this.qj_1 = $this;
  }
  protoOf(_no_name_provided__qut3iv).rj = function () {
    return this.qj_1.j();
  };
  protoOf(_no_name_provided__qut3iv).sj = function (element) {
    // Inline function 'kotlinx.serialization.SealedClassSerializer.<anonymous>' call
    return element.u1().si().tj();
  };
  protoOf(_no_name_provided__qut3iv).uj = function (element) {
    return this.sj((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function SealedClassSerializer(serialName, baseClass, subclasses, subclassSerializers) {
    AbstractPolymorphicSerializer.call(this);
    this.lj_1 = baseClass;
    this.mj_1 = emptyList();
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.nj_1 = lazy(tmp_0, SealedClassSerializer$descriptor$delegate$lambda(serialName, this));
    if (!(subclasses.length === subclassSerializers.length)) {
      throw IllegalArgumentException_init_$Create$('All subclasses of sealed class ' + this.lj_1.f9() + ' should be marked @Serializable');
    }
    this.oj_1 = toMap(zip(subclasses, subclassSerializers));
    var tmp_1 = this;
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.aggregate' call
    // Inline function 'kotlin.collections.groupingBy' call
    var this_0 = this.oj_1.r();
    // Inline function 'kotlin.collections.aggregateTo' call
    var this_1 = new _no_name_provided__qut3iv(this_0);
    // Inline function 'kotlin.collections.mutableMapOf' call
    var destination = LinkedHashMap_init_$Create$();
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = this_1.rj();
    while (tmp0_iterator.k()) {
      var e = tmp0_iterator.l();
      var key = this_1.uj(e);
      var accumulator = destination.x1(key);
      // Inline function 'kotlin.collections.set' call
      // Inline function 'kotlinx.serialization.SealedClassSerializer.<anonymous>' call
      accumulator == null && !destination.v1(key);
      if (!(accumulator == null)) {
        // Inline function 'kotlin.error' call
        var message = "Multiple sealed subclasses of '" + toString(this.lj_1) + "' have the same serial name '" + key + "':" + (" '" + toString(accumulator.t1()) + "', '" + toString(e.t1()) + "'");
        throw IllegalStateException_init_$Create$(toString(message));
      }
      destination.b2(key, e);
    }
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.m()));
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_iterator_0 = destination.r().j();
    while (tmp0_iterator_0.k()) {
      var element = tmp0_iterator_0.l();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_2 = element.t1();
      // Inline function 'kotlinx.serialization.SealedClassSerializer.<anonymous>' call
      var tmp$ret$7 = element.u1().u1();
      destination_0.b2(tmp_2, tmp$ret$7);
    }
    tmp_1.pj_1 = destination_0;
  }
  protoOf(SealedClassSerializer).hj = function () {
    return this.lj_1;
  };
  protoOf(SealedClassSerializer).si = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.nj_1;
    descriptor$factory_0();
    return this_0.u1();
  };
  protoOf(SealedClassSerializer).jj = function (decoder, klassName) {
    // Inline function 'kotlin.collections.get' call
    var this_0 = this.pj_1;
    var tmp0_elvis_lhs = (isInterface(this_0, KtMap) ? this_0 : THROW_CCE()).x1(klassName);
    return tmp0_elvis_lhs == null ? protoOf(AbstractPolymorphicSerializer).jj.call(this, decoder, klassName) : tmp0_elvis_lhs;
  };
  protoOf(SealedClassSerializer).kj = function (encoder, value) {
    var tmp0_elvis_lhs = this.oj_1.x1(getKClassFromExpression(value));
    var tmp1_safe_receiver = tmp0_elvis_lhs == null ? protoOf(AbstractPolymorphicSerializer).kj.call(this, encoder, value) : tmp0_elvis_lhs;
    var tmp;
    if (tmp1_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlinx.serialization.internal.cast' call
      tmp = isInterface(tmp1_safe_receiver, SerializationStrategy) ? tmp1_safe_receiver : THROW_CCE();
    }
    return tmp;
  };
  function descriptor$factory_0() {
    return getPropertyCallableRef('descriptor', 1, KProperty1, function (receiver) {
      return receiver.si();
    }, null);
  }
  function SerializationException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException_init_$Create$() {
    var tmp = SerializationException_init_$Init$(objectCreate(protoOf(SerializationException)));
    captureStack(tmp, SerializationException_init_$Create$);
    return tmp;
  }
  function SerializationException_init_$Init$_0(message, $this) {
    IllegalArgumentException_init_$Init$_0(message, $this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException_init_$Create$_0(message) {
    var tmp = SerializationException_init_$Init$_0(message, objectCreate(protoOf(SerializationException)));
    captureStack(tmp, SerializationException_init_$Create$_0);
    return tmp;
  }
  function SerializationException_init_$Init$_1(message, cause, $this) {
    IllegalArgumentException_init_$Init$_1(message, cause, $this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException() {
    captureStack(this, SerializationException);
  }
  function UnknownFieldException_init_$Init$(index, $this) {
    UnknownFieldException.call($this, 'An unknown field for index ' + index);
    return $this;
  }
  function UnknownFieldException_init_$Create$(index) {
    var tmp = UnknownFieldException_init_$Init$(index, objectCreate(protoOf(UnknownFieldException)));
    captureStack(tmp, UnknownFieldException_init_$Create$);
    return tmp;
  }
  function UnknownFieldException(message) {
    SerializationException_init_$Init$_0(message, this);
    captureStack(this, UnknownFieldException);
  }
  function MissingFieldException_init_$Init$(missingFields, serialName, $this) {
    MissingFieldException.call($this, missingFields, missingFields.m() === 1 ? "Field '" + missingFields.o(0) + "' is required for type with serial name '" + serialName + "', but it was missing" : 'Fields ' + toString(missingFields) + " are required for type with serial name '" + serialName + "', but they were missing", null);
    return $this;
  }
  function MissingFieldException_init_$Create$(missingFields, serialName) {
    var tmp = MissingFieldException_init_$Init$(missingFields, serialName, objectCreate(protoOf(MissingFieldException)));
    captureStack(tmp, MissingFieldException_init_$Create$);
    return tmp;
  }
  function MissingFieldException(missingFields, message, cause) {
    SerializationException_init_$Init$_1(message, cause, this);
    captureStack(this, MissingFieldException);
    this.vj_1 = missingFields;
  }
  function serializerOrNull(_this__u8e3s4) {
    var tmp0_elvis_lhs = compiledSerializerImpl(_this__u8e3s4);
    return tmp0_elvis_lhs == null ? builtinSerializerOrNull(_this__u8e3s4) : tmp0_elvis_lhs;
  }
  function serializersForParameters(_this__u8e3s4, typeArguments, failOnMissingTypeArgSerializer) {
    var tmp;
    if (failOnMissingTypeArgSerializer) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(typeArguments, 10));
      var tmp0_iterator = typeArguments.j();
      while (tmp0_iterator.k()) {
        var item = tmp0_iterator.l();
        // Inline function 'kotlinx.serialization.serializersForParameters.<anonymous>' call
        var tmp$ret$0 = serializer(_this__u8e3s4, item);
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(typeArguments, 10));
      var tmp0_iterator_0 = typeArguments.j();
      while (tmp0_iterator_0.k()) {
        var item_0 = tmp0_iterator_0.l();
        // Inline function 'kotlinx.serialization.serializersForParameters.<anonymous>' call
        var tmp0_elvis_lhs = serializerOrNull_0(_this__u8e3s4, item_0);
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          return null;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        var tmp$ret$3 = tmp_0;
        destination_0.e(tmp$ret$3);
      }
      tmp = destination_0;
    }
    var serializers = tmp;
    return serializers;
  }
  function parametrizedSerializerOrNull(_this__u8e3s4, serializers, elementClassifierIfArray) {
    var tmp0_elvis_lhs = builtinParametrizedSerializer(_this__u8e3s4, serializers, elementClassifierIfArray);
    return tmp0_elvis_lhs == null ? compiledParametrizedSerializer(_this__u8e3s4, serializers) : tmp0_elvis_lhs;
  }
  function serializer(_this__u8e3s4, type) {
    var tmp0_elvis_lhs = serializerByKTypeImpl(_this__u8e3s4, type, true);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      platformSpecificSerializerNotRegistered(kclass(type));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function serializerOrNull_0(_this__u8e3s4, type) {
    return serializerByKTypeImpl(_this__u8e3s4, type, false);
  }
  function builtinParametrizedSerializer(_this__u8e3s4, serializers, elementClassifierIfArray) {
    var tmp;
    if (_this__u8e3s4.equals(getKClass(Collection)) || _this__u8e3s4.equals(getKClass(KtList)) || (_this__u8e3s4.equals(getKClass(KtMutableList)) || _this__u8e3s4.equals(getKClass(ArrayList)))) {
      tmp = new ArrayListSerializer(serializers.o(0));
    } else if (_this__u8e3s4.equals(getKClass(HashSet))) {
      tmp = new HashSetSerializer(serializers.o(0));
    } else if (_this__u8e3s4.equals(getKClass(KtSet)) || (_this__u8e3s4.equals(getKClass(KtMutableSet)) || _this__u8e3s4.equals(getKClass(LinkedHashSet)))) {
      tmp = new LinkedHashSetSerializer(serializers.o(0));
    } else if (_this__u8e3s4.equals(getKClass(HashMap))) {
      tmp = new HashMapSerializer(serializers.o(0), serializers.o(1));
    } else if (_this__u8e3s4.equals(getKClass(KtMap)) || (_this__u8e3s4.equals(getKClass(KtMutableMap)) || _this__u8e3s4.equals(getKClass(LinkedHashMap)))) {
      tmp = new LinkedHashMapSerializer(serializers.o(0), serializers.o(1));
    } else if (_this__u8e3s4.equals(getKClass(Entry))) {
      tmp = MapEntrySerializer(serializers.o(0), serializers.o(1));
    } else if (_this__u8e3s4.equals(getKClass(Pair))) {
      tmp = PairSerializer(serializers.o(0), serializers.o(1));
    } else if (_this__u8e3s4.equals(getKClass(Triple))) {
      tmp = TripleSerializer(serializers.o(0), serializers.o(1), serializers.o(2));
    } else {
      var tmp_0;
      if (isReferenceArray(_this__u8e3s4)) {
        var tmp_1 = elementClassifierIfArray();
        tmp_0 = ArraySerializer((!(tmp_1 == null) ? isInterface(tmp_1, KClass) : false) ? tmp_1 : THROW_CCE(), serializers.o(0));
      } else {
        tmp_0 = null;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function compiledParametrizedSerializer(_this__u8e3s4, serializers) {
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$0 = copyToArray(serializers);
    return constructSerializerForGivenTypeArgs(_this__u8e3s4, tmp$ret$0.slice());
  }
  function serializerByKTypeImpl(_this__u8e3s4, type, failOnMissingTypeArgSerializer) {
    var rootClass = kclass(type);
    var isNullable = type.t9();
    // Inline function 'kotlin.collections.map' call
    var this_0 = type.s9();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.j();
    while (tmp0_iterator.k()) {
      var item = tmp0_iterator.l();
      var tmp$ret$0 = typeOrThrow(item);
      destination.e(tmp$ret$0);
    }
    var typeArguments = destination;
    var tmp;
    if (typeArguments.n()) {
      var tmp_0;
      if (isInterface_0(rootClass) && !(_this__u8e3s4.xj(rootClass) == null)) {
        tmp_0 = null;
      } else {
        tmp_0 = findCachedSerializer(rootClass, isNullable);
      }
      tmp = tmp_0;
    } else {
      var tmp_1;
      if (_this__u8e3s4.wj()) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.Result.getOrNull' call
        var this_1 = findParametrizedCachedSerializer(rootClass, typeArguments, isNullable);
        var tmp_2;
        if (_Result___get_isFailure__impl__jpiriv(this_1)) {
          tmp_2 = null;
        } else {
          var tmp_3 = _Result___get_value__impl__bjfvqg(this_1);
          tmp_2 = (tmp_3 == null ? true : !(tmp_3 == null)) ? tmp_3 : THROW_CCE();
        }
        tmp_1 = tmp_2;
      }
      tmp = tmp_1;
    }
    var cachedSerializer = tmp;
    if (!(cachedSerializer == null))
      return cachedSerializer;
    var tmp_4;
    if (typeArguments.n()) {
      var tmp0_elvis_lhs = serializerOrNull(rootClass);
      var tmp1_elvis_lhs = tmp0_elvis_lhs == null ? _this__u8e3s4.xj(rootClass) : tmp0_elvis_lhs;
      var tmp_5;
      if (tmp1_elvis_lhs == null) {
        // Inline function 'kotlinx.serialization.polymorphicIfInterface' call
        tmp_5 = isInterface_0(rootClass) ? new PolymorphicSerializer(rootClass) : null;
      } else {
        tmp_5 = tmp1_elvis_lhs;
      }
      tmp_4 = tmp_5;
    } else {
      var tmp2_elvis_lhs = serializersForParameters(_this__u8e3s4, typeArguments, failOnMissingTypeArgSerializer);
      var tmp_6;
      if (tmp2_elvis_lhs == null) {
        return null;
      } else {
        tmp_6 = tmp2_elvis_lhs;
      }
      var serializers = tmp_6;
      var tmp3_elvis_lhs = parametrizedSerializerOrNull(rootClass, serializers, serializerByKTypeImpl$lambda(typeArguments));
      var tmp4_elvis_lhs = tmp3_elvis_lhs == null ? _this__u8e3s4.yj(rootClass, serializers) : tmp3_elvis_lhs;
      var tmp_7;
      if (tmp4_elvis_lhs == null) {
        // Inline function 'kotlinx.serialization.polymorphicIfInterface' call
        tmp_7 = isInterface_0(rootClass) ? new PolymorphicSerializer(rootClass) : null;
      } else {
        tmp_7 = tmp4_elvis_lhs;
      }
      tmp_4 = tmp_7;
    }
    var contextualSerializer = tmp_4;
    var tmp_8;
    if (contextualSerializer == null) {
      tmp_8 = null;
    } else {
      // Inline function 'kotlinx.serialization.internal.cast' call
      tmp_8 = isInterface(contextualSerializer, KSerializer) ? contextualSerializer : THROW_CCE();
    }
    var tmp6_safe_receiver = tmp_8;
    return tmp6_safe_receiver == null ? null : nullable(tmp6_safe_receiver, isNullable);
  }
  function nullable(_this__u8e3s4, shouldBeNullable) {
    if (shouldBeNullable)
      return get_nullable(_this__u8e3s4);
    return isInterface(_this__u8e3s4, KSerializer) ? _this__u8e3s4 : THROW_CCE();
  }
  function serializer_0(type) {
    return serializer(EmptySerializersModule_0(), type);
  }
  function serializerByKTypeImpl$lambda($typeArguments) {
    return function () {
      return $typeArguments.o(0).r9();
    };
  }
  function get_SERIALIZERS_CACHE() {
    _init_properties_SerializersCache_kt__hgwi2p();
    return SERIALIZERS_CACHE;
  }
  var SERIALIZERS_CACHE;
  function get_SERIALIZERS_CACHE_NULLABLE() {
    _init_properties_SerializersCache_kt__hgwi2p();
    return SERIALIZERS_CACHE_NULLABLE;
  }
  var SERIALIZERS_CACHE_NULLABLE;
  function get_PARAMETRIZED_SERIALIZERS_CACHE() {
    _init_properties_SerializersCache_kt__hgwi2p();
    return PARAMETRIZED_SERIALIZERS_CACHE;
  }
  var PARAMETRIZED_SERIALIZERS_CACHE;
  function get_PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE() {
    _init_properties_SerializersCache_kt__hgwi2p();
    return PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE;
  }
  var PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE;
  function findCachedSerializer(clazz, isNullable) {
    _init_properties_SerializersCache_kt__hgwi2p();
    var tmp;
    if (!isNullable) {
      var tmp0_safe_receiver = get_SERIALIZERS_CACHE().zj(clazz);
      var tmp_0;
      if (tmp0_safe_receiver == null) {
        tmp_0 = null;
      } else {
        // Inline function 'kotlinx.serialization.internal.cast' call
        tmp_0 = isInterface(tmp0_safe_receiver, KSerializer) ? tmp0_safe_receiver : THROW_CCE();
      }
      tmp = tmp_0;
    } else {
      tmp = get_SERIALIZERS_CACHE_NULLABLE().zj(clazz);
    }
    return tmp;
  }
  function findParametrizedCachedSerializer(clazz, types, isNullable) {
    _init_properties_SerializersCache_kt__hgwi2p();
    var tmp;
    if (!isNullable) {
      var tmp_0 = get_PARAMETRIZED_SERIALIZERS_CACHE().ak(clazz, types);
      tmp = new Result(tmp_0) instanceof Result ? tmp_0 : THROW_CCE();
    } else {
      tmp = get_PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE().ak(clazz, types);
    }
    return tmp;
  }
  function SERIALIZERS_CACHE$lambda(it) {
    _init_properties_SerializersCache_kt__hgwi2p();
    var tmp0_elvis_lhs = serializerOrNull(it);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlinx.serialization.polymorphicIfInterface' call
      tmp = isInterface_0(it) ? new PolymorphicSerializer(it) : null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function SERIALIZERS_CACHE_NULLABLE$lambda(it) {
    _init_properties_SerializersCache_kt__hgwi2p();
    var tmp0_elvis_lhs = serializerOrNull(it);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlinx.serialization.polymorphicIfInterface' call
      tmp = isInterface_0(it) ? new PolymorphicSerializer(it) : null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var tmp1_safe_receiver = tmp;
    var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : get_nullable(tmp1_safe_receiver);
    var tmp_0;
    if (tmp2_safe_receiver == null) {
      tmp_0 = null;
    } else {
      // Inline function 'kotlinx.serialization.internal.cast' call
      tmp_0 = isInterface(tmp2_safe_receiver, KSerializer) ? tmp2_safe_receiver : THROW_CCE();
    }
    return tmp_0;
  }
  function PARAMETRIZED_SERIALIZERS_CACHE$lambda(clazz, types) {
    _init_properties_SerializersCache_kt__hgwi2p();
    var serializers = ensureNotNull(serializersForParameters(EmptySerializersModule_0(), types, true));
    return parametrizedSerializerOrNull(clazz, serializers, PARAMETRIZED_SERIALIZERS_CACHE$lambda$lambda(types));
  }
  function PARAMETRIZED_SERIALIZERS_CACHE$lambda$lambda($types) {
    return function () {
      return $types.o(0).r9();
    };
  }
  function PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE$lambda(clazz, types) {
    _init_properties_SerializersCache_kt__hgwi2p();
    var serializers = ensureNotNull(serializersForParameters(EmptySerializersModule_0(), types, true));
    var tmp0_safe_receiver = parametrizedSerializerOrNull(clazz, serializers, PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE$lambda$lambda(types));
    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : get_nullable(tmp0_safe_receiver);
    var tmp;
    if (tmp1_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlinx.serialization.internal.cast' call
      tmp = isInterface(tmp1_safe_receiver, KSerializer) ? tmp1_safe_receiver : THROW_CCE();
    }
    return tmp;
  }
  function PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE$lambda$lambda($types) {
    return function () {
      return $types.o(0).r9();
    };
  }
  var properties_initialized_SerializersCache_kt_q8kf25;
  function _init_properties_SerializersCache_kt__hgwi2p() {
    if (!properties_initialized_SerializersCache_kt_q8kf25) {
      properties_initialized_SerializersCache_kt_q8kf25 = true;
      SERIALIZERS_CACHE = createCache(SERIALIZERS_CACHE$lambda);
      SERIALIZERS_CACHE_NULLABLE = createCache(SERIALIZERS_CACHE_NULLABLE$lambda);
      PARAMETRIZED_SERIALIZERS_CACHE = createParametrizedCache(PARAMETRIZED_SERIALIZERS_CACHE$lambda);
      PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE = createParametrizedCache(PARAMETRIZED_SERIALIZERS_CACHE_NULLABLE$lambda);
    }
  }
  function get_nullable(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4.si().bk()) {
      tmp = isInterface(_this__u8e3s4, KSerializer) ? _this__u8e3s4 : THROW_CCE();
    } else {
      tmp = new NullableSerializer(_this__u8e3s4);
    }
    return tmp;
  }
  function serializer_1(_this__u8e3s4) {
    return StringSerializer_getInstance();
  }
  function serializer_2(_this__u8e3s4) {
    return CharSerializer_getInstance();
  }
  function CharArraySerializer() {
    return CharArraySerializer_getInstance();
  }
  function serializer_3(_this__u8e3s4) {
    return DoubleSerializer_getInstance();
  }
  function DoubleArraySerializer() {
    return DoubleArraySerializer_getInstance();
  }
  function serializer_4(_this__u8e3s4) {
    return FloatSerializer_getInstance();
  }
  function FloatArraySerializer() {
    return FloatArraySerializer_getInstance();
  }
  function serializer_5(_this__u8e3s4) {
    return LongSerializer_getInstance();
  }
  function LongArraySerializer() {
    return LongArraySerializer_getInstance();
  }
  function serializer_6(_this__u8e3s4) {
    return ULongSerializer_getInstance();
  }
  function ULongArraySerializer() {
    return ULongArraySerializer_getInstance();
  }
  function serializer_7(_this__u8e3s4) {
    return IntSerializer_getInstance();
  }
  function IntArraySerializer() {
    return IntArraySerializer_getInstance();
  }
  function serializer_8(_this__u8e3s4) {
    return UIntSerializer_getInstance();
  }
  function UIntArraySerializer() {
    return UIntArraySerializer_getInstance();
  }
  function serializer_9(_this__u8e3s4) {
    return ShortSerializer_getInstance();
  }
  function ShortArraySerializer() {
    return ShortArraySerializer_getInstance();
  }
  function serializer_10(_this__u8e3s4) {
    return UShortSerializer_getInstance();
  }
  function UShortArraySerializer() {
    return UShortArraySerializer_getInstance();
  }
  function serializer_11(_this__u8e3s4) {
    return ByteSerializer_getInstance();
  }
  function ByteArraySerializer() {
    return ByteArraySerializer_getInstance();
  }
  function serializer_12(_this__u8e3s4) {
    return UByteSerializer_getInstance();
  }
  function UByteArraySerializer() {
    return UByteArraySerializer_getInstance();
  }
  function serializer_13(_this__u8e3s4) {
    return BooleanSerializer_getInstance();
  }
  function BooleanArraySerializer() {
    return BooleanArraySerializer_getInstance();
  }
  function serializer_14(_this__u8e3s4) {
    return UnitSerializer_getInstance();
  }
  function NothingSerializer() {
    return NothingSerializer_getInstance();
  }
  function serializer_15(_this__u8e3s4) {
    return DurationSerializer_getInstance();
  }
  function serializer_16(_this__u8e3s4) {
    return UuidSerializer_getInstance();
  }
  function MapEntrySerializer(keySerializer, valueSerializer) {
    return new MapEntrySerializer_0(keySerializer, valueSerializer);
  }
  function PairSerializer(keySerializer, valueSerializer) {
    return new PairSerializer_0(keySerializer, valueSerializer);
  }
  function TripleSerializer(aSerializer, bSerializer, cSerializer) {
    return new TripleSerializer_0(aSerializer, bSerializer, cSerializer);
  }
  function ArraySerializer(kClass, elementSerializer) {
    return new ReferenceArraySerializer(kClass, elementSerializer);
  }
  function MapSerializer(keySerializer, valueSerializer) {
    return new LinkedHashMapSerializer(keySerializer, valueSerializer);
  }
  function ListSerializer(elementSerializer) {
    return new ArrayListSerializer(elementSerializer);
  }
  function withContext(_this__u8e3s4, context) {
    return new ContextDescriptor(_this__u8e3s4, context);
  }
  function ContextDescriptor(original, kClass) {
    this.ck_1 = original;
    this.dk_1 = kClass;
    this.ek_1 = this.ck_1.tj() + '<' + this.dk_1.f9() + '>';
  }
  protoOf(ContextDescriptor).tj = function () {
    return this.ek_1;
  };
  protoOf(ContextDescriptor).equals = function (other) {
    var tmp0_elvis_lhs = other instanceof ContextDescriptor ? other : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var another = tmp;
    return equals(this.ck_1, another.ck_1) && another.dk_1.equals(this.dk_1);
  };
  protoOf(ContextDescriptor).hashCode = function () {
    var result = this.dk_1.hashCode();
    result = imul(31, result) + getStringHashCode(this.ek_1) | 0;
    return result;
  };
  protoOf(ContextDescriptor).toString = function () {
    return 'ContextDescriptor(kClass: ' + toString(this.dk_1) + ', original: ' + toString(this.ck_1) + ')';
  };
  protoOf(ContextDescriptor).fk = function () {
    return this.ck_1.fk();
  };
  protoOf(ContextDescriptor).bk = function () {
    return this.ck_1.bk();
  };
  protoOf(ContextDescriptor).gk = function () {
    return this.ck_1.gk();
  };
  protoOf(ContextDescriptor).hk = function () {
    return this.ck_1.hk();
  };
  protoOf(ContextDescriptor).ik = function () {
    return this.ck_1.ik();
  };
  protoOf(ContextDescriptor).jk = function (index) {
    return this.ck_1.jk(index);
  };
  protoOf(ContextDescriptor).kk = function (name) {
    return this.ck_1.kk(name);
  };
  protoOf(ContextDescriptor).lk = function (index) {
    return this.ck_1.lk(index);
  };
  protoOf(ContextDescriptor).mk = function (index) {
    return this.ck_1.mk(index);
  };
  protoOf(ContextDescriptor).nk = function (index) {
    return this.ck_1.nk(index);
  };
  function getContextualDescriptor(_this__u8e3s4, descriptor) {
    var tmp0_safe_receiver = get_capturedKClass(descriptor);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.descriptors.getContextualDescriptor.<anonymous>' call
      var tmp0_safe_receiver_0 = _this__u8e3s4.xj(tmp0_safe_receiver);
      tmp = tmp0_safe_receiver_0 == null ? null : tmp0_safe_receiver_0.si();
    }
    return tmp;
  }
  function get_capturedKClass(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 instanceof ContextDescriptor) {
      tmp = _this__u8e3s4.dk_1;
    } else {
      if (_this__u8e3s4 instanceof SerialDescriptorForNullable) {
        tmp = get_capturedKClass(_this__u8e3s4.ok_1);
      } else {
        tmp = null;
      }
    }
    return tmp;
  }
  function SerialDescriptor() {
  }
  function get_elementDescriptors(_this__u8e3s4) {
    // Inline function 'kotlin.collections.Iterable' call
    return new _no_name_provided__qut3iv_0(_this__u8e3s4);
  }
  function get_elementNames(_this__u8e3s4) {
    // Inline function 'kotlin.collections.Iterable' call
    return new _no_name_provided__qut3iv_1(_this__u8e3s4);
  }
  function elementDescriptors$1$1($this_elementDescriptors) {
    this.sk_1 = $this_elementDescriptors;
    this.rk_1 = $this_elementDescriptors.hk();
  }
  protoOf(elementDescriptors$1$1).k = function () {
    return this.rk_1 > 0;
  };
  protoOf(elementDescriptors$1$1).l = function () {
    var tmp = this.sk_1.hk();
    var _unary__edvuaz = this.rk_1;
    this.rk_1 = _unary__edvuaz - 1 | 0;
    return this.sk_1.mk(tmp - _unary__edvuaz | 0);
  };
  function _no_name_provided__qut3iv_0($this_elementDescriptors) {
    this.tk_1 = $this_elementDescriptors;
  }
  protoOf(_no_name_provided__qut3iv_0).j = function () {
    // Inline function 'kotlinx.serialization.descriptors.<get-elementDescriptors>.<anonymous>' call
    return new elementDescriptors$1$1(this.tk_1);
  };
  function elementNames$1$1($this_elementNames) {
    this.vk_1 = $this_elementNames;
    this.uk_1 = $this_elementNames.hk();
  }
  protoOf(elementNames$1$1).k = function () {
    return this.uk_1 > 0;
  };
  protoOf(elementNames$1$1).l = function () {
    var tmp = this.vk_1.hk();
    var _unary__edvuaz = this.uk_1;
    this.uk_1 = _unary__edvuaz - 1 | 0;
    return this.vk_1.jk(tmp - _unary__edvuaz | 0);
  };
  function _no_name_provided__qut3iv_1($this_elementNames) {
    this.wk_1 = $this_elementNames;
  }
  protoOf(_no_name_provided__qut3iv_1).j = function () {
    // Inline function 'kotlinx.serialization.descriptors.<get-elementNames>.<anonymous>' call
    return new elementNames$1$1(this.wk_1);
  };
  function buildSerialDescriptor(serialName, kind, typeParameters, builder) {
    var tmp;
    if (builder === VOID) {
      tmp = buildSerialDescriptor$lambda;
    } else {
      tmp = builder;
    }
    builder = tmp;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.text.isNotBlank' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isBlank(serialName)) {
      // Inline function 'kotlinx.serialization.descriptors.buildSerialDescriptor.<anonymous>' call
      var message = 'Blank serial names are prohibited';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!equals(kind, CLASS_getInstance())) {
      // Inline function 'kotlinx.serialization.descriptors.buildSerialDescriptor.<anonymous>' call
      var message_0 = "For StructureKind.CLASS please use 'buildClassSerialDescriptor' instead";
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    var sdBuilder = new ClassSerialDescriptorBuilder(serialName);
    builder(sdBuilder);
    return new SerialDescriptorImpl(serialName, kind, sdBuilder.bj_1.m(), toList(typeParameters), sdBuilder);
  }
  function ClassSerialDescriptorBuilder(serialName) {
    this.yi_1 = serialName;
    this.zi_1 = false;
    this.aj_1 = emptyList();
    this.bj_1 = ArrayList_init_$Create$_0();
    this.cj_1 = HashSet_init_$Create$();
    this.dj_1 = ArrayList_init_$Create$_0();
    this.ej_1 = ArrayList_init_$Create$_0();
    this.fj_1 = ArrayList_init_$Create$_0();
  }
  protoOf(ClassSerialDescriptorBuilder).xk = function (elementName, descriptor, annotations, isOptional) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!this.cj_1.e(elementName)) {
      // Inline function 'kotlinx.serialization.descriptors.ClassSerialDescriptorBuilder.element.<anonymous>' call
      var message = "Element with name '" + elementName + "' is already registered in " + this.yi_1;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.collections.plusAssign' call
    this.bj_1.e(elementName);
    // Inline function 'kotlin.collections.plusAssign' call
    this.dj_1.e(descriptor);
    // Inline function 'kotlin.collections.plusAssign' call
    this.ej_1.e(annotations);
    // Inline function 'kotlin.collections.plusAssign' call
    this.fj_1.e(isOptional);
  };
  protoOf(ClassSerialDescriptorBuilder).gj = function (elementName, descriptor, annotations, isOptional, $super) {
    annotations = annotations === VOID ? emptyList() : annotations;
    isOptional = isOptional === VOID ? false : isOptional;
    var tmp;
    if ($super === VOID) {
      this.xk(elementName, descriptor, annotations, isOptional);
      tmp = Unit_instance;
    } else {
      tmp = $super.xk.call(this, elementName, descriptor, annotations, isOptional);
    }
    return tmp;
  };
  function _get__hashCode__tgwhef($this) {
    // Inline function 'kotlin.getValue' call
    var this_0 = $this.jl_1;
    _hashCode$factory();
    return this_0.u1();
  }
  function SerialDescriptorImpl$_hashCode$delegate$lambda(this$0) {
    return function () {
      return hashCodeImpl(this$0, this$0.il_1);
    };
  }
  function SerialDescriptorImpl$toString$lambda(this$0) {
    return function (it) {
      return this$0.jk(it) + ': ' + this$0.mk(it).tj();
    };
  }
  function SerialDescriptorImpl(serialName, kind, elementsCount, typeParameters, builder) {
    this.yk_1 = serialName;
    this.zk_1 = kind;
    this.al_1 = elementsCount;
    this.bl_1 = builder.aj_1;
    this.cl_1 = toHashSet(builder.bj_1);
    var tmp = this;
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_0 = builder.bj_1;
    tmp.dl_1 = copyToArray(this_0);
    this.el_1 = compactArray(builder.dj_1);
    var tmp_0 = this;
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_1 = builder.ej_1;
    tmp_0.fl_1 = copyToArray(this_1);
    this.gl_1 = toBooleanArray(builder.fj_1);
    var tmp_1 = this;
    // Inline function 'kotlin.collections.map' call
    var this_2 = withIndex(this.dl_1);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
    var tmp0_iterator = this_2.j();
    while (tmp0_iterator.k()) {
      var item = tmp0_iterator.l();
      // Inline function 'kotlinx.serialization.descriptors.SerialDescriptorImpl.name2Index.<anonymous>' call
      var tmp$ret$2 = to(item.ic_1, item.hc_1);
      destination.e(tmp$ret$2);
    }
    tmp_1.hl_1 = toMap(destination);
    this.il_1 = compactArray(typeParameters);
    var tmp_2 = this;
    tmp_2.jl_1 = lazy_0(SerialDescriptorImpl$_hashCode$delegate$lambda(this));
  }
  protoOf(SerialDescriptorImpl).tj = function () {
    return this.yk_1;
  };
  protoOf(SerialDescriptorImpl).fk = function () {
    return this.zk_1;
  };
  protoOf(SerialDescriptorImpl).hk = function () {
    return this.al_1;
  };
  protoOf(SerialDescriptorImpl).ik = function () {
    return this.bl_1;
  };
  protoOf(SerialDescriptorImpl).kl = function () {
    return this.cl_1;
  };
  protoOf(SerialDescriptorImpl).jk = function (index) {
    return getChecked(this.dl_1, index);
  };
  protoOf(SerialDescriptorImpl).kk = function (name) {
    var tmp0_elvis_lhs = this.hl_1.x1(name);
    return tmp0_elvis_lhs == null ? -3 : tmp0_elvis_lhs;
  };
  protoOf(SerialDescriptorImpl).lk = function (index) {
    return getChecked(this.fl_1, index);
  };
  protoOf(SerialDescriptorImpl).mk = function (index) {
    return getChecked(this.el_1, index);
  };
  protoOf(SerialDescriptorImpl).nk = function (index) {
    return getChecked_0(this.gl_1, index);
  };
  protoOf(SerialDescriptorImpl).equals = function (other) {
    var tmp$ret$0;
    $l$block_5: {
      // Inline function 'kotlinx.serialization.internal.equalsImpl' call
      if (this === other) {
        tmp$ret$0 = true;
        break $l$block_5;
      }
      if (!(other instanceof SerialDescriptorImpl)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.tj() === other.tj())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      // Inline function 'kotlinx.serialization.descriptors.SerialDescriptorImpl.equals.<anonymous>' call
      if (!contentEquals(this.il_1, other.il_1)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.hk() === other.hk())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      var inductionVariable = 0;
      var last = this.hk();
      if (inductionVariable < last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(this.mk(index).tj() === other.mk(index).tj())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
          if (!equals(this.mk(index).fk(), other.mk(index).fk())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
        }
         while (inductionVariable < last);
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(SerialDescriptorImpl).hashCode = function () {
    return _get__hashCode__tgwhef(this);
  };
  protoOf(SerialDescriptorImpl).toString = function () {
    var tmp = until(0, this.al_1);
    var tmp_0 = this.yk_1 + '(';
    return joinToString(tmp, ', ', tmp_0, ')', VOID, VOID, SerialDescriptorImpl$toString$lambda(this));
  };
  function buildClassSerialDescriptor(serialName, typeParameters, builderAction) {
    var tmp;
    if (builderAction === VOID) {
      tmp = buildClassSerialDescriptor$lambda;
    } else {
      tmp = builderAction;
    }
    builderAction = tmp;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.text.isNotBlank' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isBlank(serialName)) {
      // Inline function 'kotlinx.serialization.descriptors.buildClassSerialDescriptor.<anonymous>' call
      var message = 'Blank serial names are prohibited';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var sdBuilder = new ClassSerialDescriptorBuilder(serialName);
    builderAction(sdBuilder);
    return new SerialDescriptorImpl(serialName, CLASS_getInstance(), sdBuilder.bj_1.m(), toList(typeParameters), sdBuilder);
  }
  function PrimitiveSerialDescriptor(serialName, kind) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.text.isNotBlank' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isBlank(serialName)) {
      // Inline function 'kotlinx.serialization.descriptors.PrimitiveSerialDescriptor.<anonymous>' call
      var message = 'Blank serial names are prohibited';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return PrimitiveDescriptorSafe(serialName, kind);
  }
  function buildSerialDescriptor$lambda(_this__u8e3s4) {
    return Unit_instance;
  }
  function buildClassSerialDescriptor$lambda(_this__u8e3s4) {
    return Unit_instance;
  }
  function _hashCode$factory() {
    return getPropertyCallableRef('_hashCode', 1, KProperty1, function (receiver) {
      return _get__hashCode__tgwhef(receiver);
    }, null);
  }
  function ENUM() {
    ENUM_instance = this;
    SerialKind.call(this);
  }
  var ENUM_instance;
  function ENUM_getInstance() {
    if (ENUM_instance == null)
      new ENUM();
    return ENUM_instance;
  }
  function CONTEXTUAL() {
    CONTEXTUAL_instance = this;
    SerialKind.call(this);
  }
  var CONTEXTUAL_instance;
  function CONTEXTUAL_getInstance() {
    if (CONTEXTUAL_instance == null)
      new CONTEXTUAL();
    return CONTEXTUAL_instance;
  }
  function SerialKind() {
  }
  protoOf(SerialKind).toString = function () {
    return ensureNotNull(getKClassFromExpression(this).f9());
  };
  protoOf(SerialKind).hashCode = function () {
    return getStringHashCode(this.toString());
  };
  function SEALED() {
    SEALED_instance = this;
    PolymorphicKind.call(this);
  }
  var SEALED_instance;
  function SEALED_getInstance() {
    if (SEALED_instance == null)
      new SEALED();
    return SEALED_instance;
  }
  function OPEN() {
    OPEN_instance = this;
    PolymorphicKind.call(this);
  }
  var OPEN_instance;
  function OPEN_getInstance() {
    if (OPEN_instance == null)
      new OPEN();
    return OPEN_instance;
  }
  function PolymorphicKind() {
    SerialKind.call(this);
  }
  function BOOLEAN() {
    BOOLEAN_instance = this;
    PrimitiveKind.call(this);
  }
  var BOOLEAN_instance;
  function BOOLEAN_getInstance() {
    if (BOOLEAN_instance == null)
      new BOOLEAN();
    return BOOLEAN_instance;
  }
  function BYTE() {
    BYTE_instance = this;
    PrimitiveKind.call(this);
  }
  var BYTE_instance;
  function BYTE_getInstance() {
    if (BYTE_instance == null)
      new BYTE();
    return BYTE_instance;
  }
  function CHAR() {
    CHAR_instance = this;
    PrimitiveKind.call(this);
  }
  var CHAR_instance;
  function CHAR_getInstance() {
    if (CHAR_instance == null)
      new CHAR();
    return CHAR_instance;
  }
  function SHORT() {
    SHORT_instance = this;
    PrimitiveKind.call(this);
  }
  var SHORT_instance;
  function SHORT_getInstance() {
    if (SHORT_instance == null)
      new SHORT();
    return SHORT_instance;
  }
  function INT() {
    INT_instance = this;
    PrimitiveKind.call(this);
  }
  var INT_instance;
  function INT_getInstance() {
    if (INT_instance == null)
      new INT();
    return INT_instance;
  }
  function LONG() {
    LONG_instance = this;
    PrimitiveKind.call(this);
  }
  var LONG_instance;
  function LONG_getInstance() {
    if (LONG_instance == null)
      new LONG();
    return LONG_instance;
  }
  function FLOAT() {
    FLOAT_instance = this;
    PrimitiveKind.call(this);
  }
  var FLOAT_instance;
  function FLOAT_getInstance() {
    if (FLOAT_instance == null)
      new FLOAT();
    return FLOAT_instance;
  }
  function DOUBLE() {
    DOUBLE_instance = this;
    PrimitiveKind.call(this);
  }
  var DOUBLE_instance;
  function DOUBLE_getInstance() {
    if (DOUBLE_instance == null)
      new DOUBLE();
    return DOUBLE_instance;
  }
  function STRING() {
    STRING_instance = this;
    PrimitiveKind.call(this);
  }
  var STRING_instance;
  function STRING_getInstance() {
    if (STRING_instance == null)
      new STRING();
    return STRING_instance;
  }
  function PrimitiveKind() {
    SerialKind.call(this);
  }
  function CLASS() {
    CLASS_instance = this;
    StructureKind.call(this);
  }
  var CLASS_instance;
  function CLASS_getInstance() {
    if (CLASS_instance == null)
      new CLASS();
    return CLASS_instance;
  }
  function LIST() {
    LIST_instance = this;
    StructureKind.call(this);
  }
  var LIST_instance;
  function LIST_getInstance() {
    if (LIST_instance == null)
      new LIST();
    return LIST_instance;
  }
  function MAP() {
    MAP_instance = this;
    StructureKind.call(this);
  }
  var MAP_instance;
  function MAP_getInstance() {
    if (MAP_instance == null)
      new MAP();
    return MAP_instance;
  }
  function OBJECT() {
    OBJECT_instance = this;
    StructureKind.call(this);
  }
  var OBJECT_instance;
  function OBJECT_getInstance() {
    if (OBJECT_instance == null)
      new OBJECT();
    return OBJECT_instance;
  }
  function StructureKind() {
    SerialKind.call(this);
  }
  function AbstractDecoder() {
  }
  protoOf(AbstractDecoder).ll = function () {
    throw SerializationException_init_$Create$_0(toString(getKClassFromExpression(this)) + " can't retrieve untyped values");
  };
  protoOf(AbstractDecoder).ml = function () {
    return true;
  };
  protoOf(AbstractDecoder).nl = function () {
    return null;
  };
  protoOf(AbstractDecoder).ol = function () {
    var tmp = this.ll();
    return typeof tmp === 'boolean' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).pl = function () {
    var tmp = this.ll();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).ql = function () {
    var tmp = this.ll();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).rl = function () {
    var tmp = this.ll();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).sl = function () {
    var tmp = this.ll();
    return tmp instanceof Long ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).tl = function () {
    var tmp = this.ll();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).ul = function () {
    var tmp = this.ll();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).vl = function () {
    var tmp = this.ll();
    return tmp instanceof Char ? tmp.e1_1 : THROW_CCE();
  };
  protoOf(AbstractDecoder).wl = function () {
    var tmp = this.ll();
    return typeof tmp === 'string' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).xl = function (enumDescriptor) {
    var tmp = this.ll();
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(AbstractDecoder).yl = function (descriptor) {
    return this;
  };
  protoOf(AbstractDecoder).zl = function (deserializer, previousValue) {
    return this.am(deserializer);
  };
  protoOf(AbstractDecoder).bm = function (descriptor) {
    return this;
  };
  protoOf(AbstractDecoder).cm = function (descriptor) {
  };
  protoOf(AbstractDecoder).dm = function (descriptor, index) {
    return this.ol();
  };
  protoOf(AbstractDecoder).em = function (descriptor, index) {
    return this.pl();
  };
  protoOf(AbstractDecoder).fm = function (descriptor, index) {
    return this.ql();
  };
  protoOf(AbstractDecoder).gm = function (descriptor, index) {
    return this.rl();
  };
  protoOf(AbstractDecoder).hm = function (descriptor, index) {
    return this.sl();
  };
  protoOf(AbstractDecoder).im = function (descriptor, index) {
    return this.tl();
  };
  protoOf(AbstractDecoder).jm = function (descriptor, index) {
    return this.ul();
  };
  protoOf(AbstractDecoder).km = function (descriptor, index) {
    return this.vl();
  };
  protoOf(AbstractDecoder).lm = function (descriptor, index) {
    return this.wl();
  };
  protoOf(AbstractDecoder).mm = function (descriptor, index) {
    return this.yl(descriptor.mk(index));
  };
  protoOf(AbstractDecoder).nm = function (descriptor, index, deserializer, previousValue) {
    return this.zl(deserializer, previousValue);
  };
  protoOf(AbstractDecoder).pm = function (descriptor, index, deserializer, previousValue) {
    // Inline function 'kotlinx.serialization.encoding.decodeIfNullable' call
    var isNullabilitySupported = deserializer.si().bk();
    var tmp;
    if (isNullabilitySupported || this.ml()) {
      // Inline function 'kotlinx.serialization.encoding.AbstractDecoder.decodeNullableSerializableElement.<anonymous>' call
      tmp = this.zl(deserializer, previousValue);
    } else {
      tmp = this.nl();
    }
    return tmp;
  };
  function AbstractEncoder() {
  }
  protoOf(AbstractEncoder).bm = function (descriptor) {
    return this;
  };
  protoOf(AbstractEncoder).cm = function (descriptor) {
  };
  protoOf(AbstractEncoder).um = function (descriptor, index) {
    return true;
  };
  protoOf(AbstractEncoder).vm = function (value) {
    throw SerializationException_init_$Create$_0('Non-serializable ' + toString(getKClassFromExpression(value)) + ' is not supported by ' + toString(getKClassFromExpression(this)) + ' encoder');
  };
  protoOf(AbstractEncoder).wm = function () {
    throw SerializationException_init_$Create$_0("'null' is not supported by default");
  };
  protoOf(AbstractEncoder).xm = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).ym = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).zm = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).an = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).bn = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).cn = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).dn = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).en = function (value) {
    return this.vm(new Char(value));
  };
  protoOf(AbstractEncoder).fn = function (value) {
    return this.vm(value);
  };
  protoOf(AbstractEncoder).gn = function (enumDescriptor, index) {
    return this.vm(index);
  };
  protoOf(AbstractEncoder).hn = function (descriptor) {
    return this;
  };
  protoOf(AbstractEncoder).in = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.xm(value);
    }
  };
  protoOf(AbstractEncoder).jn = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.ym(value);
    }
  };
  protoOf(AbstractEncoder).kn = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.zm(value);
    }
  };
  protoOf(AbstractEncoder).ln = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.an(value);
    }
  };
  protoOf(AbstractEncoder).mn = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.bn(value);
    }
  };
  protoOf(AbstractEncoder).nn = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.cn(value);
    }
  };
  protoOf(AbstractEncoder).on = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.dn(value);
    }
  };
  protoOf(AbstractEncoder).pn = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.en(value);
    }
  };
  protoOf(AbstractEncoder).qn = function (descriptor, index, value) {
    if (this.um(descriptor, index)) {
      this.fn(value);
    }
  };
  protoOf(AbstractEncoder).rn = function (descriptor, index) {
    return this.um(descriptor, index) ? this.hn(descriptor.mk(index)) : NoOpEncoder_getInstance();
  };
  protoOf(AbstractEncoder).sn = function (descriptor, index, serializer, value) {
    if (this.um(descriptor, index)) {
      this.tn(serializer, value);
    }
  };
  protoOf(AbstractEncoder).un = function (descriptor, index, serializer, value) {
    if (this.um(descriptor, index)) {
      this.vn(serializer, value);
    }
  };
  function Decoder() {
  }
  function CompositeDecoder() {
  }
  function Encoder() {
  }
  function CompositeEncoder() {
  }
  function decodeSequentially_0($this, compositeDecoder) {
    var klassName = compositeDecoder.lm($this.si(), 0);
    var serializer = findPolymorphicSerializer_0($this, compositeDecoder, klassName);
    return compositeDecoder.om($this.si(), 1, serializer);
  }
  function AbstractPolymorphicSerializer() {
  }
  protoOf(AbstractPolymorphicSerializer).ij = function (encoder, value) {
    var actualSerializer = findPolymorphicSerializer(this, encoder, value);
    // Inline function 'kotlinx.serialization.encoding.encodeStructure' call
    var descriptor = this.si();
    var composite = encoder.bm(descriptor);
    // Inline function 'kotlinx.serialization.internal.AbstractPolymorphicSerializer.serialize.<anonymous>' call
    composite.qn(this.si(), 0, actualSerializer.si().tj());
    var tmp = this.si();
    // Inline function 'kotlinx.serialization.internal.cast' call
    var tmp$ret$0 = isInterface(actualSerializer, SerializationStrategy) ? actualSerializer : THROW_CCE();
    composite.sn(tmp, 1, tmp$ret$0, value);
    composite.cm(descriptor);
  };
  protoOf(AbstractPolymorphicSerializer).ti = function (encoder, value) {
    return this.ij(encoder, !(value == null) ? value : THROW_CCE());
  };
  protoOf(AbstractPolymorphicSerializer).ui = function (decoder) {
    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call
    var descriptor = this.si();
    var composite = decoder.bm(descriptor);
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlinx.serialization.internal.AbstractPolymorphicSerializer.deserialize.<anonymous>' call
      var klassName = null;
      var value = null;
      if (composite.rm()) {
        tmp$ret$0 = decodeSequentially_0(this, composite);
        break $l$block;
      }
      mainLoop: while (true) {
        var index = composite.sm(this.si());
        switch (index) {
          case -1:
            break mainLoop;
          case 0:
            klassName = composite.lm(this.si(), index);
            break;
          case 1:
            var tmp$ret$2;
            $l$block_0: {
              // Inline function 'kotlin.requireNotNull' call
              var value_0 = klassName;
              // Inline function 'kotlin.contracts.contract' call
              if (value_0 == null) {
                // Inline function 'kotlinx.serialization.internal.AbstractPolymorphicSerializer.deserialize.<anonymous>.<anonymous>' call
                var message = 'Cannot read polymorphic value before its type token';
                throw IllegalArgumentException_init_$Create$(toString(message));
              } else {
                tmp$ret$2 = value_0;
                break $l$block_0;
              }
            }

            klassName = tmp$ret$2;
            var serializer = findPolymorphicSerializer_0(this, composite, klassName);
            value = composite.om(this.si(), index, serializer);
            break;
          default:
            var tmp0_elvis_lhs = klassName;
            throw SerializationException_init_$Create$_0('Invalid index in polymorphic deserialization of ' + (tmp0_elvis_lhs == null ? 'unknown class' : tmp0_elvis_lhs) + ('\n Expected 0, 1 or DECODE_DONE(-1), but found ' + index));
        }
      }
      var tmp$ret$4;
      $l$block_1: {
        // Inline function 'kotlin.requireNotNull' call
        var value_1 = value;
        // Inline function 'kotlin.contracts.contract' call
        if (value_1 == null) {
          // Inline function 'kotlinx.serialization.internal.AbstractPolymorphicSerializer.deserialize.<anonymous>.<anonymous>' call
          var message_0 = 'Polymorphic value has not been read for class ' + klassName;
          throw IllegalArgumentException_init_$Create$(toString(message_0));
        } else {
          tmp$ret$4 = value_1;
          break $l$block_1;
        }
      }
      var tmp = tmp$ret$4;
      tmp$ret$0 = !(tmp == null) ? tmp : THROW_CCE();
    }
    var result = tmp$ret$0;
    composite.cm(descriptor);
    return result;
  };
  protoOf(AbstractPolymorphicSerializer).jj = function (decoder, klassName) {
    return decoder.qm().zn(this.hj(), klassName);
  };
  protoOf(AbstractPolymorphicSerializer).kj = function (encoder, value) {
    return encoder.qm().ao(this.hj(), value);
  };
  function throwSubtypeNotRegistered(subClass, baseClass) {
    var tmp0_elvis_lhs = subClass.f9();
    throwSubtypeNotRegistered_0(tmp0_elvis_lhs == null ? toString(subClass) : tmp0_elvis_lhs, baseClass);
  }
  function throwSubtypeNotRegistered_0(subClassName, baseClass) {
    var scope = "in the polymorphic scope of '" + baseClass.f9() + "'";
    throw SerializationException_init_$Create$_0(subClassName == null ? 'Class discriminator was missing and no default serializers were registered ' + scope + '.' : "Serializer for subclass '" + subClassName + "' is not found " + scope + '.\n' + ("Check if class with serial name '" + subClassName + "' exists and serializer is registered in a corresponding SerializersModule.\n") + ("To be registered automatically, class '" + subClassName + "' has to be '@Serializable', and the base class '" + baseClass.f9() + "' has to be sealed and '@Serializable'."));
  }
  function NothingSerializer_0() {
    NothingSerializer_instance = this;
    this.bo_1 = NothingSerialDescriptor_getInstance();
  }
  protoOf(NothingSerializer_0).si = function () {
    return this.bo_1;
  };
  protoOf(NothingSerializer_0).co = function (encoder, value) {
    throw SerializationException_init_$Create$_0("'kotlin.Nothing' cannot be serialized");
  };
  protoOf(NothingSerializer_0).ti = function (encoder, value) {
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.co(encoder, tmp);
  };
  protoOf(NothingSerializer_0).ui = function (decoder) {
    throw SerializationException_init_$Create$_0("'kotlin.Nothing' does not have instances");
  };
  var NothingSerializer_instance;
  function NothingSerializer_getInstance() {
    if (NothingSerializer_instance == null)
      new NothingSerializer_0();
    return NothingSerializer_instance;
  }
  function DurationSerializer() {
    DurationSerializer_instance = this;
    this.do_1 = new PrimitiveSerialDescriptor_0('kotlin.time.Duration', STRING_getInstance());
  }
  protoOf(DurationSerializer).si = function () {
    return this.do_1;
  };
  protoOf(DurationSerializer).eo = function (encoder, value) {
    encoder.fn(Duration__toIsoString_impl_9h6wsm(value));
  };
  protoOf(DurationSerializer).ti = function (encoder, value) {
    return this.eo(encoder, value instanceof Duration ? value.zf_1 : THROW_CCE());
  };
  protoOf(DurationSerializer).fo = function (decoder) {
    return Companion_getInstance().yf(decoder.wl());
  };
  protoOf(DurationSerializer).ui = function (decoder) {
    return new Duration(this.fo(decoder));
  };
  var DurationSerializer_instance;
  function DurationSerializer_getInstance() {
    if (DurationSerializer_instance == null)
      new DurationSerializer();
    return DurationSerializer_instance;
  }
  function UuidSerializer() {
    UuidSerializer_instance = this;
    this.go_1 = new PrimitiveSerialDescriptor_0('kotlin.uuid.Uuid', STRING_getInstance());
  }
  protoOf(UuidSerializer).si = function () {
    return this.go_1;
  };
  protoOf(UuidSerializer).ho = function (encoder, value) {
    encoder.fn(value.toString());
  };
  protoOf(UuidSerializer).ti = function (encoder, value) {
    return this.ho(encoder, value instanceof Uuid ? value : THROW_CCE());
  };
  protoOf(UuidSerializer).ui = function (decoder) {
    return Companion_getInstance_0().zg(decoder.wl());
  };
  var UuidSerializer_instance;
  function UuidSerializer_getInstance() {
    if (UuidSerializer_instance == null)
      new UuidSerializer();
    return UuidSerializer_instance;
  }
  function CachedNames() {
  }
  function ArrayListClassDesc(elementDesc) {
    ListLikeDescriptor.call(this, elementDesc);
  }
  protoOf(ArrayListClassDesc).tj = function () {
    return 'kotlin.collections.ArrayList';
  };
  function HashSetClassDesc(elementDesc) {
    ListLikeDescriptor.call(this, elementDesc);
  }
  protoOf(HashSetClassDesc).tj = function () {
    return 'kotlin.collections.HashSet';
  };
  function LinkedHashSetClassDesc(elementDesc) {
    ListLikeDescriptor.call(this, elementDesc);
  }
  protoOf(LinkedHashSetClassDesc).tj = function () {
    return 'kotlin.collections.LinkedHashSet';
  };
  function HashMapClassDesc(keyDesc, valueDesc) {
    MapLikeDescriptor.call(this, 'kotlin.collections.HashMap', keyDesc, valueDesc);
  }
  function LinkedHashMapClassDesc(keyDesc, valueDesc) {
    MapLikeDescriptor.call(this, 'kotlin.collections.LinkedHashMap', keyDesc, valueDesc);
  }
  function ArrayClassDesc(elementDesc) {
    ListLikeDescriptor.call(this, elementDesc);
  }
  protoOf(ArrayClassDesc).tj = function () {
    return 'kotlin.Array';
  };
  function ListLikeDescriptor(elementDescriptor) {
    this.ko_1 = elementDescriptor;
    this.lo_1 = 1;
  }
  protoOf(ListLikeDescriptor).fk = function () {
    return LIST_getInstance();
  };
  protoOf(ListLikeDescriptor).hk = function () {
    return this.lo_1;
  };
  protoOf(ListLikeDescriptor).jk = function (index) {
    return index.toString();
  };
  protoOf(ListLikeDescriptor).kk = function (name) {
    var tmp0_elvis_lhs = toIntOrNull(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalArgumentException_init_$Create$(name + ' is not a valid list index');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(ListLikeDescriptor).nk = function (index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.ListLikeDescriptor.isElementOptional.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.tj() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return false;
  };
  protoOf(ListLikeDescriptor).lk = function (index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.ListLikeDescriptor.getElementAnnotations.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.tj() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return emptyList();
  };
  protoOf(ListLikeDescriptor).mk = function (index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.ListLikeDescriptor.getElementDescriptor.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.tj() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return this.ko_1;
  };
  protoOf(ListLikeDescriptor).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ListLikeDescriptor))
      return false;
    if (equals(this.ko_1, other.ko_1) && this.tj() === other.tj())
      return true;
    return false;
  };
  protoOf(ListLikeDescriptor).hashCode = function () {
    return imul(hashCode(this.ko_1), 31) + getStringHashCode(this.tj()) | 0;
  };
  protoOf(ListLikeDescriptor).toString = function () {
    return this.tj() + '(' + toString(this.ko_1) + ')';
  };
  function MapLikeDescriptor(serialName, keyDescriptor, valueDescriptor) {
    this.qo_1 = serialName;
    this.ro_1 = keyDescriptor;
    this.so_1 = valueDescriptor;
    this.to_1 = 2;
  }
  protoOf(MapLikeDescriptor).tj = function () {
    return this.qo_1;
  };
  protoOf(MapLikeDescriptor).fk = function () {
    return MAP_getInstance();
  };
  protoOf(MapLikeDescriptor).hk = function () {
    return this.to_1;
  };
  protoOf(MapLikeDescriptor).jk = function (index) {
    return index.toString();
  };
  protoOf(MapLikeDescriptor).kk = function (name) {
    var tmp0_elvis_lhs = toIntOrNull(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalArgumentException_init_$Create$(name + ' is not a valid map index');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(MapLikeDescriptor).nk = function (index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.MapLikeDescriptor.isElementOptional.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.tj() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return false;
  };
  protoOf(MapLikeDescriptor).lk = function (index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.MapLikeDescriptor.getElementAnnotations.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.tj() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return emptyList();
  };
  protoOf(MapLikeDescriptor).mk = function (index) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.MapLikeDescriptor.getElementDescriptor.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.tj() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var tmp;
    switch (index % 2 | 0) {
      case 0:
        tmp = this.ro_1;
        break;
      case 1:
        tmp = this.so_1;
        break;
      default:
        var message_0 = 'Unreached';
        throw IllegalStateException_init_$Create$(toString(message_0));
    }
    return tmp;
  };
  protoOf(MapLikeDescriptor).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MapLikeDescriptor))
      return false;
    if (!(this.tj() === other.tj()))
      return false;
    if (!equals(this.ro_1, other.ro_1))
      return false;
    if (!equals(this.so_1, other.so_1))
      return false;
    return true;
  };
  protoOf(MapLikeDescriptor).hashCode = function () {
    var result = getStringHashCode(this.tj());
    result = imul(31, result) + hashCode(this.ro_1) | 0;
    result = imul(31, result) + hashCode(this.so_1) | 0;
    return result;
  };
  protoOf(MapLikeDescriptor).toString = function () {
    return this.tj() + '(' + toString(this.ro_1) + ', ' + toString(this.so_1) + ')';
  };
  function PrimitiveArrayDescriptor(primitive) {
    ListLikeDescriptor.call(this, primitive);
    this.yo_1 = primitive.tj() + 'Array';
  }
  protoOf(PrimitiveArrayDescriptor).tj = function () {
    return this.yo_1;
  };
  function ArrayListSerializer(element) {
    CollectionSerializer.call(this, element);
    this.ap_1 = new ArrayListClassDesc(element.si());
  }
  protoOf(ArrayListSerializer).si = function () {
    return this.ap_1;
  };
  protoOf(ArrayListSerializer).bp = function () {
    // Inline function 'kotlin.collections.arrayListOf' call
    return ArrayList_init_$Create$_0();
  };
  protoOf(ArrayListSerializer).cp = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(ArrayListSerializer).dp = function (_this__u8e3s4) {
    return this.cp(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ArrayListSerializer).ep = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(ArrayListSerializer).fp = function (_this__u8e3s4) {
    return this.ep(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ArrayListSerializer).gp = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? ArrayList_init_$Create$_1(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(ArrayListSerializer).hp = function (_this__u8e3s4) {
    return this.gp((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtList) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ArrayListSerializer).ip = function (_this__u8e3s4, size) {
    return _this__u8e3s4.n4(size);
  };
  protoOf(ArrayListSerializer).jp = function (_this__u8e3s4, size) {
    return this.ip(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE(), size);
  };
  protoOf(ArrayListSerializer).kp = function (_this__u8e3s4, index, element) {
    _this__u8e3s4.v3(index, element);
  };
  protoOf(ArrayListSerializer).lp = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE();
    return this.kp(tmp, index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function HashSetSerializer(eSerializer) {
    CollectionSerializer.call(this, eSerializer);
    this.wp_1 = new HashSetClassDesc(eSerializer.si());
  }
  protoOf(HashSetSerializer).si = function () {
    return this.wp_1;
  };
  protoOf(HashSetSerializer).bp = function () {
    return HashSet_init_$Create$();
  };
  protoOf(HashSetSerializer).xp = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(HashSetSerializer).dp = function (_this__u8e3s4) {
    return this.xp(_this__u8e3s4 instanceof HashSet ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashSetSerializer).yp = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(HashSetSerializer).fp = function (_this__u8e3s4) {
    return this.yp(_this__u8e3s4 instanceof HashSet ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashSetSerializer).zp = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof HashSet ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? HashSet_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(HashSetSerializer).hp = function (_this__u8e3s4) {
    return this.zp((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtSet) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashSetSerializer).aq = function (_this__u8e3s4, size) {
  };
  protoOf(HashSetSerializer).jp = function (_this__u8e3s4, size) {
    return this.aq(_this__u8e3s4 instanceof HashSet ? _this__u8e3s4 : THROW_CCE(), size);
  };
  protoOf(HashSetSerializer).bq = function (_this__u8e3s4, index, element) {
    _this__u8e3s4.e(element);
  };
  protoOf(HashSetSerializer).lp = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof HashSet ? _this__u8e3s4 : THROW_CCE();
    return this.bq(tmp, index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function LinkedHashSetSerializer(eSerializer) {
    CollectionSerializer.call(this, eSerializer);
    this.dq_1 = new LinkedHashSetClassDesc(eSerializer.si());
  }
  protoOf(LinkedHashSetSerializer).si = function () {
    return this.dq_1;
  };
  protoOf(LinkedHashSetSerializer).bp = function () {
    // Inline function 'kotlin.collections.linkedSetOf' call
    return LinkedHashSet_init_$Create$();
  };
  protoOf(LinkedHashSetSerializer).eq = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(LinkedHashSetSerializer).dp = function (_this__u8e3s4) {
    return this.eq(_this__u8e3s4 instanceof LinkedHashSet ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashSetSerializer).fq = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(LinkedHashSetSerializer).fp = function (_this__u8e3s4) {
    return this.fq(_this__u8e3s4 instanceof LinkedHashSet ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashSetSerializer).zp = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof LinkedHashSet ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? LinkedHashSet_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(LinkedHashSetSerializer).hp = function (_this__u8e3s4) {
    return this.zp((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtSet) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashSetSerializer).gq = function (_this__u8e3s4, size) {
  };
  protoOf(LinkedHashSetSerializer).jp = function (_this__u8e3s4, size) {
    return this.gq(_this__u8e3s4 instanceof LinkedHashSet ? _this__u8e3s4 : THROW_CCE(), size);
  };
  protoOf(LinkedHashSetSerializer).hq = function (_this__u8e3s4, index, element) {
    _this__u8e3s4.e(element);
  };
  protoOf(LinkedHashSetSerializer).lp = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof LinkedHashSet ? _this__u8e3s4 : THROW_CCE();
    return this.hq(tmp, index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function HashMapSerializer(kSerializer, vSerializer) {
    MapLikeSerializer.call(this, kSerializer, vSerializer);
    this.kq_1 = new HashMapClassDesc(kSerializer.si(), vSerializer.si());
  }
  protoOf(HashMapSerializer).si = function () {
    return this.kq_1;
  };
  protoOf(HashMapSerializer).lq = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(HashMapSerializer).mq = function (_this__u8e3s4) {
    return this.lq((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashMapSerializer).nq = function (_this__u8e3s4) {
    // Inline function 'kotlin.collections.iterator' call
    return _this__u8e3s4.r().j();
  };
  protoOf(HashMapSerializer).oq = function (_this__u8e3s4) {
    return this.nq((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashMapSerializer).bp = function () {
    return HashMap_init_$Create$();
  };
  protoOf(HashMapSerializer).pq = function (_this__u8e3s4) {
    return imul(_this__u8e3s4.m(), 2);
  };
  protoOf(HashMapSerializer).dp = function (_this__u8e3s4) {
    return this.pq(_this__u8e3s4 instanceof HashMap ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashMapSerializer).qq = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(HashMapSerializer).fp = function (_this__u8e3s4) {
    return this.qq(_this__u8e3s4 instanceof HashMap ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashMapSerializer).rq = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof HashMap ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? HashMap_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(HashMapSerializer).hp = function (_this__u8e3s4) {
    return this.rq((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(HashMapSerializer).sq = function (_this__u8e3s4, size) {
  };
  protoOf(HashMapSerializer).jp = function (_this__u8e3s4, size) {
    return this.sq(_this__u8e3s4 instanceof HashMap ? _this__u8e3s4 : THROW_CCE(), size);
  };
  function LinkedHashMapSerializer(kSerializer, vSerializer) {
    MapLikeSerializer.call(this, kSerializer, vSerializer);
    this.zq_1 = new LinkedHashMapClassDesc(kSerializer.si(), vSerializer.si());
  }
  protoOf(LinkedHashMapSerializer).si = function () {
    return this.zq_1;
  };
  protoOf(LinkedHashMapSerializer).lq = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(LinkedHashMapSerializer).mq = function (_this__u8e3s4) {
    return this.lq((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).nq = function (_this__u8e3s4) {
    // Inline function 'kotlin.collections.iterator' call
    return _this__u8e3s4.r().j();
  };
  protoOf(LinkedHashMapSerializer).oq = function (_this__u8e3s4) {
    return this.nq((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).bp = function () {
    return LinkedHashMap_init_$Create$();
  };
  protoOf(LinkedHashMapSerializer).ar = function (_this__u8e3s4) {
    return imul(_this__u8e3s4.m(), 2);
  };
  protoOf(LinkedHashMapSerializer).dp = function (_this__u8e3s4) {
    return this.ar(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).br = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(LinkedHashMapSerializer).fp = function (_this__u8e3s4) {
    return this.br(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).rq = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? LinkedHashMap_init_$Create$_1(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(LinkedHashMapSerializer).hp = function (_this__u8e3s4) {
    return this.rq((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).cr = function (_this__u8e3s4, size) {
  };
  protoOf(LinkedHashMapSerializer).jp = function (_this__u8e3s4, size) {
    return this.cr(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE(), size);
  };
  function ReferenceArraySerializer(kClass, eSerializer) {
    CollectionLikeSerializer.call(this, eSerializer);
    this.er_1 = kClass;
    this.fr_1 = new ArrayClassDesc(eSerializer.si());
  }
  protoOf(ReferenceArraySerializer).si = function () {
    return this.fr_1;
  };
  protoOf(ReferenceArraySerializer).gr = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(ReferenceArraySerializer).mq = function (_this__u8e3s4) {
    return this.gr((!(_this__u8e3s4 == null) ? isArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ReferenceArraySerializer).hr = function (_this__u8e3s4) {
    return arrayIterator(_this__u8e3s4);
  };
  protoOf(ReferenceArraySerializer).oq = function (_this__u8e3s4) {
    return this.hr((!(_this__u8e3s4 == null) ? isArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ReferenceArraySerializer).bp = function () {
    // Inline function 'kotlin.collections.arrayListOf' call
    return ArrayList_init_$Create$_0();
  };
  protoOf(ReferenceArraySerializer).ir = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(ReferenceArraySerializer).dp = function (_this__u8e3s4) {
    return this.ir(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ReferenceArraySerializer).jr = function (_this__u8e3s4) {
    return toNativeArrayImpl(_this__u8e3s4, this.er_1);
  };
  protoOf(ReferenceArraySerializer).fp = function (_this__u8e3s4) {
    return this.jr(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ReferenceArraySerializer).kr = function (_this__u8e3s4) {
    return ArrayList_init_$Create$_1(asList(_this__u8e3s4));
  };
  protoOf(ReferenceArraySerializer).hp = function (_this__u8e3s4) {
    return this.kr((!(_this__u8e3s4 == null) ? isArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ReferenceArraySerializer).lr = function (_this__u8e3s4, size) {
    return _this__u8e3s4.n4(size);
  };
  protoOf(ReferenceArraySerializer).jp = function (_this__u8e3s4, size) {
    return this.lr(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE(), size);
  };
  protoOf(ReferenceArraySerializer).mr = function (_this__u8e3s4, index, element) {
    _this__u8e3s4.v3(index, element);
  };
  protoOf(ReferenceArraySerializer).lp = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE();
    return this.mr(tmp, index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function CollectionSerializer(element) {
    CollectionLikeSerializer.call(this, element);
  }
  protoOf(CollectionSerializer).np = function (_this__u8e3s4) {
    return _this__u8e3s4.m();
  };
  protoOf(CollectionSerializer).mq = function (_this__u8e3s4) {
    return this.np((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Collection) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(CollectionSerializer).op = function (_this__u8e3s4) {
    return _this__u8e3s4.j();
  };
  protoOf(CollectionSerializer).oq = function (_this__u8e3s4) {
    return this.op((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Collection) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  function MapLikeSerializer(keySerializer, valueSerializer) {
    AbstractCollectionSerializer.call(this);
    this.tq_1 = keySerializer;
    this.uq_1 = valueSerializer;
  }
  protoOf(MapLikeSerializer).vq = function (decoder, builder, startIndex, size) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(size >= 0)) {
      // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.readAll.<anonymous>' call
      var message = 'Size must be known in advance when using READ_ALL';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var progression = step(until(0, imul(size, 2)), 2);
    var inductionVariable = progression.t_1;
    var last = progression.u_1;
    var step_0 = progression.v_1;
    if (step_0 > 0 && inductionVariable <= last || (step_0 < 0 && last <= inductionVariable))
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        this.wq(decoder, startIndex + index | 0, builder, false);
      }
       while (!(index === last));
  };
  protoOf(MapLikeSerializer).rp = function (decoder, builder, startIndex, size) {
    return this.vq(decoder, (!(builder == null) ? isInterface(builder, KtMutableMap) : false) ? builder : THROW_CCE(), startIndex, size);
  };
  protoOf(MapLikeSerializer).wq = function (decoder, index, builder, checkIndex) {
    var key = decoder.om(this.si(), index, this.tq_1);
    var tmp;
    if (checkIndex) {
      // Inline function 'kotlin.also' call
      var this_0 = decoder.sm(this.si());
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.readElement.<anonymous>' call
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!(this_0 === (index + 1 | 0))) {
        // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.readElement.<anonymous>.<anonymous>' call
        var message = 'Value must follow key in a map, index for key: ' + index + ', returned index for value: ' + this_0;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      tmp = this_0;
    } else {
      tmp = index + 1 | 0;
    }
    var vIndex = tmp;
    var tmp_0;
    var tmp_1;
    if (builder.v1(key)) {
      var tmp_2 = this.uq_1.si().fk();
      tmp_1 = !(tmp_2 instanceof PrimitiveKind);
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = decoder.nm(this.si(), vIndex, this.uq_1, getValue(builder, key));
    } else {
      tmp_0 = decoder.om(this.si(), vIndex, this.uq_1);
    }
    var value = tmp_0;
    // Inline function 'kotlin.collections.set' call
    builder.b2(key, value);
  };
  protoOf(MapLikeSerializer).sp = function (decoder, index, builder, checkIndex) {
    return this.wq(decoder, index, (!(builder == null) ? isInterface(builder, KtMutableMap) : false) ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(MapLikeSerializer).qp = function (encoder, value) {
    var size = this.mq(value);
    // Inline function 'kotlinx.serialization.encoding.encodeCollection' call
    var descriptor = this.si();
    var composite = encoder.xn(descriptor, size);
    // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.serialize.<anonymous>' call
    var iterator = this.oq(value);
    var index = 0;
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = iterator;
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.serialize.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var k = element.t1();
      // Inline function 'kotlin.collections.component2' call
      var v = element.u1();
      var tmp = this.si();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      composite.sn(tmp, _unary__edvuaz, this.tq_1, k);
      var tmp_0 = this.si();
      var _unary__edvuaz_0 = index;
      index = _unary__edvuaz_0 + 1 | 0;
      composite.sn(tmp_0, _unary__edvuaz_0, this.uq_1, v);
    }
    composite.cm(descriptor);
  };
  protoOf(MapLikeSerializer).ti = function (encoder, value) {
    return this.qp(encoder, (value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  function CollectionLikeSerializer(elementSerializer) {
    AbstractCollectionSerializer.call(this);
    this.pp_1 = elementSerializer;
  }
  protoOf(CollectionLikeSerializer).qp = function (encoder, value) {
    var size = this.mq(value);
    // Inline function 'kotlinx.serialization.encoding.encodeCollection' call
    var descriptor = this.si();
    var composite = encoder.xn(descriptor, size);
    // Inline function 'kotlinx.serialization.internal.CollectionLikeSerializer.serialize.<anonymous>' call
    var iterator = this.oq(value);
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        composite.sn(this.si(), index, this.pp_1, iterator.l());
      }
       while (inductionVariable < size);
    composite.cm(descriptor);
  };
  protoOf(CollectionLikeSerializer).ti = function (encoder, value) {
    return this.qp(encoder, (value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  protoOf(CollectionLikeSerializer).rp = function (decoder, builder, startIndex, size) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(size >= 0)) {
      // Inline function 'kotlinx.serialization.internal.CollectionLikeSerializer.readAll.<anonymous>' call
      var message = 'Size must be known in advance when using READ_ALL';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        this.sp(decoder, startIndex + index | 0, builder, false);
      }
       while (inductionVariable < size);
  };
  protoOf(CollectionLikeSerializer).sp = function (decoder, index, builder, checkIndex) {
    this.lp(builder, index, decoder.om(this.si(), index, this.pp_1));
  };
  function readSize($this, decoder, builder) {
    var size = decoder.tm($this.si());
    $this.jp(builder, size);
    return size;
  }
  function AbstractCollectionSerializer() {
  }
  protoOf(AbstractCollectionSerializer).up = function (decoder, previous) {
    var tmp1_elvis_lhs = previous == null ? null : this.hp(previous);
    var builder = tmp1_elvis_lhs == null ? this.bp() : tmp1_elvis_lhs;
    var startIndex = this.dp(builder);
    var compositeDecoder = decoder.bm(this.si());
    if (compositeDecoder.rm()) {
      this.rp(compositeDecoder, builder, startIndex, readSize(this, compositeDecoder, builder));
    } else {
      $l$loop: while (true) {
        var index = compositeDecoder.sm(this.si());
        if (index === -1)
          break $l$loop;
        this.tp(compositeDecoder, startIndex + index | 0, builder);
      }
    }
    compositeDecoder.cm(this.si());
    return this.fp(builder);
  };
  protoOf(AbstractCollectionSerializer).ui = function (decoder) {
    return this.up(decoder, null);
  };
  protoOf(AbstractCollectionSerializer).tp = function (decoder, index, builder, checkIndex, $super) {
    checkIndex = checkIndex === VOID ? true : checkIndex;
    var tmp;
    if ($super === VOID) {
      this.sp(decoder, index, builder, checkIndex);
      tmp = Unit_instance;
    } else {
      tmp = $super.sp.call(this, decoder, index, builder, checkIndex);
    }
    return tmp;
  };
  function PrimitiveArraySerializer(primitiveSerializer) {
    CollectionLikeSerializer.call(this, primitiveSerializer);
    this.or_1 = new PrimitiveArrayDescriptor(primitiveSerializer.si());
  }
  protoOf(PrimitiveArraySerializer).si = function () {
    return this.or_1;
  };
  protoOf(PrimitiveArraySerializer).pr = function (_this__u8e3s4) {
    return _this__u8e3s4.qr();
  };
  protoOf(PrimitiveArraySerializer).dp = function (_this__u8e3s4) {
    return this.pr(_this__u8e3s4 instanceof PrimitiveArrayBuilder ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(PrimitiveArraySerializer).rr = function (_this__u8e3s4) {
    return _this__u8e3s4.sr();
  };
  protoOf(PrimitiveArraySerializer).fp = function (_this__u8e3s4) {
    return this.rr(_this__u8e3s4 instanceof PrimitiveArrayBuilder ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(PrimitiveArraySerializer).tr = function (_this__u8e3s4, size) {
    return _this__u8e3s4.ur(size);
  };
  protoOf(PrimitiveArraySerializer).jp = function (_this__u8e3s4, size) {
    return this.tr(_this__u8e3s4 instanceof PrimitiveArrayBuilder ? _this__u8e3s4 : THROW_CCE(), size);
  };
  protoOf(PrimitiveArraySerializer).vr = function (_this__u8e3s4) {
    var message = 'This method lead to boxing and must not be used, use writeContents instead';
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(PrimitiveArraySerializer).oq = function (_this__u8e3s4) {
    return this.vr((_this__u8e3s4 == null ? true : !(_this__u8e3s4 == null)) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(PrimitiveArraySerializer).wr = function (_this__u8e3s4, index, element) {
    var message = 'This method lead to boxing and must not be used, use Builder.append instead';
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(PrimitiveArraySerializer).lp = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof PrimitiveArrayBuilder ? _this__u8e3s4 : THROW_CCE();
    return this.wr(tmp, index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(PrimitiveArraySerializer).bp = function () {
    return this.hp(this.xr());
  };
  protoOf(PrimitiveArraySerializer).as = function (encoder, value) {
    var size = this.mq(value);
    // Inline function 'kotlinx.serialization.encoding.encodeCollection' call
    var descriptor = this.or_1;
    var composite = encoder.xn(descriptor, size);
    // Inline function 'kotlinx.serialization.internal.PrimitiveArraySerializer.serialize.<anonymous>' call
    this.zr(composite, value, size);
    composite.cm(descriptor);
  };
  protoOf(PrimitiveArraySerializer).ti = function (encoder, value) {
    return this.as(encoder, (value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  protoOf(PrimitiveArraySerializer).qp = function (encoder, value) {
    return this.as(encoder, (value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  protoOf(PrimitiveArraySerializer).ui = function (decoder) {
    return this.up(decoder, null);
  };
  function PrimitiveArrayBuilder() {
  }
  protoOf(PrimitiveArrayBuilder).bs = function (requiredCapacity, $super) {
    requiredCapacity = requiredCapacity === VOID ? this.qr() + 1 | 0 : requiredCapacity;
    var tmp;
    if ($super === VOID) {
      this.ur(requiredCapacity);
      tmp = Unit_instance;
    } else {
      tmp = $super.ur.call(this, requiredCapacity);
    }
    return tmp;
  };
  function Companion() {
    Companion_instance_0 = this;
    this.cs_1 = longArray(0);
  }
  var Companion_instance_0;
  function Companion_getInstance_7() {
    if (Companion_instance_0 == null)
      new Companion();
    return Companion_instance_0;
  }
  function prepareHighMarksArray($this, elementsCount) {
    var slotsCount = (elementsCount - 1 | 0) >>> 6 | 0;
    var elementsInLastSlot = elementsCount & 63;
    var highMarks = longArray(slotsCount);
    if (!(elementsInLastSlot === 0)) {
      highMarks[get_lastIndex(highMarks)] = (new Long(-1, -1)).r2(elementsCount);
    }
    return highMarks;
  }
  function markHigh($this, index) {
    var slot = (index >>> 6 | 0) - 1 | 0;
    var offsetInSlot = index & 63;
    $this.gs_1[slot] = $this.gs_1[slot].v2((new Long(1, 0)).r2(offsetInSlot));
  }
  function nextUnmarkedHighIndex($this) {
    var inductionVariable = 0;
    var last = $this.gs_1.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var slot = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var slotOffset = imul(slot + 1 | 0, 64);
        var slotMarks = $this.gs_1[slot];
        while (!slotMarks.equals(new Long(-1, -1))) {
          var indexInSlot = countTrailingZeroBits(slotMarks.q2());
          slotMarks = slotMarks.v2((new Long(1, 0)).r2(indexInSlot));
          var index = slotOffset + indexInSlot | 0;
          if ($this.es_1($this.ds_1, index)) {
            $this.gs_1[slot] = slotMarks;
            return index;
          }
        }
        $this.gs_1[slot] = slotMarks;
      }
       while (inductionVariable <= last);
    return -1;
  }
  function ElementMarker(descriptor, readIfAbsent) {
    Companion_getInstance_7();
    this.ds_1 = descriptor;
    this.es_1 = readIfAbsent;
    var elementsCount = this.ds_1.hk();
    if (elementsCount <= 64) {
      var tmp = this;
      var tmp_0;
      if (elementsCount === 64) {
        tmp_0 = new Long(0, 0);
      } else {
        tmp_0 = (new Long(-1, -1)).r2(elementsCount);
      }
      tmp.fs_1 = tmp_0;
      this.gs_1 = Companion_getInstance_7().cs_1;
    } else {
      this.fs_1 = new Long(0, 0);
      this.gs_1 = prepareHighMarksArray(this, elementsCount);
    }
  }
  protoOf(ElementMarker).hs = function (index) {
    if (index < 64) {
      this.fs_1 = this.fs_1.v2((new Long(1, 0)).r2(index));
    } else {
      markHigh(this, index);
    }
  };
  protoOf(ElementMarker).is = function () {
    var elementsCount = this.ds_1.hk();
    while (!this.fs_1.equals(new Long(-1, -1))) {
      var index = countTrailingZeroBits(this.fs_1.q2());
      this.fs_1 = this.fs_1.v2((new Long(1, 0)).r2(index));
      if (this.es_1(this.ds_1, index)) {
        return index;
      }
    }
    if (elementsCount > 64) {
      return nextUnmarkedHighIndex(this);
    }
    return -1;
  };
  function createSimpleEnumSerializer(serialName, values) {
    return new EnumSerializer(serialName, values);
  }
  function createUnmarkedDescriptor($this, serialName) {
    var d = new EnumDescriptor(serialName, $this.js_1.length);
    // Inline function 'kotlin.collections.forEach' call
    var indexedObject = $this.js_1;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'kotlinx.serialization.internal.EnumSerializer.createUnmarkedDescriptor.<anonymous>' call
      d.ys(element.d2_1);
    }
    return d;
  }
  function EnumSerializer$descriptor$delegate$lambda(this$0, $serialName) {
    return function () {
      var tmp0_elvis_lhs = this$0.ks_1;
      return tmp0_elvis_lhs == null ? createUnmarkedDescriptor(this$0, $serialName) : tmp0_elvis_lhs;
    };
  }
  function EnumSerializer(serialName, values) {
    this.js_1 = values;
    this.ks_1 = null;
    var tmp = this;
    tmp.ls_1 = lazy_0(EnumSerializer$descriptor$delegate$lambda(this, serialName));
  }
  protoOf(EnumSerializer).si = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.ls_1;
    descriptor$factory_1();
    return this_0.u1();
  };
  protoOf(EnumSerializer).zs = function (encoder, value) {
    var index = indexOf(this.js_1, value);
    if (index === -1) {
      throw SerializationException_init_$Create$_0(toString(value) + ' is not a valid enum ' + this.si().tj() + ', ' + ('must be one of ' + contentToString(this.js_1)));
    }
    encoder.gn(this.si(), index);
  };
  protoOf(EnumSerializer).ti = function (encoder, value) {
    return this.zs(encoder, value instanceof Enum ? value : THROW_CCE());
  };
  protoOf(EnumSerializer).ui = function (decoder) {
    var index = decoder.xl(this.si());
    if (!(0 <= index ? index <= (this.js_1.length - 1 | 0) : false)) {
      throw SerializationException_init_$Create$_0('' + index + ' is not among valid ' + this.si().tj() + ' enum values, ' + ('values size is ' + this.js_1.length));
    }
    return this.js_1[index];
  };
  protoOf(EnumSerializer).toString = function () {
    return 'kotlinx.serialization.internal.EnumSerializer<' + this.si().tj() + '>';
  };
  function _get_elementDescriptors__y23q9p($this) {
    // Inline function 'kotlin.getValue' call
    var this_0 = $this.nt_1;
    elementDescriptors$factory();
    return this_0.u1();
  }
  function EnumDescriptor$elementDescriptors$delegate$lambda($elementsCount, $name, this$0) {
    return function () {
      var tmp = 0;
      var tmp_0 = $elementsCount;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_1 = fillArrayVal(Array(tmp_0), null);
      while (tmp < tmp_0) {
        var tmp_2 = tmp;
        tmp_1[tmp_2] = buildSerialDescriptor($name + '.' + this$0.jk(tmp_2), OBJECT_getInstance(), []);
        tmp = tmp + 1 | 0;
      }
      return tmp_1;
    };
  }
  function EnumDescriptor(name, elementsCount) {
    PluginGeneratedSerialDescriptor.call(this, name, VOID, elementsCount);
    this.mt_1 = ENUM_getInstance();
    var tmp = this;
    tmp.nt_1 = lazy_0(EnumDescriptor$elementDescriptors$delegate$lambda(elementsCount, name, this));
  }
  protoOf(EnumDescriptor).fk = function () {
    return this.mt_1;
  };
  protoOf(EnumDescriptor).mk = function (index) {
    return getChecked(_get_elementDescriptors__y23q9p(this), index);
  };
  protoOf(EnumDescriptor).equals = function (other) {
    if (this === other)
      return true;
    if (other == null)
      return false;
    if (!(!(other == null) ? isInterface(other, SerialDescriptor) : false))
      return false;
    if (!(other.fk() === ENUM_getInstance()))
      return false;
    if (!(this.tj() === other.tj()))
      return false;
    if (!equals(cachedSerialNames(this), cachedSerialNames(other)))
      return false;
    return true;
  };
  protoOf(EnumDescriptor).toString = function () {
    return joinToString(get_elementNames(this), ', ', this.tj() + '(', ')');
  };
  protoOf(EnumDescriptor).hashCode = function () {
    var result = getStringHashCode(this.tj());
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator = 1;
    var tmp0_iterator = get_elementNames(this).j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var hash = accumulator;
      var tmp = imul(31, hash);
      // Inline function 'kotlin.hashCode' call
      // Inline function 'kotlinx.serialization.internal.EnumDescriptor.hashCode.<anonymous>' call
      var tmp1_elvis_lhs = element == null ? null : hashCode(element);
      accumulator = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    }
    var elementsHashCode = accumulator;
    result = imul(31, result) + elementsHashCode | 0;
    return result;
  };
  function descriptor$factory_1() {
    return getPropertyCallableRef('descriptor', 1, KProperty1, function (receiver) {
      return receiver.si();
    }, null);
  }
  function elementDescriptors$factory() {
    return getPropertyCallableRef('elementDescriptors', 1, KProperty1, function (receiver) {
      return _get_elementDescriptors__y23q9p(receiver);
    }, null);
  }
  function InlinePrimitiveDescriptor(name, primitiveSerializer) {
    return new InlineClassDescriptor(name, new InlinePrimitiveDescriptor$1(primitiveSerializer));
  }
  function InlineClassDescriptor(name, generatedSerializer) {
    PluginGeneratedSerialDescriptor.call(this, name, generatedSerializer, 1);
    this.cu_1 = true;
  }
  protoOf(InlineClassDescriptor).gk = function () {
    return this.cu_1;
  };
  protoOf(InlineClassDescriptor).hashCode = function () {
    return imul(protoOf(PluginGeneratedSerialDescriptor).hashCode.call(this), 31);
  };
  protoOf(InlineClassDescriptor).equals = function (other) {
    var tmp$ret$0;
    $l$block_5: {
      // Inline function 'kotlinx.serialization.internal.equalsImpl' call
      if (this === other) {
        tmp$ret$0 = true;
        break $l$block_5;
      }
      if (!(other instanceof InlineClassDescriptor)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.tj() === other.tj())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      // Inline function 'kotlinx.serialization.internal.InlineClassDescriptor.equals.<anonymous>' call
      if (!(other.cu_1 && contentEquals(this.ot(), other.ot()))) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.hk() === other.hk())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      var inductionVariable = 0;
      var last = this.hk();
      if (inductionVariable < last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(this.mk(index).tj() === other.mk(index).tj())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
          if (!equals(this.mk(index).fk(), other.mk(index).fk())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
        }
         while (inductionVariable < last);
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  function InlinePrimitiveDescriptor$1($primitiveSerializer) {
    this.du_1 = $primitiveSerializer;
  }
  protoOf(InlinePrimitiveDescriptor$1).eu = function () {
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return [this.du_1];
  };
  protoOf(InlinePrimitiveDescriptor$1).si = function () {
    var message = 'unsupported';
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(InlinePrimitiveDescriptor$1).ti = function (encoder, value) {
    // Inline function 'kotlin.error' call
    var message = 'unsupported';
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(InlinePrimitiveDescriptor$1).ui = function (decoder) {
    // Inline function 'kotlin.error' call
    var message = 'unsupported';
    throw IllegalStateException_init_$Create$(toString(message));
  };
  function jsonCachedSerialNames(_this__u8e3s4) {
    return cachedSerialNames(_this__u8e3s4);
  }
  function NoOpEncoder() {
    NoOpEncoder_instance = this;
    AbstractEncoder.call(this);
    this.gu_1 = EmptySerializersModule_0();
  }
  protoOf(NoOpEncoder).qm = function () {
    return this.gu_1;
  };
  protoOf(NoOpEncoder).vm = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).wm = function () {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).xm = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).ym = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).zm = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).an = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).bn = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).cn = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).dn = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).en = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).fn = function (value) {
    return Unit_instance;
  };
  protoOf(NoOpEncoder).gn = function (enumDescriptor, index) {
    return Unit_instance;
  };
  var NoOpEncoder_instance;
  function NoOpEncoder_getInstance() {
    if (NoOpEncoder_instance == null)
      new NoOpEncoder();
    return NoOpEncoder_instance;
  }
  function error($this) {
    throw IllegalStateException_init_$Create$('Descriptor for type `kotlin.Nothing` does not have elements');
  }
  function NothingSerialDescriptor() {
    NothingSerialDescriptor_instance = this;
    this.hu_1 = OBJECT_getInstance();
    this.iu_1 = 'kotlin.Nothing';
  }
  protoOf(NothingSerialDescriptor).fk = function () {
    return this.hu_1;
  };
  protoOf(NothingSerialDescriptor).tj = function () {
    return this.iu_1;
  };
  protoOf(NothingSerialDescriptor).hk = function () {
    return 0;
  };
  protoOf(NothingSerialDescriptor).jk = function (index) {
    error(this);
  };
  protoOf(NothingSerialDescriptor).kk = function (name) {
    error(this);
  };
  protoOf(NothingSerialDescriptor).nk = function (index) {
    error(this);
  };
  protoOf(NothingSerialDescriptor).mk = function (index) {
    error(this);
  };
  protoOf(NothingSerialDescriptor).lk = function (index) {
    error(this);
  };
  protoOf(NothingSerialDescriptor).toString = function () {
    return 'NothingSerialDescriptor';
  };
  protoOf(NothingSerialDescriptor).equals = function (other) {
    return this === other;
  };
  protoOf(NothingSerialDescriptor).hashCode = function () {
    return getStringHashCode(this.iu_1) + imul(31, this.hu_1.hashCode()) | 0;
  };
  var NothingSerialDescriptor_instance;
  function NothingSerialDescriptor_getInstance() {
    if (NothingSerialDescriptor_instance == null)
      new NothingSerialDescriptor();
    return NothingSerialDescriptor_instance;
  }
  function NullableSerializer(serializer) {
    this.ju_1 = serializer;
    this.ku_1 = new SerialDescriptorForNullable(this.ju_1.si());
  }
  protoOf(NullableSerializer).si = function () {
    return this.ku_1;
  };
  protoOf(NullableSerializer).lu = function (encoder, value) {
    if (!(value == null)) {
      encoder.wn();
      encoder.tn(this.ju_1, value);
    } else {
      encoder.wm();
    }
  };
  protoOf(NullableSerializer).ti = function (encoder, value) {
    return this.lu(encoder, (value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  protoOf(NullableSerializer).ui = function (decoder) {
    return decoder.ml() ? decoder.am(this.ju_1) : decoder.nl();
  };
  protoOf(NullableSerializer).equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other instanceof NullableSerializer))
      THROW_CCE();
    if (!equals(this.ju_1, other.ju_1))
      return false;
    return true;
  };
  protoOf(NullableSerializer).hashCode = function () {
    return hashCode(this.ju_1);
  };
  function SerialDescriptorForNullable(original) {
    this.ok_1 = original;
    this.pk_1 = this.ok_1.tj() + '?';
    this.qk_1 = cachedSerialNames(this.ok_1);
  }
  protoOf(SerialDescriptorForNullable).tj = function () {
    return this.pk_1;
  };
  protoOf(SerialDescriptorForNullable).kl = function () {
    return this.qk_1;
  };
  protoOf(SerialDescriptorForNullable).bk = function () {
    return true;
  };
  protoOf(SerialDescriptorForNullable).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SerialDescriptorForNullable))
      return false;
    if (!equals(this.ok_1, other.ok_1))
      return false;
    return true;
  };
  protoOf(SerialDescriptorForNullable).toString = function () {
    return toString(this.ok_1) + '?';
  };
  protoOf(SerialDescriptorForNullable).hashCode = function () {
    return imul(hashCode(this.ok_1), 31);
  };
  protoOf(SerialDescriptorForNullable).fk = function () {
    return this.ok_1.fk();
  };
  protoOf(SerialDescriptorForNullable).gk = function () {
    return this.ok_1.gk();
  };
  protoOf(SerialDescriptorForNullable).hk = function () {
    return this.ok_1.hk();
  };
  protoOf(SerialDescriptorForNullable).ik = function () {
    return this.ok_1.ik();
  };
  protoOf(SerialDescriptorForNullable).jk = function (index) {
    return this.ok_1.jk(index);
  };
  protoOf(SerialDescriptorForNullable).kk = function (name) {
    return this.ok_1.kk(name);
  };
  protoOf(SerialDescriptorForNullable).lk = function (index) {
    return this.ok_1.lk(index);
  };
  protoOf(SerialDescriptorForNullable).mk = function (index) {
    return this.ok_1.mk(index);
  };
  protoOf(SerialDescriptorForNullable).nk = function (index) {
    return this.ok_1.nk(index);
  };
  function ObjectSerializer$descriptor$delegate$lambda$lambda(this$0) {
    return function ($this$buildSerialDescriptor) {
      $this$buildSerialDescriptor.aj_1 = this$0.nu_1;
      return Unit_instance;
    };
  }
  function ObjectSerializer$descriptor$delegate$lambda($serialName, this$0) {
    return function () {
      var tmp = OBJECT_getInstance();
      return buildSerialDescriptor($serialName, tmp, [], ObjectSerializer$descriptor$delegate$lambda$lambda(this$0));
    };
  }
  function ObjectSerializer(serialName, objectInstance) {
    this.mu_1 = objectInstance;
    this.nu_1 = emptyList();
    var tmp = this;
    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp.ou_1 = lazy(tmp_0, ObjectSerializer$descriptor$delegate$lambda(serialName, this));
  }
  protoOf(ObjectSerializer).si = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.ou_1;
    descriptor$factory_2();
    return this_0.u1();
  };
  protoOf(ObjectSerializer).ij = function (encoder, value) {
    encoder.bm(this.si()).cm(this.si());
  };
  protoOf(ObjectSerializer).ti = function (encoder, value) {
    return this.ij(encoder, !(value == null) ? value : THROW_CCE());
  };
  protoOf(ObjectSerializer).ui = function (decoder) {
    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call
    var descriptor = this.si();
    var composite = decoder.bm(descriptor);
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlinx.serialization.internal.ObjectSerializer.deserialize.<anonymous>' call
      if (composite.rm()) {
        tmp$ret$0 = Unit_instance;
        break $l$block_0;
      }
      var index = composite.sm(this.si());
      if (index === -1) {
        tmp$ret$0 = Unit_instance;
        break $l$block_0;
      } else
        throw SerializationException_init_$Create$_0('Unexpected index ' + index);
    }
    var result = tmp$ret$0;
    composite.cm(descriptor);
    return this.mu_1;
  };
  function descriptor$factory_2() {
    return getPropertyCallableRef('descriptor', 1, KProperty1, function (receiver) {
      return receiver.si();
    }, null);
  }
  function get_EMPTY_DESCRIPTOR_ARRAY() {
    _init_properties_Platform_common_kt__3qzecs();
    return EMPTY_DESCRIPTOR_ARRAY;
  }
  var EMPTY_DESCRIPTOR_ARRAY;
  function cachedSerialNames(_this__u8e3s4) {
    _init_properties_Platform_common_kt__3qzecs();
    if (isInterface(_this__u8e3s4, CachedNames))
      return _this__u8e3s4.kl();
    var result = HashSet_init_$Create$_1(_this__u8e3s4.hk());
    var inductionVariable = 0;
    var last = _this__u8e3s4.hk();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.plusAssign' call
        var element = _this__u8e3s4.jk(i);
        result.e(element);
      }
       while (inductionVariable < last);
    return result;
  }
  function kclass(_this__u8e3s4) {
    _init_properties_Platform_common_kt__3qzecs();
    var t = _this__u8e3s4.r9();
    var tmp;
    if (!(t == null) ? isInterface(t, KClass) : false) {
      tmp = t;
    } else {
      if (!(t == null) ? isInterface(t, KTypeParameter) : false) {
        throw IllegalArgumentException_init_$Create$('Captured type parameter ' + toString(t) + ' from generic non-reified function. ' + ('Such functionality cannot be supported because ' + toString(t) + ' is erased, either specify serializer explicitly or make ') + ('calling function inline with reified ' + toString(t) + '.'));
      } else {
        throw IllegalArgumentException_init_$Create$('Only KClass supported as classifier, got ' + toString_0(t));
      }
    }
    var tmp_0 = tmp;
    return isInterface(tmp_0, KClass) ? tmp_0 : THROW_CCE();
  }
  function typeOrThrow(_this__u8e3s4) {
    _init_properties_Platform_common_kt__3qzecs();
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.requireNotNull' call
      var value = _this__u8e3s4.qu_1;
      // Inline function 'kotlin.contracts.contract' call
      if (value == null) {
        // Inline function 'kotlinx.serialization.internal.typeOrThrow.<anonymous>' call
        var message = 'Star projections in type arguments are not allowed, but had ' + toString_0(_this__u8e3s4.qu_1);
        throw IllegalArgumentException_init_$Create$(toString(message));
      } else {
        tmp$ret$1 = value;
        break $l$block;
      }
    }
    return tmp$ret$1;
  }
  function notRegisteredMessage(_this__u8e3s4) {
    _init_properties_Platform_common_kt__3qzecs();
    var tmp0_elvis_lhs = _this__u8e3s4.f9();
    return notRegisteredMessage_0(tmp0_elvis_lhs == null ? '<local class name not available>' : tmp0_elvis_lhs);
  }
  function compactArray(_this__u8e3s4) {
    _init_properties_Platform_common_kt__3qzecs();
    // Inline function 'kotlin.takeUnless' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    // Inline function 'kotlinx.serialization.internal.compactArray.<anonymous>' call
    // Inline function 'kotlin.collections.isNullOrEmpty' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(_this__u8e3s4 == null || _this__u8e3s4.n())) {
      tmp = _this__u8e3s4;
    } else {
      tmp = null;
    }
    var tmp0_safe_receiver = tmp;
    var tmp_0;
    if (tmp0_safe_receiver == null) {
      tmp_0 = null;
    } else {
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp_0 = copyToArray(tmp0_safe_receiver);
    }
    var tmp1_elvis_lhs = tmp_0;
    return tmp1_elvis_lhs == null ? get_EMPTY_DESCRIPTOR_ARRAY() : tmp1_elvis_lhs;
  }
  function notRegisteredMessage_0(className) {
    _init_properties_Platform_common_kt__3qzecs();
    return "Serializer for class '" + className + "' is not found.\n" + "Please ensure that class is marked as '@Serializable' and that the serialization compiler plugin is applied.\n";
  }
  var properties_initialized_Platform_common_kt_i7q4ty;
  function _init_properties_Platform_common_kt__3qzecs() {
    if (!properties_initialized_Platform_common_kt_i7q4ty) {
      properties_initialized_Platform_common_kt_i7q4ty = true;
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      EMPTY_DESCRIPTOR_ARRAY = [];
    }
  }
  function throwMissingFieldException(seen, goldenMask, descriptor) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var missingFields = ArrayList_init_$Create$_0();
    var missingFieldsBits = goldenMask & ~seen;
    var inductionVariable = 0;
    if (inductionVariable < 32)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!((missingFieldsBits & 1) === 0)) {
          // Inline function 'kotlin.collections.plusAssign' call
          var element = descriptor.jk(i);
          missingFields.e(element);
        }
        missingFieldsBits = missingFieldsBits >>> 1 | 0;
      }
       while (inductionVariable < 32);
    throw MissingFieldException_init_$Create$(missingFields, descriptor.tj());
  }
  function hashCodeImpl(_this__u8e3s4, typeParams) {
    var result = getStringHashCode(_this__u8e3s4.tj());
    result = imul(31, result) + contentHashCode(typeParams) | 0;
    var elementDescriptors = get_elementDescriptors(_this__u8e3s4);
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator = 1;
    var tmp0_iterator = elementDescriptors.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var hash = accumulator;
      var tmp = imul(31, hash);
      // Inline function 'kotlin.hashCode' call
      // Inline function 'kotlinx.serialization.internal.hashCodeImpl.<anonymous>' call
      var tmp0_safe_receiver = element.tj();
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
      accumulator = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    }
    var namesHash = accumulator;
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator_0 = 1;
    var tmp0_iterator_0 = elementDescriptors.j();
    while (tmp0_iterator_0.k()) {
      var element_0 = tmp0_iterator_0.l();
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var hash_0 = accumulator_0;
      var tmp_0 = imul(31, hash_0);
      // Inline function 'kotlin.hashCode' call
      // Inline function 'kotlinx.serialization.internal.hashCodeImpl.<anonymous>' call
      var tmp0_safe_receiver_0 = element_0.fk();
      var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
      accumulator_0 = tmp_0 + (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0) | 0;
    }
    var kindHash = accumulator_0;
    result = imul(31, result) + namesHash | 0;
    result = imul(31, result) + kindHash | 0;
    return result;
  }
  function _get_childSerializers__7vnyfa($this) {
    // Inline function 'kotlin.getValue' call
    var this_0 = $this.vs_1;
    childSerializers$factory();
    return this_0.u1();
  }
  function _get__hashCode__tgwhef_0($this) {
    // Inline function 'kotlin.getValue' call
    var this_0 = $this.xs_1;
    _hashCode$factory_0();
    return this_0.u1();
  }
  function buildIndices($this) {
    var indices = HashMap_init_$Create$();
    var inductionVariable = 0;
    var last = $this.qs_1.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.set' call
        var key = $this.qs_1[i];
        indices.b2(key, i);
      }
       while (inductionVariable <= last);
    return indices;
  }
  function PluginGeneratedSerialDescriptor$childSerializers$delegate$lambda(this$0) {
    return function () {
      var tmp0_safe_receiver = this$0.ns_1;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.eu();
      return tmp1_elvis_lhs == null ? get_EMPTY_SERIALIZER_ARRAY() : tmp1_elvis_lhs;
    };
  }
  function PluginGeneratedSerialDescriptor$typeParameterDescriptors$delegate$lambda(this$0) {
    return function () {
      var tmp0_safe_receiver = this$0.ns_1;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.fu();
      var tmp;
      if (tmp1_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(tmp1_safe_receiver.length);
        var inductionVariable = 0;
        var last = tmp1_safe_receiver.length;
        while (inductionVariable < last) {
          var item = tmp1_safe_receiver[inductionVariable];
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlinx.serialization.internal.PluginGeneratedSerialDescriptor.typeParameterDescriptors$delegate.<anonymous>.<anonymous>' call
          var tmp$ret$0 = item.si();
          destination.e(tmp$ret$0);
        }
        tmp = destination;
      }
      return compactArray(tmp);
    };
  }
  function PluginGeneratedSerialDescriptor$_hashCode$delegate$lambda(this$0) {
    return function () {
      return hashCodeImpl(this$0, this$0.ot());
    };
  }
  function PluginGeneratedSerialDescriptor$toString$lambda(this$0) {
    return function (i) {
      return this$0.jk(i) + ': ' + this$0.mk(i).tj();
    };
  }
  function PluginGeneratedSerialDescriptor(serialName, generatedSerializer, elementsCount) {
    generatedSerializer = generatedSerializer === VOID ? null : generatedSerializer;
    this.ms_1 = serialName;
    this.ns_1 = generatedSerializer;
    this.os_1 = elementsCount;
    this.ps_1 = -1;
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = this.os_1;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = fillArrayVal(Array(tmp_1), null);
    while (tmp_0 < tmp_1) {
      tmp_2[tmp_0] = '[UNINITIALIZED]';
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.qs_1 = tmp_2;
    var tmp_3 = this;
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.os_1;
    tmp_3.rs_1 = fillArrayVal(Array(size), null);
    this.ss_1 = null;
    this.ts_1 = booleanArray(this.os_1);
    this.us_1 = emptyMap();
    var tmp_4 = this;
    var tmp_5 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_4.vs_1 = lazy(tmp_5, PluginGeneratedSerialDescriptor$childSerializers$delegate$lambda(this));
    var tmp_6 = this;
    var tmp_7 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_6.ws_1 = lazy(tmp_7, PluginGeneratedSerialDescriptor$typeParameterDescriptors$delegate$lambda(this));
    var tmp_8 = this;
    var tmp_9 = LazyThreadSafetyMode_PUBLICATION_getInstance();
    tmp_8.xs_1 = lazy(tmp_9, PluginGeneratedSerialDescriptor$_hashCode$delegate$lambda(this));
  }
  protoOf(PluginGeneratedSerialDescriptor).tj = function () {
    return this.ms_1;
  };
  protoOf(PluginGeneratedSerialDescriptor).hk = function () {
    return this.os_1;
  };
  protoOf(PluginGeneratedSerialDescriptor).fk = function () {
    return CLASS_getInstance();
  };
  protoOf(PluginGeneratedSerialDescriptor).ik = function () {
    var tmp0_elvis_lhs = this.ss_1;
    return tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
  };
  protoOf(PluginGeneratedSerialDescriptor).kl = function () {
    return this.us_1.y1();
  };
  protoOf(PluginGeneratedSerialDescriptor).ot = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.ws_1;
    typeParameterDescriptors$factory();
    return this_0.u1();
  };
  protoOf(PluginGeneratedSerialDescriptor).pt = function (name, isOptional) {
    this.ps_1 = this.ps_1 + 1 | 0;
    this.qs_1[this.ps_1] = name;
    this.ts_1[this.ps_1] = isOptional;
    this.rs_1[this.ps_1] = null;
    if (this.ps_1 === (this.os_1 - 1 | 0)) {
      this.us_1 = buildIndices(this);
    }
  };
  protoOf(PluginGeneratedSerialDescriptor).ys = function (name, isOptional, $super) {
    isOptional = isOptional === VOID ? false : isOptional;
    var tmp;
    if ($super === VOID) {
      this.pt(name, isOptional);
      tmp = Unit_instance;
    } else {
      tmp = $super.pt.call(this, name, isOptional);
    }
    return tmp;
  };
  protoOf(PluginGeneratedSerialDescriptor).mk = function (index) {
    return getChecked(_get_childSerializers__7vnyfa(this), index).si();
  };
  protoOf(PluginGeneratedSerialDescriptor).nk = function (index) {
    return getChecked_0(this.ts_1, index);
  };
  protoOf(PluginGeneratedSerialDescriptor).lk = function (index) {
    var tmp0_elvis_lhs = getChecked(this.rs_1, index);
    return tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
  };
  protoOf(PluginGeneratedSerialDescriptor).jk = function (index) {
    return getChecked(this.qs_1, index);
  };
  protoOf(PluginGeneratedSerialDescriptor).kk = function (name) {
    var tmp0_elvis_lhs = this.us_1.x1(name);
    return tmp0_elvis_lhs == null ? -3 : tmp0_elvis_lhs;
  };
  protoOf(PluginGeneratedSerialDescriptor).equals = function (other) {
    var tmp$ret$0;
    $l$block_5: {
      // Inline function 'kotlinx.serialization.internal.equalsImpl' call
      if (this === other) {
        tmp$ret$0 = true;
        break $l$block_5;
      }
      if (!(other instanceof PluginGeneratedSerialDescriptor)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.tj() === other.tj())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      // Inline function 'kotlinx.serialization.internal.PluginGeneratedSerialDescriptor.equals.<anonymous>' call
      if (!contentEquals(this.ot(), other.ot())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.hk() === other.hk())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      var inductionVariable = 0;
      var last = this.hk();
      if (inductionVariable < last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(this.mk(index).tj() === other.mk(index).tj())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
          if (!equals(this.mk(index).fk(), other.mk(index).fk())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
        }
         while (inductionVariable < last);
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(PluginGeneratedSerialDescriptor).hashCode = function () {
    return _get__hashCode__tgwhef_0(this);
  };
  protoOf(PluginGeneratedSerialDescriptor).toString = function () {
    var tmp = until(0, this.os_1);
    var tmp_0 = this.tj() + '(';
    return joinToString(tmp, ', ', tmp_0, ')', VOID, VOID, PluginGeneratedSerialDescriptor$toString$lambda(this));
  };
  function childSerializers$factory() {
    return getPropertyCallableRef('childSerializers', 1, KProperty1, function (receiver) {
      return _get_childSerializers__7vnyfa(receiver);
    }, null);
  }
  function typeParameterDescriptors$factory() {
    return getPropertyCallableRef('typeParameterDescriptors', 1, KProperty1, function (receiver) {
      return receiver.ot();
    }, null);
  }
  function _hashCode$factory_0() {
    return getPropertyCallableRef('_hashCode', 1, KProperty1, function (receiver) {
      return _get__hashCode__tgwhef_0(receiver);
    }, null);
  }
  function get_EMPTY_SERIALIZER_ARRAY() {
    _init_properties_PluginHelperInterfaces_kt__xgvzfp();
    return EMPTY_SERIALIZER_ARRAY;
  }
  var EMPTY_SERIALIZER_ARRAY;
  function SerializerFactory() {
  }
  function GeneratedSerializer() {
  }
  var properties_initialized_PluginHelperInterfaces_kt_ap8in1;
  function _init_properties_PluginHelperInterfaces_kt__xgvzfp() {
    if (!properties_initialized_PluginHelperInterfaces_kt_ap8in1) {
      properties_initialized_PluginHelperInterfaces_kt_ap8in1 = true;
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      EMPTY_SERIALIZER_ARRAY = [];
    }
  }
  function CharArraySerializer_0() {
    CharArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_2(Companion_getInstance_1()));
  }
  protoOf(CharArraySerializer_0).uu = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(CharArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.uu((!(_this__u8e3s4 == null) ? isCharArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(CharArraySerializer_0).vu = function (_this__u8e3s4) {
    return new CharArrayBuilder(_this__u8e3s4);
  };
  protoOf(CharArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.vu((!(_this__u8e3s4 == null) ? isCharArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(CharArraySerializer_0).xr = function () {
    return charArray(0);
  };
  protoOf(CharArraySerializer_0).wu = function (decoder, index, builder, checkIndex) {
    builder.zu(decoder.km(this.or_1, index));
  };
  protoOf(CharArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.wu(decoder, index, builder instanceof CharArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(CharArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.wu(decoder, index, builder instanceof CharArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(CharArraySerializer_0).av = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.pn(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(CharArraySerializer_0).zr = function (encoder, content, size) {
    return this.av(encoder, (!(content == null) ? isCharArray(content) : false) ? content : THROW_CCE(), size);
  };
  var CharArraySerializer_instance;
  function CharArraySerializer_getInstance() {
    if (CharArraySerializer_instance == null)
      new CharArraySerializer_0();
    return CharArraySerializer_instance;
  }
  function DoubleArraySerializer_0() {
    DoubleArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_3(DoubleCompanionObject_instance));
  }
  protoOf(DoubleArraySerializer_0).dv = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(DoubleArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.dv((!(_this__u8e3s4 == null) ? isDoubleArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(DoubleArraySerializer_0).ev = function (_this__u8e3s4) {
    return new DoubleArrayBuilder(_this__u8e3s4);
  };
  protoOf(DoubleArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.ev((!(_this__u8e3s4 == null) ? isDoubleArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(DoubleArraySerializer_0).xr = function () {
    return new Float64Array(0);
  };
  protoOf(DoubleArraySerializer_0).fv = function (decoder, index, builder, checkIndex) {
    builder.iv(decoder.jm(this.or_1, index));
  };
  protoOf(DoubleArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.fv(decoder, index, builder instanceof DoubleArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(DoubleArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.fv(decoder, index, builder instanceof DoubleArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(DoubleArraySerializer_0).jv = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.on(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(DoubleArraySerializer_0).zr = function (encoder, content, size) {
    return this.jv(encoder, (!(content == null) ? isDoubleArray(content) : false) ? content : THROW_CCE(), size);
  };
  var DoubleArraySerializer_instance;
  function DoubleArraySerializer_getInstance() {
    if (DoubleArraySerializer_instance == null)
      new DoubleArraySerializer_0();
    return DoubleArraySerializer_instance;
  }
  function FloatArraySerializer_0() {
    FloatArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_4(FloatCompanionObject_instance));
  }
  protoOf(FloatArraySerializer_0).mv = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(FloatArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.mv((!(_this__u8e3s4 == null) ? isFloatArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(FloatArraySerializer_0).nv = function (_this__u8e3s4) {
    return new FloatArrayBuilder(_this__u8e3s4);
  };
  protoOf(FloatArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.nv((!(_this__u8e3s4 == null) ? isFloatArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(FloatArraySerializer_0).xr = function () {
    return new Float32Array(0);
  };
  protoOf(FloatArraySerializer_0).ov = function (decoder, index, builder, checkIndex) {
    builder.rv(decoder.im(this.or_1, index));
  };
  protoOf(FloatArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.ov(decoder, index, builder instanceof FloatArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(FloatArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.ov(decoder, index, builder instanceof FloatArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(FloatArraySerializer_0).sv = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.nn(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(FloatArraySerializer_0).zr = function (encoder, content, size) {
    return this.sv(encoder, (!(content == null) ? isFloatArray(content) : false) ? content : THROW_CCE(), size);
  };
  var FloatArraySerializer_instance;
  function FloatArraySerializer_getInstance() {
    if (FloatArraySerializer_instance == null)
      new FloatArraySerializer_0();
    return FloatArraySerializer_instance;
  }
  function LongArraySerializer_0() {
    LongArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_5(Companion_getInstance_2()));
  }
  protoOf(LongArraySerializer_0).vv = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(LongArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.vv((!(_this__u8e3s4 == null) ? isLongArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LongArraySerializer_0).wv = function (_this__u8e3s4) {
    return new LongArrayBuilder(_this__u8e3s4);
  };
  protoOf(LongArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.wv((!(_this__u8e3s4 == null) ? isLongArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LongArraySerializer_0).xr = function () {
    return longArray(0);
  };
  protoOf(LongArraySerializer_0).xv = function (decoder, index, builder, checkIndex) {
    builder.aw(decoder.hm(this.or_1, index));
  };
  protoOf(LongArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.xv(decoder, index, builder instanceof LongArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(LongArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.xv(decoder, index, builder instanceof LongArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(LongArraySerializer_0).bw = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.mn(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(LongArraySerializer_0).zr = function (encoder, content, size) {
    return this.bw(encoder, (!(content == null) ? isLongArray(content) : false) ? content : THROW_CCE(), size);
  };
  var LongArraySerializer_instance;
  function LongArraySerializer_getInstance() {
    if (LongArraySerializer_instance == null)
      new LongArraySerializer_0();
    return LongArraySerializer_instance;
  }
  function ULongArraySerializer_0() {
    ULongArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_6(Companion_getInstance_3()));
  }
  protoOf(ULongArraySerializer_0).ew = function (_this__u8e3s4) {
    return _ULongArray___get_size__impl__ju6dtr(_this__u8e3s4);
  };
  protoOf(ULongArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.ew(_this__u8e3s4 instanceof ULongArray ? _this__u8e3s4.fi_1 : THROW_CCE());
  };
  protoOf(ULongArraySerializer_0).fw = function (_this__u8e3s4) {
    return new ULongArrayBuilder(_this__u8e3s4);
  };
  protoOf(ULongArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.fw(_this__u8e3s4 instanceof ULongArray ? _this__u8e3s4.fi_1 : THROW_CCE());
  };
  protoOf(ULongArraySerializer_0).gw = function () {
    return _ULongArray___init__impl__twm1l3(0);
  };
  protoOf(ULongArraySerializer_0).xr = function () {
    return new ULongArray(this.gw());
  };
  protoOf(ULongArraySerializer_0).hw = function (decoder, index, builder, checkIndex) {
    // Inline function 'kotlin.toULong' call
    var this_0 = decoder.mm(this.or_1, index).sl();
    var tmp$ret$0 = _ULong___init__impl__c78o9k(this_0);
    builder.kw(tmp$ret$0);
  };
  protoOf(ULongArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.hw(decoder, index, builder instanceof ULongArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(ULongArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.hw(decoder, index, builder instanceof ULongArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(ULongArraySerializer_0).lw = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = encoder.rn(this.or_1, i);
        // Inline function 'kotlin.ULong.toLong' call
        var this_0 = ULongArray__get_impl_pr71q9(content, i);
        var tmp$ret$0 = _ULong___get_data__impl__fggpzb(this_0);
        tmp.bn(tmp$ret$0);
      }
       while (inductionVariable < size);
  };
  protoOf(ULongArraySerializer_0).zr = function (encoder, content, size) {
    return this.lw(encoder, content instanceof ULongArray ? content.fi_1 : THROW_CCE(), size);
  };
  var ULongArraySerializer_instance;
  function ULongArraySerializer_getInstance() {
    if (ULongArraySerializer_instance == null)
      new ULongArraySerializer_0();
    return ULongArraySerializer_instance;
  }
  function IntArraySerializer_0() {
    IntArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_7(IntCompanionObject_instance));
  }
  protoOf(IntArraySerializer_0).ow = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(IntArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.ow((!(_this__u8e3s4 == null) ? isIntArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(IntArraySerializer_0).pw = function (_this__u8e3s4) {
    return new IntArrayBuilder(_this__u8e3s4);
  };
  protoOf(IntArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.pw((!(_this__u8e3s4 == null) ? isIntArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(IntArraySerializer_0).xr = function () {
    return new Int32Array(0);
  };
  protoOf(IntArraySerializer_0).qw = function (decoder, index, builder, checkIndex) {
    builder.tw(decoder.gm(this.or_1, index));
  };
  protoOf(IntArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.qw(decoder, index, builder instanceof IntArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(IntArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.qw(decoder, index, builder instanceof IntArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(IntArraySerializer_0).uw = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.ln(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(IntArraySerializer_0).zr = function (encoder, content, size) {
    return this.uw(encoder, (!(content == null) ? isIntArray(content) : false) ? content : THROW_CCE(), size);
  };
  var IntArraySerializer_instance;
  function IntArraySerializer_getInstance() {
    if (IntArraySerializer_instance == null)
      new IntArraySerializer_0();
    return IntArraySerializer_instance;
  }
  function UIntArraySerializer_0() {
    UIntArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_8(Companion_getInstance_4()));
  }
  protoOf(UIntArraySerializer_0).xw = function (_this__u8e3s4) {
    return _UIntArray___get_size__impl__r6l8ci(_this__u8e3s4);
  };
  protoOf(UIntArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.xw(_this__u8e3s4 instanceof UIntArray ? _this__u8e3s4.uh_1 : THROW_CCE());
  };
  protoOf(UIntArraySerializer_0).yw = function (_this__u8e3s4) {
    return new UIntArrayBuilder(_this__u8e3s4);
  };
  protoOf(UIntArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.yw(_this__u8e3s4 instanceof UIntArray ? _this__u8e3s4.uh_1 : THROW_CCE());
  };
  protoOf(UIntArraySerializer_0).zw = function () {
    return _UIntArray___init__impl__ghjpc6(0);
  };
  protoOf(UIntArraySerializer_0).xr = function () {
    return new UIntArray(this.zw());
  };
  protoOf(UIntArraySerializer_0).ax = function (decoder, index, builder, checkIndex) {
    // Inline function 'kotlin.toUInt' call
    var this_0 = decoder.mm(this.or_1, index).rl();
    var tmp$ret$0 = _UInt___init__impl__l7qpdl(this_0);
    builder.dx(tmp$ret$0);
  };
  protoOf(UIntArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.ax(decoder, index, builder instanceof UIntArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(UIntArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.ax(decoder, index, builder instanceof UIntArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(UIntArraySerializer_0).ex = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = encoder.rn(this.or_1, i);
        // Inline function 'kotlin.UInt.toInt' call
        var this_0 = UIntArray__get_impl_gp5kza(content, i);
        var tmp$ret$0 = _UInt___get_data__impl__f0vqqw(this_0);
        tmp.an(tmp$ret$0);
      }
       while (inductionVariable < size);
  };
  protoOf(UIntArraySerializer_0).zr = function (encoder, content, size) {
    return this.ex(encoder, content instanceof UIntArray ? content.uh_1 : THROW_CCE(), size);
  };
  var UIntArraySerializer_instance;
  function UIntArraySerializer_getInstance() {
    if (UIntArraySerializer_instance == null)
      new UIntArraySerializer_0();
    return UIntArraySerializer_instance;
  }
  function ShortArraySerializer_0() {
    ShortArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_9(ShortCompanionObject_instance));
  }
  protoOf(ShortArraySerializer_0).hx = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(ShortArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.hx((!(_this__u8e3s4 == null) ? isShortArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ShortArraySerializer_0).ix = function (_this__u8e3s4) {
    return new ShortArrayBuilder(_this__u8e3s4);
  };
  protoOf(ShortArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.ix((!(_this__u8e3s4 == null) ? isShortArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ShortArraySerializer_0).xr = function () {
    return new Int16Array(0);
  };
  protoOf(ShortArraySerializer_0).jx = function (decoder, index, builder, checkIndex) {
    builder.mx(decoder.fm(this.or_1, index));
  };
  protoOf(ShortArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.jx(decoder, index, builder instanceof ShortArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(ShortArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.jx(decoder, index, builder instanceof ShortArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(ShortArraySerializer_0).nx = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.kn(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(ShortArraySerializer_0).zr = function (encoder, content, size) {
    return this.nx(encoder, (!(content == null) ? isShortArray(content) : false) ? content : THROW_CCE(), size);
  };
  var ShortArraySerializer_instance;
  function ShortArraySerializer_getInstance() {
    if (ShortArraySerializer_instance == null)
      new ShortArraySerializer_0();
    return ShortArraySerializer_instance;
  }
  function UShortArraySerializer_0() {
    UShortArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_10(Companion_getInstance_5()));
  }
  protoOf(UShortArraySerializer_0).qx = function (_this__u8e3s4) {
    return _UShortArray___get_size__impl__jqto1b(_this__u8e3s4);
  };
  protoOf(UShortArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.qx(_this__u8e3s4 instanceof UShortArray ? _this__u8e3s4.qi_1 : THROW_CCE());
  };
  protoOf(UShortArraySerializer_0).rx = function (_this__u8e3s4) {
    return new UShortArrayBuilder(_this__u8e3s4);
  };
  protoOf(UShortArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.rx(_this__u8e3s4 instanceof UShortArray ? _this__u8e3s4.qi_1 : THROW_CCE());
  };
  protoOf(UShortArraySerializer_0).sx = function () {
    return _UShortArray___init__impl__9b26ef(0);
  };
  protoOf(UShortArraySerializer_0).xr = function () {
    return new UShortArray(this.sx());
  };
  protoOf(UShortArraySerializer_0).tx = function (decoder, index, builder, checkIndex) {
    // Inline function 'kotlin.toUShort' call
    var this_0 = decoder.mm(this.or_1, index).ql();
    var tmp$ret$0 = _UShort___init__impl__jigrne(this_0);
    builder.wx(tmp$ret$0);
  };
  protoOf(UShortArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.tx(decoder, index, builder instanceof UShortArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(UShortArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.tx(decoder, index, builder instanceof UShortArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(UShortArraySerializer_0).xx = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = encoder.rn(this.or_1, i);
        // Inline function 'kotlin.UShort.toShort' call
        var this_0 = UShortArray__get_impl_fnbhmx(content, i);
        var tmp$ret$0 = _UShort___get_data__impl__g0245(this_0);
        tmp.zm(tmp$ret$0);
      }
       while (inductionVariable < size);
  };
  protoOf(UShortArraySerializer_0).zr = function (encoder, content, size) {
    return this.xx(encoder, content instanceof UShortArray ? content.qi_1 : THROW_CCE(), size);
  };
  var UShortArraySerializer_instance;
  function UShortArraySerializer_getInstance() {
    if (UShortArraySerializer_instance == null)
      new UShortArraySerializer_0();
    return UShortArraySerializer_instance;
  }
  function ByteArraySerializer_0() {
    ByteArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_11(ByteCompanionObject_instance));
  }
  protoOf(ByteArraySerializer_0).ay = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(ByteArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.ay((!(_this__u8e3s4 == null) ? isByteArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ByteArraySerializer_0).by = function (_this__u8e3s4) {
    return new ByteArrayBuilder(_this__u8e3s4);
  };
  protoOf(ByteArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.by((!(_this__u8e3s4 == null) ? isByteArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ByteArraySerializer_0).xr = function () {
    return new Int8Array(0);
  };
  protoOf(ByteArraySerializer_0).cy = function (decoder, index, builder, checkIndex) {
    builder.fy(decoder.em(this.or_1, index));
  };
  protoOf(ByteArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.cy(decoder, index, builder instanceof ByteArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(ByteArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.cy(decoder, index, builder instanceof ByteArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(ByteArraySerializer_0).gy = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.jn(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(ByteArraySerializer_0).zr = function (encoder, content, size) {
    return this.gy(encoder, (!(content == null) ? isByteArray(content) : false) ? content : THROW_CCE(), size);
  };
  var ByteArraySerializer_instance;
  function ByteArraySerializer_getInstance() {
    if (ByteArraySerializer_instance == null)
      new ByteArraySerializer_0();
    return ByteArraySerializer_instance;
  }
  function UByteArraySerializer_0() {
    UByteArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_12(Companion_getInstance_6()));
  }
  protoOf(UByteArraySerializer_0).jy = function (_this__u8e3s4) {
    return _UByteArray___get_size__impl__h6pkdv(_this__u8e3s4);
  };
  protoOf(UByteArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.jy(_this__u8e3s4 instanceof UByteArray ? _this__u8e3s4.jh_1 : THROW_CCE());
  };
  protoOf(UByteArraySerializer_0).ky = function (_this__u8e3s4) {
    return new UByteArrayBuilder(_this__u8e3s4);
  };
  protoOf(UByteArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.ky(_this__u8e3s4 instanceof UByteArray ? _this__u8e3s4.jh_1 : THROW_CCE());
  };
  protoOf(UByteArraySerializer_0).ly = function () {
    return _UByteArray___init__impl__ip4y9n(0);
  };
  protoOf(UByteArraySerializer_0).xr = function () {
    return new UByteArray(this.ly());
  };
  protoOf(UByteArraySerializer_0).my = function (decoder, index, builder, checkIndex) {
    // Inline function 'kotlin.toUByte' call
    var this_0 = decoder.mm(this.or_1, index).pl();
    var tmp$ret$0 = _UByte___init__impl__g9hnc4(this_0);
    builder.py(tmp$ret$0);
  };
  protoOf(UByteArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.my(decoder, index, builder instanceof UByteArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(UByteArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.my(decoder, index, builder instanceof UByteArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(UByteArraySerializer_0).qy = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = encoder.rn(this.or_1, i);
        // Inline function 'kotlin.UByte.toByte' call
        var this_0 = UByteArray__get_impl_t5f3hv(content, i);
        var tmp$ret$0 = _UByte___get_data__impl__jof9qr(this_0);
        tmp.ym(tmp$ret$0);
      }
       while (inductionVariable < size);
  };
  protoOf(UByteArraySerializer_0).zr = function (encoder, content, size) {
    return this.qy(encoder, content instanceof UByteArray ? content.jh_1 : THROW_CCE(), size);
  };
  var UByteArraySerializer_instance;
  function UByteArraySerializer_getInstance() {
    if (UByteArraySerializer_instance == null)
      new UByteArraySerializer_0();
    return UByteArraySerializer_instance;
  }
  function BooleanArraySerializer_0() {
    BooleanArraySerializer_instance = this;
    PrimitiveArraySerializer.call(this, serializer_13(BooleanCompanionObject_instance));
  }
  protoOf(BooleanArraySerializer_0).ty = function (_this__u8e3s4) {
    return _this__u8e3s4.length;
  };
  protoOf(BooleanArraySerializer_0).mq = function (_this__u8e3s4) {
    return this.ty((!(_this__u8e3s4 == null) ? isBooleanArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(BooleanArraySerializer_0).uy = function (_this__u8e3s4) {
    return new BooleanArrayBuilder(_this__u8e3s4);
  };
  protoOf(BooleanArraySerializer_0).hp = function (_this__u8e3s4) {
    return this.uy((!(_this__u8e3s4 == null) ? isBooleanArray(_this__u8e3s4) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(BooleanArraySerializer_0).xr = function () {
    return booleanArray(0);
  };
  protoOf(BooleanArraySerializer_0).vy = function (decoder, index, builder, checkIndex) {
    builder.yy(decoder.dm(this.or_1, index));
  };
  protoOf(BooleanArraySerializer_0).sp = function (decoder, index, builder, checkIndex) {
    return this.vy(decoder, index, builder instanceof BooleanArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(BooleanArraySerializer_0).yr = function (decoder, index, builder, checkIndex) {
    return this.vy(decoder, index, builder instanceof BooleanArrayBuilder ? builder : THROW_CCE(), checkIndex);
  };
  protoOf(BooleanArraySerializer_0).zy = function (encoder, content, size) {
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        encoder.in(this.or_1, i, content[i]);
      }
       while (inductionVariable < size);
  };
  protoOf(BooleanArraySerializer_0).zr = function (encoder, content, size) {
    return this.zy(encoder, (!(content == null) ? isBooleanArray(content) : false) ? content : THROW_CCE(), size);
  };
  var BooleanArraySerializer_instance;
  function BooleanArraySerializer_getInstance() {
    if (BooleanArraySerializer_instance == null)
      new BooleanArraySerializer_0();
    return BooleanArraySerializer_instance;
  }
  function CharArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.xu_1 = bufferWithData;
    this.yu_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(CharArrayBuilder).qr = function () {
    return this.yu_1;
  };
  protoOf(CharArrayBuilder).ur = function (requiredCapacity) {
    if (this.xu_1.length < requiredCapacity)
      this.xu_1 = copyOf(this.xu_1, coerceAtLeast(requiredCapacity, imul(this.xu_1.length, 2)));
  };
  protoOf(CharArrayBuilder).zu = function (c) {
    this.bs();
    var tmp = this.xu_1;
    var _unary__edvuaz = this.yu_1;
    this.yu_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(CharArrayBuilder).sr = function () {
    return copyOf(this.xu_1, this.yu_1);
  };
  function DoubleArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.gv_1 = bufferWithData;
    this.hv_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(DoubleArrayBuilder).qr = function () {
    return this.hv_1;
  };
  protoOf(DoubleArrayBuilder).ur = function (requiredCapacity) {
    if (this.gv_1.length < requiredCapacity)
      this.gv_1 = copyOf_0(this.gv_1, coerceAtLeast(requiredCapacity, imul(this.gv_1.length, 2)));
  };
  protoOf(DoubleArrayBuilder).iv = function (c) {
    this.bs();
    var tmp = this.gv_1;
    var _unary__edvuaz = this.hv_1;
    this.hv_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(DoubleArrayBuilder).sr = function () {
    return copyOf_0(this.gv_1, this.hv_1);
  };
  function FloatArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.pv_1 = bufferWithData;
    this.qv_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(FloatArrayBuilder).qr = function () {
    return this.qv_1;
  };
  protoOf(FloatArrayBuilder).ur = function (requiredCapacity) {
    if (this.pv_1.length < requiredCapacity)
      this.pv_1 = copyOf_1(this.pv_1, coerceAtLeast(requiredCapacity, imul(this.pv_1.length, 2)));
  };
  protoOf(FloatArrayBuilder).rv = function (c) {
    this.bs();
    var tmp = this.pv_1;
    var _unary__edvuaz = this.qv_1;
    this.qv_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(FloatArrayBuilder).sr = function () {
    return copyOf_1(this.pv_1, this.qv_1);
  };
  function LongArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.yv_1 = bufferWithData;
    this.zv_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(LongArrayBuilder).qr = function () {
    return this.zv_1;
  };
  protoOf(LongArrayBuilder).ur = function (requiredCapacity) {
    if (this.yv_1.length < requiredCapacity)
      this.yv_1 = copyOf_2(this.yv_1, coerceAtLeast(requiredCapacity, imul(this.yv_1.length, 2)));
  };
  protoOf(LongArrayBuilder).aw = function (c) {
    this.bs();
    var tmp = this.yv_1;
    var _unary__edvuaz = this.zv_1;
    this.zv_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(LongArrayBuilder).sr = function () {
    return copyOf_2(this.yv_1, this.zv_1);
  };
  function ULongArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.iw_1 = bufferWithData;
    this.jw_1 = _ULongArray___get_size__impl__ju6dtr(bufferWithData);
    this.ur(10);
  }
  protoOf(ULongArrayBuilder).qr = function () {
    return this.jw_1;
  };
  protoOf(ULongArrayBuilder).ur = function (requiredCapacity) {
    if (_ULongArray___get_size__impl__ju6dtr(this.iw_1) < requiredCapacity) {
      var tmp = this;
      // Inline function 'kotlin.collections.copyOf' call
      var this_0 = this.iw_1;
      var newSize = coerceAtLeast(requiredCapacity, imul(_ULongArray___get_size__impl__ju6dtr(this.iw_1), 2));
      tmp.iw_1 = _ULongArray___init__impl__twm1l3_0(copyOf_2(_ULongArray___get_storage__impl__28e64j(this_0), newSize));
    }
  };
  protoOf(ULongArrayBuilder).kw = function (c) {
    this.bs();
    var tmp = this.iw_1;
    var _unary__edvuaz = this.jw_1;
    this.jw_1 = _unary__edvuaz + 1 | 0;
    ULongArray__set_impl_z19mvh(tmp, _unary__edvuaz, c);
  };
  protoOf(ULongArrayBuilder).az = function () {
    // Inline function 'kotlin.collections.copyOf' call
    var this_0 = this.iw_1;
    var newSize = this.jw_1;
    return _ULongArray___init__impl__twm1l3_0(copyOf_2(_ULongArray___get_storage__impl__28e64j(this_0), newSize));
  };
  protoOf(ULongArrayBuilder).sr = function () {
    return new ULongArray(this.az());
  };
  function IntArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.rw_1 = bufferWithData;
    this.sw_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(IntArrayBuilder).qr = function () {
    return this.sw_1;
  };
  protoOf(IntArrayBuilder).ur = function (requiredCapacity) {
    if (this.rw_1.length < requiredCapacity)
      this.rw_1 = copyOf_3(this.rw_1, coerceAtLeast(requiredCapacity, imul(this.rw_1.length, 2)));
  };
  protoOf(IntArrayBuilder).tw = function (c) {
    this.bs();
    var tmp = this.rw_1;
    var _unary__edvuaz = this.sw_1;
    this.sw_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(IntArrayBuilder).sr = function () {
    return copyOf_3(this.rw_1, this.sw_1);
  };
  function UIntArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.bx_1 = bufferWithData;
    this.cx_1 = _UIntArray___get_size__impl__r6l8ci(bufferWithData);
    this.ur(10);
  }
  protoOf(UIntArrayBuilder).qr = function () {
    return this.cx_1;
  };
  protoOf(UIntArrayBuilder).ur = function (requiredCapacity) {
    if (_UIntArray___get_size__impl__r6l8ci(this.bx_1) < requiredCapacity) {
      var tmp = this;
      // Inline function 'kotlin.collections.copyOf' call
      var this_0 = this.bx_1;
      var newSize = coerceAtLeast(requiredCapacity, imul(_UIntArray___get_size__impl__r6l8ci(this.bx_1), 2));
      tmp.bx_1 = _UIntArray___init__impl__ghjpc6_0(copyOf_3(_UIntArray___get_storage__impl__92a0v0(this_0), newSize));
    }
  };
  protoOf(UIntArrayBuilder).dx = function (c) {
    this.bs();
    var tmp = this.bx_1;
    var _unary__edvuaz = this.cx_1;
    this.cx_1 = _unary__edvuaz + 1 | 0;
    UIntArray__set_impl_7f2zu2(tmp, _unary__edvuaz, c);
  };
  protoOf(UIntArrayBuilder).bz = function () {
    // Inline function 'kotlin.collections.copyOf' call
    var this_0 = this.bx_1;
    var newSize = this.cx_1;
    return _UIntArray___init__impl__ghjpc6_0(copyOf_3(_UIntArray___get_storage__impl__92a0v0(this_0), newSize));
  };
  protoOf(UIntArrayBuilder).sr = function () {
    return new UIntArray(this.bz());
  };
  function ShortArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.kx_1 = bufferWithData;
    this.lx_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(ShortArrayBuilder).qr = function () {
    return this.lx_1;
  };
  protoOf(ShortArrayBuilder).ur = function (requiredCapacity) {
    if (this.kx_1.length < requiredCapacity)
      this.kx_1 = copyOf_4(this.kx_1, coerceAtLeast(requiredCapacity, imul(this.kx_1.length, 2)));
  };
  protoOf(ShortArrayBuilder).mx = function (c) {
    this.bs();
    var tmp = this.kx_1;
    var _unary__edvuaz = this.lx_1;
    this.lx_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(ShortArrayBuilder).sr = function () {
    return copyOf_4(this.kx_1, this.lx_1);
  };
  function UShortArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.ux_1 = bufferWithData;
    this.vx_1 = _UShortArray___get_size__impl__jqto1b(bufferWithData);
    this.ur(10);
  }
  protoOf(UShortArrayBuilder).qr = function () {
    return this.vx_1;
  };
  protoOf(UShortArrayBuilder).ur = function (requiredCapacity) {
    if (_UShortArray___get_size__impl__jqto1b(this.ux_1) < requiredCapacity) {
      var tmp = this;
      // Inline function 'kotlin.collections.copyOf' call
      var this_0 = this.ux_1;
      var newSize = coerceAtLeast(requiredCapacity, imul(_UShortArray___get_size__impl__jqto1b(this.ux_1), 2));
      tmp.ux_1 = _UShortArray___init__impl__9b26ef_0(copyOf_4(_UShortArray___get_storage__impl__t2jpv5(this_0), newSize));
    }
  };
  protoOf(UShortArrayBuilder).wx = function (c) {
    this.bs();
    var tmp = this.ux_1;
    var _unary__edvuaz = this.vx_1;
    this.vx_1 = _unary__edvuaz + 1 | 0;
    UShortArray__set_impl_6d8whp(tmp, _unary__edvuaz, c);
  };
  protoOf(UShortArrayBuilder).cz = function () {
    // Inline function 'kotlin.collections.copyOf' call
    var this_0 = this.ux_1;
    var newSize = this.vx_1;
    return _UShortArray___init__impl__9b26ef_0(copyOf_4(_UShortArray___get_storage__impl__t2jpv5(this_0), newSize));
  };
  protoOf(UShortArrayBuilder).sr = function () {
    return new UShortArray(this.cz());
  };
  function ByteArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.dy_1 = bufferWithData;
    this.ey_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(ByteArrayBuilder).qr = function () {
    return this.ey_1;
  };
  protoOf(ByteArrayBuilder).ur = function (requiredCapacity) {
    if (this.dy_1.length < requiredCapacity)
      this.dy_1 = copyOf_5(this.dy_1, coerceAtLeast(requiredCapacity, imul(this.dy_1.length, 2)));
  };
  protoOf(ByteArrayBuilder).fy = function (c) {
    this.bs();
    var tmp = this.dy_1;
    var _unary__edvuaz = this.ey_1;
    this.ey_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(ByteArrayBuilder).sr = function () {
    return copyOf_5(this.dy_1, this.ey_1);
  };
  function UByteArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.ny_1 = bufferWithData;
    this.oy_1 = _UByteArray___get_size__impl__h6pkdv(bufferWithData);
    this.ur(10);
  }
  protoOf(UByteArrayBuilder).qr = function () {
    return this.oy_1;
  };
  protoOf(UByteArrayBuilder).ur = function (requiredCapacity) {
    if (_UByteArray___get_size__impl__h6pkdv(this.ny_1) < requiredCapacity) {
      var tmp = this;
      // Inline function 'kotlin.collections.copyOf' call
      var this_0 = this.ny_1;
      var newSize = coerceAtLeast(requiredCapacity, imul(_UByteArray___get_size__impl__h6pkdv(this.ny_1), 2));
      tmp.ny_1 = _UByteArray___init__impl__ip4y9n_0(copyOf_5(_UByteArray___get_storage__impl__d4kctt(this_0), newSize));
    }
  };
  protoOf(UByteArrayBuilder).py = function (c) {
    this.bs();
    var tmp = this.ny_1;
    var _unary__edvuaz = this.oy_1;
    this.oy_1 = _unary__edvuaz + 1 | 0;
    UByteArray__set_impl_jvcicn(tmp, _unary__edvuaz, c);
  };
  protoOf(UByteArrayBuilder).dz = function () {
    // Inline function 'kotlin.collections.copyOf' call
    var this_0 = this.ny_1;
    var newSize = this.oy_1;
    return _UByteArray___init__impl__ip4y9n_0(copyOf_5(_UByteArray___get_storage__impl__d4kctt(this_0), newSize));
  };
  protoOf(UByteArrayBuilder).sr = function () {
    return new UByteArray(this.dz());
  };
  function BooleanArrayBuilder(bufferWithData) {
    PrimitiveArrayBuilder.call(this);
    this.wy_1 = bufferWithData;
    this.xy_1 = bufferWithData.length;
    this.ur(10);
  }
  protoOf(BooleanArrayBuilder).qr = function () {
    return this.xy_1;
  };
  protoOf(BooleanArrayBuilder).ur = function (requiredCapacity) {
    if (this.wy_1.length < requiredCapacity)
      this.wy_1 = copyOf_6(this.wy_1, coerceAtLeast(requiredCapacity, imul(this.wy_1.length, 2)));
  };
  protoOf(BooleanArrayBuilder).yy = function (c) {
    this.bs();
    var tmp = this.wy_1;
    var _unary__edvuaz = this.xy_1;
    this.xy_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = c;
  };
  protoOf(BooleanArrayBuilder).sr = function () {
    return copyOf_6(this.wy_1, this.xy_1);
  };
  function get_BUILTIN_SERIALIZERS() {
    _init_properties_Primitives_kt__k0eto4();
    return BUILTIN_SERIALIZERS;
  }
  var BUILTIN_SERIALIZERS;
  function builtinSerializerOrNull(_this__u8e3s4) {
    _init_properties_Primitives_kt__k0eto4();
    var tmp = get_BUILTIN_SERIALIZERS().x1(_this__u8e3s4);
    return (tmp == null ? true : isInterface(tmp, KSerializer)) ? tmp : THROW_CCE();
  }
  function StringSerializer() {
    StringSerializer_instance = this;
    this.ez_1 = new PrimitiveSerialDescriptor_0('kotlin.String', STRING_getInstance());
  }
  protoOf(StringSerializer).si = function () {
    return this.ez_1;
  };
  protoOf(StringSerializer).fz = function (encoder, value) {
    return encoder.fn(value);
  };
  protoOf(StringSerializer).ti = function (encoder, value) {
    return this.fz(encoder, (!(value == null) ? typeof value === 'string' : false) ? value : THROW_CCE());
  };
  protoOf(StringSerializer).ui = function (decoder) {
    return decoder.wl();
  };
  var StringSerializer_instance;
  function StringSerializer_getInstance() {
    if (StringSerializer_instance == null)
      new StringSerializer();
    return StringSerializer_instance;
  }
  function CharSerializer() {
    CharSerializer_instance = this;
    this.gz_1 = new PrimitiveSerialDescriptor_0('kotlin.Char', CHAR_getInstance());
  }
  protoOf(CharSerializer).si = function () {
    return this.gz_1;
  };
  protoOf(CharSerializer).hz = function (encoder, value) {
    return encoder.en(value);
  };
  protoOf(CharSerializer).ti = function (encoder, value) {
    return this.hz(encoder, value instanceof Char ? value.e1_1 : THROW_CCE());
  };
  protoOf(CharSerializer).iz = function (decoder) {
    return decoder.vl();
  };
  protoOf(CharSerializer).ui = function (decoder) {
    return new Char(this.iz(decoder));
  };
  var CharSerializer_instance;
  function CharSerializer_getInstance() {
    if (CharSerializer_instance == null)
      new CharSerializer();
    return CharSerializer_instance;
  }
  function DoubleSerializer() {
    DoubleSerializer_instance = this;
    this.jz_1 = new PrimitiveSerialDescriptor_0('kotlin.Double', DOUBLE_getInstance());
  }
  protoOf(DoubleSerializer).si = function () {
    return this.jz_1;
  };
  protoOf(DoubleSerializer).kz = function (encoder, value) {
    return encoder.dn(value);
  };
  protoOf(DoubleSerializer).ti = function (encoder, value) {
    return this.kz(encoder, (!(value == null) ? typeof value === 'number' : false) ? value : THROW_CCE());
  };
  protoOf(DoubleSerializer).ui = function (decoder) {
    return decoder.ul();
  };
  var DoubleSerializer_instance;
  function DoubleSerializer_getInstance() {
    if (DoubleSerializer_instance == null)
      new DoubleSerializer();
    return DoubleSerializer_instance;
  }
  function FloatSerializer() {
    FloatSerializer_instance = this;
    this.lz_1 = new PrimitiveSerialDescriptor_0('kotlin.Float', FLOAT_getInstance());
  }
  protoOf(FloatSerializer).si = function () {
    return this.lz_1;
  };
  protoOf(FloatSerializer).mz = function (encoder, value) {
    return encoder.cn(value);
  };
  protoOf(FloatSerializer).ti = function (encoder, value) {
    return this.mz(encoder, (!(value == null) ? typeof value === 'number' : false) ? value : THROW_CCE());
  };
  protoOf(FloatSerializer).ui = function (decoder) {
    return decoder.tl();
  };
  var FloatSerializer_instance;
  function FloatSerializer_getInstance() {
    if (FloatSerializer_instance == null)
      new FloatSerializer();
    return FloatSerializer_instance;
  }
  function LongSerializer() {
    LongSerializer_instance = this;
    this.nz_1 = new PrimitiveSerialDescriptor_0('kotlin.Long', LONG_getInstance());
  }
  protoOf(LongSerializer).si = function () {
    return this.nz_1;
  };
  protoOf(LongSerializer).oz = function (encoder, value) {
    return encoder.bn(value);
  };
  protoOf(LongSerializer).ti = function (encoder, value) {
    return this.oz(encoder, value instanceof Long ? value : THROW_CCE());
  };
  protoOf(LongSerializer).ui = function (decoder) {
    return decoder.sl();
  };
  var LongSerializer_instance;
  function LongSerializer_getInstance() {
    if (LongSerializer_instance == null)
      new LongSerializer();
    return LongSerializer_instance;
  }
  function IntSerializer() {
    IntSerializer_instance = this;
    this.pz_1 = new PrimitiveSerialDescriptor_0('kotlin.Int', INT_getInstance());
  }
  protoOf(IntSerializer).si = function () {
    return this.pz_1;
  };
  protoOf(IntSerializer).qz = function (encoder, value) {
    return encoder.an(value);
  };
  protoOf(IntSerializer).ti = function (encoder, value) {
    return this.qz(encoder, (!(value == null) ? typeof value === 'number' : false) ? value : THROW_CCE());
  };
  protoOf(IntSerializer).ui = function (decoder) {
    return decoder.rl();
  };
  var IntSerializer_instance;
  function IntSerializer_getInstance() {
    if (IntSerializer_instance == null)
      new IntSerializer();
    return IntSerializer_instance;
  }
  function ShortSerializer() {
    ShortSerializer_instance = this;
    this.rz_1 = new PrimitiveSerialDescriptor_0('kotlin.Short', SHORT_getInstance());
  }
  protoOf(ShortSerializer).si = function () {
    return this.rz_1;
  };
  protoOf(ShortSerializer).sz = function (encoder, value) {
    return encoder.zm(value);
  };
  protoOf(ShortSerializer).ti = function (encoder, value) {
    return this.sz(encoder, (!(value == null) ? typeof value === 'number' : false) ? value : THROW_CCE());
  };
  protoOf(ShortSerializer).ui = function (decoder) {
    return decoder.ql();
  };
  var ShortSerializer_instance;
  function ShortSerializer_getInstance() {
    if (ShortSerializer_instance == null)
      new ShortSerializer();
    return ShortSerializer_instance;
  }
  function ByteSerializer() {
    ByteSerializer_instance = this;
    this.tz_1 = new PrimitiveSerialDescriptor_0('kotlin.Byte', BYTE_getInstance());
  }
  protoOf(ByteSerializer).si = function () {
    return this.tz_1;
  };
  protoOf(ByteSerializer).uz = function (encoder, value) {
    return encoder.ym(value);
  };
  protoOf(ByteSerializer).ti = function (encoder, value) {
    return this.uz(encoder, (!(value == null) ? typeof value === 'number' : false) ? value : THROW_CCE());
  };
  protoOf(ByteSerializer).ui = function (decoder) {
    return decoder.pl();
  };
  var ByteSerializer_instance;
  function ByteSerializer_getInstance() {
    if (ByteSerializer_instance == null)
      new ByteSerializer();
    return ByteSerializer_instance;
  }
  function BooleanSerializer() {
    BooleanSerializer_instance = this;
    this.vz_1 = new PrimitiveSerialDescriptor_0('kotlin.Boolean', BOOLEAN_getInstance());
  }
  protoOf(BooleanSerializer).si = function () {
    return this.vz_1;
  };
  protoOf(BooleanSerializer).wz = function (encoder, value) {
    return encoder.xm(value);
  };
  protoOf(BooleanSerializer).ti = function (encoder, value) {
    return this.wz(encoder, (!(value == null) ? typeof value === 'boolean' : false) ? value : THROW_CCE());
  };
  protoOf(BooleanSerializer).ui = function (decoder) {
    return decoder.ol();
  };
  var BooleanSerializer_instance;
  function BooleanSerializer_getInstance() {
    if (BooleanSerializer_instance == null)
      new BooleanSerializer();
    return BooleanSerializer_instance;
  }
  function UnitSerializer() {
    UnitSerializer_instance = this;
    this.xz_1 = new ObjectSerializer('kotlin.Unit', Unit_instance);
  }
  protoOf(UnitSerializer).si = function () {
    return this.xz_1.si();
  };
  protoOf(UnitSerializer).yz = function (encoder, value) {
    this.xz_1.ij(encoder, Unit_instance);
  };
  protoOf(UnitSerializer).ti = function (encoder, value) {
    return this.yz(encoder, value instanceof Unit ? value : THROW_CCE());
  };
  protoOf(UnitSerializer).zz = function (decoder) {
    this.xz_1.ui(decoder);
  };
  protoOf(UnitSerializer).ui = function (decoder) {
    this.zz(decoder);
    return Unit_instance;
  };
  var UnitSerializer_instance;
  function UnitSerializer_getInstance() {
    if (UnitSerializer_instance == null)
      new UnitSerializer();
    return UnitSerializer_instance;
  }
  function error_0($this) {
    throw IllegalStateException_init_$Create$('Primitive descriptor does not have elements');
  }
  function PrimitiveSerialDescriptor_0(serialName, kind) {
    this.a10_1 = serialName;
    this.b10_1 = kind;
  }
  protoOf(PrimitiveSerialDescriptor_0).tj = function () {
    return this.a10_1;
  };
  protoOf(PrimitiveSerialDescriptor_0).fk = function () {
    return this.b10_1;
  };
  protoOf(PrimitiveSerialDescriptor_0).hk = function () {
    return 0;
  };
  protoOf(PrimitiveSerialDescriptor_0).jk = function (index) {
    error_0(this);
  };
  protoOf(PrimitiveSerialDescriptor_0).kk = function (name) {
    error_0(this);
  };
  protoOf(PrimitiveSerialDescriptor_0).nk = function (index) {
    error_0(this);
  };
  protoOf(PrimitiveSerialDescriptor_0).mk = function (index) {
    error_0(this);
  };
  protoOf(PrimitiveSerialDescriptor_0).lk = function (index) {
    error_0(this);
  };
  protoOf(PrimitiveSerialDescriptor_0).toString = function () {
    return 'PrimitiveDescriptor(' + this.a10_1 + ')';
  };
  protoOf(PrimitiveSerialDescriptor_0).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof PrimitiveSerialDescriptor_0))
      return false;
    if (this.a10_1 === other.a10_1 && equals(this.b10_1, other.b10_1))
      return true;
    return false;
  };
  protoOf(PrimitiveSerialDescriptor_0).hashCode = function () {
    return getStringHashCode(this.a10_1) + imul(31, this.b10_1.hashCode()) | 0;
  };
  function PrimitiveDescriptorSafe(serialName, kind) {
    _init_properties_Primitives_kt__k0eto4();
    checkName(serialName);
    return new PrimitiveSerialDescriptor_0(serialName, kind);
  }
  function checkName(serialName) {
    _init_properties_Primitives_kt__k0eto4();
    var values = get_BUILTIN_SERIALIZERS().z1();
    var _iterator__ex2g4s = values.j();
    while (_iterator__ex2g4s.k()) {
      var primitive = _iterator__ex2g4s.l();
      var primitiveName = primitive.si().tj();
      if (serialName === primitiveName) {
        throw IllegalArgumentException_init_$Create$(trimIndent('\n                The name of serial descriptor should uniquely identify associated serializer.\n                For serial name ' + serialName + ' there already exists ' + getKClassFromExpression(primitive).f9() + '.\n                Please refer to SerialDescriptor documentation for additional information.\n            '));
      }
    }
  }
  var properties_initialized_Primitives_kt_6dpii6;
  function _init_properties_Primitives_kt__k0eto4() {
    if (!properties_initialized_Primitives_kt_6dpii6) {
      properties_initialized_Primitives_kt_6dpii6 = true;
      BUILTIN_SERIALIZERS = initBuiltins();
    }
  }
  function NamedValueDecoder() {
    TaggedDecoder.call(this);
  }
  protoOf(NamedValueDecoder).e10 = function (_this__u8e3s4, index) {
    return this.g10(this.f10(_this__u8e3s4, index));
  };
  protoOf(NamedValueDecoder).g10 = function (nestedName) {
    var tmp0_elvis_lhs = this.j10();
    return this.k10(tmp0_elvis_lhs == null ? '' : tmp0_elvis_lhs, nestedName);
  };
  protoOf(NamedValueDecoder).f10 = function (descriptor, index) {
    return descriptor.jk(index);
  };
  protoOf(NamedValueDecoder).k10 = function (parentName, childName) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(parentName) === 0) {
      tmp = childName;
    } else {
      tmp = parentName + '.' + childName;
    }
    return tmp;
  };
  protoOf(NamedValueDecoder).l10 = function () {
    return this.h10_1.n() ? '$' : joinToString(this.h10_1, '.', '$.');
  };
  function tagBlock($this, tag, block) {
    $this.z10(tag);
    var r = block();
    if (!$this.i10_1) {
      $this.a11();
    }
    $this.i10_1 = false;
    return r;
  }
  function TaggedDecoder$decodeSerializableElement$lambda(this$0, $deserializer, $previousValue) {
    return function () {
      return this$0.zl($deserializer, $previousValue);
    };
  }
  function TaggedDecoder$decodeNullableSerializableElement$lambda(this$0, $deserializer, $previousValue) {
    return function () {
      // Inline function 'kotlinx.serialization.encoding.decodeIfNullable' call
      var this_0 = this$0;
      var isNullabilitySupported = $deserializer.si().bk();
      var tmp;
      if (isNullabilitySupported || this_0.ml()) {
        // Inline function 'kotlinx.serialization.internal.TaggedDecoder.decodeNullableSerializableElement.<anonymous>.<anonymous>' call
        tmp = this$0.zl($deserializer, $previousValue);
      } else {
        tmp = this_0.nl();
      }
      return tmp;
    };
  }
  function TaggedDecoder() {
    var tmp = this;
    // Inline function 'kotlin.collections.arrayListOf' call
    tmp.h10_1 = ArrayList_init_$Create$_0();
    this.i10_1 = false;
  }
  protoOf(TaggedDecoder).qm = function () {
    return EmptySerializersModule_0();
  };
  protoOf(TaggedDecoder).m10 = function (tag) {
    throw SerializationException_init_$Create$_0(toString(getKClassFromExpression(this)) + " can't retrieve untyped values");
  };
  protoOf(TaggedDecoder).n10 = function (tag) {
    return true;
  };
  protoOf(TaggedDecoder).o10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'boolean' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).p10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).q10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).r10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).s10 = function (tag) {
    var tmp = this.m10(tag);
    return tmp instanceof Long ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).t10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).u10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).v10 = function (tag) {
    var tmp = this.m10(tag);
    return tmp instanceof Char ? tmp.e1_1 : THROW_CCE();
  };
  protoOf(TaggedDecoder).w10 = function (tag) {
    var tmp = this.m10(tag);
    return typeof tmp === 'string' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).x10 = function (tag, enumDescriptor) {
    var tmp = this.m10(tag);
    return typeof tmp === 'number' ? tmp : THROW_CCE();
  };
  protoOf(TaggedDecoder).y10 = function (tag, inlineDescriptor) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.serialization.internal.TaggedDecoder.decodeTaggedInline.<anonymous>' call
    this.z10(tag);
    return this;
  };
  protoOf(TaggedDecoder).zl = function (deserializer, previousValue) {
    return this.am(deserializer);
  };
  protoOf(TaggedDecoder).yl = function (descriptor) {
    return this.y10(this.a11(), descriptor);
  };
  protoOf(TaggedDecoder).ml = function () {
    var tmp0_elvis_lhs = this.j10();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var currentTag = tmp;
    return this.n10(currentTag);
  };
  protoOf(TaggedDecoder).nl = function () {
    return null;
  };
  protoOf(TaggedDecoder).ol = function () {
    return this.o10(this.a11());
  };
  protoOf(TaggedDecoder).pl = function () {
    return this.p10(this.a11());
  };
  protoOf(TaggedDecoder).ql = function () {
    return this.q10(this.a11());
  };
  protoOf(TaggedDecoder).rl = function () {
    return this.r10(this.a11());
  };
  protoOf(TaggedDecoder).sl = function () {
    return this.s10(this.a11());
  };
  protoOf(TaggedDecoder).tl = function () {
    return this.t10(this.a11());
  };
  protoOf(TaggedDecoder).ul = function () {
    return this.u10(this.a11());
  };
  protoOf(TaggedDecoder).vl = function () {
    return this.v10(this.a11());
  };
  protoOf(TaggedDecoder).wl = function () {
    return this.w10(this.a11());
  };
  protoOf(TaggedDecoder).xl = function (enumDescriptor) {
    return this.x10(this.a11(), enumDescriptor);
  };
  protoOf(TaggedDecoder).bm = function (descriptor) {
    return this;
  };
  protoOf(TaggedDecoder).cm = function (descriptor) {
  };
  protoOf(TaggedDecoder).dm = function (descriptor, index) {
    return this.o10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).em = function (descriptor, index) {
    return this.p10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).fm = function (descriptor, index) {
    return this.q10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).gm = function (descriptor, index) {
    return this.r10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).hm = function (descriptor, index) {
    return this.s10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).im = function (descriptor, index) {
    return this.t10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).jm = function (descriptor, index) {
    return this.u10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).km = function (descriptor, index) {
    return this.v10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).lm = function (descriptor, index) {
    return this.w10(this.e10(descriptor, index));
  };
  protoOf(TaggedDecoder).mm = function (descriptor, index) {
    return this.y10(this.e10(descriptor, index), descriptor.mk(index));
  };
  protoOf(TaggedDecoder).nm = function (descriptor, index, deserializer, previousValue) {
    var tmp = this.e10(descriptor, index);
    return tagBlock(this, tmp, TaggedDecoder$decodeSerializableElement$lambda(this, deserializer, previousValue));
  };
  protoOf(TaggedDecoder).pm = function (descriptor, index, deserializer, previousValue) {
    var tmp = this.e10(descriptor, index);
    return tagBlock(this, tmp, TaggedDecoder$decodeNullableSerializableElement$lambda(this, deserializer, previousValue));
  };
  protoOf(TaggedDecoder).j10 = function () {
    return lastOrNull(this.h10_1);
  };
  protoOf(TaggedDecoder).z10 = function (name) {
    this.h10_1.e(name);
  };
  protoOf(TaggedDecoder).a11 = function () {
    var r = this.h10_1.a2(get_lastIndex_0(this.h10_1));
    this.i10_1 = true;
    return r;
  };
  function get_NULL() {
    _init_properties_Tuples_kt__dz0qyd();
    return NULL;
  }
  var NULL;
  function MapEntry(key, value) {
    this.b11_1 = key;
    this.c11_1 = value;
  }
  protoOf(MapEntry).t1 = function () {
    return this.b11_1;
  };
  protoOf(MapEntry).u1 = function () {
    return this.c11_1;
  };
  protoOf(MapEntry).toString = function () {
    return 'MapEntry(key=' + toString_0(this.b11_1) + ', value=' + toString_0(this.c11_1) + ')';
  };
  protoOf(MapEntry).hashCode = function () {
    var result = this.b11_1 == null ? 0 : hashCode(this.b11_1);
    result = imul(result, 31) + (this.c11_1 == null ? 0 : hashCode(this.c11_1)) | 0;
    return result;
  };
  protoOf(MapEntry).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MapEntry))
      return false;
    var tmp0_other_with_cast = other instanceof MapEntry ? other : THROW_CCE();
    if (!equals(this.b11_1, tmp0_other_with_cast.b11_1))
      return false;
    if (!equals(this.c11_1, tmp0_other_with_cast.c11_1))
      return false;
    return true;
  };
  function MapEntrySerializer$descriptor$lambda($keySerializer, $valueSerializer) {
    return function ($this$buildSerialDescriptor) {
      $this$buildSerialDescriptor.gj('key', $keySerializer.si());
      $this$buildSerialDescriptor.gj('value', $valueSerializer.si());
      return Unit_instance;
    };
  }
  function MapEntrySerializer_0(keySerializer, valueSerializer) {
    KeyValueSerializer.call(this, keySerializer, valueSerializer);
    var tmp = this;
    var tmp_0 = MAP_getInstance();
    tmp.f11_1 = buildSerialDescriptor('kotlin.collections.Map.Entry', tmp_0, [], MapEntrySerializer$descriptor$lambda(keySerializer, valueSerializer));
  }
  protoOf(MapEntrySerializer_0).si = function () {
    return this.f11_1;
  };
  protoOf(MapEntrySerializer_0).g11 = function (_this__u8e3s4) {
    return _this__u8e3s4.t1();
  };
  protoOf(MapEntrySerializer_0).h11 = function (_this__u8e3s4) {
    return this.g11((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Entry) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(MapEntrySerializer_0).i11 = function (_this__u8e3s4) {
    return _this__u8e3s4.u1();
  };
  protoOf(MapEntrySerializer_0).j11 = function (_this__u8e3s4) {
    return this.i11((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Entry) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(MapEntrySerializer_0).k11 = function (key, value) {
    return new MapEntry(key, value);
  };
  function PairSerializer$descriptor$lambda($keySerializer, $valueSerializer) {
    return function ($this$buildClassSerialDescriptor) {
      $this$buildClassSerialDescriptor.gj('first', $keySerializer.si());
      $this$buildClassSerialDescriptor.gj('second', $valueSerializer.si());
      return Unit_instance;
    };
  }
  function PairSerializer_0(keySerializer, valueSerializer) {
    KeyValueSerializer.call(this, keySerializer, valueSerializer);
    var tmp = this;
    tmp.q11_1 = buildClassSerialDescriptor('kotlin.Pair', [], PairSerializer$descriptor$lambda(keySerializer, valueSerializer));
  }
  protoOf(PairSerializer_0).si = function () {
    return this.q11_1;
  };
  protoOf(PairSerializer_0).r11 = function (_this__u8e3s4) {
    return _this__u8e3s4.qc_1;
  };
  protoOf(PairSerializer_0).h11 = function (_this__u8e3s4) {
    return this.r11(_this__u8e3s4 instanceof Pair ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(PairSerializer_0).s11 = function (_this__u8e3s4) {
    return _this__u8e3s4.rc_1;
  };
  protoOf(PairSerializer_0).j11 = function (_this__u8e3s4) {
    return this.s11(_this__u8e3s4 instanceof Pair ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(PairSerializer_0).k11 = function (key, value) {
    return to(key, value);
  };
  function decodeSequentially_1($this, composite) {
    var a = composite.om($this.w11_1, 0, $this.t11_1);
    var b = composite.om($this.w11_1, 1, $this.u11_1);
    var c = composite.om($this.w11_1, 2, $this.v11_1);
    composite.cm($this.w11_1);
    return new Triple(a, b, c);
  }
  function decodeStructure($this, composite) {
    var a = get_NULL();
    var b = get_NULL();
    var c = get_NULL();
    mainLoop: while (true) {
      var index = composite.sm($this.w11_1);
      switch (index) {
        case -1:
          break mainLoop;
        case 0:
          a = composite.om($this.w11_1, 0, $this.t11_1);
          break;
        case 1:
          b = composite.om($this.w11_1, 1, $this.u11_1);
          break;
        case 2:
          c = composite.om($this.w11_1, 2, $this.v11_1);
          break;
        default:
          throw SerializationException_init_$Create$_0('Unexpected index ' + index);
      }
    }
    composite.cm($this.w11_1);
    if (a === get_NULL())
      throw SerializationException_init_$Create$_0("Element 'first' is missing");
    if (b === get_NULL())
      throw SerializationException_init_$Create$_0("Element 'second' is missing");
    if (c === get_NULL())
      throw SerializationException_init_$Create$_0("Element 'third' is missing");
    var tmp = (a == null ? true : !(a == null)) ? a : THROW_CCE();
    var tmp_0 = (b == null ? true : !(b == null)) ? b : THROW_CCE();
    return new Triple(tmp, tmp_0, (c == null ? true : !(c == null)) ? c : THROW_CCE());
  }
  function TripleSerializer$descriptor$lambda(this$0) {
    return function ($this$buildClassSerialDescriptor) {
      $this$buildClassSerialDescriptor.gj('first', this$0.t11_1.si());
      $this$buildClassSerialDescriptor.gj('second', this$0.u11_1.si());
      $this$buildClassSerialDescriptor.gj('third', this$0.v11_1.si());
      return Unit_instance;
    };
  }
  function TripleSerializer_0(aSerializer, bSerializer, cSerializer) {
    this.t11_1 = aSerializer;
    this.u11_1 = bSerializer;
    this.v11_1 = cSerializer;
    var tmp = this;
    tmp.w11_1 = buildClassSerialDescriptor('kotlin.Triple', [], TripleSerializer$descriptor$lambda(this));
  }
  protoOf(TripleSerializer_0).si = function () {
    return this.w11_1;
  };
  protoOf(TripleSerializer_0).x11 = function (encoder, value) {
    var structuredEncoder = encoder.bm(this.w11_1);
    structuredEncoder.sn(this.w11_1, 0, this.t11_1, value.og_1);
    structuredEncoder.sn(this.w11_1, 1, this.u11_1, value.pg_1);
    structuredEncoder.sn(this.w11_1, 2, this.v11_1, value.qg_1);
    structuredEncoder.cm(this.w11_1);
  };
  protoOf(TripleSerializer_0).ti = function (encoder, value) {
    return this.x11(encoder, value instanceof Triple ? value : THROW_CCE());
  };
  protoOf(TripleSerializer_0).ui = function (decoder) {
    var composite = decoder.bm(this.w11_1);
    if (composite.rm()) {
      return decodeSequentially_1(this, composite);
    }
    return decodeStructure(this, composite);
  };
  function KeyValueSerializer(keySerializer, valueSerializer) {
    this.l11_1 = keySerializer;
    this.m11_1 = valueSerializer;
  }
  protoOf(KeyValueSerializer).n11 = function (encoder, value) {
    var structuredEncoder = encoder.bm(this.si());
    structuredEncoder.sn(this.si(), 0, this.l11_1, this.h11(value));
    structuredEncoder.sn(this.si(), 1, this.m11_1, this.j11(value));
    structuredEncoder.cm(this.si());
  };
  protoOf(KeyValueSerializer).ti = function (encoder, value) {
    return this.n11(encoder, (value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  protoOf(KeyValueSerializer).ui = function (decoder) {
    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call
    var descriptor = this.si();
    var composite = decoder.bm(descriptor);
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlinx.serialization.internal.KeyValueSerializer.deserialize.<anonymous>' call
      if (composite.rm()) {
        var key = composite.om(this.si(), 0, this.l11_1);
        var value = composite.om(this.si(), 1, this.m11_1);
        tmp$ret$0 = this.k11(key, value);
        break $l$block;
      }
      var key_0 = get_NULL();
      var value_0 = get_NULL();
      mainLoop: while (true) {
        var idx = composite.sm(this.si());
        switch (idx) {
          case -1:
            break mainLoop;
          case 0:
            key_0 = composite.om(this.si(), 0, this.l11_1);
            break;
          case 1:
            value_0 = composite.om(this.si(), 1, this.m11_1);
            break;
          default:
            throw SerializationException_init_$Create$_0('Invalid index: ' + idx);
        }
      }
      if (key_0 === get_NULL())
        throw SerializationException_init_$Create$_0("Element 'key' is missing");
      if (value_0 === get_NULL())
        throw SerializationException_init_$Create$_0("Element 'value' is missing");
      var tmp = (key_0 == null ? true : !(key_0 == null)) ? key_0 : THROW_CCE();
      tmp$ret$0 = this.k11(tmp, (value_0 == null ? true : !(value_0 == null)) ? value_0 : THROW_CCE());
    }
    var result = tmp$ret$0;
    composite.cm(descriptor);
    return result;
  };
  var properties_initialized_Tuples_kt_3vs7ar;
  function _init_properties_Tuples_kt__dz0qyd() {
    if (!properties_initialized_Tuples_kt_3vs7ar) {
      properties_initialized_Tuples_kt_3vs7ar = true;
      NULL = new Object();
    }
  }
  function ULongSerializer() {
    ULongSerializer_instance = this;
    this.y11_1 = InlinePrimitiveDescriptor('kotlin.ULong', serializer_5(Companion_getInstance_2()));
  }
  protoOf(ULongSerializer).si = function () {
    return this.y11_1;
  };
  protoOf(ULongSerializer).z11 = function (encoder, value) {
    var tmp = encoder.hn(this.y11_1);
    // Inline function 'kotlin.ULong.toLong' call
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(value);
    tmp.bn(tmp$ret$0);
  };
  protoOf(ULongSerializer).ti = function (encoder, value) {
    return this.z11(encoder, value instanceof ULong ? value.ai_1 : THROW_CCE());
  };
  protoOf(ULongSerializer).a12 = function (decoder) {
    // Inline function 'kotlin.toULong' call
    var this_0 = decoder.yl(this.y11_1).sl();
    return _ULong___init__impl__c78o9k(this_0);
  };
  protoOf(ULongSerializer).ui = function (decoder) {
    return new ULong(this.a12(decoder));
  };
  var ULongSerializer_instance;
  function ULongSerializer_getInstance() {
    if (ULongSerializer_instance == null)
      new ULongSerializer();
    return ULongSerializer_instance;
  }
  function UIntSerializer() {
    UIntSerializer_instance = this;
    this.b12_1 = InlinePrimitiveDescriptor('kotlin.UInt', serializer_7(IntCompanionObject_instance));
  }
  protoOf(UIntSerializer).si = function () {
    return this.b12_1;
  };
  protoOf(UIntSerializer).c12 = function (encoder, value) {
    var tmp = encoder.hn(this.b12_1);
    // Inline function 'kotlin.UInt.toInt' call
    var tmp$ret$0 = _UInt___get_data__impl__f0vqqw(value);
    tmp.an(tmp$ret$0);
  };
  protoOf(UIntSerializer).ti = function (encoder, value) {
    return this.c12(encoder, value instanceof UInt ? value.ph_1 : THROW_CCE());
  };
  protoOf(UIntSerializer).d12 = function (decoder) {
    // Inline function 'kotlin.toUInt' call
    var this_0 = decoder.yl(this.b12_1).rl();
    return _UInt___init__impl__l7qpdl(this_0);
  };
  protoOf(UIntSerializer).ui = function (decoder) {
    return new UInt(this.d12(decoder));
  };
  var UIntSerializer_instance;
  function UIntSerializer_getInstance() {
    if (UIntSerializer_instance == null)
      new UIntSerializer();
    return UIntSerializer_instance;
  }
  function UShortSerializer() {
    UShortSerializer_instance = this;
    this.e12_1 = InlinePrimitiveDescriptor('kotlin.UShort', serializer_9(ShortCompanionObject_instance));
  }
  protoOf(UShortSerializer).si = function () {
    return this.e12_1;
  };
  protoOf(UShortSerializer).f12 = function (encoder, value) {
    var tmp = encoder.hn(this.e12_1);
    // Inline function 'kotlin.UShort.toShort' call
    var tmp$ret$0 = _UShort___get_data__impl__g0245(value);
    tmp.zm(tmp$ret$0);
  };
  protoOf(UShortSerializer).ti = function (encoder, value) {
    return this.f12(encoder, value instanceof UShort ? value.li_1 : THROW_CCE());
  };
  protoOf(UShortSerializer).g12 = function (decoder) {
    // Inline function 'kotlin.toUShort' call
    var this_0 = decoder.yl(this.e12_1).ql();
    return _UShort___init__impl__jigrne(this_0);
  };
  protoOf(UShortSerializer).ui = function (decoder) {
    return new UShort(this.g12(decoder));
  };
  var UShortSerializer_instance;
  function UShortSerializer_getInstance() {
    if (UShortSerializer_instance == null)
      new UShortSerializer();
    return UShortSerializer_instance;
  }
  function UByteSerializer() {
    UByteSerializer_instance = this;
    this.h12_1 = InlinePrimitiveDescriptor('kotlin.UByte', serializer_11(ByteCompanionObject_instance));
  }
  protoOf(UByteSerializer).si = function () {
    return this.h12_1;
  };
  protoOf(UByteSerializer).i12 = function (encoder, value) {
    var tmp = encoder.hn(this.h12_1);
    // Inline function 'kotlin.UByte.toByte' call
    var tmp$ret$0 = _UByte___get_data__impl__jof9qr(value);
    tmp.ym(tmp$ret$0);
  };
  protoOf(UByteSerializer).ti = function (encoder, value) {
    return this.i12(encoder, value instanceof UByte ? value.eh_1 : THROW_CCE());
  };
  protoOf(UByteSerializer).j12 = function (decoder) {
    // Inline function 'kotlin.toUByte' call
    var this_0 = decoder.yl(this.h12_1).pl();
    return _UByte___init__impl__g9hnc4(this_0);
  };
  protoOf(UByteSerializer).ui = function (decoder) {
    return new UByte(this.j12(decoder));
  };
  var UByteSerializer_instance;
  function UByteSerializer_getInstance() {
    if (UByteSerializer_instance == null)
      new UByteSerializer();
    return UByteSerializer_instance;
  }
  function PolymorphicModuleBuilder(baseClass, baseSerializer) {
    baseSerializer = baseSerializer === VOID ? null : baseSerializer;
    this.k12_1 = baseClass;
    this.l12_1 = baseSerializer;
    var tmp = this;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp.m12_1 = ArrayList_init_$Create$_0();
    this.n12_1 = null;
    this.o12_1 = null;
  }
  protoOf(PolymorphicModuleBuilder).p12 = function (subclass, serializer) {
    this.m12_1.e(to(subclass, serializer));
  };
  protoOf(PolymorphicModuleBuilder).q12 = function (builder) {
    if (!(this.l12_1 == null)) {
      builder.x12(this.k12_1, this.k12_1, this.l12_1);
    }
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = this.m12_1.j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'kotlinx.serialization.modules.PolymorphicModuleBuilder.buildTo.<anonymous>' call
      var kclass = element.sc();
      var serializer = element.tc();
      var tmp = isInterface(kclass, KClass) ? kclass : THROW_CCE();
      // Inline function 'kotlinx.serialization.internal.cast' call
      var tmp$ret$0 = isInterface(serializer, KSerializer) ? serializer : THROW_CCE();
      builder.x12(this.k12_1, tmp, tmp$ret$0);
    }
    var defaultSerializer = this.n12_1;
    if (!(defaultSerializer == null)) {
      builder.y12(this.k12_1, defaultSerializer, false);
    }
    var defaultDeserializer = this.o12_1;
    if (!(defaultDeserializer == null)) {
      builder.z12(this.k12_1, defaultDeserializer, false);
    }
  };
  function get_EmptySerializersModuleLegacyJs() {
    _init_properties_SerializersModule_kt__u78ha3();
    return EmptySerializersModule;
  }
  var EmptySerializersModule;
  function SerializersModule() {
  }
  protoOf(SerializersModule).xj = function (kClass, typeArgumentsSerializers, $super) {
    typeArgumentsSerializers = typeArgumentsSerializers === VOID ? emptyList() : typeArgumentsSerializers;
    return $super === VOID ? this.yj(kClass, typeArgumentsSerializers) : $super.yj.call(this, kClass, typeArgumentsSerializers);
  };
  function SerialModuleImpl(class2ContextualFactory, polyBase2Serializers, polyBase2DefaultSerializerProvider, polyBase2NamedSerializers, polyBase2DefaultDeserializerProvider, hasInterfaceContextualSerializers) {
    SerializersModule.call(this);
    this.b13_1 = class2ContextualFactory;
    this.c13_1 = polyBase2Serializers;
    this.d13_1 = polyBase2DefaultSerializerProvider;
    this.e13_1 = polyBase2NamedSerializers;
    this.f13_1 = polyBase2DefaultDeserializerProvider;
    this.g13_1 = hasInterfaceContextualSerializers;
  }
  protoOf(SerialModuleImpl).wj = function () {
    return this.g13_1;
  };
  protoOf(SerialModuleImpl).ao = function (baseClass, value) {
    if (!baseClass.g9(value))
      return null;
    var tmp0_safe_receiver = this.c13_1.x1(baseClass);
    var tmp = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.x1(getKClassFromExpression(value));
    var registered = (!(tmp == null) ? isInterface(tmp, SerializationStrategy) : false) ? tmp : null;
    if (!(registered == null))
      return registered;
    var tmp_0 = this.d13_1.x1(baseClass);
    var tmp1_safe_receiver = (!(tmp_0 == null) ? typeof tmp_0 === 'function' : false) ? tmp_0 : null;
    return tmp1_safe_receiver == null ? null : tmp1_safe_receiver(value);
  };
  protoOf(SerialModuleImpl).zn = function (baseClass, serializedClassName) {
    var tmp0_safe_receiver = this.e13_1.x1(baseClass);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.collections.get' call
      tmp = (isInterface(tmp0_safe_receiver, KtMap) ? tmp0_safe_receiver : THROW_CCE()).x1(serializedClassName);
    }
    var tmp_0 = tmp;
    var registered = (!(tmp_0 == null) ? isInterface(tmp_0, KSerializer) : false) ? tmp_0 : null;
    if (!(registered == null))
      return registered;
    var tmp_1 = this.f13_1.x1(baseClass);
    var tmp1_safe_receiver = (!(tmp_1 == null) ? typeof tmp_1 === 'function' : false) ? tmp_1 : null;
    return tmp1_safe_receiver == null ? null : tmp1_safe_receiver(serializedClassName);
  };
  protoOf(SerialModuleImpl).yj = function (kClass, typeArgumentsSerializers) {
    var tmp0_safe_receiver = this.b13_1.x1(kClass);
    var tmp = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.h13(typeArgumentsSerializers);
    return (tmp == null ? true : isInterface(tmp, KSerializer)) ? tmp : null;
  };
  protoOf(SerialModuleImpl).a13 = function (collector) {
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = this.b13_1.r().j();
    while (tmp0_iterator.k()) {
      var element = tmp0_iterator.l();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var kclass = element.t1();
      // Inline function 'kotlin.collections.component2' call
      var serial = element.u1();
      if (serial instanceof Argless) {
        var tmp = isInterface(kclass, KClass) ? kclass : THROW_CCE();
        var tmp_0 = serial.k13_1;
        collector.l13(tmp, isInterface(tmp_0, KSerializer) ? tmp_0 : THROW_CCE());
      } else {
        if (serial instanceof WithTypeArguments) {
          collector.j13(kclass, serial.i13_1);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator_0 = this.c13_1.r().j();
    while (tmp0_iterator_0.k()) {
      var element_0 = tmp0_iterator_0.l();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var baseClass = element_0.t1();
      // Inline function 'kotlin.collections.component2' call
      var classMap = element_0.u1();
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator_1 = classMap.r().j();
      while (tmp0_iterator_1.k()) {
        var element_1 = tmp0_iterator_1.l();
        // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var actualClass = element_1.t1();
        // Inline function 'kotlin.collections.component2' call
        var serializer = element_1.u1();
        var tmp_1 = isInterface(baseClass, KClass) ? baseClass : THROW_CCE();
        var tmp_2 = isInterface(actualClass, KClass) ? actualClass : THROW_CCE();
        // Inline function 'kotlinx.serialization.internal.cast' call
        var tmp$ret$9 = isInterface(serializer, KSerializer) ? serializer : THROW_CCE();
        collector.m13(tmp_1, tmp_2, tmp$ret$9);
      }
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator_2 = this.d13_1.r().j();
    while (tmp0_iterator_2.k()) {
      var element_2 = tmp0_iterator_2.l();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var baseClass_0 = element_2.t1();
      // Inline function 'kotlin.collections.component2' call
      var provider = element_2.u1();
      var tmp_3 = isInterface(baseClass_0, KClass) ? baseClass_0 : THROW_CCE();
      collector.n13(tmp_3, typeof provider === 'function' ? provider : THROW_CCE());
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator_3 = this.f13_1.r().j();
    while (tmp0_iterator_3.k()) {
      var element_3 = tmp0_iterator_3.l();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var baseClass_1 = element_3.t1();
      // Inline function 'kotlin.collections.component2' call
      var provider_0 = element_3.u1();
      var tmp_4 = isInterface(baseClass_1, KClass) ? baseClass_1 : THROW_CCE();
      collector.o13(tmp_4, typeof provider_0 === 'function' ? provider_0 : THROW_CCE());
    }
  };
  function Argless(serializer) {
    ContextualProvider.call(this);
    this.k13_1 = serializer;
  }
  protoOf(Argless).h13 = function (typeArgumentsSerializers) {
    return this.k13_1;
  };
  protoOf(Argless).equals = function (other) {
    var tmp;
    if (other instanceof Argless) {
      tmp = equals(other.k13_1, this.k13_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Argless).hashCode = function () {
    return hashCode(this.k13_1);
  };
  function WithTypeArguments(provider) {
    ContextualProvider.call(this);
    this.i13_1 = provider;
  }
  protoOf(WithTypeArguments).h13 = function (typeArgumentsSerializers) {
    return this.i13_1(typeArgumentsSerializers);
  };
  function ContextualProvider() {
  }
  var properties_initialized_SerializersModule_kt_fjigjn;
  function _init_properties_SerializersModule_kt__u78ha3() {
    if (!properties_initialized_SerializersModule_kt_fjigjn) {
      properties_initialized_SerializersModule_kt_fjigjn = true;
      EmptySerializersModule = new SerialModuleImpl(emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), false);
    }
  }
  function EmptySerializersModule_0() {
    return get_EmptySerializersModuleLegacyJs();
  }
  function SerializersModuleBuilder() {
    var tmp = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp.r12_1 = HashMap_init_$Create$();
    var tmp_0 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_0.s12_1 = HashMap_init_$Create$();
    var tmp_1 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_1.t12_1 = HashMap_init_$Create$();
    var tmp_2 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_2.u12_1 = HashMap_init_$Create$();
    var tmp_3 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_3.v12_1 = HashMap_init_$Create$();
    this.w12_1 = false;
  }
  protoOf(SerializersModuleBuilder).l13 = function (kClass, serializer) {
    return this.p13(kClass, new Argless(serializer));
  };
  protoOf(SerializersModuleBuilder).j13 = function (kClass, provider) {
    return this.p13(kClass, new WithTypeArguments(provider));
  };
  protoOf(SerializersModuleBuilder).m13 = function (baseClass, actualClass, actualSerializer) {
    this.x12(baseClass, actualClass, actualSerializer);
  };
  protoOf(SerializersModuleBuilder).n13 = function (baseClass, defaultSerializerProvider) {
    this.y12(baseClass, defaultSerializerProvider, false);
  };
  protoOf(SerializersModuleBuilder).o13 = function (baseClass, defaultDeserializerProvider) {
    this.z12(baseClass, defaultDeserializerProvider, false);
  };
  protoOf(SerializersModuleBuilder).q13 = function (forClass, provider, allowOverwrite) {
    if (!allowOverwrite) {
      var previous = this.r12_1.x1(forClass);
      if (!(previous == null) && !equals(previous, provider)) {
        throw new SerializerAlreadyRegisteredException('Contextual serializer or serializer provider for ' + toString(forClass) + ' already registered in this module');
      }
    }
    // Inline function 'kotlin.collections.set' call
    this.r12_1.b2(forClass, provider);
    if (isInterface_0(forClass))
      this.w12_1 = true;
  };
  protoOf(SerializersModuleBuilder).p13 = function (forClass, provider, allowOverwrite, $super) {
    allowOverwrite = allowOverwrite === VOID ? false : allowOverwrite;
    var tmp;
    if ($super === VOID) {
      this.q13(forClass, provider, allowOverwrite);
      tmp = Unit_instance;
    } else {
      tmp = $super.q13.call(this, forClass, provider, allowOverwrite);
    }
    return tmp;
  };
  protoOf(SerializersModuleBuilder).y12 = function (baseClass, defaultSerializerProvider, allowOverwrite) {
    var previous = this.t12_1.x1(baseClass);
    if (!(previous == null) && !equals(previous, defaultSerializerProvider) && !allowOverwrite) {
      throw IllegalArgumentException_init_$Create$('Default serializers provider for ' + toString(baseClass) + ' is already registered: ' + toString_0(previous));
    }
    // Inline function 'kotlin.collections.set' call
    this.t12_1.b2(baseClass, defaultSerializerProvider);
  };
  protoOf(SerializersModuleBuilder).z12 = function (baseClass, defaultDeserializerProvider, allowOverwrite) {
    var previous = this.v12_1.x1(baseClass);
    if (!(previous == null) && !equals(previous, defaultDeserializerProvider) && !allowOverwrite) {
      throw IllegalArgumentException_init_$Create$('Default deserializers provider for ' + toString(baseClass) + ' is already registered: ' + toString_0(previous));
    }
    // Inline function 'kotlin.collections.set' call
    this.v12_1.b2(baseClass, defaultDeserializerProvider);
  };
  protoOf(SerializersModuleBuilder).r13 = function (baseClass, concreteClass, concreteSerializer, allowOverwrite) {
    var name = concreteSerializer.si().tj();
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = this.s12_1;
    var value = this_0.x1(baseClass);
    var tmp;
    if (value == null) {
      // Inline function 'kotlin.collections.hashMapOf' call
      var answer = HashMap_init_$Create$();
      this_0.b2(baseClass, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    var baseClassSerializers = tmp;
    var previousSerializer = baseClassSerializers.x1(concreteClass);
    // Inline function 'kotlin.collections.getOrPut' call
    var this_1 = this.u12_1;
    var value_0 = this_1.x1(baseClass);
    var tmp_0;
    if (value_0 == null) {
      // Inline function 'kotlin.collections.hashMapOf' call
      var answer_0 = HashMap_init_$Create$();
      this_1.b2(baseClass, answer_0);
      tmp_0 = answer_0;
    } else {
      tmp_0 = value_0;
    }
    var names = tmp_0;
    if (allowOverwrite) {
      if (!(previousSerializer == null)) {
        names.c2(previousSerializer.si().tj());
      }
      // Inline function 'kotlin.collections.set' call
      baseClassSerializers.b2(concreteClass, concreteSerializer);
      // Inline function 'kotlin.collections.set' call
      names.b2(name, concreteSerializer);
      return Unit_instance;
    }
    if (!(previousSerializer == null)) {
      if (!equals(previousSerializer, concreteSerializer)) {
        throw SerializerAlreadyRegisteredException_init_$Create$(baseClass, concreteClass);
      } else {
        names.c2(previousSerializer.si().tj());
      }
    }
    var previousByName = names.x1(name);
    if (!(previousByName == null)) {
      // Inline function 'kotlin.sequences.find' call
      var this_2 = asSequence(ensureNotNull(this.s12_1.x1(baseClass)));
      var tmp$ret$5;
      $l$block: {
        // Inline function 'kotlin.sequences.firstOrNull' call
        var tmp0_iterator = this_2.j();
        while (tmp0_iterator.k()) {
          var element = tmp0_iterator.l();
          // Inline function 'kotlinx.serialization.modules.SerializersModuleBuilder.registerPolymorphicSerializer.<anonymous>' call
          if (element.u1() === previousByName) {
            tmp$ret$5 = element;
            break $l$block;
          }
        }
        tmp$ret$5 = null;
      }
      var conflictingClass = tmp$ret$5;
      throw IllegalArgumentException_init_$Create$("Multiple polymorphic serializers for base class '" + toString(baseClass) + "' " + ("have the same serial name '" + name + "': '" + toString(concreteClass) + "' and '" + toString_0(conflictingClass) + "'"));
    }
    // Inline function 'kotlin.collections.set' call
    baseClassSerializers.b2(concreteClass, concreteSerializer);
    // Inline function 'kotlin.collections.set' call
    names.b2(name, concreteSerializer);
  };
  protoOf(SerializersModuleBuilder).x12 = function (baseClass, concreteClass, concreteSerializer, allowOverwrite, $super) {
    allowOverwrite = allowOverwrite === VOID ? false : allowOverwrite;
    var tmp;
    if ($super === VOID) {
      this.r13(baseClass, concreteClass, concreteSerializer, allowOverwrite);
      tmp = Unit_instance;
    } else {
      tmp = $super.r13.call(this, baseClass, concreteClass, concreteSerializer, allowOverwrite);
    }
    return tmp;
  };
  protoOf(SerializersModuleBuilder).sr = function () {
    return new SerialModuleImpl(this.r12_1, this.s12_1, this.t12_1, this.u12_1, this.v12_1, this.w12_1);
  };
  function SerializerAlreadyRegisteredException_init_$Init$(baseClass, concreteClass, $this) {
    SerializerAlreadyRegisteredException.call($this, 'Serializer for ' + toString(concreteClass) + ' already registered in the scope of ' + toString(baseClass));
    return $this;
  }
  function SerializerAlreadyRegisteredException_init_$Create$(baseClass, concreteClass) {
    var tmp = SerializerAlreadyRegisteredException_init_$Init$(baseClass, concreteClass, objectCreate(protoOf(SerializerAlreadyRegisteredException)));
    captureStack(tmp, SerializerAlreadyRegisteredException_init_$Create$);
    return tmp;
  }
  function SerializerAlreadyRegisteredException(msg) {
    IllegalArgumentException_init_$Init$_0(msg, this);
    captureStack(this, SerializerAlreadyRegisteredException);
  }
  function SerializersModuleCollector$contextual$lambda($serializer) {
    return function (it) {
      return $serializer;
    };
  }
  function SerializersModuleCollector() {
  }
  function SerializableWith(serializer) {
    this.s13_1 = serializer;
  }
  protoOf(SerializableWith).equals = function (other) {
    if (!(other instanceof SerializableWith))
      return false;
    var tmp0_other_with_cast = other instanceof SerializableWith ? other : THROW_CCE();
    if (!this.s13_1.equals(tmp0_other_with_cast.s13_1))
      return false;
    return true;
  };
  protoOf(SerializableWith).hashCode = function () {
    return imul(getStringHashCode('serializer'), 127) ^ this.s13_1.hashCode();
  };
  protoOf(SerializableWith).toString = function () {
    return '@kotlinx.serialization.SerializableWith(serializer=' + toString(this.s13_1) + ')';
  };
  function createCache(factory) {
    return new createCache$1(factory);
  }
  function createParametrizedCache(factory) {
    return new createParametrizedCache$1(factory);
  }
  function isInterface_0(_this__u8e3s4) {
    return get_isInterface(_this__u8e3s4);
  }
  function initBuiltins() {
    return mapOf([to(PrimitiveClasses_getInstance().ea(), serializer_1(StringCompanionObject_instance)), to(getKClass(Char), serializer_2(Companion_getInstance_1())), to(PrimitiveClasses_getInstance().ha(), CharArraySerializer()), to(PrimitiveClasses_getInstance().ca(), serializer_3(DoubleCompanionObject_instance)), to(PrimitiveClasses_getInstance().na(), DoubleArraySerializer()), to(PrimitiveClasses_getInstance().ba(), serializer_4(FloatCompanionObject_instance)), to(PrimitiveClasses_getInstance().ma(), FloatArraySerializer()), to(getKClass(Long), serializer_5(Companion_getInstance_2())), to(PrimitiveClasses_getInstance().la(), LongArraySerializer()), to(getKClass(ULong), serializer_6(Companion_getInstance_3())), to(getKClass(ULongArray), ULongArraySerializer()), to(PrimitiveClasses_getInstance().aa(), serializer_7(IntCompanionObject_instance)), to(PrimitiveClasses_getInstance().ka(), IntArraySerializer()), to(getKClass(UInt), serializer_8(Companion_getInstance_4())), to(getKClass(UIntArray), UIntArraySerializer()), to(PrimitiveClasses_getInstance().z9(), serializer_9(ShortCompanionObject_instance)), to(PrimitiveClasses_getInstance().ja(), ShortArraySerializer()), to(getKClass(UShort), serializer_10(Companion_getInstance_5())), to(getKClass(UShortArray), UShortArraySerializer()), to(PrimitiveClasses_getInstance().y9(), serializer_11(ByteCompanionObject_instance)), to(PrimitiveClasses_getInstance().ia(), ByteArraySerializer()), to(getKClass(UByte), serializer_12(Companion_getInstance_6())), to(getKClass(UByteArray), UByteArraySerializer()), to(PrimitiveClasses_getInstance().x9(), serializer_13(BooleanCompanionObject_instance)), to(PrimitiveClasses_getInstance().ga(), BooleanArraySerializer()), to(getKClass(Unit), serializer_14(Unit_instance)), to(PrimitiveClasses_getInstance().w9(), NothingSerializer()), to(getKClass(Duration), serializer_15(Companion_getInstance())), to(getKClass(Uuid), serializer_16(Companion_getInstance_0()))]);
  }
  function get_isInterface(_this__u8e3s4) {
    if (_this__u8e3s4 === PrimitiveClasses_getInstance().w9())
      return false;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = get_js(_this__u8e3s4).$metadata$;
    return (tmp0_safe_receiver == null ? null : tmp0_safe_receiver.kind) == 'interface';
  }
  function compiledSerializerImpl(_this__u8e3s4) {
    var tmp0_elvis_lhs = constructSerializerForGivenTypeArgs(_this__u8e3s4, []);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      var tmp_0;
      if (_this__u8e3s4 === PrimitiveClasses_getInstance().w9()) {
        tmp_0 = NothingSerializer_getInstance();
      } else {
        // Inline function 'kotlin.js.asDynamic' call
        var tmp1_safe_receiver = get_js(_this__u8e3s4).Companion;
        tmp_0 = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.serializer();
      }
      var tmp_1 = tmp_0;
      tmp = (!(tmp_1 == null) ? isInterface(tmp_1, KSerializer) : false) ? tmp_1 : null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function platformSpecificSerializerNotRegistered(_this__u8e3s4) {
    throw SerializationException_init_$Create$_0(notRegisteredMessage(_this__u8e3s4) + 'To get enum serializer on Kotlin/JS, it should be annotated with @Serializable annotation.');
  }
  function isReferenceArray(rootClass) {
    return rootClass.equals(PrimitiveClasses_getInstance().da());
  }
  function constructSerializerForGivenTypeArgs(_this__u8e3s4, args) {
    var tmp;
    try {
      // Inline function 'kotlin.reflect.findAssociatedObject' call
      var assocObject = findAssociatedObject(_this__u8e3s4, getKClass(SerializableWith));
      var tmp_0;
      if (!(assocObject == null) ? isInterface(assocObject, KSerializer) : false) {
        tmp_0 = isInterface(assocObject, KSerializer) ? assocObject : THROW_CCE();
      } else {
        if (!(assocObject == null) ? isInterface(assocObject, SerializerFactory) : false) {
          var tmp_1 = assocObject.ru(args.slice());
          tmp_0 = isInterface(tmp_1, KSerializer) ? tmp_1 : THROW_CCE();
        } else {
          tmp_0 = null;
        }
      }
      tmp = tmp_0;
    } catch ($p) {
      var tmp_2;
      var e = $p;
      tmp_2 = null;
      tmp = tmp_2;
    }
    return tmp;
  }
  function toNativeArrayImpl(_this__u8e3s4, eClass) {
    // Inline function 'kotlin.collections.toTypedArray' call
    return copyToArray(_this__u8e3s4);
  }
  function getChecked(_this__u8e3s4, index) {
    if (!(0 <= index ? index <= (_this__u8e3s4.length - 1 | 0) : false))
      throw IndexOutOfBoundsException_init_$Create$('Index ' + index + ' out of bounds ' + get_indices(_this__u8e3s4).toString());
    return _this__u8e3s4[index];
  }
  function getChecked_0(_this__u8e3s4, index) {
    if (!(0 <= index ? index <= (_this__u8e3s4.length - 1 | 0) : false))
      throw IndexOutOfBoundsException_init_$Create$('Index ' + index + ' out of bounds ' + get_indices_0(_this__u8e3s4).toString());
    return _this__u8e3s4[index];
  }
  function createCache$1($factory) {
    this.t13_1 = $factory;
  }
  protoOf(createCache$1).zj = function (key) {
    return this.t13_1(key);
  };
  function createParametrizedCache$1($factory) {
    this.u13_1 = $factory;
  }
  protoOf(createParametrizedCache$1).ak = function (key, types) {
    // Inline function 'kotlin.runCatching' call
    var tmp;
    try {
      // Inline function 'kotlin.Companion.success' call
      // Inline function 'kotlinx.serialization.internal.<no name provided>.get.<anonymous>' call
      var value = this.u13_1(key, types);
      tmp = _Result___init__impl__xyqfz8(value);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        // Inline function 'kotlin.Companion.failure' call
        tmp_0 = _Result___init__impl__xyqfz8(createFailure(e));
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  //region block: post-declaration
  protoOf(SerialDescriptorImpl).bk = get_isNullable;
  protoOf(SerialDescriptorImpl).gk = get_isInline;
  protoOf(AbstractDecoder).om = decodeSerializableElement$default;
  protoOf(AbstractDecoder).am = decodeSerializableValue;
  protoOf(AbstractDecoder).rm = decodeSequentially;
  protoOf(AbstractDecoder).tm = decodeCollectionSize;
  protoOf(AbstractEncoder).wn = encodeNotNullMark;
  protoOf(AbstractEncoder).xn = beginCollection;
  protoOf(AbstractEncoder).tn = encodeSerializableValue;
  protoOf(AbstractEncoder).vn = encodeNullableSerializableValue;
  protoOf(AbstractEncoder).yn = shouldEncodeElementDefault;
  protoOf(ListLikeDescriptor).bk = get_isNullable;
  protoOf(ListLikeDescriptor).gk = get_isInline;
  protoOf(ListLikeDescriptor).ik = get_annotations;
  protoOf(MapLikeDescriptor).bk = get_isNullable;
  protoOf(MapLikeDescriptor).gk = get_isInline;
  protoOf(MapLikeDescriptor).ik = get_annotations;
  protoOf(PluginGeneratedSerialDescriptor).bk = get_isNullable;
  protoOf(PluginGeneratedSerialDescriptor).gk = get_isInline;
  protoOf(InlinePrimitiveDescriptor$1).fu = typeParametersSerializers;
  protoOf(NothingSerialDescriptor).bk = get_isNullable;
  protoOf(NothingSerialDescriptor).gk = get_isInline;
  protoOf(NothingSerialDescriptor).ik = get_annotations;
  protoOf(PrimitiveSerialDescriptor_0).bk = get_isNullable;
  protoOf(PrimitiveSerialDescriptor_0).gk = get_isInline;
  protoOf(PrimitiveSerialDescriptor_0).ik = get_annotations;
  protoOf(TaggedDecoder).om = decodeSerializableElement$default;
  protoOf(TaggedDecoder).am = decodeSerializableValue;
  protoOf(TaggedDecoder).rm = decodeSequentially;
  protoOf(TaggedDecoder).tm = decodeCollectionSize;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = PolymorphicSerializer_init_$Create$;
  _.$_$.b = SealedClassSerializer_init_$Create$;
  _.$_$.c = SerializationException_init_$Init$_0;
  _.$_$.d = SerializationException_init_$Create$_0;
  _.$_$.e = UnknownFieldException_init_$Create$;
  _.$_$.f = SEALED_getInstance;
  _.$_$.g = STRING_getInstance;
  _.$_$.h = CONTEXTUAL_getInstance;
  _.$_$.i = ENUM_getInstance;
  _.$_$.j = CLASS_getInstance;
  _.$_$.k = LIST_getInstance;
  _.$_$.l = MAP_getInstance;
  _.$_$.m = OBJECT_getInstance;
  _.$_$.n = BooleanSerializer_getInstance;
  _.$_$.o = DoubleSerializer_getInstance;
  _.$_$.p = IntSerializer_getInstance;
  _.$_$.q = StringSerializer_getInstance;
  _.$_$.r = ListSerializer;
  _.$_$.s = MapSerializer;
  _.$_$.t = get_nullable;
  _.$_$.u = serializer_1;
  _.$_$.v = serializer_10;
  _.$_$.w = serializer_8;
  _.$_$.x = serializer_12;
  _.$_$.y = serializer_6;
  _.$_$.z = PolymorphicKind;
  _.$_$.a1 = PrimitiveKind;
  _.$_$.b1 = PrimitiveSerialDescriptor;
  _.$_$.c1 = get_annotations;
  _.$_$.d1 = get_isInline;
  _.$_$.e1 = get_isNullable;
  _.$_$.f1 = SerialDescriptor;
  _.$_$.g1 = ENUM;
  _.$_$.h1 = buildSerialDescriptor;
  _.$_$.i1 = getContextualDescriptor;
  _.$_$.j1 = AbstractDecoder;
  _.$_$.k1 = AbstractEncoder;
  _.$_$.l1 = CompositeDecoder;
  _.$_$.m1 = CompositeEncoder;
  _.$_$.n1 = Decoder;
  _.$_$.o1 = Encoder;
  _.$_$.p1 = AbstractPolymorphicSerializer;
  _.$_$.q1 = ArrayListSerializer;
  _.$_$.r1 = ElementMarker;
  _.$_$.s1 = typeParametersSerializers;
  _.$_$.t1 = GeneratedSerializer;
  _.$_$.u1 = InlinePrimitiveDescriptor;
  _.$_$.v1 = LinkedHashMapSerializer;
  _.$_$.w1 = NamedValueDecoder;
  _.$_$.x1 = PairSerializer_0;
  _.$_$.y1 = PluginGeneratedSerialDescriptor;
  _.$_$.z1 = SerializerFactory;
  _.$_$.a2 = TripleSerializer_0;
  _.$_$.b2 = createSimpleEnumSerializer;
  _.$_$.c2 = jsonCachedSerialNames;
  _.$_$.d2 = throwMissingFieldException;
  _.$_$.e2 = EmptySerializersModule_0;
  _.$_$.f2 = PolymorphicModuleBuilder;
  _.$_$.g2 = SerializersModuleBuilder;
  _.$_$.h2 = contextual;
  _.$_$.i2 = SerializersModuleCollector;
  _.$_$.j2 = DeserializationStrategy;
  _.$_$.k2 = KSerializer;
  _.$_$.l2 = MissingFieldException;
  _.$_$.m2 = SealedClassSerializer;
  _.$_$.n2 = SerializationException;
  _.$_$.o2 = SerializationStrategy;
  _.$_$.p2 = findPolymorphicSerializer_0;
  _.$_$.q2 = findPolymorphicSerializer;
  _.$_$.r2 = serializer_0;
  _.$_$.s2 = serializer;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlinx-serialization-kotlinx-serialization-json.js":
/*!********************************************************************!*\
  !*** ./kotlin/kotlinx-serialization-kotlinx-serialization-json.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlinx-serialization-kotlinx-serialization-core.js */ "./kotlin/kotlinx-serialization-kotlinx-serialization-core.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(globalThis, function (_, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var EmptySerializersModule = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e2;
  var protoOf = kotlin_kotlin.$_$.s8;
  var initMetadataForObject = kotlin_kotlin.$_$.b8;
  var VOID = kotlin_kotlin.$_$.e;
  var Unit_instance = kotlin_kotlin.$_$.z3;
  var initMetadataForClass = kotlin_kotlin.$_$.w7;
  var toString = kotlin_kotlin.$_$.w8;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.c1;
  var charSequenceLength = kotlin_kotlin.$_$.l7;
  var charSequenceGet = kotlin_kotlin.$_$.k7;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.n1;
  var equals = kotlin_kotlin.$_$.p7;
  var toString_0 = kotlin_kotlin.$_$.yb;
  var Enum = kotlin_kotlin.$_$.ra;
  var Decoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n1;
  var CompositeDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l1;
  var initMetadataForInterface = kotlin_kotlin.$_$.z7;
  var initMetadataForCompanion = kotlin_kotlin.$_$.x7;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.y;
  var hashCode = kotlin_kotlin.$_$.v7;
  var joinToString = kotlin_kotlin.$_$.m5;
  var THROW_CCE = kotlin_kotlin.$_$.za;
  var KtMap = kotlin_kotlin.$_$.i4;
  var SerializerFactory = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.z1;
  var getKClassFromExpression = kotlin_kotlin.$_$.c;
  var getBooleanHashCode = kotlin_kotlin.$_$.r7;
  var getStringHashCode = kotlin_kotlin.$_$.u7;
  var KtList = kotlin_kotlin.$_$.g4;
  var NumberFormatException_init_$Create$ = kotlin_kotlin.$_$.h1;
  var numberRangeToNumber = kotlin_kotlin.$_$.o8;
  var ClosedRange = kotlin_kotlin.$_$.x8;
  var isInterface = kotlin_kotlin.$_$.j8;
  var contains = kotlin_kotlin.$_$.b9;
  var toDouble = kotlin_kotlin.$_$.ba;
  var StringCompanionObject_instance = kotlin_kotlin.$_$.n3;
  var serializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.u;
  var InlinePrimitiveDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.u1;
  var SEALED_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f;
  var buildSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h1;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.vb;
  var KSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k2;
  var MapSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.s;
  var SerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f1;
  var ListSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.r;
  var STRING_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g;
  var ENUM_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i;
  var PrimitiveSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b1;
  var toLongOrNull = kotlin_kotlin.$_$.ea;
  var toULongOrNull = kotlin_kotlin.$_$.ia;
  var ULong = kotlin_kotlin.$_$.gb;
  var Companion_getInstance = kotlin_kotlin.$_$.x3;
  var serializer_0 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.y;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.o2;
  var toDoubleOrNull = kotlin_kotlin.$_$.aa;
  var toBooleanStrictOrNull = kotlin_kotlin.$_$.z9;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.e1;
  var lazy = kotlin_kotlin.$_$.ub;
  var get_isNullable = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e1;
  var get_isInline = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d1;
  var get_annotations = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c1;
  var KProperty1 = kotlin_kotlin.$_$.f9;
  var getPropertyCallableRef = kotlin_kotlin.$_$.t7;
  var Encoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o1;
  var CompositeEncoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m1;
  var toLong = kotlin_kotlin.$_$.u8;
  var _UInt___init__impl__l7qpdl = kotlin_kotlin.$_$.e2;
  var UInt__toString_impl_dbgl21 = kotlin_kotlin.$_$.g2;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.n2;
  var ULong__toString_impl_f9au7k = kotlin_kotlin.$_$.p2;
  var _UByte___init__impl__g9hnc4 = kotlin_kotlin.$_$.v1;
  var UByte__toString_impl_v72jg = kotlin_kotlin.$_$.x1;
  var _UShort___init__impl__jigrne = kotlin_kotlin.$_$.w2;
  var UShort__toString_impl_edaoee = kotlin_kotlin.$_$.y2;
  var ElementMarker = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.r1;
  var captureStack = kotlin_kotlin.$_$.i7;
  var SerializationException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n2;
  var SerializationException_init_$Init$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c;
  var charSequenceSubSequence = kotlin_kotlin.$_$.m7;
  var coerceAtLeast = kotlin_kotlin.$_$.y8;
  var coerceAtMost = kotlin_kotlin.$_$.z8;
  var SerializationException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d;
  var CLASS_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.r;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.i;
  var singleOrNull = kotlin_kotlin.$_$.a6;
  var emptyMap = kotlin_kotlin.$_$.f5;
  var getValue = kotlin_kotlin.$_$.h5;
  var fillArrayVal = kotlin_kotlin.$_$.q7;
  var copyOf = kotlin_kotlin.$_$.b5;
  var copyOf_0 = kotlin_kotlin.$_$.c5;
  var LIST_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k;
  var DeepRecursiveFunction = kotlin_kotlin.$_$.pa;
  var invoke = kotlin_kotlin.$_$.qb;
  var CoroutineImpl = kotlin_kotlin.$_$.z6;
  var DeepRecursiveScope = kotlin_kotlin.$_$.qa;
  var Unit = kotlin_kotlin.$_$.jb;
  var get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.k6;
  var initMetadataForLambda = kotlin_kotlin.$_$.a8;
  var initMetadataForCoroutine = kotlin_kotlin.$_$.y7;
  var SealedClassSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m2;
  var jsonCachedSerialNames = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c2;
  var ENUM = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g1;
  var PrimitiveKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a1;
  var PolymorphicKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.z;
  var CONTEXTUAL_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h;
  var MAP_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l;
  var contextual = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h2;
  var SerializersModuleCollector = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i2;
  var AbstractDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j1;
  var AbstractPolymorphicSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.p1;
  var DeserializationStrategy = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j2;
  var getKClass = kotlin_kotlin.$_$.d;
  var findPolymorphicSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.p2;
  var ensureNotNull = kotlin_kotlin.$_$.pb;
  var substringBefore = kotlin_kotlin.$_$.y9;
  var removeSuffix = kotlin_kotlin.$_$.s9;
  var substringAfter = kotlin_kotlin.$_$.x9;
  var contains_0 = kotlin_kotlin.$_$.k9;
  var plus = kotlin_kotlin.$_$.wb;
  var MissingFieldException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l2;
  var IllegalArgumentException = kotlin_kotlin.$_$.ua;
  var isFinite = kotlin_kotlin.$_$.sb;
  var isFinite_0 = kotlin_kotlin.$_$.rb;
  var toUInt = kotlin_kotlin.$_$.ha;
  var _UInt___get_data__impl__f0vqqw = kotlin_kotlin.$_$.f2;
  var toULong = kotlin_kotlin.$_$.ja;
  var toUByte = kotlin_kotlin.$_$.ga;
  var _UByte___get_data__impl__jof9qr = kotlin_kotlin.$_$.w1;
  var toUShort = kotlin_kotlin.$_$.ka;
  var _UShort___get_data__impl__g0245 = kotlin_kotlin.$_$.x2;
  var objectCreate = kotlin_kotlin.$_$.r8;
  var AbstractEncoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k1;
  var OBJECT_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m;
  var findPolymorphicSerializer_0 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.q2;
  var SerializationStrategy = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o2;
  var toString_1 = kotlin_kotlin.$_$.q1;
  var Companion_getInstance_0 = kotlin_kotlin.$_$.w3;
  var serializer_1 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.w;
  var Companion_getInstance_1 = kotlin_kotlin.$_$.v3;
  var serializer_2 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.x;
  var Companion_getInstance_2 = kotlin_kotlin.$_$.y3;
  var serializer_3 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.v;
  var setOf = kotlin_kotlin.$_$.z5;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.p1;
  var numberToChar = kotlin_kotlin.$_$.p8;
  var equals_0 = kotlin_kotlin.$_$.m9;
  var startsWith = kotlin_kotlin.$_$.w9;
  var NamedValueDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.w1;
  var toByte = kotlin_kotlin.$_$.t8;
  var toShort = kotlin_kotlin.$_$.v8;
  var single = kotlin_kotlin.$_$.u9;
  var Char = kotlin_kotlin.$_$.oa;
  var emptySet = kotlin_kotlin.$_$.g5;
  var plus_0 = kotlin_kotlin.$_$.v5;
  var toInt = kotlin_kotlin.$_$.da;
  var toList = kotlin_kotlin.$_$.d6;
  var enumEntries = kotlin_kotlin.$_$.d7;
  var getContextualDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i1;
  var last = kotlin_kotlin.$_$.q5;
  var removeLast = kotlin_kotlin.$_$.y5;
  var lastIndexOf = kotlin_kotlin.$_$.q9;
  var Long = kotlin_kotlin.$_$.va;
  var Char__minus_impl_a2frrh = kotlin_kotlin.$_$.o1;
  var numberToLong = kotlin_kotlin.$_$.q8;
  var charArray = kotlin_kotlin.$_$.j7;
  var indexOf = kotlin_kotlin.$_$.n9;
  var indexOf_0 = kotlin_kotlin.$_$.o9;
  var StringBuilder_init_$Create$_0 = kotlin_kotlin.$_$.x;
  var HashMap_init_$Create$ = kotlin_kotlin.$_$.k;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(Json, 'Json');
  initMetadataForObject(Default, 'Default', VOID, Json);
  initMetadataForClass(JsonBuilder, 'JsonBuilder');
  initMetadataForClass(JsonImpl, 'JsonImpl', VOID, Json);
  initMetadataForClass(JsonClassDiscriminator, 'JsonClassDiscriminator');
  initMetadataForClass(JsonNames, 'JsonNames');
  initMetadataForClass(JsonConfiguration, 'JsonConfiguration');
  initMetadataForClass(ClassDiscriminatorMode, 'ClassDiscriminatorMode', VOID, Enum);
  initMetadataForInterface(JsonDecoder, 'JsonDecoder', VOID, VOID, [Decoder, CompositeDecoder]);
  initMetadataForCompanion(Companion);
  initMetadataForClass(JsonElement, 'JsonElement', VOID, VOID, VOID, VOID, VOID, {0: JsonElementSerializer_getInstance});
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(JsonObject, 'JsonObject', VOID, JsonElement, [JsonElement, KtMap], VOID, VOID, {0: JsonObjectSerializer_getInstance});
  initMetadataForClass(JsonPrimitive, 'JsonPrimitive', VOID, JsonElement, VOID, VOID, VOID, {0: JsonPrimitiveSerializer_getInstance});
  initMetadataForObject(JsonNull, 'JsonNull', VOID, JsonPrimitive, [JsonPrimitive, SerializerFactory], VOID, VOID, {0: JsonNullSerializer_getInstance});
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(JsonLiteral, 'JsonLiteral', VOID, JsonPrimitive);
  initMetadataForCompanion(Companion_2);
  initMetadataForClass(JsonArray, 'JsonArray', VOID, JsonElement, [JsonElement, KtList], VOID, VOID, {0: JsonArraySerializer_getInstance});
  initMetadataForObject(JsonElementSerializer, 'JsonElementSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(JsonObjectDescriptor, 'JsonObjectDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForObject(JsonObjectSerializer, 'JsonObjectSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(JsonArrayDescriptor, 'JsonArrayDescriptor', VOID, VOID, [SerialDescriptor]);
  initMetadataForObject(JsonArraySerializer, 'JsonArraySerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(JsonPrimitiveSerializer, 'JsonPrimitiveSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(JsonNullSerializer, 'JsonNullSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(JsonLiteralSerializer, 'JsonLiteralSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(defer$1, VOID, VOID, VOID, [SerialDescriptor]);
  initMetadataForInterface(JsonEncoder, 'JsonEncoder', VOID, VOID, [Encoder, CompositeEncoder]);
  initMetadataForClass(Composer, 'Composer');
  initMetadataForClass(ComposerForUnsignedNumbers, 'ComposerForUnsignedNumbers', VOID, Composer);
  initMetadataForClass(ComposerForUnquotedLiterals, 'ComposerForUnquotedLiterals', VOID, Composer);
  initMetadataForClass(ComposerWithPrettyPrint, 'ComposerWithPrettyPrint', VOID, Composer);
  initMetadataForClass(JsonElementMarker, 'JsonElementMarker');
  initMetadataForClass(JsonException, 'JsonException', VOID, SerializationException);
  initMetadataForClass(JsonEncodingException, 'JsonEncodingException', VOID, JsonException);
  initMetadataForClass(JsonDecodingException, 'JsonDecodingException', VOID, JsonException);
  initMetadataForObject(Tombstone, 'Tombstone');
  initMetadataForClass(JsonPath, 'JsonPath', JsonPath);
  initMetadataForLambda(JsonTreeReader$readDeepRecursive$slambda, CoroutineImpl, VOID, [2]);
  initMetadataForCoroutine($readObjectCOROUTINE$0, CoroutineImpl);
  initMetadataForClass(JsonTreeReader, 'JsonTreeReader', VOID, VOID, VOID, [0]);
  initMetadataForClass(PolymorphismValidator, 'PolymorphismValidator', VOID, VOID, [SerializersModuleCollector]);
  initMetadataForClass(Key, 'Key', Key);
  initMetadataForClass(DescriptorSchemaCache, 'DescriptorSchemaCache', DescriptorSchemaCache);
  initMetadataForClass(DiscriminatorHolder, 'DiscriminatorHolder');
  initMetadataForClass(StreamingJsonDecoder, 'StreamingJsonDecoder', VOID, AbstractDecoder, [JsonDecoder, AbstractDecoder]);
  initMetadataForClass(JsonDecoderForUnsignedTypes, 'JsonDecoderForUnsignedTypes', VOID, AbstractDecoder);
  initMetadataForClass(StreamingJsonEncoder, 'StreamingJsonEncoder', VOID, AbstractEncoder, [JsonEncoder, AbstractEncoder]);
  initMetadataForClass(AbstractJsonTreeDecoder, 'AbstractJsonTreeDecoder', VOID, NamedValueDecoder, [NamedValueDecoder, JsonDecoder]);
  initMetadataForClass(JsonTreeDecoder, 'JsonTreeDecoder', VOID, AbstractJsonTreeDecoder);
  initMetadataForClass(JsonTreeListDecoder, 'JsonTreeListDecoder', VOID, AbstractJsonTreeDecoder);
  initMetadataForClass(JsonPrimitiveDecoder, 'JsonPrimitiveDecoder', VOID, AbstractJsonTreeDecoder);
  initMetadataForClass(JsonTreeMapDecoder, 'JsonTreeMapDecoder', VOID, JsonTreeDecoder);
  initMetadataForClass(WriteMode, 'WriteMode', VOID, Enum);
  initMetadataForClass(AbstractJsonLexer, 'AbstractJsonLexer');
  initMetadataForObject(CharMappings, 'CharMappings');
  initMetadataForClass(StringJsonLexer, 'StringJsonLexer', VOID, AbstractJsonLexer);
  initMetadataForClass(StringJsonLexerWithComments, 'StringJsonLexerWithComments', VOID, StringJsonLexer);
  initMetadataForClass(JsonToStringWriter, 'JsonToStringWriter', JsonToStringWriter);
  //endregion
  function Default() {
    Default_instance = this;
    Json.call(this, new JsonConfiguration(), EmptySerializersModule());
  }
  var Default_instance;
  function Default_getInstance() {
    if (Default_instance == null)
      new Default();
    return Default_instance;
  }
  function Json(configuration, serializersModule) {
    Default_getInstance();
    this.v13_1 = configuration;
    this.w13_1 = serializersModule;
    this.x13_1 = new DescriptorSchemaCache();
  }
  protoOf(Json).qm = function () {
    return this.w13_1;
  };
  protoOf(Json).y13 = function (serializer, value) {
    var result = new JsonToStringWriter();
    try {
      encodeByWriter(this, result, serializer, value);
      return result.toString();
    }finally {
      result.b14();
    }
  };
  protoOf(Json).z13 = function (deserializer, string) {
    var lexer = StringJsonLexer_0(this, string);
    var input = new StreamingJsonDecoder(this, WriteMode_OBJ_getInstance(), lexer, deserializer.si(), null);
    var result = input.am(deserializer);
    lexer.o14();
    return result;
  };
  function Json_0(from, builderAction) {
    from = from === VOID ? Default_getInstance() : from;
    var builder = new JsonBuilder(from);
    builderAction(builder);
    var conf = builder.h15();
    return new JsonImpl(conf, builder.g15_1);
  }
  function JsonBuilder(json) {
    this.p14_1 = json.v13_1.i15_1;
    this.q14_1 = json.v13_1.n15_1;
    this.r14_1 = json.v13_1.j15_1;
    this.s14_1 = json.v13_1.k15_1;
    this.t14_1 = json.v13_1.m15_1;
    this.u14_1 = json.v13_1.o15_1;
    this.v14_1 = json.v13_1.p15_1;
    this.w14_1 = json.v13_1.r15_1;
    this.x14_1 = json.v13_1.y15_1;
    this.y14_1 = json.v13_1.t15_1;
    this.z14_1 = json.v13_1.u15_1;
    this.a15_1 = json.v13_1.v15_1;
    this.b15_1 = json.v13_1.w15_1;
    this.c15_1 = json.v13_1.x15_1;
    this.d15_1 = json.v13_1.s15_1;
    this.e15_1 = json.v13_1.l15_1;
    this.f15_1 = json.v13_1.q15_1;
    this.g15_1 = json.qm();
  }
  protoOf(JsonBuilder).h15 = function () {
    if (this.f15_1) {
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!(this.w14_1 === 'type')) {
        // Inline function 'kotlinx.serialization.json.JsonBuilder.build.<anonymous>' call
        var message = 'Class discriminator should not be specified when array polymorphism is specified';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!this.x14_1.equals(ClassDiscriminatorMode_POLYMORPHIC_getInstance())) {
        // Inline function 'kotlinx.serialization.json.JsonBuilder.build.<anonymous>' call
        var message_0 = 'useArrayPolymorphism option can only be used if classDiscriminatorMode in a default POLYMORPHIC state.';
        throw IllegalArgumentException_init_$Create$(toString(message_0));
      }
    }
    if (!this.t14_1) {
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!(this.u14_1 === '    ')) {
        // Inline function 'kotlinx.serialization.json.JsonBuilder.build.<anonymous>' call
        var message_1 = 'Indent should not be specified when default printing mode is used';
        throw IllegalArgumentException_init_$Create$(toString(message_1));
      }
    } else if (!(this.u14_1 === '    ')) {
      var tmp$ret$4;
      $l$block: {
        // Inline function 'kotlin.text.all' call
        var indexedObject = this.u14_1;
        var inductionVariable = 0;
        while (inductionVariable < charSequenceLength(indexedObject)) {
          var element = charSequenceGet(indexedObject, inductionVariable);
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlinx.serialization.json.JsonBuilder.build.<anonymous>' call
          if (!(element === _Char___init__impl__6a9atx(32) || element === _Char___init__impl__6a9atx(9) || element === _Char___init__impl__6a9atx(13) || element === _Char___init__impl__6a9atx(10))) {
            tmp$ret$4 = false;
            break $l$block;
          }
        }
        tmp$ret$4 = true;
      }
      var allWhitespaces = tmp$ret$4;
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!allWhitespaces) {
        // Inline function 'kotlinx.serialization.json.JsonBuilder.build.<anonymous>' call
        var message_2 = 'Only whitespace, tab, newline and carriage return are allowed as pretty print symbols. Had ' + this.u14_1;
        throw IllegalArgumentException_init_$Create$(toString(message_2));
      }
    }
    return new JsonConfiguration(this.p14_1, this.r14_1, this.s14_1, this.e15_1, this.t14_1, this.q14_1, this.u14_1, this.v14_1, this.f15_1, this.w14_1, this.d15_1, this.y14_1, this.z14_1, this.a15_1, this.b15_1, this.c15_1, this.x14_1);
  };
  function validateConfiguration($this) {
    if (equals($this.qm(), EmptySerializersModule()))
      return Unit_instance;
    var collector = new PolymorphismValidator($this.v13_1.q15_1, $this.v13_1.r15_1);
    $this.qm().a13(collector);
  }
  function JsonImpl(configuration, module_0) {
    Json.call(this, configuration, module_0);
    validateConfiguration(this);
  }
  function JsonClassDiscriminator() {
  }
  function JsonNames() {
  }
  function JsonConfiguration(encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, explicitNulls, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, useAlternativeNames, namingStrategy, decodeEnumsCaseInsensitive, allowTrailingComma, allowComments, classDiscriminatorMode) {
    encodeDefaults = encodeDefaults === VOID ? false : encodeDefaults;
    ignoreUnknownKeys = ignoreUnknownKeys === VOID ? false : ignoreUnknownKeys;
    isLenient = isLenient === VOID ? false : isLenient;
    allowStructuredMapKeys = allowStructuredMapKeys === VOID ? false : allowStructuredMapKeys;
    prettyPrint = prettyPrint === VOID ? false : prettyPrint;
    explicitNulls = explicitNulls === VOID ? true : explicitNulls;
    prettyPrintIndent = prettyPrintIndent === VOID ? '    ' : prettyPrintIndent;
    coerceInputValues = coerceInputValues === VOID ? false : coerceInputValues;
    useArrayPolymorphism = useArrayPolymorphism === VOID ? false : useArrayPolymorphism;
    classDiscriminator = classDiscriminator === VOID ? 'type' : classDiscriminator;
    allowSpecialFloatingPointValues = allowSpecialFloatingPointValues === VOID ? false : allowSpecialFloatingPointValues;
    useAlternativeNames = useAlternativeNames === VOID ? true : useAlternativeNames;
    namingStrategy = namingStrategy === VOID ? null : namingStrategy;
    decodeEnumsCaseInsensitive = decodeEnumsCaseInsensitive === VOID ? false : decodeEnumsCaseInsensitive;
    allowTrailingComma = allowTrailingComma === VOID ? false : allowTrailingComma;
    allowComments = allowComments === VOID ? false : allowComments;
    classDiscriminatorMode = classDiscriminatorMode === VOID ? ClassDiscriminatorMode_POLYMORPHIC_getInstance() : classDiscriminatorMode;
    this.i15_1 = encodeDefaults;
    this.j15_1 = ignoreUnknownKeys;
    this.k15_1 = isLenient;
    this.l15_1 = allowStructuredMapKeys;
    this.m15_1 = prettyPrint;
    this.n15_1 = explicitNulls;
    this.o15_1 = prettyPrintIndent;
    this.p15_1 = coerceInputValues;
    this.q15_1 = useArrayPolymorphism;
    this.r15_1 = classDiscriminator;
    this.s15_1 = allowSpecialFloatingPointValues;
    this.t15_1 = useAlternativeNames;
    this.u15_1 = namingStrategy;
    this.v15_1 = decodeEnumsCaseInsensitive;
    this.w15_1 = allowTrailingComma;
    this.x15_1 = allowComments;
    this.y15_1 = classDiscriminatorMode;
  }
  protoOf(JsonConfiguration).toString = function () {
    return 'JsonConfiguration(encodeDefaults=' + this.i15_1 + ', ignoreUnknownKeys=' + this.j15_1 + ', isLenient=' + this.k15_1 + ', ' + ('allowStructuredMapKeys=' + this.l15_1 + ', prettyPrint=' + this.m15_1 + ', explicitNulls=' + this.n15_1 + ', ') + ("prettyPrintIndent='" + this.o15_1 + "', coerceInputValues=" + this.p15_1 + ', useArrayPolymorphism=' + this.q15_1 + ', ') + ("classDiscriminator='" + this.r15_1 + "', allowSpecialFloatingPointValues=" + this.s15_1 + ', ') + ('useAlternativeNames=' + this.t15_1 + ', namingStrategy=' + toString_0(this.u15_1) + ', decodeEnumsCaseInsensitive=' + this.v15_1 + ', ') + ('allowTrailingComma=' + this.w15_1 + ', allowComments=' + this.x15_1 + ', classDiscriminatorMode=' + this.y15_1.toString() + ')');
  };
  var ClassDiscriminatorMode_NONE_instance;
  var ClassDiscriminatorMode_ALL_JSON_OBJECTS_instance;
  var ClassDiscriminatorMode_POLYMORPHIC_instance;
  var ClassDiscriminatorMode_entriesInitialized;
  function ClassDiscriminatorMode_initEntries() {
    if (ClassDiscriminatorMode_entriesInitialized)
      return Unit_instance;
    ClassDiscriminatorMode_entriesInitialized = true;
    ClassDiscriminatorMode_NONE_instance = new ClassDiscriminatorMode('NONE', 0);
    ClassDiscriminatorMode_ALL_JSON_OBJECTS_instance = new ClassDiscriminatorMode('ALL_JSON_OBJECTS', 1);
    ClassDiscriminatorMode_POLYMORPHIC_instance = new ClassDiscriminatorMode('POLYMORPHIC', 2);
  }
  function ClassDiscriminatorMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function ClassDiscriminatorMode_NONE_getInstance() {
    ClassDiscriminatorMode_initEntries();
    return ClassDiscriminatorMode_NONE_instance;
  }
  function ClassDiscriminatorMode_POLYMORPHIC_getInstance() {
    ClassDiscriminatorMode_initEntries();
    return ClassDiscriminatorMode_POLYMORPHIC_instance;
  }
  function JsonDecoder() {
  }
  function get_jsonUnquotedLiteralDescriptor() {
    _init_properties_JsonElement_kt__7cbdc2();
    return jsonUnquotedLiteralDescriptor;
  }
  var jsonUnquotedLiteralDescriptor;
  function Companion() {
  }
  var Companion_instance;
  function Companion_getInstance_3() {
    return Companion_instance;
  }
  function JsonElement() {
  }
  function Companion_0() {
  }
  var Companion_instance_0;
  function Companion_getInstance_4() {
    return Companion_instance_0;
  }
  function JsonObject$toString$lambda(_destruct__k2r9zo) {
    // Inline function 'kotlin.collections.component1' call
    var k = _destruct__k2r9zo.t1();
    // Inline function 'kotlin.collections.component2' call
    var v = _destruct__k2r9zo.u1();
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.serialization.json.JsonObject.toString.<anonymous>.<anonymous>' call
    printQuoted(this_0, k);
    this_0.e7(_Char___init__impl__6a9atx(58));
    this_0.c7(v);
    return this_0.toString();
  }
  function JsonObject(content) {
    JsonElement.call(this);
    this.b16_1 = content;
  }
  protoOf(JsonObject).equals = function (other) {
    return equals(this.b16_1, other);
  };
  protoOf(JsonObject).hashCode = function () {
    return hashCode(this.b16_1);
  };
  protoOf(JsonObject).toString = function () {
    var tmp = this.b16_1.r();
    return joinToString(tmp, ',', '{', '}', VOID, VOID, JsonObject$toString$lambda);
  };
  protoOf(JsonObject).c16 = function (key) {
    return this.b16_1.v1(key);
  };
  protoOf(JsonObject).v1 = function (key) {
    if (!(!(key == null) ? typeof key === 'string' : false))
      return false;
    return this.c16((!(key == null) ? typeof key === 'string' : false) ? key : THROW_CCE());
  };
  protoOf(JsonObject).d16 = function (key) {
    return this.b16_1.x1(key);
  };
  protoOf(JsonObject).x1 = function (key) {
    if (!(!(key == null) ? typeof key === 'string' : false))
      return null;
    return this.d16((!(key == null) ? typeof key === 'string' : false) ? key : THROW_CCE());
  };
  protoOf(JsonObject).n = function () {
    return this.b16_1.n();
  };
  protoOf(JsonObject).r = function () {
    return this.b16_1.r();
  };
  protoOf(JsonObject).y1 = function () {
    return this.b16_1.y1();
  };
  protoOf(JsonObject).m = function () {
    return this.b16_1.m();
  };
  protoOf(JsonObject).z1 = function () {
    return this.b16_1.z1();
  };
  function JsonNull() {
    JsonNull_instance = this;
    JsonPrimitive.call(this);
    this.e16_1 = 'null';
  }
  protoOf(JsonNull).f16 = function () {
    return this.e16_1;
  };
  protoOf(JsonNull).g16 = function () {
    return JsonNullSerializer_getInstance();
  };
  protoOf(JsonNull).ru = function (typeParamsSerializers) {
    return this.g16();
  };
  var JsonNull_instance;
  function JsonNull_getInstance() {
    if (JsonNull_instance == null)
      new JsonNull();
    return JsonNull_instance;
  }
  function Companion_1() {
  }
  var Companion_instance_1;
  function Companion_getInstance_5() {
    return Companion_instance_1;
  }
  function JsonPrimitive() {
    JsonElement.call(this);
  }
  protoOf(JsonPrimitive).toString = function () {
    return this.f16();
  };
  function JsonPrimitive_0(value) {
    _init_properties_JsonElement_kt__7cbdc2();
    if (value == null)
      return JsonNull_getInstance();
    return new JsonLiteral(value, true);
  }
  function JsonLiteral(body, isString, coerceToInlineType) {
    coerceToInlineType = coerceToInlineType === VOID ? null : coerceToInlineType;
    JsonPrimitive.call(this);
    this.h16_1 = isString;
    this.i16_1 = coerceToInlineType;
    this.j16_1 = toString(body);
    if (!(this.i16_1 == null)) {
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!this.i16_1.gk()) {
        // Inline function 'kotlin.require.<anonymous>' call
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  }
  protoOf(JsonLiteral).f16 = function () {
    return this.j16_1;
  };
  protoOf(JsonLiteral).toString = function () {
    var tmp;
    if (this.h16_1) {
      // Inline function 'kotlin.text.buildString' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.apply' call
      var this_0 = StringBuilder_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.JsonLiteral.toString.<anonymous>' call
      printQuoted(this_0, this.j16_1);
      tmp = this_0.toString();
    } else {
      tmp = this.j16_1;
    }
    return tmp;
  };
  protoOf(JsonLiteral).equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other instanceof JsonLiteral))
      THROW_CCE();
    if (!(this.h16_1 === other.h16_1))
      return false;
    if (!(this.j16_1 === other.j16_1))
      return false;
    return true;
  };
  protoOf(JsonLiteral).hashCode = function () {
    var result = getBooleanHashCode(this.h16_1);
    result = imul(31, result) + getStringHashCode(this.j16_1) | 0;
    return result;
  };
  function Companion_2() {
  }
  var Companion_instance_2;
  function Companion_getInstance_6() {
    return Companion_instance_2;
  }
  function JsonArray(content) {
    JsonElement.call(this);
    this.k16_1 = content;
  }
  protoOf(JsonArray).equals = function (other) {
    return equals(this.k16_1, other);
  };
  protoOf(JsonArray).hashCode = function () {
    return hashCode(this.k16_1);
  };
  protoOf(JsonArray).toString = function () {
    return joinToString(this.k16_1, ',', '[', ']');
  };
  protoOf(JsonArray).l16 = function (element) {
    return this.k16_1.r1(element);
  };
  protoOf(JsonArray).r1 = function (element) {
    if (!(element instanceof JsonElement))
      return false;
    return this.l16(element instanceof JsonElement ? element : THROW_CCE());
  };
  protoOf(JsonArray).m16 = function (elements) {
    return this.k16_1.s1(elements);
  };
  protoOf(JsonArray).s1 = function (elements) {
    return this.m16(elements);
  };
  protoOf(JsonArray).o = function (index) {
    return this.k16_1.o(index);
  };
  protoOf(JsonArray).n = function () {
    return this.k16_1.n();
  };
  protoOf(JsonArray).j = function () {
    return this.k16_1.j();
  };
  protoOf(JsonArray).m = function () {
    return this.k16_1.m();
  };
  function get_booleanOrNull(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    return toBooleanStrictOrNull_0(_this__u8e3s4.f16());
  }
  function get_int(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    // Inline function 'kotlinx.serialization.json.mapExceptions' call
    var tmp;
    try {
      // Inline function 'kotlinx.serialization.json.<get-int>.<anonymous>' call
      tmp = (new StringJsonLexer(_this__u8e3s4.f16())).n16();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof JsonDecodingException) {
        var e = $p;
        throw NumberFormatException_init_$Create$(e.message);
      } else {
        throw $p;
      }
    }
    var result = tmp;
    // Inline function 'kotlin.ranges.contains' call
    var this_0 = numberRangeToNumber(-2147483648, 2147483647);
    if (!contains(isInterface(this_0, ClosedRange) ? this_0 : THROW_CCE(), result))
      throw NumberFormatException_init_$Create$(_this__u8e3s4.f16() + ' is not an Int');
    return result.b1();
  }
  function get_long(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    // Inline function 'kotlinx.serialization.json.mapExceptions' call
    var tmp;
    try {
      // Inline function 'kotlinx.serialization.json.<get-long>.<anonymous>' call
      tmp = (new StringJsonLexer(_this__u8e3s4.f16())).n16();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof JsonDecodingException) {
        var e = $p;
        throw NumberFormatException_init_$Create$(e.message);
      } else {
        throw $p;
      }
    }
    return tmp;
  }
  function get_float(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    // Inline function 'kotlin.text.toFloat' call
    var this_0 = _this__u8e3s4.f16();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return toDouble(this_0);
  }
  function get_double(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    return toDouble(_this__u8e3s4.f16());
  }
  function get_contentOrNull(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    var tmp;
    if (_this__u8e3s4 instanceof JsonNull) {
      tmp = null;
    } else {
      tmp = _this__u8e3s4.f16();
    }
    return tmp;
  }
  function get_jsonPrimitive(_this__u8e3s4) {
    _init_properties_JsonElement_kt__7cbdc2();
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof JsonPrimitive ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      error(_this__u8e3s4, 'JsonPrimitive');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function error(_this__u8e3s4, element) {
    _init_properties_JsonElement_kt__7cbdc2();
    throw IllegalArgumentException_init_$Create$('Element ' + toString(getKClassFromExpression(_this__u8e3s4)) + ' is not a ' + element);
  }
  var properties_initialized_JsonElement_kt_abxy8s;
  function _init_properties_JsonElement_kt__7cbdc2() {
    if (!properties_initialized_JsonElement_kt_abxy8s) {
      properties_initialized_JsonElement_kt_abxy8s = true;
      jsonUnquotedLiteralDescriptor = InlinePrimitiveDescriptor('kotlinx.serialization.json.JsonUnquotedLiteral', serializer(StringCompanionObject_instance));
    }
  }
  function JsonElementSerializer$descriptor$lambda($this$buildSerialDescriptor) {
    $this$buildSerialDescriptor.gj('JsonPrimitive', defer(JsonElementSerializer$descriptor$lambda$lambda));
    $this$buildSerialDescriptor.gj('JsonNull', defer(JsonElementSerializer$descriptor$lambda$lambda_0));
    $this$buildSerialDescriptor.gj('JsonLiteral', defer(JsonElementSerializer$descriptor$lambda$lambda_1));
    $this$buildSerialDescriptor.gj('JsonObject', defer(JsonElementSerializer$descriptor$lambda$lambda_2));
    $this$buildSerialDescriptor.gj('JsonArray', defer(JsonElementSerializer$descriptor$lambda$lambda_3));
    return Unit_instance;
  }
  function JsonElementSerializer$descriptor$lambda$lambda() {
    return JsonPrimitiveSerializer_getInstance().o16_1;
  }
  function JsonElementSerializer$descriptor$lambda$lambda_0() {
    return JsonNullSerializer_getInstance().p16_1;
  }
  function JsonElementSerializer$descriptor$lambda$lambda_1() {
    return JsonLiteralSerializer_getInstance().q16_1;
  }
  function JsonElementSerializer$descriptor$lambda$lambda_2() {
    return JsonObjectSerializer_getInstance().r16_1;
  }
  function JsonElementSerializer$descriptor$lambda$lambda_3() {
    return JsonArraySerializer_getInstance().s16_1;
  }
  function JsonElementSerializer() {
    JsonElementSerializer_instance = this;
    var tmp = this;
    var tmp_0 = SEALED_getInstance();
    tmp.t16_1 = buildSerialDescriptor('kotlinx.serialization.json.JsonElement', tmp_0, [], JsonElementSerializer$descriptor$lambda);
  }
  protoOf(JsonElementSerializer).si = function () {
    return this.t16_1;
  };
  protoOf(JsonElementSerializer).u16 = function (encoder, value) {
    verify(encoder);
    if (value instanceof JsonPrimitive) {
      encoder.tn(JsonPrimitiveSerializer_getInstance(), value);
    } else {
      if (value instanceof JsonObject) {
        encoder.tn(JsonObjectSerializer_getInstance(), value);
      } else {
        if (value instanceof JsonArray) {
          encoder.tn(JsonArraySerializer_getInstance(), value);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
  };
  protoOf(JsonElementSerializer).ti = function (encoder, value) {
    return this.u16(encoder, value instanceof JsonElement ? value : THROW_CCE());
  };
  protoOf(JsonElementSerializer).ui = function (decoder) {
    var input = asJsonDecoder(decoder);
    return input.a16();
  };
  var JsonElementSerializer_instance;
  function JsonElementSerializer_getInstance() {
    if (JsonElementSerializer_instance == null)
      new JsonElementSerializer();
    return JsonElementSerializer_instance;
  }
  function JsonObjectDescriptor() {
    JsonObjectDescriptor_instance = this;
    this.v16_1 = MapSerializer(serializer(StringCompanionObject_instance), JsonElementSerializer_getInstance()).si();
    this.w16_1 = 'kotlinx.serialization.json.JsonObject';
  }
  protoOf(JsonObjectDescriptor).tj = function () {
    return this.w16_1;
  };
  protoOf(JsonObjectDescriptor).jk = function (index) {
    return this.v16_1.jk(index);
  };
  protoOf(JsonObjectDescriptor).kk = function (name) {
    return this.v16_1.kk(name);
  };
  protoOf(JsonObjectDescriptor).lk = function (index) {
    return this.v16_1.lk(index);
  };
  protoOf(JsonObjectDescriptor).mk = function (index) {
    return this.v16_1.mk(index);
  };
  protoOf(JsonObjectDescriptor).nk = function (index) {
    return this.v16_1.nk(index);
  };
  protoOf(JsonObjectDescriptor).fk = function () {
    return this.v16_1.fk();
  };
  protoOf(JsonObjectDescriptor).bk = function () {
    return this.v16_1.bk();
  };
  protoOf(JsonObjectDescriptor).gk = function () {
    return this.v16_1.gk();
  };
  protoOf(JsonObjectDescriptor).hk = function () {
    return this.v16_1.hk();
  };
  protoOf(JsonObjectDescriptor).ik = function () {
    return this.v16_1.ik();
  };
  var JsonObjectDescriptor_instance;
  function JsonObjectDescriptor_getInstance() {
    if (JsonObjectDescriptor_instance == null)
      new JsonObjectDescriptor();
    return JsonObjectDescriptor_instance;
  }
  function JsonObjectSerializer() {
    JsonObjectSerializer_instance = this;
    this.r16_1 = JsonObjectDescriptor_getInstance();
  }
  protoOf(JsonObjectSerializer).si = function () {
    return this.r16_1;
  };
  protoOf(JsonObjectSerializer).x16 = function (encoder, value) {
    verify(encoder);
    MapSerializer(serializer(StringCompanionObject_instance), JsonElementSerializer_getInstance()).ti(encoder, value);
  };
  protoOf(JsonObjectSerializer).ti = function (encoder, value) {
    return this.x16(encoder, value instanceof JsonObject ? value : THROW_CCE());
  };
  protoOf(JsonObjectSerializer).ui = function (decoder) {
    verify_0(decoder);
    return new JsonObject(MapSerializer(serializer(StringCompanionObject_instance), JsonElementSerializer_getInstance()).ui(decoder));
  };
  var JsonObjectSerializer_instance;
  function JsonObjectSerializer_getInstance() {
    if (JsonObjectSerializer_instance == null)
      new JsonObjectSerializer();
    return JsonObjectSerializer_instance;
  }
  function JsonArrayDescriptor() {
    JsonArrayDescriptor_instance = this;
    this.y16_1 = ListSerializer(JsonElementSerializer_getInstance()).si();
    this.z16_1 = 'kotlinx.serialization.json.JsonArray';
  }
  protoOf(JsonArrayDescriptor).tj = function () {
    return this.z16_1;
  };
  protoOf(JsonArrayDescriptor).jk = function (index) {
    return this.y16_1.jk(index);
  };
  protoOf(JsonArrayDescriptor).kk = function (name) {
    return this.y16_1.kk(name);
  };
  protoOf(JsonArrayDescriptor).lk = function (index) {
    return this.y16_1.lk(index);
  };
  protoOf(JsonArrayDescriptor).mk = function (index) {
    return this.y16_1.mk(index);
  };
  protoOf(JsonArrayDescriptor).nk = function (index) {
    return this.y16_1.nk(index);
  };
  protoOf(JsonArrayDescriptor).fk = function () {
    return this.y16_1.fk();
  };
  protoOf(JsonArrayDescriptor).bk = function () {
    return this.y16_1.bk();
  };
  protoOf(JsonArrayDescriptor).gk = function () {
    return this.y16_1.gk();
  };
  protoOf(JsonArrayDescriptor).hk = function () {
    return this.y16_1.hk();
  };
  protoOf(JsonArrayDescriptor).ik = function () {
    return this.y16_1.ik();
  };
  var JsonArrayDescriptor_instance;
  function JsonArrayDescriptor_getInstance() {
    if (JsonArrayDescriptor_instance == null)
      new JsonArrayDescriptor();
    return JsonArrayDescriptor_instance;
  }
  function JsonArraySerializer() {
    JsonArraySerializer_instance = this;
    this.s16_1 = JsonArrayDescriptor_getInstance();
  }
  protoOf(JsonArraySerializer).si = function () {
    return this.s16_1;
  };
  protoOf(JsonArraySerializer).a17 = function (encoder, value) {
    verify(encoder);
    ListSerializer(JsonElementSerializer_getInstance()).ti(encoder, value);
  };
  protoOf(JsonArraySerializer).ti = function (encoder, value) {
    return this.a17(encoder, value instanceof JsonArray ? value : THROW_CCE());
  };
  protoOf(JsonArraySerializer).ui = function (decoder) {
    verify_0(decoder);
    return new JsonArray(ListSerializer(JsonElementSerializer_getInstance()).ui(decoder));
  };
  var JsonArraySerializer_instance;
  function JsonArraySerializer_getInstance() {
    if (JsonArraySerializer_instance == null)
      new JsonArraySerializer();
    return JsonArraySerializer_instance;
  }
  function defer(deferred) {
    return new defer$1(deferred);
  }
  function JsonPrimitiveSerializer() {
    JsonPrimitiveSerializer_instance = this;
    this.o16_1 = buildSerialDescriptor('kotlinx.serialization.json.JsonPrimitive', STRING_getInstance(), []);
  }
  protoOf(JsonPrimitiveSerializer).si = function () {
    return this.o16_1;
  };
  protoOf(JsonPrimitiveSerializer).b17 = function (encoder, value) {
    verify(encoder);
    var tmp;
    if (value instanceof JsonNull) {
      encoder.tn(JsonNullSerializer_getInstance(), JsonNull_getInstance());
      tmp = Unit_instance;
    } else {
      var tmp_0 = JsonLiteralSerializer_getInstance();
      encoder.tn(tmp_0, value instanceof JsonLiteral ? value : THROW_CCE());
      tmp = Unit_instance;
    }
    return tmp;
  };
  protoOf(JsonPrimitiveSerializer).ti = function (encoder, value) {
    return this.b17(encoder, value instanceof JsonPrimitive ? value : THROW_CCE());
  };
  protoOf(JsonPrimitiveSerializer).ui = function (decoder) {
    var result = asJsonDecoder(decoder).a16();
    if (!(result instanceof JsonPrimitive))
      throw JsonDecodingException_0(-1, 'Unexpected JSON element, expected JsonPrimitive, had ' + toString(getKClassFromExpression(result)), toString(result));
    return result;
  };
  var JsonPrimitiveSerializer_instance;
  function JsonPrimitiveSerializer_getInstance() {
    if (JsonPrimitiveSerializer_instance == null)
      new JsonPrimitiveSerializer();
    return JsonPrimitiveSerializer_instance;
  }
  function JsonNullSerializer() {
    JsonNullSerializer_instance = this;
    this.p16_1 = buildSerialDescriptor('kotlinx.serialization.json.JsonNull', ENUM_getInstance(), []);
  }
  protoOf(JsonNullSerializer).si = function () {
    return this.p16_1;
  };
  protoOf(JsonNullSerializer).c17 = function (encoder, value) {
    verify(encoder);
    encoder.wm();
  };
  protoOf(JsonNullSerializer).ti = function (encoder, value) {
    return this.c17(encoder, value instanceof JsonNull ? value : THROW_CCE());
  };
  protoOf(JsonNullSerializer).ui = function (decoder) {
    verify_0(decoder);
    if (decoder.ml()) {
      throw new JsonDecodingException("Expected 'null' literal");
    }
    decoder.nl();
    return JsonNull_getInstance();
  };
  var JsonNullSerializer_instance;
  function JsonNullSerializer_getInstance() {
    if (JsonNullSerializer_instance == null)
      new JsonNullSerializer();
    return JsonNullSerializer_instance;
  }
  function JsonLiteralSerializer() {
    JsonLiteralSerializer_instance = this;
    this.q16_1 = PrimitiveSerialDescriptor('kotlinx.serialization.json.JsonLiteral', STRING_getInstance());
  }
  protoOf(JsonLiteralSerializer).si = function () {
    return this.q16_1;
  };
  protoOf(JsonLiteralSerializer).d17 = function (encoder, value) {
    verify(encoder);
    if (value.h16_1) {
      return encoder.fn(value.j16_1);
    }
    if (!(value.i16_1 == null)) {
      return encoder.hn(value.i16_1).fn(value.j16_1);
    }
    var tmp0_safe_receiver = toLongOrNull(value.j16_1);
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return encoder.bn(tmp0_safe_receiver);
    }
    var tmp1_safe_receiver = toULongOrNull(value.j16_1);
    var tmp = tmp1_safe_receiver;
    if ((tmp == null ? null : new ULong(tmp)) == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      var tmp_0 = tmp1_safe_receiver;
      // Inline function 'kotlin.contracts.contract' call
      var it = (tmp_0 == null ? null : new ULong(tmp_0)).ai_1;
      var tmp_1 = encoder.hn(serializer_0(Companion_getInstance()).si());
      // Inline function 'kotlin.ULong.toLong' call
      var tmp$ret$1 = _ULong___get_data__impl__fggpzb(it);
      tmp_1.bn(tmp$ret$1);
      return Unit_instance;
    }
    var tmp2_safe_receiver = toDoubleOrNull(value.j16_1);
    if (tmp2_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return encoder.dn(tmp2_safe_receiver);
    }
    var tmp3_safe_receiver = toBooleanStrictOrNull(value.j16_1);
    if (tmp3_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return encoder.xm(tmp3_safe_receiver);
    }
    encoder.fn(value.j16_1);
  };
  protoOf(JsonLiteralSerializer).ti = function (encoder, value) {
    return this.d17(encoder, value instanceof JsonLiteral ? value : THROW_CCE());
  };
  protoOf(JsonLiteralSerializer).ui = function (decoder) {
    var result = asJsonDecoder(decoder).a16();
    if (!(result instanceof JsonLiteral))
      throw JsonDecodingException_0(-1, 'Unexpected JSON element, expected JsonLiteral, had ' + toString(getKClassFromExpression(result)), toString(result));
    return result;
  };
  var JsonLiteralSerializer_instance;
  function JsonLiteralSerializer_getInstance() {
    if (JsonLiteralSerializer_instance == null)
      new JsonLiteralSerializer();
    return JsonLiteralSerializer_instance;
  }
  function verify(encoder) {
    asJsonEncoder(encoder);
  }
  function asJsonDecoder(_this__u8e3s4) {
    var tmp0_elvis_lhs = isInterface(_this__u8e3s4, JsonDecoder) ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('This serializer can be used only with Json format.' + ('Expected Decoder to be JsonDecoder, got ' + toString(getKClassFromExpression(_this__u8e3s4))));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function verify_0(decoder) {
    asJsonDecoder(decoder);
  }
  function asJsonEncoder(_this__u8e3s4) {
    var tmp0_elvis_lhs = isInterface(_this__u8e3s4, JsonEncoder) ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('This serializer can be used only with Json format.' + ('Expected Encoder to be JsonEncoder, got ' + toString(getKClassFromExpression(_this__u8e3s4))));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function _get_original__l7ku1m($this) {
    // Inline function 'kotlin.getValue' call
    var this_0 = $this.e17_1;
    original$factory();
    return this_0.u1();
  }
  function defer$1($deferred) {
    this.e17_1 = lazy($deferred);
  }
  protoOf(defer$1).tj = function () {
    return _get_original__l7ku1m(this).tj();
  };
  protoOf(defer$1).fk = function () {
    return _get_original__l7ku1m(this).fk();
  };
  protoOf(defer$1).hk = function () {
    return _get_original__l7ku1m(this).hk();
  };
  protoOf(defer$1).jk = function (index) {
    return _get_original__l7ku1m(this).jk(index);
  };
  protoOf(defer$1).kk = function (name) {
    return _get_original__l7ku1m(this).kk(name);
  };
  protoOf(defer$1).lk = function (index) {
    return _get_original__l7ku1m(this).lk(index);
  };
  protoOf(defer$1).mk = function (index) {
    return _get_original__l7ku1m(this).mk(index);
  };
  protoOf(defer$1).nk = function (index) {
    return _get_original__l7ku1m(this).nk(index);
  };
  function original$factory() {
    return getPropertyCallableRef('original', 1, KProperty1, function (receiver) {
      return _get_original__l7ku1m(receiver);
    }, null);
  }
  function JsonEncoder() {
  }
  function Composer(writer) {
    this.f17_1 = writer;
    this.g17_1 = true;
  }
  protoOf(Composer).h17 = function () {
    this.g17_1 = true;
  };
  protoOf(Composer).i17 = function () {
    return Unit_instance;
  };
  protoOf(Composer).j17 = function () {
    this.g17_1 = false;
  };
  protoOf(Composer).k17 = function () {
    this.g17_1 = false;
  };
  protoOf(Composer).l17 = function () {
    return Unit_instance;
  };
  protoOf(Composer).m17 = function (v) {
    return this.f17_1.n17(v);
  };
  protoOf(Composer).o17 = function (v) {
    return this.f17_1.p17(v);
  };
  protoOf(Composer).q17 = function (v) {
    return this.f17_1.p17(v.toString());
  };
  protoOf(Composer).r17 = function (v) {
    return this.f17_1.p17(v.toString());
  };
  protoOf(Composer).s17 = function (v) {
    return this.f17_1.t17(toLong(v));
  };
  protoOf(Composer).u17 = function (v) {
    return this.f17_1.t17(toLong(v));
  };
  protoOf(Composer).v17 = function (v) {
    return this.f17_1.t17(toLong(v));
  };
  protoOf(Composer).w17 = function (v) {
    return this.f17_1.t17(v);
  };
  protoOf(Composer).x17 = function (v) {
    return this.f17_1.p17(v.toString());
  };
  protoOf(Composer).y17 = function (value) {
    return this.f17_1.z17(value);
  };
  function Composer_0(sb, json) {
    return json.v13_1.m15_1 ? new ComposerWithPrettyPrint(sb, json) : new Composer(sb);
  }
  function ComposerForUnsignedNumbers(writer, forceQuoting) {
    Composer.call(this, writer);
    this.c18_1 = forceQuoting;
  }
  protoOf(ComposerForUnsignedNumbers).v17 = function (v) {
    if (this.c18_1) {
      // Inline function 'kotlin.toUInt' call
      var tmp$ret$0 = _UInt___init__impl__l7qpdl(v);
      this.y17(UInt__toString_impl_dbgl21(tmp$ret$0));
    } else {
      // Inline function 'kotlin.toUInt' call
      var tmp$ret$1 = _UInt___init__impl__l7qpdl(v);
      this.o17(UInt__toString_impl_dbgl21(tmp$ret$1));
    }
  };
  protoOf(ComposerForUnsignedNumbers).w17 = function (v) {
    if (this.c18_1) {
      // Inline function 'kotlin.toULong' call
      var tmp$ret$0 = _ULong___init__impl__c78o9k(v);
      this.y17(ULong__toString_impl_f9au7k(tmp$ret$0));
    } else {
      // Inline function 'kotlin.toULong' call
      var tmp$ret$1 = _ULong___init__impl__c78o9k(v);
      this.o17(ULong__toString_impl_f9au7k(tmp$ret$1));
    }
  };
  protoOf(ComposerForUnsignedNumbers).s17 = function (v) {
    if (this.c18_1) {
      // Inline function 'kotlin.toUByte' call
      var tmp$ret$0 = _UByte___init__impl__g9hnc4(v);
      this.y17(UByte__toString_impl_v72jg(tmp$ret$0));
    } else {
      // Inline function 'kotlin.toUByte' call
      var tmp$ret$1 = _UByte___init__impl__g9hnc4(v);
      this.o17(UByte__toString_impl_v72jg(tmp$ret$1));
    }
  };
  protoOf(ComposerForUnsignedNumbers).u17 = function (v) {
    if (this.c18_1) {
      // Inline function 'kotlin.toUShort' call
      var tmp$ret$0 = _UShort___init__impl__jigrne(v);
      this.y17(UShort__toString_impl_edaoee(tmp$ret$0));
    } else {
      // Inline function 'kotlin.toUShort' call
      var tmp$ret$1 = _UShort___init__impl__jigrne(v);
      this.o17(UShort__toString_impl_edaoee(tmp$ret$1));
    }
  };
  function ComposerForUnquotedLiterals(writer, forceQuoting) {
    Composer.call(this, writer);
    this.f18_1 = forceQuoting;
  }
  protoOf(ComposerForUnquotedLiterals).y17 = function (value) {
    if (this.f18_1) {
      protoOf(Composer).y17.call(this, value);
    } else {
      protoOf(Composer).o17.call(this, value);
    }
  };
  function ComposerWithPrettyPrint(writer, json) {
    Composer.call(this, writer);
    this.i18_1 = json;
    this.j18_1 = 0;
  }
  protoOf(ComposerWithPrettyPrint).h17 = function () {
    this.g17_1 = true;
    this.j18_1 = this.j18_1 + 1 | 0;
  };
  protoOf(ComposerWithPrettyPrint).i17 = function () {
    this.j18_1 = this.j18_1 - 1 | 0;
  };
  protoOf(ComposerWithPrettyPrint).j17 = function () {
    this.g17_1 = false;
    this.o17('\n');
    // Inline function 'kotlin.repeat' call
    var times = this.j18_1;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlinx.serialization.json.internal.ComposerWithPrettyPrint.nextItem.<anonymous>' call
        this.o17(this.i18_1.v13_1.o15_1);
      }
       while (inductionVariable < times);
  };
  protoOf(ComposerWithPrettyPrint).k17 = function () {
    if (this.g17_1)
      this.g17_1 = false;
    else {
      this.j17();
    }
  };
  protoOf(ComposerWithPrettyPrint).l17 = function () {
    this.m17(_Char___init__impl__6a9atx(32));
  };
  function readIfAbsent($this, descriptor, index) {
    $this.l18_1 = (!descriptor.nk(index) && descriptor.mk(index).bk());
    return $this.l18_1;
  }
  function JsonElementMarker$readIfAbsent$ref($boundThis) {
    var l = function (p0, p1) {
      return readIfAbsent($boundThis, p0, p1);
    };
    l.callableName = 'readIfAbsent';
    return l;
  }
  function JsonElementMarker(descriptor) {
    var tmp = this;
    tmp.k18_1 = new ElementMarker(descriptor, JsonElementMarker$readIfAbsent$ref(this));
    this.l18_1 = false;
  }
  protoOf(JsonElementMarker).m18 = function (index) {
    this.k18_1.hs(index);
  };
  protoOf(JsonElementMarker).n18 = function () {
    return this.k18_1.is();
  };
  function invalidTrailingComma(_this__u8e3s4, entity) {
    entity = entity === VOID ? 'object' : entity;
    _this__u8e3s4.o18('Trailing comma before the end of JSON ' + entity, _this__u8e3s4.k14_1 - 1 | 0, "Trailing commas are non-complaint JSON and not allowed by default. Use 'allowTrailingCommas = true' in 'Json {}' builder to support them.");
  }
  function throwInvalidFloatingPointDecoded(_this__u8e3s4, result) {
    _this__u8e3s4.p18('Unexpected special floating-point value ' + toString(result) + '. By default, ' + 'non-finite floating point values are prohibited because they do not conform JSON specification', VOID, "It is possible to deserialize them using 'JsonBuilder.allowSpecialFloatingPointValues = true'");
  }
  function JsonEncodingException(message) {
    JsonException.call(this, message);
    captureStack(this, JsonEncodingException);
  }
  function InvalidKeyKindException(keyDescriptor) {
    return new JsonEncodingException("Value of type '" + keyDescriptor.tj() + "' can't be used in JSON as a key in the map. " + ("It should have either primitive or enum kind, but its kind is '" + keyDescriptor.fk().toString() + "'.\n") + "Use 'allowStructuredMapKeys = true' in 'Json {}' builder to convert such maps to [key1, value1, key2, value2,...] arrays.");
  }
  function JsonDecodingException(message) {
    JsonException.call(this, message);
    captureStack(this, JsonDecodingException);
  }
  function JsonDecodingException_0(offset, message, input) {
    return JsonDecodingException_1(offset, message + '\nJSON input: ' + toString(minify(input, offset)));
  }
  function InvalidFloatingPointDecoded(value, key, output) {
    return JsonDecodingException_1(-1, unexpectedFpErrorMessage(value, key, output));
  }
  function UnknownKeyException(key, input) {
    return JsonDecodingException_1(-1, "Encountered an unknown key '" + key + "'.\n" + "Use 'ignoreUnknownKeys = true' in 'Json {}' builder to ignore unknown keys.\n" + ('Current input: ' + toString(minify(input))));
  }
  function InvalidFloatingPointEncoded(value, output) {
    return new JsonEncodingException('Unexpected special floating-point value ' + toString(value) + '. By default, ' + 'non-finite floating point values are prohibited because they do not conform JSON specification. ' + "It is possible to deserialize them using 'JsonBuilder.allowSpecialFloatingPointValues = true'\n" + ('Current output: ' + toString(minify(output))));
  }
  function JsonException(message) {
    SerializationException_init_$Init$(message, this);
    captureStack(this, JsonException);
  }
  function unexpectedFpErrorMessage(value, key, output) {
    return 'Unexpected special floating-point value ' + toString(value) + ' with key ' + key + '. By default, ' + 'non-finite floating point values are prohibited because they do not conform JSON specification. ' + "It is possible to deserialize them using 'JsonBuilder.allowSpecialFloatingPointValues = true'\n" + ('Current output: ' + toString(minify(output)));
  }
  function JsonDecodingException_1(offset, message) {
    return new JsonDecodingException(offset >= 0 ? 'Unexpected JSON token at offset ' + offset + ': ' + message : message);
  }
  function minify(_this__u8e3s4, offset) {
    offset = offset === VOID ? -1 : offset;
    if (charSequenceLength(_this__u8e3s4) < 200)
      return _this__u8e3s4;
    if (offset === -1) {
      var start = charSequenceLength(_this__u8e3s4) - 60 | 0;
      if (start <= 0)
        return _this__u8e3s4;
      // Inline function 'kotlin.text.substring' call
      var endIndex = charSequenceLength(_this__u8e3s4);
      return '.....' + toString(charSequenceSubSequence(_this__u8e3s4, start, endIndex));
    }
    var start_0 = offset - 30 | 0;
    var end = offset + 30 | 0;
    var prefix = start_0 <= 0 ? '' : '.....';
    var suffix = end >= charSequenceLength(_this__u8e3s4) ? '' : '.....';
    // Inline function 'kotlin.text.substring' call
    var startIndex = coerceAtLeast(start_0, 0);
    var endIndex_0 = coerceAtMost(end, charSequenceLength(_this__u8e3s4));
    return prefix + toString(charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex_0)) + suffix;
  }
  function get_JsonDeserializationNamesKey() {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    return JsonDeserializationNamesKey;
  }
  var JsonDeserializationNamesKey;
  function get_JsonSerializationNamesKey() {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    return JsonSerializationNamesKey;
  }
  var JsonSerializationNamesKey;
  function getJsonNameIndex(_this__u8e3s4, json, name) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    if (decodeCaseInsensitive(json, _this__u8e3s4)) {
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$1 = name.toLowerCase();
      return getJsonNameIndexSlowPath(_this__u8e3s4, json, tmp$ret$1);
    }
    var strategy = namingStrategy(_this__u8e3s4, json);
    if (!(strategy == null))
      return getJsonNameIndexSlowPath(_this__u8e3s4, json, name);
    var index = _this__u8e3s4.kk(name);
    if (!(index === -3))
      return index;
    if (!json.v13_1.t15_1)
      return index;
    return getJsonNameIndexSlowPath(_this__u8e3s4, json, name);
  }
  function getJsonNameIndexOrThrow(_this__u8e3s4, json, name, suffix) {
    suffix = suffix === VOID ? '' : suffix;
    _init_properties_JsonNamesMap_kt__cbbp0k();
    var index = getJsonNameIndex(_this__u8e3s4, json, name);
    if (index === -3)
      throw SerializationException_init_$Create$(_this__u8e3s4.tj() + " does not contain element with name '" + name + "'" + suffix);
    return index;
  }
  function getJsonElementName(_this__u8e3s4, json, index) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    var strategy = namingStrategy(_this__u8e3s4, json);
    return strategy == null ? _this__u8e3s4.jk(index) : serializationNamesIndices(_this__u8e3s4, json, strategy)[index];
  }
  function namingStrategy(_this__u8e3s4, json) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    return equals(_this__u8e3s4.fk(), CLASS_getInstance()) ? json.v13_1.u15_1 : null;
  }
  function deserializationNamesMap(_this__u8e3s4, descriptor) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    var tmp = get_schemaCache(_this__u8e3s4);
    var tmp_0 = get_JsonDeserializationNamesKey();
    return tmp.r18(descriptor, tmp_0, deserializationNamesMap$lambda(descriptor, _this__u8e3s4));
  }
  function decodeCaseInsensitive(_this__u8e3s4, descriptor) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    return _this__u8e3s4.v13_1.v15_1 && equals(descriptor.fk(), ENUM_getInstance());
  }
  function getJsonNameIndexSlowPath(_this__u8e3s4, json, name) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    var tmp0_elvis_lhs = deserializationNamesMap(json, _this__u8e3s4).x1(name);
    return tmp0_elvis_lhs == null ? -3 : tmp0_elvis_lhs;
  }
  function serializationNamesIndices(_this__u8e3s4, json, strategy) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    var tmp = get_schemaCache(json);
    var tmp_0 = get_JsonSerializationNamesKey();
    return tmp.r18(_this__u8e3s4, tmp_0, serializationNamesIndices$lambda(_this__u8e3s4, strategy));
  }
  function buildDeserializationNamesMap(_this__u8e3s4, json) {
    _init_properties_JsonNamesMap_kt__cbbp0k();
    // Inline function 'kotlin.collections.mutableMapOf' call
    var builder = LinkedHashMap_init_$Create$();
    var useLowercaseEnums = decodeCaseInsensitive(json, _this__u8e3s4);
    var strategyForClasses = namingStrategy(_this__u8e3s4, json);
    var inductionVariable = 0;
    var last = _this__u8e3s4.hk();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.filterIsInstance' call
        // Inline function 'kotlin.collections.filterIsInstanceTo' call
        var this_0 = _this__u8e3s4.lk(i);
        var destination = ArrayList_init_$Create$();
        var tmp0_iterator = this_0.j();
        while (tmp0_iterator.k()) {
          var element = tmp0_iterator.l();
          if (element instanceof JsonNames) {
            destination.e(element);
          }
        }
        var tmp0_safe_receiver = singleOrNull(destination);
        var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.s18_1;
        if (tmp1_safe_receiver == null)
          null;
        else {
          // Inline function 'kotlin.collections.forEach' call
          var inductionVariable_0 = 0;
          var last_0 = tmp1_safe_receiver.length;
          while (inductionVariable_0 < last_0) {
            var element_0 = tmp1_safe_receiver[inductionVariable_0];
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlinx.serialization.json.internal.buildDeserializationNamesMap.<anonymous>' call
            var tmp;
            if (useLowercaseEnums) {
              // Inline function 'kotlin.text.lowercase' call
              // Inline function 'kotlin.js.asDynamic' call
              tmp = element_0.toLowerCase();
            } else {
              tmp = element_0;
            }
            buildDeserializationNamesMap$putOrThrow(builder, _this__u8e3s4, tmp, i);
          }
        }
        var tmp_0;
        if (useLowercaseEnums) {
          // Inline function 'kotlin.text.lowercase' call
          // Inline function 'kotlin.js.asDynamic' call
          tmp_0 = _this__u8e3s4.jk(i).toLowerCase();
        } else if (!(strategyForClasses == null)) {
          tmp_0 = strategyForClasses.t18(_this__u8e3s4, i, _this__u8e3s4.jk(i));
        } else {
          tmp_0 = null;
        }
        var nameToPut = tmp_0;
        if (nameToPut == null)
          null;
        else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          buildDeserializationNamesMap$putOrThrow(builder, _this__u8e3s4, nameToPut, i);
        }
      }
       while (inductionVariable < last);
    // Inline function 'kotlin.collections.ifEmpty' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp_1;
    if (builder.n()) {
      // Inline function 'kotlinx.serialization.json.internal.buildDeserializationNamesMap.<anonymous>' call
      tmp_1 = emptyMap();
    } else {
      tmp_1 = builder;
    }
    return tmp_1;
  }
  function buildDeserializationNamesMap$putOrThrow(_this__u8e3s4, $this_buildDeserializationNamesMap, name, index) {
    var entity = equals($this_buildDeserializationNamesMap.fk(), ENUM_getInstance()) ? 'enum value' : 'property';
    // Inline function 'kotlin.collections.contains' call
    // Inline function 'kotlin.collections.containsKey' call
    if ((isInterface(_this__u8e3s4, KtMap) ? _this__u8e3s4 : THROW_CCE()).v1(name)) {
      throw new JsonException("The suggested name '" + name + "' for " + entity + ' ' + $this_buildDeserializationNamesMap.jk(index) + ' is already one of the names for ' + entity + ' ' + ($this_buildDeserializationNamesMap.jk(getValue(_this__u8e3s4, name)) + ' in ' + toString($this_buildDeserializationNamesMap)));
    }
    // Inline function 'kotlin.collections.set' call
    _this__u8e3s4.b2(name, index);
  }
  function deserializationNamesMap$lambda($descriptor, $this_deserializationNamesMap) {
    return function () {
      return buildDeserializationNamesMap($descriptor, $this_deserializationNamesMap);
    };
  }
  function serializationNamesIndices$lambda($this_serializationNamesIndices, $strategy) {
    return function () {
      var tmp = 0;
      var tmp_0 = $this_serializationNamesIndices.hk();
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_1 = fillArrayVal(Array(tmp_0), null);
      while (tmp < tmp_0) {
        var tmp_2 = tmp;
        var baseName = $this_serializationNamesIndices.jk(tmp_2);
        tmp_1[tmp_2] = $strategy.t18($this_serializationNamesIndices, tmp_2, baseName);
        tmp = tmp + 1 | 0;
      }
      return tmp_1;
    };
  }
  var properties_initialized_JsonNamesMap_kt_ljpf42;
  function _init_properties_JsonNamesMap_kt__cbbp0k() {
    if (!properties_initialized_JsonNamesMap_kt_ljpf42) {
      properties_initialized_JsonNamesMap_kt_ljpf42 = true;
      JsonDeserializationNamesKey = new Key();
      JsonSerializationNamesKey = new Key();
    }
  }
  function Tombstone() {
  }
  var Tombstone_instance;
  function Tombstone_getInstance() {
    return Tombstone_instance;
  }
  function resize($this) {
    var newSize = imul($this.w18_1, 2);
    $this.u18_1 = copyOf($this.u18_1, newSize);
    $this.v18_1 = copyOf_0($this.v18_1, newSize);
  }
  function JsonPath() {
    var tmp = this;
    // Inline function 'kotlin.arrayOfNulls' call
    tmp.u18_1 = fillArrayVal(Array(8), null);
    var tmp_0 = this;
    var tmp_1 = 0;
    var tmp_2 = new Int32Array(8);
    while (tmp_1 < 8) {
      tmp_2[tmp_1] = -1;
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp_0.v18_1 = tmp_2;
    this.w18_1 = -1;
  }
  protoOf(JsonPath).x18 = function (sd) {
    this.w18_1 = this.w18_1 + 1 | 0;
    var depth = this.w18_1;
    if (depth === this.u18_1.length) {
      resize(this);
    }
    this.u18_1[depth] = sd;
  };
  protoOf(JsonPath).y18 = function (index) {
    this.v18_1[this.w18_1] = index;
  };
  protoOf(JsonPath).z18 = function (key) {
    var tmp;
    if (!(this.v18_1[this.w18_1] === -2)) {
      this.w18_1 = this.w18_1 + 1 | 0;
      tmp = this.w18_1 === this.u18_1.length;
    } else {
      tmp = false;
    }
    if (tmp) {
      resize(this);
    }
    this.u18_1[this.w18_1] = key;
    this.v18_1[this.w18_1] = -2;
  };
  protoOf(JsonPath).a19 = function () {
    if (this.v18_1[this.w18_1] === -2) {
      this.u18_1[this.w18_1] = Tombstone_instance;
    }
  };
  protoOf(JsonPath).b19 = function () {
    var depth = this.w18_1;
    if (this.v18_1[depth] === -2) {
      this.v18_1[depth] = -1;
      this.w18_1 = this.w18_1 - 1 | 0;
    }
    if (!(this.w18_1 === -1)) {
      this.w18_1 = this.w18_1 - 1 | 0;
    }
  };
  protoOf(JsonPath).c19 = function () {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.serialization.json.internal.JsonPath.getPath.<anonymous>' call
    this_0.d7('$');
    // Inline function 'kotlin.repeat' call
    var times = this.w18_1 + 1 | 0;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlinx.serialization.json.internal.JsonPath.getPath.<anonymous>.<anonymous>' call
        var element = this.u18_1[index];
        if (!(element == null) ? isInterface(element, SerialDescriptor) : false) {
          if (equals(element.fk(), LIST_getInstance())) {
            if (!(this.v18_1[index] === -1)) {
              this_0.d7('[');
              this_0.ra(this.v18_1[index]);
              this_0.d7(']');
            }
          } else {
            var idx = this.v18_1[index];
            if (idx >= 0) {
              this_0.d7('.');
              this_0.d7(element.jk(idx));
            }
          }
        } else {
          if (!(element === Tombstone_instance)) {
            this_0.d7('[');
            this_0.d7("'");
            this_0.c7(element);
            this_0.d7("'");
            this_0.d7(']');
          }
        }
      }
       while (inductionVariable < times);
    return this_0.toString();
  };
  protoOf(JsonPath).toString = function () {
    return this.c19();
  };
  function encodeByWriter(json, writer, serializer, value) {
    var tmp = WriteMode_OBJ_getInstance();
    // Inline function 'kotlin.arrayOfNulls' call
    var size = get_entries().m();
    var tmp$ret$0 = fillArrayVal(Array(size), null);
    var encoder = StreamingJsonEncoder_init_$Create$(writer, json, tmp, tmp$ret$0);
    encoder.tn(serializer, value);
  }
  function readObject($this) {
    // Inline function 'kotlinx.serialization.json.internal.JsonTreeReader.readObjectImpl' call
    var lastToken = $this.m19_1.q19(6);
    if ($this.m19_1.r19() === 4) {
      $this.m19_1.p18('Unexpected leading comma');
    }
    // Inline function 'kotlin.collections.linkedMapOf' call
    var result = LinkedHashMap_init_$Create$();
    $l$loop: while ($this.m19_1.s19()) {
      var key = $this.n19_1 ? $this.m19_1.u19() : $this.m19_1.t19();
      $this.m19_1.q19(5);
      // Inline function 'kotlinx.serialization.json.internal.JsonTreeReader.readObject.<anonymous>' call
      var element = $this.v19();
      // Inline function 'kotlin.collections.set' call
      result.b2(key, element);
      lastToken = $this.m19_1.w19();
      var tmp0_subject = lastToken;
      if (tmp0_subject !== 4)
        if (tmp0_subject === 7)
          break $l$loop;
        else {
          $this.m19_1.p18('Expected end of the object or comma');
        }
    }
    if (lastToken === 6) {
      $this.m19_1.q19(7);
    } else if (lastToken === 4) {
      if (!$this.o19_1) {
        invalidTrailingComma($this.m19_1);
      }
      $this.m19_1.q19(7);
    }
    return new JsonObject(result);
  }
  function readObject_0(_this__u8e3s4, $this, $completion) {
    var tmp = new $readObjectCOROUTINE$0($this, _this__u8e3s4, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  }
  function readArray($this) {
    var lastToken = $this.m19_1.w19();
    if ($this.m19_1.r19() === 4) {
      $this.m19_1.p18('Unexpected leading comma');
    }
    // Inline function 'kotlin.collections.arrayListOf' call
    var result = ArrayList_init_$Create$();
    while ($this.m19_1.s19()) {
      var element = $this.v19();
      result.e(element);
      lastToken = $this.m19_1.w19();
      if (!(lastToken === 4)) {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.require' call
        var this_0 = $this.m19_1;
        var condition = lastToken === 9;
        var position = this_0.k14_1;
        if (!condition) {
          // Inline function 'kotlinx.serialization.json.internal.JsonTreeReader.readArray.<anonymous>' call
          var tmp$ret$1 = 'Expected end of the array or comma';
          this_0.p18(tmp$ret$1, position);
        }
      }
    }
    if (lastToken === 8) {
      $this.m19_1.q19(9);
    } else if (lastToken === 4) {
      if (!$this.o19_1) {
        invalidTrailingComma($this.m19_1, 'array');
      }
      $this.m19_1.q19(9);
    }
    return new JsonArray(result);
  }
  function readValue($this, isString) {
    var tmp;
    if ($this.n19_1 || !isString) {
      tmp = $this.m19_1.u19();
    } else {
      tmp = $this.m19_1.t19();
    }
    var string = tmp;
    if (!isString && string === 'null')
      return JsonNull_getInstance();
    return new JsonLiteral(string, isString);
  }
  function readDeepRecursive($this) {
    return invoke(new DeepRecursiveFunction(JsonTreeReader$readDeepRecursive$slambda_0($this, null)), Unit_instance);
  }
  function JsonTreeReader$readDeepRecursive$slambda(this$0, resultContinuation) {
    this.t1a_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(JsonTreeReader$readDeepRecursive$slambda).y1a = function ($this$DeepRecursiveFunction, it, $completion) {
    var tmp = this.z1a($this$DeepRecursiveFunction, it, $completion);
    tmp.a8_1 = Unit_instance;
    tmp.b8_1 = null;
    return tmp.g8();
  };
  protoOf(JsonTreeReader$readDeepRecursive$slambda).q8 = function (p1, p2, $completion) {
    var tmp = p1 instanceof DeepRecursiveScope ? p1 : THROW_CCE();
    return this.y1a(tmp, p2 instanceof Unit ? p2 : THROW_CCE(), $completion);
  };
  protoOf(JsonTreeReader$readDeepRecursive$slambda).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        switch (tmp) {
          case 0:
            this.z7_1 = 3;
            this.w1a_1 = this.t1a_1.m19_1.r19();
            if (this.w1a_1 === 1) {
              this.x1a_1 = readValue(this.t1a_1, true);
              this.y7_1 = 2;
              continue $sm;
            } else {
              if (this.w1a_1 === 0) {
                this.x1a_1 = readValue(this.t1a_1, false);
                this.y7_1 = 2;
                continue $sm;
              } else {
                if (this.w1a_1 === 6) {
                  this.y7_1 = 1;
                  suspendResult = readObject_0(this.u1a_1, this.t1a_1, this);
                  if (suspendResult === get_COROUTINE_SUSPENDED()) {
                    return suspendResult;
                  }
                  continue $sm;
                } else {
                  if (this.w1a_1 === 8) {
                    this.x1a_1 = readArray(this.t1a_1);
                    this.y7_1 = 2;
                    continue $sm;
                  } else {
                    var tmp_0 = this;
                    this.t1a_1.m19_1.p18("Can't begin reading element, unexpected token");
                  }
                }
              }
            }

            break;
          case 1:
            this.x1a_1 = suspendResult;
            this.y7_1 = 2;
            continue $sm;
          case 2:
            return this.x1a_1;
          case 3:
            throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.z7_1 === 3) {
          throw e;
        } else {
          this.y7_1 = this.z7_1;
          this.b8_1 = e;
        }
      }
     while (true);
  };
  protoOf(JsonTreeReader$readDeepRecursive$slambda).z1a = function ($this$DeepRecursiveFunction, it, completion) {
    var i = new JsonTreeReader$readDeepRecursive$slambda(this.t1a_1, completion);
    i.u1a_1 = $this$DeepRecursiveFunction;
    i.v1a_1 = it;
    return i;
  };
  function JsonTreeReader$readDeepRecursive$slambda_0(this$0, resultContinuation) {
    var i = new JsonTreeReader$readDeepRecursive$slambda(this$0, resultContinuation);
    var l = function ($this$DeepRecursiveFunction, it, $completion) {
      return i.y1a($this$DeepRecursiveFunction, it, $completion);
    };
    l.$arity = 2;
    return l;
  }
  function $readObjectCOROUTINE$0(_this__u8e3s4, _this__u8e3s4_0, resultContinuation) {
    CoroutineImpl.call(this, resultContinuation);
    this.f1a_1 = _this__u8e3s4;
    this.g1a_1 = _this__u8e3s4_0;
  }
  protoOf($readObjectCOROUTINE$0).g8 = function () {
    var suspendResult = this.a8_1;
    $sm: do
      try {
        var tmp = this.y7_1;
        switch (tmp) {
          case 0:
            this.z7_1 = 5;
            var tmp_0 = this;
            tmp_0.h1a_1 = this.f1a_1;
            this.i1a_1 = this.h1a_1.m19_1.q19(6);
            if (this.h1a_1.m19_1.r19() === 4) {
              this.h1a_1.m19_1.p18('Unexpected leading comma');
            }

            var tmp_1 = this;
            tmp_1.j1a_1 = LinkedHashMap_init_$Create$();
            this.y7_1 = 1;
            continue $sm;
          case 1:
            if (!this.h1a_1.m19_1.s19()) {
              this.y7_1 = 4;
              continue $sm;
            }

            this.k1a_1 = this.h1a_1.n19_1 ? this.h1a_1.m19_1.u19() : this.h1a_1.m19_1.t19();
            this.h1a_1.m19_1.q19(5);
            this.y7_1 = 2;
            suspendResult = this.g1a_1.bg(Unit_instance, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            var element = suspendResult;
            var this_0 = this.j1a_1;
            var key = this.k1a_1;
            this_0.b2(key, element);
            this.i1a_1 = this.h1a_1.m19_1.w19();
            var tmp0_subject = this.i1a_1;
            if (tmp0_subject === 4) {
              this.y7_1 = 3;
              continue $sm;
            } else {
              if (tmp0_subject === 7) {
                this.y7_1 = 4;
                continue $sm;
              } else {
                this.h1a_1.m19_1.p18('Expected end of the object or comma');
              }
            }

            break;
          case 3:
            this.y7_1 = 1;
            continue $sm;
          case 4:
            if (this.i1a_1 === 6) {
              this.h1a_1.m19_1.q19(7);
            } else if (this.i1a_1 === 4) {
              if (!this.h1a_1.o19_1) {
                invalidTrailingComma(this.h1a_1.m19_1);
              }
              this.h1a_1.m19_1.q19(7);
            }

            return new JsonObject(this.j1a_1);
          case 5:
            throw this.b8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.z7_1 === 5) {
          throw e;
        } else {
          this.y7_1 = this.z7_1;
          this.b8_1 = e;
        }
      }
     while (true);
  };
  function JsonTreeReader(configuration, lexer) {
    this.m19_1 = lexer;
    this.n19_1 = configuration.k15_1;
    this.o19_1 = configuration.w15_1;
    this.p19_1 = 0;
  }
  protoOf(JsonTreeReader).v19 = function () {
    var token = this.m19_1.r19();
    var tmp;
    if (token === 1) {
      tmp = readValue(this, true);
    } else if (token === 0) {
      tmp = readValue(this, false);
    } else if (token === 6) {
      var tmp_0;
      this.p19_1 = this.p19_1 + 1 | 0;
      if (this.p19_1 === 200) {
        tmp_0 = readDeepRecursive(this);
      } else {
        tmp_0 = readObject(this);
      }
      var result = tmp_0;
      this.p19_1 = this.p19_1 - 1 | 0;
      tmp = result;
    } else if (token === 8) {
      tmp = readArray(this);
    } else {
      this.m19_1.p18('Cannot read Json element because of unexpected ' + tokenDescription(token));
    }
    return tmp;
  };
  function classDiscriminator(_this__u8e3s4, json) {
    var _iterator__ex2g4s = _this__u8e3s4.ik().j();
    while (_iterator__ex2g4s.k()) {
      var annotation = _iterator__ex2g4s.l();
      if (annotation instanceof JsonClassDiscriminator)
        return annotation.a1b_1;
    }
    return json.v13_1.r15_1;
  }
  function validateIfSealed(serializer, actualSerializer, classDiscriminator) {
    if (!(serializer instanceof SealedClassSerializer))
      return Unit_instance;
    if (jsonCachedSerialNames(actualSerializer.si()).r1(classDiscriminator)) {
      var baseName = serializer.si().tj();
      var actualName = actualSerializer.si().tj();
      // Inline function 'kotlin.error' call
      var message = "Sealed class '" + actualName + "' cannot be serialized as base class '" + baseName + "' because" + (" it has property name that conflicts with JSON class discriminator '" + classDiscriminator + "'. ") + 'You can either change class discriminator in JsonConfiguration, ' + 'rename property with @SerialName annotation or fall back to array polymorphism';
      throw IllegalStateException_init_$Create$(toString(message));
    }
  }
  function checkKind(kind) {
    if (kind instanceof ENUM) {
      // Inline function 'kotlin.error' call
      var message = "Enums cannot be serialized polymorphically with 'type' parameter. You can use 'JsonBuilder.useArrayPolymorphism' instead";
      throw IllegalStateException_init_$Create$(toString(message));
    }
    if (kind instanceof PrimitiveKind) {
      // Inline function 'kotlin.error' call
      var message_0 = "Primitives cannot be serialized polymorphically with 'type' parameter. You can use 'JsonBuilder.useArrayPolymorphism' instead";
      throw IllegalStateException_init_$Create$(toString(message_0));
    }
    if (kind instanceof PolymorphicKind) {
      // Inline function 'kotlin.error' call
      var message_1 = 'Actual serializer for polymorphic cannot be polymorphic itself';
      throw IllegalStateException_init_$Create$(toString(message_1));
    }
  }
  function validateIfSealed$accessor$iffjvx(serializer, actualSerializer, classDiscriminator) {
    return validateIfSealed(serializer, actualSerializer, classDiscriminator);
  }
  function checkKind_0($this, descriptor, actualClass) {
    var kind = descriptor.fk();
    var tmp;
    if (kind instanceof PolymorphicKind) {
      tmp = true;
    } else {
      tmp = equals(kind, CONTEXTUAL_getInstance());
    }
    if (tmp) {
      throw IllegalArgumentException_init_$Create$('Serializer for ' + actualClass.f9() + " can't be registered as a subclass for polymorphic serialization " + ('because its kind ' + kind.toString() + ' is not concrete. To work with multiple hierarchies, register it as a base class.'));
    }
    if ($this.b1b_1)
      return Unit_instance;
    var tmp_0;
    var tmp_1;
    if (equals(kind, LIST_getInstance()) || equals(kind, MAP_getInstance())) {
      tmp_1 = true;
    } else {
      tmp_1 = kind instanceof PrimitiveKind;
    }
    if (tmp_1) {
      tmp_0 = true;
    } else {
      tmp_0 = kind instanceof ENUM;
    }
    if (tmp_0) {
      throw IllegalArgumentException_init_$Create$('Serializer for ' + actualClass.f9() + ' of kind ' + kind.toString() + ' cannot be serialized polymorphically with class discriminator.');
    }
  }
  function checkDiscriminatorCollisions($this, descriptor, actualClass) {
    var inductionVariable = 0;
    var last = descriptor.hk();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var name = descriptor.jk(i);
        if (name === $this.c1b_1) {
          throw IllegalArgumentException_init_$Create$('Polymorphic serializer for ' + toString(actualClass) + " has property '" + name + "' that conflicts " + 'with JSON class discriminator. You can either change class discriminator in JsonConfiguration, ' + 'rename property with @SerialName annotation ' + 'or fall back to array polymorphism');
        }
      }
       while (inductionVariable < last);
  }
  function PolymorphismValidator(useArrayPolymorphism, discriminator) {
    this.b1b_1 = useArrayPolymorphism;
    this.c1b_1 = discriminator;
  }
  protoOf(PolymorphismValidator).j13 = function (kClass, provider) {
  };
  protoOf(PolymorphismValidator).m13 = function (baseClass, actualClass, actualSerializer) {
    var descriptor = actualSerializer.si();
    checkKind_0(this, descriptor, actualClass);
    if (!this.b1b_1) {
      checkDiscriminatorCollisions(this, descriptor, actualClass);
    }
  };
  protoOf(PolymorphismValidator).n13 = function (baseClass, defaultSerializerProvider) {
  };
  protoOf(PolymorphismValidator).o13 = function (baseClass, defaultDeserializerProvider) {
  };
  function Key() {
  }
  function DescriptorSchemaCache() {
    this.q18_1 = createMapForCache(16);
  }
  protoOf(DescriptorSchemaCache).d1b = function (descriptor, key, value) {
    // Inline function 'kotlin.collections.set' call
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = this.q18_1;
    var value_0 = this_0.x1(descriptor);
    var tmp;
    if (value_0 == null) {
      // Inline function 'kotlinx.serialization.json.internal.DescriptorSchemaCache.set.<anonymous>' call
      var answer = createMapForCache(2);
      this_0.b2(descriptor, answer);
      tmp = answer;
    } else {
      tmp = value_0;
    }
    var this_1 = tmp;
    var key_0 = key instanceof Key ? key : THROW_CCE();
    var value_1 = !(value == null) ? value : THROW_CCE();
    this_1.b2(key_0, value_1);
  };
  protoOf(DescriptorSchemaCache).r18 = function (descriptor, key, defaultValue) {
    var tmp0_safe_receiver = this.e1b(descriptor, key);
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    var value = defaultValue();
    this.d1b(descriptor, key, value);
    return value;
  };
  protoOf(DescriptorSchemaCache).e1b = function (descriptor, key) {
    var tmp0_safe_receiver = this.q18_1.x1(descriptor);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      tmp = tmp0_safe_receiver.x1(key instanceof Key ? key : THROW_CCE());
    }
    var tmp_0 = tmp;
    return !(tmp_0 == null) ? tmp_0 : null;
  };
  function DiscriminatorHolder(discriminatorToSkip) {
    this.f1b_1 = discriminatorToSkip;
  }
  function trySkip(_this__u8e3s4, $this, unknownKey) {
    if (_this__u8e3s4 == null)
      return false;
    if (_this__u8e3s4.f1b_1 === unknownKey) {
      _this__u8e3s4.f1b_1 = null;
      return true;
    }
    return false;
  }
  function skipLeftoverElements($this, descriptor) {
    while (!($this.sm(descriptor) === -1)) {
    }
  }
  function checkLeadingComma($this) {
    if ($this.e14_1.r19() === 4) {
      $this.e14_1.p18('Unexpected leading comma');
    }
  }
  function decodeMapIndex($this) {
    var hasComma = false;
    var decodingKey = !(($this.g14_1 % 2 | 0) === 0);
    if (decodingKey) {
      if (!($this.g14_1 === -1)) {
        hasComma = $this.e14_1.h1b();
      }
    } else {
      $this.e14_1.g1b(_Char___init__impl__6a9atx(58));
    }
    var tmp;
    if ($this.e14_1.s19()) {
      if (decodingKey) {
        if ($this.g14_1 === -1) {
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.require' call
          var this_0 = $this.e14_1;
          var condition = !hasComma;
          var position = this_0.k14_1;
          if (!condition) {
            // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeMapIndex.<anonymous>' call
            var tmp$ret$0 = 'Unexpected leading comma';
            this_0.p18(tmp$ret$0, position);
          }
        } else {
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.require' call
          var this_1 = $this.e14_1;
          var condition_0 = hasComma;
          var position_0 = this_1.k14_1;
          if (!condition_0) {
            // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeMapIndex.<anonymous>' call
            var tmp$ret$1 = 'Expected comma after the key-value pair';
            this_1.p18(tmp$ret$1, position_0);
          }
        }
      }
      $this.g14_1 = $this.g14_1 + 1 | 0;
      tmp = $this.g14_1;
    } else {
      if (hasComma && !$this.c14_1.v13_1.w15_1) {
        invalidTrailingComma($this.e14_1);
      }
      tmp = -1;
    }
    return tmp;
  }
  function coerceInputValue($this, descriptor, index) {
    var tmp$ret$1;
    $l$block_2: {
      // Inline function 'kotlinx.serialization.json.internal.tryCoerceValue' call
      var this_0 = $this.c14_1;
      var isOptional = descriptor.nk(index);
      var elementDescriptor = descriptor.mk(index);
      var tmp;
      if (isOptional && !elementDescriptor.bk()) {
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.coerceInputValue.<anonymous>' call
        tmp = $this.e14_1.i1b(true);
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$1 = true;
        break $l$block_2;
      }
      if (equals(elementDescriptor.fk(), ENUM_getInstance())) {
        var tmp_0;
        if (elementDescriptor.bk()) {
          // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.coerceInputValue.<anonymous>' call
          tmp_0 = $this.e14_1.i1b(false);
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$1 = false;
          break $l$block_2;
        }
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.coerceInputValue.<anonymous>' call
        var tmp0_elvis_lhs = $this.e14_1.j1b($this.i14_1.k15_1);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          tmp$ret$1 = false;
          break $l$block_2;
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        var enumValue = tmp_1;
        var enumIndex = getJsonNameIndex(elementDescriptor, this_0, enumValue);
        var coerceToNull = !this_0.v13_1.n15_1 && elementDescriptor.bk();
        if (enumIndex === -3 && (isOptional || coerceToNull)) {
          // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.coerceInputValue.<anonymous>' call
          $this.e14_1.t19();
          tmp$ret$1 = true;
          break $l$block_2;
        }
      }
      tmp$ret$1 = false;
    }
    return tmp$ret$1;
  }
  function decodeObjectIndex($this, descriptor) {
    var hasComma = $this.e14_1.h1b();
    while ($this.e14_1.s19()) {
      hasComma = false;
      var key = decodeStringKey($this);
      $this.e14_1.g1b(_Char___init__impl__6a9atx(58));
      var index = getJsonNameIndex(descriptor, $this.c14_1, key);
      var tmp;
      if (!(index === -3)) {
        var tmp_0;
        if ($this.i14_1.p15_1 && coerceInputValue($this, descriptor, index)) {
          hasComma = $this.e14_1.h1b();
          tmp_0 = false;
        } else {
          var tmp0_safe_receiver = $this.j14_1;
          if (tmp0_safe_receiver == null)
            null;
          else {
            tmp0_safe_receiver.m18(index);
          }
          return index;
        }
        tmp = tmp_0;
      } else {
        tmp = true;
      }
      var isUnknown = tmp;
      if (isUnknown) {
        hasComma = handleUnknown($this, key);
      }
    }
    if (hasComma && !$this.c14_1.v13_1.w15_1) {
      invalidTrailingComma($this.e14_1);
    }
    var tmp1_safe_receiver = $this.j14_1;
    var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.n18();
    return tmp2_elvis_lhs == null ? -1 : tmp2_elvis_lhs;
  }
  function handleUnknown($this, key) {
    if ($this.i14_1.j15_1 || trySkip($this.h14_1, $this, key)) {
      $this.e14_1.l1b($this.i14_1.k15_1);
    } else {
      $this.e14_1.k1b(key);
    }
    return $this.e14_1.h1b();
  }
  function decodeListIndex($this) {
    var hasComma = $this.e14_1.h1b();
    var tmp;
    if ($this.e14_1.s19()) {
      if (!($this.g14_1 === -1) && !hasComma) {
        $this.e14_1.p18('Expected end of the array or comma');
      }
      $this.g14_1 = $this.g14_1 + 1 | 0;
      tmp = $this.g14_1;
    } else {
      if (hasComma && !$this.c14_1.v13_1.w15_1) {
        invalidTrailingComma($this.e14_1, 'array');
      }
      tmp = -1;
    }
    return tmp;
  }
  function decodeStringKey($this) {
    var tmp;
    if ($this.i14_1.k15_1) {
      tmp = $this.e14_1.n1b();
    } else {
      tmp = $this.e14_1.m1b();
    }
    return tmp;
  }
  function StreamingJsonDecoder(json, mode, lexer, descriptor, discriminatorHolder) {
    AbstractDecoder.call(this);
    this.c14_1 = json;
    this.d14_1 = mode;
    this.e14_1 = lexer;
    this.f14_1 = this.c14_1.qm();
    this.g14_1 = -1;
    this.h14_1 = discriminatorHolder;
    this.i14_1 = this.c14_1.v13_1;
    this.j14_1 = this.i14_1.n15_1 ? null : new JsonElementMarker(descriptor);
  }
  protoOf(StreamingJsonDecoder).z15 = function () {
    return this.c14_1;
  };
  protoOf(StreamingJsonDecoder).qm = function () {
    return this.f14_1;
  };
  protoOf(StreamingJsonDecoder).a16 = function () {
    return (new JsonTreeReader(this.c14_1.v13_1, this.e14_1)).v19();
  };
  protoOf(StreamingJsonDecoder).am = function (deserializer) {
    try {
      var tmp;
      if (!(deserializer instanceof AbstractPolymorphicSerializer)) {
        tmp = true;
      } else {
        tmp = this.c14_1.v13_1.q15_1;
      }
      if (tmp) {
        return deserializer.ui(this);
      }
      var discriminator = classDiscriminator(deserializer.si(), this.c14_1);
      var tmp0_elvis_lhs = this.e14_1.o1b(discriminator, this.i14_1.k15_1);
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        var tmp$ret$0;
        $l$block: {
          // Inline function 'kotlinx.serialization.json.internal.decodeSerializableValuePolymorphic' call
          var deserializer_0 = isInterface(deserializer, DeserializationStrategy) ? deserializer : THROW_CCE();
          var tmp_1;
          if (!(deserializer_0 instanceof AbstractPolymorphicSerializer)) {
            tmp_1 = true;
          } else {
            tmp_1 = this.z15().v13_1.q15_1;
          }
          if (tmp_1) {
            tmp$ret$0 = deserializer_0.ui(this);
            break $l$block;
          }
          var discriminator_0 = classDiscriminator(deserializer_0.si(), this.z15());
          // Inline function 'kotlinx.serialization.json.internal.cast' call
          var value = this.a16();
          var serialName = deserializer_0.si().tj();
          if (!(value instanceof JsonObject)) {
            var tmp_2 = getKClass(JsonObject).f9();
            var tmp_3 = getKClassFromExpression(value).f9();
            // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeSerializableValue.<anonymous>' call
            var tmp$ret$1 = this.e14_1.l14_1.c19();
            throw JsonDecodingException_0(-1, 'Expected ' + tmp_2 + ', but had ' + tmp_3 + ' as the serialized body of ' + serialName + ' at element: ' + tmp$ret$1, toString(value));
          }
          var jsonTree = value;
          var tmp0_safe_receiver = jsonTree.d16(discriminator_0);
          var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : get_jsonPrimitive(tmp0_safe_receiver);
          var type = tmp1_safe_receiver == null ? null : get_contentOrNull(tmp1_safe_receiver);
          var tmp_4;
          try {
            tmp_4 = findPolymorphicSerializer(deserializer_0, this, type);
          } catch ($p) {
            var tmp_5;
            if ($p instanceof SerializationException) {
              var it = $p;
              throw JsonDecodingException_0(-1, ensureNotNull(it.message), jsonTree.toString());
            } else {
              throw $p;
            }
          }
          var tmp_6 = tmp_4;
          var actualSerializer = isInterface(tmp_6, DeserializationStrategy) ? tmp_6 : THROW_CCE();
          tmp$ret$0 = readPolymorphicJson(this.z15(), discriminator_0, jsonTree, actualSerializer);
        }
        return tmp$ret$0;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var type_0 = tmp_0;
      var tmp_7;
      try {
        tmp_7 = findPolymorphicSerializer(deserializer, this, type_0);
      } catch ($p) {
        var tmp_8;
        if ($p instanceof SerializationException) {
          var it_0 = $p;
          var message = removeSuffix(substringBefore(ensureNotNull(it_0.message), _Char___init__impl__6a9atx(10)), '.');
          var hint = substringAfter(ensureNotNull(it_0.message), _Char___init__impl__6a9atx(10), '');
          this.e14_1.p18(message, VOID, hint);
        } else {
          throw $p;
        }
        tmp_7 = tmp_8;
      }
      var tmp_9 = tmp_7;
      var actualSerializer_0 = isInterface(tmp_9, DeserializationStrategy) ? tmp_9 : THROW_CCE();
      this.h14_1 = new DiscriminatorHolder(discriminator);
      return actualSerializer_0.ui(this);
    } catch ($p) {
      if ($p instanceof MissingFieldException) {
        var e = $p;
        if (contains_0(ensureNotNull(e.message), 'at path'))
          throw e;
        throw new MissingFieldException(e.vj_1, plus(e.message, ' at path: ') + this.e14_1.l14_1.c19(), e);
      } else {
        throw $p;
      }
    }
  };
  protoOf(StreamingJsonDecoder).bm = function (descriptor) {
    var newMode = switchMode(this.c14_1, descriptor);
    this.e14_1.l14_1.x18(descriptor);
    this.e14_1.g1b(newMode.r1b_1);
    checkLeadingComma(this);
    var tmp;
    switch (newMode.e2_1) {
      case 1:
      case 2:
      case 3:
        tmp = new StreamingJsonDecoder(this.c14_1, newMode, this.e14_1, descriptor, this.h14_1);
        break;
      default:
        var tmp_0;
        if (this.d14_1.equals(newMode) && this.c14_1.v13_1.n15_1) {
          tmp_0 = this;
        } else {
          tmp_0 = new StreamingJsonDecoder(this.c14_1, newMode, this.e14_1, descriptor, this.h14_1);
        }

        tmp = tmp_0;
        break;
    }
    return tmp;
  };
  protoOf(StreamingJsonDecoder).cm = function (descriptor) {
    if (this.c14_1.v13_1.j15_1 && descriptor.hk() === 0) {
      skipLeftoverElements(this, descriptor);
    }
    if (this.e14_1.h1b() && !this.c14_1.v13_1.w15_1) {
      invalidTrailingComma(this.e14_1, '');
    }
    this.e14_1.g1b(this.d14_1.s1b_1);
    this.e14_1.l14_1.b19();
  };
  protoOf(StreamingJsonDecoder).ml = function () {
    var tmp;
    var tmp0_safe_receiver = this.j14_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.l18_1;
    if (!(tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs)) {
      tmp = !this.e14_1.t1b();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(StreamingJsonDecoder).nl = function () {
    return null;
  };
  protoOf(StreamingJsonDecoder).nm = function (descriptor, index, deserializer, previousValue) {
    var isMapKey = this.d14_1.equals(WriteMode_MAP_getInstance()) && (index & 1) === 0;
    if (isMapKey) {
      this.e14_1.l14_1.a19();
    }
    var value = protoOf(AbstractDecoder).nm.call(this, descriptor, index, deserializer, previousValue);
    if (isMapKey) {
      this.e14_1.l14_1.z18(value);
    }
    return value;
  };
  protoOf(StreamingJsonDecoder).sm = function (descriptor) {
    var index;
    switch (this.d14_1.e2_1) {
      case 0:
        index = decodeObjectIndex(this, descriptor);
        break;
      case 2:
        index = decodeMapIndex(this);
        break;
      default:
        index = decodeListIndex(this);
        break;
    }
    if (!this.d14_1.equals(WriteMode_MAP_getInstance())) {
      this.e14_1.l14_1.y18(index);
    }
    return index;
  };
  protoOf(StreamingJsonDecoder).ol = function () {
    return this.e14_1.u1b();
  };
  protoOf(StreamingJsonDecoder).pl = function () {
    var value = this.e14_1.n16();
    if (!value.equals(toLong(value.x2()))) {
      this.e14_1.p18("Failed to parse byte for input '" + value.toString() + "'");
    }
    return value.x2();
  };
  protoOf(StreamingJsonDecoder).ql = function () {
    var value = this.e14_1.n16();
    if (!value.equals(toLong(value.y2()))) {
      this.e14_1.p18("Failed to parse short for input '" + value.toString() + "'");
    }
    return value.y2();
  };
  protoOf(StreamingJsonDecoder).rl = function () {
    var value = this.e14_1.n16();
    if (!value.equals(toLong(value.b1()))) {
      this.e14_1.p18("Failed to parse int for input '" + value.toString() + "'");
    }
    return value.b1();
  };
  protoOf(StreamingJsonDecoder).sl = function () {
    return this.e14_1.n16();
  };
  protoOf(StreamingJsonDecoder).tl = function () {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var this_0 = this.e14_1;
      var input = this_0.u19();
      try {
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeFloat.<anonymous>' call
        // Inline function 'kotlin.text.toFloat' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        tmp$ret$4 = toDouble(input);
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          this_0.p18("Failed to parse type '" + 'float' + "' for input '" + input + "'");
        } else {
          throw $p;
        }
      }
    }
    var result = tmp$ret$4;
    var specialFp = this.c14_1.v13_1.s15_1;
    if (specialFp || isFinite(result))
      return result;
    throwInvalidFloatingPointDecoded(this.e14_1, result);
  };
  protoOf(StreamingJsonDecoder).ul = function () {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var this_0 = this.e14_1;
      var input = this_0.u19();
      try {
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonDecoder.decodeDouble.<anonymous>' call
        tmp$ret$1 = toDouble(input);
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          this_0.p18("Failed to parse type '" + 'double' + "' for input '" + input + "'");
        } else {
          throw $p;
        }
      }
    }
    var result = tmp$ret$1;
    var specialFp = this.c14_1.v13_1.s15_1;
    if (specialFp || isFinite_0(result))
      return result;
    throwInvalidFloatingPointDecoded(this.e14_1, result);
  };
  protoOf(StreamingJsonDecoder).vl = function () {
    var string = this.e14_1.u19();
    if (!(string.length === 1)) {
      this.e14_1.p18("Expected single char, but got '" + string + "'");
    }
    return charSequenceGet(string, 0);
  };
  protoOf(StreamingJsonDecoder).wl = function () {
    var tmp;
    if (this.i14_1.k15_1) {
      tmp = this.e14_1.n1b();
    } else {
      tmp = this.e14_1.t19();
    }
    return tmp;
  };
  protoOf(StreamingJsonDecoder).yl = function (descriptor) {
    return get_isUnsignedNumber(descriptor) ? new JsonDecoderForUnsignedTypes(this.e14_1, this.c14_1) : protoOf(AbstractDecoder).yl.call(this, descriptor);
  };
  protoOf(StreamingJsonDecoder).xl = function (enumDescriptor) {
    return getJsonNameIndexOrThrow(enumDescriptor, this.c14_1, this.wl(), ' at path ' + this.e14_1.l14_1.c19());
  };
  function JsonDecoderForUnsignedTypes(lexer, json) {
    AbstractDecoder.call(this);
    this.v1b_1 = lexer;
    this.w1b_1 = json.qm();
  }
  protoOf(JsonDecoderForUnsignedTypes).qm = function () {
    return this.w1b_1;
  };
  protoOf(JsonDecoderForUnsignedTypes).sm = function (descriptor) {
    var message = 'unsupported';
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(JsonDecoderForUnsignedTypes).rl = function () {
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var this_0 = this.v1b_1;
      var input = this_0.u19();
      try {
        // Inline function 'kotlinx.serialization.json.internal.JsonDecoderForUnsignedTypes.decodeInt.<anonymous>' call
        // Inline function 'kotlin.UInt.toInt' call
        var this_1 = toUInt(input);
        tmp$ret$2 = _UInt___get_data__impl__f0vqqw(this_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          this_0.p18("Failed to parse type '" + 'UInt' + "' for input '" + input + "'");
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(JsonDecoderForUnsignedTypes).sl = function () {
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var this_0 = this.v1b_1;
      var input = this_0.u19();
      try {
        // Inline function 'kotlinx.serialization.json.internal.JsonDecoderForUnsignedTypes.decodeLong.<anonymous>' call
        // Inline function 'kotlin.ULong.toLong' call
        var this_1 = toULong(input);
        tmp$ret$2 = _ULong___get_data__impl__fggpzb(this_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          this_0.p18("Failed to parse type '" + 'ULong' + "' for input '" + input + "'");
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(JsonDecoderForUnsignedTypes).pl = function () {
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var this_0 = this.v1b_1;
      var input = this_0.u19();
      try {
        // Inline function 'kotlinx.serialization.json.internal.JsonDecoderForUnsignedTypes.decodeByte.<anonymous>' call
        // Inline function 'kotlin.UByte.toByte' call
        var this_1 = toUByte(input);
        tmp$ret$2 = _UByte___get_data__impl__jof9qr(this_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          this_0.p18("Failed to parse type '" + 'UByte' + "' for input '" + input + "'");
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(JsonDecoderForUnsignedTypes).ql = function () {
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.parseString' call
      var this_0 = this.v1b_1;
      var input = this_0.u19();
      try {
        // Inline function 'kotlinx.serialization.json.internal.JsonDecoderForUnsignedTypes.decodeShort.<anonymous>' call
        // Inline function 'kotlin.UShort.toShort' call
        var this_1 = toUShort(input);
        tmp$ret$2 = _UShort___get_data__impl__g0245(this_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          this_0.p18("Failed to parse type '" + 'UShort' + "' for input '" + input + "'");
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$2;
  };
  function get_unsignedNumberDescriptors() {
    _init_properties_StreamingJsonEncoder_kt__pn1bsi();
    return unsignedNumberDescriptors;
  }
  var unsignedNumberDescriptors;
  function StreamingJsonEncoder_init_$Init$(output, json, mode, modeReuseCache, $this) {
    StreamingJsonEncoder.call($this, Composer_0(output, json), json, mode, modeReuseCache);
    return $this;
  }
  function StreamingJsonEncoder_init_$Create$(output, json, mode, modeReuseCache) {
    return StreamingJsonEncoder_init_$Init$(output, json, mode, modeReuseCache, objectCreate(protoOf(StreamingJsonEncoder)));
  }
  function encodeTypeInfo($this, discriminator, serialName) {
    $this.d19_1.j17();
    $this.fn(discriminator);
    $this.d19_1.m17(_Char___init__impl__6a9atx(58));
    $this.d19_1.l17();
    $this.fn(serialName);
  }
  function StreamingJsonEncoder(composer, json, mode, modeReuseCache) {
    AbstractEncoder.call(this);
    this.d19_1 = composer;
    this.e19_1 = json;
    this.f19_1 = mode;
    this.g19_1 = modeReuseCache;
    this.h19_1 = this.e19_1.qm();
    this.i19_1 = this.e19_1.v13_1;
    this.j19_1 = false;
    this.k19_1 = null;
    this.l19_1 = null;
    var i = this.f19_1.e2_1;
    if (!(this.g19_1 == null)) {
      if (!(this.g19_1[i] === null) || !(this.g19_1[i] === this)) {
        this.g19_1[i] = this;
      }
    }
  }
  protoOf(StreamingJsonEncoder).z15 = function () {
    return this.e19_1;
  };
  protoOf(StreamingJsonEncoder).qm = function () {
    return this.h19_1;
  };
  protoOf(StreamingJsonEncoder).yn = function (descriptor, index) {
    return this.i19_1.i15_1;
  };
  protoOf(StreamingJsonEncoder).tn = function (serializer, value) {
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.encodePolymorphically' call
      if (this.z15().v13_1.q15_1) {
        serializer.ti(this, value);
        break $l$block;
      }
      var isPolymorphicSerializer = serializer instanceof AbstractPolymorphicSerializer;
      var tmp;
      if (isPolymorphicSerializer) {
        tmp = !this.z15().v13_1.y15_1.equals(ClassDiscriminatorMode_NONE_getInstance());
      } else {
        var tmp_0;
        switch (this.z15().v13_1.y15_1.e2_1) {
          case 0:
          case 2:
            tmp_0 = false;
            break;
          case 1:
            // Inline function 'kotlin.let' call

            // Inline function 'kotlin.contracts.contract' call

            // Inline function 'kotlinx.serialization.json.internal.encodePolymorphically.<anonymous>' call

            var it = serializer.si().fk();
            tmp_0 = equals(it, CLASS_getInstance()) || equals(it, OBJECT_getInstance());
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }
        tmp = tmp_0;
      }
      var needDiscriminator = tmp;
      var baseClassDiscriminator = needDiscriminator ? classDiscriminator(serializer.si(), this.z15()) : null;
      var tmp_1;
      if (isPolymorphicSerializer) {
        var casted = serializer instanceof AbstractPolymorphicSerializer ? serializer : THROW_CCE();
        $l$block_0: {
          // Inline function 'kotlin.requireNotNull' call
          // Inline function 'kotlin.contracts.contract' call
          if (value == null) {
            // Inline function 'kotlinx.serialization.json.internal.encodePolymorphically.<anonymous>' call
            var message = 'Value for serializer ' + toString(serializer.si()) + ' should always be non-null. Please report issue to the kotlinx.serialization tracker.';
            throw IllegalArgumentException_init_$Create$(toString(message));
          } else {
            break $l$block_0;
          }
        }
        var actual = findPolymorphicSerializer_0(casted, this, value);
        if (!(baseClassDiscriminator == null)) {
          validateIfSealed$accessor$iffjvx(serializer, actual, baseClassDiscriminator);
        }
        checkKind(actual.si().fk());
        tmp_1 = isInterface(actual, SerializationStrategy) ? actual : THROW_CCE();
      } else {
        tmp_1 = serializer;
      }
      var actualSerializer = tmp_1;
      if (!(baseClassDiscriminator == null)) {
        // Inline function 'kotlinx.serialization.json.internal.StreamingJsonEncoder.encodeSerializableValue.<anonymous>' call
        var serialName = actualSerializer.si().tj();
        this.k19_1 = baseClassDiscriminator;
        this.l19_1 = serialName;
      }
      actualSerializer.ti(this, value);
    }
  };
  protoOf(StreamingJsonEncoder).bm = function (descriptor) {
    var newMode = switchMode(this.e19_1, descriptor);
    if (!(newMode.r1b_1 === _Char___init__impl__6a9atx(0))) {
      this.d19_1.m17(newMode.r1b_1);
      this.d19_1.h17();
    }
    var discriminator = this.k19_1;
    if (!(discriminator == null)) {
      var tmp0_elvis_lhs = this.l19_1;
      encodeTypeInfo(this, discriminator, tmp0_elvis_lhs == null ? descriptor.tj() : tmp0_elvis_lhs);
      this.k19_1 = null;
      this.l19_1 = null;
    }
    if (this.f19_1.equals(newMode)) {
      return this;
    }
    var tmp1_safe_receiver = this.g19_1;
    var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : tmp1_safe_receiver[newMode.e2_1];
    return tmp2_elvis_lhs == null ? new StreamingJsonEncoder(this.d19_1, this.e19_1, newMode, this.g19_1) : tmp2_elvis_lhs;
  };
  protoOf(StreamingJsonEncoder).cm = function (descriptor) {
    if (!(this.f19_1.s1b_1 === _Char___init__impl__6a9atx(0))) {
      this.d19_1.i17();
      this.d19_1.k17();
      this.d19_1.m17(this.f19_1.s1b_1);
    }
  };
  protoOf(StreamingJsonEncoder).um = function (descriptor, index) {
    switch (this.f19_1.e2_1) {
      case 1:
        if (!this.d19_1.g17_1) {
          this.d19_1.m17(_Char___init__impl__6a9atx(44));
        }

        this.d19_1.j17();
        break;
      case 2:
        if (!this.d19_1.g17_1) {
          var tmp = this;
          var tmp_0;
          if ((index % 2 | 0) === 0) {
            this.d19_1.m17(_Char___init__impl__6a9atx(44));
            this.d19_1.j17();
            tmp_0 = true;
          } else {
            this.d19_1.m17(_Char___init__impl__6a9atx(58));
            this.d19_1.l17();
            tmp_0 = false;
          }
          tmp.j19_1 = tmp_0;
        } else {
          this.j19_1 = true;
          this.d19_1.j17();
        }

        break;
      case 3:
        if (index === 0)
          this.j19_1 = true;
        if (index === 1) {
          this.d19_1.m17(_Char___init__impl__6a9atx(44));
          this.d19_1.l17();
          this.j19_1 = false;
        }

        break;
      default:
        if (!this.d19_1.g17_1) {
          this.d19_1.m17(_Char___init__impl__6a9atx(44));
        }

        this.d19_1.j17();
        this.fn(getJsonElementName(descriptor, this.e19_1, index));
        this.d19_1.m17(_Char___init__impl__6a9atx(58));
        this.d19_1.l17();
        break;
    }
    return true;
  };
  protoOf(StreamingJsonEncoder).un = function (descriptor, index, serializer, value) {
    if (!(value == null) || this.i19_1.n15_1) {
      protoOf(AbstractEncoder).un.call(this, descriptor, index, serializer, value);
    }
  };
  protoOf(StreamingJsonEncoder).hn = function (descriptor) {
    var tmp;
    if (get_isUnsignedNumber(descriptor)) {
      // Inline function 'kotlinx.serialization.json.internal.StreamingJsonEncoder.composerAs' call
      var tmp_0;
      var tmp_1 = this.d19_1;
      if (tmp_1 instanceof ComposerForUnsignedNumbers) {
        tmp_0 = this.d19_1;
      } else {
        tmp_0 = new ComposerForUnsignedNumbers(this.d19_1.f17_1, this.j19_1);
      }
      var tmp$ret$1 = tmp_0;
      tmp = new StreamingJsonEncoder(tmp$ret$1, this.e19_1, this.f19_1, null);
    } else if (get_isUnquotedLiteral(descriptor)) {
      // Inline function 'kotlinx.serialization.json.internal.StreamingJsonEncoder.composerAs' call
      var tmp_2;
      var tmp_3 = this.d19_1;
      if (tmp_3 instanceof ComposerForUnquotedLiterals) {
        tmp_2 = this.d19_1;
      } else {
        tmp_2 = new ComposerForUnquotedLiterals(this.d19_1.f17_1, this.j19_1);
      }
      var tmp$ret$3 = tmp_2;
      tmp = new StreamingJsonEncoder(tmp$ret$3, this.e19_1, this.f19_1, null);
    } else if (!(this.k19_1 == null)) {
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.internal.StreamingJsonEncoder.encodeInline.<anonymous>' call
      this.l19_1 = descriptor.tj();
      tmp = this;
    } else {
      tmp = protoOf(AbstractEncoder).hn.call(this, descriptor);
    }
    return tmp;
  };
  protoOf(StreamingJsonEncoder).wm = function () {
    this.d19_1.o17('null');
  };
  protoOf(StreamingJsonEncoder).xm = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.x17(value);
    }
  };
  protoOf(StreamingJsonEncoder).ym = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.s17(value);
    }
  };
  protoOf(StreamingJsonEncoder).zm = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.u17(value);
    }
  };
  protoOf(StreamingJsonEncoder).an = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.v17(value);
    }
  };
  protoOf(StreamingJsonEncoder).bn = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.w17(value);
    }
  };
  protoOf(StreamingJsonEncoder).cn = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.q17(value);
    }
    if (!this.i19_1.s15_1 && !isFinite(value)) {
      throw InvalidFloatingPointEncoded(value, toString(this.d19_1.f17_1));
    }
  };
  protoOf(StreamingJsonEncoder).dn = function (value) {
    if (this.j19_1) {
      this.fn(value.toString());
    } else {
      this.d19_1.r17(value);
    }
    if (!this.i19_1.s15_1 && !isFinite_0(value)) {
      throw InvalidFloatingPointEncoded(value, toString(this.d19_1.f17_1));
    }
  };
  protoOf(StreamingJsonEncoder).en = function (value) {
    this.fn(toString_1(value));
  };
  protoOf(StreamingJsonEncoder).fn = function (value) {
    return this.d19_1.y17(value);
  };
  protoOf(StreamingJsonEncoder).gn = function (enumDescriptor, index) {
    this.fn(enumDescriptor.jk(index));
  };
  function get_isUnsignedNumber(_this__u8e3s4) {
    _init_properties_StreamingJsonEncoder_kt__pn1bsi();
    return _this__u8e3s4.gk() && get_unsignedNumberDescriptors().r1(_this__u8e3s4);
  }
  function get_isUnquotedLiteral(_this__u8e3s4) {
    _init_properties_StreamingJsonEncoder_kt__pn1bsi();
    return _this__u8e3s4.gk() && equals(_this__u8e3s4, get_jsonUnquotedLiteralDescriptor());
  }
  var properties_initialized_StreamingJsonEncoder_kt_6ifwwk;
  function _init_properties_StreamingJsonEncoder_kt__pn1bsi() {
    if (!properties_initialized_StreamingJsonEncoder_kt_6ifwwk) {
      properties_initialized_StreamingJsonEncoder_kt_6ifwwk = true;
      unsignedNumberDescriptors = setOf([serializer_1(Companion_getInstance_0()).si(), serializer_0(Companion_getInstance()).si(), serializer_2(Companion_getInstance_1()).si(), serializer_3(Companion_getInstance_2()).si()]);
    }
  }
  function get_ESCAPE_STRINGS() {
    _init_properties_StringOps_kt__fcy1db();
    return ESCAPE_STRINGS;
  }
  var ESCAPE_STRINGS;
  var ESCAPE_MARKERS;
  function toHexChar(i) {
    _init_properties_StringOps_kt__fcy1db();
    var d = i & 15;
    var tmp;
    if (d < 10) {
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(48);
      var tmp$ret$0 = Char__toInt_impl_vasixd(this_0);
      tmp = numberToChar(d + tmp$ret$0 | 0);
    } else {
      var tmp_0 = d - 10 | 0;
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(97);
      var tmp$ret$1 = Char__toInt_impl_vasixd(this_1);
      tmp = numberToChar(tmp_0 + tmp$ret$1 | 0);
    }
    return tmp;
  }
  function printQuoted(_this__u8e3s4, value) {
    _init_properties_StringOps_kt__fcy1db();
    _this__u8e3s4.e7(_Char___init__impl__6a9atx(34));
    var lastPos = 0;
    var inductionVariable = 0;
    var last = charSequenceLength(value) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.code' call
        var this_0 = charSequenceGet(value, i);
        var c = Char__toInt_impl_vasixd(this_0);
        if (c < get_ESCAPE_STRINGS().length && !(get_ESCAPE_STRINGS()[c] == null)) {
          _this__u8e3s4.oa(value, lastPos, i);
          _this__u8e3s4.d7(get_ESCAPE_STRINGS()[c]);
          lastPos = i + 1 | 0;
        }
      }
       while (inductionVariable <= last);
    if (!(lastPos === 0))
      _this__u8e3s4.oa(value, lastPos, value.length);
    else
      _this__u8e3s4.d7(value);
    _this__u8e3s4.e7(_Char___init__impl__6a9atx(34));
  }
  function toBooleanStrictOrNull_0(_this__u8e3s4) {
    _init_properties_StringOps_kt__fcy1db();
    return equals_0(_this__u8e3s4, 'true', true) ? true : equals_0(_this__u8e3s4, 'false', true) ? false : null;
  }
  var properties_initialized_StringOps_kt_wzaea7;
  function _init_properties_StringOps_kt__fcy1db() {
    if (!properties_initialized_StringOps_kt_wzaea7) {
      properties_initialized_StringOps_kt_wzaea7 = true;
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.arrayOfNulls' call
      var this_0 = fillArrayVal(Array(93), null);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.internal.ESCAPE_STRINGS.<anonymous>' call
      var inductionVariable = 0;
      if (inductionVariable <= 31)
        do {
          var c = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var c1 = toHexChar(c >> 12);
          var c2 = toHexChar(c >> 8);
          var c3 = toHexChar(c >> 4);
          var c4 = toHexChar(c);
          this_0[c] = '\\u' + toString_1(c1) + toString_1(c2) + toString_1(c3) + toString_1(c4);
        }
         while (inductionVariable <= 31);
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(34);
      this_0[Char__toInt_impl_vasixd(this_1)] = '\\"';
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(92);
      this_0[Char__toInt_impl_vasixd(this_2)] = '\\\\';
      // Inline function 'kotlin.code' call
      var this_3 = _Char___init__impl__6a9atx(9);
      this_0[Char__toInt_impl_vasixd(this_3)] = '\\t';
      // Inline function 'kotlin.code' call
      var this_4 = _Char___init__impl__6a9atx(8);
      this_0[Char__toInt_impl_vasixd(this_4)] = '\\b';
      // Inline function 'kotlin.code' call
      var this_5 = _Char___init__impl__6a9atx(10);
      this_0[Char__toInt_impl_vasixd(this_5)] = '\\n';
      // Inline function 'kotlin.code' call
      var this_6 = _Char___init__impl__6a9atx(13);
      this_0[Char__toInt_impl_vasixd(this_6)] = '\\r';
      this_0[12] = '\\f';
      ESCAPE_STRINGS = this_0;
      // Inline function 'kotlin.apply' call
      var this_7 = new Int8Array(93);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.internal.ESCAPE_MARKERS.<anonymous>' call
      var inductionVariable_0 = 0;
      if (inductionVariable_0 <= 31)
        do {
          var c_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          this_7[c_0] = 1;
        }
         while (inductionVariable_0 <= 31);
      // Inline function 'kotlin.code' call
      var this_8 = _Char___init__impl__6a9atx(34);
      this_7[Char__toInt_impl_vasixd(this_8)] = 34;
      // Inline function 'kotlin.code' call
      var this_9 = _Char___init__impl__6a9atx(92);
      this_7[Char__toInt_impl_vasixd(this_9)] = 92;
      // Inline function 'kotlin.code' call
      var this_10 = _Char___init__impl__6a9atx(9);
      this_7[Char__toInt_impl_vasixd(this_10)] = 116;
      // Inline function 'kotlin.code' call
      var this_11 = _Char___init__impl__6a9atx(8);
      this_7[Char__toInt_impl_vasixd(this_11)] = 98;
      // Inline function 'kotlin.code' call
      var this_12 = _Char___init__impl__6a9atx(10);
      this_7[Char__toInt_impl_vasixd(this_12)] = 110;
      // Inline function 'kotlin.code' call
      var this_13 = _Char___init__impl__6a9atx(13);
      this_7[Char__toInt_impl_vasixd(this_13)] = 114;
      this_7[12] = 102;
      ESCAPE_MARKERS = this_7;
    }
  }
  function unparsedPrimitive($this, literal, primitive, tag) {
    var type = startsWith(primitive, 'i') ? 'an ' + primitive : 'a ' + primitive;
    throw JsonDecodingException_0(-1, "Failed to parse literal '" + literal.toString() + "' as " + type + ' value at element: ' + $this.d1c(tag), toString($this.e1c()));
  }
  function AbstractJsonTreeDecoder(json, value, polymorphicDiscriminator) {
    polymorphicDiscriminator = polymorphicDiscriminator === VOID ? null : polymorphicDiscriminator;
    NamedValueDecoder.call(this);
    this.z1b_1 = json;
    this.a1c_1 = value;
    this.b1c_1 = polymorphicDiscriminator;
    this.c1c_1 = this.z15().v13_1;
  }
  protoOf(AbstractJsonTreeDecoder).z15 = function () {
    return this.z1b_1;
  };
  protoOf(AbstractJsonTreeDecoder).u1 = function () {
    return this.a1c_1;
  };
  protoOf(AbstractJsonTreeDecoder).qm = function () {
    return this.z15().qm();
  };
  protoOf(AbstractJsonTreeDecoder).e1c = function () {
    var tmp0_safe_receiver = this.j10();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.currentObject.<anonymous>' call
      tmp = this.f1c(tmp0_safe_receiver);
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? this.u1() : tmp1_elvis_lhs;
  };
  protoOf(AbstractJsonTreeDecoder).d1c = function (currentTag) {
    return this.l10() + ('.' + currentTag);
  };
  protoOf(AbstractJsonTreeDecoder).a16 = function () {
    return this.e1c();
  };
  protoOf(AbstractJsonTreeDecoder).am = function (deserializer) {
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.decodeSerializableValuePolymorphic' call
      var tmp;
      if (!(deserializer instanceof AbstractPolymorphicSerializer)) {
        tmp = true;
      } else {
        tmp = this.z15().v13_1.q15_1;
      }
      if (tmp) {
        tmp$ret$0 = deserializer.ui(this);
        break $l$block;
      }
      var discriminator = classDiscriminator(deserializer.si(), this.z15());
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.a16();
      var serialName = deserializer.si().tj();
      if (!(value instanceof JsonObject)) {
        var tmp_0 = getKClass(JsonObject).f9();
        var tmp_1 = getKClassFromExpression(value).f9();
        var tmp$ret$1 = this.l10();
        throw JsonDecodingException_0(-1, 'Expected ' + tmp_0 + ', but had ' + tmp_1 + ' as the serialized body of ' + serialName + ' at element: ' + tmp$ret$1, toString(value));
      }
      var jsonTree = value;
      var tmp0_safe_receiver = jsonTree.d16(discriminator);
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : get_jsonPrimitive(tmp0_safe_receiver);
      var type = tmp1_safe_receiver == null ? null : get_contentOrNull(tmp1_safe_receiver);
      var tmp_2;
      try {
        tmp_2 = findPolymorphicSerializer(deserializer, this, type);
      } catch ($p) {
        var tmp_3;
        if ($p instanceof SerializationException) {
          var it = $p;
          throw JsonDecodingException_0(-1, ensureNotNull(it.message), jsonTree.toString());
        } else {
          throw $p;
        }
      }
      var tmp_4 = tmp_2;
      var actualSerializer = isInterface(tmp_4, DeserializationStrategy) ? tmp_4 : THROW_CCE();
      tmp$ret$0 = readPolymorphicJson(this.z15(), discriminator, jsonTree, actualSerializer);
    }
    return tmp$ret$0;
  };
  protoOf(AbstractJsonTreeDecoder).k10 = function (parentName, childName) {
    return childName;
  };
  protoOf(AbstractJsonTreeDecoder).bm = function (descriptor) {
    var currentObject = this.e1c();
    var tmp0_subject = descriptor.fk();
    var tmp;
    var tmp_0;
    if (equals(tmp0_subject, LIST_getInstance())) {
      tmp_0 = true;
    } else {
      tmp_0 = tmp0_subject instanceof PolymorphicKind;
    }
    if (tmp_0) {
      var tmp_1 = this.z15();
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var serialName = descriptor.tj();
      if (!(currentObject instanceof JsonArray)) {
        var tmp_2 = getKClass(JsonArray).f9();
        var tmp_3 = getKClassFromExpression(currentObject).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.l10();
        throw JsonDecodingException_0(-1, 'Expected ' + tmp_2 + ', but had ' + tmp_3 + ' as the serialized body of ' + serialName + ' at element: ' + tmp$ret$0, toString(currentObject));
      }
      tmp = new JsonTreeListDecoder(tmp_1, currentObject);
    } else {
      if (equals(tmp0_subject, MAP_getInstance())) {
        // Inline function 'kotlinx.serialization.json.internal.selectMapMode' call
        var this_0 = this.z15();
        var keyDescriptor = carrierDescriptor(descriptor.mk(0), this_0.qm());
        var keyKind = keyDescriptor.fk();
        var tmp_4;
        var tmp_5;
        if (keyKind instanceof PrimitiveKind) {
          tmp_5 = true;
        } else {
          tmp_5 = equals(keyKind, ENUM_getInstance());
        }
        if (tmp_5) {
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.beginStructure.<anonymous>' call
          var tmp_6 = this.z15();
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
          // Inline function 'kotlinx.serialization.json.internal.cast' call
          var serialName_0 = descriptor.tj();
          if (!(currentObject instanceof JsonObject)) {
            var tmp_7 = getKClass(JsonObject).f9();
            var tmp_8 = getKClassFromExpression(currentObject).f9();
            // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
            var tmp$ret$3 = this.l10();
            throw JsonDecodingException_0(-1, 'Expected ' + tmp_7 + ', but had ' + tmp_8 + ' as the serialized body of ' + serialName_0 + ' at element: ' + tmp$ret$3, toString(currentObject));
          }
          tmp_4 = new JsonTreeMapDecoder(tmp_6, currentObject);
        } else {
          if (this_0.v13_1.l15_1) {
            // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.beginStructure.<anonymous>' call
            var tmp_9 = this.z15();
            // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
            // Inline function 'kotlinx.serialization.json.internal.cast' call
            var serialName_1 = descriptor.tj();
            if (!(currentObject instanceof JsonArray)) {
              var tmp_10 = getKClass(JsonArray).f9();
              var tmp_11 = getKClassFromExpression(currentObject).f9();
              // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
              var tmp$ret$7 = this.l10();
              throw JsonDecodingException_0(-1, 'Expected ' + tmp_10 + ', but had ' + tmp_11 + ' as the serialized body of ' + serialName_1 + ' at element: ' + tmp$ret$7, toString(currentObject));
            }
            tmp_4 = new JsonTreeListDecoder(tmp_9, currentObject);
          } else {
            throw InvalidKeyKindException(keyDescriptor);
          }
        }
        tmp = tmp_4;
      } else {
        var tmp_12 = this.z15();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
        // Inline function 'kotlinx.serialization.json.internal.cast' call
        var serialName_2 = descriptor.tj();
        if (!(currentObject instanceof JsonObject)) {
          var tmp_13 = getKClass(JsonObject).f9();
          var tmp_14 = getKClassFromExpression(currentObject).f9();
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
          var tmp$ret$12 = this.l10();
          throw JsonDecodingException_0(-1, 'Expected ' + tmp_13 + ', but had ' + tmp_14 + ' as the serialized body of ' + serialName_2 + ' at element: ' + tmp$ret$12, toString(currentObject));
        }
        tmp = new JsonTreeDecoder(tmp_12, currentObject, this.b1c_1);
      }
    }
    return tmp;
  };
  protoOf(AbstractJsonTreeDecoder).cm = function (descriptor) {
  };
  protoOf(AbstractJsonTreeDecoder).ml = function () {
    var tmp = this.e1c();
    return !(tmp instanceof JsonNull);
  };
  protoOf(AbstractJsonTreeDecoder).g1c = function (tag, enumDescriptor) {
    var tmp = this.z15();
    // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
    // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
    var value = this.f1c(tag);
    // Inline function 'kotlinx.serialization.json.internal.cast' call
    var serialName = enumDescriptor.tj();
    if (!(value instanceof JsonPrimitive)) {
      var tmp_0 = getKClass(JsonPrimitive).f9();
      var tmp_1 = getKClassFromExpression(value).f9();
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
      var tmp$ret$0 = this.d1c(tag);
      throw JsonDecodingException_0(-1, 'Expected ' + tmp_0 + ', but had ' + tmp_1 + ' as the serialized body of ' + serialName + ' at element: ' + tmp$ret$0, toString(value));
    }
    return getJsonNameIndexOrThrow(enumDescriptor, tmp, value.f16());
  };
  protoOf(AbstractJsonTreeDecoder).x10 = function (tag, enumDescriptor) {
    return this.g1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE(), enumDescriptor);
  };
  protoOf(AbstractJsonTreeDecoder).h1c = function (tag) {
    return !(this.f1c(tag) === JsonNull_getInstance());
  };
  protoOf(AbstractJsonTreeDecoder).n10 = function (tag) {
    return this.h1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).i1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'boolean' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        var tmp0_elvis_lhs = get_booleanOrNull(literal);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'boolean', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'boolean', tag);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$4;
  };
  protoOf(AbstractJsonTreeDecoder).o10 = function (tag) {
    return this.i1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).j1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'byte' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedByte.<anonymous>' call
        var result = get_int(literal);
        var tmp0_elvis_lhs = (-128 <= result ? result <= 127 : false) ? toByte(result) : null;
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'byte', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'byte', tag);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$4;
  };
  protoOf(AbstractJsonTreeDecoder).p10 = function (tag) {
    return this.j1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).k1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'short' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedShort.<anonymous>' call
        var result = get_int(literal);
        var tmp0_elvis_lhs = (-32768 <= result ? result <= 32767 : false) ? toShort(result) : null;
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'short', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'short', tag);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$4;
  };
  protoOf(AbstractJsonTreeDecoder).q10 = function (tag) {
    return this.k1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).l1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'int' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedInt.<anonymous>' call
        var tmp0_elvis_lhs = get_int(literal);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'int', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'int', tag);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$4;
  };
  protoOf(AbstractJsonTreeDecoder).r10 = function (tag) {
    return this.l1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).m1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'long' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedLong.<anonymous>' call
        var tmp0_elvis_lhs = get_long(literal);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'long', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'long', tag);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$4;
  };
  protoOf(AbstractJsonTreeDecoder).s10 = function (tag) {
    return this.m1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).n1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'float' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedFloat.<anonymous>' call
        var tmp0_elvis_lhs = get_float(literal);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'float', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'float', tag);
        } else {
          throw $p;
        }
      }
    }
    var result = tmp$ret$4;
    var specialFp = this.z15().v13_1.s15_1;
    if (specialFp || isFinite(result))
      return result;
    throw InvalidFloatingPointDecoded(result, tag, toString(this.e1c()));
  };
  protoOf(AbstractJsonTreeDecoder).t10 = function (tag) {
    return this.n1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).o1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'double' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedDouble.<anonymous>' call
        var tmp0_elvis_lhs = get_double(literal);
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'double', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'double', tag);
        } else {
          throw $p;
        }
      }
    }
    var result = tmp$ret$4;
    var specialFp = this.z15().v13_1.s15_1;
    if (specialFp || isFinite_0(result))
      return result;
    throw InvalidFloatingPointDecoded(result, tag, toString(this.e1c()));
  };
  protoOf(AbstractJsonTreeDecoder).u10 = function (tag) {
    return this.o1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).p1c = function (tag) {
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var value = this.f1c(tag);
      if (!(value instanceof JsonPrimitive)) {
        var tmp = getKClass(JsonPrimitive).f9();
        var tmp_0 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'char' + ' at element: ' + tmp$ret$0, toString(value));
      }
      var literal = value;
      try {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.decodeTaggedChar.<anonymous>' call
        var tmp0_elvis_lhs = new Char(single(literal.f16()));
        var tmp_1;
        if (tmp0_elvis_lhs == null) {
          unparsedPrimitive(this, literal, 'char', tag);
        } else {
          tmp_1 = tmp0_elvis_lhs;
        }
        tmp$ret$4 = tmp_1.e1_1;
        break $l$block;
      } catch ($p) {
        if ($p instanceof IllegalArgumentException) {
          var e = $p;
          unparsedPrimitive(this, literal, 'char', tag);
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$4;
  };
  protoOf(AbstractJsonTreeDecoder).v10 = function (tag) {
    return this.p1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).q1c = function (tag) {
    // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
    // Inline function 'kotlinx.serialization.json.internal.cast' call
    var value = this.f1c(tag);
    if (!(value instanceof JsonPrimitive)) {
      var tmp = getKClass(JsonPrimitive).f9();
      var tmp_0 = getKClassFromExpression(value).f9();
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
      var tmp$ret$0 = this.d1c(tag);
      throw JsonDecodingException_0(-1, 'Expected ' + tmp + ', but had ' + tmp_0 + ' as the serialized body of ' + 'string' + ' at element: ' + tmp$ret$0, toString(value));
    }
    var value_0 = value;
    if (!(value_0 instanceof JsonLiteral))
      throw JsonDecodingException_0(-1, "Expected string value for a non-null key '" + tag + "', got null literal instead at element: " + this.d1c(tag), toString(this.e1c()));
    if (!value_0.h16_1 && !this.z15().v13_1.k15_1) {
      throw JsonDecodingException_0(-1, "String literal for key '" + tag + "' should be quoted at element: " + this.d1c(tag) + ".\nUse 'isLenient = true' in 'Json {}' builder to accept non-compliant JSON.", toString(this.e1c()));
    }
    return value_0.j16_1;
  };
  protoOf(AbstractJsonTreeDecoder).w10 = function (tag) {
    return this.q1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE());
  };
  protoOf(AbstractJsonTreeDecoder).r1c = function (tag, inlineDescriptor) {
    var tmp;
    if (get_isUnsignedNumber(inlineDescriptor)) {
      var tmp_0 = this.z15();
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.getPrimitiveValue' call
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      var value = this.f1c(tag);
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var serialName = inlineDescriptor.tj();
      if (!(value instanceof JsonPrimitive)) {
        var tmp_1 = getKClass(JsonPrimitive).f9();
        var tmp_2 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.d1c(tag);
        throw JsonDecodingException_0(-1, 'Expected ' + tmp_1 + ', but had ' + tmp_2 + ' as the serialized body of ' + serialName + ' at element: ' + tmp$ret$0, toString(value));
      }
      var lexer = StringJsonLexer_0(tmp_0, value.f16());
      tmp = new JsonDecoderForUnsignedTypes(lexer, this.z15());
    } else {
      tmp = protoOf(NamedValueDecoder).y10.call(this, tag, inlineDescriptor);
    }
    return tmp;
  };
  protoOf(AbstractJsonTreeDecoder).y10 = function (tag, inlineDescriptor) {
    return this.r1c((!(tag == null) ? typeof tag === 'string' : false) ? tag : THROW_CCE(), inlineDescriptor);
  };
  protoOf(AbstractJsonTreeDecoder).yl = function (descriptor) {
    return !(this.j10() == null) ? protoOf(NamedValueDecoder).yl.call(this, descriptor) : (new JsonPrimitiveDecoder(this.z15(), this.u1(), this.b1c_1)).yl(descriptor);
  };
  function coerceInputValue_0($this, descriptor, index, tag) {
    var tmp$ret$1;
    $l$block_2: {
      // Inline function 'kotlinx.serialization.json.internal.tryCoerceValue' call
      var this_0 = $this.z15();
      var isOptional = descriptor.nk(index);
      var elementDescriptor = descriptor.mk(index);
      var tmp;
      if (isOptional && !elementDescriptor.bk()) {
        // Inline function 'kotlinx.serialization.json.internal.JsonTreeDecoder.coerceInputValue.<anonymous>' call
        var tmp_0 = $this.f1c(tag);
        tmp = tmp_0 instanceof JsonNull;
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$1 = true;
        break $l$block_2;
      }
      if (equals(elementDescriptor.fk(), ENUM_getInstance())) {
        var tmp_1;
        if (elementDescriptor.bk()) {
          // Inline function 'kotlinx.serialization.json.internal.JsonTreeDecoder.coerceInputValue.<anonymous>' call
          var tmp_2 = $this.f1c(tag);
          tmp_1 = tmp_2 instanceof JsonNull;
        } else {
          tmp_1 = false;
        }
        if (tmp_1) {
          tmp$ret$1 = false;
          break $l$block_2;
        }
        // Inline function 'kotlinx.serialization.json.internal.JsonTreeDecoder.coerceInputValue.<anonymous>' call
        var tmp_3 = $this.f1c(tag);
        var tmp0_safe_receiver = tmp_3 instanceof JsonPrimitive ? tmp_3 : null;
        var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : get_contentOrNull(tmp0_safe_receiver);
        var tmp_4;
        if (tmp0_elvis_lhs == null) {
          tmp$ret$1 = false;
          break $l$block_2;
        } else {
          tmp_4 = tmp0_elvis_lhs;
        }
        var enumValue = tmp_4;
        var enumIndex = getJsonNameIndex(elementDescriptor, this_0, enumValue);
        var coerceToNull = !this_0.v13_1.n15_1 && elementDescriptor.bk();
        if (enumIndex === -3 && (isOptional || coerceToNull)) {
          // Inline function 'kotlinx.serialization.json.internal.tryCoerceValue.<anonymous>' call
          tmp$ret$1 = true;
          break $l$block_2;
        }
      }
      tmp$ret$1 = false;
    }
    return tmp$ret$1;
  }
  function absenceIsNull($this, descriptor, index) {
    $this.b1d_1 = (!$this.z15().v13_1.n15_1 && !descriptor.nk(index) && descriptor.mk(index).bk());
    return $this.b1d_1;
  }
  function JsonTreeDecoder(json, value, polymorphicDiscriminator, polyDescriptor) {
    polymorphicDiscriminator = polymorphicDiscriminator === VOID ? null : polymorphicDiscriminator;
    polyDescriptor = polyDescriptor === VOID ? null : polyDescriptor;
    AbstractJsonTreeDecoder.call(this, json, value, polymorphicDiscriminator);
    this.y1c_1 = value;
    this.z1c_1 = polyDescriptor;
    this.a1d_1 = 0;
    this.b1d_1 = false;
  }
  protoOf(JsonTreeDecoder).u1 = function () {
    return this.y1c_1;
  };
  protoOf(JsonTreeDecoder).sm = function (descriptor) {
    while (this.a1d_1 < descriptor.hk()) {
      var _unary__edvuaz = this.a1d_1;
      this.a1d_1 = _unary__edvuaz + 1 | 0;
      var name = this.e10(descriptor, _unary__edvuaz);
      var index = this.a1d_1 - 1 | 0;
      this.b1d_1 = false;
      var tmp;
      var tmp_0;
      // Inline function 'kotlin.collections.contains' call
      // Inline function 'kotlin.collections.containsKey' call
      var this_0 = this.u1();
      if ((isInterface(this_0, KtMap) ? this_0 : THROW_CCE()).v1(name)) {
        tmp_0 = true;
      } else {
        tmp_0 = absenceIsNull(this, descriptor, index);
      }
      if (tmp_0) {
        tmp = !this.c1c_1.p15_1 || !coerceInputValue_0(this, descriptor, index, name);
      } else {
        tmp = false;
      }
      if (tmp) {
        return index;
      }
    }
    return -1;
  };
  protoOf(JsonTreeDecoder).ml = function () {
    return !this.b1d_1 && protoOf(AbstractJsonTreeDecoder).ml.call(this);
  };
  protoOf(JsonTreeDecoder).f10 = function (descriptor, index) {
    var strategy = namingStrategy(descriptor, this.z15());
    var baseName = descriptor.jk(index);
    if (strategy == null) {
      if (!this.c1c_1.t15_1)
        return baseName;
      if (this.u1().y1().r1(baseName))
        return baseName;
    }
    var deserializationNamesMap_0 = deserializationNamesMap(this.z15(), descriptor);
    // Inline function 'kotlin.collections.find' call
    var this_0 = this.u1().y1();
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = this_0.j();
      while (tmp0_iterator.k()) {
        var element = tmp0_iterator.l();
        // Inline function 'kotlinx.serialization.json.internal.JsonTreeDecoder.elementName.<anonymous>' call
        if (deserializationNamesMap_0.x1(element) === index) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    var tmp0_safe_receiver = tmp$ret$1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    var fallbackName = strategy == null ? null : strategy.t18(descriptor, index, baseName);
    return fallbackName == null ? baseName : fallbackName;
  };
  protoOf(JsonTreeDecoder).f1c = function (tag) {
    return getValue(this.u1(), tag);
  };
  protoOf(JsonTreeDecoder).bm = function (descriptor) {
    if (descriptor === this.z1c_1) {
      var tmp = this.z15();
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast' call
      var value = this.e1c();
      // Inline function 'kotlinx.serialization.json.internal.cast' call
      var serialName = this.z1c_1.tj();
      if (!(value instanceof JsonObject)) {
        var tmp_0 = getKClass(JsonObject).f9();
        var tmp_1 = getKClassFromExpression(value).f9();
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonTreeDecoder.cast.<anonymous>' call
        var tmp$ret$0 = this.l10();
        throw JsonDecodingException_0(-1, 'Expected ' + tmp_0 + ', but had ' + tmp_1 + ' as the serialized body of ' + serialName + ' at element: ' + tmp$ret$0, toString(value));
      }
      return new JsonTreeDecoder(tmp, value, this.b1c_1, this.z1c_1);
    }
    return protoOf(AbstractJsonTreeDecoder).bm.call(this, descriptor);
  };
  protoOf(JsonTreeDecoder).cm = function (descriptor) {
    var tmp;
    if (this.c1c_1.j15_1) {
      tmp = true;
    } else {
      var tmp_0 = descriptor.fk();
      tmp = tmp_0 instanceof PolymorphicKind;
    }
    if (tmp)
      return Unit_instance;
    var strategy = namingStrategy(descriptor, this.z15());
    var tmp_1;
    if (strategy == null && !this.c1c_1.t15_1) {
      tmp_1 = jsonCachedSerialNames(descriptor);
    } else if (!(strategy == null)) {
      tmp_1 = deserializationNamesMap(this.z15(), descriptor).y1();
    } else {
      var tmp_2 = jsonCachedSerialNames(descriptor);
      // Inline function 'kotlin.collections.orEmpty' call
      var tmp0_safe_receiver = get_schemaCache(this.z15()).e1b(descriptor, get_JsonDeserializationNamesKey());
      var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.y1();
      var tmp$ret$0 = tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
      tmp_1 = plus_0(tmp_2, tmp$ret$0);
    }
    var names = tmp_1;
    var _iterator__ex2g4s = this.u1().y1().j();
    while (_iterator__ex2g4s.k()) {
      var key = _iterator__ex2g4s.l();
      if (!names.r1(key) && !(key === this.b1c_1)) {
        throw UnknownKeyException(key, this.u1().toString());
      }
    }
  };
  function JsonTreeListDecoder(json, value) {
    AbstractJsonTreeDecoder.call(this, json, value);
    this.i1d_1 = value;
    this.j1d_1 = this.i1d_1.m();
    this.k1d_1 = -1;
  }
  protoOf(JsonTreeListDecoder).u1 = function () {
    return this.i1d_1;
  };
  protoOf(JsonTreeListDecoder).f10 = function (descriptor, index) {
    return index.toString();
  };
  protoOf(JsonTreeListDecoder).f1c = function (tag) {
    return this.i1d_1.o(toInt(tag));
  };
  protoOf(JsonTreeListDecoder).sm = function (descriptor) {
    while (this.k1d_1 < (this.j1d_1 - 1 | 0)) {
      this.k1d_1 = this.k1d_1 + 1 | 0;
      return this.k1d_1;
    }
    return -1;
  };
  function JsonPrimitiveDecoder(json, value, polymorphicDiscriminator) {
    polymorphicDiscriminator = polymorphicDiscriminator === VOID ? null : polymorphicDiscriminator;
    AbstractJsonTreeDecoder.call(this, json, value, polymorphicDiscriminator);
    this.r1d_1 = value;
    this.z10('primitive');
  }
  protoOf(JsonPrimitiveDecoder).u1 = function () {
    return this.r1d_1;
  };
  protoOf(JsonPrimitiveDecoder).sm = function (descriptor) {
    return 0;
  };
  protoOf(JsonPrimitiveDecoder).f1c = function (tag) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(tag === 'primitive')) {
      // Inline function 'kotlinx.serialization.json.internal.JsonPrimitiveDecoder.currentElement.<anonymous>' call
      var message = "This input can only handle primitives with 'primitive' tag";
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return this.r1d_1;
  };
  function JsonTreeMapDecoder(json, value) {
    JsonTreeDecoder.call(this, json, value);
    this.c1e_1 = value;
    this.d1e_1 = toList(this.c1e_1.y1());
    this.e1e_1 = imul(this.d1e_1.m(), 2);
    this.f1e_1 = -1;
  }
  protoOf(JsonTreeMapDecoder).u1 = function () {
    return this.c1e_1;
  };
  protoOf(JsonTreeMapDecoder).f10 = function (descriptor, index) {
    var i = index / 2 | 0;
    return this.d1e_1.o(i);
  };
  protoOf(JsonTreeMapDecoder).sm = function (descriptor) {
    while (this.f1e_1 < (this.e1e_1 - 1 | 0)) {
      this.f1e_1 = this.f1e_1 + 1 | 0;
      return this.f1e_1;
    }
    return -1;
  };
  protoOf(JsonTreeMapDecoder).f1c = function (tag) {
    return (this.f1e_1 % 2 | 0) === 0 ? JsonPrimitive_0(tag) : getValue(this.c1e_1, tag);
  };
  protoOf(JsonTreeMapDecoder).cm = function (descriptor) {
  };
  function readPolymorphicJson(_this__u8e3s4, discriminator, element, deserializer) {
    return (new JsonTreeDecoder(_this__u8e3s4, element, discriminator, deserializer.si())).am(deserializer);
  }
  var WriteMode_OBJ_instance;
  var WriteMode_LIST_instance;
  var WriteMode_MAP_instance;
  var WriteMode_POLY_OBJ_instance;
  function values() {
    return [WriteMode_OBJ_getInstance(), WriteMode_LIST_getInstance(), WriteMode_MAP_getInstance(), WriteMode_POLY_OBJ_getInstance()];
  }
  function get_entries() {
    if ($ENTRIES == null)
      $ENTRIES = enumEntries(values());
    return $ENTRIES;
  }
  var WriteMode_entriesInitialized;
  function WriteMode_initEntries() {
    if (WriteMode_entriesInitialized)
      return Unit_instance;
    WriteMode_entriesInitialized = true;
    WriteMode_OBJ_instance = new WriteMode('OBJ', 0, _Char___init__impl__6a9atx(123), _Char___init__impl__6a9atx(125));
    WriteMode_LIST_instance = new WriteMode('LIST', 1, _Char___init__impl__6a9atx(91), _Char___init__impl__6a9atx(93));
    WriteMode_MAP_instance = new WriteMode('MAP', 2, _Char___init__impl__6a9atx(123), _Char___init__impl__6a9atx(125));
    WriteMode_POLY_OBJ_instance = new WriteMode('POLY_OBJ', 3, _Char___init__impl__6a9atx(91), _Char___init__impl__6a9atx(93));
  }
  var $ENTRIES;
  function WriteMode(name, ordinal, begin, end) {
    Enum.call(this, name, ordinal);
    this.r1b_1 = begin;
    this.s1b_1 = end;
  }
  function switchMode(_this__u8e3s4, desc) {
    var tmp0_subject = desc.fk();
    var tmp;
    if (tmp0_subject instanceof PolymorphicKind) {
      tmp = WriteMode_POLY_OBJ_getInstance();
    } else {
      if (equals(tmp0_subject, LIST_getInstance())) {
        tmp = WriteMode_LIST_getInstance();
      } else {
        if (equals(tmp0_subject, MAP_getInstance())) {
          // Inline function 'kotlinx.serialization.json.internal.selectMapMode' call
          var keyDescriptor = carrierDescriptor(desc.mk(0), _this__u8e3s4.qm());
          var keyKind = keyDescriptor.fk();
          var tmp_0;
          var tmp_1;
          if (keyKind instanceof PrimitiveKind) {
            tmp_1 = true;
          } else {
            tmp_1 = equals(keyKind, ENUM_getInstance());
          }
          if (tmp_1) {
            // Inline function 'kotlinx.serialization.json.internal.switchMode.<anonymous>' call
            tmp_0 = WriteMode_MAP_getInstance();
          } else {
            if (_this__u8e3s4.v13_1.l15_1) {
              // Inline function 'kotlinx.serialization.json.internal.switchMode.<anonymous>' call
              tmp_0 = WriteMode_LIST_getInstance();
            } else {
              throw InvalidKeyKindException(keyDescriptor);
            }
          }
          tmp = tmp_0;
        } else {
          tmp = WriteMode_OBJ_getInstance();
        }
      }
    }
    return tmp;
  }
  function carrierDescriptor(_this__u8e3s4, module_0) {
    var tmp;
    if (equals(_this__u8e3s4.fk(), CONTEXTUAL_getInstance())) {
      var tmp0_safe_receiver = getContextualDescriptor(module_0, _this__u8e3s4);
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : carrierDescriptor(tmp0_safe_receiver, module_0);
      tmp = tmp1_elvis_lhs == null ? _this__u8e3s4 : tmp1_elvis_lhs;
    } else if (_this__u8e3s4.gk()) {
      tmp = carrierDescriptor(_this__u8e3s4.mk(0), module_0);
    } else {
      tmp = _this__u8e3s4;
    }
    return tmp;
  }
  function WriteMode_OBJ_getInstance() {
    WriteMode_initEntries();
    return WriteMode_OBJ_instance;
  }
  function WriteMode_LIST_getInstance() {
    WriteMode_initEntries();
    return WriteMode_LIST_instance;
  }
  function WriteMode_MAP_getInstance() {
    WriteMode_initEntries();
    return WriteMode_MAP_instance;
  }
  function WriteMode_POLY_OBJ_getInstance() {
    WriteMode_initEntries();
    return WriteMode_POLY_OBJ_instance;
  }
  function appendEscape($this, lastPosition, current) {
    $this.g1e(lastPosition, current);
    return appendEsc($this, current + 1 | 0);
  }
  function decodedString($this, lastPosition, currentPosition) {
    $this.g1e(lastPosition, currentPosition);
    var result = $this.n14_1.toString();
    $this.n14_1.ua(0);
    return result;
  }
  function takePeeked($this) {
    // Inline function 'kotlin.also' call
    var this_0 = ensureNotNull($this.m14_1);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.takePeeked.<anonymous>' call
    $this.m14_1 = null;
    return this_0;
  }
  function wasUnquotedString($this) {
    return !(charSequenceGet($this.h1e(), $this.k14_1 - 1 | 0) === _Char___init__impl__6a9atx(34));
  }
  function appendEsc($this, startPosition) {
    var currentPosition = startPosition;
    currentPosition = $this.i1e(currentPosition);
    if (currentPosition === -1) {
      $this.p18('Expected escape sequence to continue, got EOF');
    }
    var tmp = $this.h1e();
    var _unary__edvuaz = currentPosition;
    currentPosition = _unary__edvuaz + 1 | 0;
    var currentChar = charSequenceGet(tmp, _unary__edvuaz);
    if (currentChar === _Char___init__impl__6a9atx(117)) {
      return appendHex($this, $this.h1e(), currentPosition);
    }
    // Inline function 'kotlin.code' call
    var tmp$ret$0 = Char__toInt_impl_vasixd(currentChar);
    var c = escapeToChar(tmp$ret$0);
    if (c === _Char___init__impl__6a9atx(0)) {
      $this.p18("Invalid escaped char '" + toString_1(currentChar) + "'");
    }
    $this.n14_1.e7(c);
    return currentPosition;
  }
  function appendHex($this, source, startPos) {
    if ((startPos + 4 | 0) >= charSequenceLength(source)) {
      $this.k14_1 = startPos;
      $this.j1e();
      if (($this.k14_1 + 4 | 0) >= charSequenceLength(source)) {
        $this.p18('Unexpected EOF during unicode escape');
      }
      return appendHex($this, source, $this.k14_1);
    }
    $this.n14_1.e7(numberToChar((((fromHexChar($this, source, startPos) << 12) + (fromHexChar($this, source, startPos + 1 | 0) << 8) | 0) + (fromHexChar($this, source, startPos + 2 | 0) << 4) | 0) + fromHexChar($this, source, startPos + 3 | 0) | 0));
    return startPos + 4 | 0;
  }
  function fromHexChar($this, source, currentPosition) {
    var character = charSequenceGet(source, currentPosition);
    var tmp;
    if (_Char___init__impl__6a9atx(48) <= character ? character <= _Char___init__impl__6a9atx(57) : false) {
      // Inline function 'kotlin.code' call
      var tmp_0 = Char__toInt_impl_vasixd(character);
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(48);
      tmp = tmp_0 - Char__toInt_impl_vasixd(this_0) | 0;
    } else if (_Char___init__impl__6a9atx(97) <= character ? character <= _Char___init__impl__6a9atx(102) : false) {
      // Inline function 'kotlin.code' call
      var tmp_1 = Char__toInt_impl_vasixd(character);
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(97);
      tmp = (tmp_1 - Char__toInt_impl_vasixd(this_1) | 0) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65) <= character ? character <= _Char___init__impl__6a9atx(70) : false) {
      // Inline function 'kotlin.code' call
      var tmp_2 = Char__toInt_impl_vasixd(character);
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(65);
      tmp = (tmp_2 - Char__toInt_impl_vasixd(this_2) | 0) + 10 | 0;
    } else {
      $this.p18("Invalid toHexChar char '" + toString_1(character) + "' in unicode escape");
    }
    return tmp;
  }
  function consumeBoolean2($this, start) {
    var current = $this.i1e(start);
    if (current >= charSequenceLength($this.h1e()) || current === -1) {
      $this.p18('EOF');
    }
    // Inline function 'kotlin.code' call
    var tmp = $this.h1e();
    var _unary__edvuaz = current;
    current = _unary__edvuaz + 1 | 0;
    var this_0 = charSequenceGet(tmp, _unary__edvuaz);
    var tmp0_subject = Char__toInt_impl_vasixd(this_0) | 32;
    var tmp_0;
    // Inline function 'kotlin.code' call
    var this_1 = _Char___init__impl__6a9atx(116);
    if (tmp0_subject === Char__toInt_impl_vasixd(this_1)) {
      consumeBooleanLiteral($this, 'rue', current);
      tmp_0 = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(102);
      if (tmp0_subject === Char__toInt_impl_vasixd(this_2)) {
        consumeBooleanLiteral($this, 'alse', current);
        tmp_0 = false;
      } else {
        $this.p18("Expected valid boolean literal prefix, but had '" + $this.u19() + "'");
      }
    }
    return tmp_0;
  }
  function consumeBooleanLiteral($this, literalSuffix, current) {
    if ((charSequenceLength($this.h1e()) - current | 0) < literalSuffix.length) {
      $this.p18('Unexpected end of boolean literal');
    }
    var inductionVariable = 0;
    var last = charSequenceLength(literalSuffix) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var expected = charSequenceGet(literalSuffix, i);
        var actual = charSequenceGet($this.h1e(), current + i | 0);
        // Inline function 'kotlin.code' call
        var tmp = Char__toInt_impl_vasixd(expected);
        // Inline function 'kotlin.code' call
        if (!(tmp === (Char__toInt_impl_vasixd(actual) | 32))) {
          $this.p18("Expected valid boolean literal prefix, but had '" + $this.u19() + "'");
        }
      }
       while (inductionVariable <= last);
    $this.k14_1 = current + literalSuffix.length | 0;
  }
  function consumeNumericLiteral$calculateExponent(exponentAccumulator, isExponentPositive) {
    var tmp;
    switch (isExponentPositive) {
      case false:
        // Inline function 'kotlin.math.pow' call

        var x = -exponentAccumulator.z2();
        tmp = Math.pow(10.0, x);
        break;
      case true:
        // Inline function 'kotlin.math.pow' call

        var x_0 = exponentAccumulator.z2();
        tmp = Math.pow(10.0, x_0);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function AbstractJsonLexer() {
    this.k14_1 = 0;
    this.l14_1 = new JsonPath();
    this.m14_1 = null;
    this.n14_1 = StringBuilder_init_$Create$();
  }
  protoOf(AbstractJsonLexer).j1e = function () {
  };
  protoOf(AbstractJsonLexer).h1b = function () {
    var current = this.k1e();
    var source = this.h1e();
    if (current >= charSequenceLength(source) || current === -1)
      return false;
    if (charSequenceGet(source, current) === _Char___init__impl__6a9atx(44)) {
      this.k14_1 = this.k14_1 + 1 | 0;
      return true;
    }
    return false;
  };
  protoOf(AbstractJsonLexer).l1e = function (c) {
    return c === _Char___init__impl__6a9atx(125) || c === _Char___init__impl__6a9atx(93) || (c === _Char___init__impl__6a9atx(58) || c === _Char___init__impl__6a9atx(44)) ? false : true;
  };
  protoOf(AbstractJsonLexer).o14 = function () {
    var nextToken = this.w19();
    if (!(nextToken === 10)) {
      this.p18('Expected EOF after parsing, but had ' + toString_1(charSequenceGet(this.h1e(), this.k14_1 - 1 | 0)) + ' instead');
    }
  };
  protoOf(AbstractJsonLexer).q19 = function (expected) {
    var token = this.w19();
    if (!(token === expected)) {
      this.m1e(expected);
    }
    return token;
  };
  protoOf(AbstractJsonLexer).n1e = function (expected) {
    if (this.k14_1 > 0 && expected === _Char___init__impl__6a9atx(34)) {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.withPositionRollback' call
        var snapshot = this.k14_1;
        try {
          // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.unexpectedToken.<anonymous>' call
          this.k14_1 = this.k14_1 - 1 | 0;
          tmp$ret$1 = this.u19();
          break $l$block;
        }finally {
          this.k14_1 = snapshot;
        }
      }
      var inputLiteral = tmp$ret$1;
      if (inputLiteral === 'null') {
        this.o18("Expected string literal but 'null' literal was found", this.k14_1 - 1 | 0, "Use 'coerceInputValues = true' in 'Json {}' builder to coerce nulls if property has a default value.");
      }
    }
    this.m1e(charToTokenClass(expected));
  };
  protoOf(AbstractJsonLexer).o1e = function (expectedToken, wasConsumed) {
    var expected = tokenDescription(expectedToken);
    var position = wasConsumed ? this.k14_1 - 1 | 0 : this.k14_1;
    var s = this.k14_1 === charSequenceLength(this.h1e()) || position < 0 ? 'EOF' : toString_1(charSequenceGet(this.h1e(), position));
    this.p18('Expected ' + expected + ", but had '" + s + "' instead", position);
  };
  protoOf(AbstractJsonLexer).m1e = function (expectedToken, wasConsumed, $super) {
    wasConsumed = wasConsumed === VOID ? true : wasConsumed;
    return $super === VOID ? this.o1e(expectedToken, wasConsumed) : $super.o1e.call(this, expectedToken, wasConsumed);
  };
  protoOf(AbstractJsonLexer).r19 = function () {
    var source = this.h1e();
    var cpos = this.k14_1;
    $l$loop_0: while (true) {
      cpos = this.i1e(cpos);
      if (cpos === -1)
        break $l$loop_0;
      var ch = charSequenceGet(source, cpos);
      if (ch === _Char___init__impl__6a9atx(32) || ch === _Char___init__impl__6a9atx(10) || ch === _Char___init__impl__6a9atx(13) || ch === _Char___init__impl__6a9atx(9)) {
        cpos = cpos + 1 | 0;
        continue $l$loop_0;
      }
      this.k14_1 = cpos;
      return charToTokenClass(ch);
    }
    this.k14_1 = cpos;
    return 10;
  };
  protoOf(AbstractJsonLexer).i1b = function (doConsume) {
    var current = this.k1e();
    current = this.i1e(current);
    var len = charSequenceLength(this.h1e()) - current | 0;
    if (len < 4 || current === -1)
      return false;
    var inductionVariable = 0;
    if (inductionVariable <= 3)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(charSequenceGet('null', i) === charSequenceGet(this.h1e(), current + i | 0)))
          return false;
      }
       while (inductionVariable <= 3);
    if (len > 4 && charToTokenClass(charSequenceGet(this.h1e(), current + 4 | 0)) === 0)
      return false;
    if (doConsume) {
      this.k14_1 = current + 4 | 0;
    }
    return true;
  };
  protoOf(AbstractJsonLexer).t1b = function (doConsume, $super) {
    doConsume = doConsume === VOID ? true : doConsume;
    return $super === VOID ? this.i1b(doConsume) : $super.i1b.call(this, doConsume);
  };
  protoOf(AbstractJsonLexer).j1b = function (isLenient) {
    var token = this.r19();
    var tmp;
    if (isLenient) {
      if (!(token === 1) && !(token === 0))
        return null;
      tmp = this.u19();
    } else {
      if (!(token === 1))
        return null;
      tmp = this.t19();
    }
    var string = tmp;
    this.m14_1 = string;
    return string;
  };
  protoOf(AbstractJsonLexer).p1e = function () {
    this.m14_1 = null;
  };
  protoOf(AbstractJsonLexer).q1e = function (startPos, endPos) {
    // Inline function 'kotlin.text.substring' call
    var this_0 = this.h1e();
    return toString(charSequenceSubSequence(this_0, startPos, endPos));
  };
  protoOf(AbstractJsonLexer).t19 = function () {
    if (!(this.m14_1 == null)) {
      return takePeeked(this);
    }
    return this.m1b();
  };
  protoOf(AbstractJsonLexer).consumeString2 = function (source, startPosition, current) {
    var currentPosition = current;
    var lastPosition = startPosition;
    var char = charSequenceGet(source, currentPosition);
    var usedAppend = false;
    while (!(char === _Char___init__impl__6a9atx(34))) {
      if (char === _Char___init__impl__6a9atx(92)) {
        usedAppend = true;
        currentPosition = this.i1e(appendEscape(this, lastPosition, currentPosition));
        if (currentPosition === -1) {
          this.p18('Unexpected EOF', currentPosition);
        }
        lastPosition = currentPosition;
      } else {
        currentPosition = currentPosition + 1 | 0;
        if (currentPosition >= charSequenceLength(source)) {
          usedAppend = true;
          this.g1e(lastPosition, currentPosition);
          currentPosition = this.i1e(currentPosition);
          if (currentPosition === -1) {
            this.p18('Unexpected EOF', currentPosition);
          }
          lastPosition = currentPosition;
        }
      }
      char = charSequenceGet(source, currentPosition);
    }
    var tmp;
    if (!usedAppend) {
      tmp = this.q1e(lastPosition, currentPosition);
    } else {
      tmp = decodedString(this, lastPosition, currentPosition);
    }
    var string = tmp;
    this.k14_1 = currentPosition + 1 | 0;
    return string;
  };
  protoOf(AbstractJsonLexer).n1b = function () {
    var result = this.u19();
    if (result === 'null' && wasUnquotedString(this)) {
      this.p18("Unexpected 'null' value instead of string literal");
    }
    return result;
  };
  protoOf(AbstractJsonLexer).u19 = function () {
    if (!(this.m14_1 == null)) {
      return takePeeked(this);
    }
    var current = this.k1e();
    if (current >= charSequenceLength(this.h1e()) || current === -1) {
      this.p18('EOF', current);
    }
    var token = charToTokenClass(charSequenceGet(this.h1e(), current));
    if (token === 1) {
      return this.t19();
    }
    if (!(token === 0)) {
      this.p18('Expected beginning of the string, but got ' + toString_1(charSequenceGet(this.h1e(), current)));
    }
    var usedAppend = false;
    while (charToTokenClass(charSequenceGet(this.h1e(), current)) === 0) {
      current = current + 1 | 0;
      if (current >= charSequenceLength(this.h1e())) {
        usedAppend = true;
        this.g1e(this.k14_1, current);
        var eof = this.i1e(current);
        if (eof === -1) {
          this.k14_1 = current;
          return decodedString(this, 0, 0);
        } else {
          current = eof;
        }
      }
    }
    var tmp;
    if (!usedAppend) {
      tmp = this.q1e(this.k14_1, current);
    } else {
      tmp = decodedString(this, this.k14_1, current);
    }
    var result = tmp;
    this.k14_1 = current;
    return result;
  };
  protoOf(AbstractJsonLexer).g1e = function (fromIndex, toIndex) {
    this.n14_1.oa(this.h1e(), fromIndex, toIndex);
  };
  protoOf(AbstractJsonLexer).l1b = function (allowLenientStrings) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var tokenStack = ArrayList_init_$Create$();
    var lastToken = this.r19();
    if (!(lastToken === 8) && !(lastToken === 6)) {
      this.u19();
      return Unit_instance;
    }
    $l$loop: while (true) {
      lastToken = this.r19();
      if (lastToken === 1) {
        if (allowLenientStrings)
          this.u19();
        else
          this.m1b();
        continue $l$loop;
      }
      var tmp0_subject = lastToken;
      if (tmp0_subject === 8 || tmp0_subject === 6) {
        tokenStack.e(lastToken);
      } else if (tmp0_subject === 9) {
        if (!(last(tokenStack) === 8))
          throw JsonDecodingException_0(this.k14_1, 'found ] instead of } at path: ' + this.l14_1.toString(), this.h1e());
        removeLast(tokenStack);
      } else if (tmp0_subject === 7) {
        if (!(last(tokenStack) === 6))
          throw JsonDecodingException_0(this.k14_1, 'found } instead of ] at path: ' + this.l14_1.toString(), this.h1e());
        removeLast(tokenStack);
      } else if (tmp0_subject === 10) {
        this.p18('Unexpected end of input due to malformed JSON during ignoring unknown keys');
      }
      this.w19();
      if (tokenStack.m() === 0)
        return Unit_instance;
    }
  };
  protoOf(AbstractJsonLexer).toString = function () {
    return "JsonReader(source='" + toString(this.h1e()) + "', currentPosition=" + this.k14_1 + ')';
  };
  protoOf(AbstractJsonLexer).k1b = function (key) {
    var processed = this.q1e(0, this.k14_1);
    var lastIndexOf_0 = lastIndexOf(processed, key);
    this.o18("Encountered an unknown key '" + key + "'", lastIndexOf_0, "Use 'ignoreUnknownKeys = true' in 'Json {}' builder to ignore unknown keys.");
  };
  protoOf(AbstractJsonLexer).o18 = function (message, position, hint) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(hint) === 0) {
      tmp = '';
    } else {
      tmp = '\n' + hint;
    }
    var hintMessage = tmp;
    throw JsonDecodingException_0(position, message + ' at path: ' + this.l14_1.c19() + hintMessage, this.h1e());
  };
  protoOf(AbstractJsonLexer).p18 = function (message, position, hint, $super) {
    position = position === VOID ? this.k14_1 : position;
    hint = hint === VOID ? '' : hint;
    return $super === VOID ? this.o18(message, position, hint) : $super.o18.call(this, message, position, hint);
  };
  protoOf(AbstractJsonLexer).n16 = function () {
    var current = this.k1e();
    current = this.i1e(current);
    if (current >= charSequenceLength(this.h1e()) || current === -1) {
      this.p18('EOF');
    }
    var tmp;
    if (charSequenceGet(this.h1e(), current) === _Char___init__impl__6a9atx(34)) {
      current = current + 1 | 0;
      if (current === charSequenceLength(this.h1e())) {
        this.p18('EOF');
      }
      tmp = true;
    } else {
      tmp = false;
    }
    var hasQuotation = tmp;
    var accumulator = new Long(0, 0);
    var exponentAccumulator = new Long(0, 0);
    var isNegative = false;
    var isExponentPositive = false;
    var hasExponent = false;
    var start = current;
    $l$loop_4: while (!(current === charSequenceLength(this.h1e()))) {
      var ch = charSequenceGet(this.h1e(), current);
      if ((ch === _Char___init__impl__6a9atx(101) || ch === _Char___init__impl__6a9atx(69)) && !hasExponent) {
        if (current === start) {
          this.p18('Unexpected symbol ' + toString_1(ch) + ' in numeric literal');
        }
        isExponentPositive = true;
        hasExponent = true;
        current = current + 1 | 0;
        continue $l$loop_4;
      }
      if (ch === _Char___init__impl__6a9atx(45) && hasExponent) {
        if (current === start) {
          this.p18("Unexpected symbol '-' in numeric literal");
        }
        isExponentPositive = false;
        current = current + 1 | 0;
        continue $l$loop_4;
      }
      if (ch === _Char___init__impl__6a9atx(43) && hasExponent) {
        if (current === start) {
          this.p18("Unexpected symbol '+' in numeric literal");
        }
        isExponentPositive = true;
        current = current + 1 | 0;
        continue $l$loop_4;
      }
      if (ch === _Char___init__impl__6a9atx(45)) {
        if (!(current === start)) {
          this.p18("Unexpected symbol '-' in numeric literal");
        }
        isNegative = true;
        current = current + 1 | 0;
        continue $l$loop_4;
      }
      var token = charToTokenClass(ch);
      if (!(token === 0))
        break $l$loop_4;
      current = current + 1 | 0;
      var digit = Char__minus_impl_a2frrh(ch, _Char___init__impl__6a9atx(48));
      if (!(0 <= digit ? digit <= 9 : false)) {
        this.p18("Unexpected symbol '" + toString_1(ch) + "' in numeric literal");
      }
      if (hasExponent) {
        // Inline function 'kotlin.Long.plus' call
        // Inline function 'kotlin.Long.times' call
        exponentAccumulator = exponentAccumulator.m2(toLong(10)).k2(toLong(digit));
        continue $l$loop_4;
      }
      // Inline function 'kotlin.Long.minus' call
      // Inline function 'kotlin.Long.times' call
      accumulator = accumulator.m2(toLong(10)).l2(toLong(digit));
      if (accumulator.z(new Long(0, 0)) > 0) {
        this.p18('Numeric value overflow');
      }
    }
    var hasChars = !(current === start);
    if (start === current || (isNegative && start === (current - 1 | 0))) {
      this.p18('Expected numeric literal');
    }
    if (hasQuotation) {
      if (!hasChars) {
        this.p18('EOF');
      }
      if (!(charSequenceGet(this.h1e(), current) === _Char___init__impl__6a9atx(34))) {
        this.p18('Expected closing quotation mark');
      }
      current = current + 1 | 0;
    }
    this.k14_1 = current;
    if (hasExponent) {
      var doubleAccumulator = accumulator.z2() * consumeNumericLiteral$calculateExponent(exponentAccumulator, isExponentPositive);
      if (doubleAccumulator > (new Long(-1, 2147483647)).z2() || doubleAccumulator < (new Long(0, -2147483648)).z2()) {
        this.p18('Numeric value overflow');
      }
      // Inline function 'kotlin.math.floor' call
      if (!(Math.floor(doubleAccumulator) === doubleAccumulator)) {
        this.p18("Can't convert " + doubleAccumulator + ' to Long');
      }
      accumulator = numberToLong(doubleAccumulator);
    }
    var tmp_0;
    if (isNegative) {
      tmp_0 = accumulator;
    } else if (!accumulator.equals(new Long(0, -2147483648))) {
      tmp_0 = accumulator.p2();
    } else {
      this.p18('Numeric value overflow');
    }
    return tmp_0;
  };
  protoOf(AbstractJsonLexer).u1b = function () {
    var current = this.k1e();
    if (current === charSequenceLength(this.h1e())) {
      this.p18('EOF');
    }
    var tmp;
    if (charSequenceGet(this.h1e(), current) === _Char___init__impl__6a9atx(34)) {
      current = current + 1 | 0;
      tmp = true;
    } else {
      tmp = false;
    }
    var hasQuotation = tmp;
    var result = consumeBoolean2(this, current);
    if (hasQuotation) {
      if (this.k14_1 === charSequenceLength(this.h1e())) {
        this.p18('EOF');
      }
      if (!(charSequenceGet(this.h1e(), this.k14_1) === _Char___init__impl__6a9atx(34))) {
        this.p18('Expected closing quotation mark');
      }
      this.k14_1 = this.k14_1 + 1 | 0;
    }
    return result;
  };
  function charToTokenClass(c) {
    var tmp;
    // Inline function 'kotlin.code' call
    if (Char__toInt_impl_vasixd(c) < 126) {
      var tmp_0 = CharMappings_getInstance().s1e_1;
      // Inline function 'kotlin.code' call
      tmp = tmp_0[Char__toInt_impl_vasixd(c)];
    } else {
      tmp = 0;
    }
    return tmp;
  }
  function tokenDescription(token) {
    return token === 1 ? "quotation mark '\"'" : token === 2 ? "string escape sequence '\\'" : token === 4 ? "comma ','" : token === 5 ? "colon ':'" : token === 6 ? "start of the object '{'" : token === 7 ? "end of the object '}'" : token === 8 ? "start of the array '['" : token === 9 ? "end of the array ']'" : token === 10 ? 'end of the input' : token === 127 ? 'invalid token' : 'valid token';
  }
  function escapeToChar(c) {
    return c < 117 ? CharMappings_getInstance().r1e_1[c] : _Char___init__impl__6a9atx(0);
  }
  function initEscape($this) {
    var inductionVariable = 0;
    if (inductionVariable <= 31)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        initC2ESC($this, i, _Char___init__impl__6a9atx(117));
      }
       while (inductionVariable <= 31);
    initC2ESC($this, 8, _Char___init__impl__6a9atx(98));
    initC2ESC($this, 9, _Char___init__impl__6a9atx(116));
    initC2ESC($this, 10, _Char___init__impl__6a9atx(110));
    initC2ESC($this, 12, _Char___init__impl__6a9atx(102));
    initC2ESC($this, 13, _Char___init__impl__6a9atx(114));
    initC2ESC_0($this, _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(47));
    initC2ESC_0($this, _Char___init__impl__6a9atx(34), _Char___init__impl__6a9atx(34));
    initC2ESC_0($this, _Char___init__impl__6a9atx(92), _Char___init__impl__6a9atx(92));
  }
  function initCharToToken($this) {
    var inductionVariable = 0;
    if (inductionVariable <= 32)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        initC2TC($this, i, 127);
      }
       while (inductionVariable <= 32);
    initC2TC($this, 9, 3);
    initC2TC($this, 10, 3);
    initC2TC($this, 13, 3);
    initC2TC($this, 32, 3);
    initC2TC_0($this, _Char___init__impl__6a9atx(44), 4);
    initC2TC_0($this, _Char___init__impl__6a9atx(58), 5);
    initC2TC_0($this, _Char___init__impl__6a9atx(123), 6);
    initC2TC_0($this, _Char___init__impl__6a9atx(125), 7);
    initC2TC_0($this, _Char___init__impl__6a9atx(91), 8);
    initC2TC_0($this, _Char___init__impl__6a9atx(93), 9);
    initC2TC_0($this, _Char___init__impl__6a9atx(34), 1);
    initC2TC_0($this, _Char___init__impl__6a9atx(92), 2);
  }
  function initC2ESC($this, c, esc) {
    if (!(esc === _Char___init__impl__6a9atx(117))) {
      // Inline function 'kotlin.code' call
      var tmp$ret$0 = Char__toInt_impl_vasixd(esc);
      $this.r1e_1[tmp$ret$0] = numberToChar(c);
    }
  }
  function initC2ESC_0($this, c, esc) {
    // Inline function 'kotlin.code' call
    var tmp$ret$0 = Char__toInt_impl_vasixd(c);
    return initC2ESC($this, tmp$ret$0, esc);
  }
  function initC2TC($this, c, cl) {
    $this.s1e_1[c] = cl;
  }
  function initC2TC_0($this, c, cl) {
    // Inline function 'kotlin.code' call
    var tmp$ret$0 = Char__toInt_impl_vasixd(c);
    return initC2TC($this, tmp$ret$0, cl);
  }
  function CharMappings() {
    CharMappings_instance = this;
    this.r1e_1 = charArray(117);
    this.s1e_1 = new Int8Array(126);
    initEscape(this);
    initCharToToken(this);
  }
  var CharMappings_instance;
  function CharMappings_getInstance() {
    if (CharMappings_instance == null)
      new CharMappings();
    return CharMappings_instance;
  }
  function StringJsonLexerWithComments(source) {
    StringJsonLexer.call(this, source);
  }
  protoOf(StringJsonLexerWithComments).w19 = function () {
    var source = this.h1e();
    var cpos = this.k1e();
    if (cpos >= source.length || cpos === -1)
      return 10;
    this.k14_1 = cpos + 1 | 0;
    return charToTokenClass(charSequenceGet(source, cpos));
  };
  protoOf(StringJsonLexerWithComments).s19 = function () {
    var current = this.k1e();
    if (current >= this.h1e().length || current === -1)
      return false;
    return this.l1e(charSequenceGet(this.h1e(), current));
  };
  protoOf(StringJsonLexerWithComments).g1b = function (expected) {
    var source = this.h1e();
    var current = this.k1e();
    if (current >= source.length || current === -1) {
      this.k14_1 = -1;
      this.n1e(expected);
    }
    var c = charSequenceGet(source, current);
    this.k14_1 = current + 1 | 0;
    if (c === expected)
      return Unit_instance;
    else {
      this.n1e(expected);
    }
  };
  protoOf(StringJsonLexerWithComments).r19 = function () {
    var source = this.h1e();
    var cpos = this.k1e();
    if (cpos >= source.length || cpos === -1)
      return 10;
    this.k14_1 = cpos;
    return charToTokenClass(charSequenceGet(source, cpos));
  };
  protoOf(StringJsonLexerWithComments).k1e = function () {
    var current = this.k14_1;
    if (current === -1)
      return current;
    var source = this.h1e();
    $l$loop_1: while (current < source.length) {
      var c = charSequenceGet(source, current);
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.isWs' call
      if (c === _Char___init__impl__6a9atx(32) || c === _Char___init__impl__6a9atx(10) || c === _Char___init__impl__6a9atx(13) || c === _Char___init__impl__6a9atx(9)) {
        current = current + 1 | 0;
        continue $l$loop_1;
      }
      if (c === _Char___init__impl__6a9atx(47) && (current + 1 | 0) < source.length) {
        var tmp0_subject = charSequenceGet(source, current + 1 | 0);
        if (tmp0_subject === _Char___init__impl__6a9atx(47)) {
          current = indexOf_0(source, _Char___init__impl__6a9atx(10), current + 2 | 0);
          if (current === -1) {
            current = source.length;
          } else {
            current = current + 1 | 0;
          }
          continue $l$loop_1;
        } else if (tmp0_subject === _Char___init__impl__6a9atx(42)) {
          current = indexOf(source, '*/', current + 2 | 0);
          if (current === -1) {
            this.k14_1 = source.length;
            this.p18('Expected end of the block comment: "*/", but had EOF instead');
          } else {
            current = current + 2 | 0;
          }
          continue $l$loop_1;
        }
      }
      break $l$loop_1;
    }
    this.k14_1 = current;
    return current;
  };
  function StringJsonLexer(source) {
    AbstractJsonLexer.call(this);
    this.c1f_1 = source;
  }
  protoOf(StringJsonLexer).h1e = function () {
    return this.c1f_1;
  };
  protoOf(StringJsonLexer).i1e = function (position) {
    return position < this.h1e().length ? position : -1;
  };
  protoOf(StringJsonLexer).w19 = function () {
    var source = this.h1e();
    var cpos = this.k14_1;
    $l$loop: while (!(cpos === -1) && cpos < source.length) {
      var _unary__edvuaz = cpos;
      cpos = _unary__edvuaz + 1 | 0;
      var c = charSequenceGet(source, _unary__edvuaz);
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.isWs' call
      if (c === _Char___init__impl__6a9atx(32) || c === _Char___init__impl__6a9atx(10) || c === _Char___init__impl__6a9atx(13) || c === _Char___init__impl__6a9atx(9))
        continue $l$loop;
      this.k14_1 = cpos;
      return charToTokenClass(c);
    }
    this.k14_1 = source.length;
    return 10;
  };
  protoOf(StringJsonLexer).s19 = function () {
    var current = this.k14_1;
    if (current === -1)
      return false;
    var source = this.h1e();
    $l$loop: while (current < source.length) {
      var c = charSequenceGet(source, current);
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.isWs' call
      if (c === _Char___init__impl__6a9atx(32) || c === _Char___init__impl__6a9atx(10) || c === _Char___init__impl__6a9atx(13) || c === _Char___init__impl__6a9atx(9)) {
        current = current + 1 | 0;
        continue $l$loop;
      }
      this.k14_1 = current;
      return this.l1e(c);
    }
    this.k14_1 = current;
    return false;
  };
  protoOf(StringJsonLexer).k1e = function () {
    var current = this.k14_1;
    if (current === -1)
      return current;
    var source = this.h1e();
    $l$loop: while (current < source.length) {
      var c = charSequenceGet(source, current);
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.isWs' call
      if (c === _Char___init__impl__6a9atx(32) || c === _Char___init__impl__6a9atx(10) || c === _Char___init__impl__6a9atx(13) || c === _Char___init__impl__6a9atx(9)) {
        current = current + 1 | 0;
      } else {
        break $l$loop;
      }
    }
    this.k14_1 = current;
    return current;
  };
  protoOf(StringJsonLexer).g1b = function (expected) {
    if (this.k14_1 === -1) {
      this.n1e(expected);
    }
    var source = this.h1e();
    var cpos = this.k14_1;
    $l$loop: while (cpos < source.length) {
      var _unary__edvuaz = cpos;
      cpos = _unary__edvuaz + 1 | 0;
      var c = charSequenceGet(source, _unary__edvuaz);
      // Inline function 'kotlinx.serialization.json.internal.AbstractJsonLexer.isWs' call
      if (c === _Char___init__impl__6a9atx(32) || c === _Char___init__impl__6a9atx(10) || c === _Char___init__impl__6a9atx(13) || c === _Char___init__impl__6a9atx(9))
        continue $l$loop;
      this.k14_1 = cpos;
      if (c === expected)
        return Unit_instance;
      this.n1e(expected);
    }
    this.k14_1 = -1;
    this.n1e(expected);
  };
  protoOf(StringJsonLexer).m1b = function () {
    this.g1b(_Char___init__impl__6a9atx(34));
    var current = this.k14_1;
    var closingQuote = indexOf_0(this.h1e(), _Char___init__impl__6a9atx(34), current);
    if (closingQuote === -1) {
      this.u19();
      this.o1e(1, false);
    }
    var inductionVariable = current;
    if (inductionVariable < closingQuote)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (charSequenceGet(this.h1e(), i) === _Char___init__impl__6a9atx(92)) {
          return this.consumeString2(this.h1e(), this.k14_1, i);
        }
      }
       while (inductionVariable < closingQuote);
    this.k14_1 = closingQuote + 1 | 0;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    return this.h1e().substring(current, closingQuote);
  };
  protoOf(StringJsonLexer).o1b = function (keyToMatch, isLenient) {
    var positionSnapshot = this.k14_1;
    try {
      if (!(this.w19() === 6))
        return null;
      var firstKey = this.j1b(isLenient);
      if (!(firstKey === keyToMatch))
        return null;
      this.p1e();
      if (!(this.w19() === 5))
        return null;
      return this.j1b(isLenient);
    }finally {
      this.k14_1 = positionSnapshot;
      this.p1e();
    }
  };
  function StringJsonLexer_0(json, source) {
    return !json.v13_1.x15_1 ? new StringJsonLexer(source) : new StringJsonLexerWithComments(source);
  }
  function get_schemaCache(_this__u8e3s4) {
    return _this__u8e3s4.x13_1;
  }
  function JsonToStringWriter() {
    this.a14_1 = StringBuilder_init_$Create$_0(128);
  }
  protoOf(JsonToStringWriter).t17 = function (value) {
    this.a14_1.sa(value);
  };
  protoOf(JsonToStringWriter).n17 = function (char) {
    this.a14_1.e7(char);
  };
  protoOf(JsonToStringWriter).p17 = function (text) {
    this.a14_1.d7(text);
  };
  protoOf(JsonToStringWriter).z17 = function (text) {
    printQuoted(this.a14_1, text);
  };
  protoOf(JsonToStringWriter).b14 = function () {
    this.a14_1.va();
  };
  protoOf(JsonToStringWriter).toString = function () {
    return this.a14_1.toString();
  };
  function createMapForCache(initialCapacity) {
    return HashMap_init_$Create$(initialCapacity);
  }
  //region block: post-declaration
  protoOf(defer$1).bk = get_isNullable;
  protoOf(defer$1).gk = get_isInline;
  protoOf(defer$1).ik = get_annotations;
  protoOf(PolymorphismValidator).l13 = contextual;
  //endregion
  //region block: init
  Companion_instance = new Companion();
  Companion_instance_0 = new Companion_0();
  Companion_instance_1 = new Companion_1();
  Companion_instance_2 = new Companion_2();
  Tombstone_instance = new Tombstone();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = Json_0;
  //endregion
  return _;
}));



/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/esm/extends.js":
/*!****************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _extends)
/* harmony export */ });
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}


/***/ }),

/***/ "../../node_modules/stylis/src/Enum.js":
/*!*********************************************!*\
  !*** ../../node_modules/stylis/src/Enum.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CHARSET: () => (/* binding */ CHARSET),
/* harmony export */   COMMENT: () => (/* binding */ COMMENT),
/* harmony export */   COUNTER_STYLE: () => (/* binding */ COUNTER_STYLE),
/* harmony export */   DECLARATION: () => (/* binding */ DECLARATION),
/* harmony export */   DOCUMENT: () => (/* binding */ DOCUMENT),
/* harmony export */   FONT_FACE: () => (/* binding */ FONT_FACE),
/* harmony export */   FONT_FEATURE_VALUES: () => (/* binding */ FONT_FEATURE_VALUES),
/* harmony export */   IMPORT: () => (/* binding */ IMPORT),
/* harmony export */   KEYFRAMES: () => (/* binding */ KEYFRAMES),
/* harmony export */   LAYER: () => (/* binding */ LAYER),
/* harmony export */   MEDIA: () => (/* binding */ MEDIA),
/* harmony export */   MOZ: () => (/* binding */ MOZ),
/* harmony export */   MS: () => (/* binding */ MS),
/* harmony export */   NAMESPACE: () => (/* binding */ NAMESPACE),
/* harmony export */   PAGE: () => (/* binding */ PAGE),
/* harmony export */   RULESET: () => (/* binding */ RULESET),
/* harmony export */   SUPPORTS: () => (/* binding */ SUPPORTS),
/* harmony export */   VIEWPORT: () => (/* binding */ VIEWPORT),
/* harmony export */   WEBKIT: () => (/* binding */ WEBKIT)
/* harmony export */ });
var MS = '-ms-'
var MOZ = '-moz-'
var WEBKIT = '-webkit-'

var COMMENT = 'comm'
var RULESET = 'rule'
var DECLARATION = 'decl'

var PAGE = '@page'
var MEDIA = '@media'
var IMPORT = '@import'
var CHARSET = '@charset'
var VIEWPORT = '@viewport'
var SUPPORTS = '@supports'
var DOCUMENT = '@document'
var NAMESPACE = '@namespace'
var KEYFRAMES = '@keyframes'
var FONT_FACE = '@font-face'
var COUNTER_STYLE = '@counter-style'
var FONT_FEATURE_VALUES = '@font-feature-values'
var LAYER = '@layer'


/***/ }),

/***/ "../../node_modules/stylis/src/Middleware.js":
/*!***************************************************!*\
  !*** ../../node_modules/stylis/src/Middleware.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   middleware: () => (/* binding */ middleware),
/* harmony export */   namespace: () => (/* binding */ namespace),
/* harmony export */   prefixer: () => (/* binding */ prefixer),
/* harmony export */   rulesheet: () => (/* binding */ rulesheet)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Enum.js */ "../../node_modules/stylis/src/Enum.js");
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ "../../node_modules/stylis/src/Utility.js");
/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Tokenizer.js */ "../../node_modules/stylis/src/Tokenizer.js");
/* harmony import */ var _Serializer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Serializer.js */ "../../node_modules/stylis/src/Serializer.js");
/* harmony import */ var _Prefixer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Prefixer.js */ "../../node_modules/stylis/src/Prefixer.js");






/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware (collection) {
	var length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(collection)

	return function (element, index, children, callback) {
		var output = ''

		for (var i = 0; i < length; i++)
			output += collection[i](element, index, children, callback) || ''

		return output
	}
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet (callback) {
	return function (element) {
		if (!element.root)
			if (element = element.return)
				callback(element)
	}
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 */
function prefixer (element, index, children, callback) {
	if (element.length > -1)
		if (!element.return)
			switch (element.type) {
				case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.DECLARATION: element.return = (0,_Prefixer_js__WEBPACK_IMPORTED_MODULE_2__.prefix)(element.value, element.length, children)
					return
				case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.KEYFRAMES:
					return (0,_Serializer_js__WEBPACK_IMPORTED_MODULE_3__.serialize)([(0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {value: (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(element.value, '@', '@' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT)})], callback)
				case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.RULESET:
					if (element.length)
						return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.combine)(element.props, function (value) {
							switch ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /(::plac\w+|:read-\w+)/)) {
								// :read-(only|write)
								case ':read-only': case ':read-write':
									return (0,_Serializer_js__WEBPACK_IMPORTED_MODULE_3__.serialize)([(0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {props: [(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(read-\w+)/, ':' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + '$1')]})], callback)
								// :placeholder
								case '::placeholder':
									return (0,_Serializer_js__WEBPACK_IMPORTED_MODULE_3__.serialize)([
										(0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {props: [(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(plac\w+)/, ':' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + 'input-$1')]}),
										(0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {props: [(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(plac\w+)/, ':' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + '$1')]}),
										(0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.copy)(element, {props: [(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /:(plac\w+)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'input-$1')]})
									], callback)
							}

							return ''
						})
			}
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 */
function namespace (element) {
	switch (element.type) {
		case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.RULESET:
			element.props = element.props.map(function (value) {
				return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.combine)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_4__.tokenize)(value), function (value, index, children) {
					switch ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, 0)) {
						// \f
						case 12:
							return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(value, 1, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(value))
						// \0 ( + > ~
						case 0: case 40: case 43: case 62: case 126:
							return value
						// :
						case 58:
							if (children[++index] === 'global')
								children[index] = '', children[++index] = '\f' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(children[index], index = 1, -1)
						// \s
						case 32:
							return index === 1 ? '' : value
						default:
							switch (index) {
								case 0: element = value
									return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(children) > 1 ? '' : value
								case index = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(children) - 1: case 2:
									return index === 2 ? value + element + element : value + element
								default:
									return value
							}
					}
				})
			})
	}
}


/***/ }),

/***/ "../../node_modules/stylis/src/Parser.js":
/*!***********************************************!*\
  !*** ../../node_modules/stylis/src/Parser.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   comment: () => (/* binding */ comment),
/* harmony export */   compile: () => (/* binding */ compile),
/* harmony export */   declaration: () => (/* binding */ declaration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   ruleset: () => (/* binding */ ruleset)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Enum.js */ "../../node_modules/stylis/src/Enum.js");
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utility.js */ "../../node_modules/stylis/src/Utility.js");
/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ "../../node_modules/stylis/src/Tokenizer.js");




/**
 * @param {string} value
 * @return {object[]}
 */
function compile (value) {
	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.dealloc)(parse('', null, null, null, [''], value = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.alloc)(value), 0, [0], value))
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	var index = 0
	var offset = 0
	var length = pseudo
	var atrule = 0
	var property = 0
	var previous = 0
	var variable = 1
	var scanning = 1
	var ampersand = 1
	var character = 0
	var type = ''
	var props = rules
	var children = rulesets
	var reference = rule
	var characters = type

	while (scanning)
		switch (previous = character, character = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)()) {
			// (
			case 40:
				if (previous != 108 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, length - 1) == 58) {
					if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.indexof)(characters += (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)(character), '&', '&\f'), '&\f') != -1)
						ampersand = -1
					break
				}
			// " ' [
			case 34: case 39: case 91:
				characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)(character)
				break
			// \t \n \r \s
			case 9: case 10: case 13: case 32:
				characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.whitespace)(previous)
				break
			// \
			case 92:
				characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.escaping)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)() - 1, 7)
				continue
			// /
			case 47:
				switch ((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)()) {
					case 42: case 47:
						;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(comment((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.commenter)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)(), (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)()), root, parent), declarations)
						break
					default:
						characters += '/'
				}
				break
			// {
			case 123 * variable:
				points[index++] = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) * ampersand
			// } ; \0
			case 125 * variable: case 59: case 0:
				switch (character) {
					// \0 }
					case 0: case 125: scanning = 0
					// ;
					case 59 + offset: if (ampersand == -1) characters = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(characters, /\f/g, '')
						if (property > 0 && ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) - length))
							(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(characters, ' ', '') + ';', rule, parent, length - 2), declarations)
						break
					// @ ;
					case 59: characters += ';'
					// { rule/at-rule
					default:
						;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets)

						if (character === 123)
							if (offset === 0)
								parse(characters, root, reference, reference, props, rulesets, length, points, children)
							else
								switch (atrule === 99 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, 3) === 110 ? 100 : atrule) {
									// d l m s
									case 100: case 108: case 109: case 115:
										parse(value, reference, reference, rule && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children)
										break
									default:
										parse(characters, reference, reference, reference, [''], children, 0, points, children)
								}
				}

				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo
				break
			// :
			case 58:
				length = 1 + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters), property = previous
			default:
				if (variable < 1)
					if (character == 123)
						--variable
					else if (character == 125 && variable++ == 0 && (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.prev)() == 125)
						continue

				switch (characters += (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.from)(character), character * variable) {
					// &
					case 38:
						ampersand = offset > 0 ? 1 : (characters += '\f', -1)
						break
					// ,
					case 44:
						points[index++] = ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) - 1) * ampersand, ampersand = 1
						break
					// @
					case 64:
						// -
						if ((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)() === 45)
							characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)())

						atrule = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)(), offset = length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(type = characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.identifier)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)())), character++
						break
					// -
					case 45:
						if (previous === 45 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) == 2)
							variable = 0
				}
		}

	return rulesets
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
	var post = offset - 1
	var rule = offset === 0 ? rules : ['']
	var size = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.sizeof)(rule)

	for (var i = 0, j = 0, k = 0; i < index; ++i)
		for (var x = 0, y = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, post + 1, post = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.abs)(j = points[i])), z = value; x < size; ++x)
			if (z = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.trim)(j > 0 ? rule[x] + ' ' + y : (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(y, /&\f/g, rule[x])))
				props[k++] = z

	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, offset === 0 ? _Enum_js__WEBPACK_IMPORTED_MODULE_2__.RULESET : type, props, children, length)
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment (value, root, parent) {
	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, _Enum_js__WEBPACK_IMPORTED_MODULE_2__.COMMENT, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.from)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.char)()), (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, 2, -2), 0)
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration (value, root, parent, length) {
	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, _Enum_js__WEBPACK_IMPORTED_MODULE_2__.DECLARATION, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, 0, length), (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, length + 1, -1), length)
}


/***/ }),

/***/ "../../node_modules/stylis/src/Prefixer.js":
/*!*************************************************!*\
  !*** ../../node_modules/stylis/src/Prefixer.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   prefix: () => (/* binding */ prefix)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Enum.js */ "../../node_modules/stylis/src/Enum.js");
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ "../../node_modules/stylis/src/Utility.js");



/**
 * @param {string} value
 * @param {number} length
 * @param {object[]} children
 * @return {string}
 */
function prefix (value, length, children) {
	switch ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.hash)(value, length)) {
		// color-adjust
		case 5103:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + 'print-' + value + value
		// animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
		case 5737: case 4201: case 3177: case 3433: case 1641: case 4457: case 2921:
		// text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
		case 5572: case 6356: case 5844: case 3191: case 6645: case 3005:
		// mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
		case 6391: case 5879: case 5623: case 6135: case 4599: case 4855:
		// background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
		case 4215: case 6389: case 5109: case 5365: case 5621: case 3829:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + value
		// tab-size
		case 4789:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + value + value
		// appearance, user-select, transform, hyphens, text-size-adjust
		case 5349: case 4246: case 4810: case 6968: case 2756:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + value + value
		// writing-mode
		case 5936:
			switch ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 11)) {
				// vertical-l(r)
				case 114:
					return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /[svh]\w+-[tblr]{2}/, 'tb') + value
				// vertical-r(l)
				case 108:
					return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value
				// horizontal(-)tb
				case 45:
					return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /[svh]\w+-[tblr]{2}/, 'lr') + value
				// default: fallthrough to below
			}
		// flex, flex-direction, scroll-snap-type, writing-mode
		case 6828: case 4268: case 2903:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + value + value
		// order
		case 6165:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'flex-' + value + value
		// align-items
		case 5187:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(\w+).+(:[^]+)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + 'box-$1$2' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'flex-$1$2') + value
		// align-self
		case 5443:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'flex-item-' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /flex-|-self/g, '') + (!(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /flex-|baseline/) ? _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'grid-row-' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /flex-|-self/g, '') : '') + value
		// align-content
		case 4675:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'flex-line-pack' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /align-content|flex-|-self/g, '') + value
		// flex-shrink
		case 5548:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, 'shrink', 'negative') + value
		// flex-basis
		case 5292:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, 'basis', 'preferred-size') + value
		// flex-grow
		case 6060:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + 'box-' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, '-grow', '') + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, 'grow', 'positive') + value
		// transition
		case 4554:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /([^-])(transform)/g, '$1' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$2') + value
		// cursor
		case 6187:
			return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(zoom-|grab)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$1'), /(image-set)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$1'), value, '') + value
		// background, background-image
		case 5495: case 3959:
			return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(image-set\([^]*)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$1' + '$`$1')
		// justify-content
		case 4968:
			return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+:)(flex-)?(.*)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + 'box-pack:$3' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + value + value
		// justify-self
		case 4200:
			if (!(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /flex-|baseline/)) return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'grid-column-align' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(value, length) + value
			break
		// grid-template-(columns|rows)
		case 2592: case 3360:
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, 'template-', '') + value
		// grid-(row|column)-start
		case 4384: case 3616:
			if (children && children.some(function (element, index) { return length = index, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(element.props, /grid-\w+-end/) })) {
				return ~(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.indexof)(value + (children = children[length].value), 'span') ? value : (_Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, '-start', '') + value + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + 'grid-row-span:' + (~(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.indexof)(children, 'span') ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(children, /\d+/) : +(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(children, /\d+/) - +(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(value, /\d+/)) + ';')
			}
			return _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, '-start', '') + value
		// grid-(row|column)-end
		case 4896: case 4128:
			return (children && children.some(function (element) { return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.match)(element.props, /grid-\w+-start/) })) ? value : _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, '-end', '-span'), 'span ', '') + value
		// (margin|padding)-inline-(start|end)
		case 4095: case 3583: case 4068: case 2532:
			return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+)-inline(.+)/, _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$1$2') + value
		// (min|max)?(width|height|inline-size|block-size)
		case 8116: case 7059: case 5753: case 5535:
		case 5445: case 5701: case 4933: case 4677:
		case 5533: case 5789: case 5021: case 4765:
			// stretch, max-content, min-content, fill-available
			if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(value) - 1 - length > 6)
				switch ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 1)) {
					// (m)ax-content, (m)in-content
					case 109:
						// -
						if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 4) !== 45)
							break
					// (f)ill-available, (f)it-content
					case 102:
						return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+:)(.+)-([^]+)/, '$1' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$2-$3' + '$1' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MOZ + ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 3) == 108 ? '$3' : '$2-$3')) + value
					// (s)tretch
					case 115:
						return ~(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.indexof)(value, 'stretch') ? prefix((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, 'stretch', 'fill-available'), length, children) + value : value
				}
			break
		// grid-(column|row)
		case 5152: case 5920:
			return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function (_, a, b, c, d, e, f) { return (_Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + a + ':' + b + f) + (c ? (_Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + a + '-span:' + (d ? e : +e - +b)) + f : '') + value })
		// position: sticky
		case 4949:
			// stick(y)?
			if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, length + 6) === 121)
				return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, ':', ':' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT) + value
			break
		// display: (flex|inline-flex|grid|inline-grid)
		case 6444:
			switch ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, 14) === 45 ? 18 : 11)) {
				// (inline-)?fle(x)
				case 120:
					return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, '$1' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.WEBKIT + '$2$3' + '$1' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS + '$2box$3') + value
				// (inline-)?gri(d)
				case 100:
					return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, ':', ':' + _Enum_js__WEBPACK_IMPORTED_MODULE_1__.MS) + value
			}
			break
		// scroll-margin, scroll-margin-(top|right|bottom|left)
		case 5719: case 2647: case 2135: case 3927: case 2391:
			return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.replace)(value, 'scroll-', 'scroll-snap-') + value
	}

	return value
}


/***/ }),

/***/ "../../node_modules/stylis/src/Serializer.js":
/*!***************************************************!*\
  !*** ../../node_modules/stylis/src/Serializer.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   serialize: () => (/* binding */ serialize),
/* harmony export */   stringify: () => (/* binding */ stringify)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Enum.js */ "../../node_modules/stylis/src/Enum.js");
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ "../../node_modules/stylis/src/Utility.js");



/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize (children, callback) {
	var output = ''
	var length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.sizeof)(children)

	for (var i = 0; i < length; i++)
		output += callback(children[i], i, children, callback) || ''

	return output
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify (element, index, children, callback) {
	switch (element.type) {
		case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.LAYER: if (element.children.length) break
		case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.IMPORT: case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.DECLARATION: return element.return = element.return || element.value
		case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.COMMENT: return ''
		case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
		case _Enum_js__WEBPACK_IMPORTED_MODULE_1__.RULESET: element.value = element.props.join(',')
	}

	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
}


/***/ }),

/***/ "../../node_modules/stylis/src/Tokenizer.js":
/*!**************************************************!*\
  !*** ../../node_modules/stylis/src/Tokenizer.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   alloc: () => (/* binding */ alloc),
/* harmony export */   caret: () => (/* binding */ caret),
/* harmony export */   char: () => (/* binding */ char),
/* harmony export */   character: () => (/* binding */ character),
/* harmony export */   characters: () => (/* binding */ characters),
/* harmony export */   column: () => (/* binding */ column),
/* harmony export */   commenter: () => (/* binding */ commenter),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   dealloc: () => (/* binding */ dealloc),
/* harmony export */   delimit: () => (/* binding */ delimit),
/* harmony export */   delimiter: () => (/* binding */ delimiter),
/* harmony export */   escaping: () => (/* binding */ escaping),
/* harmony export */   identifier: () => (/* binding */ identifier),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   line: () => (/* binding */ line),
/* harmony export */   next: () => (/* binding */ next),
/* harmony export */   node: () => (/* binding */ node),
/* harmony export */   peek: () => (/* binding */ peek),
/* harmony export */   position: () => (/* binding */ position),
/* harmony export */   prev: () => (/* binding */ prev),
/* harmony export */   slice: () => (/* binding */ slice),
/* harmony export */   token: () => (/* binding */ token),
/* harmony export */   tokenize: () => (/* binding */ tokenize),
/* harmony export */   tokenizer: () => (/* binding */ tokenizer),
/* harmony export */   whitespace: () => (/* binding */ whitespace)
/* harmony export */ });
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ "../../node_modules/stylis/src/Utility.js");


var line = 1
var column = 1
var length = 0
var position = 0
var character = 0
var characters = ''

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy (root, props) {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.assign)(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
}

/**
 * @return {number}
 */
function char () {
	return character
}

/**
 * @return {number}
 */
function prev () {
	character = position > 0 ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, --position) : 0

	if (column--, character === 10)
		column = 1, line--

	return character
}

/**
 * @return {number}
 */
function next () {
	character = position < length ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, position++) : 0

	if (column++, character === 10)
		column = 1, line++

	return character
}

/**
 * @return {number}
 */
function peek () {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, position)
}

/**
 * @return {number}
 */
function caret () {
	return position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return line = column = 1, length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(characters = value), position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.trim)(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {string} value
 * @return {string[]}
 */
function tokenize (value) {
	return dealloc(tokenizer(alloc(value)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (character = peek())
		if (character < 33)
			next()
		else
			break

	return token(type) > 2 || token(character) > 3 ? '' : ' '
}

/**
 * @param {string[]} children
 * @return {string[]}
 */
function tokenizer (children) {
	while (next())
		switch (token(character)) {
			case 0: (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(identifier(position - 1), children)
				break
			case 2: ;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(delimit(character), children)
				break
			default: ;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.from)(character), children)
		}

	return children
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (character) {
			// ] ) " '
			case type:
				return position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(character)
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type)
				break
			// \
			case 92:
				next()
				break
		}

	return position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + character === 47 + 10)
			break
		// /*
		else if (type + character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, position - 1) + '*' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.from)(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next()

	return slice(index, position)
}


/***/ }),

/***/ "../../node_modules/stylis/src/Utility.js":
/*!************************************************!*\
  !*** ../../node_modules/stylis/src/Utility.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   abs: () => (/* binding */ abs),
/* harmony export */   append: () => (/* binding */ append),
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   charat: () => (/* binding */ charat),
/* harmony export */   combine: () => (/* binding */ combine),
/* harmony export */   from: () => (/* binding */ from),
/* harmony export */   hash: () => (/* binding */ hash),
/* harmony export */   indexof: () => (/* binding */ indexof),
/* harmony export */   match: () => (/* binding */ match),
/* harmony export */   replace: () => (/* binding */ replace),
/* harmony export */   sizeof: () => (/* binding */ sizeof),
/* harmony export */   strlen: () => (/* binding */ strlen),
/* harmony export */   substr: () => (/* binding */ substr),
/* harmony export */   trim: () => (/* binding */ trim)
/* harmony export */ });
/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs

/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode

/**
 * @param {object}
 * @return {object}
 */
var assign = Object.assign

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash (value, length) {
	return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
}

/**
 * @param {string} value
 * @return {string}
 */
function trim (value) {
	return value.trim()
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match (value, pattern) {
	return (value = pattern.exec(value)) ? value[0] : value
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace (value, pattern, replacement) {
	return value.replace(pattern, replacement)
}

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof (value, search) {
	return value.indexOf(search)
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat (value, index) {
	return value.charCodeAt(index) | 0
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr (value, begin, end) {
	return value.slice(begin, end)
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen (value) {
	return value.length
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof (value) {
	return value.length
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append (value, array) {
	return array.push(value), value
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine (array, callback) {
	return array.map(callback).join('')
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./kotlin/bgw-bgw-gui.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=bgw-gui.js.map